// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/print-client/ent/recentscan"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecentScanCreate is the builder for creating a RecentScan entity.
type RecentScanCreate struct {
	config
	mutation *RecentScanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetScanValue sets the "scan_value" field.
func (rsc *RecentScanCreate) SetScanValue(s string) *RecentScanCreate {
	rsc.mutation.SetScanValue(s)
	return rsc
}

// SetResponse sets the "response" field.
func (rsc *RecentScanCreate) SetResponse(s string) *RecentScanCreate {
	rsc.mutation.SetResponse(s)
	return rsc
}

// SetScanType sets the "scan_type" field.
func (rsc *RecentScanCreate) SetScanType(rt recentscan.ScanType) *RecentScanCreate {
	rsc.mutation.SetScanType(rt)
	return rsc
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (rsc *RecentScanCreate) SetNillableScanType(rt *recentscan.ScanType) *RecentScanCreate {
	if rt != nil {
		rsc.SetScanType(*rt)
	}
	return rsc
}

// SetCreatedAt sets the "created_at" field.
func (rsc *RecentScanCreate) SetCreatedAt(t time.Time) *RecentScanCreate {
	rsc.mutation.SetCreatedAt(t)
	return rsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rsc *RecentScanCreate) SetNillableCreatedAt(t *time.Time) *RecentScanCreate {
	if t != nil {
		rsc.SetCreatedAt(*t)
	}
	return rsc
}

// Mutation returns the RecentScanMutation object of the builder.
func (rsc *RecentScanCreate) Mutation() *RecentScanMutation {
	return rsc.mutation
}

// Save creates the RecentScan in the database.
func (rsc *RecentScanCreate) Save(ctx context.Context) (*RecentScan, error) {
	rsc.defaults()
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *RecentScanCreate) SaveX(ctx context.Context) *RecentScan {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *RecentScanCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *RecentScanCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *RecentScanCreate) defaults() {
	if _, ok := rsc.mutation.ScanType(); !ok {
		v := recentscan.DefaultScanType
		rsc.mutation.SetScanType(v)
	}
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		v := recentscan.DefaultCreatedAt()
		rsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *RecentScanCreate) check() error {
	if _, ok := rsc.mutation.ScanValue(); !ok {
		return &ValidationError{Name: "scan_value", err: errors.New(`ent: missing required field "RecentScan.scan_value"`)}
	}
	if _, ok := rsc.mutation.Response(); !ok {
		return &ValidationError{Name: "response", err: errors.New(`ent: missing required field "RecentScan.response"`)}
	}
	if _, ok := rsc.mutation.ScanType(); !ok {
		return &ValidationError{Name: "scan_type", err: errors.New(`ent: missing required field "RecentScan.scan_type"`)}
	}
	if v, ok := rsc.mutation.ScanType(); ok {
		if err := recentscan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`ent: validator failed for field "RecentScan.scan_type": %w`, err)}
		}
	}
	if _, ok := rsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RecentScan.created_at"`)}
	}
	return nil
}

func (rsc *RecentScanCreate) sqlSave(ctx context.Context) (*RecentScan, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *RecentScanCreate) createSpec() (*RecentScan, *sqlgraph.CreateSpec) {
	var (
		_node = &RecentScan{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(recentscan.Table, sqlgraph.NewFieldSpec(recentscan.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rsc.conflict
	if value, ok := rsc.mutation.ScanValue(); ok {
		_spec.SetField(recentscan.FieldScanValue, field.TypeString, value)
		_node.ScanValue = value
	}
	if value, ok := rsc.mutation.Response(); ok {
		_spec.SetField(recentscan.FieldResponse, field.TypeString, value)
		_node.Response = value
	}
	if value, ok := rsc.mutation.ScanType(); ok {
		_spec.SetField(recentscan.FieldScanType, field.TypeEnum, value)
		_node.ScanType = value
	}
	if value, ok := rsc.mutation.CreatedAt(); ok {
		_spec.SetField(recentscan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RecentScan.Create().
//		SetScanValue(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecentScanUpsert) {
//			SetScanValue(v+v).
//		}).
//		Exec(ctx)
func (rsc *RecentScanCreate) OnConflict(opts ...sql.ConflictOption) *RecentScanUpsertOne {
	rsc.conflict = opts
	return &RecentScanUpsertOne{
		create: rsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RecentScan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rsc *RecentScanCreate) OnConflictColumns(columns ...string) *RecentScanUpsertOne {
	rsc.conflict = append(rsc.conflict, sql.ConflictColumns(columns...))
	return &RecentScanUpsertOne{
		create: rsc,
	}
}

type (
	// RecentScanUpsertOne is the builder for "upsert"-ing
	//  one RecentScan node.
	RecentScanUpsertOne struct {
		create *RecentScanCreate
	}

	// RecentScanUpsert is the "OnConflict" setter.
	RecentScanUpsert struct {
		*sql.UpdateSet
	}
)

// SetScanValue sets the "scan_value" field.
func (u *RecentScanUpsert) SetScanValue(v string) *RecentScanUpsert {
	u.Set(recentscan.FieldScanValue, v)
	return u
}

// UpdateScanValue sets the "scan_value" field to the value that was provided on create.
func (u *RecentScanUpsert) UpdateScanValue() *RecentScanUpsert {
	u.SetExcluded(recentscan.FieldScanValue)
	return u
}

// SetResponse sets the "response" field.
func (u *RecentScanUpsert) SetResponse(v string) *RecentScanUpsert {
	u.Set(recentscan.FieldResponse, v)
	return u
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *RecentScanUpsert) UpdateResponse() *RecentScanUpsert {
	u.SetExcluded(recentscan.FieldResponse)
	return u
}

// SetScanType sets the "scan_type" field.
func (u *RecentScanUpsert) SetScanType(v recentscan.ScanType) *RecentScanUpsert {
	u.Set(recentscan.FieldScanType, v)
	return u
}

// UpdateScanType sets the "scan_type" field to the value that was provided on create.
func (u *RecentScanUpsert) UpdateScanType() *RecentScanUpsert {
	u.SetExcluded(recentscan.FieldScanType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RecentScan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RecentScanUpsertOne) UpdateNewValues() *RecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(recentscan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RecentScan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RecentScanUpsertOne) Ignore() *RecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecentScanUpsertOne) DoNothing() *RecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecentScanCreate.OnConflict
// documentation for more info.
func (u *RecentScanUpsertOne) Update(set func(*RecentScanUpsert)) *RecentScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecentScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetScanValue sets the "scan_value" field.
func (u *RecentScanUpsertOne) SetScanValue(v string) *RecentScanUpsertOne {
	return u.Update(func(s *RecentScanUpsert) {
		s.SetScanValue(v)
	})
}

// UpdateScanValue sets the "scan_value" field to the value that was provided on create.
func (u *RecentScanUpsertOne) UpdateScanValue() *RecentScanUpsertOne {
	return u.Update(func(s *RecentScanUpsert) {
		s.UpdateScanValue()
	})
}

// SetResponse sets the "response" field.
func (u *RecentScanUpsertOne) SetResponse(v string) *RecentScanUpsertOne {
	return u.Update(func(s *RecentScanUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *RecentScanUpsertOne) UpdateResponse() *RecentScanUpsertOne {
	return u.Update(func(s *RecentScanUpsert) {
		s.UpdateResponse()
	})
}

// SetScanType sets the "scan_type" field.
func (u *RecentScanUpsertOne) SetScanType(v recentscan.ScanType) *RecentScanUpsertOne {
	return u.Update(func(s *RecentScanUpsert) {
		s.SetScanType(v)
	})
}

// UpdateScanType sets the "scan_type" field to the value that was provided on create.
func (u *RecentScanUpsertOne) UpdateScanType() *RecentScanUpsertOne {
	return u.Update(func(s *RecentScanUpsert) {
		s.UpdateScanType()
	})
}

// Exec executes the query.
func (u *RecentScanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecentScanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecentScanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RecentScanUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RecentScanUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RecentScanCreateBulk is the builder for creating many RecentScan entities in bulk.
type RecentScanCreateBulk struct {
	config
	err      error
	builders []*RecentScanCreate
	conflict []sql.ConflictOption
}

// Save creates the RecentScan entities in the database.
func (rscb *RecentScanCreateBulk) Save(ctx context.Context) ([]*RecentScan, error) {
	if rscb.err != nil {
		return nil, rscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*RecentScan, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecentScanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *RecentScanCreateBulk) SaveX(ctx context.Context) []*RecentScan {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *RecentScanCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *RecentScanCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RecentScan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecentScanUpsert) {
//			SetScanValue(v+v).
//		}).
//		Exec(ctx)
func (rscb *RecentScanCreateBulk) OnConflict(opts ...sql.ConflictOption) *RecentScanUpsertBulk {
	rscb.conflict = opts
	return &RecentScanUpsertBulk{
		create: rscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RecentScan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rscb *RecentScanCreateBulk) OnConflictColumns(columns ...string) *RecentScanUpsertBulk {
	rscb.conflict = append(rscb.conflict, sql.ConflictColumns(columns...))
	return &RecentScanUpsertBulk{
		create: rscb,
	}
}

// RecentScanUpsertBulk is the builder for "upsert"-ing
// a bulk of RecentScan nodes.
type RecentScanUpsertBulk struct {
	create *RecentScanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RecentScan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RecentScanUpsertBulk) UpdateNewValues() *RecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(recentscan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RecentScan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RecentScanUpsertBulk) Ignore() *RecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecentScanUpsertBulk) DoNothing() *RecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecentScanCreateBulk.OnConflict
// documentation for more info.
func (u *RecentScanUpsertBulk) Update(set func(*RecentScanUpsert)) *RecentScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecentScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetScanValue sets the "scan_value" field.
func (u *RecentScanUpsertBulk) SetScanValue(v string) *RecentScanUpsertBulk {
	return u.Update(func(s *RecentScanUpsert) {
		s.SetScanValue(v)
	})
}

// UpdateScanValue sets the "scan_value" field to the value that was provided on create.
func (u *RecentScanUpsertBulk) UpdateScanValue() *RecentScanUpsertBulk {
	return u.Update(func(s *RecentScanUpsert) {
		s.UpdateScanValue()
	})
}

// SetResponse sets the "response" field.
func (u *RecentScanUpsertBulk) SetResponse(v string) *RecentScanUpsertBulk {
	return u.Update(func(s *RecentScanUpsert) {
		s.SetResponse(v)
	})
}

// UpdateResponse sets the "response" field to the value that was provided on create.
func (u *RecentScanUpsertBulk) UpdateResponse() *RecentScanUpsertBulk {
	return u.Update(func(s *RecentScanUpsert) {
		s.UpdateResponse()
	})
}

// SetScanType sets the "scan_type" field.
func (u *RecentScanUpsertBulk) SetScanType(v recentscan.ScanType) *RecentScanUpsertBulk {
	return u.Update(func(s *RecentScanUpsert) {
		s.SetScanType(v)
	})
}

// UpdateScanType sets the "scan_type" field to the value that was provided on create.
func (u *RecentScanUpsertBulk) UpdateScanType() *RecentScanUpsertBulk {
	return u.Update(func(s *RecentScanUpsert) {
		s.UpdateScanType()
	})
}

// Exec executes the query.
func (u *RecentScanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RecentScanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecentScanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecentScanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
