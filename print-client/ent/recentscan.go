// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/print-client/ent/recentscan"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RecentScan is the model entity for the RecentScan schema.
type RecentScan struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ScanValue holds the value of the "scan_value" field.
	ScanValue string `json:"scan_value,omitempty"`
	// Response holds the value of the "response" field.
	Response string `json:"response,omitempty"`
	// ScanType holds the value of the "scan_type" field.
	ScanType recentscan.ScanType `json:"scan_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecentScan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recentscan.FieldID:
			values[i] = new(sql.NullInt64)
		case recentscan.FieldScanValue, recentscan.FieldResponse, recentscan.FieldScanType:
			values[i] = new(sql.NullString)
		case recentscan.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecentScan fields.
func (rs *RecentScan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recentscan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rs.ID = int(value.Int64)
		case recentscan.FieldScanValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scan_value", values[i])
			} else if value.Valid {
				rs.ScanValue = value.String
			}
		case recentscan.FieldResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response", values[i])
			} else if value.Valid {
				rs.Response = value.String
			}
		case recentscan.FieldScanType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scan_type", values[i])
			} else if value.Valid {
				rs.ScanType = recentscan.ScanType(value.String)
			}
		case recentscan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rs.CreatedAt = value.Time
			}
		default:
			rs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RecentScan.
// This includes values selected through modifiers, order, etc.
func (rs *RecentScan) Value(name string) (ent.Value, error) {
	return rs.selectValues.Get(name)
}

// Update returns a builder for updating this RecentScan.
// Note that you need to call RecentScan.Unwrap() before calling this method if this RecentScan
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *RecentScan) Update() *RecentScanUpdateOne {
	return NewRecentScanClient(rs.config).UpdateOne(rs)
}

// Unwrap unwraps the RecentScan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *RecentScan) Unwrap() *RecentScan {
	_tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecentScan is not a transactional entity")
	}
	rs.config.driver = _tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *RecentScan) String() string {
	var builder strings.Builder
	builder.WriteString("RecentScan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rs.ID))
	builder.WriteString("scan_value=")
	builder.WriteString(rs.ScanValue)
	builder.WriteString(", ")
	builder.WriteString("response=")
	builder.WriteString(rs.Response)
	builder.WriteString(", ")
	builder.WriteString("scan_type=")
	builder.WriteString(fmt.Sprintf("%v", rs.ScanType))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rs.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RecentScans is a parsable slice of RecentScan.
type RecentScans []*RecentScan
