// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/print-client/ent/printjob"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocalDeviceUpdate is the builder for updating LocalDevice entities.
type LocalDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *LocalDeviceMutation
}

// Where appends a list predicates to the LocalDeviceUpdate builder.
func (ldu *LocalDeviceUpdate) Where(ps ...predicate.LocalDevice) *LocalDeviceUpdate {
	ldu.mutation.Where(ps...)
	return ldu
}

// SetName sets the "name" field.
func (ldu *LocalDeviceUpdate) SetName(s string) *LocalDeviceUpdate {
	ldu.mutation.SetName(s)
	return ldu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableName(s *string) *LocalDeviceUpdate {
	if s != nil {
		ldu.SetName(*s)
	}
	return ldu
}

// SetSystemName sets the "system_name" field.
func (ldu *LocalDeviceUpdate) SetSystemName(s string) *LocalDeviceUpdate {
	ldu.mutation.SetSystemName(s)
	return ldu
}

// SetNillableSystemName sets the "system_name" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableSystemName(s *string) *LocalDeviceUpdate {
	if s != nil {
		ldu.SetSystemName(*s)
	}
	return ldu
}

// SetVendorID sets the "vendor_id" field.
func (ldu *LocalDeviceUpdate) SetVendorID(i int) *LocalDeviceUpdate {
	ldu.mutation.ResetVendorID()
	ldu.mutation.SetVendorID(i)
	return ldu
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableVendorID(i *int) *LocalDeviceUpdate {
	if i != nil {
		ldu.SetVendorID(*i)
	}
	return ldu
}

// AddVendorID adds i to the "vendor_id" field.
func (ldu *LocalDeviceUpdate) AddVendorID(i int) *LocalDeviceUpdate {
	ldu.mutation.AddVendorID(i)
	return ldu
}

// ClearVendorID clears the value of the "vendor_id" field.
func (ldu *LocalDeviceUpdate) ClearVendorID() *LocalDeviceUpdate {
	ldu.mutation.ClearVendorID()
	return ldu
}

// SetProductID sets the "product_id" field.
func (ldu *LocalDeviceUpdate) SetProductID(i int) *LocalDeviceUpdate {
	ldu.mutation.ResetProductID()
	ldu.mutation.SetProductID(i)
	return ldu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableProductID(i *int) *LocalDeviceUpdate {
	if i != nil {
		ldu.SetProductID(*i)
	}
	return ldu
}

// AddProductID adds i to the "product_id" field.
func (ldu *LocalDeviceUpdate) AddProductID(i int) *LocalDeviceUpdate {
	ldu.mutation.AddProductID(i)
	return ldu
}

// ClearProductID clears the value of the "product_id" field.
func (ldu *LocalDeviceUpdate) ClearProductID() *LocalDeviceUpdate {
	ldu.mutation.ClearProductID()
	return ldu
}

// SetAddress sets the "address" field.
func (ldu *LocalDeviceUpdate) SetAddress(s string) *LocalDeviceUpdate {
	ldu.mutation.SetAddress(s)
	return ldu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableAddress(s *string) *LocalDeviceUpdate {
	if s != nil {
		ldu.SetAddress(*s)
	}
	return ldu
}

// ClearAddress clears the value of the "address" field.
func (ldu *LocalDeviceUpdate) ClearAddress() *LocalDeviceUpdate {
	ldu.mutation.ClearAddress()
	return ldu
}

// SetActive sets the "active" field.
func (ldu *LocalDeviceUpdate) SetActive(b bool) *LocalDeviceUpdate {
	ldu.mutation.SetActive(b)
	return ldu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableActive(b *bool) *LocalDeviceUpdate {
	if b != nil {
		ldu.SetActive(*b)
	}
	return ldu
}

// SetArchived sets the "archived" field.
func (ldu *LocalDeviceUpdate) SetArchived(b bool) *LocalDeviceUpdate {
	ldu.mutation.SetArchived(b)
	return ldu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableArchived(b *bool) *LocalDeviceUpdate {
	if b != nil {
		ldu.SetArchived(*b)
	}
	return ldu
}

// SetCategory sets the "category" field.
func (ldu *LocalDeviceUpdate) SetCategory(l localdevice.Category) *LocalDeviceUpdate {
	ldu.mutation.SetCategory(l)
	return ldu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ldu *LocalDeviceUpdate) SetNillableCategory(l *localdevice.Category) *LocalDeviceUpdate {
	if l != nil {
		ldu.SetCategory(*l)
	}
	return ldu
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (ldu *LocalDeviceUpdate) AddPrintJobIDs(ids ...pulid.ID) *LocalDeviceUpdate {
	ldu.mutation.AddPrintJobIDs(ids...)
	return ldu
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (ldu *LocalDeviceUpdate) AddPrintJob(p ...*PrintJob) *LocalDeviceUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ldu.AddPrintJobIDs(ids...)
}

// Mutation returns the LocalDeviceMutation object of the builder.
func (ldu *LocalDeviceUpdate) Mutation() *LocalDeviceMutation {
	return ldu.mutation
}

// ClearPrintJob clears all "print_job" edges to the PrintJob entity.
func (ldu *LocalDeviceUpdate) ClearPrintJob() *LocalDeviceUpdate {
	ldu.mutation.ClearPrintJob()
	return ldu
}

// RemovePrintJobIDs removes the "print_job" edge to PrintJob entities by IDs.
func (ldu *LocalDeviceUpdate) RemovePrintJobIDs(ids ...pulid.ID) *LocalDeviceUpdate {
	ldu.mutation.RemovePrintJobIDs(ids...)
	return ldu
}

// RemovePrintJob removes "print_job" edges to PrintJob entities.
func (ldu *LocalDeviceUpdate) RemovePrintJob(p ...*PrintJob) *LocalDeviceUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ldu.RemovePrintJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ldu *LocalDeviceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ldu.sqlSave, ldu.mutation, ldu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ldu *LocalDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := ldu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ldu *LocalDeviceUpdate) Exec(ctx context.Context) error {
	_, err := ldu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ldu *LocalDeviceUpdate) ExecX(ctx context.Context) {
	if err := ldu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ldu *LocalDeviceUpdate) check() error {
	if v, ok := ldu.mutation.Category(); ok {
		if err := localdevice.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "LocalDevice.category": %w`, err)}
		}
	}
	return nil
}

func (ldu *LocalDeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ldu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(localdevice.Table, localdevice.Columns, sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString))
	if ps := ldu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ldu.mutation.Name(); ok {
		_spec.SetField(localdevice.FieldName, field.TypeString, value)
	}
	if value, ok := ldu.mutation.SystemName(); ok {
		_spec.SetField(localdevice.FieldSystemName, field.TypeString, value)
	}
	if value, ok := ldu.mutation.VendorID(); ok {
		_spec.SetField(localdevice.FieldVendorID, field.TypeInt, value)
	}
	if value, ok := ldu.mutation.AddedVendorID(); ok {
		_spec.AddField(localdevice.FieldVendorID, field.TypeInt, value)
	}
	if ldu.mutation.VendorIDCleared() {
		_spec.ClearField(localdevice.FieldVendorID, field.TypeInt)
	}
	if value, ok := ldu.mutation.ProductID(); ok {
		_spec.SetField(localdevice.FieldProductID, field.TypeInt, value)
	}
	if value, ok := ldu.mutation.AddedProductID(); ok {
		_spec.AddField(localdevice.FieldProductID, field.TypeInt, value)
	}
	if ldu.mutation.ProductIDCleared() {
		_spec.ClearField(localdevice.FieldProductID, field.TypeInt)
	}
	if value, ok := ldu.mutation.Address(); ok {
		_spec.SetField(localdevice.FieldAddress, field.TypeString, value)
	}
	if ldu.mutation.AddressCleared() {
		_spec.ClearField(localdevice.FieldAddress, field.TypeString)
	}
	if value, ok := ldu.mutation.Active(); ok {
		_spec.SetField(localdevice.FieldActive, field.TypeBool, value)
	}
	if value, ok := ldu.mutation.Archived(); ok {
		_spec.SetField(localdevice.FieldArchived, field.TypeBool, value)
	}
	if value, ok := ldu.mutation.Category(); ok {
		_spec.SetField(localdevice.FieldCategory, field.TypeEnum, value)
	}
	if ldu.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ldu.mutation.RemovedPrintJobIDs(); len(nodes) > 0 && !ldu.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ldu.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ldu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ldu.mutation.done = true
	return n, nil
}

// LocalDeviceUpdateOne is the builder for updating a single LocalDevice entity.
type LocalDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocalDeviceMutation
}

// SetName sets the "name" field.
func (lduo *LocalDeviceUpdateOne) SetName(s string) *LocalDeviceUpdateOne {
	lduo.mutation.SetName(s)
	return lduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableName(s *string) *LocalDeviceUpdateOne {
	if s != nil {
		lduo.SetName(*s)
	}
	return lduo
}

// SetSystemName sets the "system_name" field.
func (lduo *LocalDeviceUpdateOne) SetSystemName(s string) *LocalDeviceUpdateOne {
	lduo.mutation.SetSystemName(s)
	return lduo
}

// SetNillableSystemName sets the "system_name" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableSystemName(s *string) *LocalDeviceUpdateOne {
	if s != nil {
		lduo.SetSystemName(*s)
	}
	return lduo
}

// SetVendorID sets the "vendor_id" field.
func (lduo *LocalDeviceUpdateOne) SetVendorID(i int) *LocalDeviceUpdateOne {
	lduo.mutation.ResetVendorID()
	lduo.mutation.SetVendorID(i)
	return lduo
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableVendorID(i *int) *LocalDeviceUpdateOne {
	if i != nil {
		lduo.SetVendorID(*i)
	}
	return lduo
}

// AddVendorID adds i to the "vendor_id" field.
func (lduo *LocalDeviceUpdateOne) AddVendorID(i int) *LocalDeviceUpdateOne {
	lduo.mutation.AddVendorID(i)
	return lduo
}

// ClearVendorID clears the value of the "vendor_id" field.
func (lduo *LocalDeviceUpdateOne) ClearVendorID() *LocalDeviceUpdateOne {
	lduo.mutation.ClearVendorID()
	return lduo
}

// SetProductID sets the "product_id" field.
func (lduo *LocalDeviceUpdateOne) SetProductID(i int) *LocalDeviceUpdateOne {
	lduo.mutation.ResetProductID()
	lduo.mutation.SetProductID(i)
	return lduo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableProductID(i *int) *LocalDeviceUpdateOne {
	if i != nil {
		lduo.SetProductID(*i)
	}
	return lduo
}

// AddProductID adds i to the "product_id" field.
func (lduo *LocalDeviceUpdateOne) AddProductID(i int) *LocalDeviceUpdateOne {
	lduo.mutation.AddProductID(i)
	return lduo
}

// ClearProductID clears the value of the "product_id" field.
func (lduo *LocalDeviceUpdateOne) ClearProductID() *LocalDeviceUpdateOne {
	lduo.mutation.ClearProductID()
	return lduo
}

// SetAddress sets the "address" field.
func (lduo *LocalDeviceUpdateOne) SetAddress(s string) *LocalDeviceUpdateOne {
	lduo.mutation.SetAddress(s)
	return lduo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableAddress(s *string) *LocalDeviceUpdateOne {
	if s != nil {
		lduo.SetAddress(*s)
	}
	return lduo
}

// ClearAddress clears the value of the "address" field.
func (lduo *LocalDeviceUpdateOne) ClearAddress() *LocalDeviceUpdateOne {
	lduo.mutation.ClearAddress()
	return lduo
}

// SetActive sets the "active" field.
func (lduo *LocalDeviceUpdateOne) SetActive(b bool) *LocalDeviceUpdateOne {
	lduo.mutation.SetActive(b)
	return lduo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableActive(b *bool) *LocalDeviceUpdateOne {
	if b != nil {
		lduo.SetActive(*b)
	}
	return lduo
}

// SetArchived sets the "archived" field.
func (lduo *LocalDeviceUpdateOne) SetArchived(b bool) *LocalDeviceUpdateOne {
	lduo.mutation.SetArchived(b)
	return lduo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableArchived(b *bool) *LocalDeviceUpdateOne {
	if b != nil {
		lduo.SetArchived(*b)
	}
	return lduo
}

// SetCategory sets the "category" field.
func (lduo *LocalDeviceUpdateOne) SetCategory(l localdevice.Category) *LocalDeviceUpdateOne {
	lduo.mutation.SetCategory(l)
	return lduo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (lduo *LocalDeviceUpdateOne) SetNillableCategory(l *localdevice.Category) *LocalDeviceUpdateOne {
	if l != nil {
		lduo.SetCategory(*l)
	}
	return lduo
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (lduo *LocalDeviceUpdateOne) AddPrintJobIDs(ids ...pulid.ID) *LocalDeviceUpdateOne {
	lduo.mutation.AddPrintJobIDs(ids...)
	return lduo
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (lduo *LocalDeviceUpdateOne) AddPrintJob(p ...*PrintJob) *LocalDeviceUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lduo.AddPrintJobIDs(ids...)
}

// Mutation returns the LocalDeviceMutation object of the builder.
func (lduo *LocalDeviceUpdateOne) Mutation() *LocalDeviceMutation {
	return lduo.mutation
}

// ClearPrintJob clears all "print_job" edges to the PrintJob entity.
func (lduo *LocalDeviceUpdateOne) ClearPrintJob() *LocalDeviceUpdateOne {
	lduo.mutation.ClearPrintJob()
	return lduo
}

// RemovePrintJobIDs removes the "print_job" edge to PrintJob entities by IDs.
func (lduo *LocalDeviceUpdateOne) RemovePrintJobIDs(ids ...pulid.ID) *LocalDeviceUpdateOne {
	lduo.mutation.RemovePrintJobIDs(ids...)
	return lduo
}

// RemovePrintJob removes "print_job" edges to PrintJob entities.
func (lduo *LocalDeviceUpdateOne) RemovePrintJob(p ...*PrintJob) *LocalDeviceUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lduo.RemovePrintJobIDs(ids...)
}

// Where appends a list predicates to the LocalDeviceUpdate builder.
func (lduo *LocalDeviceUpdateOne) Where(ps ...predicate.LocalDevice) *LocalDeviceUpdateOne {
	lduo.mutation.Where(ps...)
	return lduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lduo *LocalDeviceUpdateOne) Select(field string, fields ...string) *LocalDeviceUpdateOne {
	lduo.fields = append([]string{field}, fields...)
	return lduo
}

// Save executes the query and returns the updated LocalDevice entity.
func (lduo *LocalDeviceUpdateOne) Save(ctx context.Context) (*LocalDevice, error) {
	return withHooks(ctx, lduo.sqlSave, lduo.mutation, lduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lduo *LocalDeviceUpdateOne) SaveX(ctx context.Context) *LocalDevice {
	node, err := lduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lduo *LocalDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := lduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lduo *LocalDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := lduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lduo *LocalDeviceUpdateOne) check() error {
	if v, ok := lduo.mutation.Category(); ok {
		if err := localdevice.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "LocalDevice.category": %w`, err)}
		}
	}
	return nil
}

func (lduo *LocalDeviceUpdateOne) sqlSave(ctx context.Context) (_node *LocalDevice, err error) {
	if err := lduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(localdevice.Table, localdevice.Columns, sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString))
	id, ok := lduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocalDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, localdevice.FieldID)
		for _, f := range fields {
			if !localdevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != localdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lduo.mutation.Name(); ok {
		_spec.SetField(localdevice.FieldName, field.TypeString, value)
	}
	if value, ok := lduo.mutation.SystemName(); ok {
		_spec.SetField(localdevice.FieldSystemName, field.TypeString, value)
	}
	if value, ok := lduo.mutation.VendorID(); ok {
		_spec.SetField(localdevice.FieldVendorID, field.TypeInt, value)
	}
	if value, ok := lduo.mutation.AddedVendorID(); ok {
		_spec.AddField(localdevice.FieldVendorID, field.TypeInt, value)
	}
	if lduo.mutation.VendorIDCleared() {
		_spec.ClearField(localdevice.FieldVendorID, field.TypeInt)
	}
	if value, ok := lduo.mutation.ProductID(); ok {
		_spec.SetField(localdevice.FieldProductID, field.TypeInt, value)
	}
	if value, ok := lduo.mutation.AddedProductID(); ok {
		_spec.AddField(localdevice.FieldProductID, field.TypeInt, value)
	}
	if lduo.mutation.ProductIDCleared() {
		_spec.ClearField(localdevice.FieldProductID, field.TypeInt)
	}
	if value, ok := lduo.mutation.Address(); ok {
		_spec.SetField(localdevice.FieldAddress, field.TypeString, value)
	}
	if lduo.mutation.AddressCleared() {
		_spec.ClearField(localdevice.FieldAddress, field.TypeString)
	}
	if value, ok := lduo.mutation.Active(); ok {
		_spec.SetField(localdevice.FieldActive, field.TypeBool, value)
	}
	if value, ok := lduo.mutation.Archived(); ok {
		_spec.SetField(localdevice.FieldArchived, field.TypeBool, value)
	}
	if value, ok := lduo.mutation.Category(); ok {
		_spec.SetField(localdevice.FieldCategory, field.TypeEnum, value)
	}
	if lduo.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lduo.mutation.RemovedPrintJobIDs(); len(nodes) > 0 && !lduo.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lduo.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LocalDevice{config: lduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{localdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lduo.mutation.done = true
	return _node, nil
}
