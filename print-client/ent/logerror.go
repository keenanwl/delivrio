// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/print-client/ent/logerror"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LogError is the model entity for the LogError schema.
type LogError struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogError) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logerror.FieldID:
			values[i] = new(pulid.ID)
		case logerror.FieldError:
			values[i] = new(sql.NullString)
		case logerror.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogError fields.
func (le *LogError) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logerror.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				le.ID = *value
			}
		case logerror.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				le.Error = value.String
			}
		case logerror.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				le.CreatedAt = value.Time
			}
		default:
			le.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogError.
// This includes values selected through modifiers, order, etc.
func (le *LogError) Value(name string) (ent.Value, error) {
	return le.selectValues.Get(name)
}

// Update returns a builder for updating this LogError.
// Note that you need to call LogError.Unwrap() before calling this method if this LogError
// was returned from a transaction, and the transaction was committed or rolled back.
func (le *LogError) Update() *LogErrorUpdateOne {
	return NewLogErrorClient(le.config).UpdateOne(le)
}

// Unwrap unwraps the LogError entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (le *LogError) Unwrap() *LogError {
	_tx, ok := le.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogError is not a transactional entity")
	}
	le.config.driver = _tx.drv
	return le
}

// String implements the fmt.Stringer.
func (le *LogError) String() string {
	var builder strings.Builder
	builder.WriteString("LogError(")
	builder.WriteString(fmt.Sprintf("id=%v, ", le.ID))
	builder.WriteString("error=")
	builder.WriteString(le.Error)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(le.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LogErrors is a parsable slice of LogError.
type LogErrors []*LogError
