// Code generated by ent, DO NOT EDIT.

package recentscan

import (
	"time"

	"delivrio.io/print-client/ent/predicate"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLTE(FieldID, id))
}

// ScanValue applies equality check predicate on the "scan_value" field. It's identical to ScanValueEQ.
func ScanValue(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldScanValue, v))
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldResponse, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldCreatedAt, v))
}

// ScanValueEQ applies the EQ predicate on the "scan_value" field.
func ScanValueEQ(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldScanValue, v))
}

// ScanValueNEQ applies the NEQ predicate on the "scan_value" field.
func ScanValueNEQ(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNEQ(FieldScanValue, v))
}

// ScanValueIn applies the In predicate on the "scan_value" field.
func ScanValueIn(vs ...string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldIn(FieldScanValue, vs...))
}

// ScanValueNotIn applies the NotIn predicate on the "scan_value" field.
func ScanValueNotIn(vs ...string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNotIn(FieldScanValue, vs...))
}

// ScanValueGT applies the GT predicate on the "scan_value" field.
func ScanValueGT(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGT(FieldScanValue, v))
}

// ScanValueGTE applies the GTE predicate on the "scan_value" field.
func ScanValueGTE(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGTE(FieldScanValue, v))
}

// ScanValueLT applies the LT predicate on the "scan_value" field.
func ScanValueLT(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLT(FieldScanValue, v))
}

// ScanValueLTE applies the LTE predicate on the "scan_value" field.
func ScanValueLTE(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLTE(FieldScanValue, v))
}

// ScanValueContains applies the Contains predicate on the "scan_value" field.
func ScanValueContains(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldContains(FieldScanValue, v))
}

// ScanValueHasPrefix applies the HasPrefix predicate on the "scan_value" field.
func ScanValueHasPrefix(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldHasPrefix(FieldScanValue, v))
}

// ScanValueHasSuffix applies the HasSuffix predicate on the "scan_value" field.
func ScanValueHasSuffix(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldHasSuffix(FieldScanValue, v))
}

// ScanValueEqualFold applies the EqualFold predicate on the "scan_value" field.
func ScanValueEqualFold(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEqualFold(FieldScanValue, v))
}

// ScanValueContainsFold applies the ContainsFold predicate on the "scan_value" field.
func ScanValueContainsFold(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldContainsFold(FieldScanValue, v))
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldResponse, v))
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNEQ(FieldResponse, v))
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldIn(FieldResponse, vs...))
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNotIn(FieldResponse, vs...))
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGT(FieldResponse, v))
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGTE(FieldResponse, v))
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLT(FieldResponse, v))
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLTE(FieldResponse, v))
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldContains(FieldResponse, v))
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldHasPrefix(FieldResponse, v))
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldHasSuffix(FieldResponse, v))
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEqualFold(FieldResponse, v))
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldContainsFold(FieldResponse, v))
}

// ScanTypeEQ applies the EQ predicate on the "scan_type" field.
func ScanTypeEQ(v ScanType) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldScanType, v))
}

// ScanTypeNEQ applies the NEQ predicate on the "scan_type" field.
func ScanTypeNEQ(v ScanType) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNEQ(FieldScanType, v))
}

// ScanTypeIn applies the In predicate on the "scan_type" field.
func ScanTypeIn(vs ...ScanType) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldIn(FieldScanType, vs...))
}

// ScanTypeNotIn applies the NotIn predicate on the "scan_type" field.
func ScanTypeNotIn(vs ...ScanType) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNotIn(FieldScanType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RecentScan {
	return predicate.RecentScan(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecentScan) predicate.RecentScan {
	return predicate.RecentScan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecentScan) predicate.RecentScan {
	return predicate.RecentScan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecentScan) predicate.RecentScan {
	return predicate.RecentScan(sql.NotPredicates(p))
}
