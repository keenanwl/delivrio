// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/print-client/ent/remoteconnection"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RemoteConnectionUpdate is the builder for updating RemoteConnection entities.
type RemoteConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *RemoteConnectionMutation
}

// Where appends a list predicates to the RemoteConnectionUpdate builder.
func (rcu *RemoteConnectionUpdate) Where(ps ...predicate.RemoteConnection) *RemoteConnectionUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetRemoteURL sets the "remote_url" field.
func (rcu *RemoteConnectionUpdate) SetRemoteURL(s string) *RemoteConnectionUpdate {
	rcu.mutation.SetRemoteURL(s)
	return rcu
}

// SetNillableRemoteURL sets the "remote_url" field if the given value is not nil.
func (rcu *RemoteConnectionUpdate) SetNillableRemoteURL(s *string) *RemoteConnectionUpdate {
	if s != nil {
		rcu.SetRemoteURL(*s)
	}
	return rcu
}

// SetRegistrationToken sets the "registration_token" field.
func (rcu *RemoteConnectionUpdate) SetRegistrationToken(s string) *RemoteConnectionUpdate {
	rcu.mutation.SetRegistrationToken(s)
	return rcu
}

// SetNillableRegistrationToken sets the "registration_token" field if the given value is not nil.
func (rcu *RemoteConnectionUpdate) SetNillableRegistrationToken(s *string) *RemoteConnectionUpdate {
	if s != nil {
		rcu.SetRegistrationToken(*s)
	}
	return rcu
}

// SetWorkstationName sets the "workstation_name" field.
func (rcu *RemoteConnectionUpdate) SetWorkstationName(s string) *RemoteConnectionUpdate {
	rcu.mutation.SetWorkstationName(s)
	return rcu
}

// SetNillableWorkstationName sets the "workstation_name" field if the given value is not nil.
func (rcu *RemoteConnectionUpdate) SetNillableWorkstationName(s *string) *RemoteConnectionUpdate {
	if s != nil {
		rcu.SetWorkstationName(*s)
	}
	return rcu
}

// SetLastPing sets the "last_ping" field.
func (rcu *RemoteConnectionUpdate) SetLastPing(t time.Time) *RemoteConnectionUpdate {
	rcu.mutation.SetLastPing(t)
	return rcu
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (rcu *RemoteConnectionUpdate) SetNillableLastPing(t *time.Time) *RemoteConnectionUpdate {
	if t != nil {
		rcu.SetLastPing(*t)
	}
	return rcu
}

// ClearLastPing clears the value of the "last_ping" field.
func (rcu *RemoteConnectionUpdate) ClearLastPing() *RemoteConnectionUpdate {
	rcu.mutation.ClearLastPing()
	return rcu
}

// Mutation returns the RemoteConnectionMutation object of the builder.
func (rcu *RemoteConnectionUpdate) Mutation() *RemoteConnectionMutation {
	return rcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RemoteConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RemoteConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RemoteConnectionUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RemoteConnectionUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcu *RemoteConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(remoteconnection.Table, remoteconnection.Columns, sqlgraph.NewFieldSpec(remoteconnection.FieldID, field.TypeString))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.RemoteURL(); ok {
		_spec.SetField(remoteconnection.FieldRemoteURL, field.TypeString, value)
	}
	if value, ok := rcu.mutation.RegistrationToken(); ok {
		_spec.SetField(remoteconnection.FieldRegistrationToken, field.TypeString, value)
	}
	if value, ok := rcu.mutation.WorkstationName(); ok {
		_spec.SetField(remoteconnection.FieldWorkstationName, field.TypeString, value)
	}
	if value, ok := rcu.mutation.LastPing(); ok {
		_spec.SetField(remoteconnection.FieldLastPing, field.TypeTime, value)
	}
	if rcu.mutation.LastPingCleared() {
		_spec.ClearField(remoteconnection.FieldLastPing, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RemoteConnectionUpdateOne is the builder for updating a single RemoteConnection entity.
type RemoteConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RemoteConnectionMutation
}

// SetRemoteURL sets the "remote_url" field.
func (rcuo *RemoteConnectionUpdateOne) SetRemoteURL(s string) *RemoteConnectionUpdateOne {
	rcuo.mutation.SetRemoteURL(s)
	return rcuo
}

// SetNillableRemoteURL sets the "remote_url" field if the given value is not nil.
func (rcuo *RemoteConnectionUpdateOne) SetNillableRemoteURL(s *string) *RemoteConnectionUpdateOne {
	if s != nil {
		rcuo.SetRemoteURL(*s)
	}
	return rcuo
}

// SetRegistrationToken sets the "registration_token" field.
func (rcuo *RemoteConnectionUpdateOne) SetRegistrationToken(s string) *RemoteConnectionUpdateOne {
	rcuo.mutation.SetRegistrationToken(s)
	return rcuo
}

// SetNillableRegistrationToken sets the "registration_token" field if the given value is not nil.
func (rcuo *RemoteConnectionUpdateOne) SetNillableRegistrationToken(s *string) *RemoteConnectionUpdateOne {
	if s != nil {
		rcuo.SetRegistrationToken(*s)
	}
	return rcuo
}

// SetWorkstationName sets the "workstation_name" field.
func (rcuo *RemoteConnectionUpdateOne) SetWorkstationName(s string) *RemoteConnectionUpdateOne {
	rcuo.mutation.SetWorkstationName(s)
	return rcuo
}

// SetNillableWorkstationName sets the "workstation_name" field if the given value is not nil.
func (rcuo *RemoteConnectionUpdateOne) SetNillableWorkstationName(s *string) *RemoteConnectionUpdateOne {
	if s != nil {
		rcuo.SetWorkstationName(*s)
	}
	return rcuo
}

// SetLastPing sets the "last_ping" field.
func (rcuo *RemoteConnectionUpdateOne) SetLastPing(t time.Time) *RemoteConnectionUpdateOne {
	rcuo.mutation.SetLastPing(t)
	return rcuo
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (rcuo *RemoteConnectionUpdateOne) SetNillableLastPing(t *time.Time) *RemoteConnectionUpdateOne {
	if t != nil {
		rcuo.SetLastPing(*t)
	}
	return rcuo
}

// ClearLastPing clears the value of the "last_ping" field.
func (rcuo *RemoteConnectionUpdateOne) ClearLastPing() *RemoteConnectionUpdateOne {
	rcuo.mutation.ClearLastPing()
	return rcuo
}

// Mutation returns the RemoteConnectionMutation object of the builder.
func (rcuo *RemoteConnectionUpdateOne) Mutation() *RemoteConnectionMutation {
	return rcuo.mutation
}

// Where appends a list predicates to the RemoteConnectionUpdate builder.
func (rcuo *RemoteConnectionUpdateOne) Where(ps ...predicate.RemoteConnection) *RemoteConnectionUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RemoteConnectionUpdateOne) Select(field string, fields ...string) *RemoteConnectionUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RemoteConnection entity.
func (rcuo *RemoteConnectionUpdateOne) Save(ctx context.Context) (*RemoteConnection, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RemoteConnectionUpdateOne) SaveX(ctx context.Context) *RemoteConnection {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RemoteConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RemoteConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcuo *RemoteConnectionUpdateOne) sqlSave(ctx context.Context) (_node *RemoteConnection, err error) {
	_spec := sqlgraph.NewUpdateSpec(remoteconnection.Table, remoteconnection.Columns, sqlgraph.NewFieldSpec(remoteconnection.FieldID, field.TypeString))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RemoteConnection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, remoteconnection.FieldID)
		for _, f := range fields {
			if !remoteconnection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != remoteconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.RemoteURL(); ok {
		_spec.SetField(remoteconnection.FieldRemoteURL, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.RegistrationToken(); ok {
		_spec.SetField(remoteconnection.FieldRegistrationToken, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.WorkstationName(); ok {
		_spec.SetField(remoteconnection.FieldWorkstationName, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.LastPing(); ok {
		_spec.SetField(remoteconnection.FieldLastPing, field.TypeTime, value)
	}
	if rcuo.mutation.LastPingCleared() {
		_spec.ClearField(remoteconnection.FieldLastPing, field.TypeTime)
	}
	_node = &RemoteConnection{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}
