// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/print-client/ent/recentscan"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecentScanUpdate is the builder for updating RecentScan entities.
type RecentScanUpdate struct {
	config
	hooks    []Hook
	mutation *RecentScanMutation
}

// Where appends a list predicates to the RecentScanUpdate builder.
func (rsu *RecentScanUpdate) Where(ps ...predicate.RecentScan) *RecentScanUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetScanValue sets the "scan_value" field.
func (rsu *RecentScanUpdate) SetScanValue(s string) *RecentScanUpdate {
	rsu.mutation.SetScanValue(s)
	return rsu
}

// SetNillableScanValue sets the "scan_value" field if the given value is not nil.
func (rsu *RecentScanUpdate) SetNillableScanValue(s *string) *RecentScanUpdate {
	if s != nil {
		rsu.SetScanValue(*s)
	}
	return rsu
}

// SetResponse sets the "response" field.
func (rsu *RecentScanUpdate) SetResponse(s string) *RecentScanUpdate {
	rsu.mutation.SetResponse(s)
	return rsu
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (rsu *RecentScanUpdate) SetNillableResponse(s *string) *RecentScanUpdate {
	if s != nil {
		rsu.SetResponse(*s)
	}
	return rsu
}

// SetScanType sets the "scan_type" field.
func (rsu *RecentScanUpdate) SetScanType(rt recentscan.ScanType) *RecentScanUpdate {
	rsu.mutation.SetScanType(rt)
	return rsu
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (rsu *RecentScanUpdate) SetNillableScanType(rt *recentscan.ScanType) *RecentScanUpdate {
	if rt != nil {
		rsu.SetScanType(*rt)
	}
	return rsu
}

// Mutation returns the RecentScanMutation object of the builder.
func (rsu *RecentScanUpdate) Mutation() *RecentScanMutation {
	return rsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *RecentScanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rsu.sqlSave, rsu.mutation, rsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *RecentScanUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *RecentScanUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *RecentScanUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsu *RecentScanUpdate) check() error {
	if v, ok := rsu.mutation.ScanType(); ok {
		if err := recentscan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`ent: validator failed for field "RecentScan.scan_type": %w`, err)}
		}
	}
	return nil
}

func (rsu *RecentScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentscan.Table, recentscan.Columns, sqlgraph.NewFieldSpec(recentscan.FieldID, field.TypeInt))
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.ScanValue(); ok {
		_spec.SetField(recentscan.FieldScanValue, field.TypeString, value)
	}
	if value, ok := rsu.mutation.Response(); ok {
		_spec.SetField(recentscan.FieldResponse, field.TypeString, value)
	}
	if value, ok := rsu.mutation.ScanType(); ok {
		_spec.SetField(recentscan.FieldScanType, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentscan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rsu.mutation.done = true
	return n, nil
}

// RecentScanUpdateOne is the builder for updating a single RecentScan entity.
type RecentScanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecentScanMutation
}

// SetScanValue sets the "scan_value" field.
func (rsuo *RecentScanUpdateOne) SetScanValue(s string) *RecentScanUpdateOne {
	rsuo.mutation.SetScanValue(s)
	return rsuo
}

// SetNillableScanValue sets the "scan_value" field if the given value is not nil.
func (rsuo *RecentScanUpdateOne) SetNillableScanValue(s *string) *RecentScanUpdateOne {
	if s != nil {
		rsuo.SetScanValue(*s)
	}
	return rsuo
}

// SetResponse sets the "response" field.
func (rsuo *RecentScanUpdateOne) SetResponse(s string) *RecentScanUpdateOne {
	rsuo.mutation.SetResponse(s)
	return rsuo
}

// SetNillableResponse sets the "response" field if the given value is not nil.
func (rsuo *RecentScanUpdateOne) SetNillableResponse(s *string) *RecentScanUpdateOne {
	if s != nil {
		rsuo.SetResponse(*s)
	}
	return rsuo
}

// SetScanType sets the "scan_type" field.
func (rsuo *RecentScanUpdateOne) SetScanType(rt recentscan.ScanType) *RecentScanUpdateOne {
	rsuo.mutation.SetScanType(rt)
	return rsuo
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (rsuo *RecentScanUpdateOne) SetNillableScanType(rt *recentscan.ScanType) *RecentScanUpdateOne {
	if rt != nil {
		rsuo.SetScanType(*rt)
	}
	return rsuo
}

// Mutation returns the RecentScanMutation object of the builder.
func (rsuo *RecentScanUpdateOne) Mutation() *RecentScanMutation {
	return rsuo.mutation
}

// Where appends a list predicates to the RecentScanUpdate builder.
func (rsuo *RecentScanUpdateOne) Where(ps ...predicate.RecentScan) *RecentScanUpdateOne {
	rsuo.mutation.Where(ps...)
	return rsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *RecentScanUpdateOne) Select(field string, fields ...string) *RecentScanUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated RecentScan entity.
func (rsuo *RecentScanUpdateOne) Save(ctx context.Context) (*RecentScan, error) {
	return withHooks(ctx, rsuo.sqlSave, rsuo.mutation, rsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *RecentScanUpdateOne) SaveX(ctx context.Context) *RecentScan {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *RecentScanUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *RecentScanUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsuo *RecentScanUpdateOne) check() error {
	if v, ok := rsuo.mutation.ScanType(); ok {
		if err := recentscan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`ent: validator failed for field "RecentScan.scan_type": %w`, err)}
		}
	}
	return nil
}

func (rsuo *RecentScanUpdateOne) sqlSave(ctx context.Context) (_node *RecentScan, err error) {
	if err := rsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(recentscan.Table, recentscan.Columns, sqlgraph.NewFieldSpec(recentscan.FieldID, field.TypeInt))
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RecentScan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recentscan.FieldID)
		for _, f := range fields {
			if !recentscan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recentscan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.ScanValue(); ok {
		_spec.SetField(recentscan.FieldScanValue, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.Response(); ok {
		_spec.SetField(recentscan.FieldResponse, field.TypeString, value)
	}
	if value, ok := rsuo.mutation.ScanType(); ok {
		_spec.SetField(recentscan.FieldScanType, field.TypeEnum, value)
	}
	_node = &RecentScan{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recentscan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rsuo.mutation.done = true
	return _node, nil
}
