// Code generated by ent, DO NOT EDIT.

package remoteconnection

import (
	"time"

	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLTE(FieldID, id))
}

// RemoteURL applies equality check predicate on the "remote_url" field. It's identical to RemoteURLEQ.
func RemoteURL(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldRemoteURL, v))
}

// RegistrationToken applies equality check predicate on the "registration_token" field. It's identical to RegistrationTokenEQ.
func RegistrationToken(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldRegistrationToken, v))
}

// WorkstationName applies equality check predicate on the "workstation_name" field. It's identical to WorkstationNameEQ.
func WorkstationName(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldWorkstationName, v))
}

// LastPing applies equality check predicate on the "last_ping" field. It's identical to LastPingEQ.
func LastPing(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldLastPing, v))
}

// RemoteURLEQ applies the EQ predicate on the "remote_url" field.
func RemoteURLEQ(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldRemoteURL, v))
}

// RemoteURLNEQ applies the NEQ predicate on the "remote_url" field.
func RemoteURLNEQ(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNEQ(FieldRemoteURL, v))
}

// RemoteURLIn applies the In predicate on the "remote_url" field.
func RemoteURLIn(vs ...string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldIn(FieldRemoteURL, vs...))
}

// RemoteURLNotIn applies the NotIn predicate on the "remote_url" field.
func RemoteURLNotIn(vs ...string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNotIn(FieldRemoteURL, vs...))
}

// RemoteURLGT applies the GT predicate on the "remote_url" field.
func RemoteURLGT(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGT(FieldRemoteURL, v))
}

// RemoteURLGTE applies the GTE predicate on the "remote_url" field.
func RemoteURLGTE(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGTE(FieldRemoteURL, v))
}

// RemoteURLLT applies the LT predicate on the "remote_url" field.
func RemoteURLLT(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLT(FieldRemoteURL, v))
}

// RemoteURLLTE applies the LTE predicate on the "remote_url" field.
func RemoteURLLTE(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLTE(FieldRemoteURL, v))
}

// RemoteURLContains applies the Contains predicate on the "remote_url" field.
func RemoteURLContains(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldContains(FieldRemoteURL, v))
}

// RemoteURLHasPrefix applies the HasPrefix predicate on the "remote_url" field.
func RemoteURLHasPrefix(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldHasPrefix(FieldRemoteURL, v))
}

// RemoteURLHasSuffix applies the HasSuffix predicate on the "remote_url" field.
func RemoteURLHasSuffix(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldHasSuffix(FieldRemoteURL, v))
}

// RemoteURLEqualFold applies the EqualFold predicate on the "remote_url" field.
func RemoteURLEqualFold(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEqualFold(FieldRemoteURL, v))
}

// RemoteURLContainsFold applies the ContainsFold predicate on the "remote_url" field.
func RemoteURLContainsFold(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldContainsFold(FieldRemoteURL, v))
}

// RegistrationTokenEQ applies the EQ predicate on the "registration_token" field.
func RegistrationTokenEQ(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldRegistrationToken, v))
}

// RegistrationTokenNEQ applies the NEQ predicate on the "registration_token" field.
func RegistrationTokenNEQ(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNEQ(FieldRegistrationToken, v))
}

// RegistrationTokenIn applies the In predicate on the "registration_token" field.
func RegistrationTokenIn(vs ...string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldIn(FieldRegistrationToken, vs...))
}

// RegistrationTokenNotIn applies the NotIn predicate on the "registration_token" field.
func RegistrationTokenNotIn(vs ...string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNotIn(FieldRegistrationToken, vs...))
}

// RegistrationTokenGT applies the GT predicate on the "registration_token" field.
func RegistrationTokenGT(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGT(FieldRegistrationToken, v))
}

// RegistrationTokenGTE applies the GTE predicate on the "registration_token" field.
func RegistrationTokenGTE(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGTE(FieldRegistrationToken, v))
}

// RegistrationTokenLT applies the LT predicate on the "registration_token" field.
func RegistrationTokenLT(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLT(FieldRegistrationToken, v))
}

// RegistrationTokenLTE applies the LTE predicate on the "registration_token" field.
func RegistrationTokenLTE(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLTE(FieldRegistrationToken, v))
}

// RegistrationTokenContains applies the Contains predicate on the "registration_token" field.
func RegistrationTokenContains(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldContains(FieldRegistrationToken, v))
}

// RegistrationTokenHasPrefix applies the HasPrefix predicate on the "registration_token" field.
func RegistrationTokenHasPrefix(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldHasPrefix(FieldRegistrationToken, v))
}

// RegistrationTokenHasSuffix applies the HasSuffix predicate on the "registration_token" field.
func RegistrationTokenHasSuffix(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldHasSuffix(FieldRegistrationToken, v))
}

// RegistrationTokenEqualFold applies the EqualFold predicate on the "registration_token" field.
func RegistrationTokenEqualFold(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEqualFold(FieldRegistrationToken, v))
}

// RegistrationTokenContainsFold applies the ContainsFold predicate on the "registration_token" field.
func RegistrationTokenContainsFold(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldContainsFold(FieldRegistrationToken, v))
}

// WorkstationNameEQ applies the EQ predicate on the "workstation_name" field.
func WorkstationNameEQ(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldWorkstationName, v))
}

// WorkstationNameNEQ applies the NEQ predicate on the "workstation_name" field.
func WorkstationNameNEQ(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNEQ(FieldWorkstationName, v))
}

// WorkstationNameIn applies the In predicate on the "workstation_name" field.
func WorkstationNameIn(vs ...string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldIn(FieldWorkstationName, vs...))
}

// WorkstationNameNotIn applies the NotIn predicate on the "workstation_name" field.
func WorkstationNameNotIn(vs ...string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNotIn(FieldWorkstationName, vs...))
}

// WorkstationNameGT applies the GT predicate on the "workstation_name" field.
func WorkstationNameGT(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGT(FieldWorkstationName, v))
}

// WorkstationNameGTE applies the GTE predicate on the "workstation_name" field.
func WorkstationNameGTE(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGTE(FieldWorkstationName, v))
}

// WorkstationNameLT applies the LT predicate on the "workstation_name" field.
func WorkstationNameLT(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLT(FieldWorkstationName, v))
}

// WorkstationNameLTE applies the LTE predicate on the "workstation_name" field.
func WorkstationNameLTE(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLTE(FieldWorkstationName, v))
}

// WorkstationNameContains applies the Contains predicate on the "workstation_name" field.
func WorkstationNameContains(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldContains(FieldWorkstationName, v))
}

// WorkstationNameHasPrefix applies the HasPrefix predicate on the "workstation_name" field.
func WorkstationNameHasPrefix(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldHasPrefix(FieldWorkstationName, v))
}

// WorkstationNameHasSuffix applies the HasSuffix predicate on the "workstation_name" field.
func WorkstationNameHasSuffix(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldHasSuffix(FieldWorkstationName, v))
}

// WorkstationNameEqualFold applies the EqualFold predicate on the "workstation_name" field.
func WorkstationNameEqualFold(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEqualFold(FieldWorkstationName, v))
}

// WorkstationNameContainsFold applies the ContainsFold predicate on the "workstation_name" field.
func WorkstationNameContainsFold(v string) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldContainsFold(FieldWorkstationName, v))
}

// LastPingEQ applies the EQ predicate on the "last_ping" field.
func LastPingEQ(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldEQ(FieldLastPing, v))
}

// LastPingNEQ applies the NEQ predicate on the "last_ping" field.
func LastPingNEQ(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNEQ(FieldLastPing, v))
}

// LastPingIn applies the In predicate on the "last_ping" field.
func LastPingIn(vs ...time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldIn(FieldLastPing, vs...))
}

// LastPingNotIn applies the NotIn predicate on the "last_ping" field.
func LastPingNotIn(vs ...time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNotIn(FieldLastPing, vs...))
}

// LastPingGT applies the GT predicate on the "last_ping" field.
func LastPingGT(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGT(FieldLastPing, v))
}

// LastPingGTE applies the GTE predicate on the "last_ping" field.
func LastPingGTE(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldGTE(FieldLastPing, v))
}

// LastPingLT applies the LT predicate on the "last_ping" field.
func LastPingLT(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLT(FieldLastPing, v))
}

// LastPingLTE applies the LTE predicate on the "last_ping" field.
func LastPingLTE(v time.Time) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldLTE(FieldLastPing, v))
}

// LastPingIsNil applies the IsNil predicate on the "last_ping" field.
func LastPingIsNil() predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldIsNull(FieldLastPing))
}

// LastPingNotNil applies the NotNil predicate on the "last_ping" field.
func LastPingNotNil() predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.FieldNotNull(FieldLastPing))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RemoteConnection) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RemoteConnection) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RemoteConnection) predicate.RemoteConnection {
	return predicate.RemoteConnection(sql.NotPredicates(p))
}
