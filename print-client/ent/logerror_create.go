// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/print-client/ent/logerror"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogErrorCreate is the builder for creating a LogError entity.
type LogErrorCreate struct {
	config
	mutation *LogErrorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetError sets the "error" field.
func (lec *LogErrorCreate) SetError(s string) *LogErrorCreate {
	lec.mutation.SetError(s)
	return lec
}

// SetCreatedAt sets the "created_at" field.
func (lec *LogErrorCreate) SetCreatedAt(t time.Time) *LogErrorCreate {
	lec.mutation.SetCreatedAt(t)
	return lec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lec *LogErrorCreate) SetNillableCreatedAt(t *time.Time) *LogErrorCreate {
	if t != nil {
		lec.SetCreatedAt(*t)
	}
	return lec
}

// SetID sets the "id" field.
func (lec *LogErrorCreate) SetID(pu pulid.ID) *LogErrorCreate {
	lec.mutation.SetID(pu)
	return lec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lec *LogErrorCreate) SetNillableID(pu *pulid.ID) *LogErrorCreate {
	if pu != nil {
		lec.SetID(*pu)
	}
	return lec
}

// Mutation returns the LogErrorMutation object of the builder.
func (lec *LogErrorCreate) Mutation() *LogErrorMutation {
	return lec.mutation
}

// Save creates the LogError in the database.
func (lec *LogErrorCreate) Save(ctx context.Context) (*LogError, error) {
	lec.defaults()
	return withHooks(ctx, lec.sqlSave, lec.mutation, lec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lec *LogErrorCreate) SaveX(ctx context.Context) *LogError {
	v, err := lec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lec *LogErrorCreate) Exec(ctx context.Context) error {
	_, err := lec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lec *LogErrorCreate) ExecX(ctx context.Context) {
	if err := lec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lec *LogErrorCreate) defaults() {
	if _, ok := lec.mutation.CreatedAt(); !ok {
		v := logerror.DefaultCreatedAt()
		lec.mutation.SetCreatedAt(v)
	}
	if _, ok := lec.mutation.ID(); !ok {
		v := logerror.DefaultID()
		lec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lec *LogErrorCreate) check() error {
	if _, ok := lec.mutation.Error(); !ok {
		return &ValidationError{Name: "error", err: errors.New(`ent: missing required field "LogError.error"`)}
	}
	if _, ok := lec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogError.created_at"`)}
	}
	return nil
}

func (lec *LogErrorCreate) sqlSave(ctx context.Context) (*LogError, error) {
	if err := lec.check(); err != nil {
		return nil, err
	}
	_node, _spec := lec.createSpec()
	if err := sqlgraph.CreateNode(ctx, lec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lec.mutation.id = &_node.ID
	lec.mutation.done = true
	return _node, nil
}

func (lec *LogErrorCreate) createSpec() (*LogError, *sqlgraph.CreateSpec) {
	var (
		_node = &LogError{config: lec.config}
		_spec = sqlgraph.NewCreateSpec(logerror.Table, sqlgraph.NewFieldSpec(logerror.FieldID, field.TypeString))
	)
	_spec.OnConflict = lec.conflict
	if id, ok := lec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lec.mutation.Error(); ok {
		_spec.SetField(logerror.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := lec.mutation.CreatedAt(); ok {
		_spec.SetField(logerror.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogError.Create().
//		SetError(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogErrorUpsert) {
//			SetError(v+v).
//		}).
//		Exec(ctx)
func (lec *LogErrorCreate) OnConflict(opts ...sql.ConflictOption) *LogErrorUpsertOne {
	lec.conflict = opts
	return &LogErrorUpsertOne{
		create: lec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogError.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lec *LogErrorCreate) OnConflictColumns(columns ...string) *LogErrorUpsertOne {
	lec.conflict = append(lec.conflict, sql.ConflictColumns(columns...))
	return &LogErrorUpsertOne{
		create: lec,
	}
}

type (
	// LogErrorUpsertOne is the builder for "upsert"-ing
	//  one LogError node.
	LogErrorUpsertOne struct {
		create *LogErrorCreate
	}

	// LogErrorUpsert is the "OnConflict" setter.
	LogErrorUpsert struct {
		*sql.UpdateSet
	}
)

// SetError sets the "error" field.
func (u *LogErrorUpsert) SetError(v string) *LogErrorUpsert {
	u.Set(logerror.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *LogErrorUpsert) UpdateError() *LogErrorUpsert {
	u.SetExcluded(logerror.FieldError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LogError.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(logerror.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LogErrorUpsertOne) UpdateNewValues() *LogErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(logerror.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(logerror.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogError.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LogErrorUpsertOne) Ignore() *LogErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogErrorUpsertOne) DoNothing() *LogErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogErrorCreate.OnConflict
// documentation for more info.
func (u *LogErrorUpsertOne) Update(set func(*LogErrorUpsert)) *LogErrorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogErrorUpsert{UpdateSet: update})
	}))
	return u
}

// SetError sets the "error" field.
func (u *LogErrorUpsertOne) SetError(v string) *LogErrorUpsertOne {
	return u.Update(func(s *LogErrorUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *LogErrorUpsertOne) UpdateError() *LogErrorUpsertOne {
	return u.Update(func(s *LogErrorUpsert) {
		s.UpdateError()
	})
}

// Exec executes the query.
func (u *LogErrorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LogErrorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogErrorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LogErrorUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LogErrorUpsertOne.ID is not supported by MySQL driver. Use LogErrorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LogErrorUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LogErrorCreateBulk is the builder for creating many LogError entities in bulk.
type LogErrorCreateBulk struct {
	config
	err      error
	builders []*LogErrorCreate
	conflict []sql.ConflictOption
}

// Save creates the LogError entities in the database.
func (lecb *LogErrorCreateBulk) Save(ctx context.Context) ([]*LogError, error) {
	if lecb.err != nil {
		return nil, lecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lecb.builders))
	nodes := make([]*LogError, len(lecb.builders))
	mutators := make([]Mutator, len(lecb.builders))
	for i := range lecb.builders {
		func(i int, root context.Context) {
			builder := lecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogErrorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lecb *LogErrorCreateBulk) SaveX(ctx context.Context) []*LogError {
	v, err := lecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lecb *LogErrorCreateBulk) Exec(ctx context.Context) error {
	_, err := lecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lecb *LogErrorCreateBulk) ExecX(ctx context.Context) {
	if err := lecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LogError.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LogErrorUpsert) {
//			SetError(v+v).
//		}).
//		Exec(ctx)
func (lecb *LogErrorCreateBulk) OnConflict(opts ...sql.ConflictOption) *LogErrorUpsertBulk {
	lecb.conflict = opts
	return &LogErrorUpsertBulk{
		create: lecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LogError.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lecb *LogErrorCreateBulk) OnConflictColumns(columns ...string) *LogErrorUpsertBulk {
	lecb.conflict = append(lecb.conflict, sql.ConflictColumns(columns...))
	return &LogErrorUpsertBulk{
		create: lecb,
	}
}

// LogErrorUpsertBulk is the builder for "upsert"-ing
// a bulk of LogError nodes.
type LogErrorUpsertBulk struct {
	create *LogErrorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LogError.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(logerror.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LogErrorUpsertBulk) UpdateNewValues() *LogErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(logerror.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(logerror.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LogError.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LogErrorUpsertBulk) Ignore() *LogErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LogErrorUpsertBulk) DoNothing() *LogErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LogErrorCreateBulk.OnConflict
// documentation for more info.
func (u *LogErrorUpsertBulk) Update(set func(*LogErrorUpsert)) *LogErrorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LogErrorUpsert{UpdateSet: update})
	}))
	return u
}

// SetError sets the "error" field.
func (u *LogErrorUpsertBulk) SetError(v string) *LogErrorUpsertBulk {
	return u.Update(func(s *LogErrorUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *LogErrorUpsertBulk) UpdateError() *LogErrorUpsertBulk {
	return u.Update(func(s *LogErrorUpsert) {
		s.UpdateError()
	})
}

// Exec executes the query.
func (u *LogErrorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LogErrorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LogErrorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LogErrorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
