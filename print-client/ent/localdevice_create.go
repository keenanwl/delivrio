// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/print-client/ent/printjob"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocalDeviceCreate is the builder for creating a LocalDevice entity.
type LocalDeviceCreate struct {
	config
	mutation *LocalDeviceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ldc *LocalDeviceCreate) SetName(s string) *LocalDeviceCreate {
	ldc.mutation.SetName(s)
	return ldc
}

// SetSystemName sets the "system_name" field.
func (ldc *LocalDeviceCreate) SetSystemName(s string) *LocalDeviceCreate {
	ldc.mutation.SetSystemName(s)
	return ldc
}

// SetVendorID sets the "vendor_id" field.
func (ldc *LocalDeviceCreate) SetVendorID(i int) *LocalDeviceCreate {
	ldc.mutation.SetVendorID(i)
	return ldc
}

// SetNillableVendorID sets the "vendor_id" field if the given value is not nil.
func (ldc *LocalDeviceCreate) SetNillableVendorID(i *int) *LocalDeviceCreate {
	if i != nil {
		ldc.SetVendorID(*i)
	}
	return ldc
}

// SetProductID sets the "product_id" field.
func (ldc *LocalDeviceCreate) SetProductID(i int) *LocalDeviceCreate {
	ldc.mutation.SetProductID(i)
	return ldc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ldc *LocalDeviceCreate) SetNillableProductID(i *int) *LocalDeviceCreate {
	if i != nil {
		ldc.SetProductID(*i)
	}
	return ldc
}

// SetAddress sets the "address" field.
func (ldc *LocalDeviceCreate) SetAddress(s string) *LocalDeviceCreate {
	ldc.mutation.SetAddress(s)
	return ldc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ldc *LocalDeviceCreate) SetNillableAddress(s *string) *LocalDeviceCreate {
	if s != nil {
		ldc.SetAddress(*s)
	}
	return ldc
}

// SetActive sets the "active" field.
func (ldc *LocalDeviceCreate) SetActive(b bool) *LocalDeviceCreate {
	ldc.mutation.SetActive(b)
	return ldc
}

// SetArchived sets the "archived" field.
func (ldc *LocalDeviceCreate) SetArchived(b bool) *LocalDeviceCreate {
	ldc.mutation.SetArchived(b)
	return ldc
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ldc *LocalDeviceCreate) SetNillableArchived(b *bool) *LocalDeviceCreate {
	if b != nil {
		ldc.SetArchived(*b)
	}
	return ldc
}

// SetCategory sets the "category" field.
func (ldc *LocalDeviceCreate) SetCategory(l localdevice.Category) *LocalDeviceCreate {
	ldc.mutation.SetCategory(l)
	return ldc
}

// SetID sets the "id" field.
func (ldc *LocalDeviceCreate) SetID(pu pulid.ID) *LocalDeviceCreate {
	ldc.mutation.SetID(pu)
	return ldc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ldc *LocalDeviceCreate) SetNillableID(pu *pulid.ID) *LocalDeviceCreate {
	if pu != nil {
		ldc.SetID(*pu)
	}
	return ldc
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (ldc *LocalDeviceCreate) AddPrintJobIDs(ids ...pulid.ID) *LocalDeviceCreate {
	ldc.mutation.AddPrintJobIDs(ids...)
	return ldc
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (ldc *LocalDeviceCreate) AddPrintJob(p ...*PrintJob) *LocalDeviceCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ldc.AddPrintJobIDs(ids...)
}

// Mutation returns the LocalDeviceMutation object of the builder.
func (ldc *LocalDeviceCreate) Mutation() *LocalDeviceMutation {
	return ldc.mutation
}

// Save creates the LocalDevice in the database.
func (ldc *LocalDeviceCreate) Save(ctx context.Context) (*LocalDevice, error) {
	ldc.defaults()
	return withHooks(ctx, ldc.sqlSave, ldc.mutation, ldc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ldc *LocalDeviceCreate) SaveX(ctx context.Context) *LocalDevice {
	v, err := ldc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ldc *LocalDeviceCreate) Exec(ctx context.Context) error {
	_, err := ldc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ldc *LocalDeviceCreate) ExecX(ctx context.Context) {
	if err := ldc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ldc *LocalDeviceCreate) defaults() {
	if _, ok := ldc.mutation.Archived(); !ok {
		v := localdevice.DefaultArchived
		ldc.mutation.SetArchived(v)
	}
	if _, ok := ldc.mutation.ID(); !ok {
		v := localdevice.DefaultID()
		ldc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ldc *LocalDeviceCreate) check() error {
	if _, ok := ldc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "LocalDevice.name"`)}
	}
	if _, ok := ldc.mutation.SystemName(); !ok {
		return &ValidationError{Name: "system_name", err: errors.New(`ent: missing required field "LocalDevice.system_name"`)}
	}
	if _, ok := ldc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "LocalDevice.active"`)}
	}
	if _, ok := ldc.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`ent: missing required field "LocalDevice.archived"`)}
	}
	if _, ok := ldc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "LocalDevice.category"`)}
	}
	if v, ok := ldc.mutation.Category(); ok {
		if err := localdevice.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "LocalDevice.category": %w`, err)}
		}
	}
	return nil
}

func (ldc *LocalDeviceCreate) sqlSave(ctx context.Context) (*LocalDevice, error) {
	if err := ldc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ldc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ldc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ldc.mutation.id = &_node.ID
	ldc.mutation.done = true
	return _node, nil
}

func (ldc *LocalDeviceCreate) createSpec() (*LocalDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &LocalDevice{config: ldc.config}
		_spec = sqlgraph.NewCreateSpec(localdevice.Table, sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString))
	)
	_spec.OnConflict = ldc.conflict
	if id, ok := ldc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ldc.mutation.Name(); ok {
		_spec.SetField(localdevice.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ldc.mutation.SystemName(); ok {
		_spec.SetField(localdevice.FieldSystemName, field.TypeString, value)
		_node.SystemName = value
	}
	if value, ok := ldc.mutation.VendorID(); ok {
		_spec.SetField(localdevice.FieldVendorID, field.TypeInt, value)
		_node.VendorID = value
	}
	if value, ok := ldc.mutation.ProductID(); ok {
		_spec.SetField(localdevice.FieldProductID, field.TypeInt, value)
		_node.ProductID = value
	}
	if value, ok := ldc.mutation.Address(); ok {
		_spec.SetField(localdevice.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ldc.mutation.Active(); ok {
		_spec.SetField(localdevice.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := ldc.mutation.Archived(); ok {
		_spec.SetField(localdevice.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if value, ok := ldc.mutation.Category(); ok {
		_spec.SetField(localdevice.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if nodes := ldc.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   localdevice.PrintJobTable,
			Columns: []string{localdevice.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LocalDevice.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocalDeviceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ldc *LocalDeviceCreate) OnConflict(opts ...sql.ConflictOption) *LocalDeviceUpsertOne {
	ldc.conflict = opts
	return &LocalDeviceUpsertOne{
		create: ldc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LocalDevice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ldc *LocalDeviceCreate) OnConflictColumns(columns ...string) *LocalDeviceUpsertOne {
	ldc.conflict = append(ldc.conflict, sql.ConflictColumns(columns...))
	return &LocalDeviceUpsertOne{
		create: ldc,
	}
}

type (
	// LocalDeviceUpsertOne is the builder for "upsert"-ing
	//  one LocalDevice node.
	LocalDeviceUpsertOne struct {
		create *LocalDeviceCreate
	}

	// LocalDeviceUpsert is the "OnConflict" setter.
	LocalDeviceUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *LocalDeviceUpsert) SetName(v string) *LocalDeviceUpsert {
	u.Set(localdevice.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateName() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldName)
	return u
}

// SetSystemName sets the "system_name" field.
func (u *LocalDeviceUpsert) SetSystemName(v string) *LocalDeviceUpsert {
	u.Set(localdevice.FieldSystemName, v)
	return u
}

// UpdateSystemName sets the "system_name" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateSystemName() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldSystemName)
	return u
}

// SetVendorID sets the "vendor_id" field.
func (u *LocalDeviceUpsert) SetVendorID(v int) *LocalDeviceUpsert {
	u.Set(localdevice.FieldVendorID, v)
	return u
}

// UpdateVendorID sets the "vendor_id" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateVendorID() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldVendorID)
	return u
}

// AddVendorID adds v to the "vendor_id" field.
func (u *LocalDeviceUpsert) AddVendorID(v int) *LocalDeviceUpsert {
	u.Add(localdevice.FieldVendorID, v)
	return u
}

// ClearVendorID clears the value of the "vendor_id" field.
func (u *LocalDeviceUpsert) ClearVendorID() *LocalDeviceUpsert {
	u.SetNull(localdevice.FieldVendorID)
	return u
}

// SetProductID sets the "product_id" field.
func (u *LocalDeviceUpsert) SetProductID(v int) *LocalDeviceUpsert {
	u.Set(localdevice.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateProductID() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldProductID)
	return u
}

// AddProductID adds v to the "product_id" field.
func (u *LocalDeviceUpsert) AddProductID(v int) *LocalDeviceUpsert {
	u.Add(localdevice.FieldProductID, v)
	return u
}

// ClearProductID clears the value of the "product_id" field.
func (u *LocalDeviceUpsert) ClearProductID() *LocalDeviceUpsert {
	u.SetNull(localdevice.FieldProductID)
	return u
}

// SetAddress sets the "address" field.
func (u *LocalDeviceUpsert) SetAddress(v string) *LocalDeviceUpsert {
	u.Set(localdevice.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateAddress() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *LocalDeviceUpsert) ClearAddress() *LocalDeviceUpsert {
	u.SetNull(localdevice.FieldAddress)
	return u
}

// SetActive sets the "active" field.
func (u *LocalDeviceUpsert) SetActive(v bool) *LocalDeviceUpsert {
	u.Set(localdevice.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateActive() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldActive)
	return u
}

// SetArchived sets the "archived" field.
func (u *LocalDeviceUpsert) SetArchived(v bool) *LocalDeviceUpsert {
	u.Set(localdevice.FieldArchived, v)
	return u
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateArchived() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldArchived)
	return u
}

// SetCategory sets the "category" field.
func (u *LocalDeviceUpsert) SetCategory(v localdevice.Category) *LocalDeviceUpsert {
	u.Set(localdevice.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *LocalDeviceUpsert) UpdateCategory() *LocalDeviceUpsert {
	u.SetExcluded(localdevice.FieldCategory)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LocalDevice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(localdevice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocalDeviceUpsertOne) UpdateNewValues() *LocalDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(localdevice.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LocalDevice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LocalDeviceUpsertOne) Ignore() *LocalDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocalDeviceUpsertOne) DoNothing() *LocalDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocalDeviceCreate.OnConflict
// documentation for more info.
func (u *LocalDeviceUpsertOne) Update(set func(*LocalDeviceUpsert)) *LocalDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocalDeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LocalDeviceUpsertOne) SetName(v string) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateName() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateName()
	})
}

// SetSystemName sets the "system_name" field.
func (u *LocalDeviceUpsertOne) SetSystemName(v string) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetSystemName(v)
	})
}

// UpdateSystemName sets the "system_name" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateSystemName() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateSystemName()
	})
}

// SetVendorID sets the "vendor_id" field.
func (u *LocalDeviceUpsertOne) SetVendorID(v int) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetVendorID(v)
	})
}

// AddVendorID adds v to the "vendor_id" field.
func (u *LocalDeviceUpsertOne) AddVendorID(v int) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.AddVendorID(v)
	})
}

// UpdateVendorID sets the "vendor_id" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateVendorID() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateVendorID()
	})
}

// ClearVendorID clears the value of the "vendor_id" field.
func (u *LocalDeviceUpsertOne) ClearVendorID() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.ClearVendorID()
	})
}

// SetProductID sets the "product_id" field.
func (u *LocalDeviceUpsertOne) SetProductID(v int) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *LocalDeviceUpsertOne) AddProductID(v int) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateProductID() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *LocalDeviceUpsertOne) ClearProductID() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.ClearProductID()
	})
}

// SetAddress sets the "address" field.
func (u *LocalDeviceUpsertOne) SetAddress(v string) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateAddress() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *LocalDeviceUpsertOne) ClearAddress() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.ClearAddress()
	})
}

// SetActive sets the "active" field.
func (u *LocalDeviceUpsertOne) SetActive(v bool) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateActive() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateActive()
	})
}

// SetArchived sets the "archived" field.
func (u *LocalDeviceUpsertOne) SetArchived(v bool) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateArchived() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateArchived()
	})
}

// SetCategory sets the "category" field.
func (u *LocalDeviceUpsertOne) SetCategory(v localdevice.Category) *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *LocalDeviceUpsertOne) UpdateCategory() *LocalDeviceUpsertOne {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateCategory()
	})
}

// Exec executes the query.
func (u *LocalDeviceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocalDeviceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocalDeviceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LocalDeviceUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LocalDeviceUpsertOne.ID is not supported by MySQL driver. Use LocalDeviceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LocalDeviceUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LocalDeviceCreateBulk is the builder for creating many LocalDevice entities in bulk.
type LocalDeviceCreateBulk struct {
	config
	err      error
	builders []*LocalDeviceCreate
	conflict []sql.ConflictOption
}

// Save creates the LocalDevice entities in the database.
func (ldcb *LocalDeviceCreateBulk) Save(ctx context.Context) ([]*LocalDevice, error) {
	if ldcb.err != nil {
		return nil, ldcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ldcb.builders))
	nodes := make([]*LocalDevice, len(ldcb.builders))
	mutators := make([]Mutator, len(ldcb.builders))
	for i := range ldcb.builders {
		func(i int, root context.Context) {
			builder := ldcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocalDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ldcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ldcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ldcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ldcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ldcb *LocalDeviceCreateBulk) SaveX(ctx context.Context) []*LocalDevice {
	v, err := ldcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ldcb *LocalDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := ldcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ldcb *LocalDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := ldcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LocalDevice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocalDeviceUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ldcb *LocalDeviceCreateBulk) OnConflict(opts ...sql.ConflictOption) *LocalDeviceUpsertBulk {
	ldcb.conflict = opts
	return &LocalDeviceUpsertBulk{
		create: ldcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LocalDevice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ldcb *LocalDeviceCreateBulk) OnConflictColumns(columns ...string) *LocalDeviceUpsertBulk {
	ldcb.conflict = append(ldcb.conflict, sql.ConflictColumns(columns...))
	return &LocalDeviceUpsertBulk{
		create: ldcb,
	}
}

// LocalDeviceUpsertBulk is the builder for "upsert"-ing
// a bulk of LocalDevice nodes.
type LocalDeviceUpsertBulk struct {
	create *LocalDeviceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LocalDevice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(localdevice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocalDeviceUpsertBulk) UpdateNewValues() *LocalDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(localdevice.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LocalDevice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LocalDeviceUpsertBulk) Ignore() *LocalDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocalDeviceUpsertBulk) DoNothing() *LocalDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocalDeviceCreateBulk.OnConflict
// documentation for more info.
func (u *LocalDeviceUpsertBulk) Update(set func(*LocalDeviceUpsert)) *LocalDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocalDeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LocalDeviceUpsertBulk) SetName(v string) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateName() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateName()
	})
}

// SetSystemName sets the "system_name" field.
func (u *LocalDeviceUpsertBulk) SetSystemName(v string) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetSystemName(v)
	})
}

// UpdateSystemName sets the "system_name" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateSystemName() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateSystemName()
	})
}

// SetVendorID sets the "vendor_id" field.
func (u *LocalDeviceUpsertBulk) SetVendorID(v int) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetVendorID(v)
	})
}

// AddVendorID adds v to the "vendor_id" field.
func (u *LocalDeviceUpsertBulk) AddVendorID(v int) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.AddVendorID(v)
	})
}

// UpdateVendorID sets the "vendor_id" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateVendorID() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateVendorID()
	})
}

// ClearVendorID clears the value of the "vendor_id" field.
func (u *LocalDeviceUpsertBulk) ClearVendorID() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.ClearVendorID()
	})
}

// SetProductID sets the "product_id" field.
func (u *LocalDeviceUpsertBulk) SetProductID(v int) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *LocalDeviceUpsertBulk) AddProductID(v int) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateProductID() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateProductID()
	})
}

// ClearProductID clears the value of the "product_id" field.
func (u *LocalDeviceUpsertBulk) ClearProductID() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.ClearProductID()
	})
}

// SetAddress sets the "address" field.
func (u *LocalDeviceUpsertBulk) SetAddress(v string) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateAddress() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *LocalDeviceUpsertBulk) ClearAddress() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.ClearAddress()
	})
}

// SetActive sets the "active" field.
func (u *LocalDeviceUpsertBulk) SetActive(v bool) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateActive() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateActive()
	})
}

// SetArchived sets the "archived" field.
func (u *LocalDeviceUpsertBulk) SetArchived(v bool) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateArchived() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateArchived()
	})
}

// SetCategory sets the "category" field.
func (u *LocalDeviceUpsertBulk) SetCategory(v localdevice.Category) *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *LocalDeviceUpsertBulk) UpdateCategory() *LocalDeviceUpsertBulk {
	return u.Update(func(s *LocalDeviceUpsert) {
		s.UpdateCategory()
	})
}

// Exec executes the query.
func (u *LocalDeviceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LocalDeviceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocalDeviceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocalDeviceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
