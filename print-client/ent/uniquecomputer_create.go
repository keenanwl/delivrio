// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/print-client/ent/uniquecomputer"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UniqueComputerCreate is the builder for creating a UniqueComputer entity.
type UniqueComputerCreate struct {
	config
	mutation *UniqueComputerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetID sets the "id" field.
func (ucc *UniqueComputerCreate) SetID(pu pulid.ID) *UniqueComputerCreate {
	ucc.mutation.SetID(pu)
	return ucc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ucc *UniqueComputerCreate) SetNillableID(pu *pulid.ID) *UniqueComputerCreate {
	if pu != nil {
		ucc.SetID(*pu)
	}
	return ucc
}

// Mutation returns the UniqueComputerMutation object of the builder.
func (ucc *UniqueComputerCreate) Mutation() *UniqueComputerMutation {
	return ucc.mutation
}

// Save creates the UniqueComputer in the database.
func (ucc *UniqueComputerCreate) Save(ctx context.Context) (*UniqueComputer, error) {
	ucc.defaults()
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UniqueComputerCreate) SaveX(ctx context.Context) *UniqueComputer {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UniqueComputerCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UniqueComputerCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UniqueComputerCreate) defaults() {
	if _, ok := ucc.mutation.ID(); !ok {
		v := uniquecomputer.DefaultID()
		ucc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UniqueComputerCreate) check() error {
	return nil
}

func (ucc *UniqueComputerCreate) sqlSave(ctx context.Context) (*UniqueComputer, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UniqueComputerCreate) createSpec() (*UniqueComputer, *sqlgraph.CreateSpec) {
	var (
		_node = &UniqueComputer{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(uniquecomputer.Table, sqlgraph.NewFieldSpec(uniquecomputer.FieldID, field.TypeString))
	)
	_spec.OnConflict = ucc.conflict
	if id, ok := ucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UniqueComputer.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (ucc *UniqueComputerCreate) OnConflict(opts ...sql.ConflictOption) *UniqueComputerUpsertOne {
	ucc.conflict = opts
	return &UniqueComputerUpsertOne{
		create: ucc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UniqueComputer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucc *UniqueComputerCreate) OnConflictColumns(columns ...string) *UniqueComputerUpsertOne {
	ucc.conflict = append(ucc.conflict, sql.ConflictColumns(columns...))
	return &UniqueComputerUpsertOne{
		create: ucc,
	}
}

type (
	// UniqueComputerUpsertOne is the builder for "upsert"-ing
	//  one UniqueComputer node.
	UniqueComputerUpsertOne struct {
		create *UniqueComputerCreate
	}

	// UniqueComputerUpsert is the "OnConflict" setter.
	UniqueComputerUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UniqueComputer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(uniquecomputer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UniqueComputerUpsertOne) UpdateNewValues() *UniqueComputerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(uniquecomputer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UniqueComputer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UniqueComputerUpsertOne) Ignore() *UniqueComputerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UniqueComputerUpsertOne) DoNothing() *UniqueComputerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UniqueComputerCreate.OnConflict
// documentation for more info.
func (u *UniqueComputerUpsertOne) Update(set func(*UniqueComputerUpsert)) *UniqueComputerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UniqueComputerUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UniqueComputerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UniqueComputerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UniqueComputerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UniqueComputerUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UniqueComputerUpsertOne.ID is not supported by MySQL driver. Use UniqueComputerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UniqueComputerUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UniqueComputerCreateBulk is the builder for creating many UniqueComputer entities in bulk.
type UniqueComputerCreateBulk struct {
	config
	err      error
	builders []*UniqueComputerCreate
	conflict []sql.ConflictOption
}

// Save creates the UniqueComputer entities in the database.
func (uccb *UniqueComputerCreateBulk) Save(ctx context.Context) ([]*UniqueComputer, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UniqueComputer, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UniqueComputerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UniqueComputerCreateBulk) SaveX(ctx context.Context) []*UniqueComputer {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UniqueComputerCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UniqueComputerCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UniqueComputer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (uccb *UniqueComputerCreateBulk) OnConflict(opts ...sql.ConflictOption) *UniqueComputerUpsertBulk {
	uccb.conflict = opts
	return &UniqueComputerUpsertBulk{
		create: uccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UniqueComputer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uccb *UniqueComputerCreateBulk) OnConflictColumns(columns ...string) *UniqueComputerUpsertBulk {
	uccb.conflict = append(uccb.conflict, sql.ConflictColumns(columns...))
	return &UniqueComputerUpsertBulk{
		create: uccb,
	}
}

// UniqueComputerUpsertBulk is the builder for "upsert"-ing
// a bulk of UniqueComputer nodes.
type UniqueComputerUpsertBulk struct {
	create *UniqueComputerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UniqueComputer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(uniquecomputer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UniqueComputerUpsertBulk) UpdateNewValues() *UniqueComputerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(uniquecomputer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UniqueComputer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UniqueComputerUpsertBulk) Ignore() *UniqueComputerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UniqueComputerUpsertBulk) DoNothing() *UniqueComputerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UniqueComputerCreateBulk.OnConflict
// documentation for more info.
func (u *UniqueComputerUpsertBulk) Update(set func(*UniqueComputerUpsert)) *UniqueComputerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UniqueComputerUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *UniqueComputerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UniqueComputerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UniqueComputerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UniqueComputerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
