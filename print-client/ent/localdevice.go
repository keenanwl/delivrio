// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LocalDevice is the model entity for the LocalDevice schema.
type LocalDevice struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SystemName holds the value of the "system_name" field.
	SystemName string `json:"system_name,omitempty"`
	// VendorID holds the value of the "vendor_id" field.
	VendorID int `json:"vendor_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Toggles which devices are available to remote
	Active bool `json:"active,omitempty"`
	// Toggles whether to show printers on the local list (meant for hiding network printers)
	Archived bool `json:"archived,omitempty"`
	// Category holds the value of the "category" field.
	Category localdevice.Category `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocalDeviceQuery when eager-loading is set.
	Edges        LocalDeviceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LocalDeviceEdges holds the relations/edges for other nodes in the graph.
type LocalDeviceEdges struct {
	// PrintJob holds the value of the print_job edge.
	PrintJob []*PrintJob `json:"print_job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PrintJobOrErr returns the PrintJob value or an error if the edge
// was not loaded in eager-loading.
func (e LocalDeviceEdges) PrintJobOrErr() ([]*PrintJob, error) {
	if e.loadedTypes[0] {
		return e.PrintJob, nil
	}
	return nil, &NotLoadedError{edge: "print_job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LocalDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case localdevice.FieldID:
			values[i] = new(pulid.ID)
		case localdevice.FieldActive, localdevice.FieldArchived:
			values[i] = new(sql.NullBool)
		case localdevice.FieldVendorID, localdevice.FieldProductID:
			values[i] = new(sql.NullInt64)
		case localdevice.FieldName, localdevice.FieldSystemName, localdevice.FieldAddress, localdevice.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LocalDevice fields.
func (ld *LocalDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case localdevice.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ld.ID = *value
			}
		case localdevice.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ld.Name = value.String
			}
		case localdevice.FieldSystemName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_name", values[i])
			} else if value.Valid {
				ld.SystemName = value.String
			}
		case localdevice.FieldVendorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vendor_id", values[i])
			} else if value.Valid {
				ld.VendorID = int(value.Int64)
			}
		case localdevice.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				ld.ProductID = int(value.Int64)
			}
		case localdevice.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				ld.Address = value.String
			}
		case localdevice.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				ld.Active = value.Bool
			}
		case localdevice.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				ld.Archived = value.Bool
			}
		case localdevice.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ld.Category = localdevice.Category(value.String)
			}
		default:
			ld.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LocalDevice.
// This includes values selected through modifiers, order, etc.
func (ld *LocalDevice) Value(name string) (ent.Value, error) {
	return ld.selectValues.Get(name)
}

// QueryPrintJob queries the "print_job" edge of the LocalDevice entity.
func (ld *LocalDevice) QueryPrintJob() *PrintJobQuery {
	return NewLocalDeviceClient(ld.config).QueryPrintJob(ld)
}

// Update returns a builder for updating this LocalDevice.
// Note that you need to call LocalDevice.Unwrap() before calling this method if this LocalDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (ld *LocalDevice) Update() *LocalDeviceUpdateOne {
	return NewLocalDeviceClient(ld.config).UpdateOne(ld)
}

// Unwrap unwraps the LocalDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ld *LocalDevice) Unwrap() *LocalDevice {
	_tx, ok := ld.config.driver.(*txDriver)
	if !ok {
		panic("ent: LocalDevice is not a transactional entity")
	}
	ld.config.driver = _tx.drv
	return ld
}

// String implements the fmt.Stringer.
func (ld *LocalDevice) String() string {
	var builder strings.Builder
	builder.WriteString("LocalDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ld.ID))
	builder.WriteString("name=")
	builder.WriteString(ld.Name)
	builder.WriteString(", ")
	builder.WriteString("system_name=")
	builder.WriteString(ld.SystemName)
	builder.WriteString(", ")
	builder.WriteString("vendor_id=")
	builder.WriteString(fmt.Sprintf("%v", ld.VendorID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", ld.ProductID))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(ld.Address)
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", ld.Active))
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", ld.Archived))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", ld.Category))
	builder.WriteByte(')')
	return builder.String()
}

// LocalDevices is a parsable slice of LocalDevice.
type LocalDevices []*LocalDevice
