// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/print-client/ent/remoteconnection"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RemoteConnection is the model entity for the RemoteConnection schema.
type RemoteConnection struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// RemoteURL holds the value of the "remote_url" field.
	RemoteURL string `json:"remote_url,omitempty"`
	// RegistrationToken holds the value of the "registration_token" field.
	RegistrationToken string `json:"registration_token,omitempty"`
	// WorkstationName holds the value of the "workstation_name" field.
	WorkstationName string `json:"workstation_name,omitempty"`
	// LastPing holds the value of the "last_ping" field.
	LastPing     *time.Time `json:"last_ping,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RemoteConnection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case remoteconnection.FieldID:
			values[i] = new(pulid.ID)
		case remoteconnection.FieldRemoteURL, remoteconnection.FieldRegistrationToken, remoteconnection.FieldWorkstationName:
			values[i] = new(sql.NullString)
		case remoteconnection.FieldLastPing:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RemoteConnection fields.
func (rc *RemoteConnection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case remoteconnection.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rc.ID = *value
			}
		case remoteconnection.FieldRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remote_url", values[i])
			} else if value.Valid {
				rc.RemoteURL = value.String
			}
		case remoteconnection.FieldRegistrationToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registration_token", values[i])
			} else if value.Valid {
				rc.RegistrationToken = value.String
			}
		case remoteconnection.FieldWorkstationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workstation_name", values[i])
			} else if value.Valid {
				rc.WorkstationName = value.String
			}
		case remoteconnection.FieldLastPing:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_ping", values[i])
			} else if value.Valid {
				rc.LastPing = new(time.Time)
				*rc.LastPing = value.Time
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RemoteConnection.
// This includes values selected through modifiers, order, etc.
func (rc *RemoteConnection) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// Update returns a builder for updating this RemoteConnection.
// Note that you need to call RemoteConnection.Unwrap() before calling this method if this RemoteConnection
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RemoteConnection) Update() *RemoteConnectionUpdateOne {
	return NewRemoteConnectionClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RemoteConnection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RemoteConnection) Unwrap() *RemoteConnection {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RemoteConnection is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RemoteConnection) String() string {
	var builder strings.Builder
	builder.WriteString("RemoteConnection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("remote_url=")
	builder.WriteString(rc.RemoteURL)
	builder.WriteString(", ")
	builder.WriteString("registration_token=")
	builder.WriteString(rc.RegistrationToken)
	builder.WriteString(", ")
	builder.WriteString("workstation_name=")
	builder.WriteString(rc.WorkstationName)
	builder.WriteString(", ")
	if v := rc.LastPing; v != nil {
		builder.WriteString("last_ping=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RemoteConnections is a parsable slice of RemoteConnection.
type RemoteConnections []*RemoteConnection
