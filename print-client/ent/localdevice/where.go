// Code generated by ent, DO NOT EDIT.

package localdevice

import (
	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldName, v))
}

// SystemName applies equality check predicate on the "system_name" field. It's identical to SystemNameEQ.
func SystemName(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldSystemName, v))
}

// VendorID applies equality check predicate on the "vendor_id" field. It's identical to VendorIDEQ.
func VendorID(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldVendorID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldProductID, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldAddress, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldActive, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldArchived, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldContainsFold(FieldName, v))
}

// SystemNameEQ applies the EQ predicate on the "system_name" field.
func SystemNameEQ(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldSystemName, v))
}

// SystemNameNEQ applies the NEQ predicate on the "system_name" field.
func SystemNameNEQ(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldSystemName, v))
}

// SystemNameIn applies the In predicate on the "system_name" field.
func SystemNameIn(vs ...string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldSystemName, vs...))
}

// SystemNameNotIn applies the NotIn predicate on the "system_name" field.
func SystemNameNotIn(vs ...string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldSystemName, vs...))
}

// SystemNameGT applies the GT predicate on the "system_name" field.
func SystemNameGT(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGT(FieldSystemName, v))
}

// SystemNameGTE applies the GTE predicate on the "system_name" field.
func SystemNameGTE(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGTE(FieldSystemName, v))
}

// SystemNameLT applies the LT predicate on the "system_name" field.
func SystemNameLT(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLT(FieldSystemName, v))
}

// SystemNameLTE applies the LTE predicate on the "system_name" field.
func SystemNameLTE(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLTE(FieldSystemName, v))
}

// SystemNameContains applies the Contains predicate on the "system_name" field.
func SystemNameContains(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldContains(FieldSystemName, v))
}

// SystemNameHasPrefix applies the HasPrefix predicate on the "system_name" field.
func SystemNameHasPrefix(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldHasPrefix(FieldSystemName, v))
}

// SystemNameHasSuffix applies the HasSuffix predicate on the "system_name" field.
func SystemNameHasSuffix(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldHasSuffix(FieldSystemName, v))
}

// SystemNameEqualFold applies the EqualFold predicate on the "system_name" field.
func SystemNameEqualFold(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEqualFold(FieldSystemName, v))
}

// SystemNameContainsFold applies the ContainsFold predicate on the "system_name" field.
func SystemNameContainsFold(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldContainsFold(FieldSystemName, v))
}

// VendorIDEQ applies the EQ predicate on the "vendor_id" field.
func VendorIDEQ(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldVendorID, v))
}

// VendorIDNEQ applies the NEQ predicate on the "vendor_id" field.
func VendorIDNEQ(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldVendorID, v))
}

// VendorIDIn applies the In predicate on the "vendor_id" field.
func VendorIDIn(vs ...int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldVendorID, vs...))
}

// VendorIDNotIn applies the NotIn predicate on the "vendor_id" field.
func VendorIDNotIn(vs ...int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldVendorID, vs...))
}

// VendorIDGT applies the GT predicate on the "vendor_id" field.
func VendorIDGT(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGT(FieldVendorID, v))
}

// VendorIDGTE applies the GTE predicate on the "vendor_id" field.
func VendorIDGTE(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGTE(FieldVendorID, v))
}

// VendorIDLT applies the LT predicate on the "vendor_id" field.
func VendorIDLT(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLT(FieldVendorID, v))
}

// VendorIDLTE applies the LTE predicate on the "vendor_id" field.
func VendorIDLTE(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLTE(FieldVendorID, v))
}

// VendorIDIsNil applies the IsNil predicate on the "vendor_id" field.
func VendorIDIsNil() predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIsNull(FieldVendorID))
}

// VendorIDNotNil applies the NotNil predicate on the "vendor_id" field.
func VendorIDNotNil() predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotNull(FieldVendorID))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLTE(FieldProductID, v))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotNull(FieldProductID))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldContainsFold(FieldAddress, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldActive, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldArchived, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.LocalDevice {
	return predicate.LocalDevice(sql.FieldNotIn(FieldCategory, vs...))
}

// HasPrintJob applies the HasEdge predicate on the "print_job" edge.
func HasPrintJob() predicate.LocalDevice {
	return predicate.LocalDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PrintJobTable, PrintJobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrintJobWith applies the HasEdge predicate on the "print_job" edge with a given conditions (other predicates).
func HasPrintJobWith(preds ...predicate.PrintJob) predicate.LocalDevice {
	return predicate.LocalDevice(func(s *sql.Selector) {
		step := newPrintJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LocalDevice) predicate.LocalDevice {
	return predicate.LocalDevice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LocalDevice) predicate.LocalDevice {
	return predicate.LocalDevice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LocalDevice) predicate.LocalDevice {
	return predicate.LocalDevice(sql.NotPredicates(p))
}
