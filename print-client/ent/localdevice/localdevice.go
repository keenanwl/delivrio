// Code generated by ent, DO NOT EDIT.

package localdevice

import (
	"fmt"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the localdevice type in the database.
	Label = "local_device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSystemName holds the string denoting the system_name field in the database.
	FieldSystemName = "system_name"
	// FieldVendorID holds the string denoting the vendor_id field in the database.
	FieldVendorID = "vendor_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// EdgePrintJob holds the string denoting the print_job edge name in mutations.
	EdgePrintJob = "print_job"
	// Table holds the table name of the localdevice in the database.
	Table = "local_devices"
	// PrintJobTable is the table that holds the print_job relation/edge.
	PrintJobTable = "print_jobs"
	// PrintJobInverseTable is the table name for the PrintJob entity.
	// It exists in this package in order to avoid circular dependency with the "printjob" package.
	PrintJobInverseTable = "print_jobs"
	// PrintJobColumn is the table column denoting the print_job relation/edge.
	PrintJobColumn = "print_job_local_device"
)

// Columns holds all SQL columns for localdevice fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSystemName,
	FieldVendorID,
	FieldProductID,
	FieldAddress,
	FieldActive,
	FieldArchived,
	FieldCategory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultArchived holds the default value on creation for the "archived" field.
	DefaultArchived bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryScanner Category = "scanner"
	CategoryPrinter Category = "printer"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryScanner, CategoryPrinter:
		return nil
	default:
		return fmt.Errorf("localdevice: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the LocalDevice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySystemName orders the results by the system_name field.
func BySystemName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemName, opts...).ToFunc()
}

// ByVendorID orders the results by the vendor_id field.
func ByVendorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVendorID, opts...).ToFunc()
}

// ByProductID orders the results by the product_id field.
func ByProductID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByPrintJobCount orders the results by print_job count.
func ByPrintJobCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrintJobStep(), opts...)
	}
}

// ByPrintJob orders the results by print_job terms.
func ByPrintJob(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrintJobStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPrintJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrintJobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PrintJobTable, PrintJobColumn),
	)
}
