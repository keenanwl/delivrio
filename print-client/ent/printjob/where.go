// Code generated by ent, DO NOT EDIT.

package printjob

import (
	"time"

	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldID, id))
}

// UseShell applies equality check predicate on the "use_shell" field. It's identical to UseShellEQ.
func UseShell(v bool) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldUseShell, v))
}

// Base64PrintData applies equality check predicate on the "base64_print_data" field. It's identical to Base64PrintDataEQ.
func Base64PrintData(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldBase64PrintData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldStatus, vs...))
}

// FileExtensionEQ applies the EQ predicate on the "file_extension" field.
func FileExtensionEQ(v FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldFileExtension, v))
}

// FileExtensionNEQ applies the NEQ predicate on the "file_extension" field.
func FileExtensionNEQ(v FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldFileExtension, v))
}

// FileExtensionIn applies the In predicate on the "file_extension" field.
func FileExtensionIn(vs ...FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldFileExtension, vs...))
}

// FileExtensionNotIn applies the NotIn predicate on the "file_extension" field.
func FileExtensionNotIn(vs ...FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldFileExtension, vs...))
}

// UseShellEQ applies the EQ predicate on the "use_shell" field.
func UseShellEQ(v bool) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldUseShell, v))
}

// UseShellNEQ applies the NEQ predicate on the "use_shell" field.
func UseShellNEQ(v bool) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldUseShell, v))
}

// Base64PrintDataEQ applies the EQ predicate on the "base64_print_data" field.
func Base64PrintDataEQ(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldBase64PrintData, v))
}

// Base64PrintDataNEQ applies the NEQ predicate on the "base64_print_data" field.
func Base64PrintDataNEQ(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldBase64PrintData, v))
}

// Base64PrintDataIn applies the In predicate on the "base64_print_data" field.
func Base64PrintDataIn(vs ...string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldBase64PrintData, vs...))
}

// Base64PrintDataNotIn applies the NotIn predicate on the "base64_print_data" field.
func Base64PrintDataNotIn(vs ...string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldBase64PrintData, vs...))
}

// Base64PrintDataGT applies the GT predicate on the "base64_print_data" field.
func Base64PrintDataGT(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldBase64PrintData, v))
}

// Base64PrintDataGTE applies the GTE predicate on the "base64_print_data" field.
func Base64PrintDataGTE(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldBase64PrintData, v))
}

// Base64PrintDataLT applies the LT predicate on the "base64_print_data" field.
func Base64PrintDataLT(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldBase64PrintData, v))
}

// Base64PrintDataLTE applies the LTE predicate on the "base64_print_data" field.
func Base64PrintDataLTE(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldBase64PrintData, v))
}

// Base64PrintDataContains applies the Contains predicate on the "base64_print_data" field.
func Base64PrintDataContains(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldContains(FieldBase64PrintData, v))
}

// Base64PrintDataHasPrefix applies the HasPrefix predicate on the "base64_print_data" field.
func Base64PrintDataHasPrefix(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldHasPrefix(FieldBase64PrintData, v))
}

// Base64PrintDataHasSuffix applies the HasSuffix predicate on the "base64_print_data" field.
func Base64PrintDataHasSuffix(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldHasSuffix(FieldBase64PrintData, v))
}

// Base64PrintDataEqualFold applies the EqualFold predicate on the "base64_print_data" field.
func Base64PrintDataEqualFold(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEqualFold(FieldBase64PrintData, v))
}

// Base64PrintDataContainsFold applies the ContainsFold predicate on the "base64_print_data" field.
func Base64PrintDataContainsFold(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldContainsFold(FieldBase64PrintData, v))
}

// MessagesIsNil applies the IsNil predicate on the "messages" field.
func MessagesIsNil() predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIsNull(FieldMessages))
}

// MessagesNotNil applies the NotNil predicate on the "messages" field.
func MessagesNotNil() predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotNull(FieldMessages))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldCreatedAt, v))
}

// HasLocalDevice applies the HasEdge predicate on the "local_device" edge.
func HasLocalDevice() predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LocalDeviceTable, LocalDeviceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocalDeviceWith applies the HasEdge predicate on the "local_device" edge with a given conditions (other predicates).
func HasLocalDeviceWith(preds ...predicate.LocalDevice) predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := newLocalDeviceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrintJob) predicate.PrintJob {
	return predicate.PrintJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrintJob) predicate.PrintJob {
	return predicate.PrintJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrintJob) predicate.PrintJob {
	return predicate.PrintJob(sql.NotPredicates(p))
}
