// Code generated by ent, DO NOT EDIT.

package printjob

import (
	"fmt"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the printjob type in the database.
	Label = "print_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFileExtension holds the string denoting the file_extension field in the database.
	FieldFileExtension = "file_extension"
	// FieldUseShell holds the string denoting the use_shell field in the database.
	FieldUseShell = "use_shell"
	// FieldBase64PrintData holds the string denoting the base64_print_data field in the database.
	FieldBase64PrintData = "base64_print_data"
	// FieldMessages holds the string denoting the messages field in the database.
	FieldMessages = "messages"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeLocalDevice holds the string denoting the local_device edge name in mutations.
	EdgeLocalDevice = "local_device"
	// Table holds the table name of the printjob in the database.
	Table = "print_jobs"
	// LocalDeviceTable is the table that holds the local_device relation/edge.
	LocalDeviceTable = "print_jobs"
	// LocalDeviceInverseTable is the table name for the LocalDevice entity.
	// It exists in this package in order to avoid circular dependency with the "localdevice" package.
	LocalDeviceInverseTable = "local_devices"
	// LocalDeviceColumn is the table column denoting the local_device relation/edge.
	LocalDeviceColumn = "print_job_local_device"
)

// Columns holds all SQL columns for printjob fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldFileExtension,
	FieldUseShell,
	FieldBase64PrintData,
	FieldMessages,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "print_jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"print_job_local_device",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUseShell holds the default value on creation for the "use_shell" field.
	DefaultUseShell bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending        Status = "pending"
	StatusPendingSuccess Status = "pending_success"
	StatusSuccess        Status = "success"
	StatusPendingCancel  Status = "pending_cancel"
	StatusCanceled       Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusPendingSuccess, StatusSuccess, StatusPendingCancel, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("printjob: invalid enum value for status field: %q", s)
	}
}

// FileExtension defines the type for the "file_extension" enum field.
type FileExtension string

// FileExtension values.
const (
	FileExtensionPdf FileExtension = "pdf"
	FileExtensionZpl FileExtension = "zpl"
	FileExtensionTxt FileExtension = "txt"
	FileExtensionPng FileExtension = "png"
)

func (fe FileExtension) String() string {
	return string(fe)
}

// FileExtensionValidator is a validator for the "file_extension" field enum values. It is called by the builders before save.
func FileExtensionValidator(fe FileExtension) error {
	switch fe {
	case FileExtensionPdf, FileExtensionZpl, FileExtensionTxt, FileExtensionPng:
		return nil
	default:
		return fmt.Errorf("printjob: invalid enum value for file_extension field: %q", fe)
	}
}

// OrderOption defines the ordering options for the PrintJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFileExtension orders the results by the file_extension field.
func ByFileExtension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExtension, opts...).ToFunc()
}

// ByUseShell orders the results by the use_shell field.
func ByUseShell(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseShell, opts...).ToFunc()
}

// ByBase64PrintData orders the results by the base64_print_data field.
func ByBase64PrintData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBase64PrintData, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLocalDeviceField orders the results by local_device field.
func ByLocalDeviceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocalDeviceStep(), sql.OrderByField(field, opts...))
	}
}
func newLocalDeviceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocalDeviceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LocalDeviceTable, LocalDeviceColumn),
	)
}
