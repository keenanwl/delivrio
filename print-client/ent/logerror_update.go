// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/print-client/ent/logerror"
	"delivrio.io/print-client/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogErrorUpdate is the builder for updating LogError entities.
type LogErrorUpdate struct {
	config
	hooks    []Hook
	mutation *LogErrorMutation
}

// Where appends a list predicates to the LogErrorUpdate builder.
func (leu *LogErrorUpdate) Where(ps ...predicate.LogError) *LogErrorUpdate {
	leu.mutation.Where(ps...)
	return leu
}

// SetError sets the "error" field.
func (leu *LogErrorUpdate) SetError(s string) *LogErrorUpdate {
	leu.mutation.SetError(s)
	return leu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (leu *LogErrorUpdate) SetNillableError(s *string) *LogErrorUpdate {
	if s != nil {
		leu.SetError(*s)
	}
	return leu
}

// Mutation returns the LogErrorMutation object of the builder.
func (leu *LogErrorUpdate) Mutation() *LogErrorMutation {
	return leu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (leu *LogErrorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, leu.sqlSave, leu.mutation, leu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (leu *LogErrorUpdate) SaveX(ctx context.Context) int {
	affected, err := leu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (leu *LogErrorUpdate) Exec(ctx context.Context) error {
	_, err := leu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (leu *LogErrorUpdate) ExecX(ctx context.Context) {
	if err := leu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (leu *LogErrorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(logerror.Table, logerror.Columns, sqlgraph.NewFieldSpec(logerror.FieldID, field.TypeString))
	if ps := leu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := leu.mutation.Error(); ok {
		_spec.SetField(logerror.FieldError, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, leu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logerror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	leu.mutation.done = true
	return n, nil
}

// LogErrorUpdateOne is the builder for updating a single LogError entity.
type LogErrorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogErrorMutation
}

// SetError sets the "error" field.
func (leuo *LogErrorUpdateOne) SetError(s string) *LogErrorUpdateOne {
	leuo.mutation.SetError(s)
	return leuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (leuo *LogErrorUpdateOne) SetNillableError(s *string) *LogErrorUpdateOne {
	if s != nil {
		leuo.SetError(*s)
	}
	return leuo
}

// Mutation returns the LogErrorMutation object of the builder.
func (leuo *LogErrorUpdateOne) Mutation() *LogErrorMutation {
	return leuo.mutation
}

// Where appends a list predicates to the LogErrorUpdate builder.
func (leuo *LogErrorUpdateOne) Where(ps ...predicate.LogError) *LogErrorUpdateOne {
	leuo.mutation.Where(ps...)
	return leuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (leuo *LogErrorUpdateOne) Select(field string, fields ...string) *LogErrorUpdateOne {
	leuo.fields = append([]string{field}, fields...)
	return leuo
}

// Save executes the query and returns the updated LogError entity.
func (leuo *LogErrorUpdateOne) Save(ctx context.Context) (*LogError, error) {
	return withHooks(ctx, leuo.sqlSave, leuo.mutation, leuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (leuo *LogErrorUpdateOne) SaveX(ctx context.Context) *LogError {
	node, err := leuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (leuo *LogErrorUpdateOne) Exec(ctx context.Context) error {
	_, err := leuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (leuo *LogErrorUpdateOne) ExecX(ctx context.Context) {
	if err := leuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (leuo *LogErrorUpdateOne) sqlSave(ctx context.Context) (_node *LogError, err error) {
	_spec := sqlgraph.NewUpdateSpec(logerror.Table, logerror.Columns, sqlgraph.NewFieldSpec(logerror.FieldID, field.TypeString))
	id, ok := leuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogError.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := leuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logerror.FieldID)
		for _, f := range fields {
			if !logerror.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logerror.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := leuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := leuo.mutation.Error(); ok {
		_spec.SetField(logerror.FieldError, field.TypeString, value)
	}
	_node = &LogError{config: leuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, leuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logerror.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	leuo.mutation.done = true
	return _node, nil
}
