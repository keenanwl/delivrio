// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/print-client/ent/printjob"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PrintJob is the model entity for the PrintJob schema.
type PrintJob struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Cancel needs to be acknowledged by server before moving to cancelled
	Status printjob.Status `json:"status,omitempty"`
	// FileExtension holds the value of the "file_extension" field.
	FileExtension printjob.FileExtension `json:"file_extension,omitempty"`
	// UseShell holds the value of the "use_shell" field.
	UseShell bool `json:"use_shell,omitempty"`
	// Base64PrintData holds the value of the "base64_print_data" field.
	Base64PrintData string `json:"base64_print_data,omitempty"`
	// Messages holds the value of the "messages" field.
	Messages []string `json:"messages,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrintJobQuery when eager-loading is set.
	Edges                  PrintJobEdges `json:"edges"`
	print_job_local_device *pulid.ID
	selectValues           sql.SelectValues
}

// PrintJobEdges holds the relations/edges for other nodes in the graph.
type PrintJobEdges struct {
	// LocalDevice holds the value of the local_device edge.
	LocalDevice *LocalDevice `json:"local_device,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LocalDeviceOrErr returns the LocalDevice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrintJobEdges) LocalDeviceOrErr() (*LocalDevice, error) {
	if e.LocalDevice != nil {
		return e.LocalDevice, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: localdevice.Label}
	}
	return nil, &NotLoadedError{edge: "local_device"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrintJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case printjob.FieldMessages:
			values[i] = new([]byte)
		case printjob.FieldID:
			values[i] = new(pulid.ID)
		case printjob.FieldUseShell:
			values[i] = new(sql.NullBool)
		case printjob.FieldStatus, printjob.FieldFileExtension, printjob.FieldBase64PrintData:
			values[i] = new(sql.NullString)
		case printjob.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case printjob.ForeignKeys[0]: // print_job_local_device
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrintJob fields.
func (pj *PrintJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case printjob.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pj.ID = *value
			}
		case printjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pj.Status = printjob.Status(value.String)
			}
		case printjob.FieldFileExtension:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_extension", values[i])
			} else if value.Valid {
				pj.FileExtension = printjob.FileExtension(value.String)
			}
		case printjob.FieldUseShell:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_shell", values[i])
			} else if value.Valid {
				pj.UseShell = value.Bool
			}
		case printjob.FieldBase64PrintData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field base64_print_data", values[i])
			} else if value.Valid {
				pj.Base64PrintData = value.String
			}
		case printjob.FieldMessages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field messages", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pj.Messages); err != nil {
					return fmt.Errorf("unmarshal field messages: %w", err)
				}
			}
		case printjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pj.CreatedAt = value.Time
			}
		case printjob.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field print_job_local_device", values[i])
			} else if value.Valid {
				pj.print_job_local_device = new(pulid.ID)
				*pj.print_job_local_device = *value.S.(*pulid.ID)
			}
		default:
			pj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PrintJob.
// This includes values selected through modifiers, order, etc.
func (pj *PrintJob) Value(name string) (ent.Value, error) {
	return pj.selectValues.Get(name)
}

// QueryLocalDevice queries the "local_device" edge of the PrintJob entity.
func (pj *PrintJob) QueryLocalDevice() *LocalDeviceQuery {
	return NewPrintJobClient(pj.config).QueryLocalDevice(pj)
}

// Update returns a builder for updating this PrintJob.
// Note that you need to call PrintJob.Unwrap() before calling this method if this PrintJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (pj *PrintJob) Update() *PrintJobUpdateOne {
	return NewPrintJobClient(pj.config).UpdateOne(pj)
}

// Unwrap unwraps the PrintJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pj *PrintJob) Unwrap() *PrintJob {
	_tx, ok := pj.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrintJob is not a transactional entity")
	}
	pj.config.driver = _tx.drv
	return pj
}

// String implements the fmt.Stringer.
func (pj *PrintJob) String() string {
	var builder strings.Builder
	builder.WriteString("PrintJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pj.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pj.Status))
	builder.WriteString(", ")
	builder.WriteString("file_extension=")
	builder.WriteString(fmt.Sprintf("%v", pj.FileExtension))
	builder.WriteString(", ")
	builder.WriteString("use_shell=")
	builder.WriteString(fmt.Sprintf("%v", pj.UseShell))
	builder.WriteString(", ")
	builder.WriteString("base64_print_data=")
	builder.WriteString(pj.Base64PrintData)
	builder.WriteString(", ")
	builder.WriteString("messages=")
	builder.WriteString(fmt.Sprintf("%v", pj.Messages))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pj.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrintJobs is a parsable slice of PrintJob.
type PrintJobs []*PrintJob
