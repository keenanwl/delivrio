// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/print-client/ent/printjob"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrintJobCreate is the builder for creating a PrintJob entity.
type PrintJobCreate struct {
	config
	mutation *PrintJobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (pjc *PrintJobCreate) SetStatus(pr printjob.Status) *PrintJobCreate {
	pjc.mutation.SetStatus(pr)
	return pjc
}

// SetFileExtension sets the "file_extension" field.
func (pjc *PrintJobCreate) SetFileExtension(pe printjob.FileExtension) *PrintJobCreate {
	pjc.mutation.SetFileExtension(pe)
	return pjc
}

// SetUseShell sets the "use_shell" field.
func (pjc *PrintJobCreate) SetUseShell(b bool) *PrintJobCreate {
	pjc.mutation.SetUseShell(b)
	return pjc
}

// SetNillableUseShell sets the "use_shell" field if the given value is not nil.
func (pjc *PrintJobCreate) SetNillableUseShell(b *bool) *PrintJobCreate {
	if b != nil {
		pjc.SetUseShell(*b)
	}
	return pjc
}

// SetBase64PrintData sets the "base64_print_data" field.
func (pjc *PrintJobCreate) SetBase64PrintData(s string) *PrintJobCreate {
	pjc.mutation.SetBase64PrintData(s)
	return pjc
}

// SetMessages sets the "messages" field.
func (pjc *PrintJobCreate) SetMessages(s []string) *PrintJobCreate {
	pjc.mutation.SetMessages(s)
	return pjc
}

// SetCreatedAt sets the "created_at" field.
func (pjc *PrintJobCreate) SetCreatedAt(t time.Time) *PrintJobCreate {
	pjc.mutation.SetCreatedAt(t)
	return pjc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pjc *PrintJobCreate) SetNillableCreatedAt(t *time.Time) *PrintJobCreate {
	if t != nil {
		pjc.SetCreatedAt(*t)
	}
	return pjc
}

// SetID sets the "id" field.
func (pjc *PrintJobCreate) SetID(pu pulid.ID) *PrintJobCreate {
	pjc.mutation.SetID(pu)
	return pjc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pjc *PrintJobCreate) SetNillableID(pu *pulid.ID) *PrintJobCreate {
	if pu != nil {
		pjc.SetID(*pu)
	}
	return pjc
}

// SetLocalDeviceID sets the "local_device" edge to the LocalDevice entity by ID.
func (pjc *PrintJobCreate) SetLocalDeviceID(id pulid.ID) *PrintJobCreate {
	pjc.mutation.SetLocalDeviceID(id)
	return pjc
}

// SetLocalDevice sets the "local_device" edge to the LocalDevice entity.
func (pjc *PrintJobCreate) SetLocalDevice(l *LocalDevice) *PrintJobCreate {
	return pjc.SetLocalDeviceID(l.ID)
}

// Mutation returns the PrintJobMutation object of the builder.
func (pjc *PrintJobCreate) Mutation() *PrintJobMutation {
	return pjc.mutation
}

// Save creates the PrintJob in the database.
func (pjc *PrintJobCreate) Save(ctx context.Context) (*PrintJob, error) {
	pjc.defaults()
	return withHooks(ctx, pjc.sqlSave, pjc.mutation, pjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pjc *PrintJobCreate) SaveX(ctx context.Context) *PrintJob {
	v, err := pjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjc *PrintJobCreate) Exec(ctx context.Context) error {
	_, err := pjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjc *PrintJobCreate) ExecX(ctx context.Context) {
	if err := pjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pjc *PrintJobCreate) defaults() {
	if _, ok := pjc.mutation.UseShell(); !ok {
		v := printjob.DefaultUseShell
		pjc.mutation.SetUseShell(v)
	}
	if _, ok := pjc.mutation.CreatedAt(); !ok {
		v := printjob.DefaultCreatedAt()
		pjc.mutation.SetCreatedAt(v)
	}
	if _, ok := pjc.mutation.ID(); !ok {
		v := printjob.DefaultID()
		pjc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pjc *PrintJobCreate) check() error {
	if _, ok := pjc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PrintJob.status"`)}
	}
	if v, ok := pjc.mutation.Status(); ok {
		if err := printjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PrintJob.status": %w`, err)}
		}
	}
	if _, ok := pjc.mutation.FileExtension(); !ok {
		return &ValidationError{Name: "file_extension", err: errors.New(`ent: missing required field "PrintJob.file_extension"`)}
	}
	if v, ok := pjc.mutation.FileExtension(); ok {
		if err := printjob.FileExtensionValidator(v); err != nil {
			return &ValidationError{Name: "file_extension", err: fmt.Errorf(`ent: validator failed for field "PrintJob.file_extension": %w`, err)}
		}
	}
	if _, ok := pjc.mutation.UseShell(); !ok {
		return &ValidationError{Name: "use_shell", err: errors.New(`ent: missing required field "PrintJob.use_shell"`)}
	}
	if _, ok := pjc.mutation.Base64PrintData(); !ok {
		return &ValidationError{Name: "base64_print_data", err: errors.New(`ent: missing required field "PrintJob.base64_print_data"`)}
	}
	if _, ok := pjc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PrintJob.created_at"`)}
	}
	if len(pjc.mutation.LocalDeviceIDs()) == 0 {
		return &ValidationError{Name: "local_device", err: errors.New(`ent: missing required edge "PrintJob.local_device"`)}
	}
	return nil
}

func (pjc *PrintJobCreate) sqlSave(ctx context.Context) (*PrintJob, error) {
	if err := pjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pjc.mutation.id = &_node.ID
	pjc.mutation.done = true
	return _node, nil
}

func (pjc *PrintJobCreate) createSpec() (*PrintJob, *sqlgraph.CreateSpec) {
	var (
		_node = &PrintJob{config: pjc.config}
		_spec = sqlgraph.NewCreateSpec(printjob.Table, sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString))
	)
	_spec.OnConflict = pjc.conflict
	if id, ok := pjc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pjc.mutation.Status(); ok {
		_spec.SetField(printjob.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pjc.mutation.FileExtension(); ok {
		_spec.SetField(printjob.FieldFileExtension, field.TypeEnum, value)
		_node.FileExtension = value
	}
	if value, ok := pjc.mutation.UseShell(); ok {
		_spec.SetField(printjob.FieldUseShell, field.TypeBool, value)
		_node.UseShell = value
	}
	if value, ok := pjc.mutation.Base64PrintData(); ok {
		_spec.SetField(printjob.FieldBase64PrintData, field.TypeString, value)
		_node.Base64PrintData = value
	}
	if value, ok := pjc.mutation.Messages(); ok {
		_spec.SetField(printjob.FieldMessages, field.TypeJSON, value)
		_node.Messages = value
	}
	if value, ok := pjc.mutation.CreatedAt(); ok {
		_spec.SetField(printjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := pjc.mutation.LocalDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.LocalDeviceTable,
			Columns: []string{printjob.LocalDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.print_job_local_device = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PrintJob.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrintJobUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (pjc *PrintJobCreate) OnConflict(opts ...sql.ConflictOption) *PrintJobUpsertOne {
	pjc.conflict = opts
	return &PrintJobUpsertOne{
		create: pjc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PrintJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pjc *PrintJobCreate) OnConflictColumns(columns ...string) *PrintJobUpsertOne {
	pjc.conflict = append(pjc.conflict, sql.ConflictColumns(columns...))
	return &PrintJobUpsertOne{
		create: pjc,
	}
}

type (
	// PrintJobUpsertOne is the builder for "upsert"-ing
	//  one PrintJob node.
	PrintJobUpsertOne struct {
		create *PrintJobCreate
	}

	// PrintJobUpsert is the "OnConflict" setter.
	PrintJobUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *PrintJobUpsert) SetStatus(v printjob.Status) *PrintJobUpsert {
	u.Set(printjob.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PrintJobUpsert) UpdateStatus() *PrintJobUpsert {
	u.SetExcluded(printjob.FieldStatus)
	return u
}

// SetMessages sets the "messages" field.
func (u *PrintJobUpsert) SetMessages(v []string) *PrintJobUpsert {
	u.Set(printjob.FieldMessages, v)
	return u
}

// UpdateMessages sets the "messages" field to the value that was provided on create.
func (u *PrintJobUpsert) UpdateMessages() *PrintJobUpsert {
	u.SetExcluded(printjob.FieldMessages)
	return u
}

// ClearMessages clears the value of the "messages" field.
func (u *PrintJobUpsert) ClearMessages() *PrintJobUpsert {
	u.SetNull(printjob.FieldMessages)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PrintJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(printjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PrintJobUpsertOne) UpdateNewValues() *PrintJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(printjob.FieldID)
		}
		if _, exists := u.create.mutation.FileExtension(); exists {
			s.SetIgnore(printjob.FieldFileExtension)
		}
		if _, exists := u.create.mutation.UseShell(); exists {
			s.SetIgnore(printjob.FieldUseShell)
		}
		if _, exists := u.create.mutation.Base64PrintData(); exists {
			s.SetIgnore(printjob.FieldBase64PrintData)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(printjob.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PrintJob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PrintJobUpsertOne) Ignore() *PrintJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrintJobUpsertOne) DoNothing() *PrintJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrintJobCreate.OnConflict
// documentation for more info.
func (u *PrintJobUpsertOne) Update(set func(*PrintJobUpsert)) *PrintJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrintJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *PrintJobUpsertOne) SetStatus(v printjob.Status) *PrintJobUpsertOne {
	return u.Update(func(s *PrintJobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PrintJobUpsertOne) UpdateStatus() *PrintJobUpsertOne {
	return u.Update(func(s *PrintJobUpsert) {
		s.UpdateStatus()
	})
}

// SetMessages sets the "messages" field.
func (u *PrintJobUpsertOne) SetMessages(v []string) *PrintJobUpsertOne {
	return u.Update(func(s *PrintJobUpsert) {
		s.SetMessages(v)
	})
}

// UpdateMessages sets the "messages" field to the value that was provided on create.
func (u *PrintJobUpsertOne) UpdateMessages() *PrintJobUpsertOne {
	return u.Update(func(s *PrintJobUpsert) {
		s.UpdateMessages()
	})
}

// ClearMessages clears the value of the "messages" field.
func (u *PrintJobUpsertOne) ClearMessages() *PrintJobUpsertOne {
	return u.Update(func(s *PrintJobUpsert) {
		s.ClearMessages()
	})
}

// Exec executes the query.
func (u *PrintJobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PrintJobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrintJobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PrintJobUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PrintJobUpsertOne.ID is not supported by MySQL driver. Use PrintJobUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PrintJobUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PrintJobCreateBulk is the builder for creating many PrintJob entities in bulk.
type PrintJobCreateBulk struct {
	config
	err      error
	builders []*PrintJobCreate
	conflict []sql.ConflictOption
}

// Save creates the PrintJob entities in the database.
func (pjcb *PrintJobCreateBulk) Save(ctx context.Context) ([]*PrintJob, error) {
	if pjcb.err != nil {
		return nil, pjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pjcb.builders))
	nodes := make([]*PrintJob, len(pjcb.builders))
	mutators := make([]Mutator, len(pjcb.builders))
	for i := range pjcb.builders {
		func(i int, root context.Context) {
			builder := pjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrintJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pjcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pjcb *PrintJobCreateBulk) SaveX(ctx context.Context) []*PrintJob {
	v, err := pjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjcb *PrintJobCreateBulk) Exec(ctx context.Context) error {
	_, err := pjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjcb *PrintJobCreateBulk) ExecX(ctx context.Context) {
	if err := pjcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PrintJob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrintJobUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (pjcb *PrintJobCreateBulk) OnConflict(opts ...sql.ConflictOption) *PrintJobUpsertBulk {
	pjcb.conflict = opts
	return &PrintJobUpsertBulk{
		create: pjcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PrintJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pjcb *PrintJobCreateBulk) OnConflictColumns(columns ...string) *PrintJobUpsertBulk {
	pjcb.conflict = append(pjcb.conflict, sql.ConflictColumns(columns...))
	return &PrintJobUpsertBulk{
		create: pjcb,
	}
}

// PrintJobUpsertBulk is the builder for "upsert"-ing
// a bulk of PrintJob nodes.
type PrintJobUpsertBulk struct {
	create *PrintJobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PrintJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(printjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PrintJobUpsertBulk) UpdateNewValues() *PrintJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(printjob.FieldID)
			}
			if _, exists := b.mutation.FileExtension(); exists {
				s.SetIgnore(printjob.FieldFileExtension)
			}
			if _, exists := b.mutation.UseShell(); exists {
				s.SetIgnore(printjob.FieldUseShell)
			}
			if _, exists := b.mutation.Base64PrintData(); exists {
				s.SetIgnore(printjob.FieldBase64PrintData)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(printjob.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PrintJob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PrintJobUpsertBulk) Ignore() *PrintJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrintJobUpsertBulk) DoNothing() *PrintJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrintJobCreateBulk.OnConflict
// documentation for more info.
func (u *PrintJobUpsertBulk) Update(set func(*PrintJobUpsert)) *PrintJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrintJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *PrintJobUpsertBulk) SetStatus(v printjob.Status) *PrintJobUpsertBulk {
	return u.Update(func(s *PrintJobUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PrintJobUpsertBulk) UpdateStatus() *PrintJobUpsertBulk {
	return u.Update(func(s *PrintJobUpsert) {
		s.UpdateStatus()
	})
}

// SetMessages sets the "messages" field.
func (u *PrintJobUpsertBulk) SetMessages(v []string) *PrintJobUpsertBulk {
	return u.Update(func(s *PrintJobUpsert) {
		s.SetMessages(v)
	})
}

// UpdateMessages sets the "messages" field to the value that was provided on create.
func (u *PrintJobUpsertBulk) UpdateMessages() *PrintJobUpsertBulk {
	return u.Update(func(s *PrintJobUpsert) {
		s.UpdateMessages()
	})
}

// ClearMessages clears the value of the "messages" field.
func (u *PrintJobUpsertBulk) ClearMessages() *PrintJobUpsertBulk {
	return u.Update(func(s *PrintJobUpsert) {
		s.ClearMessages()
	})
}

// Exec executes the query.
func (u *PrintJobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PrintJobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PrintJobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrintJobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
