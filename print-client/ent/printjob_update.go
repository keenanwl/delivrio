// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/print-client/ent/printjob"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PrintJobUpdate is the builder for updating PrintJob entities.
type PrintJobUpdate struct {
	config
	hooks    []Hook
	mutation *PrintJobMutation
}

// Where appends a list predicates to the PrintJobUpdate builder.
func (pju *PrintJobUpdate) Where(ps ...predicate.PrintJob) *PrintJobUpdate {
	pju.mutation.Where(ps...)
	return pju
}

// SetStatus sets the "status" field.
func (pju *PrintJobUpdate) SetStatus(pr printjob.Status) *PrintJobUpdate {
	pju.mutation.SetStatus(pr)
	return pju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pju *PrintJobUpdate) SetNillableStatus(pr *printjob.Status) *PrintJobUpdate {
	if pr != nil {
		pju.SetStatus(*pr)
	}
	return pju
}

// SetMessages sets the "messages" field.
func (pju *PrintJobUpdate) SetMessages(s []string) *PrintJobUpdate {
	pju.mutation.SetMessages(s)
	return pju
}

// AppendMessages appends s to the "messages" field.
func (pju *PrintJobUpdate) AppendMessages(s []string) *PrintJobUpdate {
	pju.mutation.AppendMessages(s)
	return pju
}

// ClearMessages clears the value of the "messages" field.
func (pju *PrintJobUpdate) ClearMessages() *PrintJobUpdate {
	pju.mutation.ClearMessages()
	return pju
}

// SetLocalDeviceID sets the "local_device" edge to the LocalDevice entity by ID.
func (pju *PrintJobUpdate) SetLocalDeviceID(id pulid.ID) *PrintJobUpdate {
	pju.mutation.SetLocalDeviceID(id)
	return pju
}

// SetLocalDevice sets the "local_device" edge to the LocalDevice entity.
func (pju *PrintJobUpdate) SetLocalDevice(l *LocalDevice) *PrintJobUpdate {
	return pju.SetLocalDeviceID(l.ID)
}

// Mutation returns the PrintJobMutation object of the builder.
func (pju *PrintJobUpdate) Mutation() *PrintJobMutation {
	return pju.mutation
}

// ClearLocalDevice clears the "local_device" edge to the LocalDevice entity.
func (pju *PrintJobUpdate) ClearLocalDevice() *PrintJobUpdate {
	pju.mutation.ClearLocalDevice()
	return pju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pju *PrintJobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pju.sqlSave, pju.mutation, pju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pju *PrintJobUpdate) SaveX(ctx context.Context) int {
	affected, err := pju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pju *PrintJobUpdate) Exec(ctx context.Context) error {
	_, err := pju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pju *PrintJobUpdate) ExecX(ctx context.Context) {
	if err := pju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pju *PrintJobUpdate) check() error {
	if v, ok := pju.mutation.Status(); ok {
		if err := printjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PrintJob.status": %w`, err)}
		}
	}
	if pju.mutation.LocalDeviceCleared() && len(pju.mutation.LocalDeviceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PrintJob.local_device"`)
	}
	return nil
}

func (pju *PrintJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(printjob.Table, printjob.Columns, sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString))
	if ps := pju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pju.mutation.Status(); ok {
		_spec.SetField(printjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pju.mutation.Messages(); ok {
		_spec.SetField(printjob.FieldMessages, field.TypeJSON, value)
	}
	if value, ok := pju.mutation.AppendedMessages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, printjob.FieldMessages, value)
		})
	}
	if pju.mutation.MessagesCleared() {
		_spec.ClearField(printjob.FieldMessages, field.TypeJSON)
	}
	if pju.mutation.LocalDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.LocalDeviceTable,
			Columns: []string{printjob.LocalDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pju.mutation.LocalDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.LocalDeviceTable,
			Columns: []string{printjob.LocalDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pju.mutation.done = true
	return n, nil
}

// PrintJobUpdateOne is the builder for updating a single PrintJob entity.
type PrintJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrintJobMutation
}

// SetStatus sets the "status" field.
func (pjuo *PrintJobUpdateOne) SetStatus(pr printjob.Status) *PrintJobUpdateOne {
	pjuo.mutation.SetStatus(pr)
	return pjuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pjuo *PrintJobUpdateOne) SetNillableStatus(pr *printjob.Status) *PrintJobUpdateOne {
	if pr != nil {
		pjuo.SetStatus(*pr)
	}
	return pjuo
}

// SetMessages sets the "messages" field.
func (pjuo *PrintJobUpdateOne) SetMessages(s []string) *PrintJobUpdateOne {
	pjuo.mutation.SetMessages(s)
	return pjuo
}

// AppendMessages appends s to the "messages" field.
func (pjuo *PrintJobUpdateOne) AppendMessages(s []string) *PrintJobUpdateOne {
	pjuo.mutation.AppendMessages(s)
	return pjuo
}

// ClearMessages clears the value of the "messages" field.
func (pjuo *PrintJobUpdateOne) ClearMessages() *PrintJobUpdateOne {
	pjuo.mutation.ClearMessages()
	return pjuo
}

// SetLocalDeviceID sets the "local_device" edge to the LocalDevice entity by ID.
func (pjuo *PrintJobUpdateOne) SetLocalDeviceID(id pulid.ID) *PrintJobUpdateOne {
	pjuo.mutation.SetLocalDeviceID(id)
	return pjuo
}

// SetLocalDevice sets the "local_device" edge to the LocalDevice entity.
func (pjuo *PrintJobUpdateOne) SetLocalDevice(l *LocalDevice) *PrintJobUpdateOne {
	return pjuo.SetLocalDeviceID(l.ID)
}

// Mutation returns the PrintJobMutation object of the builder.
func (pjuo *PrintJobUpdateOne) Mutation() *PrintJobMutation {
	return pjuo.mutation
}

// ClearLocalDevice clears the "local_device" edge to the LocalDevice entity.
func (pjuo *PrintJobUpdateOne) ClearLocalDevice() *PrintJobUpdateOne {
	pjuo.mutation.ClearLocalDevice()
	return pjuo
}

// Where appends a list predicates to the PrintJobUpdate builder.
func (pjuo *PrintJobUpdateOne) Where(ps ...predicate.PrintJob) *PrintJobUpdateOne {
	pjuo.mutation.Where(ps...)
	return pjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pjuo *PrintJobUpdateOne) Select(field string, fields ...string) *PrintJobUpdateOne {
	pjuo.fields = append([]string{field}, fields...)
	return pjuo
}

// Save executes the query and returns the updated PrintJob entity.
func (pjuo *PrintJobUpdateOne) Save(ctx context.Context) (*PrintJob, error) {
	return withHooks(ctx, pjuo.sqlSave, pjuo.mutation, pjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pjuo *PrintJobUpdateOne) SaveX(ctx context.Context) *PrintJob {
	node, err := pjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pjuo *PrintJobUpdateOne) Exec(ctx context.Context) error {
	_, err := pjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjuo *PrintJobUpdateOne) ExecX(ctx context.Context) {
	if err := pjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pjuo *PrintJobUpdateOne) check() error {
	if v, ok := pjuo.mutation.Status(); ok {
		if err := printjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PrintJob.status": %w`, err)}
		}
	}
	if pjuo.mutation.LocalDeviceCleared() && len(pjuo.mutation.LocalDeviceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PrintJob.local_device"`)
	}
	return nil
}

func (pjuo *PrintJobUpdateOne) sqlSave(ctx context.Context) (_node *PrintJob, err error) {
	if err := pjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(printjob.Table, printjob.Columns, sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString))
	id, ok := pjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrintJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, printjob.FieldID)
		for _, f := range fields {
			if !printjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != printjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pjuo.mutation.Status(); ok {
		_spec.SetField(printjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pjuo.mutation.Messages(); ok {
		_spec.SetField(printjob.FieldMessages, field.TypeJSON, value)
	}
	if value, ok := pjuo.mutation.AppendedMessages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, printjob.FieldMessages, value)
		})
	}
	if pjuo.mutation.MessagesCleared() {
		_spec.ClearField(printjob.FieldMessages, field.TypeJSON)
	}
	if pjuo.mutation.LocalDeviceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.LocalDeviceTable,
			Columns: []string{printjob.LocalDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pjuo.mutation.LocalDeviceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.LocalDeviceTable,
			Columns: []string{printjob.LocalDeviceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localdevice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrintJob{config: pjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pjuo.mutation.done = true
	return _node, nil
}
