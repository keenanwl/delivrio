// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/print-client/ent/remoteconnection"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RemoteConnectionCreate is the builder for creating a RemoteConnection entity.
type RemoteConnectionCreate struct {
	config
	mutation *RemoteConnectionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRemoteURL sets the "remote_url" field.
func (rcc *RemoteConnectionCreate) SetRemoteURL(s string) *RemoteConnectionCreate {
	rcc.mutation.SetRemoteURL(s)
	return rcc
}

// SetRegistrationToken sets the "registration_token" field.
func (rcc *RemoteConnectionCreate) SetRegistrationToken(s string) *RemoteConnectionCreate {
	rcc.mutation.SetRegistrationToken(s)
	return rcc
}

// SetWorkstationName sets the "workstation_name" field.
func (rcc *RemoteConnectionCreate) SetWorkstationName(s string) *RemoteConnectionCreate {
	rcc.mutation.SetWorkstationName(s)
	return rcc
}

// SetLastPing sets the "last_ping" field.
func (rcc *RemoteConnectionCreate) SetLastPing(t time.Time) *RemoteConnectionCreate {
	rcc.mutation.SetLastPing(t)
	return rcc
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (rcc *RemoteConnectionCreate) SetNillableLastPing(t *time.Time) *RemoteConnectionCreate {
	if t != nil {
		rcc.SetLastPing(*t)
	}
	return rcc
}

// SetID sets the "id" field.
func (rcc *RemoteConnectionCreate) SetID(pu pulid.ID) *RemoteConnectionCreate {
	rcc.mutation.SetID(pu)
	return rcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rcc *RemoteConnectionCreate) SetNillableID(pu *pulid.ID) *RemoteConnectionCreate {
	if pu != nil {
		rcc.SetID(*pu)
	}
	return rcc
}

// Mutation returns the RemoteConnectionMutation object of the builder.
func (rcc *RemoteConnectionCreate) Mutation() *RemoteConnectionMutation {
	return rcc.mutation
}

// Save creates the RemoteConnection in the database.
func (rcc *RemoteConnectionCreate) Save(ctx context.Context) (*RemoteConnection, error) {
	rcc.defaults()
	return withHooks(ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *RemoteConnectionCreate) SaveX(ctx context.Context) *RemoteConnection {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *RemoteConnectionCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *RemoteConnectionCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcc *RemoteConnectionCreate) defaults() {
	if _, ok := rcc.mutation.ID(); !ok {
		v := remoteconnection.DefaultID()
		rcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *RemoteConnectionCreate) check() error {
	if _, ok := rcc.mutation.RemoteURL(); !ok {
		return &ValidationError{Name: "remote_url", err: errors.New(`ent: missing required field "RemoteConnection.remote_url"`)}
	}
	if _, ok := rcc.mutation.RegistrationToken(); !ok {
		return &ValidationError{Name: "registration_token", err: errors.New(`ent: missing required field "RemoteConnection.registration_token"`)}
	}
	if _, ok := rcc.mutation.WorkstationName(); !ok {
		return &ValidationError{Name: "workstation_name", err: errors.New(`ent: missing required field "RemoteConnection.workstation_name"`)}
	}
	return nil
}

func (rcc *RemoteConnectionCreate) sqlSave(ctx context.Context) (*RemoteConnection, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *RemoteConnectionCreate) createSpec() (*RemoteConnection, *sqlgraph.CreateSpec) {
	var (
		_node = &RemoteConnection{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(remoteconnection.Table, sqlgraph.NewFieldSpec(remoteconnection.FieldID, field.TypeString))
	)
	_spec.OnConflict = rcc.conflict
	if id, ok := rcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rcc.mutation.RemoteURL(); ok {
		_spec.SetField(remoteconnection.FieldRemoteURL, field.TypeString, value)
		_node.RemoteURL = value
	}
	if value, ok := rcc.mutation.RegistrationToken(); ok {
		_spec.SetField(remoteconnection.FieldRegistrationToken, field.TypeString, value)
		_node.RegistrationToken = value
	}
	if value, ok := rcc.mutation.WorkstationName(); ok {
		_spec.SetField(remoteconnection.FieldWorkstationName, field.TypeString, value)
		_node.WorkstationName = value
	}
	if value, ok := rcc.mutation.LastPing(); ok {
		_spec.SetField(remoteconnection.FieldLastPing, field.TypeTime, value)
		_node.LastPing = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RemoteConnection.Create().
//		SetRemoteURL(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RemoteConnectionUpsert) {
//			SetRemoteURL(v+v).
//		}).
//		Exec(ctx)
func (rcc *RemoteConnectionCreate) OnConflict(opts ...sql.ConflictOption) *RemoteConnectionUpsertOne {
	rcc.conflict = opts
	return &RemoteConnectionUpsertOne{
		create: rcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RemoteConnection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcc *RemoteConnectionCreate) OnConflictColumns(columns ...string) *RemoteConnectionUpsertOne {
	rcc.conflict = append(rcc.conflict, sql.ConflictColumns(columns...))
	return &RemoteConnectionUpsertOne{
		create: rcc,
	}
}

type (
	// RemoteConnectionUpsertOne is the builder for "upsert"-ing
	//  one RemoteConnection node.
	RemoteConnectionUpsertOne struct {
		create *RemoteConnectionCreate
	}

	// RemoteConnectionUpsert is the "OnConflict" setter.
	RemoteConnectionUpsert struct {
		*sql.UpdateSet
	}
)

// SetRemoteURL sets the "remote_url" field.
func (u *RemoteConnectionUpsert) SetRemoteURL(v string) *RemoteConnectionUpsert {
	u.Set(remoteconnection.FieldRemoteURL, v)
	return u
}

// UpdateRemoteURL sets the "remote_url" field to the value that was provided on create.
func (u *RemoteConnectionUpsert) UpdateRemoteURL() *RemoteConnectionUpsert {
	u.SetExcluded(remoteconnection.FieldRemoteURL)
	return u
}

// SetRegistrationToken sets the "registration_token" field.
func (u *RemoteConnectionUpsert) SetRegistrationToken(v string) *RemoteConnectionUpsert {
	u.Set(remoteconnection.FieldRegistrationToken, v)
	return u
}

// UpdateRegistrationToken sets the "registration_token" field to the value that was provided on create.
func (u *RemoteConnectionUpsert) UpdateRegistrationToken() *RemoteConnectionUpsert {
	u.SetExcluded(remoteconnection.FieldRegistrationToken)
	return u
}

// SetWorkstationName sets the "workstation_name" field.
func (u *RemoteConnectionUpsert) SetWorkstationName(v string) *RemoteConnectionUpsert {
	u.Set(remoteconnection.FieldWorkstationName, v)
	return u
}

// UpdateWorkstationName sets the "workstation_name" field to the value that was provided on create.
func (u *RemoteConnectionUpsert) UpdateWorkstationName() *RemoteConnectionUpsert {
	u.SetExcluded(remoteconnection.FieldWorkstationName)
	return u
}

// SetLastPing sets the "last_ping" field.
func (u *RemoteConnectionUpsert) SetLastPing(v time.Time) *RemoteConnectionUpsert {
	u.Set(remoteconnection.FieldLastPing, v)
	return u
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *RemoteConnectionUpsert) UpdateLastPing() *RemoteConnectionUpsert {
	u.SetExcluded(remoteconnection.FieldLastPing)
	return u
}

// ClearLastPing clears the value of the "last_ping" field.
func (u *RemoteConnectionUpsert) ClearLastPing() *RemoteConnectionUpsert {
	u.SetNull(remoteconnection.FieldLastPing)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RemoteConnection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(remoteconnection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RemoteConnectionUpsertOne) UpdateNewValues() *RemoteConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(remoteconnection.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RemoteConnection.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RemoteConnectionUpsertOne) Ignore() *RemoteConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RemoteConnectionUpsertOne) DoNothing() *RemoteConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RemoteConnectionCreate.OnConflict
// documentation for more info.
func (u *RemoteConnectionUpsertOne) Update(set func(*RemoteConnectionUpsert)) *RemoteConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RemoteConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRemoteURL sets the "remote_url" field.
func (u *RemoteConnectionUpsertOne) SetRemoteURL(v string) *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetRemoteURL(v)
	})
}

// UpdateRemoteURL sets the "remote_url" field to the value that was provided on create.
func (u *RemoteConnectionUpsertOne) UpdateRemoteURL() *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateRemoteURL()
	})
}

// SetRegistrationToken sets the "registration_token" field.
func (u *RemoteConnectionUpsertOne) SetRegistrationToken(v string) *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetRegistrationToken(v)
	})
}

// UpdateRegistrationToken sets the "registration_token" field to the value that was provided on create.
func (u *RemoteConnectionUpsertOne) UpdateRegistrationToken() *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateRegistrationToken()
	})
}

// SetWorkstationName sets the "workstation_name" field.
func (u *RemoteConnectionUpsertOne) SetWorkstationName(v string) *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetWorkstationName(v)
	})
}

// UpdateWorkstationName sets the "workstation_name" field to the value that was provided on create.
func (u *RemoteConnectionUpsertOne) UpdateWorkstationName() *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateWorkstationName()
	})
}

// SetLastPing sets the "last_ping" field.
func (u *RemoteConnectionUpsertOne) SetLastPing(v time.Time) *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetLastPing(v)
	})
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *RemoteConnectionUpsertOne) UpdateLastPing() *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateLastPing()
	})
}

// ClearLastPing clears the value of the "last_ping" field.
func (u *RemoteConnectionUpsertOne) ClearLastPing() *RemoteConnectionUpsertOne {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.ClearLastPing()
	})
}

// Exec executes the query.
func (u *RemoteConnectionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RemoteConnectionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RemoteConnectionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RemoteConnectionUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RemoteConnectionUpsertOne.ID is not supported by MySQL driver. Use RemoteConnectionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RemoteConnectionUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RemoteConnectionCreateBulk is the builder for creating many RemoteConnection entities in bulk.
type RemoteConnectionCreateBulk struct {
	config
	err      error
	builders []*RemoteConnectionCreate
	conflict []sql.ConflictOption
}

// Save creates the RemoteConnection entities in the database.
func (rccb *RemoteConnectionCreateBulk) Save(ctx context.Context) ([]*RemoteConnection, error) {
	if rccb.err != nil {
		return nil, rccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*RemoteConnection, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RemoteConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *RemoteConnectionCreateBulk) SaveX(ctx context.Context) []*RemoteConnection {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *RemoteConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *RemoteConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RemoteConnection.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RemoteConnectionUpsert) {
//			SetRemoteURL(v+v).
//		}).
//		Exec(ctx)
func (rccb *RemoteConnectionCreateBulk) OnConflict(opts ...sql.ConflictOption) *RemoteConnectionUpsertBulk {
	rccb.conflict = opts
	return &RemoteConnectionUpsertBulk{
		create: rccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RemoteConnection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rccb *RemoteConnectionCreateBulk) OnConflictColumns(columns ...string) *RemoteConnectionUpsertBulk {
	rccb.conflict = append(rccb.conflict, sql.ConflictColumns(columns...))
	return &RemoteConnectionUpsertBulk{
		create: rccb,
	}
}

// RemoteConnectionUpsertBulk is the builder for "upsert"-ing
// a bulk of RemoteConnection nodes.
type RemoteConnectionUpsertBulk struct {
	create *RemoteConnectionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RemoteConnection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(remoteconnection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RemoteConnectionUpsertBulk) UpdateNewValues() *RemoteConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(remoteconnection.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RemoteConnection.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RemoteConnectionUpsertBulk) Ignore() *RemoteConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RemoteConnectionUpsertBulk) DoNothing() *RemoteConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RemoteConnectionCreateBulk.OnConflict
// documentation for more info.
func (u *RemoteConnectionUpsertBulk) Update(set func(*RemoteConnectionUpsert)) *RemoteConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RemoteConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetRemoteURL sets the "remote_url" field.
func (u *RemoteConnectionUpsertBulk) SetRemoteURL(v string) *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetRemoteURL(v)
	})
}

// UpdateRemoteURL sets the "remote_url" field to the value that was provided on create.
func (u *RemoteConnectionUpsertBulk) UpdateRemoteURL() *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateRemoteURL()
	})
}

// SetRegistrationToken sets the "registration_token" field.
func (u *RemoteConnectionUpsertBulk) SetRegistrationToken(v string) *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetRegistrationToken(v)
	})
}

// UpdateRegistrationToken sets the "registration_token" field to the value that was provided on create.
func (u *RemoteConnectionUpsertBulk) UpdateRegistrationToken() *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateRegistrationToken()
	})
}

// SetWorkstationName sets the "workstation_name" field.
func (u *RemoteConnectionUpsertBulk) SetWorkstationName(v string) *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetWorkstationName(v)
	})
}

// UpdateWorkstationName sets the "workstation_name" field to the value that was provided on create.
func (u *RemoteConnectionUpsertBulk) UpdateWorkstationName() *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateWorkstationName()
	})
}

// SetLastPing sets the "last_ping" field.
func (u *RemoteConnectionUpsertBulk) SetLastPing(v time.Time) *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.SetLastPing(v)
	})
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *RemoteConnectionUpsertBulk) UpdateLastPing() *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.UpdateLastPing()
	})
}

// ClearLastPing clears the value of the "last_ping" field.
func (u *RemoteConnectionUpsertBulk) ClearLastPing() *RemoteConnectionUpsertBulk {
	return u.Update(func(s *RemoteConnectionUpsert) {
		s.ClearLastPing()
	})
}

// Exec executes the query.
func (u *RemoteConnectionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RemoteConnectionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RemoteConnectionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RemoteConnectionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
