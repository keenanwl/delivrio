// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"delivrio.io/print-client/ent/localdevice"
	"delivrio.io/print-client/ent/predicate"
	"delivrio.io/print-client/ent/printjob"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrintJobQuery is the builder for querying PrintJob entities.
type PrintJobQuery struct {
	config
	ctx             *QueryContext
	order           []printjob.OrderOption
	inters          []Interceptor
	predicates      []predicate.PrintJob
	withLocalDevice *LocalDeviceQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PrintJobQuery builder.
func (pjq *PrintJobQuery) Where(ps ...predicate.PrintJob) *PrintJobQuery {
	pjq.predicates = append(pjq.predicates, ps...)
	return pjq
}

// Limit the number of records to be returned by this query.
func (pjq *PrintJobQuery) Limit(limit int) *PrintJobQuery {
	pjq.ctx.Limit = &limit
	return pjq
}

// Offset to start from.
func (pjq *PrintJobQuery) Offset(offset int) *PrintJobQuery {
	pjq.ctx.Offset = &offset
	return pjq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pjq *PrintJobQuery) Unique(unique bool) *PrintJobQuery {
	pjq.ctx.Unique = &unique
	return pjq
}

// Order specifies how the records should be ordered.
func (pjq *PrintJobQuery) Order(o ...printjob.OrderOption) *PrintJobQuery {
	pjq.order = append(pjq.order, o...)
	return pjq
}

// QueryLocalDevice chains the current query on the "local_device" edge.
func (pjq *PrintJobQuery) QueryLocalDevice() *LocalDeviceQuery {
	query := (&LocalDeviceClient{config: pjq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pjq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pjq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(printjob.Table, printjob.FieldID, selector),
			sqlgraph.To(localdevice.Table, localdevice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, printjob.LocalDeviceTable, printjob.LocalDeviceColumn),
		)
		fromU = sqlgraph.SetNeighbors(pjq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PrintJob entity from the query.
// Returns a *NotFoundError when no PrintJob was found.
func (pjq *PrintJobQuery) First(ctx context.Context) (*PrintJob, error) {
	nodes, err := pjq.Limit(1).All(setContextOp(ctx, pjq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{printjob.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pjq *PrintJobQuery) FirstX(ctx context.Context) *PrintJob {
	node, err := pjq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PrintJob ID from the query.
// Returns a *NotFoundError when no PrintJob ID was found.
func (pjq *PrintJobQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pjq.Limit(1).IDs(setContextOp(ctx, pjq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{printjob.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pjq *PrintJobQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := pjq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PrintJob entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PrintJob entity is found.
// Returns a *NotFoundError when no PrintJob entities are found.
func (pjq *PrintJobQuery) Only(ctx context.Context) (*PrintJob, error) {
	nodes, err := pjq.Limit(2).All(setContextOp(ctx, pjq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{printjob.Label}
	default:
		return nil, &NotSingularError{printjob.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pjq *PrintJobQuery) OnlyX(ctx context.Context) *PrintJob {
	node, err := pjq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PrintJob ID in the query.
// Returns a *NotSingularError when more than one PrintJob ID is found.
// Returns a *NotFoundError when no entities are found.
func (pjq *PrintJobQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pjq.Limit(2).IDs(setContextOp(ctx, pjq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{printjob.Label}
	default:
		err = &NotSingularError{printjob.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pjq *PrintJobQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := pjq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PrintJobs.
func (pjq *PrintJobQuery) All(ctx context.Context) ([]*PrintJob, error) {
	ctx = setContextOp(ctx, pjq.ctx, ent.OpQueryAll)
	if err := pjq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PrintJob, *PrintJobQuery]()
	return withInterceptors[[]*PrintJob](ctx, pjq, qr, pjq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pjq *PrintJobQuery) AllX(ctx context.Context) []*PrintJob {
	nodes, err := pjq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PrintJob IDs.
func (pjq *PrintJobQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if pjq.ctx.Unique == nil && pjq.path != nil {
		pjq.Unique(true)
	}
	ctx = setContextOp(ctx, pjq.ctx, ent.OpQueryIDs)
	if err = pjq.Select(printjob.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pjq *PrintJobQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := pjq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pjq *PrintJobQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pjq.ctx, ent.OpQueryCount)
	if err := pjq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pjq, querierCount[*PrintJobQuery](), pjq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pjq *PrintJobQuery) CountX(ctx context.Context) int {
	count, err := pjq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pjq *PrintJobQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pjq.ctx, ent.OpQueryExist)
	switch _, err := pjq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pjq *PrintJobQuery) ExistX(ctx context.Context) bool {
	exist, err := pjq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PrintJobQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pjq *PrintJobQuery) Clone() *PrintJobQuery {
	if pjq == nil {
		return nil
	}
	return &PrintJobQuery{
		config:          pjq.config,
		ctx:             pjq.ctx.Clone(),
		order:           append([]printjob.OrderOption{}, pjq.order...),
		inters:          append([]Interceptor{}, pjq.inters...),
		predicates:      append([]predicate.PrintJob{}, pjq.predicates...),
		withLocalDevice: pjq.withLocalDevice.Clone(),
		// clone intermediate query.
		sql:  pjq.sql.Clone(),
		path: pjq.path,
	}
}

// WithLocalDevice tells the query-builder to eager-load the nodes that are connected to
// the "local_device" edge. The optional arguments are used to configure the query builder of the edge.
func (pjq *PrintJobQuery) WithLocalDevice(opts ...func(*LocalDeviceQuery)) *PrintJobQuery {
	query := (&LocalDeviceClient{config: pjq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pjq.withLocalDevice = query
	return pjq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Status printjob.Status `json:"status,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PrintJob.Query().
//		GroupBy(printjob.FieldStatus).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pjq *PrintJobQuery) GroupBy(field string, fields ...string) *PrintJobGroupBy {
	pjq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PrintJobGroupBy{build: pjq}
	grbuild.flds = &pjq.ctx.Fields
	grbuild.label = printjob.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Status printjob.Status `json:"status,omitempty"`
//	}
//
//	client.PrintJob.Query().
//		Select(printjob.FieldStatus).
//		Scan(ctx, &v)
func (pjq *PrintJobQuery) Select(fields ...string) *PrintJobSelect {
	pjq.ctx.Fields = append(pjq.ctx.Fields, fields...)
	sbuild := &PrintJobSelect{PrintJobQuery: pjq}
	sbuild.label = printjob.Label
	sbuild.flds, sbuild.scan = &pjq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PrintJobSelect configured with the given aggregations.
func (pjq *PrintJobQuery) Aggregate(fns ...AggregateFunc) *PrintJobSelect {
	return pjq.Select().Aggregate(fns...)
}

func (pjq *PrintJobQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pjq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pjq); err != nil {
				return err
			}
		}
	}
	for _, f := range pjq.ctx.Fields {
		if !printjob.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pjq.path != nil {
		prev, err := pjq.path(ctx)
		if err != nil {
			return err
		}
		pjq.sql = prev
	}
	return nil
}

func (pjq *PrintJobQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PrintJob, error) {
	var (
		nodes       = []*PrintJob{}
		withFKs     = pjq.withFKs
		_spec       = pjq.querySpec()
		loadedTypes = [1]bool{
			pjq.withLocalDevice != nil,
		}
	)
	if pjq.withLocalDevice != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, printjob.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PrintJob).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PrintJob{config: pjq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pjq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pjq.withLocalDevice; query != nil {
		if err := pjq.loadLocalDevice(ctx, query, nodes, nil,
			func(n *PrintJob, e *LocalDevice) { n.Edges.LocalDevice = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pjq *PrintJobQuery) loadLocalDevice(ctx context.Context, query *LocalDeviceQuery, nodes []*PrintJob, init func(*PrintJob), assign func(*PrintJob, *LocalDevice)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PrintJob)
	for i := range nodes {
		if nodes[i].print_job_local_device == nil {
			continue
		}
		fk := *nodes[i].print_job_local_device
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(localdevice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "print_job_local_device" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pjq *PrintJobQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pjq.querySpec()
	_spec.Node.Columns = pjq.ctx.Fields
	if len(pjq.ctx.Fields) > 0 {
		_spec.Unique = pjq.ctx.Unique != nil && *pjq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pjq.driver, _spec)
}

func (pjq *PrintJobQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(printjob.Table, printjob.Columns, sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString))
	_spec.From = pjq.sql
	if unique := pjq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pjq.path != nil {
		_spec.Unique = true
	}
	if fields := pjq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, printjob.FieldID)
		for i := range fields {
			if fields[i] != printjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pjq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pjq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pjq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pjq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pjq *PrintJobQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pjq.driver.Dialect())
	t1 := builder.Table(printjob.Table)
	columns := pjq.ctx.Fields
	if len(columns) == 0 {
		columns = printjob.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pjq.sql != nil {
		selector = pjq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pjq.ctx.Unique != nil && *pjq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pjq.predicates {
		p(selector)
	}
	for _, p := range pjq.order {
		p(selector)
	}
	if offset := pjq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pjq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PrintJobGroupBy is the group-by builder for PrintJob entities.
type PrintJobGroupBy struct {
	selector
	build *PrintJobQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pjgb *PrintJobGroupBy) Aggregate(fns ...AggregateFunc) *PrintJobGroupBy {
	pjgb.fns = append(pjgb.fns, fns...)
	return pjgb
}

// Scan applies the selector query and scans the result into the given value.
func (pjgb *PrintJobGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pjgb.build.ctx, ent.OpQueryGroupBy)
	if err := pjgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PrintJobQuery, *PrintJobGroupBy](ctx, pjgb.build, pjgb, pjgb.build.inters, v)
}

func (pjgb *PrintJobGroupBy) sqlScan(ctx context.Context, root *PrintJobQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pjgb.fns))
	for _, fn := range pjgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pjgb.flds)+len(pjgb.fns))
		for _, f := range *pjgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pjgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pjgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PrintJobSelect is the builder for selecting fields of PrintJob entities.
type PrintJobSelect struct {
	*PrintJobQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pjs *PrintJobSelect) Aggregate(fns ...AggregateFunc) *PrintJobSelect {
	pjs.fns = append(pjs.fns, fns...)
	return pjs
}

// Scan applies the selector query and scans the result into the given value.
func (pjs *PrintJobSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pjs.ctx, ent.OpQuerySelect)
	if err := pjs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PrintJobQuery, *PrintJobSelect](ctx, pjs.PrintJobQuery, pjs, pjs.inters, v)
}

func (pjs *PrintJobSelect) sqlScan(ctx context.Context, root *PrintJobQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pjs.fns))
	for _, fn := range pjs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pjs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pjs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
