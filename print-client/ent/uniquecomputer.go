// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/print-client/ent/uniquecomputer"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UniqueComputer is the model entity for the UniqueComputer schema.
type UniqueComputer struct {
	config
	// ID of the ent.
	ID           pulid.ID `json:"id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UniqueComputer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uniquecomputer.FieldID:
			values[i] = new(pulid.ID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UniqueComputer fields.
func (uc *UniqueComputer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uniquecomputer.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uc.ID = *value
			}
		default:
			uc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UniqueComputer.
// This includes values selected through modifiers, order, etc.
func (uc *UniqueComputer) Value(name string) (ent.Value, error) {
	return uc.selectValues.Get(name)
}

// Update returns a builder for updating this UniqueComputer.
// Note that you need to call UniqueComputer.Unwrap() before calling this method if this UniqueComputer
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UniqueComputer) Update() *UniqueComputerUpdateOne {
	return NewUniqueComputerClient(uc.config).UpdateOne(uc)
}

// Unwrap unwraps the UniqueComputer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UniqueComputer) Unwrap() *UniqueComputer {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UniqueComputer is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UniqueComputer) String() string {
	var builder strings.Builder
	builder.WriteString("UniqueComputer(")
	builder.WriteString(fmt.Sprintf("id=%v", uc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// UniqueComputers is a parsable slice of UniqueComputer.
type UniqueComputers []*UniqueComputer
