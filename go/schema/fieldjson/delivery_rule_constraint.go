package fieldjson

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"io"
	"strings"
)

type Weekday string

const (
	Sunday    Weekday = "sunday"
	Monday    Weekday = "monday"
	Tuesday   Weekday = "tuesday"
	Wednesday Weekday = "wednesday"
	Thursday  Weekday = "thursday"
	Friday    Weekday = "friday"
	Saturday  Weekday = "saturday"
)

func (w Weekday) String() string {
	return string(w)
}

type DeliveryRuleConstraintDataType string

const (
	NUMERIC       DeliveryRuleConstraintDataType = "NUMERIC"
	NUMERIC_RANGE DeliveryRuleConstraintDataType = "NUMERIC_RANGE"
)

// Camel case to match JSON generated by entgql
// May not use omitempty here to save DB space (should be minimal)
// since zero values will then not get marshalled...
type DeliveryRuleConstraintSelectedValue struct {
	Numeric      int64    `json:"numeric"`
	NumericRange []int64  `json:"numericRange"`
	Values       []string `json:"values"`
	DayOfWeek    []string `json:"dayOfWeek"`
	TimeOfDay    []string `json:"timeOfDay"`
	IDs          []string `json:"ids"`
}

// UnmarshalGQL implements the graphql.Unmarshaler interface
func (d *DeliveryRuleConstraintSelectedValue) UnmarshalGQL(v interface{}) error {
	return d.Scan(v)
}

// MarshalGQL implements the graphql.Marshaler interface
func (d *DeliveryRuleConstraintSelectedValue) MarshalGQL(w io.Writer) {
	j, err := json.Marshal(d)
	if err != nil {
		panic(err)
	}
	_, err = io.WriteString(w, string(j))
	if err != nil {
		panic(err)
	}
}

func (d *DeliveryRuleConstraintSelectedValue) Scan(v interface{}) (err error) {
	switch v := v.(type) {
	case map[string]interface{}:
		for k, a := range v {
			switch l := a.(type) {
			case json.Number:
				d.Numeric, err = l.Int64()
				if err != nil {
					return fmt.Errorf("number: %w", err)
				}
			case []interface{}:
				if k == "numericRange" {
					s := make([]int64, 0)
					for _, i := range l {
						j := i.(json.Number)
						val, e := j.Int64()
						if e != nil {
							return fmt.Errorf("number: %w", e)
						}
						s = append(s, val)
					}
					d.NumericRange = s
				} else {
					s := make([]string, 0)
					for _, i := range l {
						s = append(s, strings.TrimSpace(i.(string)))
					}
					if k == "dayOfWeek" {
						d.DayOfWeek = s
					} else if k == "timeOfDay" {
						d.TimeOfDay = s
					} else if k == "ids" {
						d.IDs = s
					} else if k == "values" {
						d.Values = s
					} else {
						return fmt.Errorf("unknown property: %v", k)
					}
				}
			case nil:
				break
			default:
				return fmt.Errorf("found unknow type %T", l)
			}

		}
	case string:
		return json.Unmarshal([]byte(strings.TrimSpace(v)), d)
	case []byte:
		return json.Unmarshal(v, d)
	default:
		return fmt.Errorf("found unknow type %T", v)
	}

	return err
}

func (d *DeliveryRuleConstraintSelectedValue) Value() (driver.Value, error) {
	return json.Marshal(d)
}
