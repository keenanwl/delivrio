package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"
	"net/url"
	"strings"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/utils"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input ent.CreateProductInput, variants []*ent.CreateProductVariantInput, images []string) (*ent.Product, error) {
	view := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	prod, err := tx.Product.Create().
		SetInput(input).
		SetTenantID(view.TenantID()).
		Save(ctx)

	if err != nil {
		return nil, err
	}

	if len(variants) != len(images) {
		return nil, errors.New("length of variants and images must match")
	}

	for _, v := range variants {
		err := tx.ProductVariant.Create().
			SetInput(*v).
			SetProduct(prod).
			SetTenantID(view.TenantID()).
			Exec(ctx)
		if err != nil {
			return nil, err
		}
	}

	return tx.Product.Query().
		Where(product.ID(prod.ID)).
		Only(ctx)
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id pulid.ID, input ent.UpdateProductInput, variants []*models.UpdateProductVariantIDInput, images []*models.ProductVariantImageInput) (*ent.Product, error) {
	var err error
	tx := ent.FromContext(ctx)

	_, err = tx.Product.Update().
		ClearProductTags().
		SetInput(input).
		Where(product.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	for _, v := range variants {
		variant := tx.ProductVariant.Update().
			SetInput(*v.Variant).
			Where(productvariant.ID(v.ID))

		_, err = variant.Save(ctx)
		if err != nil {
			return nil, err
		}
	}

	err = tx.ProductImage.Update().
		ClearProductVariant().
		Where(productimage.HasProductWith(product.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	for _, i := range images {
		err = tx.ProductImage.Update().
			AddProductVariantIDs(i.VariantIDs...).
			Where(productimage.ID(i.ImageID)).
			Exec(ctx)
		if err != nil {
			return nil, err
		}
	}

	return tx.Product.Query().
		Where(product.ID(id)).
		Only(ctx)
}

// UploadProductImage is the resolver for the uploadProductImage field.
func (r *mutationResolver) UploadProductImage(ctx context.Context, productID pulid.ID, image string) (*ent.Product, error) {
	tx := ent.FromContext(ctx)
	view := viewer.FromContext(ctx)

	imgPath, err := utils.SaveImage(image)
	if err != nil {
		return nil, err
	}

	err = tx.ProductImage.Create().
		SetProductID(productID).
		SetURL(imgPath).
		SetTenantID(view.TenantID()).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Product.Query().
		Where(product.ID(productID)).
		Only(ctx)
}

// DeleteProductImage is the resolver for the deleteProductImage field.
func (r *mutationResolver) DeleteProductImage(ctx context.Context, imageID pulid.ID) (*ent.Product, error) {
	tx := ent.FromContext(ctx)

	img, err := tx.ProductImage.Query().
		WithProduct().
		Where(productimage.ID(imageID)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	u, err := url.Parse(img.URL)
	if len(u.Host) == 0 {
		err = utils.DeleteImage(img.URL)
		if err != nil {
			return nil, err
		}
	}

	_, err = tx.ProductImage.Delete().
		Where(productimage.ID(imageID)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Product.Query().
		Where(product.ID(img.Edges.Product.ID)).
		Only(ctx)
}

// ArchiveProductVariant is the resolver for the archiveProductVariant field.
func (r *mutationResolver) ArchiveProductVariant(ctx context.Context, variantID pulid.ID) (*ent.Product, error) {
	tx := ent.FromContext(ctx)

	err := tx.ProductVariant.Update().
		SetArchived(true).
		Where(productvariant.ID(variantID)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Product.Query().
		Where(product.HasProductVariantWith(productvariant.ID(variantID))).
		Only(ctx)
}

// CreateVariant is the resolver for the createVariant field.
func (r *mutationResolver) CreateVariant(ctx context.Context, productID pulid.ID, input *ent.CreateProductVariantInput) (*ent.ProductVariant, error) {
	view := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	create := tx.ProductVariant.Create().
		SetProductID(productID).
		SetTenantID(view.TenantID())
	if input != nil {
		create = create.SetInput(*input)
	}

	return create.Save(ctx)
}

// MustInventory is the resolver for the mustInventory field.
func (r *mutationResolver) MustInventory(ctx context.Context, productVariantID pulid.ID) (*ent.InventoryItem, error) {
	tx := ent.TxFromContext(ctx)
	view := viewer.FromContext(ctx)

	pv, err := tx.ProductVariant.Query().
		WithInventoryItem().
		Where(productvariant.ID(productVariantID)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	if pv.Edges.InventoryItem != nil {
		return pv.Edges.InventoryItem, nil
	}

	coo, err := tx.Country.Query().
		Where(country.Alpha2("DK")).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	return tx.InventoryItem.Create().
		SetCode("").
		SetSku("").
		SetProductVariantID(productVariantID).
		SetCountryOfOrigin(coo).
		SetTenantID(view.TenantID()).
		Save(ctx)
}

// UpdateInventory is the resolver for the updateInventory field.
func (r *mutationResolver) UpdateInventory(ctx context.Context, iventoryItemID pulid.ID, input ent.UpdateInventoryItemInput) (*ent.InventoryItem, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.InventoryItem.Update().
		SetInput(input).
		Where(inventoryitem.ID(iventoryItemID)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.InventoryItem.Query().
		Where(inventoryitem.ID(iventoryItemID)).
		Only(ctx)
}

// CreateProductTags is the resolver for the createProductTags field.
func (r *mutationResolver) CreateProductTags(ctx context.Context, input []string) ([]*ent.ProductTag, error) {
	view := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	for _, tag := range input {
		_, err := tx.ProductTag.Create().
			SetName(strings.TrimSpace(tag)).
			SetTenantID(view.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}
	}

	return tx.ProductTag.Query().All(ctx)
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, id pulid.ID) ([]*ent.ProductTag, error) {
	tx := ent.FromContext(ctx)
	_, err := tx.ProductTag.Delete().Where(producttag.ID(id)).Exec(ctx)
	if err != nil {
		return nil, err
	}
	return tx.ProductTag.Query().All(ctx)
}

// ShopifyProduct is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id pulid.ID) (*ent.Product, error) {
	return r.client.Product.Query().
		Where(
			product.ID(id),
		).Only(ctx)
}
