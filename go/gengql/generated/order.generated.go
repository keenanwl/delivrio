// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"delivrio.io/go/deliveryoptions"
	"delivrio.io/go/ent"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/utils"
	"delivrio.io/shared-utils/pulid"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BulkUpdateMessage_success(ctx context.Context, field graphql.CollectedField, obj *models.BulkUpdateMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkUpdateMessage_success(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Success, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkUpdateMessage_success(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkUpdateMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkUpdateMessage_msg(ctx context.Context, field graphql.CollectedField, obj *models.BulkUpdateMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkUpdateMessage_msg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkUpdateMessage_msg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkUpdateMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_deliveryOptionID(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_deliveryOptionID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryOptionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_deliveryOptionID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_name(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_description(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_status(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(deliveryoptions.DeliveryOptionBrandNameStatus)
	fc.Result = res
	return ec.marshalNDeliveryOptionBrandNameStatus2delivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandNameStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeliveryOptionBrandNameStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_price(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_price(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_currency(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖdelivrioᚗioᚋgoᚋentᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_currency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Currency_id(ctx, field)
			case "display":
				return ec.fieldContext_Currency_display(ctx, field)
			case "currencyCode":
				return ec.fieldContext_Currency_currencyCode(ctx, field)
			case "orderLine":
				return ec.fieldContext_Currency_orderLine(ctx, field)
			case "deliveryRule":
				return ec.fieldContext_Currency_deliveryRule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Currency", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_warning(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_warning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Warning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_warning(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_requiresDeliveryPoint(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_requiresDeliveryPoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresDeliveryPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_requiresDeliveryPoint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_deliveryPoint(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_deliveryPoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_deliveryPoint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryOptionBrandName_clickAndCollect(ctx context.Context, field graphql.CollectedField, obj *deliveryoptions.DeliveryOptionBrandName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryOptionBrandName_clickAndCollect(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClickAndCollect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryOptionBrandName_clickAndCollect(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryOptionBrandName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryPoint_id(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryPoint_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryPoint_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryPoint_name(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryPoint_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryPoint_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryPoint_address(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryPoint_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.AddressGlobal)
	fc.Result = res
	return ec.marshalNAddressGlobal2ᚖdelivrioᚗioᚋgoᚋentᚐAddressGlobal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryPoint_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AddressGlobal_id(ctx, field)
			case "company":
				return ec.fieldContext_AddressGlobal_company(ctx, field)
			case "addressOne":
				return ec.fieldContext_AddressGlobal_addressOne(ctx, field)
			case "addressTwo":
				return ec.fieldContext_AddressGlobal_addressTwo(ctx, field)
			case "city":
				return ec.fieldContext_AddressGlobal_city(ctx, field)
			case "state":
				return ec.fieldContext_AddressGlobal_state(ctx, field)
			case "zip":
				return ec.fieldContext_AddressGlobal_zip(ctx, field)
			case "latitude":
				return ec.fieldContext_AddressGlobal_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_AddressGlobal_longitude(ctx, field)
			case "parcelShopPostNordDelivery":
				return ec.fieldContext_AddressGlobal_parcelShopPostNordDelivery(ctx, field)
			case "parcelShopBringDelivery":
				return ec.fieldContext_AddressGlobal_parcelShopBringDelivery(ctx, field)
			case "parcelShop":
				return ec.fieldContext_AddressGlobal_parcelShop(ctx, field)
			case "country":
				return ec.fieldContext_AddressGlobal_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AddressGlobal", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderShipmentStatus_mayShipRemaining(ctx context.Context, field graphql.CollectedField, obj *models.OrderShipmentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderShipmentStatus_mayShipRemaining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MayShipRemaining, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderShipmentStatus_mayShipRemaining(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderShipmentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrderShipmentStatus_shipmentStatuses(ctx context.Context, field graphql.CollectedField, obj *models.OrderShipmentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrderShipmentStatus_shipmentStatuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipmentStatuses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ParcelStatuses)
	fc.Result = res
	return ec.marshalNParcelStatuses2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐParcelStatusesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrderShipmentStatus_shipmentStatuses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrderShipmentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "colliID":
				return ec.fieldContext_ParcelStatuses_colliID(ctx, field)
			case "shipmentID":
				return ec.fieldContext_ParcelStatuses_shipmentID(ctx, field)
			case "ccSignatures":
				return ec.fieldContext_ParcelStatuses_ccSignatures(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ParcelStatuses", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackingSlipsOutput_packingSlips(ctx context.Context, field graphql.CollectedField, obj *models.PackingSlipsOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackingSlipsOutput_packingSlips(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PackingSlips, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackingSlipsOutput_packingSlips(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackingSlipsOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PackingSlipsOutput_allPackingSlips(ctx context.Context, field graphql.CollectedField, obj *models.PackingSlipsOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PackingSlipsOutput_allPackingSlips(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllPackingSlips, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PackingSlipsOutput_allPackingSlips(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PackingSlipsOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ParcelStatuses_colliID(ctx context.Context, field graphql.CollectedField, obj *models.ParcelStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ParcelStatuses_colliID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColliID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ParcelStatuses_colliID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ParcelStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ParcelStatuses_shipmentID(ctx context.Context, field graphql.CollectedField, obj *models.ParcelStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ParcelStatuses_shipmentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShipmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*pulid.ID)
	fc.Result = res
	return ec.marshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ParcelStatuses_shipmentID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ParcelStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ParcelStatuses_ccSignatures(ctx context.Context, field graphql.CollectedField, obj *models.ParcelStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ParcelStatuses_ccSignatures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CcSignatures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ParcelStatuses_ccSignatures(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ParcelStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDeliveryOptionProductLineInput(ctx context.Context, obj interface{}) (deliveryoptions.DeliveryOptionProductLineInput, error) {
	var it deliveryoptions.DeliveryOptionProductLineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productVariantID", "units", "unitPrice"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productVariantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productVariantID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductVariantID = data
		case "units":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("units"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Units = data
		case "unitPrice":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unitPrice"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UnitPrice = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeliveryOptionSeedInput(ctx context.Context, obj interface{}) (deliveryoptions.DeliveryOptionSeedInput, error) {
	var it deliveryoptions.DeliveryOptionSeedInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"connectionID", "country", "zip", "productLines"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "connectionID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConnectionID = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		case "productLines":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productLines"))
			data, err := ec.unmarshalODeliveryOptionProductLineInput2ᚕᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionProductLineInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductLines = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProductVariantQuantity(ctx context.Context, obj interface{}) (utils.ProductVariantQuantity, error) {
	var it utils.ProductVariantQuantity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"orderLineID", "variantID", "units", "price", "discount", "currency"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "orderLineID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderLineID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderLineID = data
		case "variantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantID = data
		case "units":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("units"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Units = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "discount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Discount = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var bulkUpdateMessageImplementors = []string{"BulkUpdateMessage"}

func (ec *executionContext) _BulkUpdateMessage(ctx context.Context, sel ast.SelectionSet, obj *models.BulkUpdateMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkUpdateMessageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkUpdateMessage")
		case "success":
			out.Values[i] = ec._BulkUpdateMessage_success(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "msg":
			out.Values[i] = ec._BulkUpdateMessage_msg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deliveryOptionBrandNameImplementors = []string{"DeliveryOptionBrandName"}

func (ec *executionContext) _DeliveryOptionBrandName(ctx context.Context, sel ast.SelectionSet, obj *deliveryoptions.DeliveryOptionBrandName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryOptionBrandNameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryOptionBrandName")
		case "deliveryOptionID":
			out.Values[i] = ec._DeliveryOptionBrandName_deliveryOptionID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._DeliveryOptionBrandName_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._DeliveryOptionBrandName_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._DeliveryOptionBrandName_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._DeliveryOptionBrandName_price(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._DeliveryOptionBrandName_currency(ctx, field, obj)
		case "warning":
			out.Values[i] = ec._DeliveryOptionBrandName_warning(ctx, field, obj)
		case "requiresDeliveryPoint":
			out.Values[i] = ec._DeliveryOptionBrandName_requiresDeliveryPoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryPoint":
			out.Values[i] = ec._DeliveryOptionBrandName_deliveryPoint(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "clickAndCollect":
			out.Values[i] = ec._DeliveryOptionBrandName_clickAndCollect(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deliveryPointImplementors = []string{"DeliveryPoint"}

func (ec *executionContext) _DeliveryPoint(ctx context.Context, sel ast.SelectionSet, obj *models.DeliveryPoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryPointImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryPoint")
		case "id":
			out.Values[i] = ec._DeliveryPoint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._DeliveryPoint_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._DeliveryPoint_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orderShipmentStatusImplementors = []string{"OrderShipmentStatus"}

func (ec *executionContext) _OrderShipmentStatus(ctx context.Context, sel ast.SelectionSet, obj *models.OrderShipmentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orderShipmentStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrderShipmentStatus")
		case "mayShipRemaining":
			out.Values[i] = ec._OrderShipmentStatus_mayShipRemaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shipmentStatuses":
			out.Values[i] = ec._OrderShipmentStatus_shipmentStatuses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var packingSlipsOutputImplementors = []string{"PackingSlipsOutput"}

func (ec *executionContext) _PackingSlipsOutput(ctx context.Context, sel ast.SelectionSet, obj *models.PackingSlipsOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, packingSlipsOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PackingSlipsOutput")
		case "packingSlips":
			out.Values[i] = ec._PackingSlipsOutput_packingSlips(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allPackingSlips":
			out.Values[i] = ec._PackingSlipsOutput_allPackingSlips(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var parcelStatusesImplementors = []string{"ParcelStatuses"}

func (ec *executionContext) _ParcelStatuses(ctx context.Context, sel ast.SelectionSet, obj *models.ParcelStatuses) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, parcelStatusesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ParcelStatuses")
		case "colliID":
			out.Values[i] = ec._ParcelStatuses_colliID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shipmentID":
			out.Values[i] = ec._ParcelStatuses_shipmentID(ctx, field, obj)
		case "ccSignatures":
			out.Values[i] = ec._ParcelStatuses_ccSignatures(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNBulkUpdateMessage2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐBulkUpdateMessage(ctx context.Context, sel ast.SelectionSet, v models.BulkUpdateMessage) graphql.Marshaler {
	return ec._BulkUpdateMessage(ctx, sel, &v)
}

func (ec *executionContext) marshalNBulkUpdateMessage2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐBulkUpdateMessage(ctx context.Context, sel ast.SelectionSet, v *models.BulkUpdateMessage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BulkUpdateMessage(ctx, sel, v)
}

func (ec *executionContext) marshalNDeliveryOptionBrandName2ᚕᚕᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx context.Context, sel ast.SelectionSet, v [][]*deliveryoptions.DeliveryOptionBrandName) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeliveryOptionBrandName2ᚕᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNDeliveryOptionBrandName2ᚕᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx context.Context, sel ast.SelectionSet, v []*deliveryoptions.DeliveryOptionBrandName) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeliveryOptionBrandName2ᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNDeliveryOptionBrandNameStatus2delivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandNameStatus(ctx context.Context, v interface{}) (deliveryoptions.DeliveryOptionBrandNameStatus, error) {
	var res deliveryoptions.DeliveryOptionBrandNameStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryOptionBrandNameStatus2delivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandNameStatus(ctx context.Context, sel ast.SelectionSet, v deliveryoptions.DeliveryOptionBrandNameStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDeliveryOptionProductLineInput2ᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionProductLineInput(ctx context.Context, v interface{}) (*deliveryoptions.DeliveryOptionProductLineInput, error) {
	res, err := ec.unmarshalInputDeliveryOptionProductLineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeliveryOptionSeedInput2delivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionSeedInput(ctx context.Context, v interface{}) (deliveryoptions.DeliveryOptionSeedInput, error) {
	res, err := ec.unmarshalInputDeliveryOptionSeedInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryPoint2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryPointᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeliveryPoint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeliveryPoint2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryPoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeliveryPoint2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryPoint(ctx context.Context, sel ast.SelectionSet, v *models.DeliveryPoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeliveryPoint(ctx, sel, v)
}

func (ec *executionContext) marshalNPackingSlipsOutput2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐPackingSlipsOutput(ctx context.Context, sel ast.SelectionSet, v models.PackingSlipsOutput) graphql.Marshaler {
	return ec._PackingSlipsOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNPackingSlipsOutput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐPackingSlipsOutput(ctx context.Context, sel ast.SelectionSet, v *models.PackingSlipsOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PackingSlipsOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNParcelStatuses2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐParcelStatusesᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ParcelStatuses) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNParcelStatuses2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐParcelStatuses(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNParcelStatuses2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐParcelStatuses(ctx context.Context, sel ast.SelectionSet, v *models.ParcelStatuses) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ParcelStatuses(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProductVariantQuantity2ᚕᚖdelivrioᚗioᚋgoᚋutilsᚐProductVariantQuantityᚄ(ctx context.Context, v interface{}) ([]*utils.ProductVariantQuantity, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*utils.ProductVariantQuantity, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductVariantQuantity2ᚖdelivrioᚗioᚋgoᚋutilsᚐProductVariantQuantity(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNProductVariantQuantity2ᚖdelivrioᚗioᚋgoᚋutilsᚐProductVariantQuantity(ctx context.Context, v interface{}) (*utils.ProductVariantQuantity, error) {
	res, err := ec.unmarshalInputProductVariantQuantity(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeliveryOptionBrandName2ᚕᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx context.Context, sel ast.SelectionSet, v []*deliveryoptions.DeliveryOptionBrandName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeliveryOptionBrandName2ᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeliveryOptionBrandName2ᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionBrandName(ctx context.Context, sel ast.SelectionSet, v *deliveryoptions.DeliveryOptionBrandName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeliveryOptionBrandName(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeliveryOptionProductLineInput2ᚕᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionProductLineInputᚄ(ctx context.Context, v interface{}) ([]*deliveryoptions.DeliveryOptionProductLineInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*deliveryoptions.DeliveryOptionProductLineInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryOptionProductLineInput2ᚖdelivrioᚗioᚋgoᚋdeliveryoptionsᚐDeliveryOptionProductLineInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODeliveryPoint2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryPoint(ctx context.Context, sel ast.SelectionSet, v *models.DeliveryPoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeliveryPoint(ctx, sel, v)
}

func (ec *executionContext) marshalOOrderShipmentStatus2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐOrderShipmentStatus(ctx context.Context, sel ast.SelectionSet, v *models.OrderShipmentStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrderShipmentStatus(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
