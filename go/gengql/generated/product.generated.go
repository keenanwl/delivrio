// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"

	"delivrio.io/go/gengql/generated/models"
	"github.com/99designs/gqlgen/graphql"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputProductVariantImageInput(ctx context.Context, obj interface{}) (models.ProductVariantImageInput, error) {
	var it models.ProductVariantImageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"variantIDs", "imageID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "variantIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantIDs"))
			data, err := ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantIDs = data
		case "imageID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ImageID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProductVariantIDInput(ctx context.Context, obj interface{}) (models.UpdateProductVariantIDInput, error) {
	var it models.UpdateProductVariantIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "variant"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "variant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variant"))
			data, err := ec.unmarshalNUpdateProductVariantInput2ᚖdelivrioᚗioᚋgoᚋentᚐUpdateProductVariantInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Variant = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNProductVariantImageInput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐProductVariantImageInput(ctx context.Context, v interface{}) (*models.ProductVariantImageInput, error) {
	res, err := ec.unmarshalInputProductVariantImageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProductVariantIDInput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdateProductVariantIDInput(ctx context.Context, v interface{}) (*models.UpdateProductVariantIDInput, error) {
	res, err := ec.unmarshalInputUpdateProductVariantIDInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOProductVariantImageInput2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐProductVariantImageInputᚄ(ctx context.Context, v interface{}) ([]*models.ProductVariantImageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.ProductVariantImageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNProductVariantImageInput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐProductVariantImageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUpdateProductVariantIDInput2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdateProductVariantIDInputᚄ(ctx context.Context, v interface{}) ([]*models.UpdateProductVariantIDInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.UpdateProductVariantIDInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpdateProductVariantIDInput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdateProductVariantIDInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// endregion ***************************** type.gotpl *****************************
