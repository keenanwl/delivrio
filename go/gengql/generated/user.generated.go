// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/gengql/generated/models"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _BuildInfo_Time(ctx context.Context, field graphql.CollectedField, obj *models.BuildInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildInfo_Time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildInfo_Time(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildInfo_Hash(ctx context.Context, field graphql.CollectedField, obj *models.BuildInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildInfo_Hash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildInfo_Hash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BuildInfo_LimitedSystem(ctx context.Context, field graphql.CollectedField, obj *models.BuildInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BuildInfo_LimitedSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitedSystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BuildInfo_LimitedSystem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BuildInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectedWorkstation_workstation(ctx context.Context, field graphql.CollectedField, obj *models.SelectedWorkstation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectedWorkstation_workstation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workstation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Workstation)
	fc.Result = res
	return ec.marshalOWorkstation2ᚖdelivrioᚗioᚋgoᚋentᚐWorkstation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectedWorkstation_workstation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectedWorkstation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workstation_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Workstation_tenantID(ctx, field)
			case "archivedAt":
				return ec.fieldContext_Workstation_archivedAt(ctx, field)
			case "name":
				return ec.fieldContext_Workstation_name(ctx, field)
			case "deviceType":
				return ec.fieldContext_Workstation_deviceType(ctx, field)
			case "workstationID":
				return ec.fieldContext_Workstation_workstationID(ctx, field)
			case "createdAt":
				return ec.fieldContext_Workstation_createdAt(ctx, field)
			case "lastPing":
				return ec.fieldContext_Workstation_lastPing(ctx, field)
			case "status":
				return ec.fieldContext_Workstation_status(ctx, field)
			case "autoPrintReceiver":
				return ec.fieldContext_Workstation_autoPrintReceiver(ctx, field)
			case "tenant":
				return ec.fieldContext_Workstation_tenant(ctx, field)
			case "printer":
				return ec.fieldContext_Workstation_printer(ctx, field)
			case "user":
				return ec.fieldContext_Workstation_user(ctx, field)
			case "selectedUser":
				return ec.fieldContext_Workstation_selectedUser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workstation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectedWorkstation_jobs(ctx context.Context, field graphql.CollectedField, obj *models.SelectedWorkstation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectedWorkstation_jobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jobs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.PrintJob)
	fc.Result = res
	return ec.marshalNPrintJob2ᚕᚖdelivrioᚗioᚋgoᚋentᚐPrintJobᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectedWorkstation_jobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectedWorkstation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PrintJob_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_PrintJob_tenantID(ctx, field)
			case "status":
				return ec.fieldContext_PrintJob_status(ctx, field)
			case "fileExtension":
				return ec.fieldContext_PrintJob_fileExtension(ctx, field)
			case "documentType":
				return ec.fieldContext_PrintJob_documentType(ctx, field)
			case "printerMessages":
				return ec.fieldContext_PrintJob_printerMessages(ctx, field)
			case "base64PrintData":
				return ec.fieldContext_PrintJob_base64PrintData(ctx, field)
			case "createdAt":
				return ec.fieldContext_PrintJob_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_PrintJob_tenant(ctx, field)
			case "printer":
				return ec.fieldContext_PrintJob_printer(ctx, field)
			case "colli":
				return ec.fieldContext_PrintJob_colli(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_PrintJob_shipmentParcel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PrintJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SelectedWorkstation_limitExceeded(ctx context.Context, field graphql.CollectedField, obj *models.SelectedWorkstation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SelectedWorkstation_limitExceeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitExceeded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SelectedWorkstation_limitExceeded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SelectedWorkstation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var buildInfoImplementors = []string{"BuildInfo"}

func (ec *executionContext) _BuildInfo(ctx context.Context, sel ast.SelectionSet, obj *models.BuildInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildInfo")
		case "Time":
			out.Values[i] = ec._BuildInfo_Time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Hash":
			out.Values[i] = ec._BuildInfo_Hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "LimitedSystem":
			out.Values[i] = ec._BuildInfo_LimitedSystem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var selectedWorkstationImplementors = []string{"SelectedWorkstation"}

func (ec *executionContext) _SelectedWorkstation(ctx context.Context, sel ast.SelectionSet, obj *models.SelectedWorkstation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, selectedWorkstationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SelectedWorkstation")
		case "workstation":
			out.Values[i] = ec._SelectedWorkstation_workstation(ctx, field, obj)
		case "jobs":
			out.Values[i] = ec._SelectedWorkstation_jobs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "limitExceeded":
			out.Values[i] = ec._SelectedWorkstation_limitExceeded(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNBuildInfo2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐBuildInfo(ctx context.Context, sel ast.SelectionSet, v models.BuildInfo) graphql.Marshaler {
	return ec._BuildInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNBuildInfo2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐBuildInfo(ctx context.Context, sel ast.SelectionSet, v *models.BuildInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BuildInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOSelectedWorkstation2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐSelectedWorkstation(ctx context.Context, sel ast.SelectionSet, v *models.SelectedWorkstation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SelectedWorkstation(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
