// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type DeliveryRuleConstraintSelectedValueResolver interface {
	Text(ctx context.Context, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (*string, error)
}

type DeliveryRuleConstraintSelectedValueInputResolver interface {
	Text(ctx context.Context, obj *fieldjson.DeliveryRuleConstraintSelectedValue, data *string) error
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateDeliveryOptionSuccess_id(ctx context.Context, field graphql.CollectedField, obj *models.CreateDeliveryOptionSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeliveryOptionSuccess_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeliveryOptionSuccess_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeliveryOptionSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeliveryOptionSuccess_carrier(ctx context.Context, field graphql.CollectedField, obj *models.CreateDeliveryOptionSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeliveryOptionSuccess_carrier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(carrierbrand.InternalID)
	fc.Result = res
	return ec.marshalNCarrierBrandInternalID2delivrioᚗioᚋgoᚋentᚋcarrierbrandᚐInternalID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeliveryOptionSuccess_carrier(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeliveryOptionSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CarrierBrandInternalID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_numeric(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_numeric(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Numeric, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalOInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_numeric(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_numericRange(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_numericRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumericRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int64)
	fc.Result = res
	return ec.marshalOInt2ᚕint64ᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_numericRange(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_values(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_text(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeliveryRuleConstraintSelectedValue().Text(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_dayOfWeek(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_dayOfWeek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayOfWeek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_dayOfWeek(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_timeOfDay(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_timeOfDay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeOfDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_timeOfDay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue_ids(ctx context.Context, field graphql.CollectedField, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintSelectedValue_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintSelectedValue_ids(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintSelectedValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintWithTags_constraint(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryRuleConstraintWithTags) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintWithTags_constraint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Constraint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryRuleConstraint)
	fc.Result = res
	return ec.marshalODeliveryRuleConstraint2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRuleConstraint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintWithTags_constraint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintWithTags",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRuleConstraint_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRuleConstraint_tenantID(ctx, field)
			case "propertyType":
				return ec.fieldContext_DeliveryRuleConstraint_propertyType(ctx, field)
			case "comparison":
				return ec.fieldContext_DeliveryRuleConstraint_comparison(ctx, field)
			case "selectedValue":
				return ec.fieldContext_DeliveryRuleConstraint_selectedValue(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRuleConstraint_tenant(ctx, field)
			case "deliveryRuleConstraintGroup":
				return ec.fieldContext_DeliveryRuleConstraint_deliveryRuleConstraintGroup(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRuleConstraint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeliveryRuleConstraintWithTags_tags(ctx context.Context, field graphql.CollectedField, obj *models.DeliveryRuleConstraintWithTags) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeliveryRuleConstraintWithTags_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProductTag)
	fc.Result = res
	return ec.marshalOProductTag2ᚕᚖdelivrioᚗioᚋgoᚋentᚐProductTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeliveryRuleConstraintWithTags_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeliveryRuleConstraintWithTags",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductTag_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ProductTag_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_ProductTag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProductTag_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_ProductTag_tenant(ctx, field)
			case "products":
				return ec.fieldContext_ProductTag_products(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductTag", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputDeliveryRuleCountries(ctx context.Context, obj interface{}) (models.DeliveryRuleCountries, error) {
	var it models.DeliveryRuleCountries
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ruleID", "countries"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ruleID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.RuleID = data
		case "countries":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countries"))
			data, err := ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Countries = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createDeliveryOptionSuccessImplementors = []string{"CreateDeliveryOptionSuccess"}

func (ec *executionContext) _CreateDeliveryOptionSuccess(ctx context.Context, sel ast.SelectionSet, obj *models.CreateDeliveryOptionSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeliveryOptionSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeliveryOptionSuccess")
		case "id":
			out.Values[i] = ec._CreateDeliveryOptionSuccess_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "carrier":
			out.Values[i] = ec._CreateDeliveryOptionSuccess_carrier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deliveryRuleConstraintSelectedValueImplementors = []string{"DeliveryRuleConstraintSelectedValue"}

func (ec *executionContext) _DeliveryRuleConstraintSelectedValue(ctx context.Context, sel ast.SelectionSet, obj *fieldjson.DeliveryRuleConstraintSelectedValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryRuleConstraintSelectedValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryRuleConstraintSelectedValue")
		case "numeric":
			out.Values[i] = ec._DeliveryRuleConstraintSelectedValue_numeric(ctx, field, obj)
		case "numericRange":
			out.Values[i] = ec._DeliveryRuleConstraintSelectedValue_numericRange(ctx, field, obj)
		case "values":
			out.Values[i] = ec._DeliveryRuleConstraintSelectedValue_values(ctx, field, obj)
		case "text":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeliveryRuleConstraintSelectedValue_text(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dayOfWeek":
			out.Values[i] = ec._DeliveryRuleConstraintSelectedValue_dayOfWeek(ctx, field, obj)
		case "timeOfDay":
			out.Values[i] = ec._DeliveryRuleConstraintSelectedValue_timeOfDay(ctx, field, obj)
		case "ids":
			out.Values[i] = ec._DeliveryRuleConstraintSelectedValue_ids(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deliveryRuleConstraintWithTagsImplementors = []string{"DeliveryRuleConstraintWithTags"}

func (ec *executionContext) _DeliveryRuleConstraintWithTags(ctx context.Context, sel ast.SelectionSet, obj *models.DeliveryRuleConstraintWithTags) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deliveryRuleConstraintWithTagsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeliveryRuleConstraintWithTags")
		case "constraint":
			out.Values[i] = ec._DeliveryRuleConstraintWithTags_constraint(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._DeliveryRuleConstraintWithTags_tags(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCreateDeliveryOptionSuccess2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateDeliveryOptionSuccess(ctx context.Context, sel ast.SelectionSet, v models.CreateDeliveryOptionSuccess) graphql.Marshaler {
	return ec._CreateDeliveryOptionSuccess(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateDeliveryOptionSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateDeliveryOptionSuccess(ctx context.Context, sel ast.SelectionSet, v *models.CreateDeliveryOptionSuccess) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateDeliveryOptionSuccess(ctx, sel, v)
}

func (ec *executionContext) marshalNDeliveryRuleConstraintSelectedValue2ᚖdelivrioᚗioᚋgoᚋschemaᚋfieldjsonᚐDeliveryRuleConstraintSelectedValue(ctx context.Context, sel ast.SelectionSet, v *fieldjson.DeliveryRuleConstraintSelectedValue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNDeliveryRuleConstraintSelectedValueInput2ᚖdelivrioᚗioᚋgoᚋschemaᚋfieldjsonᚐDeliveryRuleConstraintSelectedValue(ctx context.Context, v interface{}) (*fieldjson.DeliveryRuleConstraintSelectedValue, error) {
	var res = new(fieldjson.DeliveryRuleConstraintSelectedValue)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeliveryRuleConstraintWithTags2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryRuleConstraintWithTags(ctx context.Context, sel ast.SelectionSet, v *models.DeliveryRuleConstraintWithTags) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeliveryRuleConstraintWithTags(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeliveryRuleConstraintSelectedValueInput2ᚕᚖdelivrioᚗioᚋgoᚋschemaᚋfieldjsonᚐDeliveryRuleConstraintSelectedValueᚄ(ctx context.Context, v interface{}) ([]*fieldjson.DeliveryRuleConstraintSelectedValue, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*fieldjson.DeliveryRuleConstraintSelectedValue, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNDeliveryRuleConstraintSelectedValueInput2ᚖdelivrioᚗioᚋgoᚋschemaᚋfieldjsonᚐDeliveryRuleConstraintSelectedValue(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODeliveryRuleConstraintSelectedValueInput2ᚖdelivrioᚗioᚋgoᚋschemaᚋfieldjsonᚐDeliveryRuleConstraintSelectedValue(ctx context.Context, v interface{}) (*fieldjson.DeliveryRuleConstraintSelectedValue, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(fieldjson.DeliveryRuleConstraintSelectedValue)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeliveryRuleConstraintWithTags2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryRuleConstraintWithTagsᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.DeliveryRuleConstraintWithTags) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeliveryRuleConstraintWithTags2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryRuleConstraintWithTags(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

// endregion ***************************** type.gotpl *****************************
