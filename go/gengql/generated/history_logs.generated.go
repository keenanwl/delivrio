// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"strconv"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/gengql/generated/models"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _HistoryLog_histories(ctx context.Context, field graphql.CollectedField, obj *models.HistoryLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryLog_histories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Histories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.ChangeHistory)
	fc.Result = res
	return ec.marshalNChangeHistory2ᚕᚖdelivrioᚗioᚋgoᚋentᚐChangeHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryLog_histories(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChangeHistory_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ChangeHistory_tenantID(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChangeHistory_createdAt(ctx, field)
			case "origin":
				return ec.fieldContext_ChangeHistory_origin(ctx, field)
			case "tenant":
				return ec.fieldContext_ChangeHistory_tenant(ctx, field)
			case "planHistory":
				return ec.fieldContext_ChangeHistory_planHistory(ctx, field)
			case "user":
				return ec.fieldContext_ChangeHistory_user(ctx, field)
			case "orderHistory":
				return ec.fieldContext_ChangeHistory_orderHistory(ctx, field)
			case "shipmentHistory":
				return ec.fieldContext_ChangeHistory_shipmentHistory(ctx, field)
			case "returnColliHistory":
				return ec.fieldContext_ChangeHistory_returnColliHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeHistory", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HistoryLog_system_event(ctx context.Context, field graphql.CollectedField, obj *models.HistoryLog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HistoryLog_system_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemEvent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.SystemEvents)
	fc.Result = res
	return ec.marshalNSystemEvents2ᚕᚖdelivrioᚗioᚋgoᚋentᚐSystemEventsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HistoryLog_system_event(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HistoryLog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemEvents_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_SystemEvents_tenantID(ctx, field)
			case "eventType":
				return ec.fieldContext_SystemEvents_eventType(ctx, field)
			case "eventTypeID":
				return ec.fieldContext_SystemEvents_eventTypeID(ctx, field)
			case "status":
				return ec.fieldContext_SystemEvents_status(ctx, field)
			case "description":
				return ec.fieldContext_SystemEvents_description(ctx, field)
			case "data":
				return ec.fieldContext_SystemEvents_data(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemEvents_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemEvents_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_SystemEvents_tenant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemEvents", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var historyLogImplementors = []string{"HistoryLog"}

func (ec *executionContext) _HistoryLog(ctx context.Context, sel ast.SelectionSet, obj *models.HistoryLog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, historyLogImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HistoryLog")
		case "histories":
			out.Values[i] = ec._HistoryLog_histories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "system_event":
			out.Values[i] = ec._HistoryLog_system_event(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNHistoryLog2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐHistoryLog(ctx context.Context, sel ast.SelectionSet, v models.HistoryLog) graphql.Marshaler {
	return ec._HistoryLog(ctx, sel, &v)
}

func (ec *executionContext) marshalNHistoryLog2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐHistoryLog(ctx context.Context, sel ast.SelectionSet, v *models.HistoryLog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HistoryLog(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
