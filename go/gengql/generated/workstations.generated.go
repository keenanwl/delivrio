// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"strconv"
	"sync/atomic"

	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/shared-utils/pulid"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateWorkstationSuccess_id(ctx context.Context, field graphql.CollectedField, obj *models.CreateWorkstationSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateWorkstationSuccess_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateWorkstationSuccess_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateWorkstationSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateWorkstationSuccess_registrationToken(ctx context.Context, field graphql.CollectedField, obj *models.CreateWorkstationSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateWorkstationSuccess_registrationToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateWorkstationSuccess_registrationToken(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateWorkstationSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateWorkstationSuccess_registrationTokenImg(ctx context.Context, field graphql.CollectedField, obj *models.CreateWorkstationSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateWorkstationSuccess_registrationTokenImg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationTokenImg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateWorkstationSuccess_registrationTokenImg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateWorkstationSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputUpdatePrinterWithIDInput(ctx context.Context, obj interface{}) (models.UpdatePrinterWithIDInput, error) {
	var it models.UpdatePrinterWithIDInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "updatePrinters"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "updatePrinters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatePrinters"))
			data, err := ec.unmarshalNUpdatePrinterInput2ᚖdelivrioᚗioᚋgoᚋentᚐUpdatePrinterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatePrinters = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createWorkstationSuccessImplementors = []string{"CreateWorkstationSuccess"}

func (ec *executionContext) _CreateWorkstationSuccess(ctx context.Context, sel ast.SelectionSet, obj *models.CreateWorkstationSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createWorkstationSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateWorkstationSuccess")
		case "id":
			out.Values[i] = ec._CreateWorkstationSuccess_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registrationToken":
			out.Values[i] = ec._CreateWorkstationSuccess_registrationToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registrationTokenImg":
			out.Values[i] = ec._CreateWorkstationSuccess_registrationTokenImg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNUpdatePrinterWithIDInput2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdatePrinterWithIDInputᚄ(ctx context.Context, v interface{}) ([]*models.UpdatePrinterWithIDInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.UpdatePrinterWithIDInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpdatePrinterWithIDInput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdatePrinterWithIDInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUpdatePrinterWithIDInput2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdatePrinterWithIDInput(ctx context.Context, v interface{}) (*models.UpdatePrinterWithIDInput, error) {
	res, err := ec.unmarshalInputUpdatePrinterWithIDInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCreateWorkstationSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateWorkstationSuccess(ctx context.Context, sel ast.SelectionSet, v *models.CreateWorkstationSuccess) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateWorkstationSuccess(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
