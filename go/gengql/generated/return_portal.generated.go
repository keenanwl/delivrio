// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/gengql/generated/models"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ReturnColliEdit_collis(ctx context.Context, field graphql.CollectedField, obj *models.ReturnColliEdit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReturnColliEdit_collis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ReturnColliTimeline)
	fc.Result = res
	return ec.marshalNReturnColliTimeline2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliTimelineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReturnColliEdit_collis(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReturnColliEdit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "colli":
				return ec.fieldContext_ReturnColliTimeline_colli(ctx, field)
			case "timeline":
				return ec.fieldContext_ReturnColliTimeline_timeline(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReturnColliTimeline", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReturnColliEdit_order(ctx context.Context, field graphql.CollectedField, obj *models.ReturnColliEdit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReturnColliEdit_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReturnColliEdit_order(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReturnColliEdit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReturnColliTimeline_colli(ctx context.Context, field graphql.CollectedField, obj *models.ReturnColliTimeline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReturnColliTimeline_colli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Colli, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ReturnColli)
	fc.Result = res
	return ec.marshalNReturnColli2ᚖdelivrioᚗioᚋgoᚋentᚐReturnColli(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReturnColliTimeline_colli(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReturnColliTimeline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ReturnColli_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ReturnColli_tenantID(ctx, field)
			case "expectedAt":
				return ec.fieldContext_ReturnColli_expectedAt(ctx, field)
			case "labelPdf":
				return ec.fieldContext_ReturnColli_labelPdf(ctx, field)
			case "labelPng":
				return ec.fieldContext_ReturnColli_labelPng(ctx, field)
			case "qrCodePng":
				return ec.fieldContext_ReturnColli_qrCodePng(ctx, field)
			case "comment":
				return ec.fieldContext_ReturnColli_comment(ctx, field)
			case "createdAt":
				return ec.fieldContext_ReturnColli_createdAt(ctx, field)
			case "status":
				return ec.fieldContext_ReturnColli_status(ctx, field)
			case "emailReceived":
				return ec.fieldContext_ReturnColli_emailReceived(ctx, field)
			case "emailAccepted":
				return ec.fieldContext_ReturnColli_emailAccepted(ctx, field)
			case "emailConfirmationLabel":
				return ec.fieldContext_ReturnColli_emailConfirmationLabel(ctx, field)
			case "emailConfirmationQrCode":
				return ec.fieldContext_ReturnColli_emailConfirmationQrCode(ctx, field)
			case "tenant":
				return ec.fieldContext_ReturnColli_tenant(ctx, field)
			case "recipient":
				return ec.fieldContext_ReturnColli_recipient(ctx, field)
			case "sender":
				return ec.fieldContext_ReturnColli_sender(ctx, field)
			case "order":
				return ec.fieldContext_ReturnColli_order(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_ReturnColli_deliveryOption(ctx, field)
			case "returnPortal":
				return ec.fieldContext_ReturnColli_returnPortal(ctx, field)
			case "packaging":
				return ec.fieldContext_ReturnColli_packaging(ctx, field)
			case "returnOrderLine":
				return ec.fieldContext_ReturnColli_returnOrderLine(ctx, field)
			case "returnColliHistory":
				return ec.fieldContext_ReturnColli_returnColliHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReturnColli", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReturnColliTimeline_timeline(ctx context.Context, field graphql.CollectedField, obj *models.ReturnColliTimeline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ReturnColliTimeline_timeline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.ChangeHistory)
	fc.Result = res
	return ec.marshalNChangeHistory2ᚕᚖdelivrioᚗioᚋgoᚋentᚐChangeHistoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ReturnColliTimeline_timeline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReturnColliTimeline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChangeHistory_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ChangeHistory_tenantID(ctx, field)
			case "createdAt":
				return ec.fieldContext_ChangeHistory_createdAt(ctx, field)
			case "origin":
				return ec.fieldContext_ChangeHistory_origin(ctx, field)
			case "tenant":
				return ec.fieldContext_ChangeHistory_tenant(ctx, field)
			case "planHistory":
				return ec.fieldContext_ChangeHistory_planHistory(ctx, field)
			case "user":
				return ec.fieldContext_ChangeHistory_user(ctx, field)
			case "orderHistory":
				return ec.fieldContext_ChangeHistory_orderHistory(ctx, field)
			case "shipmentHistory":
				return ec.fieldContext_ChangeHistory_shipmentHistory(ctx, field)
			case "returnColliHistory":
				return ec.fieldContext_ChangeHistory_returnColliHistory(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangeHistory", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputMutateReturnDeliveryOption(ctx context.Context, obj interface{}) (models.MutateReturnDeliveryOption, error) {
	var it models.MutateReturnDeliveryOption
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deliveryOptionID", "returnColliID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deliveryOptionID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryOptionID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryOptionID = data
		case "returnColliID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("returnColliID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReturnColliID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMutateReturnItems(ctx context.Context, obj interface{}) (models.MutateReturnItems, error) {
	var it models.MutateReturnItems
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"units", "claimID", "orderLineID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "units":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("units"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Units = data
		case "claimID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claimID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClaimID = data
		case "orderLineID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderLineID"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderLineID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMutateReturnPortalClaim(ctx context.Context, obj interface{}) (models.MutateReturnPortalClaim, error) {
	var it models.MutateReturnPortalClaim
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "input"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "input":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			data, err := ec.unmarshalNCreateReturnPortalClaimInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreateReturnPortalClaimInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Input = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var returnColliEditImplementors = []string{"ReturnColliEdit"}

func (ec *executionContext) _ReturnColliEdit(ctx context.Context, sel ast.SelectionSet, obj *models.ReturnColliEdit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, returnColliEditImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReturnColliEdit")
		case "collis":
			out.Values[i] = ec._ReturnColliEdit_collis(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "order":
			out.Values[i] = ec._ReturnColliEdit_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var returnColliTimelineImplementors = []string{"ReturnColliTimeline"}

func (ec *executionContext) _ReturnColliTimeline(ctx context.Context, sel ast.SelectionSet, obj *models.ReturnColliTimeline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, returnColliTimelineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReturnColliTimeline")
		case "colli":
			out.Values[i] = ec._ReturnColliTimeline_colli(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeline":
			out.Values[i] = ec._ReturnColliTimeline_timeline(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNMutateReturnDeliveryOption2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnDeliveryOptionᚄ(ctx context.Context, v interface{}) ([]*models.MutateReturnDeliveryOption, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.MutateReturnDeliveryOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMutateReturnDeliveryOption2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnDeliveryOption(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMutateReturnDeliveryOption2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnDeliveryOption(ctx context.Context, v interface{}) (*models.MutateReturnDeliveryOption, error) {
	res, err := ec.unmarshalInputMutateReturnDeliveryOption(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMutateReturnItems2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnItemsᚄ(ctx context.Context, v interface{}) ([]*models.MutateReturnItems, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.MutateReturnItems, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMutateReturnItems2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnItems(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMutateReturnItems2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnItems(ctx context.Context, v interface{}) (*models.MutateReturnItems, error) {
	res, err := ec.unmarshalInputMutateReturnItems(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMutateReturnPortalClaim2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnPortalClaimᚄ(ctx context.Context, v interface{}) ([]*models.MutateReturnPortalClaim, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.MutateReturnPortalClaim, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMutateReturnPortalClaim2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnPortalClaim(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMutateReturnPortalClaim2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnPortalClaim(ctx context.Context, v interface{}) (*models.MutateReturnPortalClaim, error) {
	res, err := ec.unmarshalInputMutateReturnPortalClaim(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReturnColliEdit2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliEdit(ctx context.Context, sel ast.SelectionSet, v models.ReturnColliEdit) graphql.Marshaler {
	return ec._ReturnColliEdit(ctx, sel, &v)
}

func (ec *executionContext) marshalNReturnColliEdit2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliEdit(ctx context.Context, sel ast.SelectionSet, v *models.ReturnColliEdit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReturnColliEdit(ctx, sel, v)
}

func (ec *executionContext) marshalNReturnColliTimeline2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliTimelineᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ReturnColliTimeline) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReturnColliTimeline2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliTimeline(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReturnColliTimeline2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliTimeline(ctx context.Context, sel ast.SelectionSet, v *models.ReturnColliTimeline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReturnColliTimeline(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
