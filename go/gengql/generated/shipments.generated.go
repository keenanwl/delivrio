// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/shared-utils/pulid"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateShipmentsResponse_order(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentsResponse_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentsResponse_order(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateShipmentsResponse_shipments(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentsResponse_shipments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shipments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.ShipmentLabelsResponse)
	fc.Result = res
	return ec.marshalNShipmentLabelsResponse2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentLabelsResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentsResponse_shipments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "labelsPDF":
				return ec.fieldContext_ShipmentLabelsResponse_labelsPDF(ctx, field)
			case "allLabels":
				return ec.fieldContext_ShipmentLabelsResponse_allLabels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ShipmentLabelsResponse", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateShipmentsResponse_labelsPDF(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentsResponse_labelsPDF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelsPDF, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentsResponse_labelsPDF(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateShipmentsResponse_allLabels(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentsResponse_allLabels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllLabels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentsResponse_allLabels(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentLabelsResponse_labelsPDF(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentLabelsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentLabelsResponse_labelsPDF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelsPDF, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentLabelsResponse_labelsPDF(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentLabelsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentLabelsResponse_allLabels(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentLabelsResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentLabelsResponse_allLabels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllLabels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentLabelsResponse_allLabels(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentLabelsResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentListItem_id(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentListItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentListItem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentListItem_orderIDDisplay(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentListItem_orderIDDisplay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderIDDisplay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentListItem_orderIDDisplay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentListItem_shipment(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentListItem_shipment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Shipment)
	fc.Result = res
	return ec.marshalNShipment2ᚖdelivrioᚗioᚋgoᚋentᚐShipment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentListItem_shipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Shipment_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Shipment_tenantID(ctx, field)
			case "shipmentPublicID":
				return ec.fieldContext_Shipment_shipmentPublicID(ctx, field)
			case "createdAt":
				return ec.fieldContext_Shipment_createdAt(ctx, field)
			case "status":
				return ec.fieldContext_Shipment_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Shipment_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_Shipment_carrier(ctx, field)
			case "shipmentHistory":
				return ec.fieldContext_Shipment_shipmentHistory(ctx, field)
			case "shipmentBring":
				return ec.fieldContext_Shipment_shipmentBring(ctx, field)
			case "shipmentDAO":
				return ec.fieldContext_Shipment_shipmentDAO(ctx, field)
			case "shipmentDF":
				return ec.fieldContext_Shipment_shipmentDF(ctx, field)
			case "shipmentDSV":
				return ec.fieldContext_Shipment_shipmentDSV(ctx, field)
			case "shipmentEasyPost":
				return ec.fieldContext_Shipment_shipmentEasyPost(ctx, field)
			case "shipmentPostNord":
				return ec.fieldContext_Shipment_shipmentPostNord(ctx, field)
			case "shipmentGLS":
				return ec.fieldContext_Shipment_shipmentGLS(ctx, field)
			case "shipmentUSPS":
				return ec.fieldContext_Shipment_shipmentUSPS(ctx, field)
			case "consolidation":
				return ec.fieldContext_Shipment_consolidation(ctx, field)
			case "oldConsolidation":
				return ec.fieldContext_Shipment_oldConsolidation(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Shipment_shipmentParcel(ctx, field)
			case "shipmentPallet":
				return ec.fieldContext_Shipment_shipmentPallet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Shipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentListItem_recipient(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentListItem_recipient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚖdelivrioᚗioᚋgoᚋentᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentListItem_recipient(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Address_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Address_tenantID(ctx, field)
			case "firstName":
				return ec.fieldContext_Address_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Address_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Address_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Address_phoneNumber(ctx, field)
			case "phoneNumber2":
				return ec.fieldContext_Address_phoneNumber2(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Address_vatNumber(ctx, field)
			case "company":
				return ec.fieldContext_Address_company(ctx, field)
			case "addressOne":
				return ec.fieldContext_Address_addressOne(ctx, field)
			case "addressTwo":
				return ec.fieldContext_Address_addressTwo(ctx, field)
			case "city":
				return ec.fieldContext_Address_city(ctx, field)
			case "state":
				return ec.fieldContext_Address_state(ctx, field)
			case "zip":
				return ec.fieldContext_Address_zip(ctx, field)
			case "tenant":
				return ec.fieldContext_Address_tenant(ctx, field)
			case "recipientColli":
				return ec.fieldContext_Address_recipientColli(ctx, field)
			case "recipientConsolidation":
				return ec.fieldContext_Address_recipientConsolidation(ctx, field)
			case "companyAddress":
				return ec.fieldContext_Address_companyAddress(ctx, field)
			case "location":
				return ec.fieldContext_Address_location(ctx, field)
			case "senderColli":
				return ec.fieldContext_Address_senderColli(ctx, field)
			case "senderConsolidation":
				return ec.fieldContext_Address_senderConsolidation(ctx, field)
			case "returnSenderColli":
				return ec.fieldContext_Address_returnSenderColli(ctx, field)
			case "returnRecipientColli":
				return ec.fieldContext_Address_returnRecipientColli(ctx, field)
			case "country":
				return ec.fieldContext_Address_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentListItem_sender(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentListItem_sender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Address)
	fc.Result = res
	return ec.marshalNAddress2ᚖdelivrioᚗioᚋgoᚋentᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentListItem_sender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Address_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Address_tenantID(ctx, field)
			case "firstName":
				return ec.fieldContext_Address_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Address_lastName(ctx, field)
			case "email":
				return ec.fieldContext_Address_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Address_phoneNumber(ctx, field)
			case "phoneNumber2":
				return ec.fieldContext_Address_phoneNumber2(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Address_vatNumber(ctx, field)
			case "company":
				return ec.fieldContext_Address_company(ctx, field)
			case "addressOne":
				return ec.fieldContext_Address_addressOne(ctx, field)
			case "addressTwo":
				return ec.fieldContext_Address_addressTwo(ctx, field)
			case "city":
				return ec.fieldContext_Address_city(ctx, field)
			case "state":
				return ec.fieldContext_Address_state(ctx, field)
			case "zip":
				return ec.fieldContext_Address_zip(ctx, field)
			case "tenant":
				return ec.fieldContext_Address_tenant(ctx, field)
			case "recipientColli":
				return ec.fieldContext_Address_recipientColli(ctx, field)
			case "recipientConsolidation":
				return ec.fieldContext_Address_recipientConsolidation(ctx, field)
			case "companyAddress":
				return ec.fieldContext_Address_companyAddress(ctx, field)
			case "location":
				return ec.fieldContext_Address_location(ctx, field)
			case "senderColli":
				return ec.fieldContext_Address_senderColli(ctx, field)
			case "senderConsolidation":
				return ec.fieldContext_Address_senderConsolidation(ctx, field)
			case "returnSenderColli":
				return ec.fieldContext_Address_returnSenderColli(ctx, field)
			case "returnRecipientColli":
				return ec.fieldContext_Address_returnRecipientColli(ctx, field)
			case "country":
				return ec.fieldContext_Address_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ShipmentListItem_deliveryOption(ctx context.Context, field graphql.CollectedField, obj *models.ShipmentListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ShipmentListItem_deliveryOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryOption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOption)
	fc.Result = res
	return ec.marshalNDeliveryOption2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ShipmentListItem_deliveryOption(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ShipmentListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOption_tenantID(ctx, field)
			case "archivedAt":
				return ec.fieldContext_DeliveryOption_archivedAt(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryOption_name(ctx, field)
			case "sortOrder":
				return ec.fieldContext_DeliveryOption_sortOrder(ctx, field)
			case "clickOptionDisplayCount":
				return ec.fieldContext_DeliveryOption_clickOptionDisplayCount(ctx, field)
			case "description":
				return ec.fieldContext_DeliveryOption_description(ctx, field)
			case "clickCollect":
				return ec.fieldContext_DeliveryOption_clickCollect(ctx, field)
			case "overrideSenderAddress":
				return ec.fieldContext_DeliveryOption_overrideSenderAddress(ctx, field)
			case "overrideReturnAddress":
				return ec.fieldContext_DeliveryOption_overrideReturnAddress(ctx, field)
			case "hideDeliveryOption":
				return ec.fieldContext_DeliveryOption_hideDeliveryOption(ctx, field)
			case "deliveryEstimateFrom":
				return ec.fieldContext_DeliveryOption_deliveryEstimateFrom(ctx, field)
			case "deliveryEstimateTo":
				return ec.fieldContext_DeliveryOption_deliveryEstimateTo(ctx, field)
			case "webshipperIntegration":
				return ec.fieldContext_DeliveryOption_webshipperIntegration(ctx, field)
			case "webshipperID":
				return ec.fieldContext_DeliveryOption_webshipperID(ctx, field)
			case "shipmondoIntegration":
				return ec.fieldContext_DeliveryOption_shipmondoIntegration(ctx, field)
			case "shipmondoDeliveryOption":
				return ec.fieldContext_DeliveryOption_shipmondoDeliveryOption(ctx, field)
			case "customsEnabled":
				return ec.fieldContext_DeliveryOption_customsEnabled(ctx, field)
			case "customsSigner":
				return ec.fieldContext_DeliveryOption_customsSigner(ctx, field)
			case "hideIfCompanyEmpty":
				return ec.fieldContext_DeliveryOption_hideIfCompanyEmpty(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOption_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_DeliveryOption_carrier(ctx, field)
			case "deliveryRule":
				return ec.fieldContext_DeliveryOption_deliveryRule(ctx, field)
			case "deliveryOptionDAO":
				return ec.fieldContext_DeliveryOption_deliveryOptionDAO(ctx, field)
			case "deliveryOptionDF":
				return ec.fieldContext_DeliveryOption_deliveryOptionDF(ctx, field)
			case "deliveryOptionDSV":
				return ec.fieldContext_DeliveryOption_deliveryOptionDSV(ctx, field)
			case "deliveryOptionEasyPost":
				return ec.fieldContext_DeliveryOption_deliveryOptionEasyPost(ctx, field)
			case "deliveryOptionGLS":
				return ec.fieldContext_DeliveryOption_deliveryOptionGLS(ctx, field)
			case "deliveryOptionPostNord":
				return ec.fieldContext_DeliveryOption_deliveryOptionPostNord(ctx, field)
			case "deliveryOptionUSPS":
				return ec.fieldContext_DeliveryOption_deliveryOptionUSPS(ctx, field)
			case "deliveryOptionBring":
				return ec.fieldContext_DeliveryOption_deliveryOptionBring(ctx, field)
			case "returnPortals":
				return ec.fieldContext_DeliveryOption_returnPortals(ctx, field)
			case "colli":
				return ec.fieldContext_DeliveryOption_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_DeliveryOption_returnColli(ctx, field)
			case "carrierService":
				return ec.fieldContext_DeliveryOption_carrierService(ctx, field)
			case "connection":
				return ec.fieldContext_DeliveryOption_connection(ctx, field)
			case "connectionDefault":
				return ec.fieldContext_DeliveryOption_connectionDefault(ctx, field)
			case "hypothesisTestDeliveryOptionGroupOne":
				return ec.fieldContext_DeliveryOption_hypothesisTestDeliveryOptionGroupOne(ctx, field)
			case "hypothesisTestDeliveryOptionGroupTwo":
				return ec.fieldContext_DeliveryOption_hypothesisTestDeliveryOptionGroupTwo(ctx, field)
			case "hypothesisTestDeliveryOptionLookup":
				return ec.fieldContext_DeliveryOption_hypothesisTestDeliveryOptionLookup(ctx, field)
			case "clickCollectLocation":
				return ec.fieldContext_DeliveryOption_clickCollectLocation(ctx, field)
			case "emailClickCollectAtStore":
				return ec.fieldContext_DeliveryOption_emailClickCollectAtStore(ctx, field)
			case "consolidation":
				return ec.fieldContext_DeliveryOption_consolidation(ctx, field)
			case "defaultPackaging":
				return ec.fieldContext_DeliveryOption_defaultPackaging(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOption", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createShipmentsResponseImplementors = []string{"CreateShipmentsResponse"}

func (ec *executionContext) _CreateShipmentsResponse(ctx context.Context, sel ast.SelectionSet, obj *models.CreateShipmentsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createShipmentsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateShipmentsResponse")
		case "order":
			out.Values[i] = ec._CreateShipmentsResponse_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shipments":
			out.Values[i] = ec._CreateShipmentsResponse_shipments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "labelsPDF":
			out.Values[i] = ec._CreateShipmentsResponse_labelsPDF(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allLabels":
			out.Values[i] = ec._CreateShipmentsResponse_allLabels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shipmentLabelsResponseImplementors = []string{"ShipmentLabelsResponse"}

func (ec *executionContext) _ShipmentLabelsResponse(ctx context.Context, sel ast.SelectionSet, obj *models.ShipmentLabelsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shipmentLabelsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShipmentLabelsResponse")
		case "labelsPDF":
			out.Values[i] = ec._ShipmentLabelsResponse_labelsPDF(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allLabels":
			out.Values[i] = ec._ShipmentLabelsResponse_allLabels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var shipmentListItemImplementors = []string{"ShipmentListItem"}

func (ec *executionContext) _ShipmentListItem(ctx context.Context, sel ast.SelectionSet, obj *models.ShipmentListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, shipmentListItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ShipmentListItem")
		case "id":
			out.Values[i] = ec._ShipmentListItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orderIDDisplay":
			out.Values[i] = ec._ShipmentListItem_orderIDDisplay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shipment":
			out.Values[i] = ec._ShipmentListItem_shipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recipient":
			out.Values[i] = ec._ShipmentListItem_recipient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sender":
			out.Values[i] = ec._ShipmentListItem_sender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryOption":
			out.Values[i] = ec._ShipmentListItem_deliveryOption(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCreateShipmentsResponse2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateShipmentsResponse(ctx context.Context, sel ast.SelectionSet, v models.CreateShipmentsResponse) graphql.Marshaler {
	return ec._CreateShipmentsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateShipmentsResponse2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateShipmentsResponse(ctx context.Context, sel ast.SelectionSet, v *models.CreateShipmentsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateShipmentsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNShipmentLabelsResponse2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentLabelsResponse(ctx context.Context, sel ast.SelectionSet, v models.ShipmentLabelsResponse) graphql.Marshaler {
	return ec._ShipmentLabelsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNShipmentLabelsResponse2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentLabelsResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ShipmentLabelsResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShipmentLabelsResponse2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentLabelsResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNShipmentLabelsResponse2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentLabelsResponse(ctx context.Context, sel ast.SelectionSet, v *models.ShipmentLabelsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShipmentLabelsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNShipmentListItem2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentListItem(ctx context.Context, sel ast.SelectionSet, v *models.ShipmentListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ShipmentListItem(ctx, sel, v)
}

func (ec *executionContext) marshalOShipmentListItem2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.ShipmentListItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNShipmentListItem2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐShipmentListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

// endregion ***************************** type.gotpl *****************************
