// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/shared-utils/pulid"
)

type BuildInfo struct {
	Time          string `json:"Time"`
	Hash          string `json:"Hash"`
	LimitedSystem bool   `json:"LimitedSystem"`
}

type BulkUpdateMessage struct {
	Success bool   `json:"success"`
	Msg     string `json:"msg"`
}

type ConnectionListItem struct {
	ID              string               `json:"id"`
	Name            string               `json:"name"`
	ConnectionBrand *ent.ConnectionBrand `json:"connectionBrand"`
}

type ConsolidationShipmentStatus struct {
	MayPrebook bool          `json:"mayPrebook"`
	MayBook    bool          `json:"mayBook"`
	Shipment   *ent.Shipment `json:"shipment,omitempty"`
}

type CreateAPITokenSuccess struct {
	ID    pulid.ID `json:"id"`
	Token string   `json:"token"`
}

type CreateCarrierAgreementSuccess struct {
	ID      pulid.ID                `json:"id"`
	Carrier carrierbrand.InternalID `json:"carrier"`
}

type CreateDeliveryOptionSuccess struct {
	ID      pulid.ID                `json:"id"`
	Carrier carrierbrand.InternalID `json:"carrier"`
}

type CreateOrUpdatePallet struct {
	ID     pulid.ID               `json:"id"`
	Create *ent.CreatePalletInput `json:"create"`
}

type CreateShipmentConsolidationResponse struct {
	Shipment  *ent.Shipment `json:"shipment"`
	LabelsPDF []string      `json:"labelsPDF"`
	AllLabels string        `json:"allLabels"`
}

type CreateShipmentsResponse struct {
	Order     *ent.Order                `json:"order"`
	Shipments []*ShipmentLabelsResponse `json:"shipments"`
	LabelsPDF []string                  `json:"labelsPDF"`
	AllLabels string                    `json:"allLabels"`
}

type CreateWorkstationSuccess struct {
	ID                   pulid.ID `json:"id"`
	RegistrationToken    string   `json:"registrationToken"`
	RegistrationTokenImg string   `json:"registrationTokenImg"`
}

type DashboardHypothesisTestResult struct {
	ID                     pulid.ID `json:"id"`
	Name                   string   `json:"Name"`
	ControlSuccess         int      `json:"ControlSuccess"`
	ControlFailure         int      `json:"ControlFailure"`
	TestSuccess            int      `json:"TestSuccess"`
	TestFailure            int      `json:"TestFailure"`
	SignificantlyDifferent bool     `json:"SignificantlyDifferent"`
	ControlWin             float64  `json:"ControlWin"`
	TestWin                float64  `json:"TestWin"`
}

type DashboardTile struct {
	ID    pulid.ID `json:"id"`
	Title string   `json:"title"`
	Value string   `json:"value"`
}

type DeliveryPoint struct {
	ID      pulid.ID           `json:"id"`
	Name    string             `json:"name"`
	Address *ent.AddressGlobal `json:"address"`
}

type DeliveryRuleConstraintWithTags struct {
	Constraint *ent.DeliveryRuleConstraint `json:"constraint,omitempty"`
	Tags       []*ent.ProductTag           `json:"tags,omitempty"`
}

type DeliveryRuleCountries struct {
	RuleID    pulid.ID   `json:"ruleID"`
	Countries []pulid.ID `json:"countries"`
}

type DocumentDownload struct {
	Base64pdf string `json:"base64PDF"`
}

type HistoryLog struct {
	Histories   []*ent.ChangeHistory `json:"histories"`
	SystemEvent []*ent.SystemEvents  `json:"system_event"`
}

type MutateReturnDeliveryOption struct {
	DeliveryOptionID pulid.ID `json:"deliveryOptionID"`
	ReturnColliID    pulid.ID `json:"returnColliID"`
}

type MutateReturnItems struct {
	Units       int      `json:"units"`
	ClaimID     pulid.ID `json:"claimID"`
	OrderLineID pulid.ID `json:"orderLineID"`
}

type MutateReturnPortalClaim struct {
	ID    pulid.ID                          `json:"id"`
	Input *ent.CreateReturnPortalClaimInput `json:"input"`
}

type OrderShipmentStatus struct {
	MayShipRemaining bool              `json:"mayShipRemaining"`
	ShipmentStatuses []*ParcelStatuses `json:"shipmentStatuses"`
}

type PackingSlipsOutput struct {
	PackingSlips    []string `json:"packingSlips"`
	AllPackingSlips string   `json:"allPackingSlips"`
}

type ParcelStatuses struct {
	ColliID      pulid.ID  `json:"colliID"`
	ShipmentID   *pulid.ID `json:"shipmentID,omitempty"`
	CcSignatures []string  `json:"ccSignatures"`
}

type ProductVariantImageInput struct {
	VariantIDs []pulid.ID `json:"variantIDs"`
	ImageID    pulid.ID   `json:"imageID"`
}

type RateRequest struct {
	Date        string  `json:"date"`
	OptionCount int     `json:"optionCount"`
	Error       *string `json:"error,omitempty"`
	Req         *string `json:"req,omitempty"`
}

type RateRequests struct {
	Requests      []*RateRequest `json:"requests"`
	RequestsError []*RateRequest `json:"requestsError"`
}

type ReturnColliEdit struct {
	Collis []*ReturnColliTimeline `json:"collis"`
	Order  *ent.Order             `json:"order"`
}

type ReturnColliTimeline struct {
	Colli    *ent.ReturnColli     `json:"colli"`
	Timeline []*ent.ChangeHistory `json:"timeline"`
}

type SearchResult struct {
	ID        pulid.ID   `json:"id"`
	Title     string     `json:"title"`
	ImagePath *string    `json:"imagePath,omitempty"`
	Entity    EntityType `json:"entity"`
}

type SelectedWorkstation struct {
	Workstation   *ent.Workstation `json:"workstation,omitempty"`
	Jobs          []*ent.PrintJob  `json:"jobs"`
	LimitExceeded bool             `json:"limitExceeded"`
}

type ShipmentLabelsResponse struct {
	LabelsPDF []string `json:"labelsPDF"`
	AllLabels string   `json:"allLabels"`
}

type ShipmentListItem struct {
	ID             pulid.ID            `json:"id"`
	OrderIDDisplay []string            `json:"orderIDDisplay"`
	Shipment       *ent.Shipment       `json:"shipment"`
	Recipient      *ent.Address        `json:"recipient"`
	Sender         *ent.Address        `json:"sender"`
	DeliveryOption *ent.DeliveryOption `json:"deliveryOption"`
}

type UpdatePrinterWithIDInput struct {
	ID             pulid.ID                `json:"id"`
	UpdatePrinters *ent.UpdatePrinterInput `json:"updatePrinters"`
}

type UpdateProductVariantIDInput struct {
	ID      pulid.ID                       `json:"id"`
	Variant *ent.UpdateProductVariantInput `json:"variant"`
}

type EntityType string

const (
	EntityTypeOrder   EntityType = "ORDER"
	EntityTypeProduct EntityType = "PRODUCT"
)

var AllEntityType = []EntityType{
	EntityTypeOrder,
	EntityTypeProduct,
}

func (e EntityType) IsValid() bool {
	switch e {
	case EntityTypeOrder, EntityTypeProduct:
		return true
	}
	return false
}

func (e EntityType) String() string {
	return string(e)
}

func (e *EntityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityType", str)
	}
	return nil
}

func (e EntityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
