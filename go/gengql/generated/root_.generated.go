// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"delivrio.io/go/deliveryoptions"
	"delivrio.io/go/ent"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/utils"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	DeliveryRuleConstraintSelectedValue() DeliveryRuleConstraintSelectedValueResolver
	HypothesisTestDeliveryOptionRequest() HypothesisTestDeliveryOptionRequestResolver
	Mutation() MutationResolver
	Printer() PrinterResolver
	Query() QueryResolver
	Workstation() WorkstationResolver
	CreateHypothesisTestDeliveryOptionRequestInput() CreateHypothesisTestDeliveryOptionRequestInputResolver
	DeliveryRuleConstraintSelectedValueInput() DeliveryRuleConstraintSelectedValueInputResolver
	HypothesisTestDeliveryOptionRequestWhereInput() HypothesisTestDeliveryOptionRequestWhereInputResolver
	PrinterWhereInput() PrinterWhereInputResolver
	UpdateHypothesisTestDeliveryOptionRequestInput() UpdateHypothesisTestDeliveryOptionRequestInputResolver
	UpdateWorkstationInput() UpdateWorkstationInputResolver
	WorkstationWhereInput() WorkstationWhereInputResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	APIToken struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		LastUsed  func(childComplexity int) int
		Name      func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
		User      func(childComplexity int) int
	}

	APITokenConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	APITokenEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AccessRight struct {
		AssignedAccessRight  func(childComplexity int) int
		ID                   func(childComplexity int) int
		InternalID           func(childComplexity int) int
		Label                func(childComplexity int) int
		SeatGroupAccessRight func(childComplexity int) int
	}

	AccessRightConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AccessRightEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Address struct {
		AddressOne             func(childComplexity int) int
		AddressTwo             func(childComplexity int) int
		City                   func(childComplexity int) int
		Company                func(childComplexity int) int
		CompanyAddress         func(childComplexity int) int
		Country                func(childComplexity int) int
		Email                  func(childComplexity int) int
		FirstName              func(childComplexity int) int
		ID                     func(childComplexity int) int
		LastName               func(childComplexity int) int
		Location               func(childComplexity int) int
		PhoneNumber            func(childComplexity int) int
		PhoneNumber2           func(childComplexity int) int
		RecipientColli         func(childComplexity int) int
		RecipientConsolidation func(childComplexity int) int
		ReturnRecipientColli   func(childComplexity int) int
		ReturnSenderColli      func(childComplexity int) int
		SenderColli            func(childComplexity int) int
		SenderConsolidation    func(childComplexity int) int
		State                  func(childComplexity int) int
		Tenant                 func(childComplexity int) int
		TenantID               func(childComplexity int) int
		VatNumber              func(childComplexity int) int
		Zip                    func(childComplexity int) int
	}

	AddressConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AddressEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AddressGlobal struct {
		AddressOne                 func(childComplexity int) int
		AddressTwo                 func(childComplexity int) int
		City                       func(childComplexity int) int
		Company                    func(childComplexity int) int
		Country                    func(childComplexity int) int
		ID                         func(childComplexity int) int
		Latitude                   func(childComplexity int) int
		Longitude                  func(childComplexity int) int
		ParcelShop                 func(childComplexity int) int
		ParcelShopBringDelivery    func(childComplexity int) int
		ParcelShopPostNordDelivery func(childComplexity int) int
		State                      func(childComplexity int) int
		Zip                        func(childComplexity int) int
	}

	AddressGlobalConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AddressGlobalEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BuildInfo struct {
		Hash          func(childComplexity int) int
		LimitedSystem func(childComplexity int) int
		Time          func(childComplexity int) int
	}

	BulkUpdateMessage struct {
		Msg     func(childComplexity int) int
		Success func(childComplexity int) int
	}

	BusinessHoursPeriod struct {
		Closing    func(childComplexity int) int
		DayOfWeek  func(childComplexity int) int
		ID         func(childComplexity int) int
		Opening    func(childComplexity int) int
		ParcelShop func(childComplexity int) int
	}

	BusinessHoursPeriodConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	BusinessHoursPeriodEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Carrier struct {
		CarrierBrand    func(childComplexity int) int
		CarrierBring    func(childComplexity int) int
		CarrierDAO      func(childComplexity int) int
		CarrierDF       func(childComplexity int) int
		CarrierDSV      func(childComplexity int) int
		CarrierEasyPost func(childComplexity int) int
		CarrierGLS      func(childComplexity int) int
		CarrierPostNord func(childComplexity int) int
		CarrierUSPS     func(childComplexity int) int
		DeliveryOption  func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Shipment        func(childComplexity int) int
		SyncCancelation func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
	}

	CarrierAdditionalServiceBring struct {
		APICodeBooking      func(childComplexity int) int
		CarrierServiceBring func(childComplexity int) int
		DeliveryOptionBring func(childComplexity int) int
		ID                  func(childComplexity int) int
		Label               func(childComplexity int) int
	}

	CarrierAdditionalServiceBringConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceBringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServiceDAO struct {
		APICode           func(childComplexity int) int
		CarrierServiceDAO func(childComplexity int) int
		DeliveryOptionDAO func(childComplexity int) int
		ID                func(childComplexity int) int
		Label             func(childComplexity int) int
	}

	CarrierAdditionalServiceDAOConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceDAOEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServiceDF struct {
		APICode          func(childComplexity int) int
		CarrierServiceDF func(childComplexity int) int
		DeliveryOptionDF func(childComplexity int) int
		ID               func(childComplexity int) int
		Label            func(childComplexity int) int
	}

	CarrierAdditionalServiceDFConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceDFEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServiceDSV struct {
		APICode           func(childComplexity int) int
		CarrierServiceDSV func(childComplexity int) int
		DeliveryOptionDSV func(childComplexity int) int
		ID                func(childComplexity int) int
		Label             func(childComplexity int) int
	}

	CarrierAdditionalServiceDSVConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceDSVEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServiceEasyPost struct {
		APIKey                 func(childComplexity int) int
		APIValue               func(childComplexity int) int
		CarrierServiceEasyPost func(childComplexity int) int
		DeliveryOptionEasyPost func(childComplexity int) int
		ID                     func(childComplexity int) int
		Label                  func(childComplexity int) int
	}

	CarrierAdditionalServiceEasyPostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceEasyPostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServiceGLS struct {
		AllCountriesConsignee func(childComplexity int) int
		AllCountriesConsignor func(childComplexity int) int
		CarrierServiceGLS     func(childComplexity int) int
		CountriesConsignee    func(childComplexity int) int
		CountriesConsignor    func(childComplexity int) int
		DeliveryOptionGLS     func(childComplexity int) int
		ID                    func(childComplexity int) int
		InternalID            func(childComplexity int) int
		Label                 func(childComplexity int) int
		Mandatory             func(childComplexity int) int
	}

	CarrierAdditionalServiceGLSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceGLSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServicePostNord struct {
		APICode                func(childComplexity int) int
		AllCountriesConsignee  func(childComplexity int) int
		AllCountriesConsignor  func(childComplexity int) int
		CarrierServicePostNord func(childComplexity int) int
		CountriesConsignee     func(childComplexity int) int
		CountriesConsignor     func(childComplexity int) int
		DeliveryOptionPostNord func(childComplexity int) int
		ID                     func(childComplexity int) int
		InternalID             func(childComplexity int) int
		Label                  func(childComplexity int) int
		Mandatory              func(childComplexity int) int
	}

	CarrierAdditionalServicePostNordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServicePostNordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierAdditionalServiceUSPS struct {
		APICode            func(childComplexity int) int
		CarrierServiceUSPS func(childComplexity int) int
		CommonlyUsed       func(childComplexity int) int
		DeliveryOptionUSPS func(childComplexity int) int
		ID                 func(childComplexity int) int
		InternalID         func(childComplexity int) int
		Label              func(childComplexity int) int
	}

	CarrierAdditionalServiceUSPSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierAdditionalServiceUSPSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierBrand struct {
		BackgroundColor func(childComplexity int) int
		Carrier         func(childComplexity int) int
		CarrierService  func(childComplexity int) int
		Document        func(childComplexity int) int
		ID              func(childComplexity int) int
		InternalID      func(childComplexity int) int
		Label           func(childComplexity int) int
		LabelShort      func(childComplexity int) int
		LogoURL         func(childComplexity int) int
		Packaging       func(childComplexity int) int
		ParcelShop      func(childComplexity int) int
		TextColor       func(childComplexity int) int
	}

	CarrierBrandConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierBrandEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierBring struct {
		APIKey         func(childComplexity int) int
		Carrier        func(childComplexity int) int
		CustomerNumber func(childComplexity int) int
		ID             func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
		Test           func(childComplexity int) int
	}

	CarrierBringConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierBringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierDAO struct {
		APIKey     func(childComplexity int) int
		Carrier    func(childComplexity int) int
		CustomerID func(childComplexity int) int
		ID         func(childComplexity int) int
		Tenant     func(childComplexity int) int
		TenantID   func(childComplexity int) int
		Test       func(childComplexity int) int
	}

	CarrierDAOConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierDAOEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierDF struct {
		AgreementNumber func(childComplexity int) int
		Carrier         func(childComplexity int) int
		CustomerID      func(childComplexity int) int
		ID              func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
		Test            func(childComplexity int) int
		WhoPays         func(childComplexity int) int
	}

	CarrierDFConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierDFEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierDSV struct {
		Carrier  func(childComplexity int) int
		ID       func(childComplexity int) int
		Tenant   func(childComplexity int) int
		TenantID func(childComplexity int) int
	}

	CarrierDSVConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierDSVEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierEasyPost struct {
		APIKey          func(childComplexity int) int
		Carrier         func(childComplexity int) int
		CarrierAccounts func(childComplexity int) int
		ID              func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
		Test            func(childComplexity int) int
	}

	CarrierEasyPostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierEasyPostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierGLS struct {
		Carrier                  func(childComplexity int) int
		ContactID                func(childComplexity int) int
		CustomerID               func(childComplexity int) int
		GLSCountryCode           func(childComplexity int) int
		GLSPassword              func(childComplexity int) int
		GLSUsername              func(childComplexity int) int
		ID                       func(childComplexity int) int
		PrintErrorOnLabel        func(childComplexity int) int
		SyncShipmentCancellation func(childComplexity int) int
		Tenant                   func(childComplexity int) int
		TenantID                 func(childComplexity int) int
	}

	CarrierGLSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierGLSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierPostNord struct {
		Carrier        func(childComplexity int) int
		CustomerNumber func(childComplexity int) int
		ID             func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
	}

	CarrierPostNordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierPostNordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierService struct {
		CarrierBrand           func(childComplexity int) int
		CarrierServEasyPost    func(childComplexity int) int
		CarrierServiceBring    func(childComplexity int) int
		CarrierServiceDAO      func(childComplexity int) int
		CarrierServiceDF       func(childComplexity int) int
		CarrierServiceDSV      func(childComplexity int) int
		CarrierServiceGLS      func(childComplexity int) int
		CarrierServicePostNord func(childComplexity int) int
		CarrierServiceUSPS     func(childComplexity int) int
		Consolidation          func(childComplexity int) int
		DeliveryOption         func(childComplexity int) int
		DeliveryPointOptional  func(childComplexity int) int
		DeliveryPointRequired  func(childComplexity int) int
		ID                     func(childComplexity int) int
		InternalID             func(childComplexity int) int
		Label                  func(childComplexity int) int
		Return                 func(childComplexity int) int
	}

	CarrierServiceBring struct {
		APIRequest                    func(childComplexity int) int
		APIServiceCode                func(childComplexity int) int
		CarrierAdditionalServiceBring func(childComplexity int) int
		CarrierService                func(childComplexity int) int
		ID                            func(childComplexity int) int
	}

	CarrierServiceBringConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierServiceBringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierServiceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierServiceDAO struct {
		CarrierAdditionalServiceDAO func(childComplexity int) int
		CarrierService              func(childComplexity int) int
		ID                          func(childComplexity int) int
	}

	CarrierServiceDAOConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierServiceDAOEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierServiceDF struct {
		CarrierAdditionalServiceDF func(childComplexity int) int
		CarrierService             func(childComplexity int) int
		ID                         func(childComplexity int) int
	}

	CarrierServiceDFConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierServiceDFEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierServiceDSV struct {
		CarrierAdditionalServiceDSV func(childComplexity int) int
		CarrierService              func(childComplexity int) int
		ID                          func(childComplexity int) int
	}

	CarrierServiceDSVConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierServiceDSVEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierServiceEasyPost struct {
		CarrierAddServEasyPost func(childComplexity int) int
		CarrierService         func(childComplexity int) int
		ID                     func(childComplexity int) int
	}

	CarrierServiceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarrierServiceGLS struct {
		APIKey                      func(childComplexity int) int
		APIValue                    func(childComplexity int) int
		CarrierAdditionalServiceGLS func(childComplexity int) int
		CarrierService              func(childComplexity int) int
		ID                          func(childComplexity int) int
	}

	CarrierServicePostNord struct {
		APICode                func(childComplexity int) int
		CarrierAddServPostNord func(childComplexity int) int
		CarrierService         func(childComplexity int) int
		ID                     func(childComplexity int) int
		InternalID             func(childComplexity int) int
		Label                  func(childComplexity int) int
	}

	CarrierServiceUSPS struct {
		CarrierAdditionalServiceUSPS func(childComplexity int) int
		CarrierService               func(childComplexity int) int
		ID                           func(childComplexity int) int
	}

	CarrierUSPS struct {
		Carrier          func(childComplexity int) int
		ConsumerKey      func(childComplexity int) int
		ConsumerSecret   func(childComplexity int) int
		Crid             func(childComplexity int) int
		EpsAccountNumber func(childComplexity int) int
		ID               func(childComplexity int) int
		IsTestAPI        func(childComplexity int) int
		ManifestMid      func(childComplexity int) int
		Mid              func(childComplexity int) int
		Tenant           func(childComplexity int) int
		TenantID         func(childComplexity int) int
	}

	CarrierUSPSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarrierUSPSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ChangeHistory struct {
		CreatedAt          func(childComplexity int) int
		ID                 func(childComplexity int) int
		OrderHistory       func(childComplexity int) int
		Origin             func(childComplexity int) int
		PlanHistory        func(childComplexity int) int
		ReturnColliHistory func(childComplexity int) int
		ShipmentHistory    func(childComplexity int) int
		Tenant             func(childComplexity int) int
		TenantID           func(childComplexity int) int
		User               func(childComplexity int) int
	}

	ChangeHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ChangeHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Colli struct {
		CancelledShipmentParcel   func(childComplexity int) int
		ClickCollectLocation      func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		DeliveryOption            func(childComplexity int) int
		DocumentFile              func(childComplexity int) int
		EmailLabelPrintedAt       func(childComplexity int) int
		EmailPackingSlipPrintedAt func(childComplexity int) int
		ID                        func(childComplexity int) int
		InternalBarcode           func(childComplexity int) int
		Order                     func(childComplexity int) int
		OrderLines                func(childComplexity int) int
		Packaging                 func(childComplexity int) int
		ParcelShop                func(childComplexity int) int
		PrintJob                  func(childComplexity int) int
		Recipient                 func(childComplexity int) int
		Sender                    func(childComplexity int) int
		ShipmentParcel            func(childComplexity int) int
		SlipPrintStatus           func(childComplexity int) int
		Status                    func(childComplexity int) int
		Tenant                    func(childComplexity int) int
		TenantID                  func(childComplexity int) int
	}

	ColliConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ColliEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ConnectOptionCarrier struct {
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Tenant func(childComplexity int) int
	}

	ConnectOptionCarrierConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConnectOptionCarrierEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ConnectOptionPlatform struct {
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Tenant func(childComplexity int) int
	}

	ConnectOptionPlatformConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConnectOptionPlatformEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Connection struct {
		AutoPrintParcelSlip   func(childComplexity int) int
		ConnectionBrand       func(childComplexity int) int
		ConnectionLookup      func(childComplexity int) int
		ConnectionShopify     func(childComplexity int) int
		ConvertCurrency       func(childComplexity int) int
		Currency              func(childComplexity int) int
		DefaultDeliveryOption func(childComplexity int) int
		DeliveryOption        func(childComplexity int) int
		DispatchAutomatically func(childComplexity int) int
		FulfillAutomatically  func(childComplexity int) int
		HypothesisTest        func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		Notifications         func(childComplexity int) int
		Orders                func(childComplexity int) int
		PackingSlipTemplate   func(childComplexity int) int
		PickupLocation        func(childComplexity int) int
		ReturnLocation        func(childComplexity int) int
		ReturnPortal          func(childComplexity int) int
		SellerLocation        func(childComplexity int) int
		SenderLocation        func(childComplexity int) int
		SyncOrders            func(childComplexity int) int
		SyncProducts          func(childComplexity int) int
		Tenant                func(childComplexity int) int
		TenantID              func(childComplexity int) int
	}

	ConnectionBrand struct {
		Connection func(childComplexity int) int
		ID         func(childComplexity int) int
		InternalID func(childComplexity int) int
		Label      func(childComplexity int) int
		LogoURL    func(childComplexity int) int
	}

	ConnectionBrandConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConnectionBrandEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ConnectionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConnectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ConnectionListItem struct {
		ConnectionBrand func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	ConnectionLookup struct {
		Connections        func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Error              func(childComplexity int) int
		ID                 func(childComplexity int) int
		OptionsOutputCount func(childComplexity int) int
		Payload            func(childComplexity int) int
		Tenant             func(childComplexity int) int
		TenantID           func(childComplexity int) int
	}

	ConnectionLookupConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConnectionLookupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ConnectionShopify struct {
		APIKey          func(childComplexity int) int
		Connection      func(childComplexity int) int
		FilterTags      func(childComplexity int) int
		ID              func(childComplexity int) int
		LookupKey       func(childComplexity int) int
		RateIntegration func(childComplexity int) int
		StoreURL        func(childComplexity int) int
		SyncFrom        func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
	}

	ConnectionShopifyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConnectionShopifyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Consolidation struct {
		CancelledShipments func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeliveryOption     func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		Orders             func(childComplexity int) int
		Pallets            func(childComplexity int) int
		PublicID           func(childComplexity int) int
		Recipient          func(childComplexity int) int
		Sender             func(childComplexity int) int
		Shipment           func(childComplexity int) int
		Status             func(childComplexity int) int
		Tenant             func(childComplexity int) int
		TenantID           func(childComplexity int) int
	}

	ConsolidationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConsolidationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ConsolidationShipmentStatus struct {
		MayBook    func(childComplexity int) int
		MayPrebook func(childComplexity int) int
		Shipment   func(childComplexity int) int
	}

	Contact struct {
		AdminContact   func(childComplexity int) int
		BillingContact func(childComplexity int) int
		Email          func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		PhoneNumber    func(childComplexity int) int
		Surname        func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
	}

	ContactConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ContactEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Country struct {
		Address                                   func(childComplexity int) int
		AddressGlobal                             func(childComplexity int) int
		Alpha2                                    func(childComplexity int) int
		Alpha3                                    func(childComplexity int) int
		CarrierAdditionalServiceGLSConsignee      func(childComplexity int) int
		CarrierAdditionalServiceGLSConsignor      func(childComplexity int) int
		CarrierAdditionalServicePostNordConsignee func(childComplexity int) int
		CarrierAdditionalServicePostNordConsignor func(childComplexity int) int
		Code                                      func(childComplexity int) int
		CountryHarmonizedCode                     func(childComplexity int) int
		DeliveryRule                              func(childComplexity int) int
		ID                                        func(childComplexity int) int
		InventoryItem                             func(childComplexity int) int
		Label                                     func(childComplexity int) int
		Region                                    func(childComplexity int) int
	}

	CountryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CountryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CountryHarmonizedCode struct {
		Code          func(childComplexity int) int
		Country       func(childComplexity int) int
		ID            func(childComplexity int) int
		InventoryItem func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
	}

	CountryHarmonizedCodeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CountryHarmonizedCodeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CreateAPITokenSuccess struct {
		ID    func(childComplexity int) int
		Token func(childComplexity int) int
	}

	CreateCarrierAgreementSuccess struct {
		Carrier func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	CreateDeliveryOptionSuccess struct {
		Carrier func(childComplexity int) int
		ID      func(childComplexity int) int
	}

	CreateShipmentConsolidationResponse struct {
		AllLabels func(childComplexity int) int
		LabelsPDF func(childComplexity int) int
		Shipment  func(childComplexity int) int
	}

	CreateShipmentsResponse struct {
		AllLabels func(childComplexity int) int
		LabelsPDF func(childComplexity int) int
		Order     func(childComplexity int) int
		Shipments func(childComplexity int) int
	}

	CreateWorkstationSuccess struct {
		ID                   func(childComplexity int) int
		RegistrationToken    func(childComplexity int) int
		RegistrationTokenImg func(childComplexity int) int
	}

	Currency struct {
		CurrencyCode func(childComplexity int) int
		DeliveryRule func(childComplexity int) int
		Display      func(childComplexity int) int
		ID           func(childComplexity int) int
		OrderLine    func(childComplexity int) int
	}

	CurrencyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CurrencyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DashboardHypothesisTestResult struct {
		ControlFailure         func(childComplexity int) int
		ControlSuccess         func(childComplexity int) int
		ControlWin             func(childComplexity int) int
		ID                     func(childComplexity int) int
		Name                   func(childComplexity int) int
		SignificantlyDifferent func(childComplexity int) int
		TestFailure            func(childComplexity int) int
		TestSuccess            func(childComplexity int) int
		TestWin                func(childComplexity int) int
	}

	DashboardTile struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
		Value func(childComplexity int) int
	}

	DeliveryOption struct {
		ArchivedAt                           func(childComplexity int) int
		Carrier                              func(childComplexity int) int
		CarrierService                       func(childComplexity int) int
		ClickCollect                         func(childComplexity int) int
		ClickCollectLocation                 func(childComplexity int) int
		ClickOptionDisplayCount              func(childComplexity int) int
		Colli                                func(childComplexity int) int
		Connection                           func(childComplexity int) int
		ConnectionDefault                    func(childComplexity int) int
		Consolidation                        func(childComplexity int) int
		CustomsEnabled                       func(childComplexity int) int
		CustomsSigner                        func(childComplexity int) int
		DefaultPackaging                     func(childComplexity int) int
		DeliveryEstimateFrom                 func(childComplexity int) int
		DeliveryEstimateTo                   func(childComplexity int) int
		DeliveryOptionBring                  func(childComplexity int) int
		DeliveryOptionDAO                    func(childComplexity int) int
		DeliveryOptionDF                     func(childComplexity int) int
		DeliveryOptionDSV                    func(childComplexity int) int
		DeliveryOptionEasyPost               func(childComplexity int) int
		DeliveryOptionGLS                    func(childComplexity int) int
		DeliveryOptionPostNord               func(childComplexity int) int
		DeliveryOptionUSPS                   func(childComplexity int) int
		DeliveryRule                         func(childComplexity int) int
		Description                          func(childComplexity int) int
		EmailClickCollectAtStore             func(childComplexity int) int
		HideDeliveryOption                   func(childComplexity int) int
		HideIfCompanyEmpty                   func(childComplexity int) int
		HypothesisTestDeliveryOptionGroupOne func(childComplexity int) int
		HypothesisTestDeliveryOptionGroupTwo func(childComplexity int) int
		HypothesisTestDeliveryOptionLookup   func(childComplexity int) int
		ID                                   func(childComplexity int) int
		Name                                 func(childComplexity int) int
		OverrideReturnAddress                func(childComplexity int) int
		OverrideSenderAddress                func(childComplexity int) int
		ReturnColli                          func(childComplexity int) int
		ReturnPortals                        func(childComplexity int) int
		ShipmondoDeliveryOption              func(childComplexity int) int
		ShipmondoIntegration                 func(childComplexity int) int
		SortOrder                            func(childComplexity int) int
		Tenant                               func(childComplexity int) int
		TenantID                             func(childComplexity int) int
		WebshipperID                         func(childComplexity int) int
		WebshipperIntegration                func(childComplexity int) int
	}

	DeliveryOptionBrandName struct {
		ClickAndCollect       func(childComplexity int) int
		Currency              func(childComplexity int) int
		DeliveryOptionID      func(childComplexity int) int
		DeliveryPoint         func(childComplexity int) int
		Description           func(childComplexity int) int
		Name                  func(childComplexity int) int
		Price                 func(childComplexity int) int
		RequiresDeliveryPoint func(childComplexity int) int
		Status                func(childComplexity int) int
		Warning               func(childComplexity int) int
	}

	DeliveryOptionBring struct {
		CarrierAdditionalServiceBring func(childComplexity int) int
		DeliveryOption                func(childComplexity int) int
		ElectronicCustoms             func(childComplexity int) int
		ID                            func(childComplexity int) int
		Tenant                        func(childComplexity int) int
		TenantID                      func(childComplexity int) int
	}

	DeliveryOptionBringConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionBringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionDAO struct {
		CarrierAdditionalServiceDAO func(childComplexity int) int
		DeliveryOption              func(childComplexity int) int
		ID                          func(childComplexity int) int
		Tenant                      func(childComplexity int) int
		TenantID                    func(childComplexity int) int
	}

	DeliveryOptionDAOConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionDAOEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionDF struct {
		CarrierAdditionalServiceDF func(childComplexity int) int
		DeliveryOption             func(childComplexity int) int
		ID                         func(childComplexity int) int
		Tenant                     func(childComplexity int) int
		TenantID                   func(childComplexity int) int
	}

	DeliveryOptionDFConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionDFEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionDSV struct {
		CarrierAdditionalServiceDSV func(childComplexity int) int
		DeliveryOption              func(childComplexity int) int
		ID                          func(childComplexity int) int
		Tenant                      func(childComplexity int) int
		TenantID                    func(childComplexity int) int
	}

	DeliveryOptionDSVConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionDSVEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionEasyPost struct {
		CarrierAddServEasyPost func(childComplexity int) int
		DeliveryOption         func(childComplexity int) int
		ID                     func(childComplexity int) int
		Tenant                 func(childComplexity int) int
		TenantID               func(childComplexity int) int
	}

	DeliveryOptionEasyPostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionEasyPostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionGLS struct {
		CarrierAdditionalServiceGLS func(childComplexity int) int
		DeliveryOption              func(childComplexity int) int
		ID                          func(childComplexity int) int
		Tenant                      func(childComplexity int) int
		TenantID                    func(childComplexity int) int
	}

	DeliveryOptionGLSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionGLSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionPostNord struct {
		CarrierAddServPostNord func(childComplexity int) int
		DeliveryOption         func(childComplexity int) int
		FormatZpl              func(childComplexity int) int
		ID                     func(childComplexity int) int
		Tenant                 func(childComplexity int) int
		TenantID               func(childComplexity int) int
	}

	DeliveryOptionPostNordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionPostNordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryOptionUSPS struct {
		CarrierAdditionalServiceUSPS func(childComplexity int) int
		DeliveryOption               func(childComplexity int) int
		FormatZpl                    func(childComplexity int) int
		ID                           func(childComplexity int) int
		Tenant                       func(childComplexity int) int
		TenantID                     func(childComplexity int) int
	}

	DeliveryOptionUSPSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryOptionUSPSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryPoint struct {
		Address func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	DeliveryRule struct {
		Country                     func(childComplexity int) int
		Currency                    func(childComplexity int) int
		DeliveryOption              func(childComplexity int) int
		DeliveryRuleConstraintGroup func(childComplexity int) int
		ID                          func(childComplexity int) int
		Name                        func(childComplexity int) int
		Price                       func(childComplexity int) int
		Tenant                      func(childComplexity int) int
		TenantID                    func(childComplexity int) int
	}

	DeliveryRuleConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryRuleConstraint struct {
		Comparison                  func(childComplexity int) int
		DeliveryRuleConstraintGroup func(childComplexity int) int
		ID                          func(childComplexity int) int
		PropertyType                func(childComplexity int) int
		SelectedValue               func(childComplexity int) int
		Tenant                      func(childComplexity int) int
		TenantID                    func(childComplexity int) int
	}

	DeliveryRuleConstraintConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryRuleConstraintEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryRuleConstraintGroup struct {
		ConstraintLogic         func(childComplexity int) int
		DeliveryRule            func(childComplexity int) int
		DeliveryRuleConstraints func(childComplexity int) int
		ID                      func(childComplexity int) int
		Tenant                  func(childComplexity int) int
		TenantID                func(childComplexity int) int
	}

	DeliveryRuleConstraintGroupConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeliveryRuleConstraintGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DeliveryRuleConstraintSelectedValue struct {
		DayOfWeek    func(childComplexity int) int
		IDs          func(childComplexity int) int
		Numeric      func(childComplexity int) int
		NumericRange func(childComplexity int) int
		Text         func(childComplexity int) int
		TimeOfDay    func(childComplexity int) int
		Values       func(childComplexity int) int
	}

	DeliveryRuleConstraintWithTags struct {
		Constraint func(childComplexity int) int
		Tags       func(childComplexity int) int
	}

	DeliveryRuleEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Document struct {
		CarrierBrand          func(childComplexity int) int
		ConnectionPackingSlip func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		EndAt                 func(childComplexity int) int
		HTMLFooter            func(childComplexity int) int
		HTMLHeader            func(childComplexity int) int
		HTMLTemplate          func(childComplexity int) int
		ID                    func(childComplexity int) int
		LastBase64Pdf         func(childComplexity int) int
		MergeType             func(childComplexity int) int
		Name                  func(childComplexity int) int
		PaperSize             func(childComplexity int) int
		StartAt               func(childComplexity int) int
		Tenant                func(childComplexity int) int
		TenantID              func(childComplexity int) int
	}

	DocumentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DocumentDownload struct {
		Base64pdf func(childComplexity int) int
	}

	DocumentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	DocumentFile struct {
		Colli          func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		DataPdfBase64  func(childComplexity int) int
		DataZplBase64  func(childComplexity int) int
		DocType        func(childComplexity int) int
		ID             func(childComplexity int) int
		ShipmentParcel func(childComplexity int) int
		StoragePath    func(childComplexity int) int
		StoragePathZpl func(childComplexity int) int
		StorageType    func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
	}

	DocumentFileConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DocumentFileEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EmailTemplate struct {
		CreatedAt                         func(childComplexity int) int
		DeliveryOptionClickCollectAtStore func(childComplexity int) int
		HTMLTemplate                      func(childComplexity int) int
		ID                                func(childComplexity int) int
		MergeType                         func(childComplexity int) int
		Name                              func(childComplexity int) int
		Notifications                     func(childComplexity int) int
		ReturnPortalAccepted              func(childComplexity int) int
		ReturnPortalConfirmationLabel     func(childComplexity int) int
		ReturnPortalConfirmationQrCode    func(childComplexity int) int
		ReturnPortalReceived              func(childComplexity int) int
		Subject                           func(childComplexity int) int
		Tenant                            func(childComplexity int) int
		TenantID                          func(childComplexity int) int
		UpdatedAt                         func(childComplexity int) int
	}

	EmailTemplateConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EmailTemplateEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HistoryLog struct {
		Histories   func(childComplexity int) int
		SystemEvent func(childComplexity int) int
	}

	HypothesisTest struct {
		Active                       func(childComplexity int) int
		Connection                   func(childComplexity int) int
		HypothesisTestDeliveryOption func(childComplexity int) int
		ID                           func(childComplexity int) int
		Name                         func(childComplexity int) int
		Tenant                       func(childComplexity int) int
		TenantID                     func(childComplexity int) int
	}

	HypothesisTestConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HypothesisTestDeliveryOption struct {
		ByIntervalRotation                  func(childComplexity int) int
		ByOrder                             func(childComplexity int) int
		DeliveryOptionGroupOne              func(childComplexity int) int
		DeliveryOptionGroupTwo              func(childComplexity int) int
		HypothesisTest                      func(childComplexity int) int
		HypothesisTestDeliveryOptionRequest func(childComplexity int) int
		ID                                  func(childComplexity int) int
		RandomizeWithinGroupSort            func(childComplexity int) int
		RotationIntervalHours               func(childComplexity int) int
		Tenant                              func(childComplexity int) int
		TenantID                            func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionLookup struct {
		DeliveryOption                      func(childComplexity int) int
		HypothesisTestDeliveryOptionRequest func(childComplexity int) int
		ID                                  func(childComplexity int) int
		Tenant                              func(childComplexity int) int
		TenantID                            func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionLookupConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionLookupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionRequest struct {
		CreatedAt                          func(childComplexity int) int
		HypothesisTestDeliveryOption       func(childComplexity int) int
		HypothesisTestDeliveryOptionLookup func(childComplexity int) int
		ID                                 func(childComplexity int) int
		IsControlGroup                     func(childComplexity int) int
		LastRequestedAt                    func(childComplexity int) int
		Order                              func(childComplexity int) int
		OrderHash                          func(childComplexity int) int
		RequestCount                       func(childComplexity int) int
		ShippingAddressHash                func(childComplexity int) int
		Tenant                             func(childComplexity int) int
		TenantID                           func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionRequestConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	HypothesisTestDeliveryOptionRequestEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	HypothesisTestEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	InventoryItem struct {
		Code                  func(childComplexity int) int
		CountryHarmonizedCode func(childComplexity int) int
		CountryOfOrigin       func(childComplexity int) int
		ExternalID            func(childComplexity int) int
		ID                    func(childComplexity int) int
		ProductVariant        func(childComplexity int) int
		Sku                   func(childComplexity int) int
		Tenant                func(childComplexity int) int
		TenantID              func(childComplexity int) int
	}

	InventoryItemConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	InventoryItemEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Language struct {
		ID         func(childComplexity int) int
		InternalID func(childComplexity int) int
		Label      func(childComplexity int) int
		Language   func(childComplexity int) int
		Users      func(childComplexity int) int
	}

	LanguageConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LanguageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Location struct {
		Address          func(childComplexity int) int
		Colli            func(childComplexity int) int
		DeliveryOption   func(childComplexity int) int
		ID               func(childComplexity int) int
		LocationTags     func(childComplexity int) int
		Name             func(childComplexity int) int
		PickupConnection func(childComplexity int) int
		ReturnConnection func(childComplexity int) int
		ReturnPortal     func(childComplexity int) int
		SellerConnection func(childComplexity int) int
		SenderConnection func(childComplexity int) int
		Tenant           func(childComplexity int) int
		TenantID         func(childComplexity int) int
	}

	LocationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LocationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LocationTag struct {
		ID         func(childComplexity int) int
		InternalID func(childComplexity int) int
		Label      func(childComplexity int) int
		Location   func(childComplexity int) int
	}

	LocationTagConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LocationTagEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mutation struct {
		ArchivePackaging                              func(childComplexity int, id pulid.ID) int
		ArchiveProductVariant                         func(childComplexity int, variantID pulid.ID) int
		ArchiveWorkstation                            func(childComplexity int, id pulid.ID) int
		BulkUpdatePackaging                           func(childComplexity int, orderIDs []pulid.ID, packagingID *pulid.ID) int
		CancelCancelSync                              func(childComplexity int, shipmentParcelID pulid.ID) int
		CancelFulfillmentSync                         func(childComplexity int, shipmentParcelID pulid.ID) int
		CancelShipment                                func(childComplexity int, shipmentID pulid.ID) int
		CancelShipmentByColliIDs                      func(childComplexity int, colliIDs []pulid.ID) int
		CreateAPIToken                                func(childComplexity int, name string) int
		CreateCarrierAgreement                        func(childComplexity int, name string, carrierBrand pulid.ID) int
		CreateColli                                   func(childComplexity int, orderID pulid.ID, input ent.CreateColliInput, deliveryOptionID *pulid.ID, deliveryPointID *pulid.ID, ccLocationID *pulid.ID, packagingID *pulid.ID, recipientAddress ent.CreateAddressInput, senderAddress ent.CreateAddressInput, products []*utils.ProductVariantQuantity) int
		CreateConsolidation                           func(childComplexity int, publicID string, description string) int
		CreateDeliveryOption                          func(childComplexity int, name string, agreementID pulid.ID, connectionID pulid.ID) int
		CreateDeliveryRule                            func(childComplexity int, input ent.CreateDeliveryRuleInput) int
		CreateDeliveryRuleConstraintGroup             func(childComplexity int, input ent.CreateDeliveryRuleConstraintGroupInput) int
		CreateDeliveryRuleConstraintGroupConstraints  func(childComplexity int, deliveryRuleID pulid.ID, logicType deliveryruleconstraintgroup.ConstraintLogic, input []*ent.CreateDeliveryRuleConstraintInput) int
		CreateDocument                                func(childComplexity int, name string, mergeType document.MergeType) int
		CreateEmailTemplates                          func(childComplexity int, name string, merge emailtemplate.MergeType) int
		CreateEmptyOrder                              func(childComplexity int, input ent.CreateOrderInput) int
		CreateHypothesisTestDeliveryOption            func(childComplexity int, name string, connectionID pulid.ID) int
		CreateLocation                                func(childComplexity int, input ent.CreateLocationInput, inputAddress ent.CreateAddressInput) int
		CreateNotification                            func(childComplexity int, name string, connectionID pulid.ID, emailTemplateID pulid.ID) int
		CreatePackaging                               func(childComplexity int, input ent.CreatePackagingInput, inputPackagingUsps *ent.CreatePackagingUSPSInput, inputPackagingDf *ent.CreatePackagingDFInput) int
		CreateProduct                                 func(childComplexity int, input ent.CreateProductInput, variants []*ent.CreateProductVariantInput, images []string) int
		CreateProductTags                             func(childComplexity int, input []string) int
		CreateReturnOrder                             func(childComplexity int, orderID pulid.ID, portalID pulid.ID, orderLines []*models.MutateReturnItems) int
		CreateReturnPortal                            func(childComplexity int, name string, connection pulid.ID) int
		CreateSeatGroup                               func(childComplexity int, input ent.CreateSeatGroupInput, accessRights []*ent.CreateSeatGroupAccessRightInput) int
		CreateShopifyConnection                       func(childComplexity int, input ent.CreateConnectionShopifyInput, inputConnection ent.CreateConnectionInput) int
		CreateUserSeat                                func(childComplexity int, input ent.CreateUserInput) int
		CreateVariant                                 func(childComplexity int, productID pulid.ID, input *ent.CreateProductVariantInput) int
		CreateWorkstation                             func(childComplexity int, input ent.CreateWorkstationInput) int
		DebugUpdateLabelIDs                           func(childComplexity int, parcelID pulid.ID, itemID string) int
		DeleteAPIToken                                func(childComplexity int, id pulid.ID) int
		DeleteColli                                   func(childComplexity int, colliID pulid.ID) int
		DeleteDeliveryRule                            func(childComplexity int, deliveryRuleID pulid.ID) int
		DeleteDeliveryRuleConstraintGroupConstraints  func(childComplexity int, deliveryGroupID pulid.ID) int
		DeleteProductImage                            func(childComplexity int, imageID pulid.ID) int
		DeleteTag                                     func(childComplexity int, id pulid.ID) int
		DeliveryOptionArchive                         func(childComplexity int, deliveryOptionID pulid.ID) int
		DuplicateColli                                func(childComplexity int, fromColliID pulid.ID) int
		MarkColliDeleted                              func(childComplexity int, returnColliID pulid.ID) int
		MoveOrderLine                                 func(childComplexity int, orderLineID pulid.ID, colliID pulid.ID) int
		MustInventory                                 func(childComplexity int, productVariantID pulid.ID) int
		ReplaceDeliveryRuleConstraintGroupConstraints func(childComplexity int, deliveryGroupID pulid.ID, logicType deliveryruleconstraintgroup.ConstraintLogic, input []*ent.CreateDeliveryRuleConstraintInput) int
		ReplaceDeliveryRuleCountries                  func(childComplexity int, ruleID pulid.ID, countries []pulid.ID) int
		ReplaceInterestedCarriersPlatforms            func(childComplexity int, userID pulid.ID, inputCarriers []pulid.ID, inputPlatforms []pulid.ID) int
		ReplaceSeatGroup                              func(childComplexity int, id pulid.ID, input ent.UpdateSeatGroupInput, accessRights []*ent.CreateSeatGroupAccessRightInput) int
		ReplaceSignupOptions                          func(childComplexity int, userID pulid.ID, input ent.CreateSignupOptionsInput) int
		SaveSelectedWorkstation                       func(childComplexity int, id pulid.ID, pickupDay user.PickupDay) int
		ToggleNotification                            func(childComplexity int, notificationID pulid.ID, checked bool) int
		UpdateAPIToken                                func(childComplexity int, id pulid.ID, name string) int
		UpdateCarrierAgreementBring                   func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierBringInput) int
		UpdateCarrierAgreementDao                     func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierDAOInput) int
		UpdateCarrierAgreementDf                      func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierDFInput) int
		UpdateCarrierAgreementDsv                     func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierDSVInput) int
		UpdateCarrierAgreementEasyPost                func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierEasyPostInput) int
		UpdateCarrierAgreementGls                     func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierGLSInput) int
		UpdateCarrierAgreementPostNord                func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierPostNordInput) int
		UpdateCarrierAgreementUsps                    func(childComplexity int, id pulid.ID, name string, input ent.UpdateCarrierUSPSInput) int
		UpdateColli                                   func(childComplexity int, id pulid.ID, input ent.UpdateColliInput, deliveryOptionID *pulid.ID, deliveryPointID *pulid.ID, ccLocationID *pulid.ID, packagingID *pulid.ID, recipientAddressID pulid.ID, recipientAddress ent.UpdateAddressInput, senderAddressID pulid.ID, senderAddress ent.UpdateAddressInput, updateExistingRecipient *bool, products []*utils.ProductVariantQuantity, removeProducts []pulid.ID) int
		UpdateCompanyInfo                             func(childComplexity int, input ent.UpdateTenantInput, defaultLanguage pulid.ID, adminContact ent.CreateContactInput, billingContact ent.CreateContactInput, address ent.CreateAddressInput) int
		UpdateConsolidation                           func(childComplexity int, id pulid.ID, input ent.UpdateConsolidationInput, sender *ent.CreateAddressInput, recipient *ent.CreateAddressInput, inputPallets []*models.CreateOrUpdatePallet) int
		UpdateDeliveryOptionBring                     func(childComplexity int, id pulid.ID, input ent.UpdateDeliveryOptionBringInput, inputDeliveryOption ent.UpdateDeliveryOptionInput) int
		UpdateDeliveryOptionDao                       func(childComplexity int, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) int
		UpdateDeliveryOptionDf                        func(childComplexity int, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) int
		UpdateDeliveryOptionDsv                       func(childComplexity int, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) int
		UpdateDeliveryOptionEasyPost                  func(childComplexity int, id pulid.ID, input ent.UpdateDeliveryOptionEasyPostInput, inputDeliveryOption ent.UpdateDeliveryOptionInput) int
		UpdateDeliveryOptionGls                       func(childComplexity int, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) int
		UpdateDeliveryOptionPostNord                  func(childComplexity int, id pulid.ID, input ent.UpdateDeliveryOptionPostNordInput, inputDeliveryOption ent.UpdateDeliveryOptionInput, inputAdditionalServices []string) int
		UpdateDeliveryOptionSortOrder                 func(childComplexity int, newOrder []pulid.ID) int
		UpdateDeliveryOptionUsps                      func(childComplexity int, id pulid.ID, input ent.UpdateDeliveryOptionUSPSInput, inputDeliveryOption ent.UpdateDeliveryOptionInput, inputAdditionalServices []pulid.ID) int
		UpdateDeliveryRule                            func(childComplexity int, deliveryRuleID pulid.ID, val ent.UpdateDeliveryRuleInput) int
		UpdateDocument                                func(childComplexity int, id pulid.ID, input ent.UpdateDocumentInput) int
		UpdateEmailTemplate                           func(childComplexity int, id pulid.ID, input ent.UpdateEmailTemplateInput) int
		UpdateHypothesisTestDeliveryOption            func(childComplexity int, id pulid.ID, input ent.UpdateHypothesisTestInput, inputDeliveryOption ent.UpdateHypothesisTestDeliveryOptionInput) int
		UpdateInventory                               func(childComplexity int, iventoryItemID pulid.ID, input ent.UpdateInventoryItemInput) int
		UpdateLocation                                func(childComplexity int, id pulid.ID, input ent.UpdateLocationInput, inputAddress ent.UpdateAddressInput) int
		UpdateOrder                                   func(childComplexity int, id pulid.ID, input ent.UpdateOrderInput) int
		UpdatePackaging                               func(childComplexity int, input ent.UpdatePackagingInput, inputPackagingUsps *ent.UpdatePackagingUSPSInput, inputPackagingDf *ent.CreatePackagingDFInput) int
		UpdatePlan                                    func(childComplexity int, planID pulid.ID) int
		UpdateProduct                                 func(childComplexity int, id pulid.ID, input ent.UpdateProductInput, variants []*models.UpdateProductVariantIDInput, images []*models.ProductVariantImageInput) int
		UpdateReturnColliStatus                       func(childComplexity int, returnColliID pulid.ID, status returncolli.Status) int
		UpdateReturnPortal                            func(childComplexity int, id pulid.ID, input ent.UpdateReturnPortalInput, inputClaims []*models.MutateReturnPortalClaim) int
		UpdateShopifyConnection                       func(childComplexity int, id pulid.ID, input ent.UpdateConnectionShopifyInput, inputConnection ent.UpdateConnectionInput) int
		UpdateUser                                    func(childComplexity int, input ent.UpdateUserInput, newTenantID *pulid.ID) int
		UpdateUserPassword                            func(childComplexity int, id pulid.ID, input string) int
		UpdateUserSeat                                func(childComplexity int, id pulid.ID, input ent.UpdateUserInput) int
		UpdateWorkstation                             func(childComplexity int, id pulid.ID, input ent.UpdateWorkstationInput) int
		UploadProductImage                            func(childComplexity int, productID pulid.ID, image string) int
	}

	Notification struct {
		Active        func(childComplexity int) int
		Connection    func(childComplexity int) int
		EmailTemplate func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
	}

	NotificationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	NotificationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OTKRequests struct {
		ID       func(childComplexity int) int
		Otk      func(childComplexity int) int
		Tenant   func(childComplexity int) int
		TenantID func(childComplexity int) int
		Users    func(childComplexity int) int
	}

	Order struct {
		Colli                               func(childComplexity int) int
		CommentExternal                     func(childComplexity int) int
		CommentInternal                     func(childComplexity int) int
		Connection                          func(childComplexity int) int
		Consolidation                       func(childComplexity int) int
		CreatedAt                           func(childComplexity int) int
		EmailSyncConfirmationAt             func(childComplexity int) int
		ExternalID                          func(childComplexity int) int
		HypothesisTestDeliveryOptionRequest func(childComplexity int) int
		ID                                  func(childComplexity int) int
		OrderHistory                        func(childComplexity int) int
		OrderPublicID                       func(childComplexity int) int
		Pallet                              func(childComplexity int) int
		ReturnColli                         func(childComplexity int) int
		Status                              func(childComplexity int) int
		Tenant                              func(childComplexity int) int
		TenantID                            func(childComplexity int) int
	}

	OrderConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrderHistory struct {
		ChangeHistory func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Order         func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	OrderLine struct {
		Colli                    func(childComplexity int) int
		ColliID                  func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		Currency                 func(childComplexity int) int
		DiscountAllocationAmount func(childComplexity int) int
		ExternalID               func(childComplexity int) int
		ID                       func(childComplexity int) int
		ProductVariant           func(childComplexity int) int
		ProductVariantID         func(childComplexity int) int
		ReturnOrderLine          func(childComplexity int) int
		Tenant                   func(childComplexity int) int
		TenantID                 func(childComplexity int) int
		UnitPrice                func(childComplexity int) int
		Units                    func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
	}

	OrderSender struct {
		Email       func(childComplexity int) int
		FirstName   func(childComplexity int) int
		ID          func(childComplexity int) int
		LastName    func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Tenant      func(childComplexity int) int
		TenantID    func(childComplexity int) int
		VatNumber   func(childComplexity int) int
	}

	OrderSenderConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OrderSenderEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	OrderShipmentStatus struct {
		MayShipRemaining func(childComplexity int) int
		ShipmentStatuses func(childComplexity int) int
	}

	Packaging struct {
		ArchivedAt     func(childComplexity int) int
		CarrierBrand   func(childComplexity int) int
		Colli          func(childComplexity int) int
		DeliveryOption func(childComplexity int) int
		HeightCm       func(childComplexity int) int
		ID             func(childComplexity int) int
		LengthCm       func(childComplexity int) int
		Name           func(childComplexity int) int
		PackagingDF    func(childComplexity int) int
		PackagingUSPS  func(childComplexity int) int
		Pallet         func(childComplexity int) int
		ReturnColli    func(childComplexity int) int
		ShipmentParcel func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
		WidthCm        func(childComplexity int) int
	}

	PackagingConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PackagingDF struct {
		APIType   func(childComplexity int) int
		ID        func(childComplexity int) int
		MaxWeight func(childComplexity int) int
		MinWeight func(childComplexity int) int
		Packaging func(childComplexity int) int
		Stackable func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
	}

	PackagingDFConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PackagingDFEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PackagingEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PackagingUSPS struct {
		ID                              func(childComplexity int) int
		Packaging                       func(childComplexity int) int
		PackagingUSPSProcessingCategory func(childComplexity int) int
		PackagingUSPSRateIndicator      func(childComplexity int) int
		Tenant                          func(childComplexity int) int
		TenantID                        func(childComplexity int) int
	}

	PackagingUSPSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PackagingUSPSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PackagingUSPSProcessingCategory struct {
		ID                 func(childComplexity int) int
		Name               func(childComplexity int) int
		ProcessingCategory func(childComplexity int) int
	}

	PackagingUSPSProcessingCategoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PackagingUSPSProcessingCategoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PackagingUSPSRateIndicator struct {
		Code          func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		PackagingUSPS func(childComplexity int) int
	}

	PackagingUSPSRateIndicatorConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PackagingUSPSRateIndicatorEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PackingSlipsOutput struct {
		AllPackingSlips func(childComplexity int) int
		PackingSlips    func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Pallet struct {
		CancelledShipmentPallet func(childComplexity int) int
		Consolidation           func(childComplexity int) int
		Description             func(childComplexity int) int
		ID                      func(childComplexity int) int
		Orders                  func(childComplexity int) int
		Packaging               func(childComplexity int) int
		PublicID                func(childComplexity int) int
		ShipmentPallet          func(childComplexity int) int
		Tenant                  func(childComplexity int) int
		TenantID                func(childComplexity int) int
	}

	PalletConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PalletEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ParcelShop struct {
		Address             func(childComplexity int) int
		BusinessHoursPeriod func(childComplexity int) int
		CarrierBrand        func(childComplexity int) int
		Colli               func(childComplexity int) int
		ID                  func(childComplexity int) int
		LastUpdated         func(childComplexity int) int
		Name                func(childComplexity int) int
		ParcelShopBring     func(childComplexity int) int
		ParcelShopDAO       func(childComplexity int) int
		ParcelShopGLS       func(childComplexity int) int
		ParcelShopPostNord  func(childComplexity int) int
	}

	ParcelShopBring struct {
		AddressDelivery func(childComplexity int) int
		BringID         func(childComplexity int) int
		ID              func(childComplexity int) int
		ParcelShop      func(childComplexity int) int
		PointType       func(childComplexity int) int
	}

	ParcelShopBringConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ParcelShopBringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ParcelShopConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ParcelShopDAO struct {
		ID         func(childComplexity int) int
		ParcelShop func(childComplexity int) int
		ShopID     func(childComplexity int) int
	}

	ParcelShopDAOConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ParcelShopDAOEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ParcelShopEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ParcelShopGLS struct {
		GLSParcelShopID func(childComplexity int) int
		ID              func(childComplexity int) int
		ParcelShop      func(childComplexity int) int
		PartnerID       func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	ParcelShopGLSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ParcelShopGLSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ParcelShopPostNord struct {
		AddressDelivery func(childComplexity int) int
		ID              func(childComplexity int) int
		ParcelShop      func(childComplexity int) int
		Pudoid          func(childComplexity int) int
		ServicePointID  func(childComplexity int) int
		TypeID          func(childComplexity int) int
	}

	ParcelShopPostNordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ParcelShopPostNordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ParcelStatuses struct {
		CcSignatures func(childComplexity int) int
		ColliID      func(childComplexity int) int
		ShipmentID   func(childComplexity int) int
	}

	Plan struct {
		CreatedAt       func(childComplexity int) int
		ID              func(childComplexity int) int
		Label           func(childComplexity int) int
		PlanHistoryPlan func(childComplexity int) int
		PriceDkk        func(childComplexity int) int
		Rank            func(childComplexity int) int
		Tenant          func(childComplexity int) int
	}

	PlanConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PlanEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PlanHistory struct {
		ChangeHistory func(childComplexity int) int
		ChangedBy     func(childComplexity int) int
		ChangedFrom   func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
	}

	PrintJob struct {
		Base64PrintData func(childComplexity int) int
		Colli           func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		DocumentType    func(childComplexity int) int
		FileExtension   func(childComplexity int) int
		ID              func(childComplexity int) int
		Printer         func(childComplexity int) int
		PrinterMessages func(childComplexity int) int
		ShipmentParcel  func(childComplexity int) int
		Status          func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
	}

	Printer struct {
		CreatedAt   func(childComplexity int) int
		DeviceID    func(childComplexity int) int
		Document    func(childComplexity int) int
		ID          func(childComplexity int) int
		LabelPdf    func(childComplexity int) int
		LabelPng    func(childComplexity int) int
		LabelZpl    func(childComplexity int) int
		LastPing    func(childComplexity int) int
		Name        func(childComplexity int) int
		PrintJobs   func(childComplexity int) int
		PrintSize   func(childComplexity int) int
		Rotate180   func(childComplexity int) int
		Tenant      func(childComplexity int) int
		TenantID    func(childComplexity int) int
		UseShell    func(childComplexity int) int
		Workstation func(childComplexity int) int
	}

	PrinterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PrinterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Product struct {
		BodyHTML       func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ExternalID     func(childComplexity int) int
		ID             func(childComplexity int) int
		ProductImage   func(childComplexity int) int
		ProductTags    func(childComplexity int) int
		ProductVariant func(childComplexity int) int
		Status         func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
		Title          func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	ProductConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductImage struct {
		ExternalID     func(childComplexity int) int
		ID             func(childComplexity int) int
		Product        func(childComplexity int) int
		ProductVariant func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
		URL            func(childComplexity int) int
	}

	ProductImageConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductImageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductTag struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Products  func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
	}

	ProductTagConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductTagEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ProductVariant struct {
		Archived        func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Description     func(childComplexity int) int
		DimensionHeight func(childComplexity int) int
		DimensionLength func(childComplexity int) int
		DimensionWidth  func(childComplexity int) int
		EanNumber       func(childComplexity int) int
		ExternalID      func(childComplexity int) int
		ID              func(childComplexity int) int
		InventoryItem   func(childComplexity int) int
		OrderLines      func(childComplexity int) int
		Product         func(childComplexity int) int
		ProductImage    func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		WeightG         func(childComplexity int) int
	}

	ProductVariantConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ProductVariantEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		APITokens                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.APITokenWhereInput) int
		AccessRights                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.AccessRightWhereInput) int
		AddReturnDeliveryOption              func(childComplexity int, deliveryOptions []*models.MutateReturnDeliveryOption) int
		AddressGlobals                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.AddressGlobalWhereInput) int
		Addresses                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.AddressWhereInput) int
		AllLocationsIn                       func(childComplexity int, country *pulid.ID) int
		AvailableAdditionalServicesPostNord  func(childComplexity int, carrierServiceID pulid.ID) int
		AvailableAdditionalServicesUsps      func(childComplexity int, carrierServiceID pulid.ID) int
		AvailableDeliveryPoints              func(childComplexity int, deliveryOptionID *pulid.ID, address *ent.CreateAddressInput) int
		AvailableTenants                     func(childComplexity int) int
		BuildInfo                            func(childComplexity int) int
		BusinessHoursPeriods                 func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.BusinessHoursPeriodWhereInput) int
		Carrier                              func(childComplexity int, id *pulid.ID) int
		CarrierAdditionalServiceBrings       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceBringWhereInput) int
		CarrierAdditionalServiceDaOs         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceDAOWhereInput) int
		CarrierAdditionalServiceDfs          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceDFWhereInput) int
		CarrierAdditionalServiceDsVs         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceDSVWhereInput) int
		CarrierAdditionalServiceEasyPosts    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceEasyPostWhereInput) int
		CarrierAdditionalServiceGlSs         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceGLSWhereInput) int
		CarrierAdditionalServicePostNords    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServicePostNordWhereInput) int
		CarrierAdditionalServiceUspSs        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceUSPSWhereInput) int
		CarrierBrands                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierBrandWhereInput) int
		CarrierBrings                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierBringWhereInput) int
		CarrierDaOs                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierDAOWhereInput) int
		CarrierDfs                           func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierDFWhereInput) int
		CarrierDsVs                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierDSVWhereInput) int
		CarrierEasyPosts                     func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierEasyPostWhereInput) int
		CarrierGlSs                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierGLSWhereInput) int
		CarrierGls                           func(childComplexity int, id pulid.ID) int
		CarrierPostNord                      func(childComplexity int, id pulid.ID) int
		CarrierPostNords                     func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierPostNordWhereInput) int
		CarrierServiceBrings                 func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceBringWhereInput) int
		CarrierServiceDaOs                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceDAOWhereInput) int
		CarrierServiceDfs                    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceDFWhereInput) int
		CarrierServiceDsVs                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceDSVWhereInput) int
		CarrierServiceEasyPosts              func(childComplexity int) int
		CarrierServiceGlSs                   func(childComplexity int) int
		CarrierServicePostNords              func(childComplexity int) int
		CarrierServices                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceWhereInput) int
		CarrierUspSs                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierUSPSWhereInput) int
		CarrierUsps                          func(childComplexity int, id pulid.ID) int
		Carriers                             func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierWhereInput) int
		ChangeHistories                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ChangeHistoryOrder, where *ent.ChangeHistoryWhereInput) int
		ClickCollectLocation                 func(childComplexity int, colliID pulid.ID) int
		Colli                                func(childComplexity int, id *pulid.ID) int
		Collis                               func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ColliWhereInput) int
		ConnectOptionCarriers                func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectOptionCarrierWhereInput) int
		ConnectOptionPlatforms               func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectOptionPlatformWhereInput) int
		Connection                           func(childComplexity int, id *pulid.ID) int
		ConnectionBrands                     func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectionBrandWhereInput) int
		ConnectionList                       func(childComplexity int) int
		ConnectionLookups                    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ConnectionLookupOrder, where *ent.ConnectionLookupWhereInput) int
		ConnectionShopifies                  func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectionShopifyWhereInput) int
		ConnectionShopify                    func(childComplexity int, id pulid.ID) int
		Connections                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectionWhereInput) int
		Consolidation                        func(childComplexity int, id pulid.ID) int
		ConsolidationShipments               func(childComplexity int, consolidationID pulid.ID) int
		Consolidations                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ConsolidationOrder, where *ent.ConsolidationWhereInput) int
		ConstraintGroup                      func(childComplexity int, id pulid.ID) int
		Constraints                          func(childComplexity int, groupID pulid.ID) int
		Contacts                             func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ContactWhereInput) int
		Countries                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CountryWhereInput) int
		Country                              func(childComplexity int, id pulid.ID) int
		CountryHarmonizedCodes               func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CountryHarmonizedCodeWhereInput) int
		CreateConsolidationShipment          func(childComplexity int, consolidationID pulid.ID, prebook bool) int
		CreateLabelsPrintJob                 func(childComplexity int, colliIDs []pulid.ID) int
		CreatePackingListPrintJob            func(childComplexity int, colliIDs []pulid.ID) int
		CreateShipments                      func(childComplexity int, orderID pulid.ID, packageIDs []pulid.ID) int
		Currencies                           func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CurrencyWhereInput) int
		DashboardTiles                       func(childComplexity int) int
		DeliveryOptionBring                  func(childComplexity int, id pulid.ID) int
		DeliveryOptionBrings                 func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionBringWhereInput) int
		DeliveryOptionDaOs                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionDAOWhereInput) int
		DeliveryOptionDao                    func(childComplexity int, id pulid.ID) int
		DeliveryOptionDf                     func(childComplexity int, id pulid.ID) int
		DeliveryOptionDfs                    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionDFWhereInput) int
		DeliveryOptionDsVs                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionDSVWhereInput) int
		DeliveryOptionDsv                    func(childComplexity int, id pulid.ID) int
		DeliveryOptionEasyPost               func(childComplexity int, id pulid.ID) int
		DeliveryOptionEasyPosts              func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionEasyPostWhereInput) int
		DeliveryOptionGlSs                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionGLSWhereInput) int
		DeliveryOptionGls                    func(childComplexity int, id pulid.ID) int
		DeliveryOptionPostNord               func(childComplexity int, deliveryOptionID pulid.ID) int
		DeliveryOptionPostNords              func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionPostNordWhereInput) int
		DeliveryOptionUspSs                  func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionUSPSWhereInput) int
		DeliveryOptionUsps                   func(childComplexity int, deliveryOptionID pulid.ID) int
		DeliveryOptions                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionWhereInput) int
		DeliveryOptionsFiltered              func(childComplexity int, showArchived bool) int
		DeliveryOptionsList                  func(childComplexity int, orderInfo deliveryoptions.DeliveryOptionSeedInput) int
		DeliveryPoint                        func(childComplexity int, colliID pulid.ID) int
		DeliveryRuleConstraintGroups         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryRuleConstraintGroupWhereInput) int
		DeliveryRuleConstraints              func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryRuleConstraintWhereInput) int
		DeliveryRules                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryRuleWhereInput) int
		DevicePing                           func(childComplexity int, token string) int
		Document                             func(childComplexity int, id pulid.ID) int
		DocumentDownload                     func(childComplexity int, id pulid.ID) int
		DocumentFiles                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DocumentFileWhereInput) int
		Documents                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DocumentWhereInput) int
		EmailTemplate                        func(childComplexity int, id pulid.ID) int
		EmailTemplates                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.EmailTemplateWhereInput) int
		FilteredWorkstations                 func(childComplexity int, showArchived bool) int
		HistoryLogs                          func(childComplexity int) int
		HypothesisTest                       func(childComplexity int, id pulid.ID) int
		HypothesisTestDeliveryOptionLookups  func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestDeliveryOptionLookupWhereInput) int
		HypothesisTestDeliveryOptionRequests func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestDeliveryOptionRequestWhereInput) int
		HypothesisTestDeliveryOptions        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestDeliveryOptionWhereInput) int
		HypothesisTestResultsDashboard       func(childComplexity int) int
		HypothesisTests                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestWhereInput) int
		InventoryItems                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.InventoryItemWhereInput) int
		Languages                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.LanguageWhereInput) int
		Location                             func(childComplexity int, id pulid.ID) int
		LocationTags                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.LocationTagWhereInput) int
		Locations                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.LocationWhereInput) int
		MyAPITokens                          func(childComplexity int) int
		Node                                 func(childComplexity int, id pulid.ID) int
		Nodes                                func(childComplexity int, ids []pulid.ID) int
		Notifications                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.NotificationWhereInput) int
		Order                                func(childComplexity int, id *pulid.ID) int
		OrderSenders                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.OrderSenderWhereInput) int
		OrderShipments                       func(childComplexity int, orderID pulid.ID) int
		OrderTimeline                        func(childComplexity int, orderID pulid.ID) int
		Orders                               func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.OrderOrder, where *ent.OrderWhereInput) int
		PackagingDfs                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingDFWhereInput) int
		PackagingFiltered                    func(childComplexity int, showArchived bool) int
		PackagingUSPSProcessingCategories    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingUSPSProcessingCategoryWhereInput) int
		PackagingUSPSRateIndicators          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingUSPSRateIndicatorWhereInput) int
		PackagingUspSs                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingUSPSWhereInput) int
		Packagings                           func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingWhereInput) int
		PackingSlips                         func(childComplexity int, colliIDs []pulid.ID) int
		PackingSlipsByOrder                  func(childComplexity int, orderIDs []pulid.ID) int
		PackingSlipsClearCache               func(childComplexity int, orderIDs []pulid.ID) int
		Pallets                              func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PalletWhereInput) int
		ParcelShopBrings                     func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopBringWhereInput) int
		ParcelShopDaOs                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopDAOWhereInput) int
		ParcelShopGlSs                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopGLSWhereInput) int
		ParcelShopPostNords                  func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopPostNordWhereInput) int
		ParcelShops                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopWhereInput) int
		Plans                                func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PlanWhereInput) int
		Printers                             func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PrinterWhereInput) int
		Product                              func(childComplexity int, id pulid.ID) int
		ProductImages                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductImageWhereInput) int
		ProductTags                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductTagWhereInput) int
		ProductVariants                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductVariantWhereInput) int
		Products                             func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductWhereInput) int
		RateRequests                         func(childComplexity int) int
		ReturnClaimsByOrder                  func(childComplexity int, orderID pulid.ID) int
		ReturnColli                          func(childComplexity int, orderID pulid.ID) int
		ReturnColliHistories                 func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnColliHistoryWhereInput) int
		ReturnCollis                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ReturnColliOrder, where *ent.ReturnColliWhereInput) int
		ReturnDeliveryOptions                func(childComplexity int, returnColliIDs []pulid.ID) int
		ReturnOrderLines                     func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnOrderLineWhereInput) int
		ReturnPortal                         func(childComplexity int, id pulid.ID) int
		ReturnPortalClaims                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnPortalClaimWhereInput) int
		ReturnPortals                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnPortalWhereInput) int
		Search                               func(childComplexity int, term string, filter []models.EntityType) int
		SeatGroup                            func(childComplexity int, id pulid.ID) int
		SeatGroupAccessRights                func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SeatGroupAccessRightWhereInput) int
		SeatGroups                           func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SeatGroupWhereInput) int
		SelectedWorkstation                  func(childComplexity int) int
		SendOverviewEmail                    func(childComplexity int, to string, emailTpl pulid.ID, where ent.ShipmentWhereInput) int
		SendTestEmail                        func(childComplexity int, id pulid.ID, toEmail string) int
		Shipment                             func(childComplexity int, id pulid.ID) int
		ShipmentBrings                       func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentBringWhereInput) int
		ShipmentDaOs                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentDAOWhereInput) int
		ShipmentDfs                          func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentDFWhereInput) int
		ShipmentDsVs                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentDSVWhereInput) int
		ShipmentEasyPosts                    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentEasyPostWhereInput) int
		ShipmentGlSs                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentGLSWhereInput) int
		ShipmentLabels                       func(childComplexity int, colliIDs []pulid.ID) int
		ShipmentPallets                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentPalletWhereInput) int
		ShipmentParcels                      func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ShipmentParcelOrder, where *ent.ShipmentParcelWhereInput) int
		ShipmentPostNords                    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentPostNordWhereInput) int
		ShipmentUspSs                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentUSPSWhereInput) int
		Shipments                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ShipmentOrder, where *ent.ShipmentWhereInput) int
		ShipmentsList                        func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentWhereInput) int
		SignupOptionsSlice                   func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SignupOptionsWhereInput) int
		SystemEventsSlice                    func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SystemEventsWhereInput) int
		Tenant                               func(childComplexity int, id *pulid.ID) int
		Tenants                              func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.TenantWhereInput) int
		TrailingProductUpdates               func(childComplexity int) int
		UnassignedDeliveryOptions            func(childComplexity int, hypothesisTestID pulid.ID) int
		User                                 func(childComplexity int, id *pulid.ID) int
		UserSeats                            func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.UserSeatWhereInput) int
		Users                                func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.UserWhereInput) int
		Workstation                          func(childComplexity int, id pulid.ID) int
		Workstations                         func(childComplexity int, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.WorkstationWhereInput) int
	}

	RateRequest struct {
		Date        func(childComplexity int) int
		Error       func(childComplexity int) int
		OptionCount func(childComplexity int) int
		Req         func(childComplexity int) int
	}

	RateRequests struct {
		Requests      func(childComplexity int) int
		RequestsError func(childComplexity int) int
	}

	ReturnColli struct {
		Comment                 func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		DeliveryOption          func(childComplexity int) int
		EmailAccepted           func(childComplexity int) int
		EmailConfirmationLabel  func(childComplexity int) int
		EmailConfirmationQrCode func(childComplexity int) int
		EmailReceived           func(childComplexity int) int
		ExpectedAt              func(childComplexity int) int
		ID                      func(childComplexity int) int
		LabelPdf                func(childComplexity int) int
		LabelPng                func(childComplexity int) int
		Order                   func(childComplexity int) int
		Packaging               func(childComplexity int) int
		QrCodePng               func(childComplexity int) int
		Recipient               func(childComplexity int) int
		ReturnColliHistory      func(childComplexity int) int
		ReturnOrderLine         func(childComplexity int) int
		ReturnPortal            func(childComplexity int) int
		Sender                  func(childComplexity int) int
		Status                  func(childComplexity int) int
		Tenant                  func(childComplexity int) int
		TenantID                func(childComplexity int) int
	}

	ReturnColliConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReturnColliEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReturnColliEdit struct {
		Collis func(childComplexity int) int
		Order  func(childComplexity int) int
	}

	ReturnColliHistory struct {
		ChangeHistory func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		ReturnColli   func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	ReturnColliHistoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReturnColliHistoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReturnColliTimeline struct {
		Colli    func(childComplexity int) int
		Timeline func(childComplexity int) int
	}

	ReturnOrderLine struct {
		ID                func(childComplexity int) int
		OrderLine         func(childComplexity int) int
		ReturnColli       func(childComplexity int) int
		ReturnPortalClaim func(childComplexity int) int
		Tenant            func(childComplexity int) int
		TenantID          func(childComplexity int) int
		Units             func(childComplexity int) int
	}

	ReturnOrderLineConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReturnOrderLineEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReturnPortal struct {
		AutomaticallyAccept     func(childComplexity int) int
		Connection              func(childComplexity int) int
		DeliveryOptions         func(childComplexity int) int
		EmailAccepted           func(childComplexity int) int
		EmailConfirmationLabel  func(childComplexity int) int
		EmailConfirmationQrCode func(childComplexity int) int
		EmailReceived           func(childComplexity int) int
		ID                      func(childComplexity int) int
		Name                    func(childComplexity int) int
		ReturnColli             func(childComplexity int) int
		ReturnLocation          func(childComplexity int) int
		ReturnOpenHours         func(childComplexity int) int
		ReturnPortalClaim       func(childComplexity int) int
		Tenant                  func(childComplexity int) int
		TenantID                func(childComplexity int) int
	}

	ReturnPortalClaim struct {
		Archived        func(childComplexity int) int
		Description     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Restockable     func(childComplexity int) int
		ReturnLocation  func(childComplexity int) int
		ReturnOrderLine func(childComplexity int) int
		ReturnPortal    func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
	}

	ReturnPortalClaimConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReturnPortalClaimEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ReturnPortalConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ReturnPortalEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SearchResult struct {
		Entity    func(childComplexity int) int
		ID        func(childComplexity int) int
		ImagePath func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	SeatGroup struct {
		AssignedAccessRight  func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		SeatGroupAccessRight func(childComplexity int) int
		Tenant               func(childComplexity int) int
		TenantID             func(childComplexity int) int
		User                 func(childComplexity int) int
	}

	SeatGroupAccessRight struct {
		AccessRight   func(childComplexity int) int
		AccessRightID func(childComplexity int) int
		ID            func(childComplexity int) int
		Level         func(childComplexity int) int
		SeatGroup     func(childComplexity int) int
		SeatGroupID   func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
	}

	SeatGroupAccessRightConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SeatGroupAccessRightEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SeatGroupConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SeatGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SelectedWorkstation struct {
		Jobs          func(childComplexity int) int
		LimitExceeded func(childComplexity int) int
		Workstation   func(childComplexity int) int
	}

	Shipment struct {
		Carrier          func(childComplexity int) int
		Consolidation    func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		ID               func(childComplexity int) int
		OldConsolidation func(childComplexity int) int
		ShipmentBring    func(childComplexity int) int
		ShipmentDAO      func(childComplexity int) int
		ShipmentDF       func(childComplexity int) int
		ShipmentDSV      func(childComplexity int) int
		ShipmentEasyPost func(childComplexity int) int
		ShipmentGLS      func(childComplexity int) int
		ShipmentHistory  func(childComplexity int) int
		ShipmentPallet   func(childComplexity int) int
		ShipmentParcel   func(childComplexity int) int
		ShipmentPostNord func(childComplexity int) int
		ShipmentPublicID func(childComplexity int) int
		ShipmentUSPS     func(childComplexity int) int
		Status           func(childComplexity int) int
		Tenant           func(childComplexity int) int
		TenantID         func(childComplexity int) int
	}

	ShipmentBring struct {
		ConsignmentNumber func(childComplexity int) int
		ID                func(childComplexity int) int
		Shipment          func(childComplexity int) int
		Tenant            func(childComplexity int) int
		TenantID          func(childComplexity int) int
	}

	ShipmentBringConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentBringEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentDAO struct {
		BarcodeID func(childComplexity int) int
		ID        func(childComplexity int) int
		Shipment  func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
	}

	ShipmentDAOConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentDAOEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentDF struct {
		ID       func(childComplexity int) int
		Shipment func(childComplexity int) int
		Tenant   func(childComplexity int) int
		TenantID func(childComplexity int) int
	}

	ShipmentDFConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentDFEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentDSV struct {
		BarcodeID func(childComplexity int) int
		ID        func(childComplexity int) int
		Shipment  func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
	}

	ShipmentDSVConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentDSVEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentEasyPost struct {
		EpShipmentID    func(childComplexity int) int
		EstDeliveryDate func(childComplexity int) int
		ID              func(childComplexity int) int
		Rate            func(childComplexity int) int
		Shipment        func(childComplexity int) int
		Tenant          func(childComplexity int) int
		TenantID        func(childComplexity int) int
		TrackingNumber  func(childComplexity int) int
	}

	ShipmentEasyPostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentEasyPostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentGLS struct {
		ConsignmentID func(childComplexity int) int
		ID            func(childComplexity int) int
		Shipment      func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
	}

	ShipmentGLSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentGLSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentHistory struct {
		ChangeHistory func(childComplexity int) int
		ID            func(childComplexity int) int
		Shipment      func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	ShipmentLabelsResponse struct {
		AllLabels func(childComplexity int) int
		LabelsPDF func(childComplexity int) int
	}

	ShipmentListItem struct {
		DeliveryOption func(childComplexity int) int
		ID             func(childComplexity int) int
		OrderIDDisplay func(childComplexity int) int
		Recipient      func(childComplexity int) int
		Sender         func(childComplexity int) int
		Shipment       func(childComplexity int) int
	}

	ShipmentPallet struct {
		Barcode     func(childComplexity int) int
		CarrierID   func(childComplexity int) int
		ColliNumber func(childComplexity int) int
		ID          func(childComplexity int) int
		LabelPdf    func(childComplexity int) int
		LabelZpl    func(childComplexity int) int
		OldPallet   func(childComplexity int) int
		Pallet      func(childComplexity int) int
		Shipment    func(childComplexity int) int
		Status      func(childComplexity int) int
		Tenant      func(childComplexity int) int
		TenantID    func(childComplexity int) int
	}

	ShipmentPalletConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentPalletEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentParcel struct {
		CancelSyncedAt        func(childComplexity int) int
		CcPickupSignatureUrls func(childComplexity int) int
		Colli                 func(childComplexity int) int
		DocumentFile          func(childComplexity int) int
		ExpectedAt            func(childComplexity int) int
		FulfillmentSyncedAt   func(childComplexity int) int
		ID                    func(childComplexity int) int
		ItemID                func(childComplexity int) int
		OldColli              func(childComplexity int) int
		Packaging             func(childComplexity int) int
		PrintJob              func(childComplexity int) int
		Shipment              func(childComplexity int) int
		Status                func(childComplexity int) int
		Tenant                func(childComplexity int) int
		TenantID              func(childComplexity int) int
		WorkspaceRecentScan   func(childComplexity int) int
	}

	ShipmentParcelConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentParcelEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentPostNord struct {
		BookingID           func(childComplexity int) int
		ID                  func(childComplexity int) int
		ItemID              func(childComplexity int) int
		Shipment            func(childComplexity int) int
		ShipmentReferenceNo func(childComplexity int) int
		Tenant              func(childComplexity int) int
		TenantID            func(childComplexity int) int
	}

	ShipmentPostNordConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentPostNordEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ShipmentUSPS struct {
		ID                    func(childComplexity int) int
		Postage               func(childComplexity int) int
		ScheduledDeliveryDate func(childComplexity int) int
		Shipment              func(childComplexity int) int
		Tenant                func(childComplexity int) int
		TenantID              func(childComplexity int) int
		TrackingNumber        func(childComplexity int) int
	}

	ShipmentUSPSConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ShipmentUSPSEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SignupOptions struct {
		BetterDeliveryOptions func(childComplexity int) int
		ClickCollect          func(childComplexity int) int
		CustomDocs            func(childComplexity int) int
		EasyReturns           func(childComplexity int) int
		ID                    func(childComplexity int) int
		ImprovePickPack       func(childComplexity int) int
		NumShipments          func(childComplexity int) int
		ReducedCosts          func(childComplexity int) int
		ShippingLabel         func(childComplexity int) int
		Users                 func(childComplexity int) int
	}

	SignupOptionsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SignupOptionsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SystemEvents struct {
		CreatedAt   func(childComplexity int) int
		Data        func(childComplexity int) int
		Description func(childComplexity int) int
		EventType   func(childComplexity int) int
		EventTypeID func(childComplexity int) int
		ID          func(childComplexity int) int
		Status      func(childComplexity int) int
		Tenant      func(childComplexity int) int
		TenantID    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	SystemEventsConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	SystemEventsEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Tenant struct {
		AdminContact           func(childComplexity int) int
		BillingContact         func(childComplexity int) int
		CompanyAddress         func(childComplexity int) int
		ConnectOptionCarriers  func(childComplexity int) int
		ConnectOptionPlatforms func(childComplexity int) int
		DefaultLanguage        func(childComplexity int) int
		ID                     func(childComplexity int) int
		InvoiceReference       func(childComplexity int) int
		Name                   func(childComplexity int) int
		Plan                   func(childComplexity int) int
		VatNumber              func(childComplexity int) int
	}

	TenantConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TenantEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	User struct {
		APIToken             func(childComplexity int) int
		ArchivedAt           func(childComplexity int) int
		ChangeHistory        func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		Email                func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsAccountOwner       func(childComplexity int) int
		IsGlobalAdmin        func(childComplexity int) int
		Language             func(childComplexity int) int
		MarketingConsent     func(childComplexity int) int
		Name                 func(childComplexity int) int
		OtkRequests          func(childComplexity int) int
		PhoneNumber          func(childComplexity int) int
		PickupDay            func(childComplexity int) int
		PickupDayLastChanged func(childComplexity int) int
		PlanHistoryUser      func(childComplexity int) int
		SeatGroup            func(childComplexity int) int
		SelectedWorkstation  func(childComplexity int) int
		SignupOptions        func(childComplexity int) int
		Surname              func(childComplexity int) int
		Tenant               func(childComplexity int) int
		TenantID             func(childComplexity int) int
		WorkspaceRecentScan  func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserSeat struct {
		CreatedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Surname   func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
	}

	UserSeatConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserSeatEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	WorkspaceRecentScan struct {
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		ShipmentParcel func(childComplexity int) int
		Tenant         func(childComplexity int) int
		TenantID       func(childComplexity int) int
		User           func(childComplexity int) int
	}

	Workstation struct {
		ArchivedAt        func(childComplexity int) int
		AutoPrintReceiver func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		DeviceType        func(childComplexity int) int
		ID                func(childComplexity int) int
		LastPing          func(childComplexity int) int
		Name              func(childComplexity int) int
		Printer           func(childComplexity int) int
		SelectedUser      func(childComplexity int) int
		Status            func(childComplexity int) int
		Tenant            func(childComplexity int) int
		TenantID          func(childComplexity int) int
		User              func(childComplexity int) int
		WorkstationID     func(childComplexity int) int
	}

	WorkstationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	WorkstationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "APIToken.createdAt":
		if e.complexity.APIToken.CreatedAt == nil {
			break
		}

		return e.complexity.APIToken.CreatedAt(childComplexity), true

	case "APIToken.id":
		if e.complexity.APIToken.ID == nil {
			break
		}

		return e.complexity.APIToken.ID(childComplexity), true

	case "APIToken.lastUsed":
		if e.complexity.APIToken.LastUsed == nil {
			break
		}

		return e.complexity.APIToken.LastUsed(childComplexity), true

	case "APIToken.name":
		if e.complexity.APIToken.Name == nil {
			break
		}

		return e.complexity.APIToken.Name(childComplexity), true

	case "APIToken.tenant":
		if e.complexity.APIToken.Tenant == nil {
			break
		}

		return e.complexity.APIToken.Tenant(childComplexity), true

	case "APIToken.tenantID":
		if e.complexity.APIToken.TenantID == nil {
			break
		}

		return e.complexity.APIToken.TenantID(childComplexity), true

	case "APIToken.user":
		if e.complexity.APIToken.User == nil {
			break
		}

		return e.complexity.APIToken.User(childComplexity), true

	case "APITokenConnection.edges":
		if e.complexity.APITokenConnection.Edges == nil {
			break
		}

		return e.complexity.APITokenConnection.Edges(childComplexity), true

	case "APITokenConnection.pageInfo":
		if e.complexity.APITokenConnection.PageInfo == nil {
			break
		}

		return e.complexity.APITokenConnection.PageInfo(childComplexity), true

	case "APITokenConnection.totalCount":
		if e.complexity.APITokenConnection.TotalCount == nil {
			break
		}

		return e.complexity.APITokenConnection.TotalCount(childComplexity), true

	case "APITokenEdge.cursor":
		if e.complexity.APITokenEdge.Cursor == nil {
			break
		}

		return e.complexity.APITokenEdge.Cursor(childComplexity), true

	case "APITokenEdge.node":
		if e.complexity.APITokenEdge.Node == nil {
			break
		}

		return e.complexity.APITokenEdge.Node(childComplexity), true

	case "AccessRight.assignedAccessRight":
		if e.complexity.AccessRight.AssignedAccessRight == nil {
			break
		}

		return e.complexity.AccessRight.AssignedAccessRight(childComplexity), true

	case "AccessRight.id":
		if e.complexity.AccessRight.ID == nil {
			break
		}

		return e.complexity.AccessRight.ID(childComplexity), true

	case "AccessRight.internalID":
		if e.complexity.AccessRight.InternalID == nil {
			break
		}

		return e.complexity.AccessRight.InternalID(childComplexity), true

	case "AccessRight.label":
		if e.complexity.AccessRight.Label == nil {
			break
		}

		return e.complexity.AccessRight.Label(childComplexity), true

	case "AccessRight.seatGroupAccessRight":
		if e.complexity.AccessRight.SeatGroupAccessRight == nil {
			break
		}

		return e.complexity.AccessRight.SeatGroupAccessRight(childComplexity), true

	case "AccessRightConnection.edges":
		if e.complexity.AccessRightConnection.Edges == nil {
			break
		}

		return e.complexity.AccessRightConnection.Edges(childComplexity), true

	case "AccessRightConnection.pageInfo":
		if e.complexity.AccessRightConnection.PageInfo == nil {
			break
		}

		return e.complexity.AccessRightConnection.PageInfo(childComplexity), true

	case "AccessRightConnection.totalCount":
		if e.complexity.AccessRightConnection.TotalCount == nil {
			break
		}

		return e.complexity.AccessRightConnection.TotalCount(childComplexity), true

	case "AccessRightEdge.cursor":
		if e.complexity.AccessRightEdge.Cursor == nil {
			break
		}

		return e.complexity.AccessRightEdge.Cursor(childComplexity), true

	case "AccessRightEdge.node":
		if e.complexity.AccessRightEdge.Node == nil {
			break
		}

		return e.complexity.AccessRightEdge.Node(childComplexity), true

	case "Address.addressOne":
		if e.complexity.Address.AddressOne == nil {
			break
		}

		return e.complexity.Address.AddressOne(childComplexity), true

	case "Address.addressTwo":
		if e.complexity.Address.AddressTwo == nil {
			break
		}

		return e.complexity.Address.AddressTwo(childComplexity), true

	case "Address.city":
		if e.complexity.Address.City == nil {
			break
		}

		return e.complexity.Address.City(childComplexity), true

	case "Address.company":
		if e.complexity.Address.Company == nil {
			break
		}

		return e.complexity.Address.Company(childComplexity), true

	case "Address.companyAddress":
		if e.complexity.Address.CompanyAddress == nil {
			break
		}

		return e.complexity.Address.CompanyAddress(childComplexity), true

	case "Address.country":
		if e.complexity.Address.Country == nil {
			break
		}

		return e.complexity.Address.Country(childComplexity), true

	case "Address.email":
		if e.complexity.Address.Email == nil {
			break
		}

		return e.complexity.Address.Email(childComplexity), true

	case "Address.firstName":
		if e.complexity.Address.FirstName == nil {
			break
		}

		return e.complexity.Address.FirstName(childComplexity), true

	case "Address.id":
		if e.complexity.Address.ID == nil {
			break
		}

		return e.complexity.Address.ID(childComplexity), true

	case "Address.lastName":
		if e.complexity.Address.LastName == nil {
			break
		}

		return e.complexity.Address.LastName(childComplexity), true

	case "Address.location":
		if e.complexity.Address.Location == nil {
			break
		}

		return e.complexity.Address.Location(childComplexity), true

	case "Address.phoneNumber":
		if e.complexity.Address.PhoneNumber == nil {
			break
		}

		return e.complexity.Address.PhoneNumber(childComplexity), true

	case "Address.phoneNumber2":
		if e.complexity.Address.PhoneNumber2 == nil {
			break
		}

		return e.complexity.Address.PhoneNumber2(childComplexity), true

	case "Address.recipientColli":
		if e.complexity.Address.RecipientColli == nil {
			break
		}

		return e.complexity.Address.RecipientColli(childComplexity), true

	case "Address.recipientConsolidation":
		if e.complexity.Address.RecipientConsolidation == nil {
			break
		}

		return e.complexity.Address.RecipientConsolidation(childComplexity), true

	case "Address.returnRecipientColli":
		if e.complexity.Address.ReturnRecipientColli == nil {
			break
		}

		return e.complexity.Address.ReturnRecipientColli(childComplexity), true

	case "Address.returnSenderColli":
		if e.complexity.Address.ReturnSenderColli == nil {
			break
		}

		return e.complexity.Address.ReturnSenderColli(childComplexity), true

	case "Address.senderColli":
		if e.complexity.Address.SenderColli == nil {
			break
		}

		return e.complexity.Address.SenderColli(childComplexity), true

	case "Address.senderConsolidation":
		if e.complexity.Address.SenderConsolidation == nil {
			break
		}

		return e.complexity.Address.SenderConsolidation(childComplexity), true

	case "Address.state":
		if e.complexity.Address.State == nil {
			break
		}

		return e.complexity.Address.State(childComplexity), true

	case "Address.tenant":
		if e.complexity.Address.Tenant == nil {
			break
		}

		return e.complexity.Address.Tenant(childComplexity), true

	case "Address.tenantID":
		if e.complexity.Address.TenantID == nil {
			break
		}

		return e.complexity.Address.TenantID(childComplexity), true

	case "Address.vatNumber":
		if e.complexity.Address.VatNumber == nil {
			break
		}

		return e.complexity.Address.VatNumber(childComplexity), true

	case "Address.zip":
		if e.complexity.Address.Zip == nil {
			break
		}

		return e.complexity.Address.Zip(childComplexity), true

	case "AddressConnection.edges":
		if e.complexity.AddressConnection.Edges == nil {
			break
		}

		return e.complexity.AddressConnection.Edges(childComplexity), true

	case "AddressConnection.pageInfo":
		if e.complexity.AddressConnection.PageInfo == nil {
			break
		}

		return e.complexity.AddressConnection.PageInfo(childComplexity), true

	case "AddressConnection.totalCount":
		if e.complexity.AddressConnection.TotalCount == nil {
			break
		}

		return e.complexity.AddressConnection.TotalCount(childComplexity), true

	case "AddressEdge.cursor":
		if e.complexity.AddressEdge.Cursor == nil {
			break
		}

		return e.complexity.AddressEdge.Cursor(childComplexity), true

	case "AddressEdge.node":
		if e.complexity.AddressEdge.Node == nil {
			break
		}

		return e.complexity.AddressEdge.Node(childComplexity), true

	case "AddressGlobal.addressOne":
		if e.complexity.AddressGlobal.AddressOne == nil {
			break
		}

		return e.complexity.AddressGlobal.AddressOne(childComplexity), true

	case "AddressGlobal.addressTwo":
		if e.complexity.AddressGlobal.AddressTwo == nil {
			break
		}

		return e.complexity.AddressGlobal.AddressTwo(childComplexity), true

	case "AddressGlobal.city":
		if e.complexity.AddressGlobal.City == nil {
			break
		}

		return e.complexity.AddressGlobal.City(childComplexity), true

	case "AddressGlobal.company":
		if e.complexity.AddressGlobal.Company == nil {
			break
		}

		return e.complexity.AddressGlobal.Company(childComplexity), true

	case "AddressGlobal.country":
		if e.complexity.AddressGlobal.Country == nil {
			break
		}

		return e.complexity.AddressGlobal.Country(childComplexity), true

	case "AddressGlobal.id":
		if e.complexity.AddressGlobal.ID == nil {
			break
		}

		return e.complexity.AddressGlobal.ID(childComplexity), true

	case "AddressGlobal.latitude":
		if e.complexity.AddressGlobal.Latitude == nil {
			break
		}

		return e.complexity.AddressGlobal.Latitude(childComplexity), true

	case "AddressGlobal.longitude":
		if e.complexity.AddressGlobal.Longitude == nil {
			break
		}

		return e.complexity.AddressGlobal.Longitude(childComplexity), true

	case "AddressGlobal.parcelShop":
		if e.complexity.AddressGlobal.ParcelShop == nil {
			break
		}

		return e.complexity.AddressGlobal.ParcelShop(childComplexity), true

	case "AddressGlobal.parcelShopBringDelivery":
		if e.complexity.AddressGlobal.ParcelShopBringDelivery == nil {
			break
		}

		return e.complexity.AddressGlobal.ParcelShopBringDelivery(childComplexity), true

	case "AddressGlobal.parcelShopPostNordDelivery":
		if e.complexity.AddressGlobal.ParcelShopPostNordDelivery == nil {
			break
		}

		return e.complexity.AddressGlobal.ParcelShopPostNordDelivery(childComplexity), true

	case "AddressGlobal.state":
		if e.complexity.AddressGlobal.State == nil {
			break
		}

		return e.complexity.AddressGlobal.State(childComplexity), true

	case "AddressGlobal.zip":
		if e.complexity.AddressGlobal.Zip == nil {
			break
		}

		return e.complexity.AddressGlobal.Zip(childComplexity), true

	case "AddressGlobalConnection.edges":
		if e.complexity.AddressGlobalConnection.Edges == nil {
			break
		}

		return e.complexity.AddressGlobalConnection.Edges(childComplexity), true

	case "AddressGlobalConnection.pageInfo":
		if e.complexity.AddressGlobalConnection.PageInfo == nil {
			break
		}

		return e.complexity.AddressGlobalConnection.PageInfo(childComplexity), true

	case "AddressGlobalConnection.totalCount":
		if e.complexity.AddressGlobalConnection.TotalCount == nil {
			break
		}

		return e.complexity.AddressGlobalConnection.TotalCount(childComplexity), true

	case "AddressGlobalEdge.cursor":
		if e.complexity.AddressGlobalEdge.Cursor == nil {
			break
		}

		return e.complexity.AddressGlobalEdge.Cursor(childComplexity), true

	case "AddressGlobalEdge.node":
		if e.complexity.AddressGlobalEdge.Node == nil {
			break
		}

		return e.complexity.AddressGlobalEdge.Node(childComplexity), true

	case "BuildInfo.Hash":
		if e.complexity.BuildInfo.Hash == nil {
			break
		}

		return e.complexity.BuildInfo.Hash(childComplexity), true

	case "BuildInfo.LimitedSystem":
		if e.complexity.BuildInfo.LimitedSystem == nil {
			break
		}

		return e.complexity.BuildInfo.LimitedSystem(childComplexity), true

	case "BuildInfo.Time":
		if e.complexity.BuildInfo.Time == nil {
			break
		}

		return e.complexity.BuildInfo.Time(childComplexity), true

	case "BulkUpdateMessage.msg":
		if e.complexity.BulkUpdateMessage.Msg == nil {
			break
		}

		return e.complexity.BulkUpdateMessage.Msg(childComplexity), true

	case "BulkUpdateMessage.success":
		if e.complexity.BulkUpdateMessage.Success == nil {
			break
		}

		return e.complexity.BulkUpdateMessage.Success(childComplexity), true

	case "BusinessHoursPeriod.closing":
		if e.complexity.BusinessHoursPeriod.Closing == nil {
			break
		}

		return e.complexity.BusinessHoursPeriod.Closing(childComplexity), true

	case "BusinessHoursPeriod.dayOfWeek":
		if e.complexity.BusinessHoursPeriod.DayOfWeek == nil {
			break
		}

		return e.complexity.BusinessHoursPeriod.DayOfWeek(childComplexity), true

	case "BusinessHoursPeriod.id":
		if e.complexity.BusinessHoursPeriod.ID == nil {
			break
		}

		return e.complexity.BusinessHoursPeriod.ID(childComplexity), true

	case "BusinessHoursPeriod.opening":
		if e.complexity.BusinessHoursPeriod.Opening == nil {
			break
		}

		return e.complexity.BusinessHoursPeriod.Opening(childComplexity), true

	case "BusinessHoursPeriod.parcelShop":
		if e.complexity.BusinessHoursPeriod.ParcelShop == nil {
			break
		}

		return e.complexity.BusinessHoursPeriod.ParcelShop(childComplexity), true

	case "BusinessHoursPeriodConnection.edges":
		if e.complexity.BusinessHoursPeriodConnection.Edges == nil {
			break
		}

		return e.complexity.BusinessHoursPeriodConnection.Edges(childComplexity), true

	case "BusinessHoursPeriodConnection.pageInfo":
		if e.complexity.BusinessHoursPeriodConnection.PageInfo == nil {
			break
		}

		return e.complexity.BusinessHoursPeriodConnection.PageInfo(childComplexity), true

	case "BusinessHoursPeriodConnection.totalCount":
		if e.complexity.BusinessHoursPeriodConnection.TotalCount == nil {
			break
		}

		return e.complexity.BusinessHoursPeriodConnection.TotalCount(childComplexity), true

	case "BusinessHoursPeriodEdge.cursor":
		if e.complexity.BusinessHoursPeriodEdge.Cursor == nil {
			break
		}

		return e.complexity.BusinessHoursPeriodEdge.Cursor(childComplexity), true

	case "BusinessHoursPeriodEdge.node":
		if e.complexity.BusinessHoursPeriodEdge.Node == nil {
			break
		}

		return e.complexity.BusinessHoursPeriodEdge.Node(childComplexity), true

	case "Carrier.carrierBrand":
		if e.complexity.Carrier.CarrierBrand == nil {
			break
		}

		return e.complexity.Carrier.CarrierBrand(childComplexity), true

	case "Carrier.carrierBring":
		if e.complexity.Carrier.CarrierBring == nil {
			break
		}

		return e.complexity.Carrier.CarrierBring(childComplexity), true

	case "Carrier.carrierDAO":
		if e.complexity.Carrier.CarrierDAO == nil {
			break
		}

		return e.complexity.Carrier.CarrierDAO(childComplexity), true

	case "Carrier.carrierDF":
		if e.complexity.Carrier.CarrierDF == nil {
			break
		}

		return e.complexity.Carrier.CarrierDF(childComplexity), true

	case "Carrier.carrierDSV":
		if e.complexity.Carrier.CarrierDSV == nil {
			break
		}

		return e.complexity.Carrier.CarrierDSV(childComplexity), true

	case "Carrier.carrierEasyPost":
		if e.complexity.Carrier.CarrierEasyPost == nil {
			break
		}

		return e.complexity.Carrier.CarrierEasyPost(childComplexity), true

	case "Carrier.carrierGLS":
		if e.complexity.Carrier.CarrierGLS == nil {
			break
		}

		return e.complexity.Carrier.CarrierGLS(childComplexity), true

	case "Carrier.carrierPostNord":
		if e.complexity.Carrier.CarrierPostNord == nil {
			break
		}

		return e.complexity.Carrier.CarrierPostNord(childComplexity), true

	case "Carrier.carrierUSPS":
		if e.complexity.Carrier.CarrierUSPS == nil {
			break
		}

		return e.complexity.Carrier.CarrierUSPS(childComplexity), true

	case "Carrier.deliveryOption":
		if e.complexity.Carrier.DeliveryOption == nil {
			break
		}

		return e.complexity.Carrier.DeliveryOption(childComplexity), true

	case "Carrier.id":
		if e.complexity.Carrier.ID == nil {
			break
		}

		return e.complexity.Carrier.ID(childComplexity), true

	case "Carrier.name":
		if e.complexity.Carrier.Name == nil {
			break
		}

		return e.complexity.Carrier.Name(childComplexity), true

	case "Carrier.shipment":
		if e.complexity.Carrier.Shipment == nil {
			break
		}

		return e.complexity.Carrier.Shipment(childComplexity), true

	case "Carrier.syncCancelation":
		if e.complexity.Carrier.SyncCancelation == nil {
			break
		}

		return e.complexity.Carrier.SyncCancelation(childComplexity), true

	case "Carrier.tenant":
		if e.complexity.Carrier.Tenant == nil {
			break
		}

		return e.complexity.Carrier.Tenant(childComplexity), true

	case "Carrier.tenantID":
		if e.complexity.Carrier.TenantID == nil {
			break
		}

		return e.complexity.Carrier.TenantID(childComplexity), true

	case "CarrierAdditionalServiceBring.apiCodeBooking":
		if e.complexity.CarrierAdditionalServiceBring.APICodeBooking == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBring.APICodeBooking(childComplexity), true

	case "CarrierAdditionalServiceBring.carrierServiceBring":
		if e.complexity.CarrierAdditionalServiceBring.CarrierServiceBring == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBring.CarrierServiceBring(childComplexity), true

	case "CarrierAdditionalServiceBring.deliveryOptionBring":
		if e.complexity.CarrierAdditionalServiceBring.DeliveryOptionBring == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBring.DeliveryOptionBring(childComplexity), true

	case "CarrierAdditionalServiceBring.id":
		if e.complexity.CarrierAdditionalServiceBring.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBring.ID(childComplexity), true

	case "CarrierAdditionalServiceBring.label":
		if e.complexity.CarrierAdditionalServiceBring.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBring.Label(childComplexity), true

	case "CarrierAdditionalServiceBringConnection.edges":
		if e.complexity.CarrierAdditionalServiceBringConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBringConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceBringConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceBringConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBringConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceBringConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceBringConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBringConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceBringEdge.cursor":
		if e.complexity.CarrierAdditionalServiceBringEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBringEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceBringEdge.node":
		if e.complexity.CarrierAdditionalServiceBringEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceBringEdge.Node(childComplexity), true

	case "CarrierAdditionalServiceDAO.apiCode":
		if e.complexity.CarrierAdditionalServiceDAO.APICode == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAO.APICode(childComplexity), true

	case "CarrierAdditionalServiceDAO.carrierServiceDAO":
		if e.complexity.CarrierAdditionalServiceDAO.CarrierServiceDAO == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAO.CarrierServiceDAO(childComplexity), true

	case "CarrierAdditionalServiceDAO.deliveryOptionDAO":
		if e.complexity.CarrierAdditionalServiceDAO.DeliveryOptionDAO == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAO.DeliveryOptionDAO(childComplexity), true

	case "CarrierAdditionalServiceDAO.id":
		if e.complexity.CarrierAdditionalServiceDAO.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAO.ID(childComplexity), true

	case "CarrierAdditionalServiceDAO.label":
		if e.complexity.CarrierAdditionalServiceDAO.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAO.Label(childComplexity), true

	case "CarrierAdditionalServiceDAOConnection.edges":
		if e.complexity.CarrierAdditionalServiceDAOConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAOConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceDAOConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceDAOConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAOConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceDAOConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceDAOConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAOConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceDAOEdge.cursor":
		if e.complexity.CarrierAdditionalServiceDAOEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAOEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceDAOEdge.node":
		if e.complexity.CarrierAdditionalServiceDAOEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDAOEdge.Node(childComplexity), true

	case "CarrierAdditionalServiceDF.apiCode":
		if e.complexity.CarrierAdditionalServiceDF.APICode == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDF.APICode(childComplexity), true

	case "CarrierAdditionalServiceDF.carrierServiceDF":
		if e.complexity.CarrierAdditionalServiceDF.CarrierServiceDF == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDF.CarrierServiceDF(childComplexity), true

	case "CarrierAdditionalServiceDF.deliveryOptionDF":
		if e.complexity.CarrierAdditionalServiceDF.DeliveryOptionDF == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDF.DeliveryOptionDF(childComplexity), true

	case "CarrierAdditionalServiceDF.id":
		if e.complexity.CarrierAdditionalServiceDF.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDF.ID(childComplexity), true

	case "CarrierAdditionalServiceDF.label":
		if e.complexity.CarrierAdditionalServiceDF.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDF.Label(childComplexity), true

	case "CarrierAdditionalServiceDFConnection.edges":
		if e.complexity.CarrierAdditionalServiceDFConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDFConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceDFConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceDFConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDFConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceDFConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceDFConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDFConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceDFEdge.cursor":
		if e.complexity.CarrierAdditionalServiceDFEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDFEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceDFEdge.node":
		if e.complexity.CarrierAdditionalServiceDFEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDFEdge.Node(childComplexity), true

	case "CarrierAdditionalServiceDSV.apiCode":
		if e.complexity.CarrierAdditionalServiceDSV.APICode == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSV.APICode(childComplexity), true

	case "CarrierAdditionalServiceDSV.carrierServiceDSV":
		if e.complexity.CarrierAdditionalServiceDSV.CarrierServiceDSV == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSV.CarrierServiceDSV(childComplexity), true

	case "CarrierAdditionalServiceDSV.deliveryOptionDSV":
		if e.complexity.CarrierAdditionalServiceDSV.DeliveryOptionDSV == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSV.DeliveryOptionDSV(childComplexity), true

	case "CarrierAdditionalServiceDSV.id":
		if e.complexity.CarrierAdditionalServiceDSV.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSV.ID(childComplexity), true

	case "CarrierAdditionalServiceDSV.label":
		if e.complexity.CarrierAdditionalServiceDSV.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSV.Label(childComplexity), true

	case "CarrierAdditionalServiceDSVConnection.edges":
		if e.complexity.CarrierAdditionalServiceDSVConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSVConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceDSVConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceDSVConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSVConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceDSVConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceDSVConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSVConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceDSVEdge.cursor":
		if e.complexity.CarrierAdditionalServiceDSVEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSVEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceDSVEdge.node":
		if e.complexity.CarrierAdditionalServiceDSVEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceDSVEdge.Node(childComplexity), true

	case "CarrierAdditionalServiceEasyPost.apiKey":
		if e.complexity.CarrierAdditionalServiceEasyPost.APIKey == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPost.APIKey(childComplexity), true

	case "CarrierAdditionalServiceEasyPost.apiValue":
		if e.complexity.CarrierAdditionalServiceEasyPost.APIValue == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPost.APIValue(childComplexity), true

	case "CarrierAdditionalServiceEasyPost.carrierServiceEasyPost":
		if e.complexity.CarrierAdditionalServiceEasyPost.CarrierServiceEasyPost == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPost.CarrierServiceEasyPost(childComplexity), true

	case "CarrierAdditionalServiceEasyPost.deliveryOptionEasyPost":
		if e.complexity.CarrierAdditionalServiceEasyPost.DeliveryOptionEasyPost == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPost.DeliveryOptionEasyPost(childComplexity), true

	case "CarrierAdditionalServiceEasyPost.id":
		if e.complexity.CarrierAdditionalServiceEasyPost.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPost.ID(childComplexity), true

	case "CarrierAdditionalServiceEasyPost.label":
		if e.complexity.CarrierAdditionalServiceEasyPost.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPost.Label(childComplexity), true

	case "CarrierAdditionalServiceEasyPostConnection.edges":
		if e.complexity.CarrierAdditionalServiceEasyPostConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPostConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceEasyPostConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceEasyPostConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPostConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceEasyPostConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceEasyPostConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPostConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceEasyPostEdge.cursor":
		if e.complexity.CarrierAdditionalServiceEasyPostEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPostEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceEasyPostEdge.node":
		if e.complexity.CarrierAdditionalServiceEasyPostEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceEasyPostEdge.Node(childComplexity), true

	case "CarrierAdditionalServiceGLS.allCountriesConsignee":
		if e.complexity.CarrierAdditionalServiceGLS.AllCountriesConsignee == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.AllCountriesConsignee(childComplexity), true

	case "CarrierAdditionalServiceGLS.allCountriesConsignor":
		if e.complexity.CarrierAdditionalServiceGLS.AllCountriesConsignor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.AllCountriesConsignor(childComplexity), true

	case "CarrierAdditionalServiceGLS.carrierServiceGLS":
		if e.complexity.CarrierAdditionalServiceGLS.CarrierServiceGLS == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.CarrierServiceGLS(childComplexity), true

	case "CarrierAdditionalServiceGLS.countriesConsignee":
		if e.complexity.CarrierAdditionalServiceGLS.CountriesConsignee == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.CountriesConsignee(childComplexity), true

	case "CarrierAdditionalServiceGLS.countriesConsignor":
		if e.complexity.CarrierAdditionalServiceGLS.CountriesConsignor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.CountriesConsignor(childComplexity), true

	case "CarrierAdditionalServiceGLS.deliveryOptionGLS":
		if e.complexity.CarrierAdditionalServiceGLS.DeliveryOptionGLS == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.DeliveryOptionGLS(childComplexity), true

	case "CarrierAdditionalServiceGLS.id":
		if e.complexity.CarrierAdditionalServiceGLS.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.ID(childComplexity), true

	case "CarrierAdditionalServiceGLS.internalID":
		if e.complexity.CarrierAdditionalServiceGLS.InternalID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.InternalID(childComplexity), true

	case "CarrierAdditionalServiceGLS.label":
		if e.complexity.CarrierAdditionalServiceGLS.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.Label(childComplexity), true

	case "CarrierAdditionalServiceGLS.mandatory":
		if e.complexity.CarrierAdditionalServiceGLS.Mandatory == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLS.Mandatory(childComplexity), true

	case "CarrierAdditionalServiceGLSConnection.edges":
		if e.complexity.CarrierAdditionalServiceGLSConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLSConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceGLSConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceGLSConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLSConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceGLSConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceGLSConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLSConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceGLSEdge.cursor":
		if e.complexity.CarrierAdditionalServiceGLSEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLSEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceGLSEdge.node":
		if e.complexity.CarrierAdditionalServiceGLSEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceGLSEdge.Node(childComplexity), true

	case "CarrierAdditionalServicePostNord.apiCode":
		if e.complexity.CarrierAdditionalServicePostNord.APICode == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.APICode(childComplexity), true

	case "CarrierAdditionalServicePostNord.allCountriesConsignee":
		if e.complexity.CarrierAdditionalServicePostNord.AllCountriesConsignee == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.AllCountriesConsignee(childComplexity), true

	case "CarrierAdditionalServicePostNord.allCountriesConsignor":
		if e.complexity.CarrierAdditionalServicePostNord.AllCountriesConsignor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.AllCountriesConsignor(childComplexity), true

	case "CarrierAdditionalServicePostNord.carrierServicePostNord":
		if e.complexity.CarrierAdditionalServicePostNord.CarrierServicePostNord == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.CarrierServicePostNord(childComplexity), true

	case "CarrierAdditionalServicePostNord.countriesConsignee":
		if e.complexity.CarrierAdditionalServicePostNord.CountriesConsignee == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.CountriesConsignee(childComplexity), true

	case "CarrierAdditionalServicePostNord.countriesConsignor":
		if e.complexity.CarrierAdditionalServicePostNord.CountriesConsignor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.CountriesConsignor(childComplexity), true

	case "CarrierAdditionalServicePostNord.deliveryOptionPostNord":
		if e.complexity.CarrierAdditionalServicePostNord.DeliveryOptionPostNord == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.DeliveryOptionPostNord(childComplexity), true

	case "CarrierAdditionalServicePostNord.id":
		if e.complexity.CarrierAdditionalServicePostNord.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.ID(childComplexity), true

	case "CarrierAdditionalServicePostNord.internalID":
		if e.complexity.CarrierAdditionalServicePostNord.InternalID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.InternalID(childComplexity), true

	case "CarrierAdditionalServicePostNord.label":
		if e.complexity.CarrierAdditionalServicePostNord.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.Label(childComplexity), true

	case "CarrierAdditionalServicePostNord.mandatory":
		if e.complexity.CarrierAdditionalServicePostNord.Mandatory == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNord.Mandatory(childComplexity), true

	case "CarrierAdditionalServicePostNordConnection.edges":
		if e.complexity.CarrierAdditionalServicePostNordConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNordConnection.Edges(childComplexity), true

	case "CarrierAdditionalServicePostNordConnection.pageInfo":
		if e.complexity.CarrierAdditionalServicePostNordConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNordConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServicePostNordConnection.totalCount":
		if e.complexity.CarrierAdditionalServicePostNordConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNordConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServicePostNordEdge.cursor":
		if e.complexity.CarrierAdditionalServicePostNordEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNordEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServicePostNordEdge.node":
		if e.complexity.CarrierAdditionalServicePostNordEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServicePostNordEdge.Node(childComplexity), true

	case "CarrierAdditionalServiceUSPS.apiCode":
		if e.complexity.CarrierAdditionalServiceUSPS.APICode == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.APICode(childComplexity), true

	case "CarrierAdditionalServiceUSPS.carrierServiceUSPS":
		if e.complexity.CarrierAdditionalServiceUSPS.CarrierServiceUSPS == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.CarrierServiceUSPS(childComplexity), true

	case "CarrierAdditionalServiceUSPS.commonlyUsed":
		if e.complexity.CarrierAdditionalServiceUSPS.CommonlyUsed == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.CommonlyUsed(childComplexity), true

	case "CarrierAdditionalServiceUSPS.deliveryOptionUSPS":
		if e.complexity.CarrierAdditionalServiceUSPS.DeliveryOptionUSPS == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.DeliveryOptionUSPS(childComplexity), true

	case "CarrierAdditionalServiceUSPS.id":
		if e.complexity.CarrierAdditionalServiceUSPS.ID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.ID(childComplexity), true

	case "CarrierAdditionalServiceUSPS.internalID":
		if e.complexity.CarrierAdditionalServiceUSPS.InternalID == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.InternalID(childComplexity), true

	case "CarrierAdditionalServiceUSPS.label":
		if e.complexity.CarrierAdditionalServiceUSPS.Label == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPS.Label(childComplexity), true

	case "CarrierAdditionalServiceUSPSConnection.edges":
		if e.complexity.CarrierAdditionalServiceUSPSConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPSConnection.Edges(childComplexity), true

	case "CarrierAdditionalServiceUSPSConnection.pageInfo":
		if e.complexity.CarrierAdditionalServiceUSPSConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPSConnection.PageInfo(childComplexity), true

	case "CarrierAdditionalServiceUSPSConnection.totalCount":
		if e.complexity.CarrierAdditionalServiceUSPSConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPSConnection.TotalCount(childComplexity), true

	case "CarrierAdditionalServiceUSPSEdge.cursor":
		if e.complexity.CarrierAdditionalServiceUSPSEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPSEdge.Cursor(childComplexity), true

	case "CarrierAdditionalServiceUSPSEdge.node":
		if e.complexity.CarrierAdditionalServiceUSPSEdge.Node == nil {
			break
		}

		return e.complexity.CarrierAdditionalServiceUSPSEdge.Node(childComplexity), true

	case "CarrierBrand.backgroundColor":
		if e.complexity.CarrierBrand.BackgroundColor == nil {
			break
		}

		return e.complexity.CarrierBrand.BackgroundColor(childComplexity), true

	case "CarrierBrand.carrier":
		if e.complexity.CarrierBrand.Carrier == nil {
			break
		}

		return e.complexity.CarrierBrand.Carrier(childComplexity), true

	case "CarrierBrand.carrierService":
		if e.complexity.CarrierBrand.CarrierService == nil {
			break
		}

		return e.complexity.CarrierBrand.CarrierService(childComplexity), true

	case "CarrierBrand.document":
		if e.complexity.CarrierBrand.Document == nil {
			break
		}

		return e.complexity.CarrierBrand.Document(childComplexity), true

	case "CarrierBrand.id":
		if e.complexity.CarrierBrand.ID == nil {
			break
		}

		return e.complexity.CarrierBrand.ID(childComplexity), true

	case "CarrierBrand.internalID":
		if e.complexity.CarrierBrand.InternalID == nil {
			break
		}

		return e.complexity.CarrierBrand.InternalID(childComplexity), true

	case "CarrierBrand.label":
		if e.complexity.CarrierBrand.Label == nil {
			break
		}

		return e.complexity.CarrierBrand.Label(childComplexity), true

	case "CarrierBrand.labelShort":
		if e.complexity.CarrierBrand.LabelShort == nil {
			break
		}

		return e.complexity.CarrierBrand.LabelShort(childComplexity), true

	case "CarrierBrand.logoURL":
		if e.complexity.CarrierBrand.LogoURL == nil {
			break
		}

		return e.complexity.CarrierBrand.LogoURL(childComplexity), true

	case "CarrierBrand.packaging":
		if e.complexity.CarrierBrand.Packaging == nil {
			break
		}

		return e.complexity.CarrierBrand.Packaging(childComplexity), true

	case "CarrierBrand.parcelShop":
		if e.complexity.CarrierBrand.ParcelShop == nil {
			break
		}

		return e.complexity.CarrierBrand.ParcelShop(childComplexity), true

	case "CarrierBrand.textColor":
		if e.complexity.CarrierBrand.TextColor == nil {
			break
		}

		return e.complexity.CarrierBrand.TextColor(childComplexity), true

	case "CarrierBrandConnection.edges":
		if e.complexity.CarrierBrandConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierBrandConnection.Edges(childComplexity), true

	case "CarrierBrandConnection.pageInfo":
		if e.complexity.CarrierBrandConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierBrandConnection.PageInfo(childComplexity), true

	case "CarrierBrandConnection.totalCount":
		if e.complexity.CarrierBrandConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierBrandConnection.TotalCount(childComplexity), true

	case "CarrierBrandEdge.cursor":
		if e.complexity.CarrierBrandEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierBrandEdge.Cursor(childComplexity), true

	case "CarrierBrandEdge.node":
		if e.complexity.CarrierBrandEdge.Node == nil {
			break
		}

		return e.complexity.CarrierBrandEdge.Node(childComplexity), true

	case "CarrierBring.apiKey":
		if e.complexity.CarrierBring.APIKey == nil {
			break
		}

		return e.complexity.CarrierBring.APIKey(childComplexity), true

	case "CarrierBring.carrier":
		if e.complexity.CarrierBring.Carrier == nil {
			break
		}

		return e.complexity.CarrierBring.Carrier(childComplexity), true

	case "CarrierBring.customerNumber":
		if e.complexity.CarrierBring.CustomerNumber == nil {
			break
		}

		return e.complexity.CarrierBring.CustomerNumber(childComplexity), true

	case "CarrierBring.id":
		if e.complexity.CarrierBring.ID == nil {
			break
		}

		return e.complexity.CarrierBring.ID(childComplexity), true

	case "CarrierBring.tenant":
		if e.complexity.CarrierBring.Tenant == nil {
			break
		}

		return e.complexity.CarrierBring.Tenant(childComplexity), true

	case "CarrierBring.tenantID":
		if e.complexity.CarrierBring.TenantID == nil {
			break
		}

		return e.complexity.CarrierBring.TenantID(childComplexity), true

	case "CarrierBring.test":
		if e.complexity.CarrierBring.Test == nil {
			break
		}

		return e.complexity.CarrierBring.Test(childComplexity), true

	case "CarrierBringConnection.edges":
		if e.complexity.CarrierBringConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierBringConnection.Edges(childComplexity), true

	case "CarrierBringConnection.pageInfo":
		if e.complexity.CarrierBringConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierBringConnection.PageInfo(childComplexity), true

	case "CarrierBringConnection.totalCount":
		if e.complexity.CarrierBringConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierBringConnection.TotalCount(childComplexity), true

	case "CarrierBringEdge.cursor":
		if e.complexity.CarrierBringEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierBringEdge.Cursor(childComplexity), true

	case "CarrierBringEdge.node":
		if e.complexity.CarrierBringEdge.Node == nil {
			break
		}

		return e.complexity.CarrierBringEdge.Node(childComplexity), true

	case "CarrierConnection.edges":
		if e.complexity.CarrierConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierConnection.Edges(childComplexity), true

	case "CarrierConnection.pageInfo":
		if e.complexity.CarrierConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierConnection.PageInfo(childComplexity), true

	case "CarrierConnection.totalCount":
		if e.complexity.CarrierConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierConnection.TotalCount(childComplexity), true

	case "CarrierDAO.apiKey":
		if e.complexity.CarrierDAO.APIKey == nil {
			break
		}

		return e.complexity.CarrierDAO.APIKey(childComplexity), true

	case "CarrierDAO.carrier":
		if e.complexity.CarrierDAO.Carrier == nil {
			break
		}

		return e.complexity.CarrierDAO.Carrier(childComplexity), true

	case "CarrierDAO.customerID":
		if e.complexity.CarrierDAO.CustomerID == nil {
			break
		}

		return e.complexity.CarrierDAO.CustomerID(childComplexity), true

	case "CarrierDAO.id":
		if e.complexity.CarrierDAO.ID == nil {
			break
		}

		return e.complexity.CarrierDAO.ID(childComplexity), true

	case "CarrierDAO.tenant":
		if e.complexity.CarrierDAO.Tenant == nil {
			break
		}

		return e.complexity.CarrierDAO.Tenant(childComplexity), true

	case "CarrierDAO.tenantID":
		if e.complexity.CarrierDAO.TenantID == nil {
			break
		}

		return e.complexity.CarrierDAO.TenantID(childComplexity), true

	case "CarrierDAO.test":
		if e.complexity.CarrierDAO.Test == nil {
			break
		}

		return e.complexity.CarrierDAO.Test(childComplexity), true

	case "CarrierDAOConnection.edges":
		if e.complexity.CarrierDAOConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierDAOConnection.Edges(childComplexity), true

	case "CarrierDAOConnection.pageInfo":
		if e.complexity.CarrierDAOConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierDAOConnection.PageInfo(childComplexity), true

	case "CarrierDAOConnection.totalCount":
		if e.complexity.CarrierDAOConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierDAOConnection.TotalCount(childComplexity), true

	case "CarrierDAOEdge.cursor":
		if e.complexity.CarrierDAOEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierDAOEdge.Cursor(childComplexity), true

	case "CarrierDAOEdge.node":
		if e.complexity.CarrierDAOEdge.Node == nil {
			break
		}

		return e.complexity.CarrierDAOEdge.Node(childComplexity), true

	case "CarrierDF.agreementNumber":
		if e.complexity.CarrierDF.AgreementNumber == nil {
			break
		}

		return e.complexity.CarrierDF.AgreementNumber(childComplexity), true

	case "CarrierDF.carrier":
		if e.complexity.CarrierDF.Carrier == nil {
			break
		}

		return e.complexity.CarrierDF.Carrier(childComplexity), true

	case "CarrierDF.customerID":
		if e.complexity.CarrierDF.CustomerID == nil {
			break
		}

		return e.complexity.CarrierDF.CustomerID(childComplexity), true

	case "CarrierDF.id":
		if e.complexity.CarrierDF.ID == nil {
			break
		}

		return e.complexity.CarrierDF.ID(childComplexity), true

	case "CarrierDF.tenant":
		if e.complexity.CarrierDF.Tenant == nil {
			break
		}

		return e.complexity.CarrierDF.Tenant(childComplexity), true

	case "CarrierDF.tenantID":
		if e.complexity.CarrierDF.TenantID == nil {
			break
		}

		return e.complexity.CarrierDF.TenantID(childComplexity), true

	case "CarrierDF.test":
		if e.complexity.CarrierDF.Test == nil {
			break
		}

		return e.complexity.CarrierDF.Test(childComplexity), true

	case "CarrierDF.whoPays":
		if e.complexity.CarrierDF.WhoPays == nil {
			break
		}

		return e.complexity.CarrierDF.WhoPays(childComplexity), true

	case "CarrierDFConnection.edges":
		if e.complexity.CarrierDFConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierDFConnection.Edges(childComplexity), true

	case "CarrierDFConnection.pageInfo":
		if e.complexity.CarrierDFConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierDFConnection.PageInfo(childComplexity), true

	case "CarrierDFConnection.totalCount":
		if e.complexity.CarrierDFConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierDFConnection.TotalCount(childComplexity), true

	case "CarrierDFEdge.cursor":
		if e.complexity.CarrierDFEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierDFEdge.Cursor(childComplexity), true

	case "CarrierDFEdge.node":
		if e.complexity.CarrierDFEdge.Node == nil {
			break
		}

		return e.complexity.CarrierDFEdge.Node(childComplexity), true

	case "CarrierDSV.carrier":
		if e.complexity.CarrierDSV.Carrier == nil {
			break
		}

		return e.complexity.CarrierDSV.Carrier(childComplexity), true

	case "CarrierDSV.id":
		if e.complexity.CarrierDSV.ID == nil {
			break
		}

		return e.complexity.CarrierDSV.ID(childComplexity), true

	case "CarrierDSV.tenant":
		if e.complexity.CarrierDSV.Tenant == nil {
			break
		}

		return e.complexity.CarrierDSV.Tenant(childComplexity), true

	case "CarrierDSV.tenantID":
		if e.complexity.CarrierDSV.TenantID == nil {
			break
		}

		return e.complexity.CarrierDSV.TenantID(childComplexity), true

	case "CarrierDSVConnection.edges":
		if e.complexity.CarrierDSVConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierDSVConnection.Edges(childComplexity), true

	case "CarrierDSVConnection.pageInfo":
		if e.complexity.CarrierDSVConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierDSVConnection.PageInfo(childComplexity), true

	case "CarrierDSVConnection.totalCount":
		if e.complexity.CarrierDSVConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierDSVConnection.TotalCount(childComplexity), true

	case "CarrierDSVEdge.cursor":
		if e.complexity.CarrierDSVEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierDSVEdge.Cursor(childComplexity), true

	case "CarrierDSVEdge.node":
		if e.complexity.CarrierDSVEdge.Node == nil {
			break
		}

		return e.complexity.CarrierDSVEdge.Node(childComplexity), true

	case "CarrierEasyPost.apiKey":
		if e.complexity.CarrierEasyPost.APIKey == nil {
			break
		}

		return e.complexity.CarrierEasyPost.APIKey(childComplexity), true

	case "CarrierEasyPost.carrier":
		if e.complexity.CarrierEasyPost.Carrier == nil {
			break
		}

		return e.complexity.CarrierEasyPost.Carrier(childComplexity), true

	case "CarrierEasyPost.carrierAccounts":
		if e.complexity.CarrierEasyPost.CarrierAccounts == nil {
			break
		}

		return e.complexity.CarrierEasyPost.CarrierAccounts(childComplexity), true

	case "CarrierEasyPost.id":
		if e.complexity.CarrierEasyPost.ID == nil {
			break
		}

		return e.complexity.CarrierEasyPost.ID(childComplexity), true

	case "CarrierEasyPost.tenant":
		if e.complexity.CarrierEasyPost.Tenant == nil {
			break
		}

		return e.complexity.CarrierEasyPost.Tenant(childComplexity), true

	case "CarrierEasyPost.tenantID":
		if e.complexity.CarrierEasyPost.TenantID == nil {
			break
		}

		return e.complexity.CarrierEasyPost.TenantID(childComplexity), true

	case "CarrierEasyPost.test":
		if e.complexity.CarrierEasyPost.Test == nil {
			break
		}

		return e.complexity.CarrierEasyPost.Test(childComplexity), true

	case "CarrierEasyPostConnection.edges":
		if e.complexity.CarrierEasyPostConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierEasyPostConnection.Edges(childComplexity), true

	case "CarrierEasyPostConnection.pageInfo":
		if e.complexity.CarrierEasyPostConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierEasyPostConnection.PageInfo(childComplexity), true

	case "CarrierEasyPostConnection.totalCount":
		if e.complexity.CarrierEasyPostConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierEasyPostConnection.TotalCount(childComplexity), true

	case "CarrierEasyPostEdge.cursor":
		if e.complexity.CarrierEasyPostEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierEasyPostEdge.Cursor(childComplexity), true

	case "CarrierEasyPostEdge.node":
		if e.complexity.CarrierEasyPostEdge.Node == nil {
			break
		}

		return e.complexity.CarrierEasyPostEdge.Node(childComplexity), true

	case "CarrierEdge.cursor":
		if e.complexity.CarrierEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierEdge.Cursor(childComplexity), true

	case "CarrierEdge.node":
		if e.complexity.CarrierEdge.Node == nil {
			break
		}

		return e.complexity.CarrierEdge.Node(childComplexity), true

	case "CarrierGLS.carrier":
		if e.complexity.CarrierGLS.Carrier == nil {
			break
		}

		return e.complexity.CarrierGLS.Carrier(childComplexity), true

	case "CarrierGLS.contactID":
		if e.complexity.CarrierGLS.ContactID == nil {
			break
		}

		return e.complexity.CarrierGLS.ContactID(childComplexity), true

	case "CarrierGLS.customerID":
		if e.complexity.CarrierGLS.CustomerID == nil {
			break
		}

		return e.complexity.CarrierGLS.CustomerID(childComplexity), true

	case "CarrierGLS.glsCountryCode":
		if e.complexity.CarrierGLS.GLSCountryCode == nil {
			break
		}

		return e.complexity.CarrierGLS.GLSCountryCode(childComplexity), true

	case "CarrierGLS.glsPassword":
		if e.complexity.CarrierGLS.GLSPassword == nil {
			break
		}

		return e.complexity.CarrierGLS.GLSPassword(childComplexity), true

	case "CarrierGLS.glsUsername":
		if e.complexity.CarrierGLS.GLSUsername == nil {
			break
		}

		return e.complexity.CarrierGLS.GLSUsername(childComplexity), true

	case "CarrierGLS.id":
		if e.complexity.CarrierGLS.ID == nil {
			break
		}

		return e.complexity.CarrierGLS.ID(childComplexity), true

	case "CarrierGLS.printErrorOnLabel":
		if e.complexity.CarrierGLS.PrintErrorOnLabel == nil {
			break
		}

		return e.complexity.CarrierGLS.PrintErrorOnLabel(childComplexity), true

	case "CarrierGLS.syncShipmentCancellation":
		if e.complexity.CarrierGLS.SyncShipmentCancellation == nil {
			break
		}

		return e.complexity.CarrierGLS.SyncShipmentCancellation(childComplexity), true

	case "CarrierGLS.tenant":
		if e.complexity.CarrierGLS.Tenant == nil {
			break
		}

		return e.complexity.CarrierGLS.Tenant(childComplexity), true

	case "CarrierGLS.tenantID":
		if e.complexity.CarrierGLS.TenantID == nil {
			break
		}

		return e.complexity.CarrierGLS.TenantID(childComplexity), true

	case "CarrierGLSConnection.edges":
		if e.complexity.CarrierGLSConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierGLSConnection.Edges(childComplexity), true

	case "CarrierGLSConnection.pageInfo":
		if e.complexity.CarrierGLSConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierGLSConnection.PageInfo(childComplexity), true

	case "CarrierGLSConnection.totalCount":
		if e.complexity.CarrierGLSConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierGLSConnection.TotalCount(childComplexity), true

	case "CarrierGLSEdge.cursor":
		if e.complexity.CarrierGLSEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierGLSEdge.Cursor(childComplexity), true

	case "CarrierGLSEdge.node":
		if e.complexity.CarrierGLSEdge.Node == nil {
			break
		}

		return e.complexity.CarrierGLSEdge.Node(childComplexity), true

	case "CarrierPostNord.carrier":
		if e.complexity.CarrierPostNord.Carrier == nil {
			break
		}

		return e.complexity.CarrierPostNord.Carrier(childComplexity), true

	case "CarrierPostNord.customerNumber":
		if e.complexity.CarrierPostNord.CustomerNumber == nil {
			break
		}

		return e.complexity.CarrierPostNord.CustomerNumber(childComplexity), true

	case "CarrierPostNord.id":
		if e.complexity.CarrierPostNord.ID == nil {
			break
		}

		return e.complexity.CarrierPostNord.ID(childComplexity), true

	case "CarrierPostNord.tenant":
		if e.complexity.CarrierPostNord.Tenant == nil {
			break
		}

		return e.complexity.CarrierPostNord.Tenant(childComplexity), true

	case "CarrierPostNord.tenantID":
		if e.complexity.CarrierPostNord.TenantID == nil {
			break
		}

		return e.complexity.CarrierPostNord.TenantID(childComplexity), true

	case "CarrierPostNordConnection.edges":
		if e.complexity.CarrierPostNordConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierPostNordConnection.Edges(childComplexity), true

	case "CarrierPostNordConnection.pageInfo":
		if e.complexity.CarrierPostNordConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierPostNordConnection.PageInfo(childComplexity), true

	case "CarrierPostNordConnection.totalCount":
		if e.complexity.CarrierPostNordConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierPostNordConnection.TotalCount(childComplexity), true

	case "CarrierPostNordEdge.cursor":
		if e.complexity.CarrierPostNordEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierPostNordEdge.Cursor(childComplexity), true

	case "CarrierPostNordEdge.node":
		if e.complexity.CarrierPostNordEdge.Node == nil {
			break
		}

		return e.complexity.CarrierPostNordEdge.Node(childComplexity), true

	case "CarrierService.carrierBrand":
		if e.complexity.CarrierService.CarrierBrand == nil {
			break
		}

		return e.complexity.CarrierService.CarrierBrand(childComplexity), true

	case "CarrierService.carrierServEasyPost":
		if e.complexity.CarrierService.CarrierServEasyPost == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServEasyPost(childComplexity), true

	case "CarrierService.carrierServiceBring":
		if e.complexity.CarrierService.CarrierServiceBring == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServiceBring(childComplexity), true

	case "CarrierService.carrierServiceDAO":
		if e.complexity.CarrierService.CarrierServiceDAO == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServiceDAO(childComplexity), true

	case "CarrierService.carrierServiceDF":
		if e.complexity.CarrierService.CarrierServiceDF == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServiceDF(childComplexity), true

	case "CarrierService.carrierServiceDSV":
		if e.complexity.CarrierService.CarrierServiceDSV == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServiceDSV(childComplexity), true

	case "CarrierService.carrierServiceGLS":
		if e.complexity.CarrierService.CarrierServiceGLS == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServiceGLS(childComplexity), true

	case "CarrierService.carrierServicePostNord":
		if e.complexity.CarrierService.CarrierServicePostNord == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServicePostNord(childComplexity), true

	case "CarrierService.carrierServiceUSPS":
		if e.complexity.CarrierService.CarrierServiceUSPS == nil {
			break
		}

		return e.complexity.CarrierService.CarrierServiceUSPS(childComplexity), true

	case "CarrierService.consolidation":
		if e.complexity.CarrierService.Consolidation == nil {
			break
		}

		return e.complexity.CarrierService.Consolidation(childComplexity), true

	case "CarrierService.deliveryOption":
		if e.complexity.CarrierService.DeliveryOption == nil {
			break
		}

		return e.complexity.CarrierService.DeliveryOption(childComplexity), true

	case "CarrierService.deliveryPointOptional":
		if e.complexity.CarrierService.DeliveryPointOptional == nil {
			break
		}

		return e.complexity.CarrierService.DeliveryPointOptional(childComplexity), true

	case "CarrierService.deliveryPointRequired":
		if e.complexity.CarrierService.DeliveryPointRequired == nil {
			break
		}

		return e.complexity.CarrierService.DeliveryPointRequired(childComplexity), true

	case "CarrierService.id":
		if e.complexity.CarrierService.ID == nil {
			break
		}

		return e.complexity.CarrierService.ID(childComplexity), true

	case "CarrierService.internalID":
		if e.complexity.CarrierService.InternalID == nil {
			break
		}

		return e.complexity.CarrierService.InternalID(childComplexity), true

	case "CarrierService.label":
		if e.complexity.CarrierService.Label == nil {
			break
		}

		return e.complexity.CarrierService.Label(childComplexity), true

	case "CarrierService.return":
		if e.complexity.CarrierService.Return == nil {
			break
		}

		return e.complexity.CarrierService.Return(childComplexity), true

	case "CarrierServiceBring.apiRequest":
		if e.complexity.CarrierServiceBring.APIRequest == nil {
			break
		}

		return e.complexity.CarrierServiceBring.APIRequest(childComplexity), true

	case "CarrierServiceBring.apiServiceCode":
		if e.complexity.CarrierServiceBring.APIServiceCode == nil {
			break
		}

		return e.complexity.CarrierServiceBring.APIServiceCode(childComplexity), true

	case "CarrierServiceBring.carrierAdditionalServiceBring":
		if e.complexity.CarrierServiceBring.CarrierAdditionalServiceBring == nil {
			break
		}

		return e.complexity.CarrierServiceBring.CarrierAdditionalServiceBring(childComplexity), true

	case "CarrierServiceBring.carrierService":
		if e.complexity.CarrierServiceBring.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceBring.CarrierService(childComplexity), true

	case "CarrierServiceBring.id":
		if e.complexity.CarrierServiceBring.ID == nil {
			break
		}

		return e.complexity.CarrierServiceBring.ID(childComplexity), true

	case "CarrierServiceBringConnection.edges":
		if e.complexity.CarrierServiceBringConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierServiceBringConnection.Edges(childComplexity), true

	case "CarrierServiceBringConnection.pageInfo":
		if e.complexity.CarrierServiceBringConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierServiceBringConnection.PageInfo(childComplexity), true

	case "CarrierServiceBringConnection.totalCount":
		if e.complexity.CarrierServiceBringConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierServiceBringConnection.TotalCount(childComplexity), true

	case "CarrierServiceBringEdge.cursor":
		if e.complexity.CarrierServiceBringEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierServiceBringEdge.Cursor(childComplexity), true

	case "CarrierServiceBringEdge.node":
		if e.complexity.CarrierServiceBringEdge.Node == nil {
			break
		}

		return e.complexity.CarrierServiceBringEdge.Node(childComplexity), true

	case "CarrierServiceConnection.edges":
		if e.complexity.CarrierServiceConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierServiceConnection.Edges(childComplexity), true

	case "CarrierServiceConnection.pageInfo":
		if e.complexity.CarrierServiceConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierServiceConnection.PageInfo(childComplexity), true

	case "CarrierServiceConnection.totalCount":
		if e.complexity.CarrierServiceConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierServiceConnection.TotalCount(childComplexity), true

	case "CarrierServiceDAO.carrierAdditionalServiceDAO":
		if e.complexity.CarrierServiceDAO.CarrierAdditionalServiceDAO == nil {
			break
		}

		return e.complexity.CarrierServiceDAO.CarrierAdditionalServiceDAO(childComplexity), true

	case "CarrierServiceDAO.carrierService":
		if e.complexity.CarrierServiceDAO.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceDAO.CarrierService(childComplexity), true

	case "CarrierServiceDAO.id":
		if e.complexity.CarrierServiceDAO.ID == nil {
			break
		}

		return e.complexity.CarrierServiceDAO.ID(childComplexity), true

	case "CarrierServiceDAOConnection.edges":
		if e.complexity.CarrierServiceDAOConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierServiceDAOConnection.Edges(childComplexity), true

	case "CarrierServiceDAOConnection.pageInfo":
		if e.complexity.CarrierServiceDAOConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierServiceDAOConnection.PageInfo(childComplexity), true

	case "CarrierServiceDAOConnection.totalCount":
		if e.complexity.CarrierServiceDAOConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierServiceDAOConnection.TotalCount(childComplexity), true

	case "CarrierServiceDAOEdge.cursor":
		if e.complexity.CarrierServiceDAOEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierServiceDAOEdge.Cursor(childComplexity), true

	case "CarrierServiceDAOEdge.node":
		if e.complexity.CarrierServiceDAOEdge.Node == nil {
			break
		}

		return e.complexity.CarrierServiceDAOEdge.Node(childComplexity), true

	case "CarrierServiceDF.carrierAdditionalServiceDF":
		if e.complexity.CarrierServiceDF.CarrierAdditionalServiceDF == nil {
			break
		}

		return e.complexity.CarrierServiceDF.CarrierAdditionalServiceDF(childComplexity), true

	case "CarrierServiceDF.carrierService":
		if e.complexity.CarrierServiceDF.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceDF.CarrierService(childComplexity), true

	case "CarrierServiceDF.id":
		if e.complexity.CarrierServiceDF.ID == nil {
			break
		}

		return e.complexity.CarrierServiceDF.ID(childComplexity), true

	case "CarrierServiceDFConnection.edges":
		if e.complexity.CarrierServiceDFConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierServiceDFConnection.Edges(childComplexity), true

	case "CarrierServiceDFConnection.pageInfo":
		if e.complexity.CarrierServiceDFConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierServiceDFConnection.PageInfo(childComplexity), true

	case "CarrierServiceDFConnection.totalCount":
		if e.complexity.CarrierServiceDFConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierServiceDFConnection.TotalCount(childComplexity), true

	case "CarrierServiceDFEdge.cursor":
		if e.complexity.CarrierServiceDFEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierServiceDFEdge.Cursor(childComplexity), true

	case "CarrierServiceDFEdge.node":
		if e.complexity.CarrierServiceDFEdge.Node == nil {
			break
		}

		return e.complexity.CarrierServiceDFEdge.Node(childComplexity), true

	case "CarrierServiceDSV.carrierAdditionalServiceDSV":
		if e.complexity.CarrierServiceDSV.CarrierAdditionalServiceDSV == nil {
			break
		}

		return e.complexity.CarrierServiceDSV.CarrierAdditionalServiceDSV(childComplexity), true

	case "CarrierServiceDSV.carrierService":
		if e.complexity.CarrierServiceDSV.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceDSV.CarrierService(childComplexity), true

	case "CarrierServiceDSV.id":
		if e.complexity.CarrierServiceDSV.ID == nil {
			break
		}

		return e.complexity.CarrierServiceDSV.ID(childComplexity), true

	case "CarrierServiceDSVConnection.edges":
		if e.complexity.CarrierServiceDSVConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierServiceDSVConnection.Edges(childComplexity), true

	case "CarrierServiceDSVConnection.pageInfo":
		if e.complexity.CarrierServiceDSVConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierServiceDSVConnection.PageInfo(childComplexity), true

	case "CarrierServiceDSVConnection.totalCount":
		if e.complexity.CarrierServiceDSVConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierServiceDSVConnection.TotalCount(childComplexity), true

	case "CarrierServiceDSVEdge.cursor":
		if e.complexity.CarrierServiceDSVEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierServiceDSVEdge.Cursor(childComplexity), true

	case "CarrierServiceDSVEdge.node":
		if e.complexity.CarrierServiceDSVEdge.Node == nil {
			break
		}

		return e.complexity.CarrierServiceDSVEdge.Node(childComplexity), true

	case "CarrierServiceEasyPost.carrierAddServEasyPost":
		if e.complexity.CarrierServiceEasyPost.CarrierAddServEasyPost == nil {
			break
		}

		return e.complexity.CarrierServiceEasyPost.CarrierAddServEasyPost(childComplexity), true

	case "CarrierServiceEasyPost.carrierService":
		if e.complexity.CarrierServiceEasyPost.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceEasyPost.CarrierService(childComplexity), true

	case "CarrierServiceEasyPost.id":
		if e.complexity.CarrierServiceEasyPost.ID == nil {
			break
		}

		return e.complexity.CarrierServiceEasyPost.ID(childComplexity), true

	case "CarrierServiceEdge.cursor":
		if e.complexity.CarrierServiceEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierServiceEdge.Cursor(childComplexity), true

	case "CarrierServiceEdge.node":
		if e.complexity.CarrierServiceEdge.Node == nil {
			break
		}

		return e.complexity.CarrierServiceEdge.Node(childComplexity), true

	case "CarrierServiceGLS.apiKey":
		if e.complexity.CarrierServiceGLS.APIKey == nil {
			break
		}

		return e.complexity.CarrierServiceGLS.APIKey(childComplexity), true

	case "CarrierServiceGLS.apiValue":
		if e.complexity.CarrierServiceGLS.APIValue == nil {
			break
		}

		return e.complexity.CarrierServiceGLS.APIValue(childComplexity), true

	case "CarrierServiceGLS.carrierAdditionalServiceGLS":
		if e.complexity.CarrierServiceGLS.CarrierAdditionalServiceGLS == nil {
			break
		}

		return e.complexity.CarrierServiceGLS.CarrierAdditionalServiceGLS(childComplexity), true

	case "CarrierServiceGLS.carrierService":
		if e.complexity.CarrierServiceGLS.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceGLS.CarrierService(childComplexity), true

	case "CarrierServiceGLS.id":
		if e.complexity.CarrierServiceGLS.ID == nil {
			break
		}

		return e.complexity.CarrierServiceGLS.ID(childComplexity), true

	case "CarrierServicePostNord.apiCode":
		if e.complexity.CarrierServicePostNord.APICode == nil {
			break
		}

		return e.complexity.CarrierServicePostNord.APICode(childComplexity), true

	case "CarrierServicePostNord.carrierAddServPostNord":
		if e.complexity.CarrierServicePostNord.CarrierAddServPostNord == nil {
			break
		}

		return e.complexity.CarrierServicePostNord.CarrierAddServPostNord(childComplexity), true

	case "CarrierServicePostNord.carrierService":
		if e.complexity.CarrierServicePostNord.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServicePostNord.CarrierService(childComplexity), true

	case "CarrierServicePostNord.id":
		if e.complexity.CarrierServicePostNord.ID == nil {
			break
		}

		return e.complexity.CarrierServicePostNord.ID(childComplexity), true

	case "CarrierServicePostNord.internalID":
		if e.complexity.CarrierServicePostNord.InternalID == nil {
			break
		}

		return e.complexity.CarrierServicePostNord.InternalID(childComplexity), true

	case "CarrierServicePostNord.label":
		if e.complexity.CarrierServicePostNord.Label == nil {
			break
		}

		return e.complexity.CarrierServicePostNord.Label(childComplexity), true

	case "CarrierServiceUSPS.carrierAdditionalServiceUSPS":
		if e.complexity.CarrierServiceUSPS.CarrierAdditionalServiceUSPS == nil {
			break
		}

		return e.complexity.CarrierServiceUSPS.CarrierAdditionalServiceUSPS(childComplexity), true

	case "CarrierServiceUSPS.carrierService":
		if e.complexity.CarrierServiceUSPS.CarrierService == nil {
			break
		}

		return e.complexity.CarrierServiceUSPS.CarrierService(childComplexity), true

	case "CarrierServiceUSPS.id":
		if e.complexity.CarrierServiceUSPS.ID == nil {
			break
		}

		return e.complexity.CarrierServiceUSPS.ID(childComplexity), true

	case "CarrierUSPS.carrier":
		if e.complexity.CarrierUSPS.Carrier == nil {
			break
		}

		return e.complexity.CarrierUSPS.Carrier(childComplexity), true

	case "CarrierUSPS.consumerKey":
		if e.complexity.CarrierUSPS.ConsumerKey == nil {
			break
		}

		return e.complexity.CarrierUSPS.ConsumerKey(childComplexity), true

	case "CarrierUSPS.consumerSecret":
		if e.complexity.CarrierUSPS.ConsumerSecret == nil {
			break
		}

		return e.complexity.CarrierUSPS.ConsumerSecret(childComplexity), true

	case "CarrierUSPS.crid":
		if e.complexity.CarrierUSPS.Crid == nil {
			break
		}

		return e.complexity.CarrierUSPS.Crid(childComplexity), true

	case "CarrierUSPS.epsAccountNumber":
		if e.complexity.CarrierUSPS.EpsAccountNumber == nil {
			break
		}

		return e.complexity.CarrierUSPS.EpsAccountNumber(childComplexity), true

	case "CarrierUSPS.id":
		if e.complexity.CarrierUSPS.ID == nil {
			break
		}

		return e.complexity.CarrierUSPS.ID(childComplexity), true

	case "CarrierUSPS.isTestAPI":
		if e.complexity.CarrierUSPS.IsTestAPI == nil {
			break
		}

		return e.complexity.CarrierUSPS.IsTestAPI(childComplexity), true

	case "CarrierUSPS.manifestMid":
		if e.complexity.CarrierUSPS.ManifestMid == nil {
			break
		}

		return e.complexity.CarrierUSPS.ManifestMid(childComplexity), true

	case "CarrierUSPS.mid":
		if e.complexity.CarrierUSPS.Mid == nil {
			break
		}

		return e.complexity.CarrierUSPS.Mid(childComplexity), true

	case "CarrierUSPS.tenant":
		if e.complexity.CarrierUSPS.Tenant == nil {
			break
		}

		return e.complexity.CarrierUSPS.Tenant(childComplexity), true

	case "CarrierUSPS.tenantID":
		if e.complexity.CarrierUSPS.TenantID == nil {
			break
		}

		return e.complexity.CarrierUSPS.TenantID(childComplexity), true

	case "CarrierUSPSConnection.edges":
		if e.complexity.CarrierUSPSConnection.Edges == nil {
			break
		}

		return e.complexity.CarrierUSPSConnection.Edges(childComplexity), true

	case "CarrierUSPSConnection.pageInfo":
		if e.complexity.CarrierUSPSConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarrierUSPSConnection.PageInfo(childComplexity), true

	case "CarrierUSPSConnection.totalCount":
		if e.complexity.CarrierUSPSConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarrierUSPSConnection.TotalCount(childComplexity), true

	case "CarrierUSPSEdge.cursor":
		if e.complexity.CarrierUSPSEdge.Cursor == nil {
			break
		}

		return e.complexity.CarrierUSPSEdge.Cursor(childComplexity), true

	case "CarrierUSPSEdge.node":
		if e.complexity.CarrierUSPSEdge.Node == nil {
			break
		}

		return e.complexity.CarrierUSPSEdge.Node(childComplexity), true

	case "ChangeHistory.createdAt":
		if e.complexity.ChangeHistory.CreatedAt == nil {
			break
		}

		return e.complexity.ChangeHistory.CreatedAt(childComplexity), true

	case "ChangeHistory.id":
		if e.complexity.ChangeHistory.ID == nil {
			break
		}

		return e.complexity.ChangeHistory.ID(childComplexity), true

	case "ChangeHistory.orderHistory":
		if e.complexity.ChangeHistory.OrderHistory == nil {
			break
		}

		return e.complexity.ChangeHistory.OrderHistory(childComplexity), true

	case "ChangeHistory.origin":
		if e.complexity.ChangeHistory.Origin == nil {
			break
		}

		return e.complexity.ChangeHistory.Origin(childComplexity), true

	case "ChangeHistory.planHistory":
		if e.complexity.ChangeHistory.PlanHistory == nil {
			break
		}

		return e.complexity.ChangeHistory.PlanHistory(childComplexity), true

	case "ChangeHistory.returnColliHistory":
		if e.complexity.ChangeHistory.ReturnColliHistory == nil {
			break
		}

		return e.complexity.ChangeHistory.ReturnColliHistory(childComplexity), true

	case "ChangeHistory.shipmentHistory":
		if e.complexity.ChangeHistory.ShipmentHistory == nil {
			break
		}

		return e.complexity.ChangeHistory.ShipmentHistory(childComplexity), true

	case "ChangeHistory.tenant":
		if e.complexity.ChangeHistory.Tenant == nil {
			break
		}

		return e.complexity.ChangeHistory.Tenant(childComplexity), true

	case "ChangeHistory.tenantID":
		if e.complexity.ChangeHistory.TenantID == nil {
			break
		}

		return e.complexity.ChangeHistory.TenantID(childComplexity), true

	case "ChangeHistory.user":
		if e.complexity.ChangeHistory.User == nil {
			break
		}

		return e.complexity.ChangeHistory.User(childComplexity), true

	case "ChangeHistoryConnection.edges":
		if e.complexity.ChangeHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ChangeHistoryConnection.Edges(childComplexity), true

	case "ChangeHistoryConnection.pageInfo":
		if e.complexity.ChangeHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ChangeHistoryConnection.PageInfo(childComplexity), true

	case "ChangeHistoryConnection.totalCount":
		if e.complexity.ChangeHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ChangeHistoryConnection.TotalCount(childComplexity), true

	case "ChangeHistoryEdge.cursor":
		if e.complexity.ChangeHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ChangeHistoryEdge.Cursor(childComplexity), true

	case "ChangeHistoryEdge.node":
		if e.complexity.ChangeHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ChangeHistoryEdge.Node(childComplexity), true

	case "Colli.cancelledShipmentParcel":
		if e.complexity.Colli.CancelledShipmentParcel == nil {
			break
		}

		return e.complexity.Colli.CancelledShipmentParcel(childComplexity), true

	case "Colli.clickCollectLocation":
		if e.complexity.Colli.ClickCollectLocation == nil {
			break
		}

		return e.complexity.Colli.ClickCollectLocation(childComplexity), true

	case "Colli.createdAt":
		if e.complexity.Colli.CreatedAt == nil {
			break
		}

		return e.complexity.Colli.CreatedAt(childComplexity), true

	case "Colli.deliveryOption":
		if e.complexity.Colli.DeliveryOption == nil {
			break
		}

		return e.complexity.Colli.DeliveryOption(childComplexity), true

	case "Colli.documentFile":
		if e.complexity.Colli.DocumentFile == nil {
			break
		}

		return e.complexity.Colli.DocumentFile(childComplexity), true

	case "Colli.emailLabelPrintedAt":
		if e.complexity.Colli.EmailLabelPrintedAt == nil {
			break
		}

		return e.complexity.Colli.EmailLabelPrintedAt(childComplexity), true

	case "Colli.emailPackingSlipPrintedAt":
		if e.complexity.Colli.EmailPackingSlipPrintedAt == nil {
			break
		}

		return e.complexity.Colli.EmailPackingSlipPrintedAt(childComplexity), true

	case "Colli.id":
		if e.complexity.Colli.ID == nil {
			break
		}

		return e.complexity.Colli.ID(childComplexity), true

	case "Colli.internalBarcode":
		if e.complexity.Colli.InternalBarcode == nil {
			break
		}

		return e.complexity.Colli.InternalBarcode(childComplexity), true

	case "Colli.order":
		if e.complexity.Colli.Order == nil {
			break
		}

		return e.complexity.Colli.Order(childComplexity), true

	case "Colli.orderLines":
		if e.complexity.Colli.OrderLines == nil {
			break
		}

		return e.complexity.Colli.OrderLines(childComplexity), true

	case "Colli.packaging":
		if e.complexity.Colli.Packaging == nil {
			break
		}

		return e.complexity.Colli.Packaging(childComplexity), true

	case "Colli.parcelShop":
		if e.complexity.Colli.ParcelShop == nil {
			break
		}

		return e.complexity.Colli.ParcelShop(childComplexity), true

	case "Colli.printJob":
		if e.complexity.Colli.PrintJob == nil {
			break
		}

		return e.complexity.Colli.PrintJob(childComplexity), true

	case "Colli.recipient":
		if e.complexity.Colli.Recipient == nil {
			break
		}

		return e.complexity.Colli.Recipient(childComplexity), true

	case "Colli.sender":
		if e.complexity.Colli.Sender == nil {
			break
		}

		return e.complexity.Colli.Sender(childComplexity), true

	case "Colli.shipmentParcel":
		if e.complexity.Colli.ShipmentParcel == nil {
			break
		}

		return e.complexity.Colli.ShipmentParcel(childComplexity), true

	case "Colli.slipPrintStatus":
		if e.complexity.Colli.SlipPrintStatus == nil {
			break
		}

		return e.complexity.Colli.SlipPrintStatus(childComplexity), true

	case "Colli.status":
		if e.complexity.Colli.Status == nil {
			break
		}

		return e.complexity.Colli.Status(childComplexity), true

	case "Colli.tenant":
		if e.complexity.Colli.Tenant == nil {
			break
		}

		return e.complexity.Colli.Tenant(childComplexity), true

	case "Colli.tenantID":
		if e.complexity.Colli.TenantID == nil {
			break
		}

		return e.complexity.Colli.TenantID(childComplexity), true

	case "ColliConnection.edges":
		if e.complexity.ColliConnection.Edges == nil {
			break
		}

		return e.complexity.ColliConnection.Edges(childComplexity), true

	case "ColliConnection.pageInfo":
		if e.complexity.ColliConnection.PageInfo == nil {
			break
		}

		return e.complexity.ColliConnection.PageInfo(childComplexity), true

	case "ColliConnection.totalCount":
		if e.complexity.ColliConnection.TotalCount == nil {
			break
		}

		return e.complexity.ColliConnection.TotalCount(childComplexity), true

	case "ColliEdge.cursor":
		if e.complexity.ColliEdge.Cursor == nil {
			break
		}

		return e.complexity.ColliEdge.Cursor(childComplexity), true

	case "ColliEdge.node":
		if e.complexity.ColliEdge.Node == nil {
			break
		}

		return e.complexity.ColliEdge.Node(childComplexity), true

	case "ConnectOptionCarrier.id":
		if e.complexity.ConnectOptionCarrier.ID == nil {
			break
		}

		return e.complexity.ConnectOptionCarrier.ID(childComplexity), true

	case "ConnectOptionCarrier.name":
		if e.complexity.ConnectOptionCarrier.Name == nil {
			break
		}

		return e.complexity.ConnectOptionCarrier.Name(childComplexity), true

	case "ConnectOptionCarrier.tenant":
		if e.complexity.ConnectOptionCarrier.Tenant == nil {
			break
		}

		return e.complexity.ConnectOptionCarrier.Tenant(childComplexity), true

	case "ConnectOptionCarrierConnection.edges":
		if e.complexity.ConnectOptionCarrierConnection.Edges == nil {
			break
		}

		return e.complexity.ConnectOptionCarrierConnection.Edges(childComplexity), true

	case "ConnectOptionCarrierConnection.pageInfo":
		if e.complexity.ConnectOptionCarrierConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConnectOptionCarrierConnection.PageInfo(childComplexity), true

	case "ConnectOptionCarrierConnection.totalCount":
		if e.complexity.ConnectOptionCarrierConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConnectOptionCarrierConnection.TotalCount(childComplexity), true

	case "ConnectOptionCarrierEdge.cursor":
		if e.complexity.ConnectOptionCarrierEdge.Cursor == nil {
			break
		}

		return e.complexity.ConnectOptionCarrierEdge.Cursor(childComplexity), true

	case "ConnectOptionCarrierEdge.node":
		if e.complexity.ConnectOptionCarrierEdge.Node == nil {
			break
		}

		return e.complexity.ConnectOptionCarrierEdge.Node(childComplexity), true

	case "ConnectOptionPlatform.id":
		if e.complexity.ConnectOptionPlatform.ID == nil {
			break
		}

		return e.complexity.ConnectOptionPlatform.ID(childComplexity), true

	case "ConnectOptionPlatform.name":
		if e.complexity.ConnectOptionPlatform.Name == nil {
			break
		}

		return e.complexity.ConnectOptionPlatform.Name(childComplexity), true

	case "ConnectOptionPlatform.tenant":
		if e.complexity.ConnectOptionPlatform.Tenant == nil {
			break
		}

		return e.complexity.ConnectOptionPlatform.Tenant(childComplexity), true

	case "ConnectOptionPlatformConnection.edges":
		if e.complexity.ConnectOptionPlatformConnection.Edges == nil {
			break
		}

		return e.complexity.ConnectOptionPlatformConnection.Edges(childComplexity), true

	case "ConnectOptionPlatformConnection.pageInfo":
		if e.complexity.ConnectOptionPlatformConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConnectOptionPlatformConnection.PageInfo(childComplexity), true

	case "ConnectOptionPlatformConnection.totalCount":
		if e.complexity.ConnectOptionPlatformConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConnectOptionPlatformConnection.TotalCount(childComplexity), true

	case "ConnectOptionPlatformEdge.cursor":
		if e.complexity.ConnectOptionPlatformEdge.Cursor == nil {
			break
		}

		return e.complexity.ConnectOptionPlatformEdge.Cursor(childComplexity), true

	case "ConnectOptionPlatformEdge.node":
		if e.complexity.ConnectOptionPlatformEdge.Node == nil {
			break
		}

		return e.complexity.ConnectOptionPlatformEdge.Node(childComplexity), true

	case "Connection.autoPrintParcelSlip":
		if e.complexity.Connection.AutoPrintParcelSlip == nil {
			break
		}

		return e.complexity.Connection.AutoPrintParcelSlip(childComplexity), true

	case "Connection.connectionBrand":
		if e.complexity.Connection.ConnectionBrand == nil {
			break
		}

		return e.complexity.Connection.ConnectionBrand(childComplexity), true

	case "Connection.connectionLookup":
		if e.complexity.Connection.ConnectionLookup == nil {
			break
		}

		return e.complexity.Connection.ConnectionLookup(childComplexity), true

	case "Connection.connectionShopify":
		if e.complexity.Connection.ConnectionShopify == nil {
			break
		}

		return e.complexity.Connection.ConnectionShopify(childComplexity), true

	case "Connection.convertCurrency":
		if e.complexity.Connection.ConvertCurrency == nil {
			break
		}

		return e.complexity.Connection.ConvertCurrency(childComplexity), true

	case "Connection.currency":
		if e.complexity.Connection.Currency == nil {
			break
		}

		return e.complexity.Connection.Currency(childComplexity), true

	case "Connection.defaultDeliveryOption":
		if e.complexity.Connection.DefaultDeliveryOption == nil {
			break
		}

		return e.complexity.Connection.DefaultDeliveryOption(childComplexity), true

	case "Connection.deliveryOption":
		if e.complexity.Connection.DeliveryOption == nil {
			break
		}

		return e.complexity.Connection.DeliveryOption(childComplexity), true

	case "Connection.dispatchAutomatically":
		if e.complexity.Connection.DispatchAutomatically == nil {
			break
		}

		return e.complexity.Connection.DispatchAutomatically(childComplexity), true

	case "Connection.fulfillAutomatically":
		if e.complexity.Connection.FulfillAutomatically == nil {
			break
		}

		return e.complexity.Connection.FulfillAutomatically(childComplexity), true

	case "Connection.hypothesisTest":
		if e.complexity.Connection.HypothesisTest == nil {
			break
		}

		return e.complexity.Connection.HypothesisTest(childComplexity), true

	case "Connection.id":
		if e.complexity.Connection.ID == nil {
			break
		}

		return e.complexity.Connection.ID(childComplexity), true

	case "Connection.name":
		if e.complexity.Connection.Name == nil {
			break
		}

		return e.complexity.Connection.Name(childComplexity), true

	case "Connection.notifications":
		if e.complexity.Connection.Notifications == nil {
			break
		}

		return e.complexity.Connection.Notifications(childComplexity), true

	case "Connection.orders":
		if e.complexity.Connection.Orders == nil {
			break
		}

		return e.complexity.Connection.Orders(childComplexity), true

	case "Connection.packingSlipTemplate":
		if e.complexity.Connection.PackingSlipTemplate == nil {
			break
		}

		return e.complexity.Connection.PackingSlipTemplate(childComplexity), true

	case "Connection.pickupLocation":
		if e.complexity.Connection.PickupLocation == nil {
			break
		}

		return e.complexity.Connection.PickupLocation(childComplexity), true

	case "Connection.returnLocation":
		if e.complexity.Connection.ReturnLocation == nil {
			break
		}

		return e.complexity.Connection.ReturnLocation(childComplexity), true

	case "Connection.returnPortal":
		if e.complexity.Connection.ReturnPortal == nil {
			break
		}

		return e.complexity.Connection.ReturnPortal(childComplexity), true

	case "Connection.sellerLocation":
		if e.complexity.Connection.SellerLocation == nil {
			break
		}

		return e.complexity.Connection.SellerLocation(childComplexity), true

	case "Connection.senderLocation":
		if e.complexity.Connection.SenderLocation == nil {
			break
		}

		return e.complexity.Connection.SenderLocation(childComplexity), true

	case "Connection.syncOrders":
		if e.complexity.Connection.SyncOrders == nil {
			break
		}

		return e.complexity.Connection.SyncOrders(childComplexity), true

	case "Connection.syncProducts":
		if e.complexity.Connection.SyncProducts == nil {
			break
		}

		return e.complexity.Connection.SyncProducts(childComplexity), true

	case "Connection.tenant":
		if e.complexity.Connection.Tenant == nil {
			break
		}

		return e.complexity.Connection.Tenant(childComplexity), true

	case "Connection.tenantID":
		if e.complexity.Connection.TenantID == nil {
			break
		}

		return e.complexity.Connection.TenantID(childComplexity), true

	case "ConnectionBrand.connection":
		if e.complexity.ConnectionBrand.Connection == nil {
			break
		}

		return e.complexity.ConnectionBrand.Connection(childComplexity), true

	case "ConnectionBrand.id":
		if e.complexity.ConnectionBrand.ID == nil {
			break
		}

		return e.complexity.ConnectionBrand.ID(childComplexity), true

	case "ConnectionBrand.internalID":
		if e.complexity.ConnectionBrand.InternalID == nil {
			break
		}

		return e.complexity.ConnectionBrand.InternalID(childComplexity), true

	case "ConnectionBrand.label":
		if e.complexity.ConnectionBrand.Label == nil {
			break
		}

		return e.complexity.ConnectionBrand.Label(childComplexity), true

	case "ConnectionBrand.logoURL":
		if e.complexity.ConnectionBrand.LogoURL == nil {
			break
		}

		return e.complexity.ConnectionBrand.LogoURL(childComplexity), true

	case "ConnectionBrandConnection.edges":
		if e.complexity.ConnectionBrandConnection.Edges == nil {
			break
		}

		return e.complexity.ConnectionBrandConnection.Edges(childComplexity), true

	case "ConnectionBrandConnection.pageInfo":
		if e.complexity.ConnectionBrandConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConnectionBrandConnection.PageInfo(childComplexity), true

	case "ConnectionBrandConnection.totalCount":
		if e.complexity.ConnectionBrandConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConnectionBrandConnection.TotalCount(childComplexity), true

	case "ConnectionBrandEdge.cursor":
		if e.complexity.ConnectionBrandEdge.Cursor == nil {
			break
		}

		return e.complexity.ConnectionBrandEdge.Cursor(childComplexity), true

	case "ConnectionBrandEdge.node":
		if e.complexity.ConnectionBrandEdge.Node == nil {
			break
		}

		return e.complexity.ConnectionBrandEdge.Node(childComplexity), true

	case "ConnectionConnection.edges":
		if e.complexity.ConnectionConnection.Edges == nil {
			break
		}

		return e.complexity.ConnectionConnection.Edges(childComplexity), true

	case "ConnectionConnection.pageInfo":
		if e.complexity.ConnectionConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConnectionConnection.PageInfo(childComplexity), true

	case "ConnectionConnection.totalCount":
		if e.complexity.ConnectionConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConnectionConnection.TotalCount(childComplexity), true

	case "ConnectionEdge.cursor":
		if e.complexity.ConnectionEdge.Cursor == nil {
			break
		}

		return e.complexity.ConnectionEdge.Cursor(childComplexity), true

	case "ConnectionEdge.node":
		if e.complexity.ConnectionEdge.Node == nil {
			break
		}

		return e.complexity.ConnectionEdge.Node(childComplexity), true

	case "ConnectionListItem.connectionBrand":
		if e.complexity.ConnectionListItem.ConnectionBrand == nil {
			break
		}

		return e.complexity.ConnectionListItem.ConnectionBrand(childComplexity), true

	case "ConnectionListItem.id":
		if e.complexity.ConnectionListItem.ID == nil {
			break
		}

		return e.complexity.ConnectionListItem.ID(childComplexity), true

	case "ConnectionListItem.name":
		if e.complexity.ConnectionListItem.Name == nil {
			break
		}

		return e.complexity.ConnectionListItem.Name(childComplexity), true

	case "ConnectionLookup.connections":
		if e.complexity.ConnectionLookup.Connections == nil {
			break
		}

		return e.complexity.ConnectionLookup.Connections(childComplexity), true

	case "ConnectionLookup.createdAt":
		if e.complexity.ConnectionLookup.CreatedAt == nil {
			break
		}

		return e.complexity.ConnectionLookup.CreatedAt(childComplexity), true

	case "ConnectionLookup.error":
		if e.complexity.ConnectionLookup.Error == nil {
			break
		}

		return e.complexity.ConnectionLookup.Error(childComplexity), true

	case "ConnectionLookup.id":
		if e.complexity.ConnectionLookup.ID == nil {
			break
		}

		return e.complexity.ConnectionLookup.ID(childComplexity), true

	case "ConnectionLookup.optionsOutputCount":
		if e.complexity.ConnectionLookup.OptionsOutputCount == nil {
			break
		}

		return e.complexity.ConnectionLookup.OptionsOutputCount(childComplexity), true

	case "ConnectionLookup.payload":
		if e.complexity.ConnectionLookup.Payload == nil {
			break
		}

		return e.complexity.ConnectionLookup.Payload(childComplexity), true

	case "ConnectionLookup.tenant":
		if e.complexity.ConnectionLookup.Tenant == nil {
			break
		}

		return e.complexity.ConnectionLookup.Tenant(childComplexity), true

	case "ConnectionLookup.tenantID":
		if e.complexity.ConnectionLookup.TenantID == nil {
			break
		}

		return e.complexity.ConnectionLookup.TenantID(childComplexity), true

	case "ConnectionLookupConnection.edges":
		if e.complexity.ConnectionLookupConnection.Edges == nil {
			break
		}

		return e.complexity.ConnectionLookupConnection.Edges(childComplexity), true

	case "ConnectionLookupConnection.pageInfo":
		if e.complexity.ConnectionLookupConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConnectionLookupConnection.PageInfo(childComplexity), true

	case "ConnectionLookupConnection.totalCount":
		if e.complexity.ConnectionLookupConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConnectionLookupConnection.TotalCount(childComplexity), true

	case "ConnectionLookupEdge.cursor":
		if e.complexity.ConnectionLookupEdge.Cursor == nil {
			break
		}

		return e.complexity.ConnectionLookupEdge.Cursor(childComplexity), true

	case "ConnectionLookupEdge.node":
		if e.complexity.ConnectionLookupEdge.Node == nil {
			break
		}

		return e.complexity.ConnectionLookupEdge.Node(childComplexity), true

	case "ConnectionShopify.apiKey":
		if e.complexity.ConnectionShopify.APIKey == nil {
			break
		}

		return e.complexity.ConnectionShopify.APIKey(childComplexity), true

	case "ConnectionShopify.connection":
		if e.complexity.ConnectionShopify.Connection == nil {
			break
		}

		return e.complexity.ConnectionShopify.Connection(childComplexity), true

	case "ConnectionShopify.filterTags":
		if e.complexity.ConnectionShopify.FilterTags == nil {
			break
		}

		return e.complexity.ConnectionShopify.FilterTags(childComplexity), true

	case "ConnectionShopify.id":
		if e.complexity.ConnectionShopify.ID == nil {
			break
		}

		return e.complexity.ConnectionShopify.ID(childComplexity), true

	case "ConnectionShopify.lookupKey":
		if e.complexity.ConnectionShopify.LookupKey == nil {
			break
		}

		return e.complexity.ConnectionShopify.LookupKey(childComplexity), true

	case "ConnectionShopify.rateIntegration":
		if e.complexity.ConnectionShopify.RateIntegration == nil {
			break
		}

		return e.complexity.ConnectionShopify.RateIntegration(childComplexity), true

	case "ConnectionShopify.storeURL":
		if e.complexity.ConnectionShopify.StoreURL == nil {
			break
		}

		return e.complexity.ConnectionShopify.StoreURL(childComplexity), true

	case "ConnectionShopify.syncFrom":
		if e.complexity.ConnectionShopify.SyncFrom == nil {
			break
		}

		return e.complexity.ConnectionShopify.SyncFrom(childComplexity), true

	case "ConnectionShopify.tenant":
		if e.complexity.ConnectionShopify.Tenant == nil {
			break
		}

		return e.complexity.ConnectionShopify.Tenant(childComplexity), true

	case "ConnectionShopify.tenantID":
		if e.complexity.ConnectionShopify.TenantID == nil {
			break
		}

		return e.complexity.ConnectionShopify.TenantID(childComplexity), true

	case "ConnectionShopifyConnection.edges":
		if e.complexity.ConnectionShopifyConnection.Edges == nil {
			break
		}

		return e.complexity.ConnectionShopifyConnection.Edges(childComplexity), true

	case "ConnectionShopifyConnection.pageInfo":
		if e.complexity.ConnectionShopifyConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConnectionShopifyConnection.PageInfo(childComplexity), true

	case "ConnectionShopifyConnection.totalCount":
		if e.complexity.ConnectionShopifyConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConnectionShopifyConnection.TotalCount(childComplexity), true

	case "ConnectionShopifyEdge.cursor":
		if e.complexity.ConnectionShopifyEdge.Cursor == nil {
			break
		}

		return e.complexity.ConnectionShopifyEdge.Cursor(childComplexity), true

	case "ConnectionShopifyEdge.node":
		if e.complexity.ConnectionShopifyEdge.Node == nil {
			break
		}

		return e.complexity.ConnectionShopifyEdge.Node(childComplexity), true

	case "Consolidation.cancelledShipments":
		if e.complexity.Consolidation.CancelledShipments == nil {
			break
		}

		return e.complexity.Consolidation.CancelledShipments(childComplexity), true

	case "Consolidation.createdAt":
		if e.complexity.Consolidation.CreatedAt == nil {
			break
		}

		return e.complexity.Consolidation.CreatedAt(childComplexity), true

	case "Consolidation.deliveryOption":
		if e.complexity.Consolidation.DeliveryOption == nil {
			break
		}

		return e.complexity.Consolidation.DeliveryOption(childComplexity), true

	case "Consolidation.description":
		if e.complexity.Consolidation.Description == nil {
			break
		}

		return e.complexity.Consolidation.Description(childComplexity), true

	case "Consolidation.id":
		if e.complexity.Consolidation.ID == nil {
			break
		}

		return e.complexity.Consolidation.ID(childComplexity), true

	case "Consolidation.orders":
		if e.complexity.Consolidation.Orders == nil {
			break
		}

		return e.complexity.Consolidation.Orders(childComplexity), true

	case "Consolidation.pallets":
		if e.complexity.Consolidation.Pallets == nil {
			break
		}

		return e.complexity.Consolidation.Pallets(childComplexity), true

	case "Consolidation.publicID":
		if e.complexity.Consolidation.PublicID == nil {
			break
		}

		return e.complexity.Consolidation.PublicID(childComplexity), true

	case "Consolidation.recipient":
		if e.complexity.Consolidation.Recipient == nil {
			break
		}

		return e.complexity.Consolidation.Recipient(childComplexity), true

	case "Consolidation.sender":
		if e.complexity.Consolidation.Sender == nil {
			break
		}

		return e.complexity.Consolidation.Sender(childComplexity), true

	case "Consolidation.shipment":
		if e.complexity.Consolidation.Shipment == nil {
			break
		}

		return e.complexity.Consolidation.Shipment(childComplexity), true

	case "Consolidation.status":
		if e.complexity.Consolidation.Status == nil {
			break
		}

		return e.complexity.Consolidation.Status(childComplexity), true

	case "Consolidation.tenant":
		if e.complexity.Consolidation.Tenant == nil {
			break
		}

		return e.complexity.Consolidation.Tenant(childComplexity), true

	case "Consolidation.tenantID":
		if e.complexity.Consolidation.TenantID == nil {
			break
		}

		return e.complexity.Consolidation.TenantID(childComplexity), true

	case "ConsolidationConnection.edges":
		if e.complexity.ConsolidationConnection.Edges == nil {
			break
		}

		return e.complexity.ConsolidationConnection.Edges(childComplexity), true

	case "ConsolidationConnection.pageInfo":
		if e.complexity.ConsolidationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConsolidationConnection.PageInfo(childComplexity), true

	case "ConsolidationConnection.totalCount":
		if e.complexity.ConsolidationConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConsolidationConnection.TotalCount(childComplexity), true

	case "ConsolidationEdge.cursor":
		if e.complexity.ConsolidationEdge.Cursor == nil {
			break
		}

		return e.complexity.ConsolidationEdge.Cursor(childComplexity), true

	case "ConsolidationEdge.node":
		if e.complexity.ConsolidationEdge.Node == nil {
			break
		}

		return e.complexity.ConsolidationEdge.Node(childComplexity), true

	case "ConsolidationShipmentStatus.mayBook":
		if e.complexity.ConsolidationShipmentStatus.MayBook == nil {
			break
		}

		return e.complexity.ConsolidationShipmentStatus.MayBook(childComplexity), true

	case "ConsolidationShipmentStatus.mayPrebook":
		if e.complexity.ConsolidationShipmentStatus.MayPrebook == nil {
			break
		}

		return e.complexity.ConsolidationShipmentStatus.MayPrebook(childComplexity), true

	case "ConsolidationShipmentStatus.shipment":
		if e.complexity.ConsolidationShipmentStatus.Shipment == nil {
			break
		}

		return e.complexity.ConsolidationShipmentStatus.Shipment(childComplexity), true

	case "Contact.adminContact":
		if e.complexity.Contact.AdminContact == nil {
			break
		}

		return e.complexity.Contact.AdminContact(childComplexity), true

	case "Contact.billingContact":
		if e.complexity.Contact.BillingContact == nil {
			break
		}

		return e.complexity.Contact.BillingContact(childComplexity), true

	case "Contact.email":
		if e.complexity.Contact.Email == nil {
			break
		}

		return e.complexity.Contact.Email(childComplexity), true

	case "Contact.id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.name":
		if e.complexity.Contact.Name == nil {
			break
		}

		return e.complexity.Contact.Name(childComplexity), true

	case "Contact.phoneNumber":
		if e.complexity.Contact.PhoneNumber == nil {
			break
		}

		return e.complexity.Contact.PhoneNumber(childComplexity), true

	case "Contact.surname":
		if e.complexity.Contact.Surname == nil {
			break
		}

		return e.complexity.Contact.Surname(childComplexity), true

	case "Contact.tenant":
		if e.complexity.Contact.Tenant == nil {
			break
		}

		return e.complexity.Contact.Tenant(childComplexity), true

	case "Contact.tenantID":
		if e.complexity.Contact.TenantID == nil {
			break
		}

		return e.complexity.Contact.TenantID(childComplexity), true

	case "ContactConnection.edges":
		if e.complexity.ContactConnection.Edges == nil {
			break
		}

		return e.complexity.ContactConnection.Edges(childComplexity), true

	case "ContactConnection.pageInfo":
		if e.complexity.ContactConnection.PageInfo == nil {
			break
		}

		return e.complexity.ContactConnection.PageInfo(childComplexity), true

	case "ContactConnection.totalCount":
		if e.complexity.ContactConnection.TotalCount == nil {
			break
		}

		return e.complexity.ContactConnection.TotalCount(childComplexity), true

	case "ContactEdge.cursor":
		if e.complexity.ContactEdge.Cursor == nil {
			break
		}

		return e.complexity.ContactEdge.Cursor(childComplexity), true

	case "ContactEdge.node":
		if e.complexity.ContactEdge.Node == nil {
			break
		}

		return e.complexity.ContactEdge.Node(childComplexity), true

	case "Country.address":
		if e.complexity.Country.Address == nil {
			break
		}

		return e.complexity.Country.Address(childComplexity), true

	case "Country.addressGlobal":
		if e.complexity.Country.AddressGlobal == nil {
			break
		}

		return e.complexity.Country.AddressGlobal(childComplexity), true

	case "Country.alpha2":
		if e.complexity.Country.Alpha2 == nil {
			break
		}

		return e.complexity.Country.Alpha2(childComplexity), true

	case "Country.alpha3":
		if e.complexity.Country.Alpha3 == nil {
			break
		}

		return e.complexity.Country.Alpha3(childComplexity), true

	case "Country.carrierAdditionalServiceGLSConsignee":
		if e.complexity.Country.CarrierAdditionalServiceGLSConsignee == nil {
			break
		}

		return e.complexity.Country.CarrierAdditionalServiceGLSConsignee(childComplexity), true

	case "Country.carrierAdditionalServiceGLSConsignor":
		if e.complexity.Country.CarrierAdditionalServiceGLSConsignor == nil {
			break
		}

		return e.complexity.Country.CarrierAdditionalServiceGLSConsignor(childComplexity), true

	case "Country.carrierAdditionalServicePostNordConsignee":
		if e.complexity.Country.CarrierAdditionalServicePostNordConsignee == nil {
			break
		}

		return e.complexity.Country.CarrierAdditionalServicePostNordConsignee(childComplexity), true

	case "Country.carrierAdditionalServicePostNordConsignor":
		if e.complexity.Country.CarrierAdditionalServicePostNordConsignor == nil {
			break
		}

		return e.complexity.Country.CarrierAdditionalServicePostNordConsignor(childComplexity), true

	case "Country.code":
		if e.complexity.Country.Code == nil {
			break
		}

		return e.complexity.Country.Code(childComplexity), true

	case "Country.countryHarmonizedCode":
		if e.complexity.Country.CountryHarmonizedCode == nil {
			break
		}

		return e.complexity.Country.CountryHarmonizedCode(childComplexity), true

	case "Country.deliveryRule":
		if e.complexity.Country.DeliveryRule == nil {
			break
		}

		return e.complexity.Country.DeliveryRule(childComplexity), true

	case "Country.id":
		if e.complexity.Country.ID == nil {
			break
		}

		return e.complexity.Country.ID(childComplexity), true

	case "Country.inventoryItem":
		if e.complexity.Country.InventoryItem == nil {
			break
		}

		return e.complexity.Country.InventoryItem(childComplexity), true

	case "Country.label":
		if e.complexity.Country.Label == nil {
			break
		}

		return e.complexity.Country.Label(childComplexity), true

	case "Country.region":
		if e.complexity.Country.Region == nil {
			break
		}

		return e.complexity.Country.Region(childComplexity), true

	case "CountryConnection.edges":
		if e.complexity.CountryConnection.Edges == nil {
			break
		}

		return e.complexity.CountryConnection.Edges(childComplexity), true

	case "CountryConnection.pageInfo":
		if e.complexity.CountryConnection.PageInfo == nil {
			break
		}

		return e.complexity.CountryConnection.PageInfo(childComplexity), true

	case "CountryConnection.totalCount":
		if e.complexity.CountryConnection.TotalCount == nil {
			break
		}

		return e.complexity.CountryConnection.TotalCount(childComplexity), true

	case "CountryEdge.cursor":
		if e.complexity.CountryEdge.Cursor == nil {
			break
		}

		return e.complexity.CountryEdge.Cursor(childComplexity), true

	case "CountryEdge.node":
		if e.complexity.CountryEdge.Node == nil {
			break
		}

		return e.complexity.CountryEdge.Node(childComplexity), true

	case "CountryHarmonizedCode.code":
		if e.complexity.CountryHarmonizedCode.Code == nil {
			break
		}

		return e.complexity.CountryHarmonizedCode.Code(childComplexity), true

	case "CountryHarmonizedCode.country":
		if e.complexity.CountryHarmonizedCode.Country == nil {
			break
		}

		return e.complexity.CountryHarmonizedCode.Country(childComplexity), true

	case "CountryHarmonizedCode.id":
		if e.complexity.CountryHarmonizedCode.ID == nil {
			break
		}

		return e.complexity.CountryHarmonizedCode.ID(childComplexity), true

	case "CountryHarmonizedCode.inventoryItem":
		if e.complexity.CountryHarmonizedCode.InventoryItem == nil {
			break
		}

		return e.complexity.CountryHarmonizedCode.InventoryItem(childComplexity), true

	case "CountryHarmonizedCode.tenant":
		if e.complexity.CountryHarmonizedCode.Tenant == nil {
			break
		}

		return e.complexity.CountryHarmonizedCode.Tenant(childComplexity), true

	case "CountryHarmonizedCode.tenantID":
		if e.complexity.CountryHarmonizedCode.TenantID == nil {
			break
		}

		return e.complexity.CountryHarmonizedCode.TenantID(childComplexity), true

	case "CountryHarmonizedCodeConnection.edges":
		if e.complexity.CountryHarmonizedCodeConnection.Edges == nil {
			break
		}

		return e.complexity.CountryHarmonizedCodeConnection.Edges(childComplexity), true

	case "CountryHarmonizedCodeConnection.pageInfo":
		if e.complexity.CountryHarmonizedCodeConnection.PageInfo == nil {
			break
		}

		return e.complexity.CountryHarmonizedCodeConnection.PageInfo(childComplexity), true

	case "CountryHarmonizedCodeConnection.totalCount":
		if e.complexity.CountryHarmonizedCodeConnection.TotalCount == nil {
			break
		}

		return e.complexity.CountryHarmonizedCodeConnection.TotalCount(childComplexity), true

	case "CountryHarmonizedCodeEdge.cursor":
		if e.complexity.CountryHarmonizedCodeEdge.Cursor == nil {
			break
		}

		return e.complexity.CountryHarmonizedCodeEdge.Cursor(childComplexity), true

	case "CountryHarmonizedCodeEdge.node":
		if e.complexity.CountryHarmonizedCodeEdge.Node == nil {
			break
		}

		return e.complexity.CountryHarmonizedCodeEdge.Node(childComplexity), true

	case "CreateAPITokenSuccess.id":
		if e.complexity.CreateAPITokenSuccess.ID == nil {
			break
		}

		return e.complexity.CreateAPITokenSuccess.ID(childComplexity), true

	case "CreateAPITokenSuccess.token":
		if e.complexity.CreateAPITokenSuccess.Token == nil {
			break
		}

		return e.complexity.CreateAPITokenSuccess.Token(childComplexity), true

	case "CreateCarrierAgreementSuccess.carrier":
		if e.complexity.CreateCarrierAgreementSuccess.Carrier == nil {
			break
		}

		return e.complexity.CreateCarrierAgreementSuccess.Carrier(childComplexity), true

	case "CreateCarrierAgreementSuccess.id":
		if e.complexity.CreateCarrierAgreementSuccess.ID == nil {
			break
		}

		return e.complexity.CreateCarrierAgreementSuccess.ID(childComplexity), true

	case "CreateDeliveryOptionSuccess.carrier":
		if e.complexity.CreateDeliveryOptionSuccess.Carrier == nil {
			break
		}

		return e.complexity.CreateDeliveryOptionSuccess.Carrier(childComplexity), true

	case "CreateDeliveryOptionSuccess.id":
		if e.complexity.CreateDeliveryOptionSuccess.ID == nil {
			break
		}

		return e.complexity.CreateDeliveryOptionSuccess.ID(childComplexity), true

	case "CreateShipmentConsolidationResponse.allLabels":
		if e.complexity.CreateShipmentConsolidationResponse.AllLabels == nil {
			break
		}

		return e.complexity.CreateShipmentConsolidationResponse.AllLabels(childComplexity), true

	case "CreateShipmentConsolidationResponse.labelsPDF":
		if e.complexity.CreateShipmentConsolidationResponse.LabelsPDF == nil {
			break
		}

		return e.complexity.CreateShipmentConsolidationResponse.LabelsPDF(childComplexity), true

	case "CreateShipmentConsolidationResponse.shipment":
		if e.complexity.CreateShipmentConsolidationResponse.Shipment == nil {
			break
		}

		return e.complexity.CreateShipmentConsolidationResponse.Shipment(childComplexity), true

	case "CreateShipmentsResponse.allLabels":
		if e.complexity.CreateShipmentsResponse.AllLabels == nil {
			break
		}

		return e.complexity.CreateShipmentsResponse.AllLabels(childComplexity), true

	case "CreateShipmentsResponse.labelsPDF":
		if e.complexity.CreateShipmentsResponse.LabelsPDF == nil {
			break
		}

		return e.complexity.CreateShipmentsResponse.LabelsPDF(childComplexity), true

	case "CreateShipmentsResponse.order":
		if e.complexity.CreateShipmentsResponse.Order == nil {
			break
		}

		return e.complexity.CreateShipmentsResponse.Order(childComplexity), true

	case "CreateShipmentsResponse.shipments":
		if e.complexity.CreateShipmentsResponse.Shipments == nil {
			break
		}

		return e.complexity.CreateShipmentsResponse.Shipments(childComplexity), true

	case "CreateWorkstationSuccess.id":
		if e.complexity.CreateWorkstationSuccess.ID == nil {
			break
		}

		return e.complexity.CreateWorkstationSuccess.ID(childComplexity), true

	case "CreateWorkstationSuccess.registrationToken":
		if e.complexity.CreateWorkstationSuccess.RegistrationToken == nil {
			break
		}

		return e.complexity.CreateWorkstationSuccess.RegistrationToken(childComplexity), true

	case "CreateWorkstationSuccess.registrationTokenImg":
		if e.complexity.CreateWorkstationSuccess.RegistrationTokenImg == nil {
			break
		}

		return e.complexity.CreateWorkstationSuccess.RegistrationTokenImg(childComplexity), true

	case "Currency.currencyCode":
		if e.complexity.Currency.CurrencyCode == nil {
			break
		}

		return e.complexity.Currency.CurrencyCode(childComplexity), true

	case "Currency.deliveryRule":
		if e.complexity.Currency.DeliveryRule == nil {
			break
		}

		return e.complexity.Currency.DeliveryRule(childComplexity), true

	case "Currency.display":
		if e.complexity.Currency.Display == nil {
			break
		}

		return e.complexity.Currency.Display(childComplexity), true

	case "Currency.id":
		if e.complexity.Currency.ID == nil {
			break
		}

		return e.complexity.Currency.ID(childComplexity), true

	case "Currency.orderLine":
		if e.complexity.Currency.OrderLine == nil {
			break
		}

		return e.complexity.Currency.OrderLine(childComplexity), true

	case "CurrencyConnection.edges":
		if e.complexity.CurrencyConnection.Edges == nil {
			break
		}

		return e.complexity.CurrencyConnection.Edges(childComplexity), true

	case "CurrencyConnection.pageInfo":
		if e.complexity.CurrencyConnection.PageInfo == nil {
			break
		}

		return e.complexity.CurrencyConnection.PageInfo(childComplexity), true

	case "CurrencyConnection.totalCount":
		if e.complexity.CurrencyConnection.TotalCount == nil {
			break
		}

		return e.complexity.CurrencyConnection.TotalCount(childComplexity), true

	case "CurrencyEdge.cursor":
		if e.complexity.CurrencyEdge.Cursor == nil {
			break
		}

		return e.complexity.CurrencyEdge.Cursor(childComplexity), true

	case "CurrencyEdge.node":
		if e.complexity.CurrencyEdge.Node == nil {
			break
		}

		return e.complexity.CurrencyEdge.Node(childComplexity), true

	case "DashboardHypothesisTestResult.ControlFailure":
		if e.complexity.DashboardHypothesisTestResult.ControlFailure == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.ControlFailure(childComplexity), true

	case "DashboardHypothesisTestResult.ControlSuccess":
		if e.complexity.DashboardHypothesisTestResult.ControlSuccess == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.ControlSuccess(childComplexity), true

	case "DashboardHypothesisTestResult.ControlWin":
		if e.complexity.DashboardHypothesisTestResult.ControlWin == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.ControlWin(childComplexity), true

	case "DashboardHypothesisTestResult.id":
		if e.complexity.DashboardHypothesisTestResult.ID == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.ID(childComplexity), true

	case "DashboardHypothesisTestResult.Name":
		if e.complexity.DashboardHypothesisTestResult.Name == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.Name(childComplexity), true

	case "DashboardHypothesisTestResult.SignificantlyDifferent":
		if e.complexity.DashboardHypothesisTestResult.SignificantlyDifferent == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.SignificantlyDifferent(childComplexity), true

	case "DashboardHypothesisTestResult.TestFailure":
		if e.complexity.DashboardHypothesisTestResult.TestFailure == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.TestFailure(childComplexity), true

	case "DashboardHypothesisTestResult.TestSuccess":
		if e.complexity.DashboardHypothesisTestResult.TestSuccess == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.TestSuccess(childComplexity), true

	case "DashboardHypothesisTestResult.TestWin":
		if e.complexity.DashboardHypothesisTestResult.TestWin == nil {
			break
		}

		return e.complexity.DashboardHypothesisTestResult.TestWin(childComplexity), true

	case "DashboardTile.id":
		if e.complexity.DashboardTile.ID == nil {
			break
		}

		return e.complexity.DashboardTile.ID(childComplexity), true

	case "DashboardTile.title":
		if e.complexity.DashboardTile.Title == nil {
			break
		}

		return e.complexity.DashboardTile.Title(childComplexity), true

	case "DashboardTile.value":
		if e.complexity.DashboardTile.Value == nil {
			break
		}

		return e.complexity.DashboardTile.Value(childComplexity), true

	case "DeliveryOption.archivedAt":
		if e.complexity.DeliveryOption.ArchivedAt == nil {
			break
		}

		return e.complexity.DeliveryOption.ArchivedAt(childComplexity), true

	case "DeliveryOption.carrier":
		if e.complexity.DeliveryOption.Carrier == nil {
			break
		}

		return e.complexity.DeliveryOption.Carrier(childComplexity), true

	case "DeliveryOption.carrierService":
		if e.complexity.DeliveryOption.CarrierService == nil {
			break
		}

		return e.complexity.DeliveryOption.CarrierService(childComplexity), true

	case "DeliveryOption.clickCollect":
		if e.complexity.DeliveryOption.ClickCollect == nil {
			break
		}

		return e.complexity.DeliveryOption.ClickCollect(childComplexity), true

	case "DeliveryOption.clickCollectLocation":
		if e.complexity.DeliveryOption.ClickCollectLocation == nil {
			break
		}

		return e.complexity.DeliveryOption.ClickCollectLocation(childComplexity), true

	case "DeliveryOption.clickOptionDisplayCount":
		if e.complexity.DeliveryOption.ClickOptionDisplayCount == nil {
			break
		}

		return e.complexity.DeliveryOption.ClickOptionDisplayCount(childComplexity), true

	case "DeliveryOption.colli":
		if e.complexity.DeliveryOption.Colli == nil {
			break
		}

		return e.complexity.DeliveryOption.Colli(childComplexity), true

	case "DeliveryOption.connection":
		if e.complexity.DeliveryOption.Connection == nil {
			break
		}

		return e.complexity.DeliveryOption.Connection(childComplexity), true

	case "DeliveryOption.connectionDefault":
		if e.complexity.DeliveryOption.ConnectionDefault == nil {
			break
		}

		return e.complexity.DeliveryOption.ConnectionDefault(childComplexity), true

	case "DeliveryOption.consolidation":
		if e.complexity.DeliveryOption.Consolidation == nil {
			break
		}

		return e.complexity.DeliveryOption.Consolidation(childComplexity), true

	case "DeliveryOption.customsEnabled":
		if e.complexity.DeliveryOption.CustomsEnabled == nil {
			break
		}

		return e.complexity.DeliveryOption.CustomsEnabled(childComplexity), true

	case "DeliveryOption.customsSigner":
		if e.complexity.DeliveryOption.CustomsSigner == nil {
			break
		}

		return e.complexity.DeliveryOption.CustomsSigner(childComplexity), true

	case "DeliveryOption.defaultPackaging":
		if e.complexity.DeliveryOption.DefaultPackaging == nil {
			break
		}

		return e.complexity.DeliveryOption.DefaultPackaging(childComplexity), true

	case "DeliveryOption.deliveryEstimateFrom":
		if e.complexity.DeliveryOption.DeliveryEstimateFrom == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryEstimateFrom(childComplexity), true

	case "DeliveryOption.deliveryEstimateTo":
		if e.complexity.DeliveryOption.DeliveryEstimateTo == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryEstimateTo(childComplexity), true

	case "DeliveryOption.deliveryOptionBring":
		if e.complexity.DeliveryOption.DeliveryOptionBring == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionBring(childComplexity), true

	case "DeliveryOption.deliveryOptionDAO":
		if e.complexity.DeliveryOption.DeliveryOptionDAO == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionDAO(childComplexity), true

	case "DeliveryOption.deliveryOptionDF":
		if e.complexity.DeliveryOption.DeliveryOptionDF == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionDF(childComplexity), true

	case "DeliveryOption.deliveryOptionDSV":
		if e.complexity.DeliveryOption.DeliveryOptionDSV == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionDSV(childComplexity), true

	case "DeliveryOption.deliveryOptionEasyPost":
		if e.complexity.DeliveryOption.DeliveryOptionEasyPost == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionEasyPost(childComplexity), true

	case "DeliveryOption.deliveryOptionGLS":
		if e.complexity.DeliveryOption.DeliveryOptionGLS == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionGLS(childComplexity), true

	case "DeliveryOption.deliveryOptionPostNord":
		if e.complexity.DeliveryOption.DeliveryOptionPostNord == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionPostNord(childComplexity), true

	case "DeliveryOption.deliveryOptionUSPS":
		if e.complexity.DeliveryOption.DeliveryOptionUSPS == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryOptionUSPS(childComplexity), true

	case "DeliveryOption.deliveryRule":
		if e.complexity.DeliveryOption.DeliveryRule == nil {
			break
		}

		return e.complexity.DeliveryOption.DeliveryRule(childComplexity), true

	case "DeliveryOption.description":
		if e.complexity.DeliveryOption.Description == nil {
			break
		}

		return e.complexity.DeliveryOption.Description(childComplexity), true

	case "DeliveryOption.emailClickCollectAtStore":
		if e.complexity.DeliveryOption.EmailClickCollectAtStore == nil {
			break
		}

		return e.complexity.DeliveryOption.EmailClickCollectAtStore(childComplexity), true

	case "DeliveryOption.hideDeliveryOption":
		if e.complexity.DeliveryOption.HideDeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOption.HideDeliveryOption(childComplexity), true

	case "DeliveryOption.hideIfCompanyEmpty":
		if e.complexity.DeliveryOption.HideIfCompanyEmpty == nil {
			break
		}

		return e.complexity.DeliveryOption.HideIfCompanyEmpty(childComplexity), true

	case "DeliveryOption.hypothesisTestDeliveryOptionGroupOne":
		if e.complexity.DeliveryOption.HypothesisTestDeliveryOptionGroupOne == nil {
			break
		}

		return e.complexity.DeliveryOption.HypothesisTestDeliveryOptionGroupOne(childComplexity), true

	case "DeliveryOption.hypothesisTestDeliveryOptionGroupTwo":
		if e.complexity.DeliveryOption.HypothesisTestDeliveryOptionGroupTwo == nil {
			break
		}

		return e.complexity.DeliveryOption.HypothesisTestDeliveryOptionGroupTwo(childComplexity), true

	case "DeliveryOption.hypothesisTestDeliveryOptionLookup":
		if e.complexity.DeliveryOption.HypothesisTestDeliveryOptionLookup == nil {
			break
		}

		return e.complexity.DeliveryOption.HypothesisTestDeliveryOptionLookup(childComplexity), true

	case "DeliveryOption.id":
		if e.complexity.DeliveryOption.ID == nil {
			break
		}

		return e.complexity.DeliveryOption.ID(childComplexity), true

	case "DeliveryOption.name":
		if e.complexity.DeliveryOption.Name == nil {
			break
		}

		return e.complexity.DeliveryOption.Name(childComplexity), true

	case "DeliveryOption.overrideReturnAddress":
		if e.complexity.DeliveryOption.OverrideReturnAddress == nil {
			break
		}

		return e.complexity.DeliveryOption.OverrideReturnAddress(childComplexity), true

	case "DeliveryOption.overrideSenderAddress":
		if e.complexity.DeliveryOption.OverrideSenderAddress == nil {
			break
		}

		return e.complexity.DeliveryOption.OverrideSenderAddress(childComplexity), true

	case "DeliveryOption.returnColli":
		if e.complexity.DeliveryOption.ReturnColli == nil {
			break
		}

		return e.complexity.DeliveryOption.ReturnColli(childComplexity), true

	case "DeliveryOption.returnPortals":
		if e.complexity.DeliveryOption.ReturnPortals == nil {
			break
		}

		return e.complexity.DeliveryOption.ReturnPortals(childComplexity), true

	case "DeliveryOption.shipmondoDeliveryOption":
		if e.complexity.DeliveryOption.ShipmondoDeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOption.ShipmondoDeliveryOption(childComplexity), true

	case "DeliveryOption.shipmondoIntegration":
		if e.complexity.DeliveryOption.ShipmondoIntegration == nil {
			break
		}

		return e.complexity.DeliveryOption.ShipmondoIntegration(childComplexity), true

	case "DeliveryOption.sortOrder":
		if e.complexity.DeliveryOption.SortOrder == nil {
			break
		}

		return e.complexity.DeliveryOption.SortOrder(childComplexity), true

	case "DeliveryOption.tenant":
		if e.complexity.DeliveryOption.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOption.Tenant(childComplexity), true

	case "DeliveryOption.tenantID":
		if e.complexity.DeliveryOption.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOption.TenantID(childComplexity), true

	case "DeliveryOption.webshipperID":
		if e.complexity.DeliveryOption.WebshipperID == nil {
			break
		}

		return e.complexity.DeliveryOption.WebshipperID(childComplexity), true

	case "DeliveryOption.webshipperIntegration":
		if e.complexity.DeliveryOption.WebshipperIntegration == nil {
			break
		}

		return e.complexity.DeliveryOption.WebshipperIntegration(childComplexity), true

	case "DeliveryOptionBrandName.clickAndCollect":
		if e.complexity.DeliveryOptionBrandName.ClickAndCollect == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.ClickAndCollect(childComplexity), true

	case "DeliveryOptionBrandName.currency":
		if e.complexity.DeliveryOptionBrandName.Currency == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.Currency(childComplexity), true

	case "DeliveryOptionBrandName.deliveryOptionID":
		if e.complexity.DeliveryOptionBrandName.DeliveryOptionID == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.DeliveryOptionID(childComplexity), true

	case "DeliveryOptionBrandName.deliveryPoint":
		if e.complexity.DeliveryOptionBrandName.DeliveryPoint == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.DeliveryPoint(childComplexity), true

	case "DeliveryOptionBrandName.description":
		if e.complexity.DeliveryOptionBrandName.Description == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.Description(childComplexity), true

	case "DeliveryOptionBrandName.name":
		if e.complexity.DeliveryOptionBrandName.Name == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.Name(childComplexity), true

	case "DeliveryOptionBrandName.price":
		if e.complexity.DeliveryOptionBrandName.Price == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.Price(childComplexity), true

	case "DeliveryOptionBrandName.requiresDeliveryPoint":
		if e.complexity.DeliveryOptionBrandName.RequiresDeliveryPoint == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.RequiresDeliveryPoint(childComplexity), true

	case "DeliveryOptionBrandName.status":
		if e.complexity.DeliveryOptionBrandName.Status == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.Status(childComplexity), true

	case "DeliveryOptionBrandName.warning":
		if e.complexity.DeliveryOptionBrandName.Warning == nil {
			break
		}

		return e.complexity.DeliveryOptionBrandName.Warning(childComplexity), true

	case "DeliveryOptionBring.carrierAdditionalServiceBring":
		if e.complexity.DeliveryOptionBring.CarrierAdditionalServiceBring == nil {
			break
		}

		return e.complexity.DeliveryOptionBring.CarrierAdditionalServiceBring(childComplexity), true

	case "DeliveryOptionBring.deliveryOption":
		if e.complexity.DeliveryOptionBring.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionBring.DeliveryOption(childComplexity), true

	case "DeliveryOptionBring.electronicCustoms":
		if e.complexity.DeliveryOptionBring.ElectronicCustoms == nil {
			break
		}

		return e.complexity.DeliveryOptionBring.ElectronicCustoms(childComplexity), true

	case "DeliveryOptionBring.id":
		if e.complexity.DeliveryOptionBring.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionBring.ID(childComplexity), true

	case "DeliveryOptionBring.tenant":
		if e.complexity.DeliveryOptionBring.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionBring.Tenant(childComplexity), true

	case "DeliveryOptionBring.tenantID":
		if e.complexity.DeliveryOptionBring.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionBring.TenantID(childComplexity), true

	case "DeliveryOptionBringConnection.edges":
		if e.complexity.DeliveryOptionBringConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionBringConnection.Edges(childComplexity), true

	case "DeliveryOptionBringConnection.pageInfo":
		if e.complexity.DeliveryOptionBringConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionBringConnection.PageInfo(childComplexity), true

	case "DeliveryOptionBringConnection.totalCount":
		if e.complexity.DeliveryOptionBringConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionBringConnection.TotalCount(childComplexity), true

	case "DeliveryOptionBringEdge.cursor":
		if e.complexity.DeliveryOptionBringEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionBringEdge.Cursor(childComplexity), true

	case "DeliveryOptionBringEdge.node":
		if e.complexity.DeliveryOptionBringEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionBringEdge.Node(childComplexity), true

	case "DeliveryOptionConnection.edges":
		if e.complexity.DeliveryOptionConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionConnection.Edges(childComplexity), true

	case "DeliveryOptionConnection.pageInfo":
		if e.complexity.DeliveryOptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionConnection.PageInfo(childComplexity), true

	case "DeliveryOptionConnection.totalCount":
		if e.complexity.DeliveryOptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionConnection.TotalCount(childComplexity), true

	case "DeliveryOptionDAO.carrierAdditionalServiceDAO":
		if e.complexity.DeliveryOptionDAO.CarrierAdditionalServiceDAO == nil {
			break
		}

		return e.complexity.DeliveryOptionDAO.CarrierAdditionalServiceDAO(childComplexity), true

	case "DeliveryOptionDAO.deliveryOption":
		if e.complexity.DeliveryOptionDAO.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionDAO.DeliveryOption(childComplexity), true

	case "DeliveryOptionDAO.id":
		if e.complexity.DeliveryOptionDAO.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionDAO.ID(childComplexity), true

	case "DeliveryOptionDAO.tenant":
		if e.complexity.DeliveryOptionDAO.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionDAO.Tenant(childComplexity), true

	case "DeliveryOptionDAO.tenantID":
		if e.complexity.DeliveryOptionDAO.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionDAO.TenantID(childComplexity), true

	case "DeliveryOptionDAOConnection.edges":
		if e.complexity.DeliveryOptionDAOConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionDAOConnection.Edges(childComplexity), true

	case "DeliveryOptionDAOConnection.pageInfo":
		if e.complexity.DeliveryOptionDAOConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionDAOConnection.PageInfo(childComplexity), true

	case "DeliveryOptionDAOConnection.totalCount":
		if e.complexity.DeliveryOptionDAOConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionDAOConnection.TotalCount(childComplexity), true

	case "DeliveryOptionDAOEdge.cursor":
		if e.complexity.DeliveryOptionDAOEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionDAOEdge.Cursor(childComplexity), true

	case "DeliveryOptionDAOEdge.node":
		if e.complexity.DeliveryOptionDAOEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionDAOEdge.Node(childComplexity), true

	case "DeliveryOptionDF.carrierAdditionalServiceDF":
		if e.complexity.DeliveryOptionDF.CarrierAdditionalServiceDF == nil {
			break
		}

		return e.complexity.DeliveryOptionDF.CarrierAdditionalServiceDF(childComplexity), true

	case "DeliveryOptionDF.deliveryOption":
		if e.complexity.DeliveryOptionDF.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionDF.DeliveryOption(childComplexity), true

	case "DeliveryOptionDF.id":
		if e.complexity.DeliveryOptionDF.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionDF.ID(childComplexity), true

	case "DeliveryOptionDF.tenant":
		if e.complexity.DeliveryOptionDF.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionDF.Tenant(childComplexity), true

	case "DeliveryOptionDF.tenantID":
		if e.complexity.DeliveryOptionDF.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionDF.TenantID(childComplexity), true

	case "DeliveryOptionDFConnection.edges":
		if e.complexity.DeliveryOptionDFConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionDFConnection.Edges(childComplexity), true

	case "DeliveryOptionDFConnection.pageInfo":
		if e.complexity.DeliveryOptionDFConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionDFConnection.PageInfo(childComplexity), true

	case "DeliveryOptionDFConnection.totalCount":
		if e.complexity.DeliveryOptionDFConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionDFConnection.TotalCount(childComplexity), true

	case "DeliveryOptionDFEdge.cursor":
		if e.complexity.DeliveryOptionDFEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionDFEdge.Cursor(childComplexity), true

	case "DeliveryOptionDFEdge.node":
		if e.complexity.DeliveryOptionDFEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionDFEdge.Node(childComplexity), true

	case "DeliveryOptionDSV.carrierAdditionalServiceDSV":
		if e.complexity.DeliveryOptionDSV.CarrierAdditionalServiceDSV == nil {
			break
		}

		return e.complexity.DeliveryOptionDSV.CarrierAdditionalServiceDSV(childComplexity), true

	case "DeliveryOptionDSV.deliveryOption":
		if e.complexity.DeliveryOptionDSV.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionDSV.DeliveryOption(childComplexity), true

	case "DeliveryOptionDSV.id":
		if e.complexity.DeliveryOptionDSV.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionDSV.ID(childComplexity), true

	case "DeliveryOptionDSV.tenant":
		if e.complexity.DeliveryOptionDSV.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionDSV.Tenant(childComplexity), true

	case "DeliveryOptionDSV.tenantID":
		if e.complexity.DeliveryOptionDSV.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionDSV.TenantID(childComplexity), true

	case "DeliveryOptionDSVConnection.edges":
		if e.complexity.DeliveryOptionDSVConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionDSVConnection.Edges(childComplexity), true

	case "DeliveryOptionDSVConnection.pageInfo":
		if e.complexity.DeliveryOptionDSVConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionDSVConnection.PageInfo(childComplexity), true

	case "DeliveryOptionDSVConnection.totalCount":
		if e.complexity.DeliveryOptionDSVConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionDSVConnection.TotalCount(childComplexity), true

	case "DeliveryOptionDSVEdge.cursor":
		if e.complexity.DeliveryOptionDSVEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionDSVEdge.Cursor(childComplexity), true

	case "DeliveryOptionDSVEdge.node":
		if e.complexity.DeliveryOptionDSVEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionDSVEdge.Node(childComplexity), true

	case "DeliveryOptionEasyPost.carrierAddServEasyPost":
		if e.complexity.DeliveryOptionEasyPost.CarrierAddServEasyPost == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPost.CarrierAddServEasyPost(childComplexity), true

	case "DeliveryOptionEasyPost.deliveryOption":
		if e.complexity.DeliveryOptionEasyPost.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPost.DeliveryOption(childComplexity), true

	case "DeliveryOptionEasyPost.id":
		if e.complexity.DeliveryOptionEasyPost.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPost.ID(childComplexity), true

	case "DeliveryOptionEasyPost.tenant":
		if e.complexity.DeliveryOptionEasyPost.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPost.Tenant(childComplexity), true

	case "DeliveryOptionEasyPost.tenantID":
		if e.complexity.DeliveryOptionEasyPost.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPost.TenantID(childComplexity), true

	case "DeliveryOptionEasyPostConnection.edges":
		if e.complexity.DeliveryOptionEasyPostConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPostConnection.Edges(childComplexity), true

	case "DeliveryOptionEasyPostConnection.pageInfo":
		if e.complexity.DeliveryOptionEasyPostConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPostConnection.PageInfo(childComplexity), true

	case "DeliveryOptionEasyPostConnection.totalCount":
		if e.complexity.DeliveryOptionEasyPostConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPostConnection.TotalCount(childComplexity), true

	case "DeliveryOptionEasyPostEdge.cursor":
		if e.complexity.DeliveryOptionEasyPostEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPostEdge.Cursor(childComplexity), true

	case "DeliveryOptionEasyPostEdge.node":
		if e.complexity.DeliveryOptionEasyPostEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionEasyPostEdge.Node(childComplexity), true

	case "DeliveryOptionEdge.cursor":
		if e.complexity.DeliveryOptionEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionEdge.Cursor(childComplexity), true

	case "DeliveryOptionEdge.node":
		if e.complexity.DeliveryOptionEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionEdge.Node(childComplexity), true

	case "DeliveryOptionGLS.carrierAdditionalServiceGLS":
		if e.complexity.DeliveryOptionGLS.CarrierAdditionalServiceGLS == nil {
			break
		}

		return e.complexity.DeliveryOptionGLS.CarrierAdditionalServiceGLS(childComplexity), true

	case "DeliveryOptionGLS.deliveryOption":
		if e.complexity.DeliveryOptionGLS.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionGLS.DeliveryOption(childComplexity), true

	case "DeliveryOptionGLS.id":
		if e.complexity.DeliveryOptionGLS.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionGLS.ID(childComplexity), true

	case "DeliveryOptionGLS.tenant":
		if e.complexity.DeliveryOptionGLS.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionGLS.Tenant(childComplexity), true

	case "DeliveryOptionGLS.tenantID":
		if e.complexity.DeliveryOptionGLS.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionGLS.TenantID(childComplexity), true

	case "DeliveryOptionGLSConnection.edges":
		if e.complexity.DeliveryOptionGLSConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionGLSConnection.Edges(childComplexity), true

	case "DeliveryOptionGLSConnection.pageInfo":
		if e.complexity.DeliveryOptionGLSConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionGLSConnection.PageInfo(childComplexity), true

	case "DeliveryOptionGLSConnection.totalCount":
		if e.complexity.DeliveryOptionGLSConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionGLSConnection.TotalCount(childComplexity), true

	case "DeliveryOptionGLSEdge.cursor":
		if e.complexity.DeliveryOptionGLSEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionGLSEdge.Cursor(childComplexity), true

	case "DeliveryOptionGLSEdge.node":
		if e.complexity.DeliveryOptionGLSEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionGLSEdge.Node(childComplexity), true

	case "DeliveryOptionPostNord.carrierAddServPostNord":
		if e.complexity.DeliveryOptionPostNord.CarrierAddServPostNord == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNord.CarrierAddServPostNord(childComplexity), true

	case "DeliveryOptionPostNord.deliveryOption":
		if e.complexity.DeliveryOptionPostNord.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNord.DeliveryOption(childComplexity), true

	case "DeliveryOptionPostNord.formatZpl":
		if e.complexity.DeliveryOptionPostNord.FormatZpl == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNord.FormatZpl(childComplexity), true

	case "DeliveryOptionPostNord.id":
		if e.complexity.DeliveryOptionPostNord.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNord.ID(childComplexity), true

	case "DeliveryOptionPostNord.tenant":
		if e.complexity.DeliveryOptionPostNord.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNord.Tenant(childComplexity), true

	case "DeliveryOptionPostNord.tenantID":
		if e.complexity.DeliveryOptionPostNord.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNord.TenantID(childComplexity), true

	case "DeliveryOptionPostNordConnection.edges":
		if e.complexity.DeliveryOptionPostNordConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNordConnection.Edges(childComplexity), true

	case "DeliveryOptionPostNordConnection.pageInfo":
		if e.complexity.DeliveryOptionPostNordConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNordConnection.PageInfo(childComplexity), true

	case "DeliveryOptionPostNordConnection.totalCount":
		if e.complexity.DeliveryOptionPostNordConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNordConnection.TotalCount(childComplexity), true

	case "DeliveryOptionPostNordEdge.cursor":
		if e.complexity.DeliveryOptionPostNordEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNordEdge.Cursor(childComplexity), true

	case "DeliveryOptionPostNordEdge.node":
		if e.complexity.DeliveryOptionPostNordEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionPostNordEdge.Node(childComplexity), true

	case "DeliveryOptionUSPS.carrierAdditionalServiceUSPS":
		if e.complexity.DeliveryOptionUSPS.CarrierAdditionalServiceUSPS == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPS.CarrierAdditionalServiceUSPS(childComplexity), true

	case "DeliveryOptionUSPS.deliveryOption":
		if e.complexity.DeliveryOptionUSPS.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPS.DeliveryOption(childComplexity), true

	case "DeliveryOptionUSPS.formatZpl":
		if e.complexity.DeliveryOptionUSPS.FormatZpl == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPS.FormatZpl(childComplexity), true

	case "DeliveryOptionUSPS.id":
		if e.complexity.DeliveryOptionUSPS.ID == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPS.ID(childComplexity), true

	case "DeliveryOptionUSPS.tenant":
		if e.complexity.DeliveryOptionUSPS.Tenant == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPS.Tenant(childComplexity), true

	case "DeliveryOptionUSPS.tenantID":
		if e.complexity.DeliveryOptionUSPS.TenantID == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPS.TenantID(childComplexity), true

	case "DeliveryOptionUSPSConnection.edges":
		if e.complexity.DeliveryOptionUSPSConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPSConnection.Edges(childComplexity), true

	case "DeliveryOptionUSPSConnection.pageInfo":
		if e.complexity.DeliveryOptionUSPSConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPSConnection.PageInfo(childComplexity), true

	case "DeliveryOptionUSPSConnection.totalCount":
		if e.complexity.DeliveryOptionUSPSConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPSConnection.TotalCount(childComplexity), true

	case "DeliveryOptionUSPSEdge.cursor":
		if e.complexity.DeliveryOptionUSPSEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPSEdge.Cursor(childComplexity), true

	case "DeliveryOptionUSPSEdge.node":
		if e.complexity.DeliveryOptionUSPSEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryOptionUSPSEdge.Node(childComplexity), true

	case "DeliveryPoint.address":
		if e.complexity.DeliveryPoint.Address == nil {
			break
		}

		return e.complexity.DeliveryPoint.Address(childComplexity), true

	case "DeliveryPoint.id":
		if e.complexity.DeliveryPoint.ID == nil {
			break
		}

		return e.complexity.DeliveryPoint.ID(childComplexity), true

	case "DeliveryPoint.name":
		if e.complexity.DeliveryPoint.Name == nil {
			break
		}

		return e.complexity.DeliveryPoint.Name(childComplexity), true

	case "DeliveryRule.country":
		if e.complexity.DeliveryRule.Country == nil {
			break
		}

		return e.complexity.DeliveryRule.Country(childComplexity), true

	case "DeliveryRule.currency":
		if e.complexity.DeliveryRule.Currency == nil {
			break
		}

		return e.complexity.DeliveryRule.Currency(childComplexity), true

	case "DeliveryRule.deliveryOption":
		if e.complexity.DeliveryRule.DeliveryOption == nil {
			break
		}

		return e.complexity.DeliveryRule.DeliveryOption(childComplexity), true

	case "DeliveryRule.deliveryRuleConstraintGroup":
		if e.complexity.DeliveryRule.DeliveryRuleConstraintGroup == nil {
			break
		}

		return e.complexity.DeliveryRule.DeliveryRuleConstraintGroup(childComplexity), true

	case "DeliveryRule.id":
		if e.complexity.DeliveryRule.ID == nil {
			break
		}

		return e.complexity.DeliveryRule.ID(childComplexity), true

	case "DeliveryRule.name":
		if e.complexity.DeliveryRule.Name == nil {
			break
		}

		return e.complexity.DeliveryRule.Name(childComplexity), true

	case "DeliveryRule.price":
		if e.complexity.DeliveryRule.Price == nil {
			break
		}

		return e.complexity.DeliveryRule.Price(childComplexity), true

	case "DeliveryRule.tenant":
		if e.complexity.DeliveryRule.Tenant == nil {
			break
		}

		return e.complexity.DeliveryRule.Tenant(childComplexity), true

	case "DeliveryRule.tenantID":
		if e.complexity.DeliveryRule.TenantID == nil {
			break
		}

		return e.complexity.DeliveryRule.TenantID(childComplexity), true

	case "DeliveryRuleConnection.edges":
		if e.complexity.DeliveryRuleConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryRuleConnection.Edges(childComplexity), true

	case "DeliveryRuleConnection.pageInfo":
		if e.complexity.DeliveryRuleConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryRuleConnection.PageInfo(childComplexity), true

	case "DeliveryRuleConnection.totalCount":
		if e.complexity.DeliveryRuleConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryRuleConnection.TotalCount(childComplexity), true

	case "DeliveryRuleConstraint.comparison":
		if e.complexity.DeliveryRuleConstraint.Comparison == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.Comparison(childComplexity), true

	case "DeliveryRuleConstraint.deliveryRuleConstraintGroup":
		if e.complexity.DeliveryRuleConstraint.DeliveryRuleConstraintGroup == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.DeliveryRuleConstraintGroup(childComplexity), true

	case "DeliveryRuleConstraint.id":
		if e.complexity.DeliveryRuleConstraint.ID == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.ID(childComplexity), true

	case "DeliveryRuleConstraint.propertyType":
		if e.complexity.DeliveryRuleConstraint.PropertyType == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.PropertyType(childComplexity), true

	case "DeliveryRuleConstraint.selectedValue":
		if e.complexity.DeliveryRuleConstraint.SelectedValue == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.SelectedValue(childComplexity), true

	case "DeliveryRuleConstraint.tenant":
		if e.complexity.DeliveryRuleConstraint.Tenant == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.Tenant(childComplexity), true

	case "DeliveryRuleConstraint.tenantID":
		if e.complexity.DeliveryRuleConstraint.TenantID == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraint.TenantID(childComplexity), true

	case "DeliveryRuleConstraintConnection.edges":
		if e.complexity.DeliveryRuleConstraintConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintConnection.Edges(childComplexity), true

	case "DeliveryRuleConstraintConnection.pageInfo":
		if e.complexity.DeliveryRuleConstraintConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintConnection.PageInfo(childComplexity), true

	case "DeliveryRuleConstraintConnection.totalCount":
		if e.complexity.DeliveryRuleConstraintConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintConnection.TotalCount(childComplexity), true

	case "DeliveryRuleConstraintEdge.cursor":
		if e.complexity.DeliveryRuleConstraintEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintEdge.Cursor(childComplexity), true

	case "DeliveryRuleConstraintEdge.node":
		if e.complexity.DeliveryRuleConstraintEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintEdge.Node(childComplexity), true

	case "DeliveryRuleConstraintGroup.constraintLogic":
		if e.complexity.DeliveryRuleConstraintGroup.ConstraintLogic == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroup.ConstraintLogic(childComplexity), true

	case "DeliveryRuleConstraintGroup.deliveryRule":
		if e.complexity.DeliveryRuleConstraintGroup.DeliveryRule == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroup.DeliveryRule(childComplexity), true

	case "DeliveryRuleConstraintGroup.deliveryRuleConstraints":
		if e.complexity.DeliveryRuleConstraintGroup.DeliveryRuleConstraints == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroup.DeliveryRuleConstraints(childComplexity), true

	case "DeliveryRuleConstraintGroup.id":
		if e.complexity.DeliveryRuleConstraintGroup.ID == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroup.ID(childComplexity), true

	case "DeliveryRuleConstraintGroup.tenant":
		if e.complexity.DeliveryRuleConstraintGroup.Tenant == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroup.Tenant(childComplexity), true

	case "DeliveryRuleConstraintGroup.tenantID":
		if e.complexity.DeliveryRuleConstraintGroup.TenantID == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroup.TenantID(childComplexity), true

	case "DeliveryRuleConstraintGroupConnection.edges":
		if e.complexity.DeliveryRuleConstraintGroupConnection.Edges == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroupConnection.Edges(childComplexity), true

	case "DeliveryRuleConstraintGroupConnection.pageInfo":
		if e.complexity.DeliveryRuleConstraintGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroupConnection.PageInfo(childComplexity), true

	case "DeliveryRuleConstraintGroupConnection.totalCount":
		if e.complexity.DeliveryRuleConstraintGroupConnection.TotalCount == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroupConnection.TotalCount(childComplexity), true

	case "DeliveryRuleConstraintGroupEdge.cursor":
		if e.complexity.DeliveryRuleConstraintGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroupEdge.Cursor(childComplexity), true

	case "DeliveryRuleConstraintGroupEdge.node":
		if e.complexity.DeliveryRuleConstraintGroupEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintGroupEdge.Node(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.dayOfWeek":
		if e.complexity.DeliveryRuleConstraintSelectedValue.DayOfWeek == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.DayOfWeek(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.ids":
		if e.complexity.DeliveryRuleConstraintSelectedValue.IDs == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.IDs(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.numeric":
		if e.complexity.DeliveryRuleConstraintSelectedValue.Numeric == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.Numeric(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.numericRange":
		if e.complexity.DeliveryRuleConstraintSelectedValue.NumericRange == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.NumericRange(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.text":
		if e.complexity.DeliveryRuleConstraintSelectedValue.Text == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.Text(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.timeOfDay":
		if e.complexity.DeliveryRuleConstraintSelectedValue.TimeOfDay == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.TimeOfDay(childComplexity), true

	case "DeliveryRuleConstraintSelectedValue.values":
		if e.complexity.DeliveryRuleConstraintSelectedValue.Values == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintSelectedValue.Values(childComplexity), true

	case "DeliveryRuleConstraintWithTags.constraint":
		if e.complexity.DeliveryRuleConstraintWithTags.Constraint == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintWithTags.Constraint(childComplexity), true

	case "DeliveryRuleConstraintWithTags.tags":
		if e.complexity.DeliveryRuleConstraintWithTags.Tags == nil {
			break
		}

		return e.complexity.DeliveryRuleConstraintWithTags.Tags(childComplexity), true

	case "DeliveryRuleEdge.cursor":
		if e.complexity.DeliveryRuleEdge.Cursor == nil {
			break
		}

		return e.complexity.DeliveryRuleEdge.Cursor(childComplexity), true

	case "DeliveryRuleEdge.node":
		if e.complexity.DeliveryRuleEdge.Node == nil {
			break
		}

		return e.complexity.DeliveryRuleEdge.Node(childComplexity), true

	case "Document.carrierBrand":
		if e.complexity.Document.CarrierBrand == nil {
			break
		}

		return e.complexity.Document.CarrierBrand(childComplexity), true

	case "Document.connectionPackingSlip":
		if e.complexity.Document.ConnectionPackingSlip == nil {
			break
		}

		return e.complexity.Document.ConnectionPackingSlip(childComplexity), true

	case "Document.createdAt":
		if e.complexity.Document.CreatedAt == nil {
			break
		}

		return e.complexity.Document.CreatedAt(childComplexity), true

	case "Document.endAt":
		if e.complexity.Document.EndAt == nil {
			break
		}

		return e.complexity.Document.EndAt(childComplexity), true

	case "Document.htmlFooter":
		if e.complexity.Document.HTMLFooter == nil {
			break
		}

		return e.complexity.Document.HTMLFooter(childComplexity), true

	case "Document.htmlHeader":
		if e.complexity.Document.HTMLHeader == nil {
			break
		}

		return e.complexity.Document.HTMLHeader(childComplexity), true

	case "Document.htmlTemplate":
		if e.complexity.Document.HTMLTemplate == nil {
			break
		}

		return e.complexity.Document.HTMLTemplate(childComplexity), true

	case "Document.id":
		if e.complexity.Document.ID == nil {
			break
		}

		return e.complexity.Document.ID(childComplexity), true

	case "Document.lastBase64Pdf":
		if e.complexity.Document.LastBase64Pdf == nil {
			break
		}

		return e.complexity.Document.LastBase64Pdf(childComplexity), true

	case "Document.mergeType":
		if e.complexity.Document.MergeType == nil {
			break
		}

		return e.complexity.Document.MergeType(childComplexity), true

	case "Document.name":
		if e.complexity.Document.Name == nil {
			break
		}

		return e.complexity.Document.Name(childComplexity), true

	case "Document.paperSize":
		if e.complexity.Document.PaperSize == nil {
			break
		}

		return e.complexity.Document.PaperSize(childComplexity), true

	case "Document.startAt":
		if e.complexity.Document.StartAt == nil {
			break
		}

		return e.complexity.Document.StartAt(childComplexity), true

	case "Document.tenant":
		if e.complexity.Document.Tenant == nil {
			break
		}

		return e.complexity.Document.Tenant(childComplexity), true

	case "Document.tenantID":
		if e.complexity.Document.TenantID == nil {
			break
		}

		return e.complexity.Document.TenantID(childComplexity), true

	case "DocumentConnection.edges":
		if e.complexity.DocumentConnection.Edges == nil {
			break
		}

		return e.complexity.DocumentConnection.Edges(childComplexity), true

	case "DocumentConnection.pageInfo":
		if e.complexity.DocumentConnection.PageInfo == nil {
			break
		}

		return e.complexity.DocumentConnection.PageInfo(childComplexity), true

	case "DocumentConnection.totalCount":
		if e.complexity.DocumentConnection.TotalCount == nil {
			break
		}

		return e.complexity.DocumentConnection.TotalCount(childComplexity), true

	case "DocumentDownload.base64PDF":
		if e.complexity.DocumentDownload.Base64pdf == nil {
			break
		}

		return e.complexity.DocumentDownload.Base64pdf(childComplexity), true

	case "DocumentEdge.cursor":
		if e.complexity.DocumentEdge.Cursor == nil {
			break
		}

		return e.complexity.DocumentEdge.Cursor(childComplexity), true

	case "DocumentEdge.node":
		if e.complexity.DocumentEdge.Node == nil {
			break
		}

		return e.complexity.DocumentEdge.Node(childComplexity), true

	case "DocumentFile.colli":
		if e.complexity.DocumentFile.Colli == nil {
			break
		}

		return e.complexity.DocumentFile.Colli(childComplexity), true

	case "DocumentFile.createdAt":
		if e.complexity.DocumentFile.CreatedAt == nil {
			break
		}

		return e.complexity.DocumentFile.CreatedAt(childComplexity), true

	case "DocumentFile.dataPdfBase64":
		if e.complexity.DocumentFile.DataPdfBase64 == nil {
			break
		}

		return e.complexity.DocumentFile.DataPdfBase64(childComplexity), true

	case "DocumentFile.dataZplBase64":
		if e.complexity.DocumentFile.DataZplBase64 == nil {
			break
		}

		return e.complexity.DocumentFile.DataZplBase64(childComplexity), true

	case "DocumentFile.docType":
		if e.complexity.DocumentFile.DocType == nil {
			break
		}

		return e.complexity.DocumentFile.DocType(childComplexity), true

	case "DocumentFile.id":
		if e.complexity.DocumentFile.ID == nil {
			break
		}

		return e.complexity.DocumentFile.ID(childComplexity), true

	case "DocumentFile.shipmentParcel":
		if e.complexity.DocumentFile.ShipmentParcel == nil {
			break
		}

		return e.complexity.DocumentFile.ShipmentParcel(childComplexity), true

	case "DocumentFile.storagePath":
		if e.complexity.DocumentFile.StoragePath == nil {
			break
		}

		return e.complexity.DocumentFile.StoragePath(childComplexity), true

	case "DocumentFile.storagePathZpl":
		if e.complexity.DocumentFile.StoragePathZpl == nil {
			break
		}

		return e.complexity.DocumentFile.StoragePathZpl(childComplexity), true

	case "DocumentFile.storageType":
		if e.complexity.DocumentFile.StorageType == nil {
			break
		}

		return e.complexity.DocumentFile.StorageType(childComplexity), true

	case "DocumentFile.tenant":
		if e.complexity.DocumentFile.Tenant == nil {
			break
		}

		return e.complexity.DocumentFile.Tenant(childComplexity), true

	case "DocumentFile.tenantID":
		if e.complexity.DocumentFile.TenantID == nil {
			break
		}

		return e.complexity.DocumentFile.TenantID(childComplexity), true

	case "DocumentFileConnection.edges":
		if e.complexity.DocumentFileConnection.Edges == nil {
			break
		}

		return e.complexity.DocumentFileConnection.Edges(childComplexity), true

	case "DocumentFileConnection.pageInfo":
		if e.complexity.DocumentFileConnection.PageInfo == nil {
			break
		}

		return e.complexity.DocumentFileConnection.PageInfo(childComplexity), true

	case "DocumentFileConnection.totalCount":
		if e.complexity.DocumentFileConnection.TotalCount == nil {
			break
		}

		return e.complexity.DocumentFileConnection.TotalCount(childComplexity), true

	case "DocumentFileEdge.cursor":
		if e.complexity.DocumentFileEdge.Cursor == nil {
			break
		}

		return e.complexity.DocumentFileEdge.Cursor(childComplexity), true

	case "DocumentFileEdge.node":
		if e.complexity.DocumentFileEdge.Node == nil {
			break
		}

		return e.complexity.DocumentFileEdge.Node(childComplexity), true

	case "EmailTemplate.createdAt":
		if e.complexity.EmailTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.EmailTemplate.CreatedAt(childComplexity), true

	case "EmailTemplate.deliveryOptionClickCollectAtStore":
		if e.complexity.EmailTemplate.DeliveryOptionClickCollectAtStore == nil {
			break
		}

		return e.complexity.EmailTemplate.DeliveryOptionClickCollectAtStore(childComplexity), true

	case "EmailTemplate.htmlTemplate":
		if e.complexity.EmailTemplate.HTMLTemplate == nil {
			break
		}

		return e.complexity.EmailTemplate.HTMLTemplate(childComplexity), true

	case "EmailTemplate.id":
		if e.complexity.EmailTemplate.ID == nil {
			break
		}

		return e.complexity.EmailTemplate.ID(childComplexity), true

	case "EmailTemplate.mergeType":
		if e.complexity.EmailTemplate.MergeType == nil {
			break
		}

		return e.complexity.EmailTemplate.MergeType(childComplexity), true

	case "EmailTemplate.name":
		if e.complexity.EmailTemplate.Name == nil {
			break
		}

		return e.complexity.EmailTemplate.Name(childComplexity), true

	case "EmailTemplate.notifications":
		if e.complexity.EmailTemplate.Notifications == nil {
			break
		}

		return e.complexity.EmailTemplate.Notifications(childComplexity), true

	case "EmailTemplate.returnPortalAccepted":
		if e.complexity.EmailTemplate.ReturnPortalAccepted == nil {
			break
		}

		return e.complexity.EmailTemplate.ReturnPortalAccepted(childComplexity), true

	case "EmailTemplate.returnPortalConfirmationLabel":
		if e.complexity.EmailTemplate.ReturnPortalConfirmationLabel == nil {
			break
		}

		return e.complexity.EmailTemplate.ReturnPortalConfirmationLabel(childComplexity), true

	case "EmailTemplate.returnPortalConfirmationQrCode":
		if e.complexity.EmailTemplate.ReturnPortalConfirmationQrCode == nil {
			break
		}

		return e.complexity.EmailTemplate.ReturnPortalConfirmationQrCode(childComplexity), true

	case "EmailTemplate.returnPortalReceived":
		if e.complexity.EmailTemplate.ReturnPortalReceived == nil {
			break
		}

		return e.complexity.EmailTemplate.ReturnPortalReceived(childComplexity), true

	case "EmailTemplate.subject":
		if e.complexity.EmailTemplate.Subject == nil {
			break
		}

		return e.complexity.EmailTemplate.Subject(childComplexity), true

	case "EmailTemplate.tenant":
		if e.complexity.EmailTemplate.Tenant == nil {
			break
		}

		return e.complexity.EmailTemplate.Tenant(childComplexity), true

	case "EmailTemplate.tenantID":
		if e.complexity.EmailTemplate.TenantID == nil {
			break
		}

		return e.complexity.EmailTemplate.TenantID(childComplexity), true

	case "EmailTemplate.updatedAt":
		if e.complexity.EmailTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.EmailTemplate.UpdatedAt(childComplexity), true

	case "EmailTemplateConnection.edges":
		if e.complexity.EmailTemplateConnection.Edges == nil {
			break
		}

		return e.complexity.EmailTemplateConnection.Edges(childComplexity), true

	case "EmailTemplateConnection.pageInfo":
		if e.complexity.EmailTemplateConnection.PageInfo == nil {
			break
		}

		return e.complexity.EmailTemplateConnection.PageInfo(childComplexity), true

	case "EmailTemplateConnection.totalCount":
		if e.complexity.EmailTemplateConnection.TotalCount == nil {
			break
		}

		return e.complexity.EmailTemplateConnection.TotalCount(childComplexity), true

	case "EmailTemplateEdge.cursor":
		if e.complexity.EmailTemplateEdge.Cursor == nil {
			break
		}

		return e.complexity.EmailTemplateEdge.Cursor(childComplexity), true

	case "EmailTemplateEdge.node":
		if e.complexity.EmailTemplateEdge.Node == nil {
			break
		}

		return e.complexity.EmailTemplateEdge.Node(childComplexity), true

	case "HistoryLog.histories":
		if e.complexity.HistoryLog.Histories == nil {
			break
		}

		return e.complexity.HistoryLog.Histories(childComplexity), true

	case "HistoryLog.system_event":
		if e.complexity.HistoryLog.SystemEvent == nil {
			break
		}

		return e.complexity.HistoryLog.SystemEvent(childComplexity), true

	case "HypothesisTest.active":
		if e.complexity.HypothesisTest.Active == nil {
			break
		}

		return e.complexity.HypothesisTest.Active(childComplexity), true

	case "HypothesisTest.connection":
		if e.complexity.HypothesisTest.Connection == nil {
			break
		}

		return e.complexity.HypothesisTest.Connection(childComplexity), true

	case "HypothesisTest.hypothesisTestDeliveryOption":
		if e.complexity.HypothesisTest.HypothesisTestDeliveryOption == nil {
			break
		}

		return e.complexity.HypothesisTest.HypothesisTestDeliveryOption(childComplexity), true

	case "HypothesisTest.id":
		if e.complexity.HypothesisTest.ID == nil {
			break
		}

		return e.complexity.HypothesisTest.ID(childComplexity), true

	case "HypothesisTest.name":
		if e.complexity.HypothesisTest.Name == nil {
			break
		}

		return e.complexity.HypothesisTest.Name(childComplexity), true

	case "HypothesisTest.tenant":
		if e.complexity.HypothesisTest.Tenant == nil {
			break
		}

		return e.complexity.HypothesisTest.Tenant(childComplexity), true

	case "HypothesisTest.tenantID":
		if e.complexity.HypothesisTest.TenantID == nil {
			break
		}

		return e.complexity.HypothesisTest.TenantID(childComplexity), true

	case "HypothesisTestConnection.edges":
		if e.complexity.HypothesisTestConnection.Edges == nil {
			break
		}

		return e.complexity.HypothesisTestConnection.Edges(childComplexity), true

	case "HypothesisTestConnection.pageInfo":
		if e.complexity.HypothesisTestConnection.PageInfo == nil {
			break
		}

		return e.complexity.HypothesisTestConnection.PageInfo(childComplexity), true

	case "HypothesisTestConnection.totalCount":
		if e.complexity.HypothesisTestConnection.TotalCount == nil {
			break
		}

		return e.complexity.HypothesisTestConnection.TotalCount(childComplexity), true

	case "HypothesisTestDeliveryOption.byIntervalRotation":
		if e.complexity.HypothesisTestDeliveryOption.ByIntervalRotation == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.ByIntervalRotation(childComplexity), true

	case "HypothesisTestDeliveryOption.byOrder":
		if e.complexity.HypothesisTestDeliveryOption.ByOrder == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.ByOrder(childComplexity), true

	case "HypothesisTestDeliveryOption.deliveryOptionGroupOne":
		if e.complexity.HypothesisTestDeliveryOption.DeliveryOptionGroupOne == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.DeliveryOptionGroupOne(childComplexity), true

	case "HypothesisTestDeliveryOption.deliveryOptionGroupTwo":
		if e.complexity.HypothesisTestDeliveryOption.DeliveryOptionGroupTwo == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.DeliveryOptionGroupTwo(childComplexity), true

	case "HypothesisTestDeliveryOption.hypothesisTest":
		if e.complexity.HypothesisTestDeliveryOption.HypothesisTest == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.HypothesisTest(childComplexity), true

	case "HypothesisTestDeliveryOption.hypothesisTestDeliveryOptionRequest":
		if e.complexity.HypothesisTestDeliveryOption.HypothesisTestDeliveryOptionRequest == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.HypothesisTestDeliveryOptionRequest(childComplexity), true

	case "HypothesisTestDeliveryOption.id":
		if e.complexity.HypothesisTestDeliveryOption.ID == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.ID(childComplexity), true

	case "HypothesisTestDeliveryOption.randomizeWithinGroupSort":
		if e.complexity.HypothesisTestDeliveryOption.RandomizeWithinGroupSort == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.RandomizeWithinGroupSort(childComplexity), true

	case "HypothesisTestDeliveryOption.rotationIntervalHours":
		if e.complexity.HypothesisTestDeliveryOption.RotationIntervalHours == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.RotationIntervalHours(childComplexity), true

	case "HypothesisTestDeliveryOption.tenant":
		if e.complexity.HypothesisTestDeliveryOption.Tenant == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.Tenant(childComplexity), true

	case "HypothesisTestDeliveryOption.tenantID":
		if e.complexity.HypothesisTestDeliveryOption.TenantID == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOption.TenantID(childComplexity), true

	case "HypothesisTestDeliveryOptionConnection.edges":
		if e.complexity.HypothesisTestDeliveryOptionConnection.Edges == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionConnection.Edges(childComplexity), true

	case "HypothesisTestDeliveryOptionConnection.pageInfo":
		if e.complexity.HypothesisTestDeliveryOptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionConnection.PageInfo(childComplexity), true

	case "HypothesisTestDeliveryOptionConnection.totalCount":
		if e.complexity.HypothesisTestDeliveryOptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionConnection.TotalCount(childComplexity), true

	case "HypothesisTestDeliveryOptionEdge.cursor":
		if e.complexity.HypothesisTestDeliveryOptionEdge.Cursor == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionEdge.Cursor(childComplexity), true

	case "HypothesisTestDeliveryOptionEdge.node":
		if e.complexity.HypothesisTestDeliveryOptionEdge.Node == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionEdge.Node(childComplexity), true

	case "HypothesisTestDeliveryOptionLookup.deliveryOption":
		if e.complexity.HypothesisTestDeliveryOptionLookup.DeliveryOption == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookup.DeliveryOption(childComplexity), true

	case "HypothesisTestDeliveryOptionLookup.hypothesisTestDeliveryOptionRequest":
		if e.complexity.HypothesisTestDeliveryOptionLookup.HypothesisTestDeliveryOptionRequest == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookup.HypothesisTestDeliveryOptionRequest(childComplexity), true

	case "HypothesisTestDeliveryOptionLookup.id":
		if e.complexity.HypothesisTestDeliveryOptionLookup.ID == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookup.ID(childComplexity), true

	case "HypothesisTestDeliveryOptionLookup.tenant":
		if e.complexity.HypothesisTestDeliveryOptionLookup.Tenant == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookup.Tenant(childComplexity), true

	case "HypothesisTestDeliveryOptionLookup.tenantID":
		if e.complexity.HypothesisTestDeliveryOptionLookup.TenantID == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookup.TenantID(childComplexity), true

	case "HypothesisTestDeliveryOptionLookupConnection.edges":
		if e.complexity.HypothesisTestDeliveryOptionLookupConnection.Edges == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookupConnection.Edges(childComplexity), true

	case "HypothesisTestDeliveryOptionLookupConnection.pageInfo":
		if e.complexity.HypothesisTestDeliveryOptionLookupConnection.PageInfo == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookupConnection.PageInfo(childComplexity), true

	case "HypothesisTestDeliveryOptionLookupConnection.totalCount":
		if e.complexity.HypothesisTestDeliveryOptionLookupConnection.TotalCount == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookupConnection.TotalCount(childComplexity), true

	case "HypothesisTestDeliveryOptionLookupEdge.cursor":
		if e.complexity.HypothesisTestDeliveryOptionLookupEdge.Cursor == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookupEdge.Cursor(childComplexity), true

	case "HypothesisTestDeliveryOptionLookupEdge.node":
		if e.complexity.HypothesisTestDeliveryOptionLookupEdge.Node == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionLookupEdge.Node(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.createdAt":
		if e.complexity.HypothesisTestDeliveryOptionRequest.CreatedAt == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.CreatedAt(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.hypothesisTestDeliveryOption":
		if e.complexity.HypothesisTestDeliveryOptionRequest.HypothesisTestDeliveryOption == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.HypothesisTestDeliveryOption(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.hypothesisTestDeliveryOptionLookup":
		if e.complexity.HypothesisTestDeliveryOptionRequest.HypothesisTestDeliveryOptionLookup == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.HypothesisTestDeliveryOptionLookup(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.id":
		if e.complexity.HypothesisTestDeliveryOptionRequest.ID == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.ID(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.isControlGroup":
		if e.complexity.HypothesisTestDeliveryOptionRequest.IsControlGroup == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.IsControlGroup(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.lastRequestedAt":
		if e.complexity.HypothesisTestDeliveryOptionRequest.LastRequestedAt == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.LastRequestedAt(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.order":
		if e.complexity.HypothesisTestDeliveryOptionRequest.Order == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.Order(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.orderHash":
		if e.complexity.HypothesisTestDeliveryOptionRequest.OrderHash == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.OrderHash(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.requestCount":
		if e.complexity.HypothesisTestDeliveryOptionRequest.RequestCount == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.RequestCount(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.shippingAddressHash":
		if e.complexity.HypothesisTestDeliveryOptionRequest.ShippingAddressHash == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.ShippingAddressHash(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.tenant":
		if e.complexity.HypothesisTestDeliveryOptionRequest.Tenant == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.Tenant(childComplexity), true

	case "HypothesisTestDeliveryOptionRequest.tenantID":
		if e.complexity.HypothesisTestDeliveryOptionRequest.TenantID == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequest.TenantID(childComplexity), true

	case "HypothesisTestDeliveryOptionRequestConnection.edges":
		if e.complexity.HypothesisTestDeliveryOptionRequestConnection.Edges == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequestConnection.Edges(childComplexity), true

	case "HypothesisTestDeliveryOptionRequestConnection.pageInfo":
		if e.complexity.HypothesisTestDeliveryOptionRequestConnection.PageInfo == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequestConnection.PageInfo(childComplexity), true

	case "HypothesisTestDeliveryOptionRequestConnection.totalCount":
		if e.complexity.HypothesisTestDeliveryOptionRequestConnection.TotalCount == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequestConnection.TotalCount(childComplexity), true

	case "HypothesisTestDeliveryOptionRequestEdge.cursor":
		if e.complexity.HypothesisTestDeliveryOptionRequestEdge.Cursor == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequestEdge.Cursor(childComplexity), true

	case "HypothesisTestDeliveryOptionRequestEdge.node":
		if e.complexity.HypothesisTestDeliveryOptionRequestEdge.Node == nil {
			break
		}

		return e.complexity.HypothesisTestDeliveryOptionRequestEdge.Node(childComplexity), true

	case "HypothesisTestEdge.cursor":
		if e.complexity.HypothesisTestEdge.Cursor == nil {
			break
		}

		return e.complexity.HypothesisTestEdge.Cursor(childComplexity), true

	case "HypothesisTestEdge.node":
		if e.complexity.HypothesisTestEdge.Node == nil {
			break
		}

		return e.complexity.HypothesisTestEdge.Node(childComplexity), true

	case "InventoryItem.code":
		if e.complexity.InventoryItem.Code == nil {
			break
		}

		return e.complexity.InventoryItem.Code(childComplexity), true

	case "InventoryItem.countryHarmonizedCode":
		if e.complexity.InventoryItem.CountryHarmonizedCode == nil {
			break
		}

		return e.complexity.InventoryItem.CountryHarmonizedCode(childComplexity), true

	case "InventoryItem.countryOfOrigin":
		if e.complexity.InventoryItem.CountryOfOrigin == nil {
			break
		}

		return e.complexity.InventoryItem.CountryOfOrigin(childComplexity), true

	case "InventoryItem.externalID":
		if e.complexity.InventoryItem.ExternalID == nil {
			break
		}

		return e.complexity.InventoryItem.ExternalID(childComplexity), true

	case "InventoryItem.id":
		if e.complexity.InventoryItem.ID == nil {
			break
		}

		return e.complexity.InventoryItem.ID(childComplexity), true

	case "InventoryItem.productVariant":
		if e.complexity.InventoryItem.ProductVariant == nil {
			break
		}

		return e.complexity.InventoryItem.ProductVariant(childComplexity), true

	case "InventoryItem.sku":
		if e.complexity.InventoryItem.Sku == nil {
			break
		}

		return e.complexity.InventoryItem.Sku(childComplexity), true

	case "InventoryItem.tenant":
		if e.complexity.InventoryItem.Tenant == nil {
			break
		}

		return e.complexity.InventoryItem.Tenant(childComplexity), true

	case "InventoryItem.tenantID":
		if e.complexity.InventoryItem.TenantID == nil {
			break
		}

		return e.complexity.InventoryItem.TenantID(childComplexity), true

	case "InventoryItemConnection.edges":
		if e.complexity.InventoryItemConnection.Edges == nil {
			break
		}

		return e.complexity.InventoryItemConnection.Edges(childComplexity), true

	case "InventoryItemConnection.pageInfo":
		if e.complexity.InventoryItemConnection.PageInfo == nil {
			break
		}

		return e.complexity.InventoryItemConnection.PageInfo(childComplexity), true

	case "InventoryItemConnection.totalCount":
		if e.complexity.InventoryItemConnection.TotalCount == nil {
			break
		}

		return e.complexity.InventoryItemConnection.TotalCount(childComplexity), true

	case "InventoryItemEdge.cursor":
		if e.complexity.InventoryItemEdge.Cursor == nil {
			break
		}

		return e.complexity.InventoryItemEdge.Cursor(childComplexity), true

	case "InventoryItemEdge.node":
		if e.complexity.InventoryItemEdge.Node == nil {
			break
		}

		return e.complexity.InventoryItemEdge.Node(childComplexity), true

	case "Language.id":
		if e.complexity.Language.ID == nil {
			break
		}

		return e.complexity.Language.ID(childComplexity), true

	case "Language.internalID":
		if e.complexity.Language.InternalID == nil {
			break
		}

		return e.complexity.Language.InternalID(childComplexity), true

	case "Language.label":
		if e.complexity.Language.Label == nil {
			break
		}

		return e.complexity.Language.Label(childComplexity), true

	case "Language.language":
		if e.complexity.Language.Language == nil {
			break
		}

		return e.complexity.Language.Language(childComplexity), true

	case "Language.users":
		if e.complexity.Language.Users == nil {
			break
		}

		return e.complexity.Language.Users(childComplexity), true

	case "LanguageConnection.edges":
		if e.complexity.LanguageConnection.Edges == nil {
			break
		}

		return e.complexity.LanguageConnection.Edges(childComplexity), true

	case "LanguageConnection.pageInfo":
		if e.complexity.LanguageConnection.PageInfo == nil {
			break
		}

		return e.complexity.LanguageConnection.PageInfo(childComplexity), true

	case "LanguageConnection.totalCount":
		if e.complexity.LanguageConnection.TotalCount == nil {
			break
		}

		return e.complexity.LanguageConnection.TotalCount(childComplexity), true

	case "LanguageEdge.cursor":
		if e.complexity.LanguageEdge.Cursor == nil {
			break
		}

		return e.complexity.LanguageEdge.Cursor(childComplexity), true

	case "LanguageEdge.node":
		if e.complexity.LanguageEdge.Node == nil {
			break
		}

		return e.complexity.LanguageEdge.Node(childComplexity), true

	case "Location.address":
		if e.complexity.Location.Address == nil {
			break
		}

		return e.complexity.Location.Address(childComplexity), true

	case "Location.colli":
		if e.complexity.Location.Colli == nil {
			break
		}

		return e.complexity.Location.Colli(childComplexity), true

	case "Location.deliveryOption":
		if e.complexity.Location.DeliveryOption == nil {
			break
		}

		return e.complexity.Location.DeliveryOption(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.locationTags":
		if e.complexity.Location.LocationTags == nil {
			break
		}

		return e.complexity.Location.LocationTags(childComplexity), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "Location.pickupConnection":
		if e.complexity.Location.PickupConnection == nil {
			break
		}

		return e.complexity.Location.PickupConnection(childComplexity), true

	case "Location.returnConnection":
		if e.complexity.Location.ReturnConnection == nil {
			break
		}

		return e.complexity.Location.ReturnConnection(childComplexity), true

	case "Location.returnPortal":
		if e.complexity.Location.ReturnPortal == nil {
			break
		}

		return e.complexity.Location.ReturnPortal(childComplexity), true

	case "Location.sellerConnection":
		if e.complexity.Location.SellerConnection == nil {
			break
		}

		return e.complexity.Location.SellerConnection(childComplexity), true

	case "Location.senderConnection":
		if e.complexity.Location.SenderConnection == nil {
			break
		}

		return e.complexity.Location.SenderConnection(childComplexity), true

	case "Location.tenant":
		if e.complexity.Location.Tenant == nil {
			break
		}

		return e.complexity.Location.Tenant(childComplexity), true

	case "Location.tenantID":
		if e.complexity.Location.TenantID == nil {
			break
		}

		return e.complexity.Location.TenantID(childComplexity), true

	case "LocationConnection.edges":
		if e.complexity.LocationConnection.Edges == nil {
			break
		}

		return e.complexity.LocationConnection.Edges(childComplexity), true

	case "LocationConnection.pageInfo":
		if e.complexity.LocationConnection.PageInfo == nil {
			break
		}

		return e.complexity.LocationConnection.PageInfo(childComplexity), true

	case "LocationConnection.totalCount":
		if e.complexity.LocationConnection.TotalCount == nil {
			break
		}

		return e.complexity.LocationConnection.TotalCount(childComplexity), true

	case "LocationEdge.cursor":
		if e.complexity.LocationEdge.Cursor == nil {
			break
		}

		return e.complexity.LocationEdge.Cursor(childComplexity), true

	case "LocationEdge.node":
		if e.complexity.LocationEdge.Node == nil {
			break
		}

		return e.complexity.LocationEdge.Node(childComplexity), true

	case "LocationTag.id":
		if e.complexity.LocationTag.ID == nil {
			break
		}

		return e.complexity.LocationTag.ID(childComplexity), true

	case "LocationTag.internalID":
		if e.complexity.LocationTag.InternalID == nil {
			break
		}

		return e.complexity.LocationTag.InternalID(childComplexity), true

	case "LocationTag.label":
		if e.complexity.LocationTag.Label == nil {
			break
		}

		return e.complexity.LocationTag.Label(childComplexity), true

	case "LocationTag.location":
		if e.complexity.LocationTag.Location == nil {
			break
		}

		return e.complexity.LocationTag.Location(childComplexity), true

	case "LocationTagConnection.edges":
		if e.complexity.LocationTagConnection.Edges == nil {
			break
		}

		return e.complexity.LocationTagConnection.Edges(childComplexity), true

	case "LocationTagConnection.pageInfo":
		if e.complexity.LocationTagConnection.PageInfo == nil {
			break
		}

		return e.complexity.LocationTagConnection.PageInfo(childComplexity), true

	case "LocationTagConnection.totalCount":
		if e.complexity.LocationTagConnection.TotalCount == nil {
			break
		}

		return e.complexity.LocationTagConnection.TotalCount(childComplexity), true

	case "LocationTagEdge.cursor":
		if e.complexity.LocationTagEdge.Cursor == nil {
			break
		}

		return e.complexity.LocationTagEdge.Cursor(childComplexity), true

	case "LocationTagEdge.node":
		if e.complexity.LocationTagEdge.Node == nil {
			break
		}

		return e.complexity.LocationTagEdge.Node(childComplexity), true

	case "Mutation.archivePackaging":
		if e.complexity.Mutation.ArchivePackaging == nil {
			break
		}

		args, err := ec.field_Mutation_archivePackaging_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchivePackaging(childComplexity, args["id"].(pulid.ID)), true

	case "Mutation.archiveProductVariant":
		if e.complexity.Mutation.ArchiveProductVariant == nil {
			break
		}

		args, err := ec.field_Mutation_archiveProductVariant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchiveProductVariant(childComplexity, args["variantID"].(pulid.ID)), true

	case "Mutation.archiveWorkstation":
		if e.complexity.Mutation.ArchiveWorkstation == nil {
			break
		}

		args, err := ec.field_Mutation_archiveWorkstation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchiveWorkstation(childComplexity, args["id"].(pulid.ID)), true

	case "Mutation.bulkUpdatePackaging":
		if e.complexity.Mutation.BulkUpdatePackaging == nil {
			break
		}

		args, err := ec.field_Mutation_bulkUpdatePackaging_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BulkUpdatePackaging(childComplexity, args["orderIDs"].([]pulid.ID), args["packagingID"].(*pulid.ID)), true

	case "Mutation.cancelCancelSync":
		if e.complexity.Mutation.CancelCancelSync == nil {
			break
		}

		args, err := ec.field_Mutation_cancelCancelSync_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelCancelSync(childComplexity, args["shipmentParcelID"].(pulid.ID)), true

	case "Mutation.cancelFulfillmentSync":
		if e.complexity.Mutation.CancelFulfillmentSync == nil {
			break
		}

		args, err := ec.field_Mutation_cancelFulfillmentSync_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelFulfillmentSync(childComplexity, args["shipmentParcelID"].(pulid.ID)), true

	case "Mutation.cancelShipment":
		if e.complexity.Mutation.CancelShipment == nil {
			break
		}

		args, err := ec.field_Mutation_cancelShipment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelShipment(childComplexity, args["shipmentID"].(pulid.ID)), true

	case "Mutation.cancelShipmentByColliIDs":
		if e.complexity.Mutation.CancelShipmentByColliIDs == nil {
			break
		}

		args, err := ec.field_Mutation_cancelShipmentByColliIDs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelShipmentByColliIDs(childComplexity, args["colliIDs"].([]pulid.ID)), true

	case "Mutation.createAPIToken":
		if e.complexity.Mutation.CreateAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_createAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAPIToken(childComplexity, args["name"].(string)), true

	case "Mutation.createCarrierAgreement":
		if e.complexity.Mutation.CreateCarrierAgreement == nil {
			break
		}

		args, err := ec.field_Mutation_createCarrierAgreement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCarrierAgreement(childComplexity, args["name"].(string), args["carrierBrand"].(pulid.ID)), true

	case "Mutation.createColli":
		if e.complexity.Mutation.CreateColli == nil {
			break
		}

		args, err := ec.field_Mutation_createColli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateColli(childComplexity, args["orderID"].(pulid.ID), args["input"].(ent.CreateColliInput), args["deliveryOptionID"].(*pulid.ID), args["deliveryPointID"].(*pulid.ID), args["ccLocationID"].(*pulid.ID), args["packagingID"].(*pulid.ID), args["recipientAddress"].(ent.CreateAddressInput), args["senderAddress"].(ent.CreateAddressInput), args["products"].([]*utils.ProductVariantQuantity)), true

	case "Mutation.createConsolidation":
		if e.complexity.Mutation.CreateConsolidation == nil {
			break
		}

		args, err := ec.field_Mutation_createConsolidation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateConsolidation(childComplexity, args["publicID"].(string), args["description"].(string)), true

	case "Mutation.createDeliveryOption":
		if e.complexity.Mutation.CreateDeliveryOption == nil {
			break
		}

		args, err := ec.field_Mutation_createDeliveryOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeliveryOption(childComplexity, args["name"].(string), args["agreementID"].(pulid.ID), args["connectionID"].(pulid.ID)), true

	case "Mutation.createDeliveryRule":
		if e.complexity.Mutation.CreateDeliveryRule == nil {
			break
		}

		args, err := ec.field_Mutation_createDeliveryRule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeliveryRule(childComplexity, args["input"].(ent.CreateDeliveryRuleInput)), true

	case "Mutation.createDeliveryRuleConstraintGroup":
		if e.complexity.Mutation.CreateDeliveryRuleConstraintGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createDeliveryRuleConstraintGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeliveryRuleConstraintGroup(childComplexity, args["input"].(ent.CreateDeliveryRuleConstraintGroupInput)), true

	case "Mutation.createDeliveryRuleConstraintGroupConstraints":
		if e.complexity.Mutation.CreateDeliveryRuleConstraintGroupConstraints == nil {
			break
		}

		args, err := ec.field_Mutation_createDeliveryRuleConstraintGroupConstraints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeliveryRuleConstraintGroupConstraints(childComplexity, args["deliveryRuleId"].(pulid.ID), args["logicType"].(deliveryruleconstraintgroup.ConstraintLogic), args["input"].([]*ent.CreateDeliveryRuleConstraintInput)), true

	case "Mutation.createDocument":
		if e.complexity.Mutation.CreateDocument == nil {
			break
		}

		args, err := ec.field_Mutation_createDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDocument(childComplexity, args["name"].(string), args["mergeType"].(document.MergeType)), true

	case "Mutation.createEmailTemplates":
		if e.complexity.Mutation.CreateEmailTemplates == nil {
			break
		}

		args, err := ec.field_Mutation_createEmailTemplates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmailTemplates(childComplexity, args["name"].(string), args["merge"].(emailtemplate.MergeType)), true

	case "Mutation.createEmptyOrder":
		if e.complexity.Mutation.CreateEmptyOrder == nil {
			break
		}

		args, err := ec.field_Mutation_createEmptyOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmptyOrder(childComplexity, args["input"].(ent.CreateOrderInput)), true

	case "Mutation.createHypothesisTestDeliveryOption":
		if e.complexity.Mutation.CreateHypothesisTestDeliveryOption == nil {
			break
		}

		args, err := ec.field_Mutation_createHypothesisTestDeliveryOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHypothesisTestDeliveryOption(childComplexity, args["name"].(string), args["connectionID"].(pulid.ID)), true

	case "Mutation.createLocation":
		if e.complexity.Mutation.CreateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_createLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLocation(childComplexity, args["input"].(ent.CreateLocationInput), args["inputAddress"].(ent.CreateAddressInput)), true

	case "Mutation.createNotification":
		if e.complexity.Mutation.CreateNotification == nil {
			break
		}

		args, err := ec.field_Mutation_createNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNotification(childComplexity, args["name"].(string), args["connectionID"].(pulid.ID), args["emailTemplateID"].(pulid.ID)), true

	case "Mutation.createPackaging":
		if e.complexity.Mutation.CreatePackaging == nil {
			break
		}

		args, err := ec.field_Mutation_createPackaging_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePackaging(childComplexity, args["input"].(ent.CreatePackagingInput), args["inputPackagingUSPS"].(*ent.CreatePackagingUSPSInput), args["inputPackagingDF"].(*ent.CreatePackagingDFInput)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(ent.CreateProductInput), args["variants"].([]*ent.CreateProductVariantInput), args["images"].([]string)), true

	case "Mutation.createProductTags":
		if e.complexity.Mutation.CreateProductTags == nil {
			break
		}

		args, err := ec.field_Mutation_createProductTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProductTags(childComplexity, args["input"].([]string)), true

	case "Mutation.createReturnOrder":
		if e.complexity.Mutation.CreateReturnOrder == nil {
			break
		}

		args, err := ec.field_Mutation_createReturnOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReturnOrder(childComplexity, args["orderID"].(pulid.ID), args["portalID"].(pulid.ID), args["orderLines"].([]*models.MutateReturnItems)), true

	case "Mutation.createReturnPortal":
		if e.complexity.Mutation.CreateReturnPortal == nil {
			break
		}

		args, err := ec.field_Mutation_createReturnPortal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateReturnPortal(childComplexity, args["name"].(string), args["connection"].(pulid.ID)), true

	case "Mutation.createSeatGroup":
		if e.complexity.Mutation.CreateSeatGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createSeatGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSeatGroup(childComplexity, args["input"].(ent.CreateSeatGroupInput), args["accessRights"].([]*ent.CreateSeatGroupAccessRightInput)), true

	case "Mutation.createShopifyConnection":
		if e.complexity.Mutation.CreateShopifyConnection == nil {
			break
		}

		args, err := ec.field_Mutation_createShopifyConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateShopifyConnection(childComplexity, args["input"].(ent.CreateConnectionShopifyInput), args["inputConnection"].(ent.CreateConnectionInput)), true

	case "Mutation.createUserSeat":
		if e.complexity.Mutation.CreateUserSeat == nil {
			break
		}

		args, err := ec.field_Mutation_createUserSeat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUserSeat(childComplexity, args["input"].(ent.CreateUserInput)), true

	case "Mutation.createVariant":
		if e.complexity.Mutation.CreateVariant == nil {
			break
		}

		args, err := ec.field_Mutation_createVariant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateVariant(childComplexity, args["productID"].(pulid.ID), args["input"].(*ent.CreateProductVariantInput)), true

	case "Mutation.createWorkstation":
		if e.complexity.Mutation.CreateWorkstation == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkstation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkstation(childComplexity, args["input"].(ent.CreateWorkstationInput)), true

	case "Mutation.debugUpdateLabelIDs":
		if e.complexity.Mutation.DebugUpdateLabelIDs == nil {
			break
		}

		args, err := ec.field_Mutation_debugUpdateLabelIDs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DebugUpdateLabelIDs(childComplexity, args["parcelID"].(pulid.ID), args["itemID"].(string)), true

	case "Mutation.deleteAPIToken":
		if e.complexity.Mutation.DeleteAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAPIToken(childComplexity, args["id"].(pulid.ID)), true

	case "Mutation.deleteColli":
		if e.complexity.Mutation.DeleteColli == nil {
			break
		}

		args, err := ec.field_Mutation_deleteColli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteColli(childComplexity, args["colliID"].(pulid.ID)), true

	case "Mutation.deleteDeliveryRule":
		if e.complexity.Mutation.DeleteDeliveryRule == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeliveryRule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeliveryRule(childComplexity, args["deliveryRuleID"].(pulid.ID)), true

	case "Mutation.deleteDeliveryRuleConstraintGroupConstraints":
		if e.complexity.Mutation.DeleteDeliveryRuleConstraintGroupConstraints == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeliveryRuleConstraintGroupConstraints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeliveryRuleConstraintGroupConstraints(childComplexity, args["deliveryGroupId"].(pulid.ID)), true

	case "Mutation.deleteProductImage":
		if e.complexity.Mutation.DeleteProductImage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProductImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProductImage(childComplexity, args["imageID"].(pulid.ID)), true

	case "Mutation.deleteTag":
		if e.complexity.Mutation.DeleteTag == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTag(childComplexity, args["id"].(pulid.ID)), true

	case "Mutation.deliveryOptionArchive":
		if e.complexity.Mutation.DeliveryOptionArchive == nil {
			break
		}

		args, err := ec.field_Mutation_deliveryOptionArchive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeliveryOptionArchive(childComplexity, args["deliveryOptionID"].(pulid.ID)), true

	case "Mutation.duplicateColli":
		if e.complexity.Mutation.DuplicateColli == nil {
			break
		}

		args, err := ec.field_Mutation_duplicateColli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DuplicateColli(childComplexity, args["fromColliID"].(pulid.ID)), true

	case "Mutation.markColliDeleted":
		if e.complexity.Mutation.MarkColliDeleted == nil {
			break
		}

		args, err := ec.field_Mutation_markColliDeleted_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkColliDeleted(childComplexity, args["returnColliID"].(pulid.ID)), true

	case "Mutation.moveOrderLine":
		if e.complexity.Mutation.MoveOrderLine == nil {
			break
		}

		args, err := ec.field_Mutation_moveOrderLine_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoveOrderLine(childComplexity, args["orderLineID"].(pulid.ID), args["colliID"].(pulid.ID)), true

	case "Mutation.mustInventory":
		if e.complexity.Mutation.MustInventory == nil {
			break
		}

		args, err := ec.field_Mutation_mustInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MustInventory(childComplexity, args["productVariantID"].(pulid.ID)), true

	case "Mutation.replaceDeliveryRuleConstraintGroupConstraints":
		if e.complexity.Mutation.ReplaceDeliveryRuleConstraintGroupConstraints == nil {
			break
		}

		args, err := ec.field_Mutation_replaceDeliveryRuleConstraintGroupConstraints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceDeliveryRuleConstraintGroupConstraints(childComplexity, args["deliveryGroupId"].(pulid.ID), args["logicType"].(deliveryruleconstraintgroup.ConstraintLogic), args["input"].([]*ent.CreateDeliveryRuleConstraintInput)), true

	case "Mutation.replaceDeliveryRuleCountries":
		if e.complexity.Mutation.ReplaceDeliveryRuleCountries == nil {
			break
		}

		args, err := ec.field_Mutation_replaceDeliveryRuleCountries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceDeliveryRuleCountries(childComplexity, args["ruleID"].(pulid.ID), args["countries"].([]pulid.ID)), true

	case "Mutation.replaceInterestedCarriersPlatforms":
		if e.complexity.Mutation.ReplaceInterestedCarriersPlatforms == nil {
			break
		}

		args, err := ec.field_Mutation_replaceInterestedCarriersPlatforms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceInterestedCarriersPlatforms(childComplexity, args["userID"].(pulid.ID), args["inputCarriers"].([]pulid.ID), args["inputPlatforms"].([]pulid.ID)), true

	case "Mutation.replaceSeatGroup":
		if e.complexity.Mutation.ReplaceSeatGroup == nil {
			break
		}

		args, err := ec.field_Mutation_replaceSeatGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceSeatGroup(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateSeatGroupInput), args["accessRights"].([]*ent.CreateSeatGroupAccessRightInput)), true

	case "Mutation.replaceSignupOptions":
		if e.complexity.Mutation.ReplaceSignupOptions == nil {
			break
		}

		args, err := ec.field_Mutation_replaceSignupOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReplaceSignupOptions(childComplexity, args["userID"].(pulid.ID), args["input"].(ent.CreateSignupOptionsInput)), true

	case "Mutation.saveSelectedWorkstation":
		if e.complexity.Mutation.SaveSelectedWorkstation == nil {
			break
		}

		args, err := ec.field_Mutation_saveSelectedWorkstation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveSelectedWorkstation(childComplexity, args["id"].(pulid.ID), args["pickupDay"].(user.PickupDay)), true

	case "Mutation.toggleNotification":
		if e.complexity.Mutation.ToggleNotification == nil {
			break
		}

		args, err := ec.field_Mutation_toggleNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ToggleNotification(childComplexity, args["notificationID"].(pulid.ID), args["checked"].(bool)), true

	case "Mutation.updateAPIToken":
		if e.complexity.Mutation.UpdateAPIToken == nil {
			break
		}

		args, err := ec.field_Mutation_updateAPIToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAPIToken(childComplexity, args["id"].(pulid.ID), args["name"].(string)), true

	case "Mutation.updateCarrierAgreementBring":
		if e.complexity.Mutation.UpdateCarrierAgreementBring == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementBring_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementBring(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierBringInput)), true

	case "Mutation.updateCarrierAgreementDAO":
		if e.complexity.Mutation.UpdateCarrierAgreementDao == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementDAO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementDao(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierDAOInput)), true

	case "Mutation.updateCarrierAgreementDF":
		if e.complexity.Mutation.UpdateCarrierAgreementDf == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementDF_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementDf(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierDFInput)), true

	case "Mutation.updateCarrierAgreementDSV":
		if e.complexity.Mutation.UpdateCarrierAgreementDsv == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementDSV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementDsv(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierDSVInput)), true

	case "Mutation.updateCarrierAgreementEasyPost":
		if e.complexity.Mutation.UpdateCarrierAgreementEasyPost == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementEasyPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementEasyPost(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierEasyPostInput)), true

	case "Mutation.updateCarrierAgreementGLS":
		if e.complexity.Mutation.UpdateCarrierAgreementGls == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementGLS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementGls(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierGLSInput)), true

	case "Mutation.updateCarrierAgreementPostNord":
		if e.complexity.Mutation.UpdateCarrierAgreementPostNord == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementPostNord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementPostNord(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierPostNordInput)), true

	case "Mutation.updateCarrierAgreementUSPS":
		if e.complexity.Mutation.UpdateCarrierAgreementUsps == nil {
			break
		}

		args, err := ec.field_Mutation_updateCarrierAgreementUSPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCarrierAgreementUsps(childComplexity, args["id"].(pulid.ID), args["name"].(string), args["input"].(ent.UpdateCarrierUSPSInput)), true

	case "Mutation.updateColli":
		if e.complexity.Mutation.UpdateColli == nil {
			break
		}

		args, err := ec.field_Mutation_updateColli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateColli(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateColliInput), args["deliveryOptionID"].(*pulid.ID), args["deliveryPointID"].(*pulid.ID), args["ccLocationID"].(*pulid.ID), args["packagingID"].(*pulid.ID), args["recipientAddressID"].(pulid.ID), args["recipientAddress"].(ent.UpdateAddressInput), args["senderAddressID"].(pulid.ID), args["senderAddress"].(ent.UpdateAddressInput), args["updateExistingRecipient"].(*bool), args["products"].([]*utils.ProductVariantQuantity), args["removeProducts"].([]pulid.ID)), true

	case "Mutation.updateCompanyInfo":
		if e.complexity.Mutation.UpdateCompanyInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompanyInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompanyInfo(childComplexity, args["input"].(ent.UpdateTenantInput), args["defaultLanguage"].(pulid.ID), args["adminContact"].(ent.CreateContactInput), args["billingContact"].(ent.CreateContactInput), args["address"].(ent.CreateAddressInput)), true

	case "Mutation.updateConsolidation":
		if e.complexity.Mutation.UpdateConsolidation == nil {
			break
		}

		args, err := ec.field_Mutation_updateConsolidation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConsolidation(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateConsolidationInput), args["sender"].(*ent.CreateAddressInput), args["recipient"].(*ent.CreateAddressInput), args["inputPallets"].([]*models.CreateOrUpdatePallet)), true

	case "Mutation.updateDeliveryOptionBring":
		if e.complexity.Mutation.UpdateDeliveryOptionBring == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionBring_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionBring(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateDeliveryOptionBringInput), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput)), true

	case "Mutation.updateDeliveryOptionDAO":
		if e.complexity.Mutation.UpdateDeliveryOptionDao == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionDAO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionDao(childComplexity, args["id"].(pulid.ID), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput)), true

	case "Mutation.updateDeliveryOptionDF":
		if e.complexity.Mutation.UpdateDeliveryOptionDf == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionDF_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionDf(childComplexity, args["id"].(pulid.ID), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput)), true

	case "Mutation.updateDeliveryOptionDSV":
		if e.complexity.Mutation.UpdateDeliveryOptionDsv == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionDSV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionDsv(childComplexity, args["id"].(pulid.ID), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput)), true

	case "Mutation.updateDeliveryOptionEasyPost":
		if e.complexity.Mutation.UpdateDeliveryOptionEasyPost == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionEasyPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionEasyPost(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateDeliveryOptionEasyPostInput), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput)), true

	case "Mutation.updateDeliveryOptionGLS":
		if e.complexity.Mutation.UpdateDeliveryOptionGls == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionGLS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionGls(childComplexity, args["id"].(pulid.ID), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput)), true

	case "Mutation.updateDeliveryOptionPostNord":
		if e.complexity.Mutation.UpdateDeliveryOptionPostNord == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionPostNord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionPostNord(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateDeliveryOptionPostNordInput), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput), args["inputAdditionalServices"].([]string)), true

	case "Mutation.updateDeliveryOptionSortOrder":
		if e.complexity.Mutation.UpdateDeliveryOptionSortOrder == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionSortOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionSortOrder(childComplexity, args["newOrder"].([]pulid.ID)), true

	case "Mutation.updateDeliveryOptionUSPS":
		if e.complexity.Mutation.UpdateDeliveryOptionUsps == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryOptionUSPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryOptionUsps(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateDeliveryOptionUSPSInput), args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput), args["inputAdditionalServices"].([]pulid.ID)), true

	case "Mutation.updateDeliveryRule":
		if e.complexity.Mutation.UpdateDeliveryRule == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeliveryRule_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeliveryRule(childComplexity, args["deliveryRuleID"].(pulid.ID), args["val"].(ent.UpdateDeliveryRuleInput)), true

	case "Mutation.updateDocument":
		if e.complexity.Mutation.UpdateDocument == nil {
			break
		}

		args, err := ec.field_Mutation_updateDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDocument(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateDocumentInput)), true

	case "Mutation.updateEmailTemplate":
		if e.complexity.Mutation.UpdateEmailTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmailTemplate(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateEmailTemplateInput)), true

	case "Mutation.updateHypothesisTestDeliveryOption":
		if e.complexity.Mutation.UpdateHypothesisTestDeliveryOption == nil {
			break
		}

		args, err := ec.field_Mutation_updateHypothesisTestDeliveryOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateHypothesisTestDeliveryOption(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateHypothesisTestInput), args["inputDeliveryOption"].(ent.UpdateHypothesisTestDeliveryOptionInput)), true

	case "Mutation.updateInventory":
		if e.complexity.Mutation.UpdateInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateInventory(childComplexity, args["iventoryItemID"].(pulid.ID), args["input"].(ent.UpdateInventoryItemInput)), true

	case "Mutation.updateLocation":
		if e.complexity.Mutation.UpdateLocation == nil {
			break
		}

		args, err := ec.field_Mutation_updateLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLocation(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateLocationInput), args["inputAddress"].(ent.UpdateAddressInput)), true

	case "Mutation.updateOrder":
		if e.complexity.Mutation.UpdateOrder == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrder(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateOrderInput)), true

	case "Mutation.updatePackaging":
		if e.complexity.Mutation.UpdatePackaging == nil {
			break
		}

		args, err := ec.field_Mutation_updatePackaging_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePackaging(childComplexity, args["input"].(ent.UpdatePackagingInput), args["inputPackagingUSPS"].(*ent.UpdatePackagingUSPSInput), args["inputPackagingDF"].(*ent.CreatePackagingDFInput)), true

	case "Mutation.updatePlan":
		if e.complexity.Mutation.UpdatePlan == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlan(childComplexity, args["planID"].(pulid.ID)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateProductInput), args["variants"].([]*models.UpdateProductVariantIDInput), args["images"].([]*models.ProductVariantImageInput)), true

	case "Mutation.updateReturnColliStatus":
		if e.complexity.Mutation.UpdateReturnColliStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateReturnColliStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReturnColliStatus(childComplexity, args["returnColliID"].(pulid.ID), args["status"].(returncolli.Status)), true

	case "Mutation.updateReturnPortal":
		if e.complexity.Mutation.UpdateReturnPortal == nil {
			break
		}

		args, err := ec.field_Mutation_updateReturnPortal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateReturnPortal(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateReturnPortalInput), args["inputClaims"].([]*models.MutateReturnPortalClaim)), true

	case "Mutation.updateShopifyConnection":
		if e.complexity.Mutation.UpdateShopifyConnection == nil {
			break
		}

		args, err := ec.field_Mutation_updateShopifyConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateShopifyConnection(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateConnectionShopifyInput), args["inputConnection"].(ent.UpdateConnectionInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(ent.UpdateUserInput), args["newTenantID"].(*pulid.ID)), true

	case "Mutation.updateUserPassword":
		if e.complexity.Mutation.UpdateUserPassword == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPassword(childComplexity, args["id"].(pulid.ID), args["input"].(string)), true

	case "Mutation.updateUserSeat":
		if e.complexity.Mutation.UpdateUserSeat == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserSeat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserSeat(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateUserInput)), true

	case "Mutation.updateWorkstation":
		if e.complexity.Mutation.UpdateWorkstation == nil {
			break
		}

		args, err := ec.field_Mutation_updateWorkstation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateWorkstation(childComplexity, args["id"].(pulid.ID), args["input"].(ent.UpdateWorkstationInput)), true

	case "Mutation.uploadProductImage":
		if e.complexity.Mutation.UploadProductImage == nil {
			break
		}

		args, err := ec.field_Mutation_uploadProductImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadProductImage(childComplexity, args["productID"].(pulid.ID), args["image"].(string)), true

	case "Notification.active":
		if e.complexity.Notification.Active == nil {
			break
		}

		return e.complexity.Notification.Active(childComplexity), true

	case "Notification.connection":
		if e.complexity.Notification.Connection == nil {
			break
		}

		return e.complexity.Notification.Connection(childComplexity), true

	case "Notification.emailTemplate":
		if e.complexity.Notification.EmailTemplate == nil {
			break
		}

		return e.complexity.Notification.EmailTemplate(childComplexity), true

	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true

	case "Notification.name":
		if e.complexity.Notification.Name == nil {
			break
		}

		return e.complexity.Notification.Name(childComplexity), true

	case "Notification.tenant":
		if e.complexity.Notification.Tenant == nil {
			break
		}

		return e.complexity.Notification.Tenant(childComplexity), true

	case "Notification.tenantID":
		if e.complexity.Notification.TenantID == nil {
			break
		}

		return e.complexity.Notification.TenantID(childComplexity), true

	case "NotificationConnection.edges":
		if e.complexity.NotificationConnection.Edges == nil {
			break
		}

		return e.complexity.NotificationConnection.Edges(childComplexity), true

	case "NotificationConnection.pageInfo":
		if e.complexity.NotificationConnection.PageInfo == nil {
			break
		}

		return e.complexity.NotificationConnection.PageInfo(childComplexity), true

	case "NotificationConnection.totalCount":
		if e.complexity.NotificationConnection.TotalCount == nil {
			break
		}

		return e.complexity.NotificationConnection.TotalCount(childComplexity), true

	case "NotificationEdge.cursor":
		if e.complexity.NotificationEdge.Cursor == nil {
			break
		}

		return e.complexity.NotificationEdge.Cursor(childComplexity), true

	case "NotificationEdge.node":
		if e.complexity.NotificationEdge.Node == nil {
			break
		}

		return e.complexity.NotificationEdge.Node(childComplexity), true

	case "OTKRequests.id":
		if e.complexity.OTKRequests.ID == nil {
			break
		}

		return e.complexity.OTKRequests.ID(childComplexity), true

	case "OTKRequests.otk":
		if e.complexity.OTKRequests.Otk == nil {
			break
		}

		return e.complexity.OTKRequests.Otk(childComplexity), true

	case "OTKRequests.tenant":
		if e.complexity.OTKRequests.Tenant == nil {
			break
		}

		return e.complexity.OTKRequests.Tenant(childComplexity), true

	case "OTKRequests.tenantID":
		if e.complexity.OTKRequests.TenantID == nil {
			break
		}

		return e.complexity.OTKRequests.TenantID(childComplexity), true

	case "OTKRequests.users":
		if e.complexity.OTKRequests.Users == nil {
			break
		}

		return e.complexity.OTKRequests.Users(childComplexity), true

	case "Order.colli":
		if e.complexity.Order.Colli == nil {
			break
		}

		return e.complexity.Order.Colli(childComplexity), true

	case "Order.commentExternal":
		if e.complexity.Order.CommentExternal == nil {
			break
		}

		return e.complexity.Order.CommentExternal(childComplexity), true

	case "Order.commentInternal":
		if e.complexity.Order.CommentInternal == nil {
			break
		}

		return e.complexity.Order.CommentInternal(childComplexity), true

	case "Order.connection":
		if e.complexity.Order.Connection == nil {
			break
		}

		return e.complexity.Order.Connection(childComplexity), true

	case "Order.consolidation":
		if e.complexity.Order.Consolidation == nil {
			break
		}

		return e.complexity.Order.Consolidation(childComplexity), true

	case "Order.createdAt":
		if e.complexity.Order.CreatedAt == nil {
			break
		}

		return e.complexity.Order.CreatedAt(childComplexity), true

	case "Order.emailSyncConfirmationAt":
		if e.complexity.Order.EmailSyncConfirmationAt == nil {
			break
		}

		return e.complexity.Order.EmailSyncConfirmationAt(childComplexity), true

	case "Order.externalID":
		if e.complexity.Order.ExternalID == nil {
			break
		}

		return e.complexity.Order.ExternalID(childComplexity), true

	case "Order.hypothesisTestDeliveryOptionRequest":
		if e.complexity.Order.HypothesisTestDeliveryOptionRequest == nil {
			break
		}

		return e.complexity.Order.HypothesisTestDeliveryOptionRequest(childComplexity), true

	case "Order.id":
		if e.complexity.Order.ID == nil {
			break
		}

		return e.complexity.Order.ID(childComplexity), true

	case "Order.orderHistory":
		if e.complexity.Order.OrderHistory == nil {
			break
		}

		return e.complexity.Order.OrderHistory(childComplexity), true

	case "Order.orderPublicID":
		if e.complexity.Order.OrderPublicID == nil {
			break
		}

		return e.complexity.Order.OrderPublicID(childComplexity), true

	case "Order.pallet":
		if e.complexity.Order.Pallet == nil {
			break
		}

		return e.complexity.Order.Pallet(childComplexity), true

	case "Order.returnColli":
		if e.complexity.Order.ReturnColli == nil {
			break
		}

		return e.complexity.Order.ReturnColli(childComplexity), true

	case "Order.status":
		if e.complexity.Order.Status == nil {
			break
		}

		return e.complexity.Order.Status(childComplexity), true

	case "Order.tenant":
		if e.complexity.Order.Tenant == nil {
			break
		}

		return e.complexity.Order.Tenant(childComplexity), true

	case "Order.tenantID":
		if e.complexity.Order.TenantID == nil {
			break
		}

		return e.complexity.Order.TenantID(childComplexity), true

	case "OrderConnection.edges":
		if e.complexity.OrderConnection.Edges == nil {
			break
		}

		return e.complexity.OrderConnection.Edges(childComplexity), true

	case "OrderConnection.pageInfo":
		if e.complexity.OrderConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrderConnection.PageInfo(childComplexity), true

	case "OrderConnection.totalCount":
		if e.complexity.OrderConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrderConnection.TotalCount(childComplexity), true

	case "OrderEdge.cursor":
		if e.complexity.OrderEdge.Cursor == nil {
			break
		}

		return e.complexity.OrderEdge.Cursor(childComplexity), true

	case "OrderEdge.node":
		if e.complexity.OrderEdge.Node == nil {
			break
		}

		return e.complexity.OrderEdge.Node(childComplexity), true

	case "OrderHistory.changeHistory":
		if e.complexity.OrderHistory.ChangeHistory == nil {
			break
		}

		return e.complexity.OrderHistory.ChangeHistory(childComplexity), true

	case "OrderHistory.description":
		if e.complexity.OrderHistory.Description == nil {
			break
		}

		return e.complexity.OrderHistory.Description(childComplexity), true

	case "OrderHistory.id":
		if e.complexity.OrderHistory.ID == nil {
			break
		}

		return e.complexity.OrderHistory.ID(childComplexity), true

	case "OrderHistory.order":
		if e.complexity.OrderHistory.Order == nil {
			break
		}

		return e.complexity.OrderHistory.Order(childComplexity), true

	case "OrderHistory.tenant":
		if e.complexity.OrderHistory.Tenant == nil {
			break
		}

		return e.complexity.OrderHistory.Tenant(childComplexity), true

	case "OrderHistory.tenantID":
		if e.complexity.OrderHistory.TenantID == nil {
			break
		}

		return e.complexity.OrderHistory.TenantID(childComplexity), true

	case "OrderHistory.type":
		if e.complexity.OrderHistory.Type == nil {
			break
		}

		return e.complexity.OrderHistory.Type(childComplexity), true

	case "OrderLine.colli":
		if e.complexity.OrderLine.Colli == nil {
			break
		}

		return e.complexity.OrderLine.Colli(childComplexity), true

	case "OrderLine.colliID":
		if e.complexity.OrderLine.ColliID == nil {
			break
		}

		return e.complexity.OrderLine.ColliID(childComplexity), true

	case "OrderLine.createdAt":
		if e.complexity.OrderLine.CreatedAt == nil {
			break
		}

		return e.complexity.OrderLine.CreatedAt(childComplexity), true

	case "OrderLine.currency":
		if e.complexity.OrderLine.Currency == nil {
			break
		}

		return e.complexity.OrderLine.Currency(childComplexity), true

	case "OrderLine.discountAllocationAmount":
		if e.complexity.OrderLine.DiscountAllocationAmount == nil {
			break
		}

		return e.complexity.OrderLine.DiscountAllocationAmount(childComplexity), true

	case "OrderLine.externalID":
		if e.complexity.OrderLine.ExternalID == nil {
			break
		}

		return e.complexity.OrderLine.ExternalID(childComplexity), true

	case "OrderLine.id":
		if e.complexity.OrderLine.ID == nil {
			break
		}

		return e.complexity.OrderLine.ID(childComplexity), true

	case "OrderLine.productVariant":
		if e.complexity.OrderLine.ProductVariant == nil {
			break
		}

		return e.complexity.OrderLine.ProductVariant(childComplexity), true

	case "OrderLine.productVariantID":
		if e.complexity.OrderLine.ProductVariantID == nil {
			break
		}

		return e.complexity.OrderLine.ProductVariantID(childComplexity), true

	case "OrderLine.returnOrderLine":
		if e.complexity.OrderLine.ReturnOrderLine == nil {
			break
		}

		return e.complexity.OrderLine.ReturnOrderLine(childComplexity), true

	case "OrderLine.tenant":
		if e.complexity.OrderLine.Tenant == nil {
			break
		}

		return e.complexity.OrderLine.Tenant(childComplexity), true

	case "OrderLine.tenantID":
		if e.complexity.OrderLine.TenantID == nil {
			break
		}

		return e.complexity.OrderLine.TenantID(childComplexity), true

	case "OrderLine.unitPrice":
		if e.complexity.OrderLine.UnitPrice == nil {
			break
		}

		return e.complexity.OrderLine.UnitPrice(childComplexity), true

	case "OrderLine.units":
		if e.complexity.OrderLine.Units == nil {
			break
		}

		return e.complexity.OrderLine.Units(childComplexity), true

	case "OrderLine.updatedAt":
		if e.complexity.OrderLine.UpdatedAt == nil {
			break
		}

		return e.complexity.OrderLine.UpdatedAt(childComplexity), true

	case "OrderSender.email":
		if e.complexity.OrderSender.Email == nil {
			break
		}

		return e.complexity.OrderSender.Email(childComplexity), true

	case "OrderSender.firstName":
		if e.complexity.OrderSender.FirstName == nil {
			break
		}

		return e.complexity.OrderSender.FirstName(childComplexity), true

	case "OrderSender.id":
		if e.complexity.OrderSender.ID == nil {
			break
		}

		return e.complexity.OrderSender.ID(childComplexity), true

	case "OrderSender.lastName":
		if e.complexity.OrderSender.LastName == nil {
			break
		}

		return e.complexity.OrderSender.LastName(childComplexity), true

	case "OrderSender.phoneNumber":
		if e.complexity.OrderSender.PhoneNumber == nil {
			break
		}

		return e.complexity.OrderSender.PhoneNumber(childComplexity), true

	case "OrderSender.tenant":
		if e.complexity.OrderSender.Tenant == nil {
			break
		}

		return e.complexity.OrderSender.Tenant(childComplexity), true

	case "OrderSender.tenantID":
		if e.complexity.OrderSender.TenantID == nil {
			break
		}

		return e.complexity.OrderSender.TenantID(childComplexity), true

	case "OrderSender.vatNumber":
		if e.complexity.OrderSender.VatNumber == nil {
			break
		}

		return e.complexity.OrderSender.VatNumber(childComplexity), true

	case "OrderSenderConnection.edges":
		if e.complexity.OrderSenderConnection.Edges == nil {
			break
		}

		return e.complexity.OrderSenderConnection.Edges(childComplexity), true

	case "OrderSenderConnection.pageInfo":
		if e.complexity.OrderSenderConnection.PageInfo == nil {
			break
		}

		return e.complexity.OrderSenderConnection.PageInfo(childComplexity), true

	case "OrderSenderConnection.totalCount":
		if e.complexity.OrderSenderConnection.TotalCount == nil {
			break
		}

		return e.complexity.OrderSenderConnection.TotalCount(childComplexity), true

	case "OrderSenderEdge.cursor":
		if e.complexity.OrderSenderEdge.Cursor == nil {
			break
		}

		return e.complexity.OrderSenderEdge.Cursor(childComplexity), true

	case "OrderSenderEdge.node":
		if e.complexity.OrderSenderEdge.Node == nil {
			break
		}

		return e.complexity.OrderSenderEdge.Node(childComplexity), true

	case "OrderShipmentStatus.mayShipRemaining":
		if e.complexity.OrderShipmentStatus.MayShipRemaining == nil {
			break
		}

		return e.complexity.OrderShipmentStatus.MayShipRemaining(childComplexity), true

	case "OrderShipmentStatus.shipmentStatuses":
		if e.complexity.OrderShipmentStatus.ShipmentStatuses == nil {
			break
		}

		return e.complexity.OrderShipmentStatus.ShipmentStatuses(childComplexity), true

	case "Packaging.archivedAt":
		if e.complexity.Packaging.ArchivedAt == nil {
			break
		}

		return e.complexity.Packaging.ArchivedAt(childComplexity), true

	case "Packaging.carrierBrand":
		if e.complexity.Packaging.CarrierBrand == nil {
			break
		}

		return e.complexity.Packaging.CarrierBrand(childComplexity), true

	case "Packaging.colli":
		if e.complexity.Packaging.Colli == nil {
			break
		}

		return e.complexity.Packaging.Colli(childComplexity), true

	case "Packaging.deliveryOption":
		if e.complexity.Packaging.DeliveryOption == nil {
			break
		}

		return e.complexity.Packaging.DeliveryOption(childComplexity), true

	case "Packaging.heightCm":
		if e.complexity.Packaging.HeightCm == nil {
			break
		}

		return e.complexity.Packaging.HeightCm(childComplexity), true

	case "Packaging.id":
		if e.complexity.Packaging.ID == nil {
			break
		}

		return e.complexity.Packaging.ID(childComplexity), true

	case "Packaging.lengthCm":
		if e.complexity.Packaging.LengthCm == nil {
			break
		}

		return e.complexity.Packaging.LengthCm(childComplexity), true

	case "Packaging.name":
		if e.complexity.Packaging.Name == nil {
			break
		}

		return e.complexity.Packaging.Name(childComplexity), true

	case "Packaging.packagingDF":
		if e.complexity.Packaging.PackagingDF == nil {
			break
		}

		return e.complexity.Packaging.PackagingDF(childComplexity), true

	case "Packaging.packagingUSPS":
		if e.complexity.Packaging.PackagingUSPS == nil {
			break
		}

		return e.complexity.Packaging.PackagingUSPS(childComplexity), true

	case "Packaging.pallet":
		if e.complexity.Packaging.Pallet == nil {
			break
		}

		return e.complexity.Packaging.Pallet(childComplexity), true

	case "Packaging.returnColli":
		if e.complexity.Packaging.ReturnColli == nil {
			break
		}

		return e.complexity.Packaging.ReturnColli(childComplexity), true

	case "Packaging.shipmentParcel":
		if e.complexity.Packaging.ShipmentParcel == nil {
			break
		}

		return e.complexity.Packaging.ShipmentParcel(childComplexity), true

	case "Packaging.tenant":
		if e.complexity.Packaging.Tenant == nil {
			break
		}

		return e.complexity.Packaging.Tenant(childComplexity), true

	case "Packaging.tenantID":
		if e.complexity.Packaging.TenantID == nil {
			break
		}

		return e.complexity.Packaging.TenantID(childComplexity), true

	case "Packaging.widthCm":
		if e.complexity.Packaging.WidthCm == nil {
			break
		}

		return e.complexity.Packaging.WidthCm(childComplexity), true

	case "PackagingConnection.edges":
		if e.complexity.PackagingConnection.Edges == nil {
			break
		}

		return e.complexity.PackagingConnection.Edges(childComplexity), true

	case "PackagingConnection.pageInfo":
		if e.complexity.PackagingConnection.PageInfo == nil {
			break
		}

		return e.complexity.PackagingConnection.PageInfo(childComplexity), true

	case "PackagingConnection.totalCount":
		if e.complexity.PackagingConnection.TotalCount == nil {
			break
		}

		return e.complexity.PackagingConnection.TotalCount(childComplexity), true

	case "PackagingDF.apiType":
		if e.complexity.PackagingDF.APIType == nil {
			break
		}

		return e.complexity.PackagingDF.APIType(childComplexity), true

	case "PackagingDF.id":
		if e.complexity.PackagingDF.ID == nil {
			break
		}

		return e.complexity.PackagingDF.ID(childComplexity), true

	case "PackagingDF.maxWeight":
		if e.complexity.PackagingDF.MaxWeight == nil {
			break
		}

		return e.complexity.PackagingDF.MaxWeight(childComplexity), true

	case "PackagingDF.minWeight":
		if e.complexity.PackagingDF.MinWeight == nil {
			break
		}

		return e.complexity.PackagingDF.MinWeight(childComplexity), true

	case "PackagingDF.packaging":
		if e.complexity.PackagingDF.Packaging == nil {
			break
		}

		return e.complexity.PackagingDF.Packaging(childComplexity), true

	case "PackagingDF.stackable":
		if e.complexity.PackagingDF.Stackable == nil {
			break
		}

		return e.complexity.PackagingDF.Stackable(childComplexity), true

	case "PackagingDF.tenant":
		if e.complexity.PackagingDF.Tenant == nil {
			break
		}

		return e.complexity.PackagingDF.Tenant(childComplexity), true

	case "PackagingDF.tenantID":
		if e.complexity.PackagingDF.TenantID == nil {
			break
		}

		return e.complexity.PackagingDF.TenantID(childComplexity), true

	case "PackagingDFConnection.edges":
		if e.complexity.PackagingDFConnection.Edges == nil {
			break
		}

		return e.complexity.PackagingDFConnection.Edges(childComplexity), true

	case "PackagingDFConnection.pageInfo":
		if e.complexity.PackagingDFConnection.PageInfo == nil {
			break
		}

		return e.complexity.PackagingDFConnection.PageInfo(childComplexity), true

	case "PackagingDFConnection.totalCount":
		if e.complexity.PackagingDFConnection.TotalCount == nil {
			break
		}

		return e.complexity.PackagingDFConnection.TotalCount(childComplexity), true

	case "PackagingDFEdge.cursor":
		if e.complexity.PackagingDFEdge.Cursor == nil {
			break
		}

		return e.complexity.PackagingDFEdge.Cursor(childComplexity), true

	case "PackagingDFEdge.node":
		if e.complexity.PackagingDFEdge.Node == nil {
			break
		}

		return e.complexity.PackagingDFEdge.Node(childComplexity), true

	case "PackagingEdge.cursor":
		if e.complexity.PackagingEdge.Cursor == nil {
			break
		}

		return e.complexity.PackagingEdge.Cursor(childComplexity), true

	case "PackagingEdge.node":
		if e.complexity.PackagingEdge.Node == nil {
			break
		}

		return e.complexity.PackagingEdge.Node(childComplexity), true

	case "PackagingUSPS.id":
		if e.complexity.PackagingUSPS.ID == nil {
			break
		}

		return e.complexity.PackagingUSPS.ID(childComplexity), true

	case "PackagingUSPS.packaging":
		if e.complexity.PackagingUSPS.Packaging == nil {
			break
		}

		return e.complexity.PackagingUSPS.Packaging(childComplexity), true

	case "PackagingUSPS.packagingUSPSProcessingCategory":
		if e.complexity.PackagingUSPS.PackagingUSPSProcessingCategory == nil {
			break
		}

		return e.complexity.PackagingUSPS.PackagingUSPSProcessingCategory(childComplexity), true

	case "PackagingUSPS.packagingUSPSRateIndicator":
		if e.complexity.PackagingUSPS.PackagingUSPSRateIndicator == nil {
			break
		}

		return e.complexity.PackagingUSPS.PackagingUSPSRateIndicator(childComplexity), true

	case "PackagingUSPS.tenant":
		if e.complexity.PackagingUSPS.Tenant == nil {
			break
		}

		return e.complexity.PackagingUSPS.Tenant(childComplexity), true

	case "PackagingUSPS.tenantID":
		if e.complexity.PackagingUSPS.TenantID == nil {
			break
		}

		return e.complexity.PackagingUSPS.TenantID(childComplexity), true

	case "PackagingUSPSConnection.edges":
		if e.complexity.PackagingUSPSConnection.Edges == nil {
			break
		}

		return e.complexity.PackagingUSPSConnection.Edges(childComplexity), true

	case "PackagingUSPSConnection.pageInfo":
		if e.complexity.PackagingUSPSConnection.PageInfo == nil {
			break
		}

		return e.complexity.PackagingUSPSConnection.PageInfo(childComplexity), true

	case "PackagingUSPSConnection.totalCount":
		if e.complexity.PackagingUSPSConnection.TotalCount == nil {
			break
		}

		return e.complexity.PackagingUSPSConnection.TotalCount(childComplexity), true

	case "PackagingUSPSEdge.cursor":
		if e.complexity.PackagingUSPSEdge.Cursor == nil {
			break
		}

		return e.complexity.PackagingUSPSEdge.Cursor(childComplexity), true

	case "PackagingUSPSEdge.node":
		if e.complexity.PackagingUSPSEdge.Node == nil {
			break
		}

		return e.complexity.PackagingUSPSEdge.Node(childComplexity), true

	case "PackagingUSPSProcessingCategory.id":
		if e.complexity.PackagingUSPSProcessingCategory.ID == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategory.ID(childComplexity), true

	case "PackagingUSPSProcessingCategory.name":
		if e.complexity.PackagingUSPSProcessingCategory.Name == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategory.Name(childComplexity), true

	case "PackagingUSPSProcessingCategory.processingCategory":
		if e.complexity.PackagingUSPSProcessingCategory.ProcessingCategory == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategory.ProcessingCategory(childComplexity), true

	case "PackagingUSPSProcessingCategoryConnection.edges":
		if e.complexity.PackagingUSPSProcessingCategoryConnection.Edges == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategoryConnection.Edges(childComplexity), true

	case "PackagingUSPSProcessingCategoryConnection.pageInfo":
		if e.complexity.PackagingUSPSProcessingCategoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategoryConnection.PageInfo(childComplexity), true

	case "PackagingUSPSProcessingCategoryConnection.totalCount":
		if e.complexity.PackagingUSPSProcessingCategoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategoryConnection.TotalCount(childComplexity), true

	case "PackagingUSPSProcessingCategoryEdge.cursor":
		if e.complexity.PackagingUSPSProcessingCategoryEdge.Cursor == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategoryEdge.Cursor(childComplexity), true

	case "PackagingUSPSProcessingCategoryEdge.node":
		if e.complexity.PackagingUSPSProcessingCategoryEdge.Node == nil {
			break
		}

		return e.complexity.PackagingUSPSProcessingCategoryEdge.Node(childComplexity), true

	case "PackagingUSPSRateIndicator.code":
		if e.complexity.PackagingUSPSRateIndicator.Code == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicator.Code(childComplexity), true

	case "PackagingUSPSRateIndicator.id":
		if e.complexity.PackagingUSPSRateIndicator.ID == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicator.ID(childComplexity), true

	case "PackagingUSPSRateIndicator.name":
		if e.complexity.PackagingUSPSRateIndicator.Name == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicator.Name(childComplexity), true

	case "PackagingUSPSRateIndicator.packagingUSPS":
		if e.complexity.PackagingUSPSRateIndicator.PackagingUSPS == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicator.PackagingUSPS(childComplexity), true

	case "PackagingUSPSRateIndicatorConnection.edges":
		if e.complexity.PackagingUSPSRateIndicatorConnection.Edges == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicatorConnection.Edges(childComplexity), true

	case "PackagingUSPSRateIndicatorConnection.pageInfo":
		if e.complexity.PackagingUSPSRateIndicatorConnection.PageInfo == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicatorConnection.PageInfo(childComplexity), true

	case "PackagingUSPSRateIndicatorConnection.totalCount":
		if e.complexity.PackagingUSPSRateIndicatorConnection.TotalCount == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicatorConnection.TotalCount(childComplexity), true

	case "PackagingUSPSRateIndicatorEdge.cursor":
		if e.complexity.PackagingUSPSRateIndicatorEdge.Cursor == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicatorEdge.Cursor(childComplexity), true

	case "PackagingUSPSRateIndicatorEdge.node":
		if e.complexity.PackagingUSPSRateIndicatorEdge.Node == nil {
			break
		}

		return e.complexity.PackagingUSPSRateIndicatorEdge.Node(childComplexity), true

	case "PackingSlipsOutput.allPackingSlips":
		if e.complexity.PackingSlipsOutput.AllPackingSlips == nil {
			break
		}

		return e.complexity.PackingSlipsOutput.AllPackingSlips(childComplexity), true

	case "PackingSlipsOutput.packingSlips":
		if e.complexity.PackingSlipsOutput.PackingSlips == nil {
			break
		}

		return e.complexity.PackingSlipsOutput.PackingSlips(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Pallet.cancelledShipmentPallet":
		if e.complexity.Pallet.CancelledShipmentPallet == nil {
			break
		}

		return e.complexity.Pallet.CancelledShipmentPallet(childComplexity), true

	case "Pallet.consolidation":
		if e.complexity.Pallet.Consolidation == nil {
			break
		}

		return e.complexity.Pallet.Consolidation(childComplexity), true

	case "Pallet.description":
		if e.complexity.Pallet.Description == nil {
			break
		}

		return e.complexity.Pallet.Description(childComplexity), true

	case "Pallet.id":
		if e.complexity.Pallet.ID == nil {
			break
		}

		return e.complexity.Pallet.ID(childComplexity), true

	case "Pallet.orders":
		if e.complexity.Pallet.Orders == nil {
			break
		}

		return e.complexity.Pallet.Orders(childComplexity), true

	case "Pallet.packaging":
		if e.complexity.Pallet.Packaging == nil {
			break
		}

		return e.complexity.Pallet.Packaging(childComplexity), true

	case "Pallet.publicID":
		if e.complexity.Pallet.PublicID == nil {
			break
		}

		return e.complexity.Pallet.PublicID(childComplexity), true

	case "Pallet.shipmentPallet":
		if e.complexity.Pallet.ShipmentPallet == nil {
			break
		}

		return e.complexity.Pallet.ShipmentPallet(childComplexity), true

	case "Pallet.tenant":
		if e.complexity.Pallet.Tenant == nil {
			break
		}

		return e.complexity.Pallet.Tenant(childComplexity), true

	case "Pallet.tenantID":
		if e.complexity.Pallet.TenantID == nil {
			break
		}

		return e.complexity.Pallet.TenantID(childComplexity), true

	case "PalletConnection.edges":
		if e.complexity.PalletConnection.Edges == nil {
			break
		}

		return e.complexity.PalletConnection.Edges(childComplexity), true

	case "PalletConnection.pageInfo":
		if e.complexity.PalletConnection.PageInfo == nil {
			break
		}

		return e.complexity.PalletConnection.PageInfo(childComplexity), true

	case "PalletConnection.totalCount":
		if e.complexity.PalletConnection.TotalCount == nil {
			break
		}

		return e.complexity.PalletConnection.TotalCount(childComplexity), true

	case "PalletEdge.cursor":
		if e.complexity.PalletEdge.Cursor == nil {
			break
		}

		return e.complexity.PalletEdge.Cursor(childComplexity), true

	case "PalletEdge.node":
		if e.complexity.PalletEdge.Node == nil {
			break
		}

		return e.complexity.PalletEdge.Node(childComplexity), true

	case "ParcelShop.address":
		if e.complexity.ParcelShop.Address == nil {
			break
		}

		return e.complexity.ParcelShop.Address(childComplexity), true

	case "ParcelShop.businessHoursPeriod":
		if e.complexity.ParcelShop.BusinessHoursPeriod == nil {
			break
		}

		return e.complexity.ParcelShop.BusinessHoursPeriod(childComplexity), true

	case "ParcelShop.carrierBrand":
		if e.complexity.ParcelShop.CarrierBrand == nil {
			break
		}

		return e.complexity.ParcelShop.CarrierBrand(childComplexity), true

	case "ParcelShop.colli":
		if e.complexity.ParcelShop.Colli == nil {
			break
		}

		return e.complexity.ParcelShop.Colli(childComplexity), true

	case "ParcelShop.id":
		if e.complexity.ParcelShop.ID == nil {
			break
		}

		return e.complexity.ParcelShop.ID(childComplexity), true

	case "ParcelShop.lastUpdated":
		if e.complexity.ParcelShop.LastUpdated == nil {
			break
		}

		return e.complexity.ParcelShop.LastUpdated(childComplexity), true

	case "ParcelShop.name":
		if e.complexity.ParcelShop.Name == nil {
			break
		}

		return e.complexity.ParcelShop.Name(childComplexity), true

	case "ParcelShop.parcelShopBring":
		if e.complexity.ParcelShop.ParcelShopBring == nil {
			break
		}

		return e.complexity.ParcelShop.ParcelShopBring(childComplexity), true

	case "ParcelShop.parcelShopDAO":
		if e.complexity.ParcelShop.ParcelShopDAO == nil {
			break
		}

		return e.complexity.ParcelShop.ParcelShopDAO(childComplexity), true

	case "ParcelShop.parcelShopGLS":
		if e.complexity.ParcelShop.ParcelShopGLS == nil {
			break
		}

		return e.complexity.ParcelShop.ParcelShopGLS(childComplexity), true

	case "ParcelShop.parcelShopPostNord":
		if e.complexity.ParcelShop.ParcelShopPostNord == nil {
			break
		}

		return e.complexity.ParcelShop.ParcelShopPostNord(childComplexity), true

	case "ParcelShopBring.addressDelivery":
		if e.complexity.ParcelShopBring.AddressDelivery == nil {
			break
		}

		return e.complexity.ParcelShopBring.AddressDelivery(childComplexity), true

	case "ParcelShopBring.bringID":
		if e.complexity.ParcelShopBring.BringID == nil {
			break
		}

		return e.complexity.ParcelShopBring.BringID(childComplexity), true

	case "ParcelShopBring.id":
		if e.complexity.ParcelShopBring.ID == nil {
			break
		}

		return e.complexity.ParcelShopBring.ID(childComplexity), true

	case "ParcelShopBring.parcelShop":
		if e.complexity.ParcelShopBring.ParcelShop == nil {
			break
		}

		return e.complexity.ParcelShopBring.ParcelShop(childComplexity), true

	case "ParcelShopBring.pointType":
		if e.complexity.ParcelShopBring.PointType == nil {
			break
		}

		return e.complexity.ParcelShopBring.PointType(childComplexity), true

	case "ParcelShopBringConnection.edges":
		if e.complexity.ParcelShopBringConnection.Edges == nil {
			break
		}

		return e.complexity.ParcelShopBringConnection.Edges(childComplexity), true

	case "ParcelShopBringConnection.pageInfo":
		if e.complexity.ParcelShopBringConnection.PageInfo == nil {
			break
		}

		return e.complexity.ParcelShopBringConnection.PageInfo(childComplexity), true

	case "ParcelShopBringConnection.totalCount":
		if e.complexity.ParcelShopBringConnection.TotalCount == nil {
			break
		}

		return e.complexity.ParcelShopBringConnection.TotalCount(childComplexity), true

	case "ParcelShopBringEdge.cursor":
		if e.complexity.ParcelShopBringEdge.Cursor == nil {
			break
		}

		return e.complexity.ParcelShopBringEdge.Cursor(childComplexity), true

	case "ParcelShopBringEdge.node":
		if e.complexity.ParcelShopBringEdge.Node == nil {
			break
		}

		return e.complexity.ParcelShopBringEdge.Node(childComplexity), true

	case "ParcelShopConnection.edges":
		if e.complexity.ParcelShopConnection.Edges == nil {
			break
		}

		return e.complexity.ParcelShopConnection.Edges(childComplexity), true

	case "ParcelShopConnection.pageInfo":
		if e.complexity.ParcelShopConnection.PageInfo == nil {
			break
		}

		return e.complexity.ParcelShopConnection.PageInfo(childComplexity), true

	case "ParcelShopConnection.totalCount":
		if e.complexity.ParcelShopConnection.TotalCount == nil {
			break
		}

		return e.complexity.ParcelShopConnection.TotalCount(childComplexity), true

	case "ParcelShopDAO.id":
		if e.complexity.ParcelShopDAO.ID == nil {
			break
		}

		return e.complexity.ParcelShopDAO.ID(childComplexity), true

	case "ParcelShopDAO.parcelShop":
		if e.complexity.ParcelShopDAO.ParcelShop == nil {
			break
		}

		return e.complexity.ParcelShopDAO.ParcelShop(childComplexity), true

	case "ParcelShopDAO.shopID":
		if e.complexity.ParcelShopDAO.ShopID == nil {
			break
		}

		return e.complexity.ParcelShopDAO.ShopID(childComplexity), true

	case "ParcelShopDAOConnection.edges":
		if e.complexity.ParcelShopDAOConnection.Edges == nil {
			break
		}

		return e.complexity.ParcelShopDAOConnection.Edges(childComplexity), true

	case "ParcelShopDAOConnection.pageInfo":
		if e.complexity.ParcelShopDAOConnection.PageInfo == nil {
			break
		}

		return e.complexity.ParcelShopDAOConnection.PageInfo(childComplexity), true

	case "ParcelShopDAOConnection.totalCount":
		if e.complexity.ParcelShopDAOConnection.TotalCount == nil {
			break
		}

		return e.complexity.ParcelShopDAOConnection.TotalCount(childComplexity), true

	case "ParcelShopDAOEdge.cursor":
		if e.complexity.ParcelShopDAOEdge.Cursor == nil {
			break
		}

		return e.complexity.ParcelShopDAOEdge.Cursor(childComplexity), true

	case "ParcelShopDAOEdge.node":
		if e.complexity.ParcelShopDAOEdge.Node == nil {
			break
		}

		return e.complexity.ParcelShopDAOEdge.Node(childComplexity), true

	case "ParcelShopEdge.cursor":
		if e.complexity.ParcelShopEdge.Cursor == nil {
			break
		}

		return e.complexity.ParcelShopEdge.Cursor(childComplexity), true

	case "ParcelShopEdge.node":
		if e.complexity.ParcelShopEdge.Node == nil {
			break
		}

		return e.complexity.ParcelShopEdge.Node(childComplexity), true

	case "ParcelShopGLS.glsParcelShopID":
		if e.complexity.ParcelShopGLS.GLSParcelShopID == nil {
			break
		}

		return e.complexity.ParcelShopGLS.GLSParcelShopID(childComplexity), true

	case "ParcelShopGLS.id":
		if e.complexity.ParcelShopGLS.ID == nil {
			break
		}

		return e.complexity.ParcelShopGLS.ID(childComplexity), true

	case "ParcelShopGLS.parcelShop":
		if e.complexity.ParcelShopGLS.ParcelShop == nil {
			break
		}

		return e.complexity.ParcelShopGLS.ParcelShop(childComplexity), true

	case "ParcelShopGLS.partnerID":
		if e.complexity.ParcelShopGLS.PartnerID == nil {
			break
		}

		return e.complexity.ParcelShopGLS.PartnerID(childComplexity), true

	case "ParcelShopGLS.type":
		if e.complexity.ParcelShopGLS.Type == nil {
			break
		}

		return e.complexity.ParcelShopGLS.Type(childComplexity), true

	case "ParcelShopGLSConnection.edges":
		if e.complexity.ParcelShopGLSConnection.Edges == nil {
			break
		}

		return e.complexity.ParcelShopGLSConnection.Edges(childComplexity), true

	case "ParcelShopGLSConnection.pageInfo":
		if e.complexity.ParcelShopGLSConnection.PageInfo == nil {
			break
		}

		return e.complexity.ParcelShopGLSConnection.PageInfo(childComplexity), true

	case "ParcelShopGLSConnection.totalCount":
		if e.complexity.ParcelShopGLSConnection.TotalCount == nil {
			break
		}

		return e.complexity.ParcelShopGLSConnection.TotalCount(childComplexity), true

	case "ParcelShopGLSEdge.cursor":
		if e.complexity.ParcelShopGLSEdge.Cursor == nil {
			break
		}

		return e.complexity.ParcelShopGLSEdge.Cursor(childComplexity), true

	case "ParcelShopGLSEdge.node":
		if e.complexity.ParcelShopGLSEdge.Node == nil {
			break
		}

		return e.complexity.ParcelShopGLSEdge.Node(childComplexity), true

	case "ParcelShopPostNord.addressDelivery":
		if e.complexity.ParcelShopPostNord.AddressDelivery == nil {
			break
		}

		return e.complexity.ParcelShopPostNord.AddressDelivery(childComplexity), true

	case "ParcelShopPostNord.id":
		if e.complexity.ParcelShopPostNord.ID == nil {
			break
		}

		return e.complexity.ParcelShopPostNord.ID(childComplexity), true

	case "ParcelShopPostNord.parcelShop":
		if e.complexity.ParcelShopPostNord.ParcelShop == nil {
			break
		}

		return e.complexity.ParcelShopPostNord.ParcelShop(childComplexity), true

	case "ParcelShopPostNord.pudoid":
		if e.complexity.ParcelShopPostNord.Pudoid == nil {
			break
		}

		return e.complexity.ParcelShopPostNord.Pudoid(childComplexity), true

	case "ParcelShopPostNord.servicePointID":
		if e.complexity.ParcelShopPostNord.ServicePointID == nil {
			break
		}

		return e.complexity.ParcelShopPostNord.ServicePointID(childComplexity), true

	case "ParcelShopPostNord.typeID":
		if e.complexity.ParcelShopPostNord.TypeID == nil {
			break
		}

		return e.complexity.ParcelShopPostNord.TypeID(childComplexity), true

	case "ParcelShopPostNordConnection.edges":
		if e.complexity.ParcelShopPostNordConnection.Edges == nil {
			break
		}

		return e.complexity.ParcelShopPostNordConnection.Edges(childComplexity), true

	case "ParcelShopPostNordConnection.pageInfo":
		if e.complexity.ParcelShopPostNordConnection.PageInfo == nil {
			break
		}

		return e.complexity.ParcelShopPostNordConnection.PageInfo(childComplexity), true

	case "ParcelShopPostNordConnection.totalCount":
		if e.complexity.ParcelShopPostNordConnection.TotalCount == nil {
			break
		}

		return e.complexity.ParcelShopPostNordConnection.TotalCount(childComplexity), true

	case "ParcelShopPostNordEdge.cursor":
		if e.complexity.ParcelShopPostNordEdge.Cursor == nil {
			break
		}

		return e.complexity.ParcelShopPostNordEdge.Cursor(childComplexity), true

	case "ParcelShopPostNordEdge.node":
		if e.complexity.ParcelShopPostNordEdge.Node == nil {
			break
		}

		return e.complexity.ParcelShopPostNordEdge.Node(childComplexity), true

	case "ParcelStatuses.ccSignatures":
		if e.complexity.ParcelStatuses.CcSignatures == nil {
			break
		}

		return e.complexity.ParcelStatuses.CcSignatures(childComplexity), true

	case "ParcelStatuses.colliID":
		if e.complexity.ParcelStatuses.ColliID == nil {
			break
		}

		return e.complexity.ParcelStatuses.ColliID(childComplexity), true

	case "ParcelStatuses.shipmentID":
		if e.complexity.ParcelStatuses.ShipmentID == nil {
			break
		}

		return e.complexity.ParcelStatuses.ShipmentID(childComplexity), true

	case "Plan.createdAt":
		if e.complexity.Plan.CreatedAt == nil {
			break
		}

		return e.complexity.Plan.CreatedAt(childComplexity), true

	case "Plan.id":
		if e.complexity.Plan.ID == nil {
			break
		}

		return e.complexity.Plan.ID(childComplexity), true

	case "Plan.label":
		if e.complexity.Plan.Label == nil {
			break
		}

		return e.complexity.Plan.Label(childComplexity), true

	case "Plan.planHistoryPlan":
		if e.complexity.Plan.PlanHistoryPlan == nil {
			break
		}

		return e.complexity.Plan.PlanHistoryPlan(childComplexity), true

	case "Plan.priceDkk":
		if e.complexity.Plan.PriceDkk == nil {
			break
		}

		return e.complexity.Plan.PriceDkk(childComplexity), true

	case "Plan.rank":
		if e.complexity.Plan.Rank == nil {
			break
		}

		return e.complexity.Plan.Rank(childComplexity), true

	case "Plan.tenant":
		if e.complexity.Plan.Tenant == nil {
			break
		}

		return e.complexity.Plan.Tenant(childComplexity), true

	case "PlanConnection.edges":
		if e.complexity.PlanConnection.Edges == nil {
			break
		}

		return e.complexity.PlanConnection.Edges(childComplexity), true

	case "PlanConnection.pageInfo":
		if e.complexity.PlanConnection.PageInfo == nil {
			break
		}

		return e.complexity.PlanConnection.PageInfo(childComplexity), true

	case "PlanConnection.totalCount":
		if e.complexity.PlanConnection.TotalCount == nil {
			break
		}

		return e.complexity.PlanConnection.TotalCount(childComplexity), true

	case "PlanEdge.cursor":
		if e.complexity.PlanEdge.Cursor == nil {
			break
		}

		return e.complexity.PlanEdge.Cursor(childComplexity), true

	case "PlanEdge.node":
		if e.complexity.PlanEdge.Node == nil {
			break
		}

		return e.complexity.PlanEdge.Node(childComplexity), true

	case "PlanHistory.changeHistory":
		if e.complexity.PlanHistory.ChangeHistory == nil {
			break
		}

		return e.complexity.PlanHistory.ChangeHistory(childComplexity), true

	case "PlanHistory.changedBy":
		if e.complexity.PlanHistory.ChangedBy == nil {
			break
		}

		return e.complexity.PlanHistory.ChangedBy(childComplexity), true

	case "PlanHistory.changedFrom":
		if e.complexity.PlanHistory.ChangedFrom == nil {
			break
		}

		return e.complexity.PlanHistory.ChangedFrom(childComplexity), true

	case "PlanHistory.createdAt":
		if e.complexity.PlanHistory.CreatedAt == nil {
			break
		}

		return e.complexity.PlanHistory.CreatedAt(childComplexity), true

	case "PlanHistory.id":
		if e.complexity.PlanHistory.ID == nil {
			break
		}

		return e.complexity.PlanHistory.ID(childComplexity), true

	case "PlanHistory.tenant":
		if e.complexity.PlanHistory.Tenant == nil {
			break
		}

		return e.complexity.PlanHistory.Tenant(childComplexity), true

	case "PlanHistory.tenantID":
		if e.complexity.PlanHistory.TenantID == nil {
			break
		}

		return e.complexity.PlanHistory.TenantID(childComplexity), true

	case "PrintJob.base64PrintData":
		if e.complexity.PrintJob.Base64PrintData == nil {
			break
		}

		return e.complexity.PrintJob.Base64PrintData(childComplexity), true

	case "PrintJob.colli":
		if e.complexity.PrintJob.Colli == nil {
			break
		}

		return e.complexity.PrintJob.Colli(childComplexity), true

	case "PrintJob.createdAt":
		if e.complexity.PrintJob.CreatedAt == nil {
			break
		}

		return e.complexity.PrintJob.CreatedAt(childComplexity), true

	case "PrintJob.documentType":
		if e.complexity.PrintJob.DocumentType == nil {
			break
		}

		return e.complexity.PrintJob.DocumentType(childComplexity), true

	case "PrintJob.fileExtension":
		if e.complexity.PrintJob.FileExtension == nil {
			break
		}

		return e.complexity.PrintJob.FileExtension(childComplexity), true

	case "PrintJob.id":
		if e.complexity.PrintJob.ID == nil {
			break
		}

		return e.complexity.PrintJob.ID(childComplexity), true

	case "PrintJob.printer":
		if e.complexity.PrintJob.Printer == nil {
			break
		}

		return e.complexity.PrintJob.Printer(childComplexity), true

	case "PrintJob.printerMessages":
		if e.complexity.PrintJob.PrinterMessages == nil {
			break
		}

		return e.complexity.PrintJob.PrinterMessages(childComplexity), true

	case "PrintJob.shipmentParcel":
		if e.complexity.PrintJob.ShipmentParcel == nil {
			break
		}

		return e.complexity.PrintJob.ShipmentParcel(childComplexity), true

	case "PrintJob.status":
		if e.complexity.PrintJob.Status == nil {
			break
		}

		return e.complexity.PrintJob.Status(childComplexity), true

	case "PrintJob.tenant":
		if e.complexity.PrintJob.Tenant == nil {
			break
		}

		return e.complexity.PrintJob.Tenant(childComplexity), true

	case "PrintJob.tenantID":
		if e.complexity.PrintJob.TenantID == nil {
			break
		}

		return e.complexity.PrintJob.TenantID(childComplexity), true

	case "Printer.createdAt":
		if e.complexity.Printer.CreatedAt == nil {
			break
		}

		return e.complexity.Printer.CreatedAt(childComplexity), true

	case "Printer.deviceID":
		if e.complexity.Printer.DeviceID == nil {
			break
		}

		return e.complexity.Printer.DeviceID(childComplexity), true

	case "Printer.document":
		if e.complexity.Printer.Document == nil {
			break
		}

		return e.complexity.Printer.Document(childComplexity), true

	case "Printer.id":
		if e.complexity.Printer.ID == nil {
			break
		}

		return e.complexity.Printer.ID(childComplexity), true

	case "Printer.labelPdf":
		if e.complexity.Printer.LabelPdf == nil {
			break
		}

		return e.complexity.Printer.LabelPdf(childComplexity), true

	case "Printer.labelPng":
		if e.complexity.Printer.LabelPng == nil {
			break
		}

		return e.complexity.Printer.LabelPng(childComplexity), true

	case "Printer.labelZpl":
		if e.complexity.Printer.LabelZpl == nil {
			break
		}

		return e.complexity.Printer.LabelZpl(childComplexity), true

	case "Printer.lastPing":
		if e.complexity.Printer.LastPing == nil {
			break
		}

		return e.complexity.Printer.LastPing(childComplexity), true

	case "Printer.name":
		if e.complexity.Printer.Name == nil {
			break
		}

		return e.complexity.Printer.Name(childComplexity), true

	case "Printer.printJobs":
		if e.complexity.Printer.PrintJobs == nil {
			break
		}

		return e.complexity.Printer.PrintJobs(childComplexity), true

	case "Printer.printSize":
		if e.complexity.Printer.PrintSize == nil {
			break
		}

		return e.complexity.Printer.PrintSize(childComplexity), true

	case "Printer.rotate180":
		if e.complexity.Printer.Rotate180 == nil {
			break
		}

		return e.complexity.Printer.Rotate180(childComplexity), true

	case "Printer.tenant":
		if e.complexity.Printer.Tenant == nil {
			break
		}

		return e.complexity.Printer.Tenant(childComplexity), true

	case "Printer.tenantID":
		if e.complexity.Printer.TenantID == nil {
			break
		}

		return e.complexity.Printer.TenantID(childComplexity), true

	case "Printer.useShell":
		if e.complexity.Printer.UseShell == nil {
			break
		}

		return e.complexity.Printer.UseShell(childComplexity), true

	case "Printer.workstation":
		if e.complexity.Printer.Workstation == nil {
			break
		}

		return e.complexity.Printer.Workstation(childComplexity), true

	case "PrinterConnection.edges":
		if e.complexity.PrinterConnection.Edges == nil {
			break
		}

		return e.complexity.PrinterConnection.Edges(childComplexity), true

	case "PrinterConnection.pageInfo":
		if e.complexity.PrinterConnection.PageInfo == nil {
			break
		}

		return e.complexity.PrinterConnection.PageInfo(childComplexity), true

	case "PrinterConnection.totalCount":
		if e.complexity.PrinterConnection.TotalCount == nil {
			break
		}

		return e.complexity.PrinterConnection.TotalCount(childComplexity), true

	case "PrinterEdge.cursor":
		if e.complexity.PrinterEdge.Cursor == nil {
			break
		}

		return e.complexity.PrinterEdge.Cursor(childComplexity), true

	case "PrinterEdge.node":
		if e.complexity.PrinterEdge.Node == nil {
			break
		}

		return e.complexity.PrinterEdge.Node(childComplexity), true

	case "Product.bodyHTML":
		if e.complexity.Product.BodyHTML == nil {
			break
		}

		return e.complexity.Product.BodyHTML(childComplexity), true

	case "Product.createdAt":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.externalID":
		if e.complexity.Product.ExternalID == nil {
			break
		}

		return e.complexity.Product.ExternalID(childComplexity), true

	case "Product.id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.productImage":
		if e.complexity.Product.ProductImage == nil {
			break
		}

		return e.complexity.Product.ProductImage(childComplexity), true

	case "Product.productTags":
		if e.complexity.Product.ProductTags == nil {
			break
		}

		return e.complexity.Product.ProductTags(childComplexity), true

	case "Product.productVariant":
		if e.complexity.Product.ProductVariant == nil {
			break
		}

		return e.complexity.Product.ProductVariant(childComplexity), true

	case "Product.status":
		if e.complexity.Product.Status == nil {
			break
		}

		return e.complexity.Product.Status(childComplexity), true

	case "Product.tenant":
		if e.complexity.Product.Tenant == nil {
			break
		}

		return e.complexity.Product.Tenant(childComplexity), true

	case "Product.tenantID":
		if e.complexity.Product.TenantID == nil {
			break
		}

		return e.complexity.Product.TenantID(childComplexity), true

	case "Product.title":
		if e.complexity.Product.Title == nil {
			break
		}

		return e.complexity.Product.Title(childComplexity), true

	case "Product.updatedAt":
		if e.complexity.Product.UpdatedAt == nil {
			break
		}

		return e.complexity.Product.UpdatedAt(childComplexity), true

	case "ProductConnection.edges":
		if e.complexity.ProductConnection.Edges == nil {
			break
		}

		return e.complexity.ProductConnection.Edges(childComplexity), true

	case "ProductConnection.pageInfo":
		if e.complexity.ProductConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductConnection.PageInfo(childComplexity), true

	case "ProductConnection.totalCount":
		if e.complexity.ProductConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductConnection.TotalCount(childComplexity), true

	case "ProductEdge.cursor":
		if e.complexity.ProductEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductEdge.Cursor(childComplexity), true

	case "ProductEdge.node":
		if e.complexity.ProductEdge.Node == nil {
			break
		}

		return e.complexity.ProductEdge.Node(childComplexity), true

	case "ProductImage.externalID":
		if e.complexity.ProductImage.ExternalID == nil {
			break
		}

		return e.complexity.ProductImage.ExternalID(childComplexity), true

	case "ProductImage.id":
		if e.complexity.ProductImage.ID == nil {
			break
		}

		return e.complexity.ProductImage.ID(childComplexity), true

	case "ProductImage.product":
		if e.complexity.ProductImage.Product == nil {
			break
		}

		return e.complexity.ProductImage.Product(childComplexity), true

	case "ProductImage.productVariant":
		if e.complexity.ProductImage.ProductVariant == nil {
			break
		}

		return e.complexity.ProductImage.ProductVariant(childComplexity), true

	case "ProductImage.tenant":
		if e.complexity.ProductImage.Tenant == nil {
			break
		}

		return e.complexity.ProductImage.Tenant(childComplexity), true

	case "ProductImage.tenantID":
		if e.complexity.ProductImage.TenantID == nil {
			break
		}

		return e.complexity.ProductImage.TenantID(childComplexity), true

	case "ProductImage.url":
		if e.complexity.ProductImage.URL == nil {
			break
		}

		return e.complexity.ProductImage.URL(childComplexity), true

	case "ProductImageConnection.edges":
		if e.complexity.ProductImageConnection.Edges == nil {
			break
		}

		return e.complexity.ProductImageConnection.Edges(childComplexity), true

	case "ProductImageConnection.pageInfo":
		if e.complexity.ProductImageConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductImageConnection.PageInfo(childComplexity), true

	case "ProductImageConnection.totalCount":
		if e.complexity.ProductImageConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductImageConnection.TotalCount(childComplexity), true

	case "ProductImageEdge.cursor":
		if e.complexity.ProductImageEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductImageEdge.Cursor(childComplexity), true

	case "ProductImageEdge.node":
		if e.complexity.ProductImageEdge.Node == nil {
			break
		}

		return e.complexity.ProductImageEdge.Node(childComplexity), true

	case "ProductTag.createdAt":
		if e.complexity.ProductTag.CreatedAt == nil {
			break
		}

		return e.complexity.ProductTag.CreatedAt(childComplexity), true

	case "ProductTag.id":
		if e.complexity.ProductTag.ID == nil {
			break
		}

		return e.complexity.ProductTag.ID(childComplexity), true

	case "ProductTag.name":
		if e.complexity.ProductTag.Name == nil {
			break
		}

		return e.complexity.ProductTag.Name(childComplexity), true

	case "ProductTag.products":
		if e.complexity.ProductTag.Products == nil {
			break
		}

		return e.complexity.ProductTag.Products(childComplexity), true

	case "ProductTag.tenant":
		if e.complexity.ProductTag.Tenant == nil {
			break
		}

		return e.complexity.ProductTag.Tenant(childComplexity), true

	case "ProductTag.tenantID":
		if e.complexity.ProductTag.TenantID == nil {
			break
		}

		return e.complexity.ProductTag.TenantID(childComplexity), true

	case "ProductTagConnection.edges":
		if e.complexity.ProductTagConnection.Edges == nil {
			break
		}

		return e.complexity.ProductTagConnection.Edges(childComplexity), true

	case "ProductTagConnection.pageInfo":
		if e.complexity.ProductTagConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductTagConnection.PageInfo(childComplexity), true

	case "ProductTagConnection.totalCount":
		if e.complexity.ProductTagConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductTagConnection.TotalCount(childComplexity), true

	case "ProductTagEdge.cursor":
		if e.complexity.ProductTagEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductTagEdge.Cursor(childComplexity), true

	case "ProductTagEdge.node":
		if e.complexity.ProductTagEdge.Node == nil {
			break
		}

		return e.complexity.ProductTagEdge.Node(childComplexity), true

	case "ProductVariant.archived":
		if e.complexity.ProductVariant.Archived == nil {
			break
		}

		return e.complexity.ProductVariant.Archived(childComplexity), true

	case "ProductVariant.createdAt":
		if e.complexity.ProductVariant.CreatedAt == nil {
			break
		}

		return e.complexity.ProductVariant.CreatedAt(childComplexity), true

	case "ProductVariant.description":
		if e.complexity.ProductVariant.Description == nil {
			break
		}

		return e.complexity.ProductVariant.Description(childComplexity), true

	case "ProductVariant.dimensionHeight":
		if e.complexity.ProductVariant.DimensionHeight == nil {
			break
		}

		return e.complexity.ProductVariant.DimensionHeight(childComplexity), true

	case "ProductVariant.dimensionLength":
		if e.complexity.ProductVariant.DimensionLength == nil {
			break
		}

		return e.complexity.ProductVariant.DimensionLength(childComplexity), true

	case "ProductVariant.dimensionWidth":
		if e.complexity.ProductVariant.DimensionWidth == nil {
			break
		}

		return e.complexity.ProductVariant.DimensionWidth(childComplexity), true

	case "ProductVariant.eanNumber":
		if e.complexity.ProductVariant.EanNumber == nil {
			break
		}

		return e.complexity.ProductVariant.EanNumber(childComplexity), true

	case "ProductVariant.externalID":
		if e.complexity.ProductVariant.ExternalID == nil {
			break
		}

		return e.complexity.ProductVariant.ExternalID(childComplexity), true

	case "ProductVariant.id":
		if e.complexity.ProductVariant.ID == nil {
			break
		}

		return e.complexity.ProductVariant.ID(childComplexity), true

	case "ProductVariant.inventoryItem":
		if e.complexity.ProductVariant.InventoryItem == nil {
			break
		}

		return e.complexity.ProductVariant.InventoryItem(childComplexity), true

	case "ProductVariant.orderLines":
		if e.complexity.ProductVariant.OrderLines == nil {
			break
		}

		return e.complexity.ProductVariant.OrderLines(childComplexity), true

	case "ProductVariant.product":
		if e.complexity.ProductVariant.Product == nil {
			break
		}

		return e.complexity.ProductVariant.Product(childComplexity), true

	case "ProductVariant.productImage":
		if e.complexity.ProductVariant.ProductImage == nil {
			break
		}

		return e.complexity.ProductVariant.ProductImage(childComplexity), true

	case "ProductVariant.tenant":
		if e.complexity.ProductVariant.Tenant == nil {
			break
		}

		return e.complexity.ProductVariant.Tenant(childComplexity), true

	case "ProductVariant.tenantID":
		if e.complexity.ProductVariant.TenantID == nil {
			break
		}

		return e.complexity.ProductVariant.TenantID(childComplexity), true

	case "ProductVariant.updatedAt":
		if e.complexity.ProductVariant.UpdatedAt == nil {
			break
		}

		return e.complexity.ProductVariant.UpdatedAt(childComplexity), true

	case "ProductVariant.weightG":
		if e.complexity.ProductVariant.WeightG == nil {
			break
		}

		return e.complexity.ProductVariant.WeightG(childComplexity), true

	case "ProductVariantConnection.edges":
		if e.complexity.ProductVariantConnection.Edges == nil {
			break
		}

		return e.complexity.ProductVariantConnection.Edges(childComplexity), true

	case "ProductVariantConnection.pageInfo":
		if e.complexity.ProductVariantConnection.PageInfo == nil {
			break
		}

		return e.complexity.ProductVariantConnection.PageInfo(childComplexity), true

	case "ProductVariantConnection.totalCount":
		if e.complexity.ProductVariantConnection.TotalCount == nil {
			break
		}

		return e.complexity.ProductVariantConnection.TotalCount(childComplexity), true

	case "ProductVariantEdge.cursor":
		if e.complexity.ProductVariantEdge.Cursor == nil {
			break
		}

		return e.complexity.ProductVariantEdge.Cursor(childComplexity), true

	case "ProductVariantEdge.node":
		if e.complexity.ProductVariantEdge.Node == nil {
			break
		}

		return e.complexity.ProductVariantEdge.Node(childComplexity), true

	case "Query.apiTokens":
		if e.complexity.Query.APITokens == nil {
			break
		}

		args, err := ec.field_Query_apiTokens_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.APITokens(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.APITokenWhereInput)), true

	case "Query.accessRights":
		if e.complexity.Query.AccessRights == nil {
			break
		}

		args, err := ec.field_Query_accessRights_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AccessRights(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.AccessRightWhereInput)), true

	case "Query.addReturnDeliveryOption":
		if e.complexity.Query.AddReturnDeliveryOption == nil {
			break
		}

		args, err := ec.field_Query_addReturnDeliveryOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AddReturnDeliveryOption(childComplexity, args["deliveryOptions"].([]*models.MutateReturnDeliveryOption)), true

	case "Query.addressGlobals":
		if e.complexity.Query.AddressGlobals == nil {
			break
		}

		args, err := ec.field_Query_addressGlobals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AddressGlobals(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.AddressGlobalWhereInput)), true

	case "Query.addresses":
		if e.complexity.Query.Addresses == nil {
			break
		}

		args, err := ec.field_Query_addresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Addresses(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.AddressWhereInput)), true

	case "Query.allLocationsIn":
		if e.complexity.Query.AllLocationsIn == nil {
			break
		}

		args, err := ec.field_Query_allLocationsIn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllLocationsIn(childComplexity, args["country"].(*pulid.ID)), true

	case "Query.availableAdditionalServicesPostNord":
		if e.complexity.Query.AvailableAdditionalServicesPostNord == nil {
			break
		}

		args, err := ec.field_Query_availableAdditionalServicesPostNord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AvailableAdditionalServicesPostNord(childComplexity, args["carrierServiceID"].(pulid.ID)), true

	case "Query.availableAdditionalServicesUSPS":
		if e.complexity.Query.AvailableAdditionalServicesUsps == nil {
			break
		}

		args, err := ec.field_Query_availableAdditionalServicesUSPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AvailableAdditionalServicesUsps(childComplexity, args["carrierServiceID"].(pulid.ID)), true

	case "Query.availableDeliveryPoints":
		if e.complexity.Query.AvailableDeliveryPoints == nil {
			break
		}

		args, err := ec.field_Query_availableDeliveryPoints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AvailableDeliveryPoints(childComplexity, args["deliveryOptionID"].(*pulid.ID), args["address"].(*ent.CreateAddressInput)), true

	case "Query.availableTenants":
		if e.complexity.Query.AvailableTenants == nil {
			break
		}

		return e.complexity.Query.AvailableTenants(childComplexity), true

	case "Query.buildInfo":
		if e.complexity.Query.BuildInfo == nil {
			break
		}

		return e.complexity.Query.BuildInfo(childComplexity), true

	case "Query.businessHoursPeriods":
		if e.complexity.Query.BusinessHoursPeriods == nil {
			break
		}

		args, err := ec.field_Query_businessHoursPeriods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BusinessHoursPeriods(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.BusinessHoursPeriodWhereInput)), true

	case "Query.carrier":
		if e.complexity.Query.Carrier == nil {
			break
		}

		args, err := ec.field_Query_carrier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Carrier(childComplexity, args["id"].(*pulid.ID)), true

	case "Query.carrierAdditionalServiceBrings":
		if e.complexity.Query.CarrierAdditionalServiceBrings == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceBrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceBrings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceBringWhereInput)), true

	case "Query.carrierAdditionalServiceDaOs":
		if e.complexity.Query.CarrierAdditionalServiceDaOs == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceDaOs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceDaOs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceDAOWhereInput)), true

	case "Query.carrierAdditionalServiceDfs":
		if e.complexity.Query.CarrierAdditionalServiceDfs == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceDfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceDfs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceDFWhereInput)), true

	case "Query.carrierAdditionalServiceDsVs":
		if e.complexity.Query.CarrierAdditionalServiceDsVs == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceDsVs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceDsVs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceDSVWhereInput)), true

	case "Query.carrierAdditionalServiceEasyPosts":
		if e.complexity.Query.CarrierAdditionalServiceEasyPosts == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceEasyPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceEasyPosts(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceEasyPostWhereInput)), true

	case "Query.carrierAdditionalServiceGlSs":
		if e.complexity.Query.CarrierAdditionalServiceGlSs == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceGlSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceGlSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceGLSWhereInput)), true

	case "Query.carrierAdditionalServicePostNords":
		if e.complexity.Query.CarrierAdditionalServicePostNords == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServicePostNords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServicePostNords(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServicePostNordWhereInput)), true

	case "Query.carrierAdditionalServiceUspSs":
		if e.complexity.Query.CarrierAdditionalServiceUspSs == nil {
			break
		}

		args, err := ec.field_Query_carrierAdditionalServiceUspSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierAdditionalServiceUspSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierAdditionalServiceUSPSWhereInput)), true

	case "Query.carrierBrands":
		if e.complexity.Query.CarrierBrands == nil {
			break
		}

		args, err := ec.field_Query_carrierBrands_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierBrands(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierBrandWhereInput)), true

	case "Query.carrierBrings":
		if e.complexity.Query.CarrierBrings == nil {
			break
		}

		args, err := ec.field_Query_carrierBrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierBrings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierBringWhereInput)), true

	case "Query.carrierDaOs":
		if e.complexity.Query.CarrierDaOs == nil {
			break
		}

		args, err := ec.field_Query_carrierDaOs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierDaOs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierDAOWhereInput)), true

	case "Query.carrierDfs":
		if e.complexity.Query.CarrierDfs == nil {
			break
		}

		args, err := ec.field_Query_carrierDfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierDfs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierDFWhereInput)), true

	case "Query.carrierDsVs":
		if e.complexity.Query.CarrierDsVs == nil {
			break
		}

		args, err := ec.field_Query_carrierDsVs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierDsVs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierDSVWhereInput)), true

	case "Query.carrierEasyPosts":
		if e.complexity.Query.CarrierEasyPosts == nil {
			break
		}

		args, err := ec.field_Query_carrierEasyPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierEasyPosts(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierEasyPostWhereInput)), true

	case "Query.carrierGlSs":
		if e.complexity.Query.CarrierGlSs == nil {
			break
		}

		args, err := ec.field_Query_carrierGlSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierGlSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierGLSWhereInput)), true

	case "Query.carrierGLS":
		if e.complexity.Query.CarrierGls == nil {
			break
		}

		args, err := ec.field_Query_carrierGLS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierGls(childComplexity, args["id"].(pulid.ID)), true

	case "Query.carrierPostNord":
		if e.complexity.Query.CarrierPostNord == nil {
			break
		}

		args, err := ec.field_Query_carrierPostNord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierPostNord(childComplexity, args["id"].(pulid.ID)), true

	case "Query.carrierPostNords":
		if e.complexity.Query.CarrierPostNords == nil {
			break
		}

		args, err := ec.field_Query_carrierPostNords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierPostNords(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierPostNordWhereInput)), true

	case "Query.carrierServiceBrings":
		if e.complexity.Query.CarrierServiceBrings == nil {
			break
		}

		args, err := ec.field_Query_carrierServiceBrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierServiceBrings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierServiceBringWhereInput)), true

	case "Query.carrierServiceDaOs":
		if e.complexity.Query.CarrierServiceDaOs == nil {
			break
		}

		args, err := ec.field_Query_carrierServiceDaOs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierServiceDaOs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierServiceDAOWhereInput)), true

	case "Query.carrierServiceDfs":
		if e.complexity.Query.CarrierServiceDfs == nil {
			break
		}

		args, err := ec.field_Query_carrierServiceDfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierServiceDfs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierServiceDFWhereInput)), true

	case "Query.carrierServiceDsVs":
		if e.complexity.Query.CarrierServiceDsVs == nil {
			break
		}

		args, err := ec.field_Query_carrierServiceDsVs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierServiceDsVs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierServiceDSVWhereInput)), true

	case "Query.carrierServiceEasyPosts":
		if e.complexity.Query.CarrierServiceEasyPosts == nil {
			break
		}

		return e.complexity.Query.CarrierServiceEasyPosts(childComplexity), true

	case "Query.carrierServiceGlSs":
		if e.complexity.Query.CarrierServiceGlSs == nil {
			break
		}

		return e.complexity.Query.CarrierServiceGlSs(childComplexity), true

	case "Query.carrierServicePostNords":
		if e.complexity.Query.CarrierServicePostNords == nil {
			break
		}

		return e.complexity.Query.CarrierServicePostNords(childComplexity), true

	case "Query.carrierServices":
		if e.complexity.Query.CarrierServices == nil {
			break
		}

		args, err := ec.field_Query_carrierServices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierServices(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierServiceWhereInput)), true

	case "Query.carrierUspSs":
		if e.complexity.Query.CarrierUspSs == nil {
			break
		}

		args, err := ec.field_Query_carrierUspSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierUspSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierUSPSWhereInput)), true

	case "Query.carrierUSPS":
		if e.complexity.Query.CarrierUsps == nil {
			break
		}

		args, err := ec.field_Query_carrierUSPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarrierUsps(childComplexity, args["id"].(pulid.ID)), true

	case "Query.carriers":
		if e.complexity.Query.Carriers == nil {
			break
		}

		args, err := ec.field_Query_carriers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Carriers(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CarrierWhereInput)), true

	case "Query.changeHistories":
		if e.complexity.Query.ChangeHistories == nil {
			break
		}

		args, err := ec.field_Query_changeHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ChangeHistories(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.ChangeHistoryOrder), args["where"].(*ent.ChangeHistoryWhereInput)), true

	case "Query.clickCollectLocation":
		if e.complexity.Query.ClickCollectLocation == nil {
			break
		}

		args, err := ec.field_Query_clickCollectLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ClickCollectLocation(childComplexity, args["colliID"].(pulid.ID)), true

	case "Query.colli":
		if e.complexity.Query.Colli == nil {
			break
		}

		args, err := ec.field_Query_colli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Colli(childComplexity, args["id"].(*pulid.ID)), true

	case "Query.collis":
		if e.complexity.Query.Collis == nil {
			break
		}

		args, err := ec.field_Query_collis_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Collis(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ColliWhereInput)), true

	case "Query.connectOptionCarriers":
		if e.complexity.Query.ConnectOptionCarriers == nil {
			break
		}

		args, err := ec.field_Query_connectOptionCarriers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectOptionCarriers(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ConnectOptionCarrierWhereInput)), true

	case "Query.connectOptionPlatforms":
		if e.complexity.Query.ConnectOptionPlatforms == nil {
			break
		}

		args, err := ec.field_Query_connectOptionPlatforms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectOptionPlatforms(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ConnectOptionPlatformWhereInput)), true

	case "Query.connection":
		if e.complexity.Query.Connection == nil {
			break
		}

		args, err := ec.field_Query_connection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Connection(childComplexity, args["id"].(*pulid.ID)), true

	case "Query.connectionBrands":
		if e.complexity.Query.ConnectionBrands == nil {
			break
		}

		args, err := ec.field_Query_connectionBrands_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionBrands(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ConnectionBrandWhereInput)), true

	case "Query.connectionList":
		if e.complexity.Query.ConnectionList == nil {
			break
		}

		return e.complexity.Query.ConnectionList(childComplexity), true

	case "Query.connectionLookups":
		if e.complexity.Query.ConnectionLookups == nil {
			break
		}

		args, err := ec.field_Query_connectionLookups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionLookups(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.ConnectionLookupOrder), args["where"].(*ent.ConnectionLookupWhereInput)), true

	case "Query.connectionShopifies":
		if e.complexity.Query.ConnectionShopifies == nil {
			break
		}

		args, err := ec.field_Query_connectionShopifies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionShopifies(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ConnectionShopifyWhereInput)), true

	case "Query.connectionShopify":
		if e.complexity.Query.ConnectionShopify == nil {
			break
		}

		args, err := ec.field_Query_connectionShopify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionShopify(childComplexity, args["id"].(pulid.ID)), true

	case "Query.connections":
		if e.complexity.Query.Connections == nil {
			break
		}

		args, err := ec.field_Query_connections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Connections(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ConnectionWhereInput)), true

	case "Query.consolidation":
		if e.complexity.Query.Consolidation == nil {
			break
		}

		args, err := ec.field_Query_consolidation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Consolidation(childComplexity, args["id"].(pulid.ID)), true

	case "Query.consolidationShipments":
		if e.complexity.Query.ConsolidationShipments == nil {
			break
		}

		args, err := ec.field_Query_consolidationShipments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConsolidationShipments(childComplexity, args["consolidationID"].(pulid.ID)), true

	case "Query.consolidations":
		if e.complexity.Query.Consolidations == nil {
			break
		}

		args, err := ec.field_Query_consolidations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Consolidations(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.ConsolidationOrder), args["where"].(*ent.ConsolidationWhereInput)), true

	case "Query.constraintGroup":
		if e.complexity.Query.ConstraintGroup == nil {
			break
		}

		args, err := ec.field_Query_constraintGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConstraintGroup(childComplexity, args["id"].(pulid.ID)), true

	case "Query.constraints":
		if e.complexity.Query.Constraints == nil {
			break
		}

		args, err := ec.field_Query_constraints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Constraints(childComplexity, args["groupID"].(pulid.ID)), true

	case "Query.contacts":
		if e.complexity.Query.Contacts == nil {
			break
		}

		args, err := ec.field_Query_contacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contacts(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ContactWhereInput)), true

	case "Query.countries":
		if e.complexity.Query.Countries == nil {
			break
		}

		args, err := ec.field_Query_countries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Countries(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CountryWhereInput)), true

	case "Query.country":
		if e.complexity.Query.Country == nil {
			break
		}

		args, err := ec.field_Query_country_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Country(childComplexity, args["id"].(pulid.ID)), true

	case "Query.countryHarmonizedCodes":
		if e.complexity.Query.CountryHarmonizedCodes == nil {
			break
		}

		args, err := ec.field_Query_countryHarmonizedCodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CountryHarmonizedCodes(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CountryHarmonizedCodeWhereInput)), true

	case "Query.createConsolidationShipment":
		if e.complexity.Query.CreateConsolidationShipment == nil {
			break
		}

		args, err := ec.field_Query_createConsolidationShipment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreateConsolidationShipment(childComplexity, args["consolidationID"].(pulid.ID), args["prebook"].(bool)), true

	case "Query.createLabelsPrintJob":
		if e.complexity.Query.CreateLabelsPrintJob == nil {
			break
		}

		args, err := ec.field_Query_createLabelsPrintJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreateLabelsPrintJob(childComplexity, args["colliIDs"].([]pulid.ID)), true

	case "Query.createPackingListPrintJob":
		if e.complexity.Query.CreatePackingListPrintJob == nil {
			break
		}

		args, err := ec.field_Query_createPackingListPrintJob_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreatePackingListPrintJob(childComplexity, args["colliIDs"].([]pulid.ID)), true

	case "Query.createShipments":
		if e.complexity.Query.CreateShipments == nil {
			break
		}

		args, err := ec.field_Query_createShipments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreateShipments(childComplexity, args["orderID"].(pulid.ID), args["packageIDs"].([]pulid.ID)), true

	case "Query.currencies":
		if e.complexity.Query.Currencies == nil {
			break
		}

		args, err := ec.field_Query_currencies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Currencies(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.CurrencyWhereInput)), true

	case "Query.dashboardTiles":
		if e.complexity.Query.DashboardTiles == nil {
			break
		}

		return e.complexity.Query.DashboardTiles(childComplexity), true

	case "Query.deliveryOptionBring":
		if e.complexity.Query.DeliveryOptionBring == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionBring_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionBring(childComplexity, args["id"].(pulid.ID)), true

	case "Query.deliveryOptionBrings":
		if e.complexity.Query.DeliveryOptionBrings == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionBrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionBrings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionBringWhereInput)), true

	case "Query.deliveryOptionDaOs":
		if e.complexity.Query.DeliveryOptionDaOs == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionDaOs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionDaOs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionDAOWhereInput)), true

	case "Query.deliveryOptionDAO":
		if e.complexity.Query.DeliveryOptionDao == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionDAO_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionDao(childComplexity, args["id"].(pulid.ID)), true

	case "Query.deliveryOptionDF":
		if e.complexity.Query.DeliveryOptionDf == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionDF_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionDf(childComplexity, args["id"].(pulid.ID)), true

	case "Query.deliveryOptionDfs":
		if e.complexity.Query.DeliveryOptionDfs == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionDfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionDfs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionDFWhereInput)), true

	case "Query.deliveryOptionDsVs":
		if e.complexity.Query.DeliveryOptionDsVs == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionDsVs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionDsVs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionDSVWhereInput)), true

	case "Query.deliveryOptionDSV":
		if e.complexity.Query.DeliveryOptionDsv == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionDSV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionDsv(childComplexity, args["id"].(pulid.ID)), true

	case "Query.deliveryOptionEasyPost":
		if e.complexity.Query.DeliveryOptionEasyPost == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionEasyPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionEasyPost(childComplexity, args["id"].(pulid.ID)), true

	case "Query.deliveryOptionEasyPosts":
		if e.complexity.Query.DeliveryOptionEasyPosts == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionEasyPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionEasyPosts(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionEasyPostWhereInput)), true

	case "Query.deliveryOptionGlSs":
		if e.complexity.Query.DeliveryOptionGlSs == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionGlSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionGlSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionGLSWhereInput)), true

	case "Query.deliveryOptionGLS":
		if e.complexity.Query.DeliveryOptionGls == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionGLS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionGls(childComplexity, args["id"].(pulid.ID)), true

	case "Query.deliveryOptionPostNord":
		if e.complexity.Query.DeliveryOptionPostNord == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionPostNord_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionPostNord(childComplexity, args["deliveryOptionID"].(pulid.ID)), true

	case "Query.deliveryOptionPostNords":
		if e.complexity.Query.DeliveryOptionPostNords == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionPostNords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionPostNords(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionPostNordWhereInput)), true

	case "Query.deliveryOptionUspSs":
		if e.complexity.Query.DeliveryOptionUspSs == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionUspSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionUspSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionUSPSWhereInput)), true

	case "Query.deliveryOptionUSPS":
		if e.complexity.Query.DeliveryOptionUsps == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionUSPS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionUsps(childComplexity, args["deliveryOptionID"].(pulid.ID)), true

	case "Query.deliveryOptions":
		if e.complexity.Query.DeliveryOptions == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptions(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryOptionWhereInput)), true

	case "Query.deliveryOptionsFiltered":
		if e.complexity.Query.DeliveryOptionsFiltered == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionsFiltered_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionsFiltered(childComplexity, args["showArchived"].(bool)), true

	case "Query.deliveryOptionsList":
		if e.complexity.Query.DeliveryOptionsList == nil {
			break
		}

		args, err := ec.field_Query_deliveryOptionsList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryOptionsList(childComplexity, args["orderInfo"].(deliveryoptions.DeliveryOptionSeedInput)), true

	case "Query.deliveryPoint":
		if e.complexity.Query.DeliveryPoint == nil {
			break
		}

		args, err := ec.field_Query_deliveryPoint_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryPoint(childComplexity, args["colliID"].(pulid.ID)), true

	case "Query.deliveryRuleConstraintGroups":
		if e.complexity.Query.DeliveryRuleConstraintGroups == nil {
			break
		}

		args, err := ec.field_Query_deliveryRuleConstraintGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryRuleConstraintGroups(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryRuleConstraintGroupWhereInput)), true

	case "Query.deliveryRuleConstraints":
		if e.complexity.Query.DeliveryRuleConstraints == nil {
			break
		}

		args, err := ec.field_Query_deliveryRuleConstraints_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryRuleConstraints(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryRuleConstraintWhereInput)), true

	case "Query.deliveryRules":
		if e.complexity.Query.DeliveryRules == nil {
			break
		}

		args, err := ec.field_Query_deliveryRules_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeliveryRules(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DeliveryRuleWhereInput)), true

	case "Query.devicePing":
		if e.complexity.Query.DevicePing == nil {
			break
		}

		args, err := ec.field_Query_devicePing_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DevicePing(childComplexity, args["token"].(string)), true

	case "Query.document":
		if e.complexity.Query.Document == nil {
			break
		}

		args, err := ec.field_Query_document_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Document(childComplexity, args["id"].(pulid.ID)), true

	case "Query.documentDownload":
		if e.complexity.Query.DocumentDownload == nil {
			break
		}

		args, err := ec.field_Query_documentDownload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentDownload(childComplexity, args["id"].(pulid.ID)), true

	case "Query.documentFiles":
		if e.complexity.Query.DocumentFiles == nil {
			break
		}

		args, err := ec.field_Query_documentFiles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DocumentFiles(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DocumentFileWhereInput)), true

	case "Query.documents":
		if e.complexity.Query.Documents == nil {
			break
		}

		args, err := ec.field_Query_documents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Documents(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.DocumentWhereInput)), true

	case "Query.emailTemplate":
		if e.complexity.Query.EmailTemplate == nil {
			break
		}

		args, err := ec.field_Query_emailTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailTemplate(childComplexity, args["id"].(pulid.ID)), true

	case "Query.emailTemplates":
		if e.complexity.Query.EmailTemplates == nil {
			break
		}

		args, err := ec.field_Query_emailTemplates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailTemplates(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.EmailTemplateWhereInput)), true

	case "Query.filteredWorkstations":
		if e.complexity.Query.FilteredWorkstations == nil {
			break
		}

		args, err := ec.field_Query_filteredWorkstations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FilteredWorkstations(childComplexity, args["showArchived"].(bool)), true

	case "Query.historyLogs":
		if e.complexity.Query.HistoryLogs == nil {
			break
		}

		return e.complexity.Query.HistoryLogs(childComplexity), true

	case "Query.hypothesisTest":
		if e.complexity.Query.HypothesisTest == nil {
			break
		}

		args, err := ec.field_Query_hypothesisTest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HypothesisTest(childComplexity, args["id"].(pulid.ID)), true

	case "Query.hypothesisTestDeliveryOptionLookups":
		if e.complexity.Query.HypothesisTestDeliveryOptionLookups == nil {
			break
		}

		args, err := ec.field_Query_hypothesisTestDeliveryOptionLookups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HypothesisTestDeliveryOptionLookups(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.HypothesisTestDeliveryOptionLookupWhereInput)), true

	case "Query.hypothesisTestDeliveryOptionRequests":
		if e.complexity.Query.HypothesisTestDeliveryOptionRequests == nil {
			break
		}

		args, err := ec.field_Query_hypothesisTestDeliveryOptionRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HypothesisTestDeliveryOptionRequests(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.HypothesisTestDeliveryOptionRequestWhereInput)), true

	case "Query.hypothesisTestDeliveryOptions":
		if e.complexity.Query.HypothesisTestDeliveryOptions == nil {
			break
		}

		args, err := ec.field_Query_hypothesisTestDeliveryOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HypothesisTestDeliveryOptions(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.HypothesisTestDeliveryOptionWhereInput)), true

	case "Query.hypothesisTestResultsDashboard":
		if e.complexity.Query.HypothesisTestResultsDashboard == nil {
			break
		}

		return e.complexity.Query.HypothesisTestResultsDashboard(childComplexity), true

	case "Query.hypothesisTests":
		if e.complexity.Query.HypothesisTests == nil {
			break
		}

		args, err := ec.field_Query_hypothesisTests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.HypothesisTests(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.HypothesisTestWhereInput)), true

	case "Query.inventoryItems":
		if e.complexity.Query.InventoryItems == nil {
			break
		}

		args, err := ec.field_Query_inventoryItems_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InventoryItems(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.InventoryItemWhereInput)), true

	case "Query.languages":
		if e.complexity.Query.Languages == nil {
			break
		}

		args, err := ec.field_Query_languages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Languages(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.LanguageWhereInput)), true

	case "Query.location":
		if e.complexity.Query.Location == nil {
			break
		}

		args, err := ec.field_Query_location_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Location(childComplexity, args["id"].(pulid.ID)), true

	case "Query.locationTags":
		if e.complexity.Query.LocationTags == nil {
			break
		}

		args, err := ec.field_Query_locationTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LocationTags(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.LocationTagWhereInput)), true

	case "Query.locations":
		if e.complexity.Query.Locations == nil {
			break
		}

		args, err := ec.field_Query_locations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Locations(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.LocationWhereInput)), true

	case "Query.myAPITokens":
		if e.complexity.Query.MyAPITokens == nil {
			break
		}

		return e.complexity.Query.MyAPITokens(childComplexity), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(pulid.ID)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]pulid.ID)), true

	case "Query.notifications":
		if e.complexity.Query.Notifications == nil {
			break
		}

		args, err := ec.field_Query_notifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notifications(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.NotificationWhereInput)), true

	case "Query.order":
		if e.complexity.Query.Order == nil {
			break
		}

		args, err := ec.field_Query_order_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Order(childComplexity, args["id"].(*pulid.ID)), true

	case "Query.orderSenders":
		if e.complexity.Query.OrderSenders == nil {
			break
		}

		args, err := ec.field_Query_orderSenders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrderSenders(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.OrderSenderWhereInput)), true

	case "Query.orderShipments":
		if e.complexity.Query.OrderShipments == nil {
			break
		}

		args, err := ec.field_Query_orderShipments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrderShipments(childComplexity, args["orderID"].(pulid.ID)), true

	case "Query.orderTimeline":
		if e.complexity.Query.OrderTimeline == nil {
			break
		}

		args, err := ec.field_Query_orderTimeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrderTimeline(childComplexity, args["orderID"].(pulid.ID)), true

	case "Query.orders":
		if e.complexity.Query.Orders == nil {
			break
		}

		args, err := ec.field_Query_orders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Orders(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.OrderOrder), args["where"].(*ent.OrderWhereInput)), true

	case "Query.packagingDfs":
		if e.complexity.Query.PackagingDfs == nil {
			break
		}

		args, err := ec.field_Query_packagingDfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackagingDfs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PackagingDFWhereInput)), true

	case "Query.packagingFiltered":
		if e.complexity.Query.PackagingFiltered == nil {
			break
		}

		args, err := ec.field_Query_packagingFiltered_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackagingFiltered(childComplexity, args["showArchived"].(bool)), true

	case "Query.packagingUSPSProcessingCategories":
		if e.complexity.Query.PackagingUSPSProcessingCategories == nil {
			break
		}

		args, err := ec.field_Query_packagingUSPSProcessingCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackagingUSPSProcessingCategories(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PackagingUSPSProcessingCategoryWhereInput)), true

	case "Query.packagingUSPSRateIndicators":
		if e.complexity.Query.PackagingUSPSRateIndicators == nil {
			break
		}

		args, err := ec.field_Query_packagingUSPSRateIndicators_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackagingUSPSRateIndicators(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PackagingUSPSRateIndicatorWhereInput)), true

	case "Query.packagingUspSs":
		if e.complexity.Query.PackagingUspSs == nil {
			break
		}

		args, err := ec.field_Query_packagingUspSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackagingUspSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PackagingUSPSWhereInput)), true

	case "Query.packagings":
		if e.complexity.Query.Packagings == nil {
			break
		}

		args, err := ec.field_Query_packagings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Packagings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PackagingWhereInput)), true

	case "Query.packingSlips":
		if e.complexity.Query.PackingSlips == nil {
			break
		}

		args, err := ec.field_Query_packingSlips_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackingSlips(childComplexity, args["colliIDs"].([]pulid.ID)), true

	case "Query.packingSlipsByOrder":
		if e.complexity.Query.PackingSlipsByOrder == nil {
			break
		}

		args, err := ec.field_Query_packingSlipsByOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackingSlipsByOrder(childComplexity, args["orderIDs"].([]pulid.ID)), true

	case "Query.packingSlipsClearCache":
		if e.complexity.Query.PackingSlipsClearCache == nil {
			break
		}

		args, err := ec.field_Query_packingSlipsClearCache_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PackingSlipsClearCache(childComplexity, args["orderIDs"].([]pulid.ID)), true

	case "Query.pallets":
		if e.complexity.Query.Pallets == nil {
			break
		}

		args, err := ec.field_Query_pallets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Pallets(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PalletWhereInput)), true

	case "Query.parcelShopBrings":
		if e.complexity.Query.ParcelShopBrings == nil {
			break
		}

		args, err := ec.field_Query_parcelShopBrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParcelShopBrings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ParcelShopBringWhereInput)), true

	case "Query.parcelShopDaOs":
		if e.complexity.Query.ParcelShopDaOs == nil {
			break
		}

		args, err := ec.field_Query_parcelShopDaOs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParcelShopDaOs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ParcelShopDAOWhereInput)), true

	case "Query.parcelShopGlSs":
		if e.complexity.Query.ParcelShopGlSs == nil {
			break
		}

		args, err := ec.field_Query_parcelShopGlSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParcelShopGlSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ParcelShopGLSWhereInput)), true

	case "Query.parcelShopPostNords":
		if e.complexity.Query.ParcelShopPostNords == nil {
			break
		}

		args, err := ec.field_Query_parcelShopPostNords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParcelShopPostNords(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ParcelShopPostNordWhereInput)), true

	case "Query.parcelShops":
		if e.complexity.Query.ParcelShops == nil {
			break
		}

		args, err := ec.field_Query_parcelShops_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ParcelShops(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ParcelShopWhereInput)), true

	case "Query.plans":
		if e.complexity.Query.Plans == nil {
			break
		}

		args, err := ec.field_Query_plans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Plans(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PlanWhereInput)), true

	case "Query.printers":
		if e.complexity.Query.Printers == nil {
			break
		}

		args, err := ec.field_Query_printers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Printers(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.PrinterWhereInput)), true

	case "Query.product":
		if e.complexity.Query.Product == nil {
			break
		}

		args, err := ec.field_Query_product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Product(childComplexity, args["id"].(pulid.ID)), true

	case "Query.productImages":
		if e.complexity.Query.ProductImages == nil {
			break
		}

		args, err := ec.field_Query_productImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductImages(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ProductImageWhereInput)), true

	case "Query.productTags":
		if e.complexity.Query.ProductTags == nil {
			break
		}

		args, err := ec.field_Query_productTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductTags(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ProductTagWhereInput)), true

	case "Query.productVariants":
		if e.complexity.Query.ProductVariants == nil {
			break
		}

		args, err := ec.field_Query_productVariants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProductVariants(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ProductVariantWhereInput)), true

	case "Query.products":
		if e.complexity.Query.Products == nil {
			break
		}

		args, err := ec.field_Query_products_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Products(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ProductWhereInput)), true

	case "Query.rateRequests":
		if e.complexity.Query.RateRequests == nil {
			break
		}

		return e.complexity.Query.RateRequests(childComplexity), true

	case "Query.returnClaimsByOrder":
		if e.complexity.Query.ReturnClaimsByOrder == nil {
			break
		}

		args, err := ec.field_Query_returnClaimsByOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnClaimsByOrder(childComplexity, args["orderID"].(pulid.ID)), true

	case "Query.returnColli":
		if e.complexity.Query.ReturnColli == nil {
			break
		}

		args, err := ec.field_Query_returnColli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnColli(childComplexity, args["orderID"].(pulid.ID)), true

	case "Query.returnColliHistories":
		if e.complexity.Query.ReturnColliHistories == nil {
			break
		}

		args, err := ec.field_Query_returnColliHistories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnColliHistories(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ReturnColliHistoryWhereInput)), true

	case "Query.returnCollis":
		if e.complexity.Query.ReturnCollis == nil {
			break
		}

		args, err := ec.field_Query_returnCollis_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnCollis(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.ReturnColliOrder), args["where"].(*ent.ReturnColliWhereInput)), true

	case "Query.returnDeliveryOptions":
		if e.complexity.Query.ReturnDeliveryOptions == nil {
			break
		}

		args, err := ec.field_Query_returnDeliveryOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnDeliveryOptions(childComplexity, args["returnColliIDs"].([]pulid.ID)), true

	case "Query.returnOrderLines":
		if e.complexity.Query.ReturnOrderLines == nil {
			break
		}

		args, err := ec.field_Query_returnOrderLines_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnOrderLines(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ReturnOrderLineWhereInput)), true

	case "Query.returnPortal":
		if e.complexity.Query.ReturnPortal == nil {
			break
		}

		args, err := ec.field_Query_returnPortal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnPortal(childComplexity, args["id"].(pulid.ID)), true

	case "Query.returnPortalClaims":
		if e.complexity.Query.ReturnPortalClaims == nil {
			break
		}

		args, err := ec.field_Query_returnPortalClaims_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnPortalClaims(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ReturnPortalClaimWhereInput)), true

	case "Query.returnPortals":
		if e.complexity.Query.ReturnPortals == nil {
			break
		}

		args, err := ec.field_Query_returnPortals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReturnPortals(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ReturnPortalWhereInput)), true

	case "Query.search":
		if e.complexity.Query.Search == nil {
			break
		}

		args, err := ec.field_Query_search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Search(childComplexity, args["term"].(string), args["filter"].([]models.EntityType)), true

	case "Query.seatGroup":
		if e.complexity.Query.SeatGroup == nil {
			break
		}

		args, err := ec.field_Query_seatGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SeatGroup(childComplexity, args["id"].(pulid.ID)), true

	case "Query.seatGroupAccessRights":
		if e.complexity.Query.SeatGroupAccessRights == nil {
			break
		}

		args, err := ec.field_Query_seatGroupAccessRights_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SeatGroupAccessRights(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.SeatGroupAccessRightWhereInput)), true

	case "Query.seatGroups":
		if e.complexity.Query.SeatGroups == nil {
			break
		}

		args, err := ec.field_Query_seatGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SeatGroups(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.SeatGroupWhereInput)), true

	case "Query.selectedWorkstation":
		if e.complexity.Query.SelectedWorkstation == nil {
			break
		}

		return e.complexity.Query.SelectedWorkstation(childComplexity), true

	case "Query.sendOverviewEmail":
		if e.complexity.Query.SendOverviewEmail == nil {
			break
		}

		args, err := ec.field_Query_sendOverviewEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SendOverviewEmail(childComplexity, args["to"].(string), args["emailTpl"].(pulid.ID), args["where"].(ent.ShipmentWhereInput)), true

	case "Query.sendTestEmail":
		if e.complexity.Query.SendTestEmail == nil {
			break
		}

		args, err := ec.field_Query_sendTestEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SendTestEmail(childComplexity, args["id"].(pulid.ID), args["toEmail"].(string)), true

	case "Query.shipment":
		if e.complexity.Query.Shipment == nil {
			break
		}

		args, err := ec.field_Query_shipment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Shipment(childComplexity, args["id"].(pulid.ID)), true

	case "Query.shipmentBrings":
		if e.complexity.Query.ShipmentBrings == nil {
			break
		}

		args, err := ec.field_Query_shipmentBrings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentBrings(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentBringWhereInput)), true

	case "Query.shipmentDaOs":
		if e.complexity.Query.ShipmentDaOs == nil {
			break
		}

		args, err := ec.field_Query_shipmentDaOs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentDaOs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentDAOWhereInput)), true

	case "Query.shipmentDfs":
		if e.complexity.Query.ShipmentDfs == nil {
			break
		}

		args, err := ec.field_Query_shipmentDfs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentDfs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentDFWhereInput)), true

	case "Query.shipmentDsVs":
		if e.complexity.Query.ShipmentDsVs == nil {
			break
		}

		args, err := ec.field_Query_shipmentDsVs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentDsVs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentDSVWhereInput)), true

	case "Query.shipmentEasyPosts":
		if e.complexity.Query.ShipmentEasyPosts == nil {
			break
		}

		args, err := ec.field_Query_shipmentEasyPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentEasyPosts(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentEasyPostWhereInput)), true

	case "Query.shipmentGlSs":
		if e.complexity.Query.ShipmentGlSs == nil {
			break
		}

		args, err := ec.field_Query_shipmentGlSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentGlSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentGLSWhereInput)), true

	case "Query.shipmentLabels":
		if e.complexity.Query.ShipmentLabels == nil {
			break
		}

		args, err := ec.field_Query_shipmentLabels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentLabels(childComplexity, args["colliIDs"].([]pulid.ID)), true

	case "Query.shipmentPallets":
		if e.complexity.Query.ShipmentPallets == nil {
			break
		}

		args, err := ec.field_Query_shipmentPallets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentPallets(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentPalletWhereInput)), true

	case "Query.shipmentParcels":
		if e.complexity.Query.ShipmentParcels == nil {
			break
		}

		args, err := ec.field_Query_shipmentParcels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentParcels(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.ShipmentParcelOrder), args["where"].(*ent.ShipmentParcelWhereInput)), true

	case "Query.shipmentPostNords":
		if e.complexity.Query.ShipmentPostNords == nil {
			break
		}

		args, err := ec.field_Query_shipmentPostNords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentPostNords(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentPostNordWhereInput)), true

	case "Query.shipmentUspSs":
		if e.complexity.Query.ShipmentUspSs == nil {
			break
		}

		args, err := ec.field_Query_shipmentUspSs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentUspSs(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentUSPSWhereInput)), true

	case "Query.shipments":
		if e.complexity.Query.Shipments == nil {
			break
		}

		args, err := ec.field_Query_shipments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Shipments(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["orderBy"].(*ent.ShipmentOrder), args["where"].(*ent.ShipmentWhereInput)), true

	case "Query.shipmentsList":
		if e.complexity.Query.ShipmentsList == nil {
			break
		}

		args, err := ec.field_Query_shipmentsList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ShipmentsList(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.ShipmentWhereInput)), true

	case "Query.signupOptionsSlice":
		if e.complexity.Query.SignupOptionsSlice == nil {
			break
		}

		args, err := ec.field_Query_signupOptionsSlice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SignupOptionsSlice(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.SignupOptionsWhereInput)), true

	case "Query.systemEventsSlice":
		if e.complexity.Query.SystemEventsSlice == nil {
			break
		}

		args, err := ec.field_Query_systemEventsSlice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemEventsSlice(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.SystemEventsWhereInput)), true

	case "Query.tenant":
		if e.complexity.Query.Tenant == nil {
			break
		}

		args, err := ec.field_Query_tenant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tenant(childComplexity, args["id"].(*pulid.ID)), true

	case "Query.tenants":
		if e.complexity.Query.Tenants == nil {
			break
		}

		args, err := ec.field_Query_tenants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tenants(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.TenantWhereInput)), true

	case "Query.trailingProductUpdates":
		if e.complexity.Query.TrailingProductUpdates == nil {
			break
		}

		return e.complexity.Query.TrailingProductUpdates(childComplexity), true

	case "Query.unassignedDeliveryOptions":
		if e.complexity.Query.UnassignedDeliveryOptions == nil {
			break
		}

		args, err := ec.field_Query_unassignedDeliveryOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UnassignedDeliveryOptions(childComplexity, args["hypothesisTestID"].(pulid.ID)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(*pulid.ID)), true

	case "Query.userSeats":
		if e.complexity.Query.UserSeats == nil {
			break
		}

		args, err := ec.field_Query_userSeats_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserSeats(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.UserSeatWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.UserWhereInput)), true

	case "Query.workstation":
		if e.complexity.Query.Workstation == nil {
			break
		}

		args, err := ec.field_Query_workstation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Workstation(childComplexity, args["id"].(pulid.ID)), true

	case "Query.workstations":
		if e.complexity.Query.Workstations == nil {
			break
		}

		args, err := ec.field_Query_workstations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Workstations(childComplexity, args["after"].(*entgql.Cursor[pulid.ID]), args["first"].(*int), args["before"].(*entgql.Cursor[pulid.ID]), args["last"].(*int), args["where"].(*ent.WorkstationWhereInput)), true

	case "RateRequest.date":
		if e.complexity.RateRequest.Date == nil {
			break
		}

		return e.complexity.RateRequest.Date(childComplexity), true

	case "RateRequest.error":
		if e.complexity.RateRequest.Error == nil {
			break
		}

		return e.complexity.RateRequest.Error(childComplexity), true

	case "RateRequest.optionCount":
		if e.complexity.RateRequest.OptionCount == nil {
			break
		}

		return e.complexity.RateRequest.OptionCount(childComplexity), true

	case "RateRequest.req":
		if e.complexity.RateRequest.Req == nil {
			break
		}

		return e.complexity.RateRequest.Req(childComplexity), true

	case "RateRequests.requests":
		if e.complexity.RateRequests.Requests == nil {
			break
		}

		return e.complexity.RateRequests.Requests(childComplexity), true

	case "RateRequests.requestsError":
		if e.complexity.RateRequests.RequestsError == nil {
			break
		}

		return e.complexity.RateRequests.RequestsError(childComplexity), true

	case "ReturnColli.comment":
		if e.complexity.ReturnColli.Comment == nil {
			break
		}

		return e.complexity.ReturnColli.Comment(childComplexity), true

	case "ReturnColli.createdAt":
		if e.complexity.ReturnColli.CreatedAt == nil {
			break
		}

		return e.complexity.ReturnColli.CreatedAt(childComplexity), true

	case "ReturnColli.deliveryOption":
		if e.complexity.ReturnColli.DeliveryOption == nil {
			break
		}

		return e.complexity.ReturnColli.DeliveryOption(childComplexity), true

	case "ReturnColli.emailAccepted":
		if e.complexity.ReturnColli.EmailAccepted == nil {
			break
		}

		return e.complexity.ReturnColli.EmailAccepted(childComplexity), true

	case "ReturnColli.emailConfirmationLabel":
		if e.complexity.ReturnColli.EmailConfirmationLabel == nil {
			break
		}

		return e.complexity.ReturnColli.EmailConfirmationLabel(childComplexity), true

	case "ReturnColli.emailConfirmationQrCode":
		if e.complexity.ReturnColli.EmailConfirmationQrCode == nil {
			break
		}

		return e.complexity.ReturnColli.EmailConfirmationQrCode(childComplexity), true

	case "ReturnColli.emailReceived":
		if e.complexity.ReturnColli.EmailReceived == nil {
			break
		}

		return e.complexity.ReturnColli.EmailReceived(childComplexity), true

	case "ReturnColli.expectedAt":
		if e.complexity.ReturnColli.ExpectedAt == nil {
			break
		}

		return e.complexity.ReturnColli.ExpectedAt(childComplexity), true

	case "ReturnColli.id":
		if e.complexity.ReturnColli.ID == nil {
			break
		}

		return e.complexity.ReturnColli.ID(childComplexity), true

	case "ReturnColli.labelPdf":
		if e.complexity.ReturnColli.LabelPdf == nil {
			break
		}

		return e.complexity.ReturnColli.LabelPdf(childComplexity), true

	case "ReturnColli.labelPng":
		if e.complexity.ReturnColli.LabelPng == nil {
			break
		}

		return e.complexity.ReturnColli.LabelPng(childComplexity), true

	case "ReturnColli.order":
		if e.complexity.ReturnColli.Order == nil {
			break
		}

		return e.complexity.ReturnColli.Order(childComplexity), true

	case "ReturnColli.packaging":
		if e.complexity.ReturnColli.Packaging == nil {
			break
		}

		return e.complexity.ReturnColli.Packaging(childComplexity), true

	case "ReturnColli.qrCodePng":
		if e.complexity.ReturnColli.QrCodePng == nil {
			break
		}

		return e.complexity.ReturnColli.QrCodePng(childComplexity), true

	case "ReturnColli.recipient":
		if e.complexity.ReturnColli.Recipient == nil {
			break
		}

		return e.complexity.ReturnColli.Recipient(childComplexity), true

	case "ReturnColli.returnColliHistory":
		if e.complexity.ReturnColli.ReturnColliHistory == nil {
			break
		}

		return e.complexity.ReturnColli.ReturnColliHistory(childComplexity), true

	case "ReturnColli.returnOrderLine":
		if e.complexity.ReturnColli.ReturnOrderLine == nil {
			break
		}

		return e.complexity.ReturnColli.ReturnOrderLine(childComplexity), true

	case "ReturnColli.returnPortal":
		if e.complexity.ReturnColli.ReturnPortal == nil {
			break
		}

		return e.complexity.ReturnColli.ReturnPortal(childComplexity), true

	case "ReturnColli.sender":
		if e.complexity.ReturnColli.Sender == nil {
			break
		}

		return e.complexity.ReturnColli.Sender(childComplexity), true

	case "ReturnColli.status":
		if e.complexity.ReturnColli.Status == nil {
			break
		}

		return e.complexity.ReturnColli.Status(childComplexity), true

	case "ReturnColli.tenant":
		if e.complexity.ReturnColli.Tenant == nil {
			break
		}

		return e.complexity.ReturnColli.Tenant(childComplexity), true

	case "ReturnColli.tenantID":
		if e.complexity.ReturnColli.TenantID == nil {
			break
		}

		return e.complexity.ReturnColli.TenantID(childComplexity), true

	case "ReturnColliConnection.edges":
		if e.complexity.ReturnColliConnection.Edges == nil {
			break
		}

		return e.complexity.ReturnColliConnection.Edges(childComplexity), true

	case "ReturnColliConnection.pageInfo":
		if e.complexity.ReturnColliConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReturnColliConnection.PageInfo(childComplexity), true

	case "ReturnColliConnection.totalCount":
		if e.complexity.ReturnColliConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReturnColliConnection.TotalCount(childComplexity), true

	case "ReturnColliEdge.cursor":
		if e.complexity.ReturnColliEdge.Cursor == nil {
			break
		}

		return e.complexity.ReturnColliEdge.Cursor(childComplexity), true

	case "ReturnColliEdge.node":
		if e.complexity.ReturnColliEdge.Node == nil {
			break
		}

		return e.complexity.ReturnColliEdge.Node(childComplexity), true

	case "ReturnColliEdit.collis":
		if e.complexity.ReturnColliEdit.Collis == nil {
			break
		}

		return e.complexity.ReturnColliEdit.Collis(childComplexity), true

	case "ReturnColliEdit.order":
		if e.complexity.ReturnColliEdit.Order == nil {
			break
		}

		return e.complexity.ReturnColliEdit.Order(childComplexity), true

	case "ReturnColliHistory.changeHistory":
		if e.complexity.ReturnColliHistory.ChangeHistory == nil {
			break
		}

		return e.complexity.ReturnColliHistory.ChangeHistory(childComplexity), true

	case "ReturnColliHistory.description":
		if e.complexity.ReturnColliHistory.Description == nil {
			break
		}

		return e.complexity.ReturnColliHistory.Description(childComplexity), true

	case "ReturnColliHistory.id":
		if e.complexity.ReturnColliHistory.ID == nil {
			break
		}

		return e.complexity.ReturnColliHistory.ID(childComplexity), true

	case "ReturnColliHistory.returnColli":
		if e.complexity.ReturnColliHistory.ReturnColli == nil {
			break
		}

		return e.complexity.ReturnColliHistory.ReturnColli(childComplexity), true

	case "ReturnColliHistory.tenant":
		if e.complexity.ReturnColliHistory.Tenant == nil {
			break
		}

		return e.complexity.ReturnColliHistory.Tenant(childComplexity), true

	case "ReturnColliHistory.tenantID":
		if e.complexity.ReturnColliHistory.TenantID == nil {
			break
		}

		return e.complexity.ReturnColliHistory.TenantID(childComplexity), true

	case "ReturnColliHistory.type":
		if e.complexity.ReturnColliHistory.Type == nil {
			break
		}

		return e.complexity.ReturnColliHistory.Type(childComplexity), true

	case "ReturnColliHistoryConnection.edges":
		if e.complexity.ReturnColliHistoryConnection.Edges == nil {
			break
		}

		return e.complexity.ReturnColliHistoryConnection.Edges(childComplexity), true

	case "ReturnColliHistoryConnection.pageInfo":
		if e.complexity.ReturnColliHistoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReturnColliHistoryConnection.PageInfo(childComplexity), true

	case "ReturnColliHistoryConnection.totalCount":
		if e.complexity.ReturnColliHistoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReturnColliHistoryConnection.TotalCount(childComplexity), true

	case "ReturnColliHistoryEdge.cursor":
		if e.complexity.ReturnColliHistoryEdge.Cursor == nil {
			break
		}

		return e.complexity.ReturnColliHistoryEdge.Cursor(childComplexity), true

	case "ReturnColliHistoryEdge.node":
		if e.complexity.ReturnColliHistoryEdge.Node == nil {
			break
		}

		return e.complexity.ReturnColliHistoryEdge.Node(childComplexity), true

	case "ReturnColliTimeline.colli":
		if e.complexity.ReturnColliTimeline.Colli == nil {
			break
		}

		return e.complexity.ReturnColliTimeline.Colli(childComplexity), true

	case "ReturnColliTimeline.timeline":
		if e.complexity.ReturnColliTimeline.Timeline == nil {
			break
		}

		return e.complexity.ReturnColliTimeline.Timeline(childComplexity), true

	case "ReturnOrderLine.id":
		if e.complexity.ReturnOrderLine.ID == nil {
			break
		}

		return e.complexity.ReturnOrderLine.ID(childComplexity), true

	case "ReturnOrderLine.orderLine":
		if e.complexity.ReturnOrderLine.OrderLine == nil {
			break
		}

		return e.complexity.ReturnOrderLine.OrderLine(childComplexity), true

	case "ReturnOrderLine.returnColli":
		if e.complexity.ReturnOrderLine.ReturnColli == nil {
			break
		}

		return e.complexity.ReturnOrderLine.ReturnColli(childComplexity), true

	case "ReturnOrderLine.returnPortalClaim":
		if e.complexity.ReturnOrderLine.ReturnPortalClaim == nil {
			break
		}

		return e.complexity.ReturnOrderLine.ReturnPortalClaim(childComplexity), true

	case "ReturnOrderLine.tenant":
		if e.complexity.ReturnOrderLine.Tenant == nil {
			break
		}

		return e.complexity.ReturnOrderLine.Tenant(childComplexity), true

	case "ReturnOrderLine.tenantID":
		if e.complexity.ReturnOrderLine.TenantID == nil {
			break
		}

		return e.complexity.ReturnOrderLine.TenantID(childComplexity), true

	case "ReturnOrderLine.units":
		if e.complexity.ReturnOrderLine.Units == nil {
			break
		}

		return e.complexity.ReturnOrderLine.Units(childComplexity), true

	case "ReturnOrderLineConnection.edges":
		if e.complexity.ReturnOrderLineConnection.Edges == nil {
			break
		}

		return e.complexity.ReturnOrderLineConnection.Edges(childComplexity), true

	case "ReturnOrderLineConnection.pageInfo":
		if e.complexity.ReturnOrderLineConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReturnOrderLineConnection.PageInfo(childComplexity), true

	case "ReturnOrderLineConnection.totalCount":
		if e.complexity.ReturnOrderLineConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReturnOrderLineConnection.TotalCount(childComplexity), true

	case "ReturnOrderLineEdge.cursor":
		if e.complexity.ReturnOrderLineEdge.Cursor == nil {
			break
		}

		return e.complexity.ReturnOrderLineEdge.Cursor(childComplexity), true

	case "ReturnOrderLineEdge.node":
		if e.complexity.ReturnOrderLineEdge.Node == nil {
			break
		}

		return e.complexity.ReturnOrderLineEdge.Node(childComplexity), true

	case "ReturnPortal.automaticallyAccept":
		if e.complexity.ReturnPortal.AutomaticallyAccept == nil {
			break
		}

		return e.complexity.ReturnPortal.AutomaticallyAccept(childComplexity), true

	case "ReturnPortal.connection":
		if e.complexity.ReturnPortal.Connection == nil {
			break
		}

		return e.complexity.ReturnPortal.Connection(childComplexity), true

	case "ReturnPortal.deliveryOptions":
		if e.complexity.ReturnPortal.DeliveryOptions == nil {
			break
		}

		return e.complexity.ReturnPortal.DeliveryOptions(childComplexity), true

	case "ReturnPortal.emailAccepted":
		if e.complexity.ReturnPortal.EmailAccepted == nil {
			break
		}

		return e.complexity.ReturnPortal.EmailAccepted(childComplexity), true

	case "ReturnPortal.emailConfirmationLabel":
		if e.complexity.ReturnPortal.EmailConfirmationLabel == nil {
			break
		}

		return e.complexity.ReturnPortal.EmailConfirmationLabel(childComplexity), true

	case "ReturnPortal.emailConfirmationQrCode":
		if e.complexity.ReturnPortal.EmailConfirmationQrCode == nil {
			break
		}

		return e.complexity.ReturnPortal.EmailConfirmationQrCode(childComplexity), true

	case "ReturnPortal.emailReceived":
		if e.complexity.ReturnPortal.EmailReceived == nil {
			break
		}

		return e.complexity.ReturnPortal.EmailReceived(childComplexity), true

	case "ReturnPortal.id":
		if e.complexity.ReturnPortal.ID == nil {
			break
		}

		return e.complexity.ReturnPortal.ID(childComplexity), true

	case "ReturnPortal.name":
		if e.complexity.ReturnPortal.Name == nil {
			break
		}

		return e.complexity.ReturnPortal.Name(childComplexity), true

	case "ReturnPortal.returnColli":
		if e.complexity.ReturnPortal.ReturnColli == nil {
			break
		}

		return e.complexity.ReturnPortal.ReturnColli(childComplexity), true

	case "ReturnPortal.returnLocation":
		if e.complexity.ReturnPortal.ReturnLocation == nil {
			break
		}

		return e.complexity.ReturnPortal.ReturnLocation(childComplexity), true

	case "ReturnPortal.returnOpenHours":
		if e.complexity.ReturnPortal.ReturnOpenHours == nil {
			break
		}

		return e.complexity.ReturnPortal.ReturnOpenHours(childComplexity), true

	case "ReturnPortal.returnPortalClaim":
		if e.complexity.ReturnPortal.ReturnPortalClaim == nil {
			break
		}

		return e.complexity.ReturnPortal.ReturnPortalClaim(childComplexity), true

	case "ReturnPortal.tenant":
		if e.complexity.ReturnPortal.Tenant == nil {
			break
		}

		return e.complexity.ReturnPortal.Tenant(childComplexity), true

	case "ReturnPortal.tenantID":
		if e.complexity.ReturnPortal.TenantID == nil {
			break
		}

		return e.complexity.ReturnPortal.TenantID(childComplexity), true

	case "ReturnPortalClaim.archived":
		if e.complexity.ReturnPortalClaim.Archived == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.Archived(childComplexity), true

	case "ReturnPortalClaim.description":
		if e.complexity.ReturnPortalClaim.Description == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.Description(childComplexity), true

	case "ReturnPortalClaim.id":
		if e.complexity.ReturnPortalClaim.ID == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.ID(childComplexity), true

	case "ReturnPortalClaim.name":
		if e.complexity.ReturnPortalClaim.Name == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.Name(childComplexity), true

	case "ReturnPortalClaim.restockable":
		if e.complexity.ReturnPortalClaim.Restockable == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.Restockable(childComplexity), true

	case "ReturnPortalClaim.returnLocation":
		if e.complexity.ReturnPortalClaim.ReturnLocation == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.ReturnLocation(childComplexity), true

	case "ReturnPortalClaim.returnOrderLine":
		if e.complexity.ReturnPortalClaim.ReturnOrderLine == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.ReturnOrderLine(childComplexity), true

	case "ReturnPortalClaim.returnPortal":
		if e.complexity.ReturnPortalClaim.ReturnPortal == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.ReturnPortal(childComplexity), true

	case "ReturnPortalClaim.tenant":
		if e.complexity.ReturnPortalClaim.Tenant == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.Tenant(childComplexity), true

	case "ReturnPortalClaim.tenantID":
		if e.complexity.ReturnPortalClaim.TenantID == nil {
			break
		}

		return e.complexity.ReturnPortalClaim.TenantID(childComplexity), true

	case "ReturnPortalClaimConnection.edges":
		if e.complexity.ReturnPortalClaimConnection.Edges == nil {
			break
		}

		return e.complexity.ReturnPortalClaimConnection.Edges(childComplexity), true

	case "ReturnPortalClaimConnection.pageInfo":
		if e.complexity.ReturnPortalClaimConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReturnPortalClaimConnection.PageInfo(childComplexity), true

	case "ReturnPortalClaimConnection.totalCount":
		if e.complexity.ReturnPortalClaimConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReturnPortalClaimConnection.TotalCount(childComplexity), true

	case "ReturnPortalClaimEdge.cursor":
		if e.complexity.ReturnPortalClaimEdge.Cursor == nil {
			break
		}

		return e.complexity.ReturnPortalClaimEdge.Cursor(childComplexity), true

	case "ReturnPortalClaimEdge.node":
		if e.complexity.ReturnPortalClaimEdge.Node == nil {
			break
		}

		return e.complexity.ReturnPortalClaimEdge.Node(childComplexity), true

	case "ReturnPortalConnection.edges":
		if e.complexity.ReturnPortalConnection.Edges == nil {
			break
		}

		return e.complexity.ReturnPortalConnection.Edges(childComplexity), true

	case "ReturnPortalConnection.pageInfo":
		if e.complexity.ReturnPortalConnection.PageInfo == nil {
			break
		}

		return e.complexity.ReturnPortalConnection.PageInfo(childComplexity), true

	case "ReturnPortalConnection.totalCount":
		if e.complexity.ReturnPortalConnection.TotalCount == nil {
			break
		}

		return e.complexity.ReturnPortalConnection.TotalCount(childComplexity), true

	case "ReturnPortalEdge.cursor":
		if e.complexity.ReturnPortalEdge.Cursor == nil {
			break
		}

		return e.complexity.ReturnPortalEdge.Cursor(childComplexity), true

	case "ReturnPortalEdge.node":
		if e.complexity.ReturnPortalEdge.Node == nil {
			break
		}

		return e.complexity.ReturnPortalEdge.Node(childComplexity), true

	case "SearchResult.entity":
		if e.complexity.SearchResult.Entity == nil {
			break
		}

		return e.complexity.SearchResult.Entity(childComplexity), true

	case "SearchResult.id":
		if e.complexity.SearchResult.ID == nil {
			break
		}

		return e.complexity.SearchResult.ID(childComplexity), true

	case "SearchResult.imagePath":
		if e.complexity.SearchResult.ImagePath == nil {
			break
		}

		return e.complexity.SearchResult.ImagePath(childComplexity), true

	case "SearchResult.title":
		if e.complexity.SearchResult.Title == nil {
			break
		}

		return e.complexity.SearchResult.Title(childComplexity), true

	case "SeatGroup.assignedAccessRight":
		if e.complexity.SeatGroup.AssignedAccessRight == nil {
			break
		}

		return e.complexity.SeatGroup.AssignedAccessRight(childComplexity), true

	case "SeatGroup.createdAt":
		if e.complexity.SeatGroup.CreatedAt == nil {
			break
		}

		return e.complexity.SeatGroup.CreatedAt(childComplexity), true

	case "SeatGroup.id":
		if e.complexity.SeatGroup.ID == nil {
			break
		}

		return e.complexity.SeatGroup.ID(childComplexity), true

	case "SeatGroup.name":
		if e.complexity.SeatGroup.Name == nil {
			break
		}

		return e.complexity.SeatGroup.Name(childComplexity), true

	case "SeatGroup.seatGroupAccessRight":
		if e.complexity.SeatGroup.SeatGroupAccessRight == nil {
			break
		}

		return e.complexity.SeatGroup.SeatGroupAccessRight(childComplexity), true

	case "SeatGroup.tenant":
		if e.complexity.SeatGroup.Tenant == nil {
			break
		}

		return e.complexity.SeatGroup.Tenant(childComplexity), true

	case "SeatGroup.tenantID":
		if e.complexity.SeatGroup.TenantID == nil {
			break
		}

		return e.complexity.SeatGroup.TenantID(childComplexity), true

	case "SeatGroup.user":
		if e.complexity.SeatGroup.User == nil {
			break
		}

		return e.complexity.SeatGroup.User(childComplexity), true

	case "SeatGroupAccessRight.accessRight":
		if e.complexity.SeatGroupAccessRight.AccessRight == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.AccessRight(childComplexity), true

	case "SeatGroupAccessRight.accessRightID":
		if e.complexity.SeatGroupAccessRight.AccessRightID == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.AccessRightID(childComplexity), true

	case "SeatGroupAccessRight.id":
		if e.complexity.SeatGroupAccessRight.ID == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.ID(childComplexity), true

	case "SeatGroupAccessRight.level":
		if e.complexity.SeatGroupAccessRight.Level == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.Level(childComplexity), true

	case "SeatGroupAccessRight.seatGroup":
		if e.complexity.SeatGroupAccessRight.SeatGroup == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.SeatGroup(childComplexity), true

	case "SeatGroupAccessRight.seatGroupID":
		if e.complexity.SeatGroupAccessRight.SeatGroupID == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.SeatGroupID(childComplexity), true

	case "SeatGroupAccessRight.tenant":
		if e.complexity.SeatGroupAccessRight.Tenant == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.Tenant(childComplexity), true

	case "SeatGroupAccessRight.tenantID":
		if e.complexity.SeatGroupAccessRight.TenantID == nil {
			break
		}

		return e.complexity.SeatGroupAccessRight.TenantID(childComplexity), true

	case "SeatGroupAccessRightConnection.edges":
		if e.complexity.SeatGroupAccessRightConnection.Edges == nil {
			break
		}

		return e.complexity.SeatGroupAccessRightConnection.Edges(childComplexity), true

	case "SeatGroupAccessRightConnection.pageInfo":
		if e.complexity.SeatGroupAccessRightConnection.PageInfo == nil {
			break
		}

		return e.complexity.SeatGroupAccessRightConnection.PageInfo(childComplexity), true

	case "SeatGroupAccessRightConnection.totalCount":
		if e.complexity.SeatGroupAccessRightConnection.TotalCount == nil {
			break
		}

		return e.complexity.SeatGroupAccessRightConnection.TotalCount(childComplexity), true

	case "SeatGroupAccessRightEdge.cursor":
		if e.complexity.SeatGroupAccessRightEdge.Cursor == nil {
			break
		}

		return e.complexity.SeatGroupAccessRightEdge.Cursor(childComplexity), true

	case "SeatGroupAccessRightEdge.node":
		if e.complexity.SeatGroupAccessRightEdge.Node == nil {
			break
		}

		return e.complexity.SeatGroupAccessRightEdge.Node(childComplexity), true

	case "SeatGroupConnection.edges":
		if e.complexity.SeatGroupConnection.Edges == nil {
			break
		}

		return e.complexity.SeatGroupConnection.Edges(childComplexity), true

	case "SeatGroupConnection.pageInfo":
		if e.complexity.SeatGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.SeatGroupConnection.PageInfo(childComplexity), true

	case "SeatGroupConnection.totalCount":
		if e.complexity.SeatGroupConnection.TotalCount == nil {
			break
		}

		return e.complexity.SeatGroupConnection.TotalCount(childComplexity), true

	case "SeatGroupEdge.cursor":
		if e.complexity.SeatGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.SeatGroupEdge.Cursor(childComplexity), true

	case "SeatGroupEdge.node":
		if e.complexity.SeatGroupEdge.Node == nil {
			break
		}

		return e.complexity.SeatGroupEdge.Node(childComplexity), true

	case "SelectedWorkstation.jobs":
		if e.complexity.SelectedWorkstation.Jobs == nil {
			break
		}

		return e.complexity.SelectedWorkstation.Jobs(childComplexity), true

	case "SelectedWorkstation.limitExceeded":
		if e.complexity.SelectedWorkstation.LimitExceeded == nil {
			break
		}

		return e.complexity.SelectedWorkstation.LimitExceeded(childComplexity), true

	case "SelectedWorkstation.workstation":
		if e.complexity.SelectedWorkstation.Workstation == nil {
			break
		}

		return e.complexity.SelectedWorkstation.Workstation(childComplexity), true

	case "Shipment.carrier":
		if e.complexity.Shipment.Carrier == nil {
			break
		}

		return e.complexity.Shipment.Carrier(childComplexity), true

	case "Shipment.consolidation":
		if e.complexity.Shipment.Consolidation == nil {
			break
		}

		return e.complexity.Shipment.Consolidation(childComplexity), true

	case "Shipment.createdAt":
		if e.complexity.Shipment.CreatedAt == nil {
			break
		}

		return e.complexity.Shipment.CreatedAt(childComplexity), true

	case "Shipment.id":
		if e.complexity.Shipment.ID == nil {
			break
		}

		return e.complexity.Shipment.ID(childComplexity), true

	case "Shipment.oldConsolidation":
		if e.complexity.Shipment.OldConsolidation == nil {
			break
		}

		return e.complexity.Shipment.OldConsolidation(childComplexity), true

	case "Shipment.shipmentBring":
		if e.complexity.Shipment.ShipmentBring == nil {
			break
		}

		return e.complexity.Shipment.ShipmentBring(childComplexity), true

	case "Shipment.shipmentDAO":
		if e.complexity.Shipment.ShipmentDAO == nil {
			break
		}

		return e.complexity.Shipment.ShipmentDAO(childComplexity), true

	case "Shipment.shipmentDF":
		if e.complexity.Shipment.ShipmentDF == nil {
			break
		}

		return e.complexity.Shipment.ShipmentDF(childComplexity), true

	case "Shipment.shipmentDSV":
		if e.complexity.Shipment.ShipmentDSV == nil {
			break
		}

		return e.complexity.Shipment.ShipmentDSV(childComplexity), true

	case "Shipment.shipmentEasyPost":
		if e.complexity.Shipment.ShipmentEasyPost == nil {
			break
		}

		return e.complexity.Shipment.ShipmentEasyPost(childComplexity), true

	case "Shipment.shipmentGLS":
		if e.complexity.Shipment.ShipmentGLS == nil {
			break
		}

		return e.complexity.Shipment.ShipmentGLS(childComplexity), true

	case "Shipment.shipmentHistory":
		if e.complexity.Shipment.ShipmentHistory == nil {
			break
		}

		return e.complexity.Shipment.ShipmentHistory(childComplexity), true

	case "Shipment.shipmentPallet":
		if e.complexity.Shipment.ShipmentPallet == nil {
			break
		}

		return e.complexity.Shipment.ShipmentPallet(childComplexity), true

	case "Shipment.shipmentParcel":
		if e.complexity.Shipment.ShipmentParcel == nil {
			break
		}

		return e.complexity.Shipment.ShipmentParcel(childComplexity), true

	case "Shipment.shipmentPostNord":
		if e.complexity.Shipment.ShipmentPostNord == nil {
			break
		}

		return e.complexity.Shipment.ShipmentPostNord(childComplexity), true

	case "Shipment.shipmentPublicID":
		if e.complexity.Shipment.ShipmentPublicID == nil {
			break
		}

		return e.complexity.Shipment.ShipmentPublicID(childComplexity), true

	case "Shipment.shipmentUSPS":
		if e.complexity.Shipment.ShipmentUSPS == nil {
			break
		}

		return e.complexity.Shipment.ShipmentUSPS(childComplexity), true

	case "Shipment.status":
		if e.complexity.Shipment.Status == nil {
			break
		}

		return e.complexity.Shipment.Status(childComplexity), true

	case "Shipment.tenant":
		if e.complexity.Shipment.Tenant == nil {
			break
		}

		return e.complexity.Shipment.Tenant(childComplexity), true

	case "Shipment.tenantID":
		if e.complexity.Shipment.TenantID == nil {
			break
		}

		return e.complexity.Shipment.TenantID(childComplexity), true

	case "ShipmentBring.consignmentNumber":
		if e.complexity.ShipmentBring.ConsignmentNumber == nil {
			break
		}

		return e.complexity.ShipmentBring.ConsignmentNumber(childComplexity), true

	case "ShipmentBring.id":
		if e.complexity.ShipmentBring.ID == nil {
			break
		}

		return e.complexity.ShipmentBring.ID(childComplexity), true

	case "ShipmentBring.shipment":
		if e.complexity.ShipmentBring.Shipment == nil {
			break
		}

		return e.complexity.ShipmentBring.Shipment(childComplexity), true

	case "ShipmentBring.tenant":
		if e.complexity.ShipmentBring.Tenant == nil {
			break
		}

		return e.complexity.ShipmentBring.Tenant(childComplexity), true

	case "ShipmentBring.tenantID":
		if e.complexity.ShipmentBring.TenantID == nil {
			break
		}

		return e.complexity.ShipmentBring.TenantID(childComplexity), true

	case "ShipmentBringConnection.edges":
		if e.complexity.ShipmentBringConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentBringConnection.Edges(childComplexity), true

	case "ShipmentBringConnection.pageInfo":
		if e.complexity.ShipmentBringConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentBringConnection.PageInfo(childComplexity), true

	case "ShipmentBringConnection.totalCount":
		if e.complexity.ShipmentBringConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentBringConnection.TotalCount(childComplexity), true

	case "ShipmentBringEdge.cursor":
		if e.complexity.ShipmentBringEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentBringEdge.Cursor(childComplexity), true

	case "ShipmentBringEdge.node":
		if e.complexity.ShipmentBringEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentBringEdge.Node(childComplexity), true

	case "ShipmentConnection.edges":
		if e.complexity.ShipmentConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentConnection.Edges(childComplexity), true

	case "ShipmentConnection.pageInfo":
		if e.complexity.ShipmentConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentConnection.PageInfo(childComplexity), true

	case "ShipmentConnection.totalCount":
		if e.complexity.ShipmentConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentConnection.TotalCount(childComplexity), true

	case "ShipmentDAO.barcodeID":
		if e.complexity.ShipmentDAO.BarcodeID == nil {
			break
		}

		return e.complexity.ShipmentDAO.BarcodeID(childComplexity), true

	case "ShipmentDAO.id":
		if e.complexity.ShipmentDAO.ID == nil {
			break
		}

		return e.complexity.ShipmentDAO.ID(childComplexity), true

	case "ShipmentDAO.shipment":
		if e.complexity.ShipmentDAO.Shipment == nil {
			break
		}

		return e.complexity.ShipmentDAO.Shipment(childComplexity), true

	case "ShipmentDAO.tenant":
		if e.complexity.ShipmentDAO.Tenant == nil {
			break
		}

		return e.complexity.ShipmentDAO.Tenant(childComplexity), true

	case "ShipmentDAO.tenantID":
		if e.complexity.ShipmentDAO.TenantID == nil {
			break
		}

		return e.complexity.ShipmentDAO.TenantID(childComplexity), true

	case "ShipmentDAOConnection.edges":
		if e.complexity.ShipmentDAOConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentDAOConnection.Edges(childComplexity), true

	case "ShipmentDAOConnection.pageInfo":
		if e.complexity.ShipmentDAOConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentDAOConnection.PageInfo(childComplexity), true

	case "ShipmentDAOConnection.totalCount":
		if e.complexity.ShipmentDAOConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentDAOConnection.TotalCount(childComplexity), true

	case "ShipmentDAOEdge.cursor":
		if e.complexity.ShipmentDAOEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentDAOEdge.Cursor(childComplexity), true

	case "ShipmentDAOEdge.node":
		if e.complexity.ShipmentDAOEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentDAOEdge.Node(childComplexity), true

	case "ShipmentDF.id":
		if e.complexity.ShipmentDF.ID == nil {
			break
		}

		return e.complexity.ShipmentDF.ID(childComplexity), true

	case "ShipmentDF.shipment":
		if e.complexity.ShipmentDF.Shipment == nil {
			break
		}

		return e.complexity.ShipmentDF.Shipment(childComplexity), true

	case "ShipmentDF.tenant":
		if e.complexity.ShipmentDF.Tenant == nil {
			break
		}

		return e.complexity.ShipmentDF.Tenant(childComplexity), true

	case "ShipmentDF.tenantID":
		if e.complexity.ShipmentDF.TenantID == nil {
			break
		}

		return e.complexity.ShipmentDF.TenantID(childComplexity), true

	case "ShipmentDFConnection.edges":
		if e.complexity.ShipmentDFConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentDFConnection.Edges(childComplexity), true

	case "ShipmentDFConnection.pageInfo":
		if e.complexity.ShipmentDFConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentDFConnection.PageInfo(childComplexity), true

	case "ShipmentDFConnection.totalCount":
		if e.complexity.ShipmentDFConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentDFConnection.TotalCount(childComplexity), true

	case "ShipmentDFEdge.cursor":
		if e.complexity.ShipmentDFEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentDFEdge.Cursor(childComplexity), true

	case "ShipmentDFEdge.node":
		if e.complexity.ShipmentDFEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentDFEdge.Node(childComplexity), true

	case "ShipmentDSV.barcodeID":
		if e.complexity.ShipmentDSV.BarcodeID == nil {
			break
		}

		return e.complexity.ShipmentDSV.BarcodeID(childComplexity), true

	case "ShipmentDSV.id":
		if e.complexity.ShipmentDSV.ID == nil {
			break
		}

		return e.complexity.ShipmentDSV.ID(childComplexity), true

	case "ShipmentDSV.shipment":
		if e.complexity.ShipmentDSV.Shipment == nil {
			break
		}

		return e.complexity.ShipmentDSV.Shipment(childComplexity), true

	case "ShipmentDSV.tenant":
		if e.complexity.ShipmentDSV.Tenant == nil {
			break
		}

		return e.complexity.ShipmentDSV.Tenant(childComplexity), true

	case "ShipmentDSV.tenantID":
		if e.complexity.ShipmentDSV.TenantID == nil {
			break
		}

		return e.complexity.ShipmentDSV.TenantID(childComplexity), true

	case "ShipmentDSVConnection.edges":
		if e.complexity.ShipmentDSVConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentDSVConnection.Edges(childComplexity), true

	case "ShipmentDSVConnection.pageInfo":
		if e.complexity.ShipmentDSVConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentDSVConnection.PageInfo(childComplexity), true

	case "ShipmentDSVConnection.totalCount":
		if e.complexity.ShipmentDSVConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentDSVConnection.TotalCount(childComplexity), true

	case "ShipmentDSVEdge.cursor":
		if e.complexity.ShipmentDSVEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentDSVEdge.Cursor(childComplexity), true

	case "ShipmentDSVEdge.node":
		if e.complexity.ShipmentDSVEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentDSVEdge.Node(childComplexity), true

	case "ShipmentEasyPost.epShipmentID":
		if e.complexity.ShipmentEasyPost.EpShipmentID == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.EpShipmentID(childComplexity), true

	case "ShipmentEasyPost.estDeliveryDate":
		if e.complexity.ShipmentEasyPost.EstDeliveryDate == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.EstDeliveryDate(childComplexity), true

	case "ShipmentEasyPost.id":
		if e.complexity.ShipmentEasyPost.ID == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.ID(childComplexity), true

	case "ShipmentEasyPost.rate":
		if e.complexity.ShipmentEasyPost.Rate == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.Rate(childComplexity), true

	case "ShipmentEasyPost.shipment":
		if e.complexity.ShipmentEasyPost.Shipment == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.Shipment(childComplexity), true

	case "ShipmentEasyPost.tenant":
		if e.complexity.ShipmentEasyPost.Tenant == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.Tenant(childComplexity), true

	case "ShipmentEasyPost.tenantID":
		if e.complexity.ShipmentEasyPost.TenantID == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.TenantID(childComplexity), true

	case "ShipmentEasyPost.trackingNumber":
		if e.complexity.ShipmentEasyPost.TrackingNumber == nil {
			break
		}

		return e.complexity.ShipmentEasyPost.TrackingNumber(childComplexity), true

	case "ShipmentEasyPostConnection.edges":
		if e.complexity.ShipmentEasyPostConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentEasyPostConnection.Edges(childComplexity), true

	case "ShipmentEasyPostConnection.pageInfo":
		if e.complexity.ShipmentEasyPostConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentEasyPostConnection.PageInfo(childComplexity), true

	case "ShipmentEasyPostConnection.totalCount":
		if e.complexity.ShipmentEasyPostConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentEasyPostConnection.TotalCount(childComplexity), true

	case "ShipmentEasyPostEdge.cursor":
		if e.complexity.ShipmentEasyPostEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentEasyPostEdge.Cursor(childComplexity), true

	case "ShipmentEasyPostEdge.node":
		if e.complexity.ShipmentEasyPostEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentEasyPostEdge.Node(childComplexity), true

	case "ShipmentEdge.cursor":
		if e.complexity.ShipmentEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentEdge.Cursor(childComplexity), true

	case "ShipmentEdge.node":
		if e.complexity.ShipmentEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentEdge.Node(childComplexity), true

	case "ShipmentGLS.consignmentID":
		if e.complexity.ShipmentGLS.ConsignmentID == nil {
			break
		}

		return e.complexity.ShipmentGLS.ConsignmentID(childComplexity), true

	case "ShipmentGLS.id":
		if e.complexity.ShipmentGLS.ID == nil {
			break
		}

		return e.complexity.ShipmentGLS.ID(childComplexity), true

	case "ShipmentGLS.shipment":
		if e.complexity.ShipmentGLS.Shipment == nil {
			break
		}

		return e.complexity.ShipmentGLS.Shipment(childComplexity), true

	case "ShipmentGLS.tenant":
		if e.complexity.ShipmentGLS.Tenant == nil {
			break
		}

		return e.complexity.ShipmentGLS.Tenant(childComplexity), true

	case "ShipmentGLS.tenantID":
		if e.complexity.ShipmentGLS.TenantID == nil {
			break
		}

		return e.complexity.ShipmentGLS.TenantID(childComplexity), true

	case "ShipmentGLSConnection.edges":
		if e.complexity.ShipmentGLSConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentGLSConnection.Edges(childComplexity), true

	case "ShipmentGLSConnection.pageInfo":
		if e.complexity.ShipmentGLSConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentGLSConnection.PageInfo(childComplexity), true

	case "ShipmentGLSConnection.totalCount":
		if e.complexity.ShipmentGLSConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentGLSConnection.TotalCount(childComplexity), true

	case "ShipmentGLSEdge.cursor":
		if e.complexity.ShipmentGLSEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentGLSEdge.Cursor(childComplexity), true

	case "ShipmentGLSEdge.node":
		if e.complexity.ShipmentGLSEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentGLSEdge.Node(childComplexity), true

	case "ShipmentHistory.changeHistory":
		if e.complexity.ShipmentHistory.ChangeHistory == nil {
			break
		}

		return e.complexity.ShipmentHistory.ChangeHistory(childComplexity), true

	case "ShipmentHistory.id":
		if e.complexity.ShipmentHistory.ID == nil {
			break
		}

		return e.complexity.ShipmentHistory.ID(childComplexity), true

	case "ShipmentHistory.shipment":
		if e.complexity.ShipmentHistory.Shipment == nil {
			break
		}

		return e.complexity.ShipmentHistory.Shipment(childComplexity), true

	case "ShipmentHistory.tenant":
		if e.complexity.ShipmentHistory.Tenant == nil {
			break
		}

		return e.complexity.ShipmentHistory.Tenant(childComplexity), true

	case "ShipmentHistory.tenantID":
		if e.complexity.ShipmentHistory.TenantID == nil {
			break
		}

		return e.complexity.ShipmentHistory.TenantID(childComplexity), true

	case "ShipmentHistory.type":
		if e.complexity.ShipmentHistory.Type == nil {
			break
		}

		return e.complexity.ShipmentHistory.Type(childComplexity), true

	case "ShipmentLabelsResponse.allLabels":
		if e.complexity.ShipmentLabelsResponse.AllLabels == nil {
			break
		}

		return e.complexity.ShipmentLabelsResponse.AllLabels(childComplexity), true

	case "ShipmentLabelsResponse.labelsPDF":
		if e.complexity.ShipmentLabelsResponse.LabelsPDF == nil {
			break
		}

		return e.complexity.ShipmentLabelsResponse.LabelsPDF(childComplexity), true

	case "ShipmentListItem.deliveryOption":
		if e.complexity.ShipmentListItem.DeliveryOption == nil {
			break
		}

		return e.complexity.ShipmentListItem.DeliveryOption(childComplexity), true

	case "ShipmentListItem.id":
		if e.complexity.ShipmentListItem.ID == nil {
			break
		}

		return e.complexity.ShipmentListItem.ID(childComplexity), true

	case "ShipmentListItem.orderIDDisplay":
		if e.complexity.ShipmentListItem.OrderIDDisplay == nil {
			break
		}

		return e.complexity.ShipmentListItem.OrderIDDisplay(childComplexity), true

	case "ShipmentListItem.recipient":
		if e.complexity.ShipmentListItem.Recipient == nil {
			break
		}

		return e.complexity.ShipmentListItem.Recipient(childComplexity), true

	case "ShipmentListItem.sender":
		if e.complexity.ShipmentListItem.Sender == nil {
			break
		}

		return e.complexity.ShipmentListItem.Sender(childComplexity), true

	case "ShipmentListItem.shipment":
		if e.complexity.ShipmentListItem.Shipment == nil {
			break
		}

		return e.complexity.ShipmentListItem.Shipment(childComplexity), true

	case "ShipmentPallet.barcode":
		if e.complexity.ShipmentPallet.Barcode == nil {
			break
		}

		return e.complexity.ShipmentPallet.Barcode(childComplexity), true

	case "ShipmentPallet.carrierID":
		if e.complexity.ShipmentPallet.CarrierID == nil {
			break
		}

		return e.complexity.ShipmentPallet.CarrierID(childComplexity), true

	case "ShipmentPallet.colliNumber":
		if e.complexity.ShipmentPallet.ColliNumber == nil {
			break
		}

		return e.complexity.ShipmentPallet.ColliNumber(childComplexity), true

	case "ShipmentPallet.id":
		if e.complexity.ShipmentPallet.ID == nil {
			break
		}

		return e.complexity.ShipmentPallet.ID(childComplexity), true

	case "ShipmentPallet.labelPdf":
		if e.complexity.ShipmentPallet.LabelPdf == nil {
			break
		}

		return e.complexity.ShipmentPallet.LabelPdf(childComplexity), true

	case "ShipmentPallet.labelZpl":
		if e.complexity.ShipmentPallet.LabelZpl == nil {
			break
		}

		return e.complexity.ShipmentPallet.LabelZpl(childComplexity), true

	case "ShipmentPallet.oldPallet":
		if e.complexity.ShipmentPallet.OldPallet == nil {
			break
		}

		return e.complexity.ShipmentPallet.OldPallet(childComplexity), true

	case "ShipmentPallet.pallet":
		if e.complexity.ShipmentPallet.Pallet == nil {
			break
		}

		return e.complexity.ShipmentPallet.Pallet(childComplexity), true

	case "ShipmentPallet.shipment":
		if e.complexity.ShipmentPallet.Shipment == nil {
			break
		}

		return e.complexity.ShipmentPallet.Shipment(childComplexity), true

	case "ShipmentPallet.status":
		if e.complexity.ShipmentPallet.Status == nil {
			break
		}

		return e.complexity.ShipmentPallet.Status(childComplexity), true

	case "ShipmentPallet.tenant":
		if e.complexity.ShipmentPallet.Tenant == nil {
			break
		}

		return e.complexity.ShipmentPallet.Tenant(childComplexity), true

	case "ShipmentPallet.tenantID":
		if e.complexity.ShipmentPallet.TenantID == nil {
			break
		}

		return e.complexity.ShipmentPallet.TenantID(childComplexity), true

	case "ShipmentPalletConnection.edges":
		if e.complexity.ShipmentPalletConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentPalletConnection.Edges(childComplexity), true

	case "ShipmentPalletConnection.pageInfo":
		if e.complexity.ShipmentPalletConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentPalletConnection.PageInfo(childComplexity), true

	case "ShipmentPalletConnection.totalCount":
		if e.complexity.ShipmentPalletConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentPalletConnection.TotalCount(childComplexity), true

	case "ShipmentPalletEdge.cursor":
		if e.complexity.ShipmentPalletEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentPalletEdge.Cursor(childComplexity), true

	case "ShipmentPalletEdge.node":
		if e.complexity.ShipmentPalletEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentPalletEdge.Node(childComplexity), true

	case "ShipmentParcel.cancelSyncedAt":
		if e.complexity.ShipmentParcel.CancelSyncedAt == nil {
			break
		}

		return e.complexity.ShipmentParcel.CancelSyncedAt(childComplexity), true

	case "ShipmentParcel.ccPickupSignatureUrls":
		if e.complexity.ShipmentParcel.CcPickupSignatureUrls == nil {
			break
		}

		return e.complexity.ShipmentParcel.CcPickupSignatureUrls(childComplexity), true

	case "ShipmentParcel.colli":
		if e.complexity.ShipmentParcel.Colli == nil {
			break
		}

		return e.complexity.ShipmentParcel.Colli(childComplexity), true

	case "ShipmentParcel.documentFile":
		if e.complexity.ShipmentParcel.DocumentFile == nil {
			break
		}

		return e.complexity.ShipmentParcel.DocumentFile(childComplexity), true

	case "ShipmentParcel.expectedAt":
		if e.complexity.ShipmentParcel.ExpectedAt == nil {
			break
		}

		return e.complexity.ShipmentParcel.ExpectedAt(childComplexity), true

	case "ShipmentParcel.fulfillmentSyncedAt":
		if e.complexity.ShipmentParcel.FulfillmentSyncedAt == nil {
			break
		}

		return e.complexity.ShipmentParcel.FulfillmentSyncedAt(childComplexity), true

	case "ShipmentParcel.id":
		if e.complexity.ShipmentParcel.ID == nil {
			break
		}

		return e.complexity.ShipmentParcel.ID(childComplexity), true

	case "ShipmentParcel.itemID":
		if e.complexity.ShipmentParcel.ItemID == nil {
			break
		}

		return e.complexity.ShipmentParcel.ItemID(childComplexity), true

	case "ShipmentParcel.oldColli":
		if e.complexity.ShipmentParcel.OldColli == nil {
			break
		}

		return e.complexity.ShipmentParcel.OldColli(childComplexity), true

	case "ShipmentParcel.packaging":
		if e.complexity.ShipmentParcel.Packaging == nil {
			break
		}

		return e.complexity.ShipmentParcel.Packaging(childComplexity), true

	case "ShipmentParcel.printJob":
		if e.complexity.ShipmentParcel.PrintJob == nil {
			break
		}

		return e.complexity.ShipmentParcel.PrintJob(childComplexity), true

	case "ShipmentParcel.shipment":
		if e.complexity.ShipmentParcel.Shipment == nil {
			break
		}

		return e.complexity.ShipmentParcel.Shipment(childComplexity), true

	case "ShipmentParcel.status":
		if e.complexity.ShipmentParcel.Status == nil {
			break
		}

		return e.complexity.ShipmentParcel.Status(childComplexity), true

	case "ShipmentParcel.tenant":
		if e.complexity.ShipmentParcel.Tenant == nil {
			break
		}

		return e.complexity.ShipmentParcel.Tenant(childComplexity), true

	case "ShipmentParcel.tenantID":
		if e.complexity.ShipmentParcel.TenantID == nil {
			break
		}

		return e.complexity.ShipmentParcel.TenantID(childComplexity), true

	case "ShipmentParcel.workspaceRecentScan":
		if e.complexity.ShipmentParcel.WorkspaceRecentScan == nil {
			break
		}

		return e.complexity.ShipmentParcel.WorkspaceRecentScan(childComplexity), true

	case "ShipmentParcelConnection.edges":
		if e.complexity.ShipmentParcelConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentParcelConnection.Edges(childComplexity), true

	case "ShipmentParcelConnection.pageInfo":
		if e.complexity.ShipmentParcelConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentParcelConnection.PageInfo(childComplexity), true

	case "ShipmentParcelConnection.totalCount":
		if e.complexity.ShipmentParcelConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentParcelConnection.TotalCount(childComplexity), true

	case "ShipmentParcelEdge.cursor":
		if e.complexity.ShipmentParcelEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentParcelEdge.Cursor(childComplexity), true

	case "ShipmentParcelEdge.node":
		if e.complexity.ShipmentParcelEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentParcelEdge.Node(childComplexity), true

	case "ShipmentPostNord.bookingID":
		if e.complexity.ShipmentPostNord.BookingID == nil {
			break
		}

		return e.complexity.ShipmentPostNord.BookingID(childComplexity), true

	case "ShipmentPostNord.id":
		if e.complexity.ShipmentPostNord.ID == nil {
			break
		}

		return e.complexity.ShipmentPostNord.ID(childComplexity), true

	case "ShipmentPostNord.itemID":
		if e.complexity.ShipmentPostNord.ItemID == nil {
			break
		}

		return e.complexity.ShipmentPostNord.ItemID(childComplexity), true

	case "ShipmentPostNord.shipment":
		if e.complexity.ShipmentPostNord.Shipment == nil {
			break
		}

		return e.complexity.ShipmentPostNord.Shipment(childComplexity), true

	case "ShipmentPostNord.shipmentReferenceNo":
		if e.complexity.ShipmentPostNord.ShipmentReferenceNo == nil {
			break
		}

		return e.complexity.ShipmentPostNord.ShipmentReferenceNo(childComplexity), true

	case "ShipmentPostNord.tenant":
		if e.complexity.ShipmentPostNord.Tenant == nil {
			break
		}

		return e.complexity.ShipmentPostNord.Tenant(childComplexity), true

	case "ShipmentPostNord.tenantID":
		if e.complexity.ShipmentPostNord.TenantID == nil {
			break
		}

		return e.complexity.ShipmentPostNord.TenantID(childComplexity), true

	case "ShipmentPostNordConnection.edges":
		if e.complexity.ShipmentPostNordConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentPostNordConnection.Edges(childComplexity), true

	case "ShipmentPostNordConnection.pageInfo":
		if e.complexity.ShipmentPostNordConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentPostNordConnection.PageInfo(childComplexity), true

	case "ShipmentPostNordConnection.totalCount":
		if e.complexity.ShipmentPostNordConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentPostNordConnection.TotalCount(childComplexity), true

	case "ShipmentPostNordEdge.cursor":
		if e.complexity.ShipmentPostNordEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentPostNordEdge.Cursor(childComplexity), true

	case "ShipmentPostNordEdge.node":
		if e.complexity.ShipmentPostNordEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentPostNordEdge.Node(childComplexity), true

	case "ShipmentUSPS.id":
		if e.complexity.ShipmentUSPS.ID == nil {
			break
		}

		return e.complexity.ShipmentUSPS.ID(childComplexity), true

	case "ShipmentUSPS.postage":
		if e.complexity.ShipmentUSPS.Postage == nil {
			break
		}

		return e.complexity.ShipmentUSPS.Postage(childComplexity), true

	case "ShipmentUSPS.scheduledDeliveryDate":
		if e.complexity.ShipmentUSPS.ScheduledDeliveryDate == nil {
			break
		}

		return e.complexity.ShipmentUSPS.ScheduledDeliveryDate(childComplexity), true

	case "ShipmentUSPS.shipment":
		if e.complexity.ShipmentUSPS.Shipment == nil {
			break
		}

		return e.complexity.ShipmentUSPS.Shipment(childComplexity), true

	case "ShipmentUSPS.tenant":
		if e.complexity.ShipmentUSPS.Tenant == nil {
			break
		}

		return e.complexity.ShipmentUSPS.Tenant(childComplexity), true

	case "ShipmentUSPS.tenantID":
		if e.complexity.ShipmentUSPS.TenantID == nil {
			break
		}

		return e.complexity.ShipmentUSPS.TenantID(childComplexity), true

	case "ShipmentUSPS.trackingNumber":
		if e.complexity.ShipmentUSPS.TrackingNumber == nil {
			break
		}

		return e.complexity.ShipmentUSPS.TrackingNumber(childComplexity), true

	case "ShipmentUSPSConnection.edges":
		if e.complexity.ShipmentUSPSConnection.Edges == nil {
			break
		}

		return e.complexity.ShipmentUSPSConnection.Edges(childComplexity), true

	case "ShipmentUSPSConnection.pageInfo":
		if e.complexity.ShipmentUSPSConnection.PageInfo == nil {
			break
		}

		return e.complexity.ShipmentUSPSConnection.PageInfo(childComplexity), true

	case "ShipmentUSPSConnection.totalCount":
		if e.complexity.ShipmentUSPSConnection.TotalCount == nil {
			break
		}

		return e.complexity.ShipmentUSPSConnection.TotalCount(childComplexity), true

	case "ShipmentUSPSEdge.cursor":
		if e.complexity.ShipmentUSPSEdge.Cursor == nil {
			break
		}

		return e.complexity.ShipmentUSPSEdge.Cursor(childComplexity), true

	case "ShipmentUSPSEdge.node":
		if e.complexity.ShipmentUSPSEdge.Node == nil {
			break
		}

		return e.complexity.ShipmentUSPSEdge.Node(childComplexity), true

	case "SignupOptions.betterDeliveryOptions":
		if e.complexity.SignupOptions.BetterDeliveryOptions == nil {
			break
		}

		return e.complexity.SignupOptions.BetterDeliveryOptions(childComplexity), true

	case "SignupOptions.clickCollect":
		if e.complexity.SignupOptions.ClickCollect == nil {
			break
		}

		return e.complexity.SignupOptions.ClickCollect(childComplexity), true

	case "SignupOptions.customDocs":
		if e.complexity.SignupOptions.CustomDocs == nil {
			break
		}

		return e.complexity.SignupOptions.CustomDocs(childComplexity), true

	case "SignupOptions.easyReturns":
		if e.complexity.SignupOptions.EasyReturns == nil {
			break
		}

		return e.complexity.SignupOptions.EasyReturns(childComplexity), true

	case "SignupOptions.id":
		if e.complexity.SignupOptions.ID == nil {
			break
		}

		return e.complexity.SignupOptions.ID(childComplexity), true

	case "SignupOptions.improvePickPack":
		if e.complexity.SignupOptions.ImprovePickPack == nil {
			break
		}

		return e.complexity.SignupOptions.ImprovePickPack(childComplexity), true

	case "SignupOptions.numShipments":
		if e.complexity.SignupOptions.NumShipments == nil {
			break
		}

		return e.complexity.SignupOptions.NumShipments(childComplexity), true

	case "SignupOptions.reducedCosts":
		if e.complexity.SignupOptions.ReducedCosts == nil {
			break
		}

		return e.complexity.SignupOptions.ReducedCosts(childComplexity), true

	case "SignupOptions.shippingLabel":
		if e.complexity.SignupOptions.ShippingLabel == nil {
			break
		}

		return e.complexity.SignupOptions.ShippingLabel(childComplexity), true

	case "SignupOptions.users":
		if e.complexity.SignupOptions.Users == nil {
			break
		}

		return e.complexity.SignupOptions.Users(childComplexity), true

	case "SignupOptionsConnection.edges":
		if e.complexity.SignupOptionsConnection.Edges == nil {
			break
		}

		return e.complexity.SignupOptionsConnection.Edges(childComplexity), true

	case "SignupOptionsConnection.pageInfo":
		if e.complexity.SignupOptionsConnection.PageInfo == nil {
			break
		}

		return e.complexity.SignupOptionsConnection.PageInfo(childComplexity), true

	case "SignupOptionsConnection.totalCount":
		if e.complexity.SignupOptionsConnection.TotalCount == nil {
			break
		}

		return e.complexity.SignupOptionsConnection.TotalCount(childComplexity), true

	case "SignupOptionsEdge.cursor":
		if e.complexity.SignupOptionsEdge.Cursor == nil {
			break
		}

		return e.complexity.SignupOptionsEdge.Cursor(childComplexity), true

	case "SignupOptionsEdge.node":
		if e.complexity.SignupOptionsEdge.Node == nil {
			break
		}

		return e.complexity.SignupOptionsEdge.Node(childComplexity), true

	case "SystemEvents.createdAt":
		if e.complexity.SystemEvents.CreatedAt == nil {
			break
		}

		return e.complexity.SystemEvents.CreatedAt(childComplexity), true

	case "SystemEvents.data":
		if e.complexity.SystemEvents.Data == nil {
			break
		}

		return e.complexity.SystemEvents.Data(childComplexity), true

	case "SystemEvents.description":
		if e.complexity.SystemEvents.Description == nil {
			break
		}

		return e.complexity.SystemEvents.Description(childComplexity), true

	case "SystemEvents.eventType":
		if e.complexity.SystemEvents.EventType == nil {
			break
		}

		return e.complexity.SystemEvents.EventType(childComplexity), true

	case "SystemEvents.eventTypeID":
		if e.complexity.SystemEvents.EventTypeID == nil {
			break
		}

		return e.complexity.SystemEvents.EventTypeID(childComplexity), true

	case "SystemEvents.id":
		if e.complexity.SystemEvents.ID == nil {
			break
		}

		return e.complexity.SystemEvents.ID(childComplexity), true

	case "SystemEvents.status":
		if e.complexity.SystemEvents.Status == nil {
			break
		}

		return e.complexity.SystemEvents.Status(childComplexity), true

	case "SystemEvents.tenant":
		if e.complexity.SystemEvents.Tenant == nil {
			break
		}

		return e.complexity.SystemEvents.Tenant(childComplexity), true

	case "SystemEvents.tenantID":
		if e.complexity.SystemEvents.TenantID == nil {
			break
		}

		return e.complexity.SystemEvents.TenantID(childComplexity), true

	case "SystemEvents.updatedAt":
		if e.complexity.SystemEvents.UpdatedAt == nil {
			break
		}

		return e.complexity.SystemEvents.UpdatedAt(childComplexity), true

	case "SystemEventsConnection.edges":
		if e.complexity.SystemEventsConnection.Edges == nil {
			break
		}

		return e.complexity.SystemEventsConnection.Edges(childComplexity), true

	case "SystemEventsConnection.pageInfo":
		if e.complexity.SystemEventsConnection.PageInfo == nil {
			break
		}

		return e.complexity.SystemEventsConnection.PageInfo(childComplexity), true

	case "SystemEventsConnection.totalCount":
		if e.complexity.SystemEventsConnection.TotalCount == nil {
			break
		}

		return e.complexity.SystemEventsConnection.TotalCount(childComplexity), true

	case "SystemEventsEdge.cursor":
		if e.complexity.SystemEventsEdge.Cursor == nil {
			break
		}

		return e.complexity.SystemEventsEdge.Cursor(childComplexity), true

	case "SystemEventsEdge.node":
		if e.complexity.SystemEventsEdge.Node == nil {
			break
		}

		return e.complexity.SystemEventsEdge.Node(childComplexity), true

	case "Tenant.adminContact":
		if e.complexity.Tenant.AdminContact == nil {
			break
		}

		return e.complexity.Tenant.AdminContact(childComplexity), true

	case "Tenant.billingContact":
		if e.complexity.Tenant.BillingContact == nil {
			break
		}

		return e.complexity.Tenant.BillingContact(childComplexity), true

	case "Tenant.companyAddress":
		if e.complexity.Tenant.CompanyAddress == nil {
			break
		}

		return e.complexity.Tenant.CompanyAddress(childComplexity), true

	case "Tenant.connectOptionCarriers":
		if e.complexity.Tenant.ConnectOptionCarriers == nil {
			break
		}

		return e.complexity.Tenant.ConnectOptionCarriers(childComplexity), true

	case "Tenant.connectOptionPlatforms":
		if e.complexity.Tenant.ConnectOptionPlatforms == nil {
			break
		}

		return e.complexity.Tenant.ConnectOptionPlatforms(childComplexity), true

	case "Tenant.defaultLanguage":
		if e.complexity.Tenant.DefaultLanguage == nil {
			break
		}

		return e.complexity.Tenant.DefaultLanguage(childComplexity), true

	case "Tenant.id":
		if e.complexity.Tenant.ID == nil {
			break
		}

		return e.complexity.Tenant.ID(childComplexity), true

	case "Tenant.invoiceReference":
		if e.complexity.Tenant.InvoiceReference == nil {
			break
		}

		return e.complexity.Tenant.InvoiceReference(childComplexity), true

	case "Tenant.name":
		if e.complexity.Tenant.Name == nil {
			break
		}

		return e.complexity.Tenant.Name(childComplexity), true

	case "Tenant.plan":
		if e.complexity.Tenant.Plan == nil {
			break
		}

		return e.complexity.Tenant.Plan(childComplexity), true

	case "Tenant.vatNumber":
		if e.complexity.Tenant.VatNumber == nil {
			break
		}

		return e.complexity.Tenant.VatNumber(childComplexity), true

	case "TenantConnection.edges":
		if e.complexity.TenantConnection.Edges == nil {
			break
		}

		return e.complexity.TenantConnection.Edges(childComplexity), true

	case "TenantConnection.pageInfo":
		if e.complexity.TenantConnection.PageInfo == nil {
			break
		}

		return e.complexity.TenantConnection.PageInfo(childComplexity), true

	case "TenantConnection.totalCount":
		if e.complexity.TenantConnection.TotalCount == nil {
			break
		}

		return e.complexity.TenantConnection.TotalCount(childComplexity), true

	case "TenantEdge.cursor":
		if e.complexity.TenantEdge.Cursor == nil {
			break
		}

		return e.complexity.TenantEdge.Cursor(childComplexity), true

	case "TenantEdge.node":
		if e.complexity.TenantEdge.Node == nil {
			break
		}

		return e.complexity.TenantEdge.Node(childComplexity), true

	case "User.apiToken":
		if e.complexity.User.APIToken == nil {
			break
		}

		return e.complexity.User.APIToken(childComplexity), true

	case "User.archivedAt":
		if e.complexity.User.ArchivedAt == nil {
			break
		}

		return e.complexity.User.ArchivedAt(childComplexity), true

	case "User.changeHistory":
		if e.complexity.User.ChangeHistory == nil {
			break
		}

		return e.complexity.User.ChangeHistory(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.isAccountOwner":
		if e.complexity.User.IsAccountOwner == nil {
			break
		}

		return e.complexity.User.IsAccountOwner(childComplexity), true

	case "User.isGlobalAdmin":
		if e.complexity.User.IsGlobalAdmin == nil {
			break
		}

		return e.complexity.User.IsGlobalAdmin(childComplexity), true

	case "User.language":
		if e.complexity.User.Language == nil {
			break
		}

		return e.complexity.User.Language(childComplexity), true

	case "User.marketingConsent":
		if e.complexity.User.MarketingConsent == nil {
			break
		}

		return e.complexity.User.MarketingConsent(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.otkRequests":
		if e.complexity.User.OtkRequests == nil {
			break
		}

		return e.complexity.User.OtkRequests(childComplexity), true

	case "User.phoneNumber":
		if e.complexity.User.PhoneNumber == nil {
			break
		}

		return e.complexity.User.PhoneNumber(childComplexity), true

	case "User.pickupDay":
		if e.complexity.User.PickupDay == nil {
			break
		}

		return e.complexity.User.PickupDay(childComplexity), true

	case "User.pickupDayLastChanged":
		if e.complexity.User.PickupDayLastChanged == nil {
			break
		}

		return e.complexity.User.PickupDayLastChanged(childComplexity), true

	case "User.planHistoryUser":
		if e.complexity.User.PlanHistoryUser == nil {
			break
		}

		return e.complexity.User.PlanHistoryUser(childComplexity), true

	case "User.seatGroup":
		if e.complexity.User.SeatGroup == nil {
			break
		}

		return e.complexity.User.SeatGroup(childComplexity), true

	case "User.selectedWorkstation":
		if e.complexity.User.SelectedWorkstation == nil {
			break
		}

		return e.complexity.User.SelectedWorkstation(childComplexity), true

	case "User.signupOptions":
		if e.complexity.User.SignupOptions == nil {
			break
		}

		return e.complexity.User.SignupOptions(childComplexity), true

	case "User.surname":
		if e.complexity.User.Surname == nil {
			break
		}

		return e.complexity.User.Surname(childComplexity), true

	case "User.tenant":
		if e.complexity.User.Tenant == nil {
			break
		}

		return e.complexity.User.Tenant(childComplexity), true

	case "User.tenantID":
		if e.complexity.User.TenantID == nil {
			break
		}

		return e.complexity.User.TenantID(childComplexity), true

	case "User.workspaceRecentScan":
		if e.complexity.User.WorkspaceRecentScan == nil {
			break
		}

		return e.complexity.User.WorkspaceRecentScan(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserSeat.createdAt":
		if e.complexity.UserSeat.CreatedAt == nil {
			break
		}

		return e.complexity.UserSeat.CreatedAt(childComplexity), true

	case "UserSeat.email":
		if e.complexity.UserSeat.Email == nil {
			break
		}

		return e.complexity.UserSeat.Email(childComplexity), true

	case "UserSeat.id":
		if e.complexity.UserSeat.ID == nil {
			break
		}

		return e.complexity.UserSeat.ID(childComplexity), true

	case "UserSeat.name":
		if e.complexity.UserSeat.Name == nil {
			break
		}

		return e.complexity.UserSeat.Name(childComplexity), true

	case "UserSeat.surname":
		if e.complexity.UserSeat.Surname == nil {
			break
		}

		return e.complexity.UserSeat.Surname(childComplexity), true

	case "UserSeat.tenant":
		if e.complexity.UserSeat.Tenant == nil {
			break
		}

		return e.complexity.UserSeat.Tenant(childComplexity), true

	case "UserSeat.tenantID":
		if e.complexity.UserSeat.TenantID == nil {
			break
		}

		return e.complexity.UserSeat.TenantID(childComplexity), true

	case "UserSeatConnection.edges":
		if e.complexity.UserSeatConnection.Edges == nil {
			break
		}

		return e.complexity.UserSeatConnection.Edges(childComplexity), true

	case "UserSeatConnection.pageInfo":
		if e.complexity.UserSeatConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserSeatConnection.PageInfo(childComplexity), true

	case "UserSeatConnection.totalCount":
		if e.complexity.UserSeatConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserSeatConnection.TotalCount(childComplexity), true

	case "UserSeatEdge.cursor":
		if e.complexity.UserSeatEdge.Cursor == nil {
			break
		}

		return e.complexity.UserSeatEdge.Cursor(childComplexity), true

	case "UserSeatEdge.node":
		if e.complexity.UserSeatEdge.Node == nil {
			break
		}

		return e.complexity.UserSeatEdge.Node(childComplexity), true

	case "WorkspaceRecentScan.createdAt":
		if e.complexity.WorkspaceRecentScan.CreatedAt == nil {
			break
		}

		return e.complexity.WorkspaceRecentScan.CreatedAt(childComplexity), true

	case "WorkspaceRecentScan.id":
		if e.complexity.WorkspaceRecentScan.ID == nil {
			break
		}

		return e.complexity.WorkspaceRecentScan.ID(childComplexity), true

	case "WorkspaceRecentScan.shipmentParcel":
		if e.complexity.WorkspaceRecentScan.ShipmentParcel == nil {
			break
		}

		return e.complexity.WorkspaceRecentScan.ShipmentParcel(childComplexity), true

	case "WorkspaceRecentScan.tenant":
		if e.complexity.WorkspaceRecentScan.Tenant == nil {
			break
		}

		return e.complexity.WorkspaceRecentScan.Tenant(childComplexity), true

	case "WorkspaceRecentScan.tenantID":
		if e.complexity.WorkspaceRecentScan.TenantID == nil {
			break
		}

		return e.complexity.WorkspaceRecentScan.TenantID(childComplexity), true

	case "WorkspaceRecentScan.user":
		if e.complexity.WorkspaceRecentScan.User == nil {
			break
		}

		return e.complexity.WorkspaceRecentScan.User(childComplexity), true

	case "Workstation.archivedAt":
		if e.complexity.Workstation.ArchivedAt == nil {
			break
		}

		return e.complexity.Workstation.ArchivedAt(childComplexity), true

	case "Workstation.autoPrintReceiver":
		if e.complexity.Workstation.AutoPrintReceiver == nil {
			break
		}

		return e.complexity.Workstation.AutoPrintReceiver(childComplexity), true

	case "Workstation.createdAt":
		if e.complexity.Workstation.CreatedAt == nil {
			break
		}

		return e.complexity.Workstation.CreatedAt(childComplexity), true

	case "Workstation.deviceType":
		if e.complexity.Workstation.DeviceType == nil {
			break
		}

		return e.complexity.Workstation.DeviceType(childComplexity), true

	case "Workstation.id":
		if e.complexity.Workstation.ID == nil {
			break
		}

		return e.complexity.Workstation.ID(childComplexity), true

	case "Workstation.lastPing":
		if e.complexity.Workstation.LastPing == nil {
			break
		}

		return e.complexity.Workstation.LastPing(childComplexity), true

	case "Workstation.name":
		if e.complexity.Workstation.Name == nil {
			break
		}

		return e.complexity.Workstation.Name(childComplexity), true

	case "Workstation.printer":
		if e.complexity.Workstation.Printer == nil {
			break
		}

		return e.complexity.Workstation.Printer(childComplexity), true

	case "Workstation.selectedUser":
		if e.complexity.Workstation.SelectedUser == nil {
			break
		}

		return e.complexity.Workstation.SelectedUser(childComplexity), true

	case "Workstation.status":
		if e.complexity.Workstation.Status == nil {
			break
		}

		return e.complexity.Workstation.Status(childComplexity), true

	case "Workstation.tenant":
		if e.complexity.Workstation.Tenant == nil {
			break
		}

		return e.complexity.Workstation.Tenant(childComplexity), true

	case "Workstation.tenantID":
		if e.complexity.Workstation.TenantID == nil {
			break
		}

		return e.complexity.Workstation.TenantID(childComplexity), true

	case "Workstation.user":
		if e.complexity.Workstation.User == nil {
			break
		}

		return e.complexity.Workstation.User(childComplexity), true

	case "Workstation.workstationID":
		if e.complexity.Workstation.WorkstationID == nil {
			break
		}

		return e.complexity.Workstation.WorkstationID(childComplexity), true

	case "WorkstationConnection.edges":
		if e.complexity.WorkstationConnection.Edges == nil {
			break
		}

		return e.complexity.WorkstationConnection.Edges(childComplexity), true

	case "WorkstationConnection.pageInfo":
		if e.complexity.WorkstationConnection.PageInfo == nil {
			break
		}

		return e.complexity.WorkstationConnection.PageInfo(childComplexity), true

	case "WorkstationConnection.totalCount":
		if e.complexity.WorkstationConnection.TotalCount == nil {
			break
		}

		return e.complexity.WorkstationConnection.TotalCount(childComplexity), true

	case "WorkstationEdge.cursor":
		if e.complexity.WorkstationEdge.Cursor == nil {
			break
		}

		return e.complexity.WorkstationEdge.Cursor(childComplexity), true

	case "WorkstationEdge.node":
		if e.complexity.WorkstationEdge.Node == nil {
			break
		}

		return e.complexity.WorkstationEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAPITokenWhereInput,
		ec.unmarshalInputAccessRightWhereInput,
		ec.unmarshalInputAddressGlobalWhereInput,
		ec.unmarshalInputAddressWhereInput,
		ec.unmarshalInputBusinessHoursPeriodWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceBringWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceDAOWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceDFWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceDSVWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceEasyPostWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceGLSWhereInput,
		ec.unmarshalInputCarrierAdditionalServicePostNordWhereInput,
		ec.unmarshalInputCarrierAdditionalServiceUSPSWhereInput,
		ec.unmarshalInputCarrierBrandWhereInput,
		ec.unmarshalInputCarrierBringWhereInput,
		ec.unmarshalInputCarrierDAOWhereInput,
		ec.unmarshalInputCarrierDFWhereInput,
		ec.unmarshalInputCarrierDSVWhereInput,
		ec.unmarshalInputCarrierEasyPostWhereInput,
		ec.unmarshalInputCarrierGLSWhereInput,
		ec.unmarshalInputCarrierPostNordWhereInput,
		ec.unmarshalInputCarrierServiceBringWhereInput,
		ec.unmarshalInputCarrierServiceDAOWhereInput,
		ec.unmarshalInputCarrierServiceDFWhereInput,
		ec.unmarshalInputCarrierServiceDSVWhereInput,
		ec.unmarshalInputCarrierServiceEasyPostWhereInput,
		ec.unmarshalInputCarrierServiceGLSWhereInput,
		ec.unmarshalInputCarrierServicePostNordWhereInput,
		ec.unmarshalInputCarrierServiceUSPSWhereInput,
		ec.unmarshalInputCarrierServiceWhereInput,
		ec.unmarshalInputCarrierUSPSWhereInput,
		ec.unmarshalInputCarrierWhereInput,
		ec.unmarshalInputChangeHistoryOrder,
		ec.unmarshalInputChangeHistoryWhereInput,
		ec.unmarshalInputColliWhereInput,
		ec.unmarshalInputConnectOptionCarrierWhereInput,
		ec.unmarshalInputConnectOptionPlatformWhereInput,
		ec.unmarshalInputConnectionBrandWhereInput,
		ec.unmarshalInputConnectionLookupOrder,
		ec.unmarshalInputConnectionLookupWhereInput,
		ec.unmarshalInputConnectionShopifyWhereInput,
		ec.unmarshalInputConnectionWhereInput,
		ec.unmarshalInputConsolidationOrder,
		ec.unmarshalInputConsolidationWhereInput,
		ec.unmarshalInputContactWhereInput,
		ec.unmarshalInputCountryHarmonizedCodeWhereInput,
		ec.unmarshalInputCountryWhereInput,
		ec.unmarshalInputCreateAddressGlobalInput,
		ec.unmarshalInputCreateAddressInput,
		ec.unmarshalInputCreateCarrierAdditionalServiceBringInput,
		ec.unmarshalInputCreateCarrierAdditionalServiceDAOInput,
		ec.unmarshalInputCreateCarrierAdditionalServiceDSVInput,
		ec.unmarshalInputCreateCarrierAdditionalServiceGLSInput,
		ec.unmarshalInputCreateCarrierBringInput,
		ec.unmarshalInputCreateCarrierDAOInput,
		ec.unmarshalInputCreateCarrierDFInput,
		ec.unmarshalInputCreateCarrierDSVInput,
		ec.unmarshalInputCreateCarrierEasyPostInput,
		ec.unmarshalInputCreateCarrierGLSInput,
		ec.unmarshalInputCreateCarrierPostNordInput,
		ec.unmarshalInputCreateCarrierUSPSInput,
		ec.unmarshalInputCreateColliInput,
		ec.unmarshalInputCreateConnectOptionCarrierInput,
		ec.unmarshalInputCreateConnectOptionPlatformInput,
		ec.unmarshalInputCreateConnectionInput,
		ec.unmarshalInputCreateConnectionShopifyInput,
		ec.unmarshalInputCreateConsolidationInput,
		ec.unmarshalInputCreateContactInput,
		ec.unmarshalInputCreateCountryHarmonizedCodeInput,
		ec.unmarshalInputCreateDeliveryOptionBringInput,
		ec.unmarshalInputCreateDeliveryOptionEasyPostInput,
		ec.unmarshalInputCreateDeliveryOptionInput,
		ec.unmarshalInputCreateDeliveryOptionPostNordInput,
		ec.unmarshalInputCreateDeliveryOptionUSPSInput,
		ec.unmarshalInputCreateDeliveryRuleConstraintGroupInput,
		ec.unmarshalInputCreateDeliveryRuleConstraintInput,
		ec.unmarshalInputCreateDeliveryRuleInput,
		ec.unmarshalInputCreateDocumentInput,
		ec.unmarshalInputCreateEmailTemplateInput,
		ec.unmarshalInputCreateHypothesisTestDeliveryOptionInput,
		ec.unmarshalInputCreateHypothesisTestDeliveryOptionLookupInput,
		ec.unmarshalInputCreateHypothesisTestDeliveryOptionRequestInput,
		ec.unmarshalInputCreateHypothesisTestInput,
		ec.unmarshalInputCreateInventoryItemInput,
		ec.unmarshalInputCreateLocationInput,
		ec.unmarshalInputCreateNotificationInput,
		ec.unmarshalInputCreateOrUpdatePallet,
		ec.unmarshalInputCreateOrderInput,
		ec.unmarshalInputCreateOrderSenderInput,
		ec.unmarshalInputCreatePackagingDFInput,
		ec.unmarshalInputCreatePackagingInput,
		ec.unmarshalInputCreatePackagingUSPSInput,
		ec.unmarshalInputCreatePackagingUSPSProcessingCategoryInput,
		ec.unmarshalInputCreatePalletInput,
		ec.unmarshalInputCreateParcelShopBringInput,
		ec.unmarshalInputCreateParcelShopDAOInput,
		ec.unmarshalInputCreateParcelShopGLSInput,
		ec.unmarshalInputCreateParcelShopInput,
		ec.unmarshalInputCreateParcelShopPostNordInput,
		ec.unmarshalInputCreatePrinterInput,
		ec.unmarshalInputCreateProductInput,
		ec.unmarshalInputCreateProductTagInput,
		ec.unmarshalInputCreateProductVariantInput,
		ec.unmarshalInputCreateReturnColliInput,
		ec.unmarshalInputCreateReturnOrderLineInput,
		ec.unmarshalInputCreateReturnPortalClaimInput,
		ec.unmarshalInputCreateReturnPortalInput,
		ec.unmarshalInputCreateSeatGroupAccessRightInput,
		ec.unmarshalInputCreateSeatGroupInput,
		ec.unmarshalInputCreateShipmentBringInput,
		ec.unmarshalInputCreateShipmentDAOInput,
		ec.unmarshalInputCreateShipmentDSVInput,
		ec.unmarshalInputCreateShipmentInput,
		ec.unmarshalInputCreateShipmentPalletInput,
		ec.unmarshalInputCreateShipmentParcelInput,
		ec.unmarshalInputCreateShipmentPostNordInput,
		ec.unmarshalInputCreateShipmentUSPSInput,
		ec.unmarshalInputCreateSignupOptionsInput,
		ec.unmarshalInputCreateTenantInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateUserSeatInput,
		ec.unmarshalInputCreateWorkstationInput,
		ec.unmarshalInputCurrencyWhereInput,
		ec.unmarshalInputDeliveryOptionBringWhereInput,
		ec.unmarshalInputDeliveryOptionDAOWhereInput,
		ec.unmarshalInputDeliveryOptionDFWhereInput,
		ec.unmarshalInputDeliveryOptionDSVWhereInput,
		ec.unmarshalInputDeliveryOptionEasyPostWhereInput,
		ec.unmarshalInputDeliveryOptionGLSWhereInput,
		ec.unmarshalInputDeliveryOptionPostNordWhereInput,
		ec.unmarshalInputDeliveryOptionProductLineInput,
		ec.unmarshalInputDeliveryOptionSeedInput,
		ec.unmarshalInputDeliveryOptionUSPSWhereInput,
		ec.unmarshalInputDeliveryOptionWhereInput,
		ec.unmarshalInputDeliveryRuleConstraintGroupWhereInput,
		ec.unmarshalInputDeliveryRuleConstraintWhereInput,
		ec.unmarshalInputDeliveryRuleCountries,
		ec.unmarshalInputDeliveryRuleWhereInput,
		ec.unmarshalInputDocumentFileWhereInput,
		ec.unmarshalInputDocumentWhereInput,
		ec.unmarshalInputEmailTemplateWhereInput,
		ec.unmarshalInputHypothesisTestDeliveryOptionLookupWhereInput,
		ec.unmarshalInputHypothesisTestDeliveryOptionRequestWhereInput,
		ec.unmarshalInputHypothesisTestDeliveryOptionWhereInput,
		ec.unmarshalInputHypothesisTestWhereInput,
		ec.unmarshalInputInventoryItemWhereInput,
		ec.unmarshalInputLanguageWhereInput,
		ec.unmarshalInputLocationTagWhereInput,
		ec.unmarshalInputLocationWhereInput,
		ec.unmarshalInputMutateReturnDeliveryOption,
		ec.unmarshalInputMutateReturnItems,
		ec.unmarshalInputMutateReturnPortalClaim,
		ec.unmarshalInputNotificationWhereInput,
		ec.unmarshalInputOTKRequestsWhereInput,
		ec.unmarshalInputOrderHistoryWhereInput,
		ec.unmarshalInputOrderLineWhereInput,
		ec.unmarshalInputOrderOrder,
		ec.unmarshalInputOrderSenderWhereInput,
		ec.unmarshalInputOrderWhereInput,
		ec.unmarshalInputPackagingDFWhereInput,
		ec.unmarshalInputPackagingUSPSProcessingCategoryWhereInput,
		ec.unmarshalInputPackagingUSPSRateIndicatorWhereInput,
		ec.unmarshalInputPackagingUSPSWhereInput,
		ec.unmarshalInputPackagingWhereInput,
		ec.unmarshalInputPalletWhereInput,
		ec.unmarshalInputParcelShopBringWhereInput,
		ec.unmarshalInputParcelShopDAOWhereInput,
		ec.unmarshalInputParcelShopGLSWhereInput,
		ec.unmarshalInputParcelShopPostNordWhereInput,
		ec.unmarshalInputParcelShopWhereInput,
		ec.unmarshalInputPlanHistoryWhereInput,
		ec.unmarshalInputPlanWhereInput,
		ec.unmarshalInputPrintJobWhereInput,
		ec.unmarshalInputPrinterWhereInput,
		ec.unmarshalInputProductImageWhereInput,
		ec.unmarshalInputProductTagWhereInput,
		ec.unmarshalInputProductVariantImageInput,
		ec.unmarshalInputProductVariantQuantity,
		ec.unmarshalInputProductVariantWhereInput,
		ec.unmarshalInputProductWhereInput,
		ec.unmarshalInputReturnColliHistoryWhereInput,
		ec.unmarshalInputReturnColliOrder,
		ec.unmarshalInputReturnColliWhereInput,
		ec.unmarshalInputReturnOrderLineWhereInput,
		ec.unmarshalInputReturnPortalClaimWhereInput,
		ec.unmarshalInputReturnPortalWhereInput,
		ec.unmarshalInputSeatGroupAccessRightWhereInput,
		ec.unmarshalInputSeatGroupWhereInput,
		ec.unmarshalInputShipmentBringWhereInput,
		ec.unmarshalInputShipmentDAOWhereInput,
		ec.unmarshalInputShipmentDFWhereInput,
		ec.unmarshalInputShipmentDSVWhereInput,
		ec.unmarshalInputShipmentEasyPostWhereInput,
		ec.unmarshalInputShipmentGLSWhereInput,
		ec.unmarshalInputShipmentHistoryWhereInput,
		ec.unmarshalInputShipmentOrder,
		ec.unmarshalInputShipmentPalletWhereInput,
		ec.unmarshalInputShipmentParcelOrder,
		ec.unmarshalInputShipmentParcelWhereInput,
		ec.unmarshalInputShipmentPostNordWhereInput,
		ec.unmarshalInputShipmentUSPSWhereInput,
		ec.unmarshalInputShipmentWhereInput,
		ec.unmarshalInputSignupOptionsWhereInput,
		ec.unmarshalInputSystemEventsWhereInput,
		ec.unmarshalInputTenantWhereInput,
		ec.unmarshalInputUpdateAddressGlobalInput,
		ec.unmarshalInputUpdateAddressInput,
		ec.unmarshalInputUpdateCarrierAdditionalServiceBringInput,
		ec.unmarshalInputUpdateCarrierAdditionalServiceDAOInput,
		ec.unmarshalInputUpdateCarrierAdditionalServiceDSVInput,
		ec.unmarshalInputUpdateCarrierAdditionalServiceGLSInput,
		ec.unmarshalInputUpdateCarrierBringInput,
		ec.unmarshalInputUpdateCarrierDAOInput,
		ec.unmarshalInputUpdateCarrierDFInput,
		ec.unmarshalInputUpdateCarrierDSVInput,
		ec.unmarshalInputUpdateCarrierEasyPostInput,
		ec.unmarshalInputUpdateCarrierGLSInput,
		ec.unmarshalInputUpdateCarrierPostNordInput,
		ec.unmarshalInputUpdateCarrierUSPSInput,
		ec.unmarshalInputUpdateColliInput,
		ec.unmarshalInputUpdateConnectOptionCarrierInput,
		ec.unmarshalInputUpdateConnectOptionPlatformInput,
		ec.unmarshalInputUpdateConnectionInput,
		ec.unmarshalInputUpdateConnectionShopifyInput,
		ec.unmarshalInputUpdateConsolidationInput,
		ec.unmarshalInputUpdateContactInput,
		ec.unmarshalInputUpdateCountryHarmonizedCodeInput,
		ec.unmarshalInputUpdateDeliveryOptionBringInput,
		ec.unmarshalInputUpdateDeliveryOptionEasyPostInput,
		ec.unmarshalInputUpdateDeliveryOptionInput,
		ec.unmarshalInputUpdateDeliveryOptionPostNordInput,
		ec.unmarshalInputUpdateDeliveryOptionUSPSInput,
		ec.unmarshalInputUpdateDeliveryRuleConstraintGroupInput,
		ec.unmarshalInputUpdateDeliveryRuleConstraintInput,
		ec.unmarshalInputUpdateDeliveryRuleInput,
		ec.unmarshalInputUpdateDocumentInput,
		ec.unmarshalInputUpdateEmailTemplateInput,
		ec.unmarshalInputUpdateHypothesisTestDeliveryOptionInput,
		ec.unmarshalInputUpdateHypothesisTestDeliveryOptionLookupInput,
		ec.unmarshalInputUpdateHypothesisTestDeliveryOptionRequestInput,
		ec.unmarshalInputUpdateHypothesisTestInput,
		ec.unmarshalInputUpdateInventoryItemInput,
		ec.unmarshalInputUpdateLocationInput,
		ec.unmarshalInputUpdateNotificationInput,
		ec.unmarshalInputUpdateOrderInput,
		ec.unmarshalInputUpdateOrderSenderInput,
		ec.unmarshalInputUpdatePackagingDFInput,
		ec.unmarshalInputUpdatePackagingInput,
		ec.unmarshalInputUpdatePackagingUSPSInput,
		ec.unmarshalInputUpdatePackagingUSPSProcessingCategoryInput,
		ec.unmarshalInputUpdatePalletInput,
		ec.unmarshalInputUpdateParcelShopBringInput,
		ec.unmarshalInputUpdateParcelShopDAOInput,
		ec.unmarshalInputUpdateParcelShopGLSInput,
		ec.unmarshalInputUpdateParcelShopInput,
		ec.unmarshalInputUpdateParcelShopPostNordInput,
		ec.unmarshalInputUpdatePrinterInput,
		ec.unmarshalInputUpdatePrinterWithIDInput,
		ec.unmarshalInputUpdateProductInput,
		ec.unmarshalInputUpdateProductTagInput,
		ec.unmarshalInputUpdateProductVariantIDInput,
		ec.unmarshalInputUpdateProductVariantInput,
		ec.unmarshalInputUpdateReturnColliInput,
		ec.unmarshalInputUpdateReturnOrderLineInput,
		ec.unmarshalInputUpdateReturnPortalClaimInput,
		ec.unmarshalInputUpdateReturnPortalInput,
		ec.unmarshalInputUpdateSeatGroupAccessRightInput,
		ec.unmarshalInputUpdateSeatGroupInput,
		ec.unmarshalInputUpdateShipmentBringInput,
		ec.unmarshalInputUpdateShipmentDAOInput,
		ec.unmarshalInputUpdateShipmentDSVInput,
		ec.unmarshalInputUpdateShipmentInput,
		ec.unmarshalInputUpdateShipmentPalletInput,
		ec.unmarshalInputUpdateShipmentParcelInput,
		ec.unmarshalInputUpdateShipmentPostNordInput,
		ec.unmarshalInputUpdateShipmentUSPSInput,
		ec.unmarshalInputUpdateSignupOptionsInput,
		ec.unmarshalInputUpdateTenantInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserSeatInput,
		ec.unmarshalInputUpdateWorkstationInput,
		ec.unmarshalInputUserSeatWhereInput,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputWorkspaceRecentScanWhereInput,
		ec.unmarshalInputWorkstationWhereInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../api_token.graphql", Input: `extend type Query {
    myAPITokens: [APIToken!]!
    devicePing(token: String!): Boolean!
}

type CreateAPITokenSuccess {
    id: ID!
    token: String!
}

extend type Mutation {
    createAPIToken(name: String!): CreateAPITokenSuccess!
    updateAPIToken(id: ID!, name: String!): Boolean!
    deleteAPIToken(id: ID!): [APIToken!]!
}`, BuiltIn: false},
	{Name: "../carriers.graphql", Input: `extend type Query {
    carrierGLS(id: ID!): CarrierGLS
    carrierPostNord(id: ID!): CarrierPostNord
    carrierUSPS(id: ID!): CarrierUSPS
    carrier(id: ID): Carrier
}

type CreateCarrierAgreementSuccess {
    id: ID!
    carrier: CarrierBrandInternalID!
}

extend type Mutation {
    createCarrierAgreement(name: String!, carrierBrand: ID!): CreateCarrierAgreementSuccess!

    updateCarrierAgreementBring(id: ID!, name: String!, input: UpdateCarrierBringInput!): Carrier!
    updateCarrierAgreementDAO(id: ID!, name: String!, input: UpdateCarrierDAOInput!): Carrier!
    updateCarrierAgreementDF(id: ID!, name: String!, input: UpdateCarrierDFInput!): Carrier!
    updateCarrierAgreementDSV(id: ID!, name: String!, input: UpdateCarrierDSVInput!): Carrier!
    updateCarrierAgreementEasyPost(id: ID!, name: String!, input: UpdateCarrierEasyPostInput!): Carrier!
    updateCarrierAgreementGLS(id: ID!, name: String!, input: UpdateCarrierGLSInput!): CarrierGLS!
    updateCarrierAgreementPostNord(id: ID!, name: String!, input: UpdateCarrierPostNordInput!): CarrierPostNord!
    updateCarrierAgreementUSPS(id: ID!, name: String!, input: UpdateCarrierUSPSInput!): CarrierUSPS!
}`, BuiltIn: false},
	{Name: "../connections.graphql", Input: `type ConnectionListItem {
    id: String!
    name: String!
    connectionBrand: ConnectionBrand!
}

extend type Query {
    connection(id: ID): Connection
    connectionList: [ConnectionListItem]!
    connectionShopify(id: ID!): ConnectionShopify
}

extend type Mutation {
    createShopifyConnection(input: CreateConnectionShopifyInput!, inputConnection: CreateConnectionInput!): ConnectionShopify
    updateShopifyConnection(id: ID!, input: UpdateConnectionShopifyInput!, inputConnection: UpdateConnectionInput!): ConnectionShopify
}`, BuiltIn: false},
	{Name: "../consolidation.graphql", Input: `type CreateShipmentConsolidationResponse {
    shipment: Shipment!
    labelsPDF: [String!]!
    allLabels: String!
}

type ConsolidationShipmentStatus {
    mayPrebook: Boolean!
    mayBook: Boolean!
    shipment: Shipment
}

extend type Query {
    consolidation(id: ID!): Consolidation!
    consolidationShipments(consolidationID: ID!): ConsolidationShipmentStatus!

    # Avoid auto-tx since we are calling external service
    createConsolidationShipment(consolidationID: ID!, prebook: Boolean!): CreateShipmentConsolidationResponse!
}

# Include ID to update an existing pallet
input CreateOrUpdatePallet {
    id: ID!
    create: CreatePalletInput!
}

extend type Mutation {
    createConsolidation(publicID: String!, description: String!): Consolidation!
    updateConsolidation(
        id: ID!,
        input: UpdateConsolidationInput!,
        sender: CreateAddressInput,
        recipient: CreateAddressInput,
        inputPallets: [CreateOrUpdatePallet!]!
    ): Consolidation!
}`, BuiltIn: false},
	{Name: "../dashboard.graphql", Input: `type DashboardTile {
    id: ID!
    title: String!
    value: String!
}

type RateRequests {
    requests: [RateRequest!]!
    requestsError: [RateRequest!]!
}
type RateRequest {
    date: String!
    optionCount: Int!
    error: String
    req: String
}

extend type Query {
    dashboardTiles: [DashboardTile!]!
    trailingProductUpdates: [Int!]!
    rateRequests: RateRequests!
}`, BuiltIn: false},
	{Name: "../delivery_rules.graphql", Input: `
extend type Query {

    deliveryOptionsFiltered(showArchived: Boolean!): [DeliveryOption!]!

    deliveryOptionBring(id: ID!): DeliveryOptionBring
    deliveryOptionDAO(id: ID!): DeliveryOptionDAO
    deliveryOptionDF(id: ID!): DeliveryOptionDF
    deliveryOptionDSV(id: ID!): DeliveryOptionDSV
    deliveryOptionEasyPost(id: ID!): DeliveryOptionEasyPost
    deliveryOptionGLS(id: ID!): DeliveryOptionGLS
    deliveryOptionPostNord(deliveryOptionID: ID!): DeliveryOptionPostNord
    deliveryOptionUSPS(deliveryOptionID: ID!): DeliveryOptionUSPS
    constraintGroup(id: ID!): DeliveryRuleConstraintGroup
    constraints(groupID: ID!): [DeliveryRuleConstraintWithTags!]

    availableAdditionalServicesPostNord(carrierServiceID: ID!): [String!]!
    availableAdditionalServicesUSPS(carrierServiceID: ID!): [CarrierAdditionalServiceUSPS!]!
}

type CreateDeliveryOptionSuccess {
    id: ID!
    carrier: CarrierBrandInternalID!
}

extend type Mutation {
    createDeliveryOption(name: String!, agreementID: ID!, connectionID: ID!): CreateDeliveryOptionSuccess!

    updateDeliveryOptionBring(
        id: ID!,
        input: UpdateDeliveryOptionBringInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
    ): DeliveryOptionBring!

    updateDeliveryOptionDAO(
        id: ID!,
        # input: UpdateDeliveryOptionDAOInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
    ): DeliveryOptionDAO!

    updateDeliveryOptionDF(
        id: ID!,
        # input: UpdateDeliveryOptionDAOInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
    ): DeliveryOptionDF!

    updateDeliveryOptionDSV(
        id: ID!,
        # input: UpdateDeliveryOptionDAOInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
    ): DeliveryOptionDSV!

    updateDeliveryOptionEasyPost(
        id: ID!,
        input: UpdateDeliveryOptionEasyPostInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
    ): DeliveryOptionEasyPost!

    updateDeliveryOptionGLS(
        id: ID!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
    ): DeliveryOptionGLS!

    updateDeliveryOptionPostNord(
        id: ID!,
        input: UpdateDeliveryOptionPostNordInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
        inputAdditionalServices: [String!]!
    ): DeliveryOptionPostNord!

    updateDeliveryOptionUSPS(
        id: ID!,
        input: UpdateDeliveryOptionUSPSInput!,
        inputDeliveryOption: UpdateDeliveryOptionInput!,
        inputAdditionalServices: [ID!]!
    ): DeliveryOptionUSPS!

    createDeliveryRule(input: CreateDeliveryRuleInput!): DeliveryRule!
    updateDeliveryRule(deliveryRuleID: ID!, val: UpdateDeliveryRuleInput!): DeliveryRule!

    createDeliveryRuleConstraintGroup(input: CreateDeliveryRuleConstraintGroupInput!): DeliveryRuleConstraintGroup!
    createDeliveryRuleConstraintGroupConstraints(
        deliveryRuleId: ID!,
        logicType: DeliveryRuleConstraintGroupConstraintLogic!,
        input: [CreateDeliveryRuleConstraintInput]
    ): [DeliveryRuleConstraintWithTags!]
    replaceDeliveryRuleConstraintGroupConstraints(
        deliveryGroupId: ID!,
        logicType: DeliveryRuleConstraintGroupConstraintLogic!,
        input: [CreateDeliveryRuleConstraintInput]
    ): [DeliveryRuleConstraintWithTags!]
    deleteDeliveryRule(deliveryRuleID: ID!): [DeliveryRule]!
    deleteDeliveryRuleConstraintGroupConstraints(deliveryGroupId: ID!): [DeliveryRule]!

    replaceDeliveryRuleCountries(ruleID: ID!, countries: [ID!]!): DeliveryRule!

    updateDeliveryOptionSortOrder(newOrder: [ID!]!): [DeliveryOption!]!

    deliveryOptionArchive(deliveryOptionID: ID!): Boolean!
}

input DeliveryRuleCountries {
    ruleID: ID!
    countries: [ID!]!
}

type DeliveryRuleConstraintWithTags {
    constraint: DeliveryRuleConstraint
    tags: [ProductTag!]
}

type DeliveryRuleConstraintSelectedValue {
    numeric: Int
    numericRange: [Int!]
    values: [String!]
    text: String
    dayOfWeek: [String!]
    timeOfDay: [String!]
    ids: [String!]
}

input DeliveryRuleConstraintSelectedValueInput {
    numeric: Int
    numericRange: [Int!]
    values: [String!]
    text: String
    dayOfWeek: [String!]
    timeOfDay: [String!]
    ids: [String!]
}
`, BuiltIn: false},
	{Name: "../documents.graphql", Input: `type DocumentDownload {
    base64PDF: String!
}

extend type Query {
    document(id: ID!): Document!
    documentDownload(id: ID!): DocumentDownload!
}

extend type Mutation {
    createDocument(name: String!, mergeType: DocumentMergeType!): ID!
    updateDocument(id: ID!, input: UpdateDocumentInput!): Document!
}`, BuiltIn: false},
	{Name: "../email_templates.graphql", Input: `extend type Query {
    emailTemplate(id: ID!): EmailTemplate!
    sendTestEmail(id: ID!, toEmail: String!): Boolean!
}

extend type Mutation {
    createEmailTemplates(name: String!, merge: EmailTemplateMergeType!): ID!
    updateEmailTemplate(id: ID!, input: UpdateEmailTemplateInput!): EmailTemplate!
}`, BuiltIn: false},
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type APIToken implements Node {
  id: ID!
  tenantID: ID!
  """
  User supplied name for this token
  """
  name: String!
  createdAt: Time
  lastUsed: Time
  tenant: Tenant!
  user: User!
}
"""
A connection to a list of items.
"""
type APITokenConnection {
  """
  A list of edges.
  """
  edges: [APITokenEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type APITokenEdge {
  """
  The item at the end of the edge.
  """
  node: APIToken
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
APITokenWhereInput is used for filtering APIToken objects.
Input was generated by ent.
"""
input APITokenWhereInput {
  not: APITokenWhereInput
  and: [APITokenWhereInput!]
  or: [APITokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  last_used field predicates
  """
  lastUsed: Time
  lastUsedNEQ: Time
  lastUsedIn: [Time!]
  lastUsedNotIn: [Time!]
  lastUsedGT: Time
  lastUsedGTE: Time
  lastUsedLT: Time
  lastUsedLTE: Time
  lastUsedIsNil: Boolean
  lastUsedNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type AccessRight implements Node {
  id: ID!
  label: String!
  internalID: String!
  assignedAccessRight: [SeatGroup!]
  seatGroupAccessRight: [SeatGroupAccessRight!]
}
"""
A connection to a list of items.
"""
type AccessRightConnection {
  """
  A list of edges.
  """
  edges: [AccessRightEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AccessRightEdge {
  """
  The item at the end of the edge.
  """
  node: AccessRight
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AccessRightWhereInput is used for filtering AccessRight objects.
Input was generated by ent.
"""
input AccessRightWhereInput {
  not: AccessRightWhereInput
  and: [AccessRightWhereInput!]
  or: [AccessRightWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  internal_id field predicates
  """
  internalID: String
  internalIDNEQ: String
  internalIDIn: [String!]
  internalIDNotIn: [String!]
  internalIDGT: String
  internalIDGTE: String
  internalIDLT: String
  internalIDLTE: String
  internalIDContains: String
  internalIDHasPrefix: String
  internalIDHasSuffix: String
  internalIDEqualFold: String
  internalIDContainsFold: String
  """
  assigned_access_right edge predicates
  """
  hasAssignedAccessRight: Boolean
  hasAssignedAccessRightWith: [SeatGroupWhereInput!]
  """
  seat_group_access_right edge predicates
  """
  hasSeatGroupAccessRight: Boolean
  hasSeatGroupAccessRightWith: [SeatGroupAccessRightWhereInput!]
}
type Address implements Node {
  id: ID!
  tenantID: ID!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  """
  Some applications have both mobile and generic
  """
  phoneNumber2: String
  """
  Electronic customs
  """
  vatNumber: String
  company: String
  addressOne: String!
  addressTwo: String!
  city: String!
  state: String
  zip: String!
  tenant: Tenant!
  recipientColli: [Colli!]
  recipientConsolidation: Consolidation
  companyAddress: [Tenant!]
  location: [Location!]
  senderColli: [Colli!]
  senderConsolidation: Consolidation
  returnSenderColli: [ReturnColli!]
  returnRecipientColli: [ReturnColli!]
  country: Country!
}
"""
A connection to a list of items.
"""
type AddressConnection {
  """
  A list of edges.
  """
  edges: [AddressEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AddressEdge {
  """
  The item at the end of the edge.
  """
  node: Address
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type AddressGlobal implements Node {
  id: ID!
  company: String
  addressOne: String!
  addressTwo: String
  city: String!
  state: String
  zip: String!
  latitude: Float!
  longitude: Float!
  parcelShopPostNordDelivery: ParcelShopPostNord
  parcelShopBringDelivery: ParcelShopBring
  parcelShop: ParcelShop
  country: Country!
}
"""
A connection to a list of items.
"""
type AddressGlobalConnection {
  """
  A list of edges.
  """
  edges: [AddressGlobalEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AddressGlobalEdge {
  """
  The item at the end of the edge.
  """
  node: AddressGlobal
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
AddressGlobalWhereInput is used for filtering AddressGlobal objects.
Input was generated by ent.
"""
input AddressGlobalWhereInput {
  not: AddressGlobalWhereInput
  and: [AddressGlobalWhereInput!]
  or: [AddressGlobalWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  address_one field predicates
  """
  addressOne: String
  addressOneNEQ: String
  addressOneIn: [String!]
  addressOneNotIn: [String!]
  addressOneGT: String
  addressOneGTE: String
  addressOneLT: String
  addressOneLTE: String
  addressOneContains: String
  addressOneHasPrefix: String
  addressOneHasSuffix: String
  addressOneEqualFold: String
  addressOneContainsFold: String
  """
  address_two field predicates
  """
  addressTwo: String
  addressTwoNEQ: String
  addressTwoIn: [String!]
  addressTwoNotIn: [String!]
  addressTwoGT: String
  addressTwoGTE: String
  addressTwoLT: String
  addressTwoLTE: String
  addressTwoContains: String
  addressTwoHasPrefix: String
  addressTwoHasSuffix: String
  addressTwoIsNil: Boolean
  addressTwoNotNil: Boolean
  addressTwoEqualFold: String
  addressTwoContainsFold: String
  """
  city field predicates
  """
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """
  state field predicates
  """
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateIsNil: Boolean
  stateNotNil: Boolean
  stateEqualFold: String
  stateContainsFold: String
  """
  zip field predicates
  """
  zip: String
  zipNEQ: String
  zipIn: [String!]
  zipNotIn: [String!]
  zipGT: String
  zipGTE: String
  zipLT: String
  zipLTE: String
  zipContains: String
  zipHasPrefix: String
  zipHasSuffix: String
  zipEqualFold: String
  zipContainsFold: String
  """
  latitude field predicates
  """
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  """
  longitude field predicates
  """
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  """
  parcel_shop_post_nord_delivery edge predicates
  """
  hasParcelShopPostNordDelivery: Boolean
  hasParcelShopPostNordDeliveryWith: [ParcelShopPostNordWhereInput!]
  """
  parcel_shop_bring_delivery edge predicates
  """
  hasParcelShopBringDelivery: Boolean
  hasParcelShopBringDeliveryWith: [ParcelShopBringWhereInput!]
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
"""
AddressWhereInput is used for filtering Address objects.
Input was generated by ent.
"""
input AddressWhereInput {
  not: AddressWhereInput
  and: [AddressWhereInput!]
  or: [AddressWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  phone_number_2 field predicates
  """
  phoneNumber2: String
  phoneNumber2NEQ: String
  phoneNumber2In: [String!]
  phoneNumber2NotIn: [String!]
  phoneNumber2GT: String
  phoneNumber2GTE: String
  phoneNumber2LT: String
  phoneNumber2LTE: String
  phoneNumber2Contains: String
  phoneNumber2HasPrefix: String
  phoneNumber2HasSuffix: String
  phoneNumber2IsNil: Boolean
  phoneNumber2NotNil: Boolean
  phoneNumber2EqualFold: String
  phoneNumber2ContainsFold: String
  """
  vat_number field predicates
  """
  vatNumber: String
  vatNumberNEQ: String
  vatNumberIn: [String!]
  vatNumberNotIn: [String!]
  vatNumberGT: String
  vatNumberGTE: String
  vatNumberLT: String
  vatNumberLTE: String
  vatNumberContains: String
  vatNumberHasPrefix: String
  vatNumberHasSuffix: String
  vatNumberIsNil: Boolean
  vatNumberNotNil: Boolean
  vatNumberEqualFold: String
  vatNumberContainsFold: String
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  address_one field predicates
  """
  addressOne: String
  addressOneNEQ: String
  addressOneIn: [String!]
  addressOneNotIn: [String!]
  addressOneGT: String
  addressOneGTE: String
  addressOneLT: String
  addressOneLTE: String
  addressOneContains: String
  addressOneHasPrefix: String
  addressOneHasSuffix: String
  addressOneEqualFold: String
  addressOneContainsFold: String
  """
  address_two field predicates
  """
  addressTwo: String
  addressTwoNEQ: String
  addressTwoIn: [String!]
  addressTwoNotIn: [String!]
  addressTwoGT: String
  addressTwoGTE: String
  addressTwoLT: String
  addressTwoLTE: String
  addressTwoContains: String
  addressTwoHasPrefix: String
  addressTwoHasSuffix: String
  addressTwoEqualFold: String
  addressTwoContainsFold: String
  """
  city field predicates
  """
  city: String
  cityNEQ: String
  cityIn: [String!]
  cityNotIn: [String!]
  cityGT: String
  cityGTE: String
  cityLT: String
  cityLTE: String
  cityContains: String
  cityHasPrefix: String
  cityHasSuffix: String
  cityEqualFold: String
  cityContainsFold: String
  """
  state field predicates
  """
  state: String
  stateNEQ: String
  stateIn: [String!]
  stateNotIn: [String!]
  stateGT: String
  stateGTE: String
  stateLT: String
  stateLTE: String
  stateContains: String
  stateHasPrefix: String
  stateHasSuffix: String
  stateIsNil: Boolean
  stateNotNil: Boolean
  stateEqualFold: String
  stateContainsFold: String
  """
  zip field predicates
  """
  zip: String
  zipNEQ: String
  zipIn: [String!]
  zipNotIn: [String!]
  zipGT: String
  zipGTE: String
  zipLT: String
  zipLTE: String
  zipContains: String
  zipHasPrefix: String
  zipHasSuffix: String
  zipEqualFold: String
  zipContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  recipient_colli edge predicates
  """
  hasRecipientColli: Boolean
  hasRecipientColliWith: [ColliWhereInput!]
  """
  recipient_consolidation edge predicates
  """
  hasRecipientConsolidation: Boolean
  hasRecipientConsolidationWith: [ConsolidationWhereInput!]
  """
  company_address edge predicates
  """
  hasCompanyAddress: Boolean
  hasCompanyAddressWith: [TenantWhereInput!]
  """
  location edge predicates
  """
  hasLocation: Boolean
  hasLocationWith: [LocationWhereInput!]
  """
  sender_colli edge predicates
  """
  hasSenderColli: Boolean
  hasSenderColliWith: [ColliWhereInput!]
  """
  sender_consolidation edge predicates
  """
  hasSenderConsolidation: Boolean
  hasSenderConsolidationWith: [ConsolidationWhereInput!]
  """
  return_sender_colli edge predicates
  """
  hasReturnSenderColli: Boolean
  hasReturnSenderColliWith: [ReturnColliWhereInput!]
  """
  return_recipient_colli edge predicates
  """
  hasReturnRecipientColli: Boolean
  hasReturnRecipientColliWith: [ReturnColliWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
type BusinessHoursPeriod implements Node {
  id: ID!
  dayOfWeek: BusinessHoursPeriodDayOfWeek!
  opening: Time!
  closing: Time!
  parcelShop: ParcelShop!
}
"""
A connection to a list of items.
"""
type BusinessHoursPeriodConnection {
  """
  A list of edges.
  """
  edges: [BusinessHoursPeriodEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
BusinessHoursPeriodDayOfWeek is enum for the field day_of_week
"""
enum BusinessHoursPeriodDayOfWeek @goModel(model: "delivrio.io/go/ent/businesshoursperiod.DayOfWeek") {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
"""
An edge in a connection.
"""
type BusinessHoursPeriodEdge {
  """
  The item at the end of the edge.
  """
  node: BusinessHoursPeriod
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
BusinessHoursPeriodWhereInput is used for filtering BusinessHoursPeriod objects.
Input was generated by ent.
"""
input BusinessHoursPeriodWhereInput {
  not: BusinessHoursPeriodWhereInput
  and: [BusinessHoursPeriodWhereInput!]
  or: [BusinessHoursPeriodWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  day_of_week field predicates
  """
  dayOfWeek: BusinessHoursPeriodDayOfWeek
  dayOfWeekNEQ: BusinessHoursPeriodDayOfWeek
  dayOfWeekIn: [BusinessHoursPeriodDayOfWeek!]
  dayOfWeekNotIn: [BusinessHoursPeriodDayOfWeek!]
  """
  opening field predicates
  """
  opening: Time
  openingNEQ: Time
  openingIn: [Time!]
  openingNotIn: [Time!]
  openingGT: Time
  openingGTE: Time
  openingLT: Time
  openingLTE: Time
  """
  closing field predicates
  """
  closing: Time
  closingNEQ: Time
  closingIn: [Time!]
  closingNotIn: [Time!]
  closingGT: Time
  closingGTE: Time
  closingLT: Time
  closingLTE: Time
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
}
type Carrier implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  syncCancelation: Boolean!
  tenant: Tenant!
  carrierBrand: CarrierBrand!
  carrierDAO: CarrierDAO
  carrierDF: CarrierDF
  carrierDSV: CarrierDSV
  carrierEasyPost: CarrierEasyPost
  carrierGLS: CarrierGLS
  carrierPostNord: CarrierPostNord
  carrierUSPS: CarrierUSPS
  carrierBring: CarrierBring
  deliveryOption: [DeliveryOption!]
  shipment: [Shipment!]
}
type CarrierAdditionalServiceBring implements Node {
  id: ID!
  label: String!
  apiCodeBooking: String!
  carrierServiceBring: CarrierServiceBring
  deliveryOptionBring: [DeliveryOptionBring!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceBringConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceBringEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceBringEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceBring
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceBringWhereInput is used for filtering CarrierAdditionalServiceBring objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceBringWhereInput {
  not: CarrierAdditionalServiceBringWhereInput
  and: [CarrierAdditionalServiceBringWhereInput!]
  or: [CarrierAdditionalServiceBringWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  api_code_booking field predicates
  """
  apiCodeBooking: String
  apiCodeBookingNEQ: String
  apiCodeBookingIn: [String!]
  apiCodeBookingNotIn: [String!]
  apiCodeBookingGT: String
  apiCodeBookingGTE: String
  apiCodeBookingLT: String
  apiCodeBookingLTE: String
  apiCodeBookingContains: String
  apiCodeBookingHasPrefix: String
  apiCodeBookingHasSuffix: String
  apiCodeBookingEqualFold: String
  apiCodeBookingContainsFold: String
  """
  carrier_service_bring edge predicates
  """
  hasCarrierServiceBring: Boolean
  hasCarrierServiceBringWith: [CarrierServiceBringWhereInput!]
  """
  delivery_option_bring edge predicates
  """
  hasDeliveryOptionBring: Boolean
  hasDeliveryOptionBringWith: [DeliveryOptionBringWhereInput!]
}
type CarrierAdditionalServiceDAO implements Node {
  id: ID!
  label: String!
  apiCode: String!
  carrierServiceDAO: [CarrierServiceDAO!]
  deliveryOptionDAO: [DeliveryOptionDAO!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceDAOConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceDAOEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceDAOEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceDAO
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceDAOWhereInput is used for filtering CarrierAdditionalServiceDAO objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceDAOWhereInput {
  not: CarrierAdditionalServiceDAOWhereInput
  and: [CarrierAdditionalServiceDAOWhereInput!]
  or: [CarrierAdditionalServiceDAOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  api_code field predicates
  """
  apiCode: String
  apiCodeNEQ: String
  apiCodeIn: [String!]
  apiCodeNotIn: [String!]
  apiCodeGT: String
  apiCodeGTE: String
  apiCodeLT: String
  apiCodeLTE: String
  apiCodeContains: String
  apiCodeHasPrefix: String
  apiCodeHasSuffix: String
  apiCodeEqualFold: String
  apiCodeContainsFold: String
  """
  carrier_service_dao edge predicates
  """
  hasCarrierServiceDAO: Boolean
  hasCarrierServiceDAOWith: [CarrierServiceDAOWhereInput!]
  """
  delivery_option_dao edge predicates
  """
  hasDeliveryOptionDAO: Boolean
  hasDeliveryOptionDAOWith: [DeliveryOptionDAOWhereInput!]
}
type CarrierAdditionalServiceDF implements Node {
  id: ID!
  label: String!
  apiCode: String!
  carrierServiceDF: [CarrierServiceDF!]
  deliveryOptionDF: [DeliveryOptionDF!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceDFConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceDFEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceDFEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceDF
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceDFWhereInput is used for filtering CarrierAdditionalServiceDF objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceDFWhereInput {
  not: CarrierAdditionalServiceDFWhereInput
  and: [CarrierAdditionalServiceDFWhereInput!]
  or: [CarrierAdditionalServiceDFWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  api_code field predicates
  """
  apiCode: String
  apiCodeNEQ: String
  apiCodeIn: [String!]
  apiCodeNotIn: [String!]
  apiCodeGT: String
  apiCodeGTE: String
  apiCodeLT: String
  apiCodeLTE: String
  apiCodeContains: String
  apiCodeHasPrefix: String
  apiCodeHasSuffix: String
  apiCodeEqualFold: String
  apiCodeContainsFold: String
  """
  carrier_service_df edge predicates
  """
  hasCarrierServiceDF: Boolean
  hasCarrierServiceDFWith: [CarrierServiceDFWhereInput!]
  """
  delivery_option_df edge predicates
  """
  hasDeliveryOptionDF: Boolean
  hasDeliveryOptionDFWith: [DeliveryOptionDFWhereInput!]
}
type CarrierAdditionalServiceDSV implements Node {
  id: ID!
  label: String!
  apiCode: String!
  carrierServiceDSV: [CarrierServiceDSV!]
  deliveryOptionDSV: [DeliveryOptionDSV!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceDSVConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceDSVEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceDSVEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceDSV
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceDSVWhereInput is used for filtering CarrierAdditionalServiceDSV objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceDSVWhereInput {
  not: CarrierAdditionalServiceDSVWhereInput
  and: [CarrierAdditionalServiceDSVWhereInput!]
  or: [CarrierAdditionalServiceDSVWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  api_code field predicates
  """
  apiCode: String
  apiCodeNEQ: String
  apiCodeIn: [String!]
  apiCodeNotIn: [String!]
  apiCodeGT: String
  apiCodeGTE: String
  apiCodeLT: String
  apiCodeLTE: String
  apiCodeContains: String
  apiCodeHasPrefix: String
  apiCodeHasSuffix: String
  apiCodeEqualFold: String
  apiCodeContainsFold: String
  """
  carrier_service_dsv edge predicates
  """
  hasCarrierServiceDSV: Boolean
  hasCarrierServiceDSVWith: [CarrierServiceDSVWhereInput!]
  """
  delivery_option_dsv edge predicates
  """
  hasDeliveryOptionDSV: Boolean
  hasDeliveryOptionDSVWith: [DeliveryOptionDSVWhereInput!]
}
type CarrierAdditionalServiceEasyPost implements Node {
  id: ID!
  label: String!
  apiKey: String!
  apiValue: String!
  carrierServiceEasyPost: [CarrierServiceEasyPost!]
  deliveryOptionEasyPost: [DeliveryOptionEasyPost!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceEasyPostConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceEasyPostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceEasyPostEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceEasyPost
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceEasyPostWhereInput is used for filtering CarrierAdditionalServiceEasyPost objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceEasyPostWhereInput {
  not: CarrierAdditionalServiceEasyPostWhereInput
  and: [CarrierAdditionalServiceEasyPostWhereInput!]
  or: [CarrierAdditionalServiceEasyPostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  api_value field predicates
  """
  apiValue: String
  apiValueNEQ: String
  apiValueIn: [String!]
  apiValueNotIn: [String!]
  apiValueGT: String
  apiValueGTE: String
  apiValueLT: String
  apiValueLTE: String
  apiValueContains: String
  apiValueHasPrefix: String
  apiValueHasSuffix: String
  apiValueEqualFold: String
  apiValueContainsFold: String
  """
  carrier_service_easy_post edge predicates
  """
  hasCarrierServiceEasyPost: Boolean
  hasCarrierServiceEasyPostWith: [CarrierServiceEasyPostWhereInput!]
  """
  delivery_option_easy_post edge predicates
  """
  hasDeliveryOptionEasyPost: Boolean
  hasDeliveryOptionEasyPostWith: [DeliveryOptionEasyPostWhereInput!]
}
type CarrierAdditionalServiceGLS implements Node {
  id: ID!
  label: String!
  mandatory: Boolean!
  """
  When false, only edge countries will validate on this consignor service
  """
  allCountriesConsignor: Boolean!
  """
  When false, only edge countries will validate on this consignee service
  """
  allCountriesConsignee: Boolean!
  internalID: String!
  carrierServiceGLS: CarrierServiceGLS
  deliveryOptionGLS: [DeliveryOptionGLS!]
  countriesConsignee: [Country!]
  countriesConsignor: [Country!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceGLSConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceGLSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceGLSEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceGLS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceGLSWhereInput is used for filtering CarrierAdditionalServiceGLS objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceGLSWhereInput {
  not: CarrierAdditionalServiceGLSWhereInput
  and: [CarrierAdditionalServiceGLSWhereInput!]
  or: [CarrierAdditionalServiceGLSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  mandatory field predicates
  """
  mandatory: Boolean
  mandatoryNEQ: Boolean
  """
  all_countries_consignor field predicates
  """
  allCountriesConsignor: Boolean
  allCountriesConsignorNEQ: Boolean
  """
  all_countries_consignee field predicates
  """
  allCountriesConsignee: Boolean
  allCountriesConsigneeNEQ: Boolean
  """
  internal_id field predicates
  """
  internalID: String
  internalIDNEQ: String
  internalIDIn: [String!]
  internalIDNotIn: [String!]
  internalIDGT: String
  internalIDGTE: String
  internalIDLT: String
  internalIDLTE: String
  internalIDContains: String
  internalIDHasPrefix: String
  internalIDHasSuffix: String
  internalIDEqualFold: String
  internalIDContainsFold: String
  """
  carrier_service_gls edge predicates
  """
  hasCarrierServiceGLS: Boolean
  hasCarrierServiceGLSWith: [CarrierServiceGLSWhereInput!]
  """
  delivery_option_gls edge predicates
  """
  hasDeliveryOptionGLS: Boolean
  hasDeliveryOptionGLSWith: [DeliveryOptionGLSWhereInput!]
  """
  countries_consignee edge predicates
  """
  hasCountriesConsignee: Boolean
  hasCountriesConsigneeWith: [CountryWhereInput!]
  """
  countries_consignor edge predicates
  """
  hasCountriesConsignor: Boolean
  hasCountriesConsignorWith: [CountryWhereInput!]
}
type CarrierAdditionalServicePostNord implements Node {
  id: ID!
  label: String!
  mandatory: Boolean!
  """
  When false, only edge countries will validate on this consignor service
  """
  allCountriesConsignor: Boolean!
  """
  When false, only edge countries will validate on this consignee service
  """
  allCountriesConsignee: Boolean!
  internalID: String!
  """
  2 characters code identifying the additional service in the API request
  """
  apiCode: String!
  carrierServicePostNord: CarrierServicePostNord
  deliveryOptionPostNord: [DeliveryOptionPostNord!]
  countriesConsignee: [Country!]
  countriesConsignor: [Country!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServicePostNordConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServicePostNordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServicePostNordEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServicePostNord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServicePostNordWhereInput is used for filtering CarrierAdditionalServicePostNord objects.
Input was generated by ent.
"""
input CarrierAdditionalServicePostNordWhereInput {
  not: CarrierAdditionalServicePostNordWhereInput
  and: [CarrierAdditionalServicePostNordWhereInput!]
  or: [CarrierAdditionalServicePostNordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  mandatory field predicates
  """
  mandatory: Boolean
  mandatoryNEQ: Boolean
  """
  all_countries_consignor field predicates
  """
  allCountriesConsignor: Boolean
  allCountriesConsignorNEQ: Boolean
  """
  all_countries_consignee field predicates
  """
  allCountriesConsignee: Boolean
  allCountriesConsigneeNEQ: Boolean
  """
  internal_id field predicates
  """
  internalID: String
  internalIDNEQ: String
  internalIDIn: [String!]
  internalIDNotIn: [String!]
  internalIDGT: String
  internalIDGTE: String
  internalIDLT: String
  internalIDLTE: String
  internalIDContains: String
  internalIDHasPrefix: String
  internalIDHasSuffix: String
  internalIDEqualFold: String
  internalIDContainsFold: String
  """
  api_code field predicates
  """
  apiCode: String
  apiCodeNEQ: String
  apiCodeIn: [String!]
  apiCodeNotIn: [String!]
  apiCodeGT: String
  apiCodeGTE: String
  apiCodeLT: String
  apiCodeLTE: String
  apiCodeContains: String
  apiCodeHasPrefix: String
  apiCodeHasSuffix: String
  apiCodeEqualFold: String
  apiCodeContainsFold: String
  """
  carrier_service_post_nord edge predicates
  """
  hasCarrierServicePostNord: Boolean
  hasCarrierServicePostNordWith: [CarrierServicePostNordWhereInput!]
  """
  delivery_option_post_nord edge predicates
  """
  hasDeliveryOptionPostNord: Boolean
  hasDeliveryOptionPostNordWith: [DeliveryOptionPostNordWhereInput!]
  """
  countries_consignee edge predicates
  """
  hasCountriesConsignee: Boolean
  hasCountriesConsigneeWith: [CountryWhereInput!]
  """
  countries_consignor edge predicates
  """
  hasCountriesConsignor: Boolean
  hasCountriesConsignorWith: [CountryWhereInput!]
}
type CarrierAdditionalServiceUSPS implements Node {
  id: ID!
  label: String!
  """
  For filtering away rarely used options in the UI
  """
  commonlyUsed: Boolean!
  internalID: CarrierAdditionalServiceUSPSInternalID!
  """
  ServiceID to be included in XML payload
  """
  apiCode: String!
  carrierServiceUSPS: CarrierServiceUSPS
  deliveryOptionUSPS: [DeliveryOptionUSPS!]
}
"""
A connection to a list of items.
"""
type CarrierAdditionalServiceUSPSConnection {
  """
  A list of edges.
  """
  edges: [CarrierAdditionalServiceUSPSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierAdditionalServiceUSPSEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierAdditionalServiceUSPS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierAdditionalServiceUSPSInternalID is enum for the field internal_id
"""
enum CarrierAdditionalServiceUSPSInternalID @goModel(model: "delivrio.io/go/ent/carrieradditionalserviceusps.InternalID") {
  global_direct_entry
  usps_label_delivery_service
  tracking_plus_6_months
  tracking_plus_1_year
  tracking_plus_3_years
  tracking_plus_5_years
  tracking_plus_7_years
  tracking_plus_10_years
  tracking_plus_signature_3_years
  tracking_plus_signature_5_years
  tracking_plus_signature_7_years
  tracking_plus_signature_10_years
  hazardous_materials_air_eligible_ethanol
  hazardous_materials_class_1_toy_propellant
  hazardous_materials_class_3_flammable_and_combustible_liquids
  hazardous_materials_class_7_radioactive_materials
  hazardous_materials_class_8_air_eligible_corrosive_materials
  hazardous_materials_class_8_nonspillable_wet_batteries
  hazardous_materials_class_9_lithium_battery_marked_ground_only
  hazardous_materials_class_9_lithium_battery_returns
  hazardous_materials_class_9_marked_lithium_battery
  hazardous_materials_class_9_dry_ice
  hazardous_materials_class_9_unmarked_lithium_batteries
  hazardous_materials_class_9_magnetized_materials
  hazardous_materials_division_4_1_mailable_flammable_solids_and_safety_matches
  hazardous_materials_division_5_2_organic_peroxides
  hazardous_materials_division_6_1_toxic_materials
  hazardous_materials_division_6_2_biological_materials
  hazardous_materials_excepted_quantity_provision
  hazardous_materials_ground_only_hazardous_materials
  hazardous_materials_air_eligible_id8000_consumer_commodity
  hazardous_materials_lighters
  hazardous_materials_limited_quantity_ground
  hazardous_materials_small_quantity_provision_markings_required
  hazardous_materials
  certified_mail
  certified_mail_restricted_delivery
  certified_mail_adult_signature_required
  certified_mail_adult_signature_restricted_delivery
  usps_tracking_electronic
  signature_confirmation
  adult_signature_required
  adult_signature_restricted_delivery
  signature_confirmation_restricted_delivery
  priority_mail_express_insurance
  insurance
  insurance_restricted_delivery
  return_receipt
  return_receipt_electronic
  signature_requested_priority_mail_express_only
  po_to_addressee_priority_mail_express_only
  sunday_delivery
}
"""
CarrierAdditionalServiceUSPSWhereInput is used for filtering CarrierAdditionalServiceUSPS objects.
Input was generated by ent.
"""
input CarrierAdditionalServiceUSPSWhereInput {
  not: CarrierAdditionalServiceUSPSWhereInput
  and: [CarrierAdditionalServiceUSPSWhereInput!]
  or: [CarrierAdditionalServiceUSPSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  commonly_used field predicates
  """
  commonlyUsed: Boolean
  commonlyUsedNEQ: Boolean
  """
  internal_id field predicates
  """
  internalID: CarrierAdditionalServiceUSPSInternalID
  internalIDNEQ: CarrierAdditionalServiceUSPSInternalID
  internalIDIn: [CarrierAdditionalServiceUSPSInternalID!]
  internalIDNotIn: [CarrierAdditionalServiceUSPSInternalID!]
  """
  api_code field predicates
  """
  apiCode: String
  apiCodeNEQ: String
  apiCodeIn: [String!]
  apiCodeNotIn: [String!]
  apiCodeGT: String
  apiCodeGTE: String
  apiCodeLT: String
  apiCodeLTE: String
  apiCodeContains: String
  apiCodeHasPrefix: String
  apiCodeHasSuffix: String
  apiCodeEqualFold: String
  apiCodeContainsFold: String
  """
  carrier_service_usps edge predicates
  """
  hasCarrierServiceUSPS: Boolean
  hasCarrierServiceUSPSWith: [CarrierServiceUSPSWhereInput!]
  """
  delivery_option_usps edge predicates
  """
  hasDeliveryOptionUSPS: Boolean
  hasDeliveryOptionUSPSWith: [DeliveryOptionUSPSWhereInput!]
}
type CarrierBrand implements Node {
  id: ID!
  label: String!
  """
  Accommodation for PostNord to become PN
  """
  labelShort: String!
  internalID: CarrierBrandInternalID!
  logoURL: String
  textColor: String
  backgroundColor: String
  carrierService: [CarrierService!]
  carrier: [Carrier!]
  parcelShop: [ParcelShop!]
  packaging: [Packaging!]
  document: [Document!]
}
"""
A connection to a list of items.
"""
type CarrierBrandConnection {
  """
  A list of edges.
  """
  edges: [CarrierBrandEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierBrandEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierBrand
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierBrandInternalID is enum for the field internal_id
"""
enum CarrierBrandInternalID @goModel(model: "delivrio.io/go/ent/carrierbrand.InternalID") {
  bring
  dao
  df
  dsv
  easy_post
  gls
  dhl
  post_nord
  usps
}
"""
CarrierBrandWhereInput is used for filtering CarrierBrand objects.
Input was generated by ent.
"""
input CarrierBrandWhereInput {
  not: CarrierBrandWhereInput
  and: [CarrierBrandWhereInput!]
  or: [CarrierBrandWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  label_short field predicates
  """
  labelShort: String
  labelShortNEQ: String
  labelShortIn: [String!]
  labelShortNotIn: [String!]
  labelShortGT: String
  labelShortGTE: String
  labelShortLT: String
  labelShortLTE: String
  labelShortContains: String
  labelShortHasPrefix: String
  labelShortHasSuffix: String
  labelShortEqualFold: String
  labelShortContainsFold: String
  """
  internal_id field predicates
  """
  internalID: CarrierBrandInternalID
  internalIDNEQ: CarrierBrandInternalID
  internalIDIn: [CarrierBrandInternalID!]
  internalIDNotIn: [CarrierBrandInternalID!]
  """
  logo_url field predicates
  """
  logoURL: String
  logoURLNEQ: String
  logoURLIn: [String!]
  logoURLNotIn: [String!]
  logoURLGT: String
  logoURLGTE: String
  logoURLLT: String
  logoURLLTE: String
  logoURLContains: String
  logoURLHasPrefix: String
  logoURLHasSuffix: String
  logoURLIsNil: Boolean
  logoURLNotNil: Boolean
  logoURLEqualFold: String
  logoURLContainsFold: String
  """
  text_color field predicates
  """
  textColor: String
  textColorNEQ: String
  textColorIn: [String!]
  textColorNotIn: [String!]
  textColorGT: String
  textColorGTE: String
  textColorLT: String
  textColorLTE: String
  textColorContains: String
  textColorHasPrefix: String
  textColorHasSuffix: String
  textColorIsNil: Boolean
  textColorNotNil: Boolean
  textColorEqualFold: String
  textColorContainsFold: String
  """
  background_color field predicates
  """
  backgroundColor: String
  backgroundColorNEQ: String
  backgroundColorIn: [String!]
  backgroundColorNotIn: [String!]
  backgroundColorGT: String
  backgroundColorGTE: String
  backgroundColorLT: String
  backgroundColorLTE: String
  backgroundColorContains: String
  backgroundColorHasPrefix: String
  backgroundColorHasSuffix: String
  backgroundColorIsNil: Boolean
  backgroundColorNotNil: Boolean
  backgroundColorEqualFold: String
  backgroundColorContainsFold: String
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
  """
  document edge predicates
  """
  hasDocument: Boolean
  hasDocumentWith: [DocumentWhereInput!]
}
type CarrierBring implements Node {
  id: ID!
  tenantID: ID!
  apiKey: String
  customerNumber: String
  test: Boolean!
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierBringConnection {
  """
  A list of edges.
  """
  edges: [CarrierBringEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierBringEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierBring
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierBringWhereInput is used for filtering CarrierBring objects.
Input was generated by ent.
"""
input CarrierBringWhereInput {
  not: CarrierBringWhereInput
  and: [CarrierBringWhereInput!]
  or: [CarrierBringWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyIsNil: Boolean
  apiKeyNotNil: Boolean
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  customer_number field predicates
  """
  customerNumber: String
  customerNumberNEQ: String
  customerNumberIn: [String!]
  customerNumberNotIn: [String!]
  customerNumberGT: String
  customerNumberGTE: String
  customerNumberLT: String
  customerNumberLTE: String
  customerNumberContains: String
  customerNumberHasPrefix: String
  customerNumberHasSuffix: String
  customerNumberIsNil: Boolean
  customerNumberNotNil: Boolean
  customerNumberEqualFold: String
  customerNumberContainsFold: String
  """
  test field predicates
  """
  test: Boolean
  testNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
"""
A connection to a list of items.
"""
type CarrierConnection {
  """
  A list of edges.
  """
  edges: [CarrierEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type CarrierDAO implements Node {
  id: ID!
  tenantID: ID!
  customerID: String
  apiKey: String
  test: Boolean!
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierDAOConnection {
  """
  A list of edges.
  """
  edges: [CarrierDAOEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierDAOEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierDAO
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierDAOWhereInput is used for filtering CarrierDAO objects.
Input was generated by ent.
"""
input CarrierDAOWhereInput {
  not: CarrierDAOWhereInput
  and: [CarrierDAOWhereInput!]
  or: [CarrierDAOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  customer_id field predicates
  """
  customerID: String
  customerIDNEQ: String
  customerIDIn: [String!]
  customerIDNotIn: [String!]
  customerIDGT: String
  customerIDGTE: String
  customerIDLT: String
  customerIDLTE: String
  customerIDContains: String
  customerIDHasPrefix: String
  customerIDHasSuffix: String
  customerIDIsNil: Boolean
  customerIDNotNil: Boolean
  customerIDEqualFold: String
  customerIDContainsFold: String
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyIsNil: Boolean
  apiKeyNotNil: Boolean
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  Test field predicates
  """
  test: Boolean
  testNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
type CarrierDF implements Node {
  id: ID!
  tenantID: ID!
  customerID: String!
  agreementNumber: String!
  whoPays: CarrierDFWhoPays!
  test: Boolean!
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierDFConnection {
  """
  A list of edges.
  """
  edges: [CarrierDFEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierDFEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierDF
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierDFWhereInput is used for filtering CarrierDF objects.
Input was generated by ent.
"""
input CarrierDFWhereInput {
  not: CarrierDFWhereInput
  and: [CarrierDFWhereInput!]
  or: [CarrierDFWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  customer_id field predicates
  """
  customerID: String
  customerIDNEQ: String
  customerIDIn: [String!]
  customerIDNotIn: [String!]
  customerIDGT: String
  customerIDGTE: String
  customerIDLT: String
  customerIDLTE: String
  customerIDContains: String
  customerIDHasPrefix: String
  customerIDHasSuffix: String
  customerIDEqualFold: String
  customerIDContainsFold: String
  """
  agreement_number field predicates
  """
  agreementNumber: String
  agreementNumberNEQ: String
  agreementNumberIn: [String!]
  agreementNumberNotIn: [String!]
  agreementNumberGT: String
  agreementNumberGTE: String
  agreementNumberLT: String
  agreementNumberLTE: String
  agreementNumberContains: String
  agreementNumberHasPrefix: String
  agreementNumberHasSuffix: String
  agreementNumberEqualFold: String
  agreementNumberContainsFold: String
  """
  who_pays field predicates
  """
  whoPays: CarrierDFWhoPays
  whoPaysNEQ: CarrierDFWhoPays
  whoPaysIn: [CarrierDFWhoPays!]
  whoPaysNotIn: [CarrierDFWhoPays!]
  """
  test field predicates
  """
  test: Boolean
  testNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
"""
CarrierDFWhoPays is enum for the field who_pays
"""
enum CarrierDFWhoPays @goModel(model: "delivrio.io/go/ent/carrierdf.WhoPays") {
  Prepaid
  Collect
}
type CarrierDSV implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierDSVConnection {
  """
  A list of edges.
  """
  edges: [CarrierDSVEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierDSVEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierDSV
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierDSVWhereInput is used for filtering CarrierDSV objects.
Input was generated by ent.
"""
input CarrierDSVWhereInput {
  not: CarrierDSVWhereInput
  and: [CarrierDSVWhereInput!]
  or: [CarrierDSVWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
type CarrierEasyPost implements Node {
  id: ID!
  tenantID: ID!
  apiKey: String!
  test: Boolean!
  """
  When > 1, then we use rate, then buy. =1 one-call buy. Former not implemented in first round.
  """
  carrierAccounts: [String!]!
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierEasyPostConnection {
  """
  A list of edges.
  """
  edges: [CarrierEasyPostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierEasyPostEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierEasyPost
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierEasyPostWhereInput is used for filtering CarrierEasyPost objects.
Input was generated by ent.
"""
input CarrierEasyPostWhereInput {
  not: CarrierEasyPostWhereInput
  and: [CarrierEasyPostWhereInput!]
  or: [CarrierEasyPostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  test field predicates
  """
  test: Boolean
  testNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
"""
An edge in a connection.
"""
type CarrierEdge {
  """
  The item at the end of the edge.
  """
  node: Carrier
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CarrierGLS implements Node {
  id: ID!
  tenantID: ID!
  contactID: String
  glsUsername: String
  glsPassword: String
  customerID: String
  glsCountryCode: String
  syncShipmentCancellation: Boolean
  printErrorOnLabel: Boolean
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierGLSConnection {
  """
  A list of edges.
  """
  edges: [CarrierGLSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierGLSEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierGLS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierGLSWhereInput is used for filtering CarrierGLS objects.
Input was generated by ent.
"""
input CarrierGLSWhereInput {
  not: CarrierGLSWhereInput
  and: [CarrierGLSWhereInput!]
  or: [CarrierGLSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  contact_id field predicates
  """
  contactID: String
  contactIDNEQ: String
  contactIDIn: [String!]
  contactIDNotIn: [String!]
  contactIDGT: String
  contactIDGTE: String
  contactIDLT: String
  contactIDLTE: String
  contactIDContains: String
  contactIDHasPrefix: String
  contactIDHasSuffix: String
  contactIDIsNil: Boolean
  contactIDNotNil: Boolean
  contactIDEqualFold: String
  contactIDContainsFold: String
  """
  gls_username field predicates
  """
  glsUsername: String
  glsUsernameNEQ: String
  glsUsernameIn: [String!]
  glsUsernameNotIn: [String!]
  glsUsernameGT: String
  glsUsernameGTE: String
  glsUsernameLT: String
  glsUsernameLTE: String
  glsUsernameContains: String
  glsUsernameHasPrefix: String
  glsUsernameHasSuffix: String
  glsUsernameIsNil: Boolean
  glsUsernameNotNil: Boolean
  glsUsernameEqualFold: String
  glsUsernameContainsFold: String
  """
  gls_password field predicates
  """
  glsPassword: String
  glsPasswordNEQ: String
  glsPasswordIn: [String!]
  glsPasswordNotIn: [String!]
  glsPasswordGT: String
  glsPasswordGTE: String
  glsPasswordLT: String
  glsPasswordLTE: String
  glsPasswordContains: String
  glsPasswordHasPrefix: String
  glsPasswordHasSuffix: String
  glsPasswordIsNil: Boolean
  glsPasswordNotNil: Boolean
  glsPasswordEqualFold: String
  glsPasswordContainsFold: String
  """
  customer_id field predicates
  """
  customerID: String
  customerIDNEQ: String
  customerIDIn: [String!]
  customerIDNotIn: [String!]
  customerIDGT: String
  customerIDGTE: String
  customerIDLT: String
  customerIDLTE: String
  customerIDContains: String
  customerIDHasPrefix: String
  customerIDHasSuffix: String
  customerIDIsNil: Boolean
  customerIDNotNil: Boolean
  customerIDEqualFold: String
  customerIDContainsFold: String
  """
  gls_country_code field predicates
  """
  glsCountryCode: String
  glsCountryCodeNEQ: String
  glsCountryCodeIn: [String!]
  glsCountryCodeNotIn: [String!]
  glsCountryCodeGT: String
  glsCountryCodeGTE: String
  glsCountryCodeLT: String
  glsCountryCodeLTE: String
  glsCountryCodeContains: String
  glsCountryCodeHasPrefix: String
  glsCountryCodeHasSuffix: String
  glsCountryCodeIsNil: Boolean
  glsCountryCodeNotNil: Boolean
  glsCountryCodeEqualFold: String
  glsCountryCodeContainsFold: String
  """
  sync_shipment_cancellation field predicates
  """
  syncShipmentCancellation: Boolean
  syncShipmentCancellationNEQ: Boolean
  syncShipmentCancellationIsNil: Boolean
  syncShipmentCancellationNotNil: Boolean
  """
  print_error_on_label field predicates
  """
  printErrorOnLabel: Boolean
  printErrorOnLabelNEQ: Boolean
  printErrorOnLabelIsNil: Boolean
  printErrorOnLabelNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
type CarrierPostNord implements Node {
  id: ID!
  tenantID: ID!
  """
  Default empty to allow creation from dialog with followup editing
  """
  customerNumber: String!
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierPostNordConnection {
  """
  A list of edges.
  """
  edges: [CarrierPostNordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierPostNordEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierPostNord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierPostNordWhereInput is used for filtering CarrierPostNord objects.
Input was generated by ent.
"""
input CarrierPostNordWhereInput {
  not: CarrierPostNordWhereInput
  and: [CarrierPostNordWhereInput!]
  or: [CarrierPostNordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  customer_number field predicates
  """
  customerNumber: String
  customerNumberNEQ: String
  customerNumberIn: [String!]
  customerNumberNotIn: [String!]
  customerNumberGT: String
  customerNumberGTE: String
  customerNumberLT: String
  customerNumberLTE: String
  customerNumberContains: String
  customerNumberHasPrefix: String
  customerNumberHasSuffix: String
  customerNumberEqualFold: String
  customerNumberContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
type CarrierService implements Node {
  id: ID!
  label: String!
  internalID: String!
  return: Boolean!
  consolidation: Boolean!
  deliveryPointOptional: Boolean!
  deliveryPointRequired: Boolean!
  carrierServicePostNord: CarrierServicePostNord
  carrierServiceDAO: CarrierServiceDAO
  carrierServiceDF: CarrierServiceDF
  carrierServiceDSV: CarrierServiceDSV
  carrierServEasyPost: CarrierServiceEasyPost
  carrierServiceGLS: CarrierServiceGLS
  carrierServiceUSPS: CarrierServiceUSPS
  carrierServiceBring: CarrierServiceBring
  carrierBrand: CarrierBrand!
  deliveryOption: [DeliveryOption!]
}
type CarrierServiceBring implements Node {
  id: ID!
  apiServiceCode: String!
  apiRequest: String!
  carrierService: CarrierService!
  carrierAdditionalServiceBring: [CarrierAdditionalServiceBring!]
}
"""
A connection to a list of items.
"""
type CarrierServiceBringConnection {
  """
  A list of edges.
  """
  edges: [CarrierServiceBringEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierServiceBringEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierServiceBring
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierServiceBringWhereInput is used for filtering CarrierServiceBring objects.
Input was generated by ent.
"""
input CarrierServiceBringWhereInput {
  not: CarrierServiceBringWhereInput
  and: [CarrierServiceBringWhereInput!]
  or: [CarrierServiceBringWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  api_service_code field predicates
  """
  apiServiceCode: String
  apiServiceCodeNEQ: String
  apiServiceCodeIn: [String!]
  apiServiceCodeNotIn: [String!]
  apiServiceCodeGT: String
  apiServiceCodeGTE: String
  apiServiceCodeLT: String
  apiServiceCodeLTE: String
  apiServiceCodeContains: String
  apiServiceCodeHasPrefix: String
  apiServiceCodeHasSuffix: String
  apiServiceCodeEqualFold: String
  apiServiceCodeContainsFold: String
  """
  api_request field predicates
  """
  apiRequest: String
  apiRequestNEQ: String
  apiRequestIn: [String!]
  apiRequestNotIn: [String!]
  apiRequestGT: String
  apiRequestGTE: String
  apiRequestLT: String
  apiRequestLTE: String
  apiRequestContains: String
  apiRequestHasPrefix: String
  apiRequestHasSuffix: String
  apiRequestEqualFold: String
  apiRequestContainsFold: String
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_additional_service_bring edge predicates
  """
  hasCarrierAdditionalServiceBring: Boolean
  hasCarrierAdditionalServiceBringWith: [CarrierAdditionalServiceBringWhereInput!]
}
"""
A connection to a list of items.
"""
type CarrierServiceConnection {
  """
  A list of edges.
  """
  edges: [CarrierServiceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type CarrierServiceDAO implements Node {
  id: ID!
  carrierService: CarrierService!
  carrierAdditionalServiceDAO: [CarrierAdditionalServiceDAO!]
}
"""
A connection to a list of items.
"""
type CarrierServiceDAOConnection {
  """
  A list of edges.
  """
  edges: [CarrierServiceDAOEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierServiceDAOEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierServiceDAO
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierServiceDAOWhereInput is used for filtering CarrierServiceDAO objects.
Input was generated by ent.
"""
input CarrierServiceDAOWhereInput {
  not: CarrierServiceDAOWhereInput
  and: [CarrierServiceDAOWhereInput!]
  or: [CarrierServiceDAOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_additional_service_dao edge predicates
  """
  hasCarrierAdditionalServiceDAO: Boolean
  hasCarrierAdditionalServiceDAOWith: [CarrierAdditionalServiceDAOWhereInput!]
}
type CarrierServiceDF implements Node {
  id: ID!
  carrierService: CarrierService!
  carrierAdditionalServiceDF: [CarrierAdditionalServiceDF!]
}
"""
A connection to a list of items.
"""
type CarrierServiceDFConnection {
  """
  A list of edges.
  """
  edges: [CarrierServiceDFEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierServiceDFEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierServiceDF
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierServiceDFWhereInput is used for filtering CarrierServiceDF objects.
Input was generated by ent.
"""
input CarrierServiceDFWhereInput {
  not: CarrierServiceDFWhereInput
  and: [CarrierServiceDFWhereInput!]
  or: [CarrierServiceDFWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_additional_service_df edge predicates
  """
  hasCarrierAdditionalServiceDF: Boolean
  hasCarrierAdditionalServiceDFWith: [CarrierAdditionalServiceDFWhereInput!]
}
type CarrierServiceDSV implements Node {
  id: ID!
  carrierService: CarrierService!
  carrierAdditionalServiceDSV: [CarrierAdditionalServiceDSV!]
}
"""
A connection to a list of items.
"""
type CarrierServiceDSVConnection {
  """
  A list of edges.
  """
  edges: [CarrierServiceDSVEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierServiceDSVEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierServiceDSV
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierServiceDSVWhereInput is used for filtering CarrierServiceDSV objects.
Input was generated by ent.
"""
input CarrierServiceDSVWhereInput {
  not: CarrierServiceDSVWhereInput
  and: [CarrierServiceDSVWhereInput!]
  or: [CarrierServiceDSVWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_additional_service_dsv edge predicates
  """
  hasCarrierAdditionalServiceDSV: Boolean
  hasCarrierAdditionalServiceDSVWith: [CarrierAdditionalServiceDSVWhereInput!]
}
type CarrierServiceEasyPost implements Node {
  id: ID!
  carrierService: CarrierService!
  carrierAddServEasyPost: [CarrierAdditionalServiceEasyPost!]
}
"""
CarrierServiceEasyPostWhereInput is used for filtering CarrierServiceEasyPost objects.
Input was generated by ent.
"""
input CarrierServiceEasyPostWhereInput {
  not: CarrierServiceEasyPostWhereInput
  and: [CarrierServiceEasyPostWhereInput!]
  or: [CarrierServiceEasyPostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_add_serv_easy_post edge predicates
  """
  hasCarrierAddServEasyPost: Boolean
  hasCarrierAddServEasyPostWith: [CarrierAdditionalServiceEasyPostWhereInput!]
}
"""
An edge in a connection.
"""
type CarrierServiceEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierService
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CarrierServiceGLS implements Node {
  id: ID!
  apiKey: String
  apiValue: CarrierServiceGLSAPIValue!
  carrierService: CarrierService!
  carrierAdditionalServiceGLS: [CarrierAdditionalServiceGLS!]
}
"""
CarrierServiceGLSAPIValue is enum for the field api_value
"""
enum CarrierServiceGLSAPIValue @goModel(model: "delivrio.io/go/ent/carrierservicegls.APIValue") {
  Y
  numeric_string
  none
}
"""
CarrierServiceGLSWhereInput is used for filtering CarrierServiceGLS objects.
Input was generated by ent.
"""
input CarrierServiceGLSWhereInput {
  not: CarrierServiceGLSWhereInput
  and: [CarrierServiceGLSWhereInput!]
  or: [CarrierServiceGLSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyIsNil: Boolean
  apiKeyNotNil: Boolean
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  api_value field predicates
  """
  apiValue: CarrierServiceGLSAPIValue
  apiValueNEQ: CarrierServiceGLSAPIValue
  apiValueIn: [CarrierServiceGLSAPIValue!]
  apiValueNotIn: [CarrierServiceGLSAPIValue!]
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_additional_service_gls edge predicates
  """
  hasCarrierAdditionalServiceGLS: Boolean
  hasCarrierAdditionalServiceGLSWith: [CarrierAdditionalServiceGLSWhereInput!]
}
type CarrierServicePostNord implements Node {
  id: ID!
  label: String!
  internalID: String!
  apiCode: String!
  carrierService: CarrierService!
  carrierAddServPostNord: [CarrierAdditionalServicePostNord!]
}
"""
CarrierServicePostNordWhereInput is used for filtering CarrierServicePostNord objects.
Input was generated by ent.
"""
input CarrierServicePostNordWhereInput {
  not: CarrierServicePostNordWhereInput
  and: [CarrierServicePostNordWhereInput!]
  or: [CarrierServicePostNordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  internal_id field predicates
  """
  internalID: String
  internalIDNEQ: String
  internalIDIn: [String!]
  internalIDNotIn: [String!]
  internalIDGT: String
  internalIDGTE: String
  internalIDLT: String
  internalIDLTE: String
  internalIDContains: String
  internalIDHasPrefix: String
  internalIDHasSuffix: String
  internalIDEqualFold: String
  internalIDContainsFold: String
  """
  api_code field predicates
  """
  apiCode: String
  apiCodeNEQ: String
  apiCodeIn: [String!]
  apiCodeNotIn: [String!]
  apiCodeGT: String
  apiCodeGTE: String
  apiCodeLT: String
  apiCodeLTE: String
  apiCodeContains: String
  apiCodeHasPrefix: String
  apiCodeHasSuffix: String
  apiCodeEqualFold: String
  apiCodeContainsFold: String
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_add_serv_post_nord edge predicates
  """
  hasCarrierAddServPostNord: Boolean
  hasCarrierAddServPostNordWith: [CarrierAdditionalServicePostNordWhereInput!]
}
type CarrierServiceUSPS implements Node {
  id: ID!
  carrierService: CarrierService!
  carrierAdditionalServiceUSPS: [CarrierAdditionalServiceUSPS!]
}
"""
CarrierServiceUSPSWhereInput is used for filtering CarrierServiceUSPS objects.
Input was generated by ent.
"""
input CarrierServiceUSPSWhereInput {
  not: CarrierServiceUSPSWhereInput
  and: [CarrierServiceUSPSWhereInput!]
  or: [CarrierServiceUSPSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  carrier_additional_service_usps edge predicates
  """
  hasCarrierAdditionalServiceUSPS: Boolean
  hasCarrierAdditionalServiceUSPSWith: [CarrierAdditionalServiceUSPSWhereInput!]
}
"""
CarrierServiceWhereInput is used for filtering CarrierService objects.
Input was generated by ent.
"""
input CarrierServiceWhereInput {
  not: CarrierServiceWhereInput
  and: [CarrierServiceWhereInput!]
  or: [CarrierServiceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  internal_id field predicates
  """
  internalID: String
  internalIDNEQ: String
  internalIDIn: [String!]
  internalIDNotIn: [String!]
  internalIDGT: String
  internalIDGTE: String
  internalIDLT: String
  internalIDLTE: String
  internalIDContains: String
  internalIDHasPrefix: String
  internalIDHasSuffix: String
  internalIDEqualFold: String
  internalIDContainsFold: String
  """
  return field predicates
  """
  return: Boolean
  returnNEQ: Boolean
  """
  consolidation field predicates
  """
  consolidation: Boolean
  consolidationNEQ: Boolean
  """
  delivery_point_optional field predicates
  """
  deliveryPointOptional: Boolean
  deliveryPointOptionalNEQ: Boolean
  """
  delivery_point_required field predicates
  """
  deliveryPointRequired: Boolean
  deliveryPointRequiredNEQ: Boolean
  """
  carrier_service_post_nord edge predicates
  """
  hasCarrierServicePostNord: Boolean
  hasCarrierServicePostNordWith: [CarrierServicePostNordWhereInput!]
  """
  carrier_service_dao edge predicates
  """
  hasCarrierServiceDAO: Boolean
  hasCarrierServiceDAOWith: [CarrierServiceDAOWhereInput!]
  """
  carrier_service_df edge predicates
  """
  hasCarrierServiceDF: Boolean
  hasCarrierServiceDFWith: [CarrierServiceDFWhereInput!]
  """
  carrier_service_dsv edge predicates
  """
  hasCarrierServiceDSV: Boolean
  hasCarrierServiceDSVWith: [CarrierServiceDSVWhereInput!]
  """
  carrier_serv_easy_post edge predicates
  """
  hasCarrierServEasyPost: Boolean
  hasCarrierServEasyPostWith: [CarrierServiceEasyPostWhereInput!]
  """
  carrier_service_gls edge predicates
  """
  hasCarrierServiceGLS: Boolean
  hasCarrierServiceGLSWith: [CarrierServiceGLSWhereInput!]
  """
  carrier_service_usps edge predicates
  """
  hasCarrierServiceUSPS: Boolean
  hasCarrierServiceUSPSWith: [CarrierServiceUSPSWhereInput!]
  """
  carrier_service_bring edge predicates
  """
  hasCarrierServiceBring: Boolean
  hasCarrierServiceBringWith: [CarrierServiceBringWhereInput!]
  """
  carrier_brand edge predicates
  """
  hasCarrierBrand: Boolean
  hasCarrierBrandWith: [CarrierBrandWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
}
type CarrierUSPS implements Node {
  id: ID!
  tenantID: ID!
  isTestAPI: Boolean!
  consumerKey: String
  consumerSecret: String
  mid: String
  manifestMid: String
  crid: String
  epsAccountNumber: String
  tenant: Tenant!
  carrier: Carrier!
}
"""
A connection to a list of items.
"""
type CarrierUSPSConnection {
  """
  A list of edges.
  """
  edges: [CarrierUSPSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarrierUSPSEdge {
  """
  The item at the end of the edge.
  """
  node: CarrierUSPS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CarrierUSPSWhereInput is used for filtering CarrierUSPS objects.
Input was generated by ent.
"""
input CarrierUSPSWhereInput {
  not: CarrierUSPSWhereInput
  and: [CarrierUSPSWhereInput!]
  or: [CarrierUSPSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  is_test_api field predicates
  """
  isTestAPI: Boolean
  isTestAPINEQ: Boolean
  """
  consumer_key field predicates
  """
  consumerKey: String
  consumerKeyNEQ: String
  consumerKeyIn: [String!]
  consumerKeyNotIn: [String!]
  consumerKeyGT: String
  consumerKeyGTE: String
  consumerKeyLT: String
  consumerKeyLTE: String
  consumerKeyContains: String
  consumerKeyHasPrefix: String
  consumerKeyHasSuffix: String
  consumerKeyIsNil: Boolean
  consumerKeyNotNil: Boolean
  consumerKeyEqualFold: String
  consumerKeyContainsFold: String
  """
  consumer_secret field predicates
  """
  consumerSecret: String
  consumerSecretNEQ: String
  consumerSecretIn: [String!]
  consumerSecretNotIn: [String!]
  consumerSecretGT: String
  consumerSecretGTE: String
  consumerSecretLT: String
  consumerSecretLTE: String
  consumerSecretContains: String
  consumerSecretHasPrefix: String
  consumerSecretHasSuffix: String
  consumerSecretIsNil: Boolean
  consumerSecretNotNil: Boolean
  consumerSecretEqualFold: String
  consumerSecretContainsFold: String
  """
  mid field predicates
  """
  mid: String
  midNEQ: String
  midIn: [String!]
  midNotIn: [String!]
  midGT: String
  midGTE: String
  midLT: String
  midLTE: String
  midContains: String
  midHasPrefix: String
  midHasSuffix: String
  midIsNil: Boolean
  midNotNil: Boolean
  midEqualFold: String
  midContainsFold: String
  """
  manifest_mid field predicates
  """
  manifestMid: String
  manifestMidNEQ: String
  manifestMidIn: [String!]
  manifestMidNotIn: [String!]
  manifestMidGT: String
  manifestMidGTE: String
  manifestMidLT: String
  manifestMidLTE: String
  manifestMidContains: String
  manifestMidHasPrefix: String
  manifestMidHasSuffix: String
  manifestMidIsNil: Boolean
  manifestMidNotNil: Boolean
  manifestMidEqualFold: String
  manifestMidContainsFold: String
  """
  crid field predicates
  """
  crid: String
  cridNEQ: String
  cridIn: [String!]
  cridNotIn: [String!]
  cridGT: String
  cridGTE: String
  cridLT: String
  cridLTE: String
  cridContains: String
  cridHasPrefix: String
  cridHasSuffix: String
  cridIsNil: Boolean
  cridNotNil: Boolean
  cridEqualFold: String
  cridContainsFold: String
  """
  eps_account_number field predicates
  """
  epsAccountNumber: String
  epsAccountNumberNEQ: String
  epsAccountNumberIn: [String!]
  epsAccountNumberNotIn: [String!]
  epsAccountNumberGT: String
  epsAccountNumberGTE: String
  epsAccountNumberLT: String
  epsAccountNumberLTE: String
  epsAccountNumberContains: String
  epsAccountNumberHasPrefix: String
  epsAccountNumberHasSuffix: String
  epsAccountNumberIsNil: Boolean
  epsAccountNumberNotNil: Boolean
  epsAccountNumberEqualFold: String
  epsAccountNumberContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
}
"""
CarrierWhereInput is used for filtering Carrier objects.
Input was generated by ent.
"""
input CarrierWhereInput {
  not: CarrierWhereInput
  and: [CarrierWhereInput!]
  or: [CarrierWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  sync_cancelation field predicates
  """
  syncCancelation: Boolean
  syncCancelationNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier_brand edge predicates
  """
  hasCarrierBrand: Boolean
  hasCarrierBrandWith: [CarrierBrandWhereInput!]
  """
  carrier_dao edge predicates
  """
  hasCarrierDAO: Boolean
  hasCarrierDAOWith: [CarrierDAOWhereInput!]
  """
  carrier_df edge predicates
  """
  hasCarrierDF: Boolean
  hasCarrierDFWith: [CarrierDFWhereInput!]
  """
  carrier_dsv edge predicates
  """
  hasCarrierDSV: Boolean
  hasCarrierDSVWith: [CarrierDSVWhereInput!]
  """
  carrier_easy_post edge predicates
  """
  hasCarrierEasyPost: Boolean
  hasCarrierEasyPostWith: [CarrierEasyPostWhereInput!]
  """
  carrier_gls edge predicates
  """
  hasCarrierGLS: Boolean
  hasCarrierGLSWith: [CarrierGLSWhereInput!]
  """
  carrier_post_nord edge predicates
  """
  hasCarrierPostNord: Boolean
  hasCarrierPostNordWith: [CarrierPostNordWhereInput!]
  """
  carrier_usps edge predicates
  """
  hasCarrierUSPS: Boolean
  hasCarrierUSPSWith: [CarrierUSPSWhereInput!]
  """
  carrier_bring edge predicates
  """
  hasCarrierBring: Boolean
  hasCarrierBringWith: [CarrierBringWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
type ChangeHistory implements Node {
  id: ID!
  tenantID: ID!
  createdAt: Time!
  origin: ChangeHistoryOrigin!
  tenant: Tenant!
  planHistory: [PlanHistory!]
  user: User
  orderHistory: [OrderHistory!]
  shipmentHistory: [ShipmentHistory!]
  returnColliHistory: [ReturnColliHistory!]
}
"""
A connection to a list of items.
"""
type ChangeHistoryConnection {
  """
  A list of edges.
  """
  edges: [ChangeHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ChangeHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ChangeHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ChangeHistory connections
"""
input ChangeHistoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ChangeHistories.
  """
  field: ChangeHistoryOrderField!
}
"""
Properties by which ChangeHistory connections can be ordered.
"""
enum ChangeHistoryOrderField {
  CREATED_AT
}
"""
ChangeHistoryOrigin is enum for the field origin
"""
enum ChangeHistoryOrigin @goModel(model: "delivrio.io/go/ent/changehistory.Origin") {
  unknown
  background
  rest_api
  web_client
  print_client
  seed
}
"""
ChangeHistoryWhereInput is used for filtering ChangeHistory objects.
Input was generated by ent.
"""
input ChangeHistoryWhereInput {
  not: ChangeHistoryWhereInput
  and: [ChangeHistoryWhereInput!]
  or: [ChangeHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  origin field predicates
  """
  origin: ChangeHistoryOrigin
  originNEQ: ChangeHistoryOrigin
  originIn: [ChangeHistoryOrigin!]
  originNotIn: [ChangeHistoryOrigin!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  plan_history edge predicates
  """
  hasPlanHistory: Boolean
  hasPlanHistoryWith: [PlanHistoryWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  order_history edge predicates
  """
  hasOrderHistory: Boolean
  hasOrderHistoryWith: [OrderHistoryWhereInput!]
  """
  shipment_history edge predicates
  """
  hasShipmentHistory: Boolean
  hasShipmentHistoryWith: [ShipmentHistoryWhereInput!]
  """
  return_colli_history edge predicates
  """
  hasReturnColliHistory: Boolean
  hasReturnColliHistoryWith: [ReturnColliHistoryWhereInput!]
}
type Colli implements Node {
  id: ID!
  tenantID: ID!
  """
  Code128 type C compatible for faster reads
  """
  internalBarcode: Int
  status: ColliStatus!
  slipPrintStatus: ColliSlipPrintStatus!
  createdAt: Time!
  """
  When filled, the packing slip email has been fired
  """
  emailPackingSlipPrintedAt: Time
  """
  When filled, the packing slip email has been fired. Consider moving to shipping parcel? There are trade offs
  """
  emailLabelPrintedAt: Time
  tenant: Tenant!
  recipient: Address!
  sender: Address!
  parcelShop: ParcelShop
  clickCollectLocation: Location
  orderLines: [OrderLine!]
  deliveryOption: DeliveryOption
  """
  Stores packing slips for quick printing. Carrier labels are attached to the shipment.
  """
  documentFile: [DocumentFile!]
  """
  A colli may only have 1 active shipment, cancelled shipments are moved to the other edge
  """
  shipmentParcel: ShipmentParcel
  """
  A ref to all cancelled shipments
  """
  cancelledShipmentParcel: [ShipmentParcel!]
  order: Order!
  """
  Allows packaging to be predefined for this colli and will be used for the shipment parcel
  """
  packaging: Packaging
  printJob: [PrintJob!]
}
"""
A connection to a list of items.
"""
type ColliConnection {
  """
  A list of edges.
  """
  edges: [ColliEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ColliEdge {
  """
  The item at the end of the edge.
  """
  node: Colli
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ColliSlipPrintStatus is enum for the field slip_print_status
"""
enum ColliSlipPrintStatus @goModel(model: "delivrio.io/go/ent/colli.SlipPrintStatus") {
  pending
  printed
}
"""
ColliStatus is enum for the field status
"""
enum ColliStatus @goModel(model: "delivrio.io/go/ent/colli.Status") {
  Pending
  Dispatched
  Cancelled
}
"""
ColliWhereInput is used for filtering Colli objects.
Input was generated by ent.
"""
input ColliWhereInput {
  not: ColliWhereInput
  and: [ColliWhereInput!]
  or: [ColliWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  internal_barcode field predicates
  """
  internalBarcode: Int
  internalBarcodeNEQ: Int
  internalBarcodeIn: [Int!]
  internalBarcodeNotIn: [Int!]
  internalBarcodeGT: Int
  internalBarcodeGTE: Int
  internalBarcodeLT: Int
  internalBarcodeLTE: Int
  internalBarcodeIsNil: Boolean
  internalBarcodeNotNil: Boolean
  """
  status field predicates
  """
  status: ColliStatus
  statusNEQ: ColliStatus
  statusIn: [ColliStatus!]
  statusNotIn: [ColliStatus!]
  """
  slip_print_status field predicates
  """
  slipPrintStatus: ColliSlipPrintStatus
  slipPrintStatusNEQ: ColliSlipPrintStatus
  slipPrintStatusIn: [ColliSlipPrintStatus!]
  slipPrintStatusNotIn: [ColliSlipPrintStatus!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  email_packing_slip_printed_at field predicates
  """
  emailPackingSlipPrintedAt: Time
  emailPackingSlipPrintedAtNEQ: Time
  emailPackingSlipPrintedAtIn: [Time!]
  emailPackingSlipPrintedAtNotIn: [Time!]
  emailPackingSlipPrintedAtGT: Time
  emailPackingSlipPrintedAtGTE: Time
  emailPackingSlipPrintedAtLT: Time
  emailPackingSlipPrintedAtLTE: Time
  emailPackingSlipPrintedAtIsNil: Boolean
  emailPackingSlipPrintedAtNotNil: Boolean
  """
  email_label_printed_at field predicates
  """
  emailLabelPrintedAt: Time
  emailLabelPrintedAtNEQ: Time
  emailLabelPrintedAtIn: [Time!]
  emailLabelPrintedAtNotIn: [Time!]
  emailLabelPrintedAtGT: Time
  emailLabelPrintedAtGTE: Time
  emailLabelPrintedAtLT: Time
  emailLabelPrintedAtLTE: Time
  emailLabelPrintedAtIsNil: Boolean
  emailLabelPrintedAtNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  recipient edge predicates
  """
  hasRecipient: Boolean
  hasRecipientWith: [AddressWhereInput!]
  """
  sender edge predicates
  """
  hasSender: Boolean
  hasSenderWith: [AddressWhereInput!]
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
  """
  click_collect_location edge predicates
  """
  hasClickCollectLocation: Boolean
  hasClickCollectLocationWith: [LocationWhereInput!]
  """
  order_lines edge predicates
  """
  hasOrderLines: Boolean
  hasOrderLinesWith: [OrderLineWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  document_file edge predicates
  """
  hasDocumentFile: Boolean
  hasDocumentFileWith: [DocumentFileWhereInput!]
  """
  shipment_parcel edge predicates
  """
  hasShipmentParcel: Boolean
  hasShipmentParcelWith: [ShipmentParcelWhereInput!]
  """
  cancelled_shipment_parcel edge predicates
  """
  hasCancelledShipmentParcel: Boolean
  hasCancelledShipmentParcelWith: [ShipmentParcelWhereInput!]
  """
  order edge predicates
  """
  hasOrder: Boolean
  hasOrderWith: [OrderWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
  """
  print_job edge predicates
  """
  hasPrintJob: Boolean
  hasPrintJobWith: [PrintJobWhereInput!]
}
type ConnectOptionCarrier implements Node {
  id: ID!
  name: String!
  tenant: [Tenant!]
}
"""
A connection to a list of items.
"""
type ConnectOptionCarrierConnection {
  """
  A list of edges.
  """
  edges: [ConnectOptionCarrierEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConnectOptionCarrierEdge {
  """
  The item at the end of the edge.
  """
  node: ConnectOptionCarrier
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ConnectOptionCarrierWhereInput is used for filtering ConnectOptionCarrier objects.
Input was generated by ent.
"""
input ConnectOptionCarrierWhereInput {
  not: ConnectOptionCarrierWhereInput
  and: [ConnectOptionCarrierWhereInput!]
  or: [ConnectOptionCarrierWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
}
type ConnectOptionPlatform implements Node {
  id: ID!
  name: String!
  tenant: [Tenant!]
}
"""
A connection to a list of items.
"""
type ConnectOptionPlatformConnection {
  """
  A list of edges.
  """
  edges: [ConnectOptionPlatformEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConnectOptionPlatformEdge {
  """
  The item at the end of the edge.
  """
  node: ConnectOptionPlatform
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ConnectOptionPlatformWhereInput is used for filtering ConnectOptionPlatform objects.
Input was generated by ent.
"""
input ConnectOptionPlatformWhereInput {
  not: ConnectOptionPlatformWhereInput
  and: [ConnectOptionPlatformWhereInput!]
  or: [ConnectOptionPlatformWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
}
type Connection implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  syncOrders: Boolean!
  syncProducts: Boolean!
  fulfillAutomatically: Boolean!
  dispatchAutomatically: Boolean!
  convertCurrency: Boolean!
  autoPrintParcelSlip: Boolean!
  tenant: Tenant!
  connectionBrand: ConnectionBrand!
  connectionShopify: ConnectionShopify
  orders: [Order!]
  senderLocation: Location!
  pickupLocation: Location!
  returnLocation: Location!
  sellerLocation: Location!
  deliveryOption: [DeliveryOption!]
  """
  Delivery option to be set when none specified via sync or API
  """
  defaultDeliveryOption: DeliveryOption
  returnPortal: ReturnPortal
  hypothesisTest: [HypothesisTest!]
  notifications: [Notification!]
  currency: Currency!
  packingSlipTemplate: Document
  connectionLookup: [ConnectionLookup!]
}
type ConnectionBrand implements Node {
  id: ID!
  label: String!
  internalID: ConnectionBrandInternalID!
  logoURL: String
  connection: [Connection!]
}
"""
A connection to a list of items.
"""
type ConnectionBrandConnection {
  """
  A list of edges.
  """
  edges: [ConnectionBrandEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConnectionBrandEdge {
  """
  The item at the end of the edge.
  """
  node: ConnectionBrand
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ConnectionBrandInternalID is enum for the field internal_id
"""
enum ConnectionBrandInternalID @goModel(model: "delivrio.io/go/ent/connectionbrand.InternalID") {
  shopify
}
"""
ConnectionBrandWhereInput is used for filtering ConnectionBrand objects.
Input was generated by ent.
"""
input ConnectionBrandWhereInput {
  not: ConnectionBrandWhereInput
  and: [ConnectionBrandWhereInput!]
  or: [ConnectionBrandWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  internal_id field predicates
  """
  internalID: ConnectionBrandInternalID
  internalIDNEQ: ConnectionBrandInternalID
  internalIDIn: [ConnectionBrandInternalID!]
  internalIDNotIn: [ConnectionBrandInternalID!]
  """
  logo_url field predicates
  """
  logoURL: String
  logoURLNEQ: String
  logoURLIn: [String!]
  logoURLNotIn: [String!]
  logoURLGT: String
  logoURLGTE: String
  logoURLLT: String
  logoURLLTE: String
  logoURLContains: String
  logoURLHasPrefix: String
  logoURLHasSuffix: String
  logoURLIsNil: Boolean
  logoURLNotNil: Boolean
  logoURLEqualFold: String
  logoURLContainsFold: String
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
}
"""
A connection to a list of items.
"""
type ConnectionConnection {
  """
  A list of edges.
  """
  edges: [ConnectionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConnectionEdge {
  """
  The item at the end of the edge.
  """
  node: Connection
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ConnectionLookup implements Node {
  id: ID!
  tenantID: ID!
  payload: String!
  optionsOutputCount: Int!
  error: String
  createdAt: Time!
  tenant: Tenant!
  connections: Connection
}
"""
A connection to a list of items.
"""
type ConnectionLookupConnection {
  """
  A list of edges.
  """
  edges: [ConnectionLookupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConnectionLookupEdge {
  """
  The item at the end of the edge.
  """
  node: ConnectionLookup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ConnectionLookup connections
"""
input ConnectionLookupOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ConnectionLookups.
  """
  field: ConnectionLookupOrderField!
}
"""
Properties by which ConnectionLookup connections can be ordered.
"""
enum ConnectionLookupOrderField {
  CREATED_AT
}
"""
ConnectionLookupWhereInput is used for filtering ConnectionLookup objects.
Input was generated by ent.
"""
input ConnectionLookupWhereInput {
  not: ConnectionLookupWhereInput
  and: [ConnectionLookupWhereInput!]
  or: [ConnectionLookupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  payload field predicates
  """
  payload: String
  payloadNEQ: String
  payloadIn: [String!]
  payloadNotIn: [String!]
  payloadGT: String
  payloadGTE: String
  payloadLT: String
  payloadLTE: String
  payloadContains: String
  payloadHasPrefix: String
  payloadHasSuffix: String
  payloadEqualFold: String
  payloadContainsFold: String
  """
  options_output_count field predicates
  """
  optionsOutputCount: Int
  optionsOutputCountNEQ: Int
  optionsOutputCountIn: [Int!]
  optionsOutputCountNotIn: [Int!]
  optionsOutputCountGT: Int
  optionsOutputCountGTE: Int
  optionsOutputCountLT: Int
  optionsOutputCountLTE: Int
  """
  error field predicates
  """
  error: String
  errorNEQ: String
  errorIn: [String!]
  errorNotIn: [String!]
  errorGT: String
  errorGTE: String
  errorLT: String
  errorLTE: String
  errorContains: String
  errorHasPrefix: String
  errorHasSuffix: String
  errorIsNil: Boolean
  errorNotNil: Boolean
  errorEqualFold: String
  errorContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  connections edge predicates
  """
  hasConnections: Boolean
  hasConnectionsWith: [ConnectionWhereInput!]
}
type ConnectionShopify implements Node {
  id: ID!
  tenantID: ID!
  """
  Since certain plans don't allow for external rates
  """
  rateIntegration: Boolean!
  storeURL: String
  apiKey: String
  """
  Used for token-authenticating Shopify rate lookups
  """
  lookupKey: String
  syncFrom: Time
  """
  When set, only orders with these tags will be synchronized. Supports a 
  """
  filterTags: [String!]
  tenant: Tenant!
  connection: Connection!
}
"""
A connection to a list of items.
"""
type ConnectionShopifyConnection {
  """
  A list of edges.
  """
  edges: [ConnectionShopifyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConnectionShopifyEdge {
  """
  The item at the end of the edge.
  """
  node: ConnectionShopify
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ConnectionShopifyWhereInput is used for filtering ConnectionShopify objects.
Input was generated by ent.
"""
input ConnectionShopifyWhereInput {
  not: ConnectionShopifyWhereInput
  and: [ConnectionShopifyWhereInput!]
  or: [ConnectionShopifyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  rate_integration field predicates
  """
  rateIntegration: Boolean
  rateIntegrationNEQ: Boolean
  """
  store_url field predicates
  """
  storeURL: String
  storeURLNEQ: String
  storeURLIn: [String!]
  storeURLNotIn: [String!]
  storeURLGT: String
  storeURLGTE: String
  storeURLLT: String
  storeURLLTE: String
  storeURLContains: String
  storeURLHasPrefix: String
  storeURLHasSuffix: String
  storeURLIsNil: Boolean
  storeURLNotNil: Boolean
  storeURLEqualFold: String
  storeURLContainsFold: String
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyIsNil: Boolean
  apiKeyNotNil: Boolean
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  lookup_key field predicates
  """
  lookupKey: String
  lookupKeyNEQ: String
  lookupKeyIn: [String!]
  lookupKeyNotIn: [String!]
  lookupKeyGT: String
  lookupKeyGTE: String
  lookupKeyLT: String
  lookupKeyLTE: String
  lookupKeyContains: String
  lookupKeyHasPrefix: String
  lookupKeyHasSuffix: String
  lookupKeyIsNil: Boolean
  lookupKeyNotNil: Boolean
  lookupKeyEqualFold: String
  lookupKeyContainsFold: String
  """
  sync_from field predicates
  """
  syncFrom: Time
  syncFromNEQ: Time
  syncFromIn: [Time!]
  syncFromNotIn: [Time!]
  syncFromGT: Time
  syncFromGTE: Time
  syncFromLT: Time
  syncFromLTE: Time
  syncFromIsNil: Boolean
  syncFromNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
}
"""
ConnectionWhereInput is used for filtering Connection objects.
Input was generated by ent.
"""
input ConnectionWhereInput {
  not: ConnectionWhereInput
  and: [ConnectionWhereInput!]
  or: [ConnectionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  sync_orders field predicates
  """
  syncOrders: Boolean
  syncOrdersNEQ: Boolean
  """
  sync_products field predicates
  """
  syncProducts: Boolean
  syncProductsNEQ: Boolean
  """
  fulfill_automatically field predicates
  """
  fulfillAutomatically: Boolean
  fulfillAutomaticallyNEQ: Boolean
  """
  dispatch_automatically field predicates
  """
  dispatchAutomatically: Boolean
  dispatchAutomaticallyNEQ: Boolean
  """
  convert_currency field predicates
  """
  convertCurrency: Boolean
  convertCurrencyNEQ: Boolean
  """
  auto_print_parcel_slip field predicates
  """
  autoPrintParcelSlip: Boolean
  autoPrintParcelSlipNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  connection_brand edge predicates
  """
  hasConnectionBrand: Boolean
  hasConnectionBrandWith: [ConnectionBrandWhereInput!]
  """
  connection_shopify edge predicates
  """
  hasConnectionShopify: Boolean
  hasConnectionShopifyWith: [ConnectionShopifyWhereInput!]
  """
  orders edge predicates
  """
  hasOrders: Boolean
  hasOrdersWith: [OrderWhereInput!]
  """
  sender_location edge predicates
  """
  hasSenderLocation: Boolean
  hasSenderLocationWith: [LocationWhereInput!]
  """
  pickup_location edge predicates
  """
  hasPickupLocation: Boolean
  hasPickupLocationWith: [LocationWhereInput!]
  """
  return_location edge predicates
  """
  hasReturnLocation: Boolean
  hasReturnLocationWith: [LocationWhereInput!]
  """
  seller_location edge predicates
  """
  hasSellerLocation: Boolean
  hasSellerLocationWith: [LocationWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  default_delivery_option edge predicates
  """
  hasDefaultDeliveryOption: Boolean
  hasDefaultDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  return_portal edge predicates
  """
  hasReturnPortal: Boolean
  hasReturnPortalWith: [ReturnPortalWhereInput!]
  """
  hypothesis_test edge predicates
  """
  hasHypothesisTest: Boolean
  hasHypothesisTestWith: [HypothesisTestWhereInput!]
  """
  notifications edge predicates
  """
  hasNotifications: Boolean
  hasNotificationsWith: [NotificationWhereInput!]
  """
  currency edge predicates
  """
  hasCurrency: Boolean
  hasCurrencyWith: [CurrencyWhereInput!]
  """
  packing_slip_template edge predicates
  """
  hasPackingSlipTemplate: Boolean
  hasPackingSlipTemplateWith: [DocumentWhereInput!]
  """
  connection_lookup edge predicates
  """
  hasConnectionLookup: Boolean
  hasConnectionLookupWith: [ConnectionLookupWhereInput!]
}
type Consolidation implements Node {
  id: ID!
  tenantID: ID!
  publicID: String!
  description: String
  status: ConsolidationStatus!
  createdAt: Time
  tenant: Tenant!
  pallets: [Pallet!]
  orders: [Order!]
  deliveryOption: DeliveryOption
  recipient: Address
  sender: Address
  shipment: Shipment
  cancelledShipments: [Shipment!]
}
"""
A connection to a list of items.
"""
type ConsolidationConnection {
  """
  A list of edges.
  """
  edges: [ConsolidationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ConsolidationEdge {
  """
  The item at the end of the edge.
  """
  node: Consolidation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Consolidation connections
"""
input ConsolidationOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Consolidations.
  """
  field: ConsolidationOrderField!
}
"""
Properties by which Consolidation connections can be ordered.
"""
enum ConsolidationOrderField {
  CREATED_AT
}
"""
ConsolidationStatus is enum for the field status
"""
enum ConsolidationStatus @goModel(model: "delivrio.io/go/ent/consolidation.Status") {
  Pending
  Prebooked
  Booked
  Cancelled
}
"""
ConsolidationWhereInput is used for filtering Consolidation objects.
Input was generated by ent.
"""
input ConsolidationWhereInput {
  not: ConsolidationWhereInput
  and: [ConsolidationWhereInput!]
  or: [ConsolidationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  public_id field predicates
  """
  publicID: String
  publicIDNEQ: String
  publicIDIn: [String!]
  publicIDNotIn: [String!]
  publicIDGT: String
  publicIDGTE: String
  publicIDLT: String
  publicIDLTE: String
  publicIDContains: String
  publicIDHasPrefix: String
  publicIDHasSuffix: String
  publicIDEqualFold: String
  publicIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  status field predicates
  """
  status: ConsolidationStatus
  statusNEQ: ConsolidationStatus
  statusIn: [ConsolidationStatus!]
  statusNotIn: [ConsolidationStatus!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  pallets edge predicates
  """
  hasPallets: Boolean
  hasPalletsWith: [PalletWhereInput!]
  """
  orders edge predicates
  """
  hasOrders: Boolean
  hasOrdersWith: [OrderWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  recipient edge predicates
  """
  hasRecipient: Boolean
  hasRecipientWith: [AddressWhereInput!]
  """
  sender edge predicates
  """
  hasSender: Boolean
  hasSenderWith: [AddressWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
  """
  cancelled_shipments edge predicates
  """
  hasCancelledShipments: Boolean
  hasCancelledShipmentsWith: [ShipmentWhereInput!]
}
type Contact implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  surname: String!
  email: String!
  phoneNumber: String!
  tenant: Tenant!
  billingContact: [Tenant!]
  adminContact: [Tenant!]
}
"""
A connection to a list of items.
"""
type ContactConnection {
  """
  A list of edges.
  """
  edges: [ContactEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ContactEdge {
  """
  The item at the end of the edge.
  """
  node: Contact
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ContactWhereInput is used for filtering Contact objects.
Input was generated by ent.
"""
input ContactWhereInput {
  not: ContactWhereInput
  and: [ContactWhereInput!]
  or: [ContactWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  surname field predicates
  """
  surname: String
  surnameNEQ: String
  surnameIn: [String!]
  surnameNotIn: [String!]
  surnameGT: String
  surnameGTE: String
  surnameLT: String
  surnameLTE: String
  surnameContains: String
  surnameHasPrefix: String
  surnameHasSuffix: String
  surnameEqualFold: String
  surnameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  billing_contact edge predicates
  """
  hasBillingContact: Boolean
  hasBillingContactWith: [TenantWhereInput!]
  """
  admin_contact edge predicates
  """
  hasAdminContact: Boolean
  hasAdminContactWith: [TenantWhereInput!]
}
type Country implements Node {
  id: ID!
  label: String!
  alpha2: String!
  alpha3: String!
  code: String!
  region: CountryRegion!
  deliveryRule: [DeliveryRule!]
  address: [Address!]
  addressGlobal: [AddressGlobal!]
  carrierAdditionalServicePostNordConsignee: [CarrierAdditionalServicePostNord!]
  carrierAdditionalServicePostNordConsignor: [CarrierAdditionalServicePostNord!]
  carrierAdditionalServiceGLSConsignee: [CarrierAdditionalServiceGLS!] @goField(name: "CarrierAdditionalServiceGLSConsignee", forceResolver: false)
  carrierAdditionalServiceGLSConsignor: [CarrierAdditionalServiceGLS!] @goField(name: "CarrierAdditionalServiceGLSConsignor", forceResolver: false)
  countryHarmonizedCode: [CountryHarmonizedCode!]
  inventoryItem: [InventoryItem!]
}
"""
A connection to a list of items.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CountryHarmonizedCode implements Node {
  id: ID!
  tenantID: ID!
  code: String!
  tenant: Tenant!
  inventoryItem: InventoryItem!
  country: Country!
}
"""
A connection to a list of items.
"""
type CountryHarmonizedCodeConnection {
  """
  A list of edges.
  """
  edges: [CountryHarmonizedCodeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CountryHarmonizedCodeEdge {
  """
  The item at the end of the edge.
  """
  node: CountryHarmonizedCode
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CountryHarmonizedCodeWhereInput is used for filtering CountryHarmonizedCode objects.
Input was generated by ent.
"""
input CountryHarmonizedCodeWhereInput {
  not: CountryHarmonizedCodeWhereInput
  and: [CountryHarmonizedCodeWhereInput!]
  or: [CountryHarmonizedCodeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  inventory_item edge predicates
  """
  hasInventoryItem: Boolean
  hasInventoryItemWith: [InventoryItemWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
}
"""
CountryRegion is enum for the field region
"""
enum CountryRegion @goModel(model: "delivrio.io/go/ent/country.Region") {
  Asia
  Europe
  Oceania
  Americas
  Africa
}
"""
CountryWhereInput is used for filtering Country objects.
Input was generated by ent.
"""
input CountryWhereInput {
  not: CountryWhereInput
  and: [CountryWhereInput!]
  or: [CountryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  alpha_2 field predicates
  """
  alpha2: String
  alpha2NEQ: String
  alpha2In: [String!]
  alpha2NotIn: [String!]
  alpha2GT: String
  alpha2GTE: String
  alpha2LT: String
  alpha2LTE: String
  alpha2Contains: String
  alpha2HasPrefix: String
  alpha2HasSuffix: String
  alpha2EqualFold: String
  alpha2ContainsFold: String
  """
  alpha_3 field predicates
  """
  alpha3: String
  alpha3NEQ: String
  alpha3In: [String!]
  alpha3NotIn: [String!]
  alpha3GT: String
  alpha3GTE: String
  alpha3LT: String
  alpha3LTE: String
  alpha3Contains: String
  alpha3HasPrefix: String
  alpha3HasSuffix: String
  alpha3EqualFold: String
  alpha3ContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  region field predicates
  """
  region: CountryRegion
  regionNEQ: CountryRegion
  regionIn: [CountryRegion!]
  regionNotIn: [CountryRegion!]
  """
  delivery_rule edge predicates
  """
  hasDeliveryRule: Boolean
  hasDeliveryRuleWith: [DeliveryRuleWhereInput!]
  """
  address edge predicates
  """
  hasAddress: Boolean
  hasAddressWith: [AddressWhereInput!]
  """
  address_global edge predicates
  """
  hasAddressGlobal: Boolean
  hasAddressGlobalWith: [AddressGlobalWhereInput!]
  """
  carrier_additional_service_post_nord_consignee edge predicates
  """
  hasCarrierAdditionalServicePostNordConsignee: Boolean
  hasCarrierAdditionalServicePostNordConsigneeWith: [CarrierAdditionalServicePostNordWhereInput!]
  """
  carrier_additional_service_post_nord_consignor edge predicates
  """
  hasCarrierAdditionalServicePostNordConsignor: Boolean
  hasCarrierAdditionalServicePostNordConsignorWith: [CarrierAdditionalServicePostNordWhereInput!]
  """
  carrier_additional_service_gls_consignee edge predicates
  """
  hasCarrierAdditionalServiceGLSConsignee: Boolean
  hasCarrierAdditionalServiceGLSConsigneeWith: [CarrierAdditionalServiceGLSWhereInput!]
  """
  carrier_additional_service_gls_consignor edge predicates
  """
  hasCarrierAdditionalServiceGLSConsignor: Boolean
  hasCarrierAdditionalServiceGLSConsignorWith: [CarrierAdditionalServiceGLSWhereInput!]
  """
  country_harmonized_code edge predicates
  """
  hasCountryHarmonizedCode: Boolean
  hasCountryHarmonizedCodeWith: [CountryHarmonizedCodeWhereInput!]
  """
  inventory_item edge predicates
  """
  hasInventoryItem: Boolean
  hasInventoryItemWith: [InventoryItemWhereInput!]
}
"""
CreateAddressGlobalInput is used for create AddressGlobal object.
Input was generated by ent.
"""
input CreateAddressGlobalInput {
  company: String
  addressOne: String!
  addressTwo: String
  city: String!
  state: String
  zip: String!
  latitude: Float
  longitude: Float
  parcelShopPostNordDeliveryID: ID
  parcelShopBringDeliveryID: ID
  parcelShopID: ID
  countryID: ID!
}
"""
CreateAddressInput is used for create Address object.
Input was generated by ent.
"""
input CreateAddressInput {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  """
  Some applications have both mobile and generic
  """
  phoneNumber2: String
  """
  Electronic customs
  """
  vatNumber: String
  company: String
  addressOne: String!
  addressTwo: String!
  city: String!
  state: String
  zip: String!
  recipientColliIDs: [ID!]
  recipientConsolidationID: ID
  companyAddresIDs: [ID!]
  locationIDs: [ID!]
  senderColliIDs: [ID!]
  senderConsolidationID: ID
  returnSenderColliIDs: [ID!]
  returnRecipientColliIDs: [ID!]
  countryID: ID!
}
"""
CreateCarrierAdditionalServiceBringInput is used for create CarrierAdditionalServiceBring object.
Input was generated by ent.
"""
input CreateCarrierAdditionalServiceBringInput {
  label: String!
  apiCodeBooking: String!
  carrierServiceBringID: ID
  deliveryOptionBringIDs: [ID!]
}
"""
CreateCarrierAdditionalServiceDAOInput is used for create CarrierAdditionalServiceDAO object.
Input was generated by ent.
"""
input CreateCarrierAdditionalServiceDAOInput {
  label: String!
  apiCode: String!
  carrierServiceDAOIDs: [ID!]
  deliveryOptionDAOIDs: [ID!]
}
"""
CreateCarrierAdditionalServiceDSVInput is used for create CarrierAdditionalServiceDSV object.
Input was generated by ent.
"""
input CreateCarrierAdditionalServiceDSVInput {
  label: String!
  apiCode: String!
  carrierServiceDSVIDs: [ID!]
  deliveryOptionDSVIDs: [ID!]
}
"""
CreateCarrierAdditionalServiceGLSInput is used for create CarrierAdditionalServiceGLS object.
Input was generated by ent.
"""
input CreateCarrierAdditionalServiceGLSInput {
  label: String!
  mandatory: Boolean!
  """
  When false, only edge countries will validate on this consignor service
  """
  allCountriesConsignor: Boolean
  """
  When false, only edge countries will validate on this consignee service
  """
  allCountriesConsignee: Boolean
  internalID: String!
  carrierServiceGLSID: ID
  deliveryOptionGlIDs: [ID!]
  countriesConsigneeIDs: [ID!]
  countriesConsignorIDs: [ID!]
}
"""
CreateCarrierBringInput is used for create CarrierBring object.
Input was generated by ent.
"""
input CreateCarrierBringInput {
  apiKey: String
  customerNumber: String
  test: Boolean
  carrierID: ID!
}
"""
CreateCarrierDAOInput is used for create CarrierDAO object.
Input was generated by ent.
"""
input CreateCarrierDAOInput {
  customerID: String
  apiKey: String
  test: Boolean
  carrierID: ID!
}
"""
CreateCarrierDFInput is used for create CarrierDF object.
Input was generated by ent.
"""
input CreateCarrierDFInput {
  customerID: String!
  agreementNumber: String!
  whoPays: CarrierDFWhoPays
  test: Boolean
  carrierID: ID!
}
"""
CreateCarrierDSVInput is used for create CarrierDSV object.
Input was generated by ent.
"""
input CreateCarrierDSVInput {
  carrierID: ID!
}
"""
CreateCarrierEasyPostInput is used for create CarrierEasyPost object.
Input was generated by ent.
"""
input CreateCarrierEasyPostInput {
  apiKey: String!
  test: Boolean
  """
  When > 1, then we use rate, then buy. =1 one-call buy. Former not implemented in first round.
  """
  carrierAccounts: [String!]
  carrierID: ID!
}
"""
CreateCarrierGLSInput is used for create CarrierGLS object.
Input was generated by ent.
"""
input CreateCarrierGLSInput {
  contactID: String
  glsUsername: String
  glsPassword: String
  customerID: String
  glsCountryCode: String
  syncShipmentCancellation: Boolean
  printErrorOnLabel: Boolean
  carrierID: ID!
}
"""
CreateCarrierPostNordInput is used for create CarrierPostNord object.
Input was generated by ent.
"""
input CreateCarrierPostNordInput {
  """
  Default empty to allow creation from dialog with followup editing
  """
  customerNumber: String
  carrierID: ID!
}
"""
CreateCarrierUSPSInput is used for create CarrierUSPS object.
Input was generated by ent.
"""
input CreateCarrierUSPSInput {
  isTestAPI: Boolean
  consumerKey: String
  consumerSecret: String
  mid: String
  manifestMid: String
  crid: String
  epsAccountNumber: String
  carrierID: ID!
}
"""
CreateColliInput is used for create Colli object.
Input was generated by ent.
"""
input CreateColliInput {
  """
  Code128 type C compatible for faster reads
  """
  internalBarcode: Int
  slipPrintStatus: ColliSlipPrintStatus
  deliveryOptionID: ID
  documentFileIDs: [ID!]
  shipmentParcelID: ID
  cancelledShipmentParcelIDs: [ID!]
  orderID: ID!
  packagingID: ID
  printJobIDs: [ID!]
}
"""
CreateConnectOptionCarrierInput is used for create ConnectOptionCarrier object.
Input was generated by ent.
"""
input CreateConnectOptionCarrierInput {
  name: String!
  tenantIDs: [ID!]
}
"""
CreateConnectOptionPlatformInput is used for create ConnectOptionPlatform object.
Input was generated by ent.
"""
input CreateConnectOptionPlatformInput {
  name: String!
  tenantIDs: [ID!]
}
"""
CreateConnectionInput is used for create Connection object.
Input was generated by ent.
"""
input CreateConnectionInput {
  name: String!
  syncOrders: Boolean
  syncProducts: Boolean
  fulfillAutomatically: Boolean
  dispatchAutomatically: Boolean
  convertCurrency: Boolean
  autoPrintParcelSlip: Boolean
  connectionShopifyID: ID
  orderIDs: [ID!]
  senderLocationID: ID!
  pickupLocationID: ID!
  returnLocationID: ID!
  sellerLocationID: ID!
  deliveryOptionIDs: [ID!]
  defaultDeliveryOptionID: ID
  returnPortalID: ID
  hypothesisTestIDs: [ID!]
  notificationIDs: [ID!]
  currencyID: ID!
  packingSlipTemplateID: ID
  connectionLookupIDs: [ID!]
}
"""
CreateConnectionShopifyInput is used for create ConnectionShopify object.
Input was generated by ent.
"""
input CreateConnectionShopifyInput {
  """
  Since certain plans don't allow for external rates
  """
  rateIntegration: Boolean
  storeURL: String
  apiKey: String
  syncFrom: Time
  """
  When set, only orders with these tags will be synchronized. Supports a 
  """
  filterTags: [String!]
}
"""
CreateConsolidationInput is used for create Consolidation object.
Input was generated by ent.
"""
input CreateConsolidationInput {
  publicID: String!
  description: String
  status: ConsolidationStatus
  palletIDs: [ID!]
  orderIDs: [ID!]
  deliveryOptionID: ID
  shipmentID: ID
  cancelledShipmentIDs: [ID!]
}
"""
CreateContactInput is used for create Contact object.
Input was generated by ent.
"""
input CreateContactInput {
  name: String!
  surname: String!
  email: String!
  phoneNumber: String!
  billingContactIDs: [ID!]
  adminContactIDs: [ID!]
}
"""
CreateCountryHarmonizedCodeInput is used for create CountryHarmonizedCode object.
Input was generated by ent.
"""
input CreateCountryHarmonizedCodeInput {
  code: String!
  inventoryItemID: ID!
  countryID: ID!
}
"""
CreateDeliveryOptionBringInput is used for create DeliveryOptionBring object.
Input was generated by ent.
"""
input CreateDeliveryOptionBringInput {
  electronicCustoms: Boolean
}
"""
CreateDeliveryOptionEasyPostInput is used for create DeliveryOptionEasyPost object.
Input was generated by ent.
"""
input CreateDeliveryOptionEasyPostInput {
  deliveryOptionID: ID!
  carrierAddServEasyPostIDs: [ID!]
}
"""
CreateDeliveryOptionInput is used for create DeliveryOption object.
Input was generated by ent.
"""
input CreateDeliveryOptionInput {
  archivedAt: Time
  name: String!
  sortOrder: Int!
  clickOptionDisplayCount: Int
  description: String
  clickCollect: Boolean
  overrideSenderAddress: Boolean
  overrideReturnAddress: Boolean
  hideDeliveryOption: Boolean
  deliveryEstimateFrom: Int
  deliveryEstimateTo: Int
  webshipperIntegration: Boolean
  webshipperID: Int
  shipmondoIntegration: Boolean
  """
  May contain placeholders
  """
  shipmondoDeliveryOption: String
  """
  Since some services are customs optional
  """
  customsEnabled: Boolean
  """
  Who is responsible for signing of custom docs
  """
  customsSigner: String
  """
  Toggle to hide this rate if a company field is not provided.
  """
  hideIfCompanyEmpty: Boolean
  carrierID: ID!
  deliveryRuleIDs: [ID!]
  deliveryOptionDAOID: ID
  deliveryOptionDFID: ID
  deliveryOptionDSVID: ID
  deliveryOptionEasyPostID: ID
  deliveryOptionGLSID: ID
  deliveryOptionPostNordID: ID
  deliveryOptionUSPSID: ID
  deliveryOptionBringID: ID
  returnPortalIDs: [ID!]
  colliIDs: [ID!]
  returnColliIDs: [ID!]
  carrierServiceID: ID!
  connectionID: ID!
  connectionDefaultID: ID
  hypothesisTestDeliveryOptionGroupOneIDs: [ID!]
  hypothesisTestDeliveryOptionGroupTwoIDs: [ID!]
  hypothesisTestDeliveryOptionLookupIDs: [ID!]
  clickCollectLocationIDs: [ID!]
  emailClickCollectAtStoreID: ID
  consolidationIDs: [ID!]
  defaultPackagingID: ID
}
"""
CreateDeliveryOptionPostNordInput is used for create DeliveryOptionPostNord object.
Input was generated by ent.
"""
input CreateDeliveryOptionPostNordInput {
  formatZpl: Boolean
  deliveryOptionID: ID!
}
"""
CreateDeliveryOptionUSPSInput is used for create DeliveryOptionUSPS object.
Input was generated by ent.
"""
input CreateDeliveryOptionUSPSInput {
  formatZpl: Boolean
}
"""
CreateDeliveryRuleConstraintGroupInput is used for create DeliveryRuleConstraintGroup object.
Input was generated by ent.
"""
input CreateDeliveryRuleConstraintGroupInput {
  constraintLogic: DeliveryRuleConstraintGroupConstraintLogic
  deliveryRuleConstraintIDs: [ID!]
  deliveryRuleID: ID!
}
"""
CreateDeliveryRuleConstraintInput is used for create DeliveryRuleConstraint object.
Input was generated by ent.
"""
input CreateDeliveryRuleConstraintInput {
  propertyType: DeliveryRuleConstraintPropertyType!
  comparison: DeliveryRuleConstraintComparison!
  selectedValue: DeliveryRuleConstraintSelectedValueInput!
}
"""
CreateDeliveryRuleInput is used for create DeliveryRule object.
Input was generated by ent.
"""
input CreateDeliveryRuleInput {
  name: String!
  price: Float
  deliveryRuleConstraintGroupIDs: [ID!]
  deliveryOptionID: ID
  countryIDs: [ID!]
  currencyID: ID
}
"""
CreateDocumentInput is used for create Document object.
Input was generated by ent.
"""
input CreateDocumentInput {
  name: String!
  htmlTemplate: String
  htmlHeader: String
  htmlFooter: String
  """
  Facilitates printing by saving the latest version of this document
  """
  lastBase64Pdf: String
  mergeType: DocumentMergeType
  paperSize: DocumentPaperSize
  startAt: Time
  endAt: Time
  carrierBrandID: ID
  connectionPackingSlipIDs: [ID!]
}
"""
CreateEmailTemplateInput is used for create EmailTemplate object.
Input was generated by ent.
"""
input CreateEmailTemplateInput {
  name: String!
  subject: String
  htmlTemplate: String
  mergeType: EmailTemplateMergeType
  returnPortalConfirmationLabelIDs: [ID!]
  returnPortalConfirmationQrCodeIDs: [ID!]
  returnPortalReceivedIDs: [ID!]
  returnPortalAcceptedIDs: [ID!]
  deliveryOptionClickCollectAtStoreIDs: [ID!]
  notificationIDs: [ID!]
}
"""
CreateHypothesisTestDeliveryOptionInput is used for create HypothesisTestDeliveryOption object.
Input was generated by ent.
"""
input CreateHypothesisTestDeliveryOptionInput {
  randomizeWithinGroupSort: Boolean
  byIntervalRotation: Boolean
  rotationIntervalHours: Int
  byOrder: Boolean
  hypothesisTestID: ID!
  hypothesisTestDeliveryOptionRequestIDs: [ID!]
  deliveryOptionGroupOneIDs: [ID!]
  deliveryOptionGroupTwoIDs: [ID!]
}
"""
CreateHypothesisTestDeliveryOptionLookupInput is used for create HypothesisTestDeliveryOptionLookup object.
Input was generated by ent.
"""
input CreateHypothesisTestDeliveryOptionLookupInput {
  deliveryOptionID: ID!
  hypothesisTestDeliveryOptionRequestID: ID!
}
"""
CreateHypothesisTestDeliveryOptionRequestInput is used for create HypothesisTestDeliveryOptionRequest object.
Input was generated by ent.
"""
input CreateHypothesisTestDeliveryOptionRequestInput {
  orderHash: String!
  shippingAddressHash: String!
  isControlGroup: Boolean!
  requestCount: Int!
  hypothesisTestDeliveryOptionID: ID!
  orderID: ID
  hypothesisTestDeliveryOptionLookupIDs: [ID!]
}
"""
CreateHypothesisTestInput is used for create HypothesisTest object.
Input was generated by ent.
"""
input CreateHypothesisTestInput {
  name: String!
  active: Boolean
  hypothesisTestDeliveryOptionID: ID
  connectionID: ID!
}
"""
CreateInventoryItemInput is used for create InventoryItem object.
Input was generated by ent.
"""
input CreateInventoryItemInput {
  """
  Used when country specific code not available
  """
  code: String
  """
  Duplicated to match Shopify InventoryItem/ProductVariant
  """
  sku: String
  countryHarmonizedCodeIDs: [ID!]
  countryOfOriginID: ID
  productVariantID: ID!
}
"""
CreateLocationInput is used for create Location object.
Input was generated by ent.
"""
input CreateLocationInput {
  """
  Location name, not used in the address
  """
  name: String!
  locationTagIDs: [ID!]!
  senderConnectionIDs: [ID!]
  pickupConnectionIDs: [ID!]
  returnConnectionIDs: [ID!]
  sellerConnectionIDs: [ID!]
  returnPortalIDs: [ID!]
  deliveryOptionIDs: [ID!]
  colliIDs: [ID!]
}
"""
CreateNotificationInput is used for create Notification object.
Input was generated by ent.
"""
input CreateNotificationInput {
  name: String!
  active: Boolean
  connectionID: ID!
  emailTemplateID: ID!
}
"""
CreateOrderInput is used for create Order object.
Input was generated by ent.
"""
input CreateOrderInput {
  orderPublicID: String!
  commentInternal: String
  commentExternal: String
  connectionID: ID!
  returnColliIDs: [ID!]
  hypothesisTestDeliveryOptionRequestID: ID
  palletID: ID
  consolidationID: ID
}
"""
CreateOrderSenderInput is used for create OrderSender object.
Input was generated by ent.
"""
input CreateOrderSenderInput {
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  vatNumber: String!
}
"""
CreatePackagingDFInput is used for create PackagingDF object.
Input was generated by ent.
"""
input CreatePackagingDFInput {
  apiType: PackagingDFAPIType!
  maxWeight: Float
  minWeight: Float
  """
  Some carriers this is not boolean, so this is not a general toggle
  """
  stackable: Boolean
}
"""
CreatePackagingInput is used for create Packaging object.
Input was generated by ent.
"""
input CreatePackagingInput {
  archivedAt: Time
  name: String!
  heightCm: Int!
  widthCm: Int!
  lengthCm: Int!
  shipmentParcelIDs: [ID!]
  palletIDs: [ID!]
  colliIDs: [ID!]
  returnColliIDs: [ID!]
  packagingDFID: ID
  packagingUSPSID: ID
  carrierBrandID: ID
  deliveryOptionIDs: [ID!]
}
"""
CreatePackagingUSPSInput is used for create PackagingUSPS object.
Input was generated by ent.
"""
input CreatePackagingUSPSInput {
  packagingUSPSRateIndicatorID: ID!
  packagingUSPSProcessingCategoryID: ID!
}
"""
CreatePackagingUSPSProcessingCategoryInput is used for create PackagingUSPSProcessingCategory object.
Input was generated by ent.
"""
input CreatePackagingUSPSProcessingCategoryInput {
  name: String!
  processingCategory: PackagingUSPSProcessingCategoryProcessingCategory!
}
"""
CreatePalletInput is used for create Pallet object.
Input was generated by ent.
"""
input CreatePalletInput {
  publicID: String!
  description: String!
  orderIDs: [ID!]
  packagingID: ID
  consolidationID: ID!
  shipmentPalletID: ID
  cancelledShipmentPalletIDs: [ID!]
}
"""
CreateParcelShopBringInput is used for create ParcelShopBring object.
Input was generated by ent.
"""
input CreateParcelShopBringInput {
  """
  https://developer.bring.com/api/pickup-point/#pickup-point-types
  """
  pointType: ParcelShopBringPointType!
  bringID: String!
  parcelShopID: ID!
  addressDeliveryID: ID!
}
"""
CreateParcelShopDAOInput is used for create ParcelShopDAO object.
Input was generated by ent.
"""
input CreateParcelShopDAOInput {
  shopID: String!
  parcelShopID: ID!
}
"""
CreateParcelShopGLSInput is used for create ParcelShopGLS object.
Input was generated by ent.
"""
input CreateParcelShopGLSInput {
  glsParcelShopID: String!
  """
  Only available in Group API
  """
  partnerID: String
  """
  Only available in Group API
  """
  type: String
  parcelShopID: ID!
}
"""
CreateParcelShopInput is used for create ParcelShop object.
Input was generated by ent.
"""
input CreateParcelShopInput {
  name: String!
  parcelShopDAOID: ID
  parcelShopPostNordID: ID
  parcelShopGLSID: ID
  parcelShopBringID: ID
  carrierBrandID: ID!
  addressID: ID!
  colliIDs: [ID!]
  businessHoursPeriodIDs: [ID!]
}
"""
CreateParcelShopPostNordInput is used for create ParcelShopPostNord object.
Input was generated by ent.
"""
input CreateParcelShopPostNordInput {
  servicePointID: String!
  pudoid: String!
  """
  No idea what the options are aside from the default: 156. Maybe box, shop, etc??
  """
  typeID: String!
  parcelShopID: ID!
  addressDeliveryID: ID!
}
"""
CreatePrinterInput is used for create Printer object.
Input was generated by ent.
"""
input CreatePrinterInput {
  name: String!
  labelZpl: Boolean
  labelPdf: Boolean
  labelPng: Boolean
  document: Boolean
  rotate180: Boolean
  useShell: Boolean
  printSize: PrinterPrintSize
  workstationID: ID!
  printJobIDs: [ID!]
}
"""
CreateProductInput is used for create Product object.
Input was generated by ent.
"""
input CreateProductInput {
  title: String!
  bodyHTML: String
  status: ProductStatus
  productTagIDs: [ID!]
  productVariantIDs: [ID!]
  productImageIDs: [ID!]
}
"""
CreateProductTagInput is used for create ProductTag object.
Input was generated by ent.
"""
input CreateProductTagInput {
  name: String!
  createdAt: Time
  productIDs: [ID!]
}
"""
CreateProductVariantInput is used for create ProductVariant object.
Input was generated by ent.
"""
input CreateProductVariantInput {
  archived: Boolean
  description: String
  eanNumber: String
  weightG: Int
  dimensionLength: Int
  dimensionWidth: Int
  dimensionHeight: Int
  orderLineIDs: [ID!]
  productImageIDs: [ID!]
  inventoryItemID: ID
}
"""
CreateReturnColliInput is used for create ReturnColli object.
Input was generated by ent.
"""
input CreateReturnColliInput {
  expectedAt: Time
  labelPdf: String
  labelPng: String
  qrCodePng: String
  comment: String
  status: ReturnColliStatus
  """
  Timestamp of email successfully sent after status changed to received
  """
  emailReceived: Time
  """
  Timestamp of email successfully sent after status changed to accepted
  """
  emailAccepted: Time
  """
  Timestamp of email successfully sent after status changed to pending
  """
  emailConfirmationLabel: Time
  """
  Timestamp of email successfully sent after status changed to pending
  """
  emailConfirmationQrCode: Time
  orderID: ID!
  deliveryOptionID: ID
  returnPortalID: ID!
  packagingID: ID
  returnOrderLineIDs: [ID!]
}
"""
CreateReturnOrderLineInput is used for create ReturnOrderLine object.
Input was generated by ent.
"""
input CreateReturnOrderLineInput {
  units: Int!
  returnColliID: ID!
  orderLineID: ID!
  returnPortalClaimID: ID!
}
"""
CreateReturnPortalClaimInput is used for create ReturnPortalClaim object.
Input was generated by ent.
"""
input CreateReturnPortalClaimInput {
  name: String!
  description: String!
  restockable: Boolean!
  returnPortalID: ID!
  returnLocationID: ID
  returnOrderLineIDs: [ID!]
}
"""
CreateReturnPortalInput is used for create ReturnPortal object.
Input was generated by ent.
"""
input CreateReturnPortalInput {
  name: String!
  returnOpenHours: Int
  automaticallyAccept: Boolean
  returnPortalClaimIDs: [ID!]
  returnLocationIDs: [ID!]
  deliveryOptionIDs: [ID!]
  connectionID: ID
  emailConfirmationLabelID: ID
  emailConfirmationQrCodeID: ID
  emailReceivedID: ID
  emailAcceptedID: ID
  returnColliIDs: [ID!]
}
"""
CreateSeatGroupAccessRightInput is used for create SeatGroupAccessRight object.
Input was generated by ent.
"""
input CreateSeatGroupAccessRightInput {
  level: SeatGroupAccessRightLevel
  accessRightID: ID!
  seatGroupID: ID!
}
"""
CreateSeatGroupInput is used for create SeatGroup object.
Input was generated by ent.
"""
input CreateSeatGroupInput {
  name: String!
  createdAt: Time
  userIDs: [ID!]
  assignedAccessRightIDs: [ID!]
}
"""
CreateShipmentBringInput is used for create ShipmentBring object.
Input was generated by ent.
"""
input CreateShipmentBringInput {
  consignmentNumber: String!
  shipmentID: ID!
}
"""
CreateShipmentDAOInput is used for create ShipmentDAO object.
Input was generated by ent.
"""
input CreateShipmentDAOInput {
  barcodeID: String!
  shipmentID: ID!
}
"""
CreateShipmentDSVInput is used for create ShipmentDSV object.
Input was generated by ent.
"""
input CreateShipmentDSVInput {
  barcodeID: String!
  shipmentID: ID!
}
"""
CreateShipmentInput is used for create Shipment object.
Input was generated by ent.
"""
input CreateShipmentInput {
  shipmentPublicID: String!
  status: ShipmentStatus!
  carrierID: ID!
  shipmentHistoryIDs: [ID!]
  shipmentBringID: ID
  shipmentDAOID: ID
  shipmentDFID: ID
  shipmentDSVID: ID
  shipmentEasyPostID: ID
  shipmentPostNordID: ID
  shipmentGLSID: ID
  shipmentUSPSID: ID
  consolidationID: ID
  oldConsolidationIDs: [ID!]
  shipmentParcelIDs: [ID!]
  shipmentPalletIDs: [ID!]
}
"""
CreateShipmentPalletInput is used for create ShipmentPallet object.
Input was generated by ent.
"""
input CreateShipmentPalletInput {
  barcode: String!
  colliNumber: String!
  carrierID: String!
  labelPdf: String
  labelZpl: String
  status: ShipmentPalletStatus
  palletID: ID
  oldPalletIDs: [ID!]
  shipmentID: ID!
}
"""
CreateShipmentParcelInput is used for create ShipmentParcel object.
Input was generated by ent.
"""
input CreateShipmentParcelInput {
  itemID: String
  status: ShipmentParcelStatus
  ccPickupSignatureUrls: [String!]
  shipmentID: ID!
  colliID: ID
  oldColliIDs: [ID!]
  workspaceRecentScanIDs: [ID!]
  packagingID: ID
  printJobIDs: [ID!]
  documentFileID: ID
}
"""
CreateShipmentPostNordInput is used for create ShipmentPostNord object.
Input was generated by ent.
"""
input CreateShipmentPostNordInput {
  """
  Multiple labels. May contain unrelated shipments.
  """
  bookingID: String!
  """
  Individual label. Can be grouped to same address. Probably should not be on this ent?
  """
  itemID: String!
  """
  Shipment can contain multiple parcels to same address.
  """
  shipmentReferenceNo: String!
  shipmentID: ID!
}
"""
CreateShipmentUSPSInput is used for create ShipmentUSPS object.
Input was generated by ent.
"""
input CreateShipmentUSPSInput {
  trackingNumber: String
  postage: Float
  scheduledDeliveryDate: Time
  shipmentID: ID!
}
"""
CreateSignupOptionsInput is used for create SignupOptions object.
Input was generated by ent.
"""
input CreateSignupOptionsInput {
  betterDeliveryOptions: Boolean!
  improvePickPack: Boolean!
  shippingLabel: Boolean!
  customDocs: Boolean!
  reducedCosts: Boolean!
  easyReturns: Boolean!
  clickCollect: Boolean!
  numShipments: Int!
  usersID: ID!
}
"""
CreateTenantInput is used for create Tenant object.
Input was generated by ent.
"""
input CreateTenantInput {
  name: String!
  vatNumber: String
  invoiceReference: String
  connectOptionCarrierIDs: [ID!]
  connectOptionPlatformIDs: [ID!]
  companyAddressID: ID
  billingContactID: ID
  adminContactID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String
  surname: String
  phoneNumber: String
  email: String!
  """
  Field is just for front end convenience. Password gets stored as hash.
  """
  password: String
  marketingConsent: Boolean
  createdAt: Time
  archivedAt: Time
  """
  When fulfilling, the next carrier pickup date for the package can be selected
  """
  pickupDay: UserPickupDay
  """
  So we can ask the user to confirm their pickup day after X hours
  """
  pickupDayLastChanged: Time
  otkRequestIDs: [ID!]
  signupOptionsID: ID
  languageID: ID
  changeHistoryIDs: [ID!]
  planHistoryUserIDs: [ID!]
  apiTokenIDs: [ID!]
  selectedWorkstationID: ID
  seatGroupID: ID
  workspaceRecentScanIDs: [ID!]
}
"""
CreateUserSeatInput is used for create UserSeat object.
Input was generated by ent.
"""
input CreateUserSeatInput {
  name: String
  surname: String
  email: String!
  createdAt: Time
}
"""
CreateWorkstationInput is used for create Workstation object.
Input was generated by ent.
"""
input CreateWorkstationInput {
  archivedAt: Time
  name: String!
  deviceType: WorkstationDeviceType
  status: WorkstationStatus
  autoPrintReceiver: Boolean
  printerIDs: [ID!]
  userID: ID
  selectedUserID: ID
}
type Currency implements Node {
  id: ID!
  display: String!
  currencyCode: CurrencyCurrencyCode!
  orderLine: [OrderLine!]
  deliveryRule: [DeliveryRule!]
}
"""
A connection to a list of items.
"""
type CurrencyConnection {
  """
  A list of edges.
  """
  edges: [CurrencyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
CurrencyCurrencyCode is enum for the field currency_code
"""
enum CurrencyCurrencyCode @goModel(model: "delivrio.io/go/ent/currency.CurrencyCode") {
  DKK
  EUR
  SEK
  USD
}
"""
An edge in a connection.
"""
type CurrencyEdge {
  """
  The item at the end of the edge.
  """
  node: Currency
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
CurrencyWhereInput is used for filtering Currency objects.
Input was generated by ent.
"""
input CurrencyWhereInput {
  not: CurrencyWhereInput
  and: [CurrencyWhereInput!]
  or: [CurrencyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  display field predicates
  """
  display: String
  displayNEQ: String
  displayIn: [String!]
  displayNotIn: [String!]
  displayGT: String
  displayGTE: String
  displayLT: String
  displayLTE: String
  displayContains: String
  displayHasPrefix: String
  displayHasSuffix: String
  displayEqualFold: String
  displayContainsFold: String
  """
  currency_code field predicates
  """
  currencyCode: CurrencyCurrencyCode
  currencyCodeNEQ: CurrencyCurrencyCode
  currencyCodeIn: [CurrencyCurrencyCode!]
  currencyCodeNotIn: [CurrencyCurrencyCode!]
  """
  order_line edge predicates
  """
  hasOrderLine: Boolean
  hasOrderLineWith: [OrderLineWhereInput!]
  """
  delivery_rule edge predicates
  """
  hasDeliveryRule: Boolean
  hasDeliveryRuleWith: [DeliveryRuleWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type DeliveryOption implements Node {
  id: ID!
  tenantID: ID!
  archivedAt: Time
  name: String!
  sortOrder: Int!
  clickOptionDisplayCount: Int
  description: String
  clickCollect: Boolean
  overrideSenderAddress: Boolean
  overrideReturnAddress: Boolean
  hideDeliveryOption: Boolean
  deliveryEstimateFrom: Int
  deliveryEstimateTo: Int
  webshipperIntegration: Boolean!
  webshipperID: Int
  shipmondoIntegration: Boolean!
  """
  May contain placeholders
  """
  shipmondoDeliveryOption: String
  """
  Since some services are customs optional
  """
  customsEnabled: Boolean!
  """
  Who is responsible for signing of custom docs
  """
  customsSigner: String
  """
  Toggle to hide this rate if a company field is not provided.
  """
  hideIfCompanyEmpty: Boolean!
  tenant: Tenant!
  carrier: Carrier!
  deliveryRule: [DeliveryRule!]
  deliveryOptionDAO: DeliveryOptionDAO
  deliveryOptionDF: DeliveryOptionDF
  deliveryOptionDSV: DeliveryOptionDSV
  deliveryOptionEasyPost: DeliveryOptionEasyPost
  deliveryOptionGLS: DeliveryOptionGLS
  deliveryOptionPostNord: DeliveryOptionPostNord
  deliveryOptionUSPS: DeliveryOptionUSPS
  deliveryOptionBring: DeliveryOptionBring
  returnPortals: [ReturnPortal!]
  colli: [Colli!]
  returnColli: [ReturnColli!]
  carrierService: CarrierService!
  connection: Connection!
  """
  The default delivery option for the connection. Unique since DO is already pinned to a single connection.
  """
  connectionDefault: Connection
  hypothesisTestDeliveryOptionGroupOne: [HypothesisTestDeliveryOption!]
  hypothesisTestDeliveryOptionGroupTwo: [HypothesisTestDeliveryOption!]
  hypothesisTestDeliveryOptionLookup: [HypothesisTestDeliveryOptionLookup!]
  clickCollectLocation: [Location!]
  emailClickCollectAtStore: EmailTemplate
  consolidation: [Consolidation!]
  defaultPackaging: Packaging
}
type DeliveryOptionBring implements Node {
  id: ID!
  tenantID: ID!
  electronicCustoms: Boolean!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  carrierAdditionalServiceBring: [CarrierAdditionalServiceBring!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionBringConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionBringEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionBringEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionBring
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionBringWhereInput is used for filtering DeliveryOptionBring objects.
Input was generated by ent.
"""
input DeliveryOptionBringWhereInput {
  not: DeliveryOptionBringWhereInput
  and: [DeliveryOptionBringWhereInput!]
  or: [DeliveryOptionBringWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  electronic_customs field predicates
  """
  electronicCustoms: Boolean
  electronicCustomsNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_additional_service_bring edge predicates
  """
  hasCarrierAdditionalServiceBring: Boolean
  hasCarrierAdditionalServiceBringWith: [CarrierAdditionalServiceBringWhereInput!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type DeliveryOptionDAO implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  carrierAdditionalServiceDAO: [CarrierAdditionalServiceDAO!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionDAOConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionDAOEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionDAOEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionDAO
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionDAOWhereInput is used for filtering DeliveryOptionDAO objects.
Input was generated by ent.
"""
input DeliveryOptionDAOWhereInput {
  not: DeliveryOptionDAOWhereInput
  and: [DeliveryOptionDAOWhereInput!]
  or: [DeliveryOptionDAOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_additional_service_dao edge predicates
  """
  hasCarrierAdditionalServiceDAO: Boolean
  hasCarrierAdditionalServiceDAOWith: [CarrierAdditionalServiceDAOWhereInput!]
}
type DeliveryOptionDF implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  carrierAdditionalServiceDF: [CarrierAdditionalServiceDF!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionDFConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionDFEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionDFEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionDF
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionDFWhereInput is used for filtering DeliveryOptionDF objects.
Input was generated by ent.
"""
input DeliveryOptionDFWhereInput {
  not: DeliveryOptionDFWhereInput
  and: [DeliveryOptionDFWhereInput!]
  or: [DeliveryOptionDFWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_additional_service_df edge predicates
  """
  hasCarrierAdditionalServiceDF: Boolean
  hasCarrierAdditionalServiceDFWith: [CarrierAdditionalServiceDFWhereInput!]
}
type DeliveryOptionDSV implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  carrierAdditionalServiceDSV: [CarrierAdditionalServiceDSV!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionDSVConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionDSVEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionDSVEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionDSV
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionDSVWhereInput is used for filtering DeliveryOptionDSV objects.
Input was generated by ent.
"""
input DeliveryOptionDSVWhereInput {
  not: DeliveryOptionDSVWhereInput
  and: [DeliveryOptionDSVWhereInput!]
  or: [DeliveryOptionDSVWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_additional_service_dsv edge predicates
  """
  hasCarrierAdditionalServiceDSV: Boolean
  hasCarrierAdditionalServiceDSVWith: [CarrierAdditionalServiceDSVWhereInput!]
}
type DeliveryOptionEasyPost implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  carrierAddServEasyPost: [CarrierAdditionalServiceEasyPost!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionEasyPostConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionEasyPostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionEasyPostEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionEasyPost
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionEasyPostWhereInput is used for filtering DeliveryOptionEasyPost objects.
Input was generated by ent.
"""
input DeliveryOptionEasyPostWhereInput {
  not: DeliveryOptionEasyPostWhereInput
  and: [DeliveryOptionEasyPostWhereInput!]
  or: [DeliveryOptionEasyPostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_add_serv_easy_post edge predicates
  """
  hasCarrierAddServEasyPost: Boolean
  hasCarrierAddServEasyPostWith: [CarrierAdditionalServiceEasyPostWhereInput!]
}
"""
An edge in a connection.
"""
type DeliveryOptionEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOption
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type DeliveryOptionGLS implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  """
  The lookup is done via the internalID, so edge input not included here. Consider refactoring to a generic entity on top of the GLS entity.
  """
  carrierAdditionalServiceGLS: [CarrierAdditionalServiceGLS!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionGLSConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionGLSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionGLSEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionGLS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionGLSWhereInput is used for filtering DeliveryOptionGLS objects.
Input was generated by ent.
"""
input DeliveryOptionGLSWhereInput {
  not: DeliveryOptionGLSWhereInput
  and: [DeliveryOptionGLSWhereInput!]
  or: [DeliveryOptionGLSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_additional_service_gls edge predicates
  """
  hasCarrierAdditionalServiceGLS: Boolean
  hasCarrierAdditionalServiceGLSWith: [CarrierAdditionalServiceGLSWhereInput!]
}
type DeliveryOptionPostNord implements Node {
  id: ID!
  tenantID: ID!
  formatZpl: Boolean!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  """
  The lookup is done via the internalID, so edge input not included here. Consider refactoring to a generic entity on top of the PN entity.
  """
  carrierAddServPostNord: [CarrierAdditionalServicePostNord!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionPostNordConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionPostNordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionPostNordEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionPostNord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionPostNordWhereInput is used for filtering DeliveryOptionPostNord objects.
Input was generated by ent.
"""
input DeliveryOptionPostNordWhereInput {
  not: DeliveryOptionPostNordWhereInput
  and: [DeliveryOptionPostNordWhereInput!]
  or: [DeliveryOptionPostNordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  format_zpl field predicates
  """
  formatZpl: Boolean
  formatZplNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_add_serv_post_nord edge predicates
  """
  hasCarrierAddServPostNord: Boolean
  hasCarrierAddServPostNordWith: [CarrierAdditionalServicePostNordWhereInput!]
}
type DeliveryOptionUSPS implements Node {
  id: ID!
  tenantID: ID!
  formatZpl: Boolean!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  carrierAdditionalServiceUSPS: [CarrierAdditionalServiceUSPS!]
}
"""
A connection to a list of items.
"""
type DeliveryOptionUSPSConnection {
  """
  A list of edges.
  """
  edges: [DeliveryOptionUSPSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryOptionUSPSEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryOptionUSPS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryOptionUSPSWhereInput is used for filtering DeliveryOptionUSPS objects.
Input was generated by ent.
"""
input DeliveryOptionUSPSWhereInput {
  not: DeliveryOptionUSPSWhereInput
  and: [DeliveryOptionUSPSWhereInput!]
  or: [DeliveryOptionUSPSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  format_zpl field predicates
  """
  formatZpl: Boolean
  formatZplNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  carrier_additional_service_usps edge predicates
  """
  hasCarrierAdditionalServiceUSPS: Boolean
  hasCarrierAdditionalServiceUSPSWith: [CarrierAdditionalServiceUSPSWhereInput!]
}
"""
DeliveryOptionWhereInput is used for filtering DeliveryOption objects.
Input was generated by ent.
"""
input DeliveryOptionWhereInput {
  not: DeliveryOptionWhereInput
  and: [DeliveryOptionWhereInput!]
  or: [DeliveryOptionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  archived_at field predicates
  """
  archivedAt: Time
  archivedAtNEQ: Time
  archivedAtIn: [Time!]
  archivedAtNotIn: [Time!]
  archivedAtGT: Time
  archivedAtGTE: Time
  archivedAtLT: Time
  archivedAtLTE: Time
  archivedAtIsNil: Boolean
  archivedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  sort_order field predicates
  """
  sortOrder: Int
  sortOrderNEQ: Int
  sortOrderIn: [Int!]
  sortOrderNotIn: [Int!]
  sortOrderGT: Int
  sortOrderGTE: Int
  sortOrderLT: Int
  sortOrderLTE: Int
  """
  click_option_display_count field predicates
  """
  clickOptionDisplayCount: Int
  clickOptionDisplayCountNEQ: Int
  clickOptionDisplayCountIn: [Int!]
  clickOptionDisplayCountNotIn: [Int!]
  clickOptionDisplayCountGT: Int
  clickOptionDisplayCountGTE: Int
  clickOptionDisplayCountLT: Int
  clickOptionDisplayCountLTE: Int
  clickOptionDisplayCountIsNil: Boolean
  clickOptionDisplayCountNotNil: Boolean
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  click_collect field predicates
  """
  clickCollect: Boolean
  clickCollectNEQ: Boolean
  clickCollectIsNil: Boolean
  clickCollectNotNil: Boolean
  """
  override_sender_address field predicates
  """
  overrideSenderAddress: Boolean
  overrideSenderAddressNEQ: Boolean
  overrideSenderAddressIsNil: Boolean
  overrideSenderAddressNotNil: Boolean
  """
  override_return_address field predicates
  """
  overrideReturnAddress: Boolean
  overrideReturnAddressNEQ: Boolean
  overrideReturnAddressIsNil: Boolean
  overrideReturnAddressNotNil: Boolean
  """
  hide_delivery_option field predicates
  """
  hideDeliveryOption: Boolean
  hideDeliveryOptionNEQ: Boolean
  hideDeliveryOptionIsNil: Boolean
  hideDeliveryOptionNotNil: Boolean
  """
  delivery_estimate_from field predicates
  """
  deliveryEstimateFrom: Int
  deliveryEstimateFromNEQ: Int
  deliveryEstimateFromIn: [Int!]
  deliveryEstimateFromNotIn: [Int!]
  deliveryEstimateFromGT: Int
  deliveryEstimateFromGTE: Int
  deliveryEstimateFromLT: Int
  deliveryEstimateFromLTE: Int
  deliveryEstimateFromIsNil: Boolean
  deliveryEstimateFromNotNil: Boolean
  """
  delivery_estimate_to field predicates
  """
  deliveryEstimateTo: Int
  deliveryEstimateToNEQ: Int
  deliveryEstimateToIn: [Int!]
  deliveryEstimateToNotIn: [Int!]
  deliveryEstimateToGT: Int
  deliveryEstimateToGTE: Int
  deliveryEstimateToLT: Int
  deliveryEstimateToLTE: Int
  deliveryEstimateToIsNil: Boolean
  deliveryEstimateToNotNil: Boolean
  """
  webshipper_integration field predicates
  """
  webshipperIntegration: Boolean
  webshipperIntegrationNEQ: Boolean
  """
  webshipper_id field predicates
  """
  webshipperID: Int
  webshipperIDNEQ: Int
  webshipperIDIn: [Int!]
  webshipperIDNotIn: [Int!]
  webshipperIDGT: Int
  webshipperIDGTE: Int
  webshipperIDLT: Int
  webshipperIDLTE: Int
  webshipperIDIsNil: Boolean
  webshipperIDNotNil: Boolean
  """
  shipmondo_integration field predicates
  """
  shipmondoIntegration: Boolean
  shipmondoIntegrationNEQ: Boolean
  """
  shipmondo_delivery_option field predicates
  """
  shipmondoDeliveryOption: String
  shipmondoDeliveryOptionNEQ: String
  shipmondoDeliveryOptionIn: [String!]
  shipmondoDeliveryOptionNotIn: [String!]
  shipmondoDeliveryOptionGT: String
  shipmondoDeliveryOptionGTE: String
  shipmondoDeliveryOptionLT: String
  shipmondoDeliveryOptionLTE: String
  shipmondoDeliveryOptionContains: String
  shipmondoDeliveryOptionHasPrefix: String
  shipmondoDeliveryOptionHasSuffix: String
  shipmondoDeliveryOptionIsNil: Boolean
  shipmondoDeliveryOptionNotNil: Boolean
  shipmondoDeliveryOptionEqualFold: String
  shipmondoDeliveryOptionContainsFold: String
  """
  customs_enabled field predicates
  """
  customsEnabled: Boolean
  customsEnabledNEQ: Boolean
  """
  customs_signer field predicates
  """
  customsSigner: String
  customsSignerNEQ: String
  customsSignerIn: [String!]
  customsSignerNotIn: [String!]
  customsSignerGT: String
  customsSignerGTE: String
  customsSignerLT: String
  customsSignerLTE: String
  customsSignerContains: String
  customsSignerHasPrefix: String
  customsSignerHasSuffix: String
  customsSignerIsNil: Boolean
  customsSignerNotNil: Boolean
  customsSignerEqualFold: String
  customsSignerContainsFold: String
  """
  hide_if_company_empty field predicates
  """
  hideIfCompanyEmpty: Boolean
  hideIfCompanyEmptyNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
  """
  delivery_rule edge predicates
  """
  hasDeliveryRule: Boolean
  hasDeliveryRuleWith: [DeliveryRuleWhereInput!]
  """
  delivery_option_dao edge predicates
  """
  hasDeliveryOptionDAO: Boolean
  hasDeliveryOptionDAOWith: [DeliveryOptionDAOWhereInput!]
  """
  delivery_option_df edge predicates
  """
  hasDeliveryOptionDF: Boolean
  hasDeliveryOptionDFWith: [DeliveryOptionDFWhereInput!]
  """
  delivery_option_dsv edge predicates
  """
  hasDeliveryOptionDSV: Boolean
  hasDeliveryOptionDSVWith: [DeliveryOptionDSVWhereInput!]
  """
  delivery_option_easy_post edge predicates
  """
  hasDeliveryOptionEasyPost: Boolean
  hasDeliveryOptionEasyPostWith: [DeliveryOptionEasyPostWhereInput!]
  """
  delivery_option_gls edge predicates
  """
  hasDeliveryOptionGLS: Boolean
  hasDeliveryOptionGLSWith: [DeliveryOptionGLSWhereInput!]
  """
  delivery_option_post_nord edge predicates
  """
  hasDeliveryOptionPostNord: Boolean
  hasDeliveryOptionPostNordWith: [DeliveryOptionPostNordWhereInput!]
  """
  delivery_option_usps edge predicates
  """
  hasDeliveryOptionUSPS: Boolean
  hasDeliveryOptionUSPSWith: [DeliveryOptionUSPSWhereInput!]
  """
  delivery_option_bring edge predicates
  """
  hasDeliveryOptionBring: Boolean
  hasDeliveryOptionBringWith: [DeliveryOptionBringWhereInput!]
  """
  return_portals edge predicates
  """
  hasReturnPortals: Boolean
  hasReturnPortalsWith: [ReturnPortalWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  return_colli edge predicates
  """
  hasReturnColli: Boolean
  hasReturnColliWith: [ReturnColliWhereInput!]
  """
  carrier_service edge predicates
  """
  hasCarrierService: Boolean
  hasCarrierServiceWith: [CarrierServiceWhereInput!]
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
  """
  connection_default edge predicates
  """
  hasConnectionDefault: Boolean
  hasConnectionDefaultWith: [ConnectionWhereInput!]
  """
  hypothesis_test_delivery_option_group_one edge predicates
  """
  hasHypothesisTestDeliveryOptionGroupOne: Boolean
  hasHypothesisTestDeliveryOptionGroupOneWith: [HypothesisTestDeliveryOptionWhereInput!]
  """
  hypothesis_test_delivery_option_group_two edge predicates
  """
  hasHypothesisTestDeliveryOptionGroupTwo: Boolean
  hasHypothesisTestDeliveryOptionGroupTwoWith: [HypothesisTestDeliveryOptionWhereInput!]
  """
  hypothesis_test_delivery_option_lookup edge predicates
  """
  hasHypothesisTestDeliveryOptionLookup: Boolean
  hasHypothesisTestDeliveryOptionLookupWith: [HypothesisTestDeliveryOptionLookupWhereInput!]
  """
  click_collect_location edge predicates
  """
  hasClickCollectLocation: Boolean
  hasClickCollectLocationWith: [LocationWhereInput!]
  """
  email_click_collect_at_store edge predicates
  """
  hasEmailClickCollectAtStore: Boolean
  hasEmailClickCollectAtStoreWith: [EmailTemplateWhereInput!]
  """
  consolidation edge predicates
  """
  hasConsolidation: Boolean
  hasConsolidationWith: [ConsolidationWhereInput!]
  """
  default_packaging edge predicates
  """
  hasDefaultPackaging: Boolean
  hasDefaultPackagingWith: [PackagingWhereInput!]
}
type DeliveryRule implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  price: Float!
  tenant: Tenant!
  """
  Since constraint groups can be && or ||, we need to have groups of multiple constraints
  """
  deliveryRuleConstraintGroup: [DeliveryRuleConstraintGroup!]
  deliveryOption: DeliveryOption
  country: [Country!]
  currency: Currency
}
"""
A connection to a list of items.
"""
type DeliveryRuleConnection {
  """
  A list of edges.
  """
  edges: [DeliveryRuleEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type DeliveryRuleConstraint implements Node {
  id: ID!
  tenantID: ID!
  propertyType: DeliveryRuleConstraintPropertyType!
  comparison: DeliveryRuleConstraintComparison!
  selectedValue: DeliveryRuleConstraintSelectedValue!
  tenant: Tenant!
  deliveryRuleConstraintGroup: DeliveryRuleConstraintGroup!
}
"""
DeliveryRuleConstraintComparison is enum for the field comparison
"""
enum DeliveryRuleConstraintComparison @goModel(model: "delivrio.io/go/ent/deliveryruleconstraint.Comparison") {
  equals
  not_equals
  between
  outside
  less_than
  greater_than
  contains
  prefix
  suffix
}
"""
A connection to a list of items.
"""
type DeliveryRuleConstraintConnection {
  """
  A list of edges.
  """
  edges: [DeliveryRuleConstraintEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DeliveryRuleConstraintEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryRuleConstraint
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type DeliveryRuleConstraintGroup implements Node {
  id: ID!
  tenantID: ID!
  constraintLogic: DeliveryRuleConstraintGroupConstraintLogic!
  tenant: Tenant!
  deliveryRuleConstraints: [DeliveryRuleConstraint!]
  deliveryRule: DeliveryRule!
}
"""
A connection to a list of items.
"""
type DeliveryRuleConstraintGroupConnection {
  """
  A list of edges.
  """
  edges: [DeliveryRuleConstraintGroupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
DeliveryRuleConstraintGroupConstraintLogic is enum for the field constraint_logic
"""
enum DeliveryRuleConstraintGroupConstraintLogic @goModel(model: "delivrio.io/go/ent/deliveryruleconstraintgroup.ConstraintLogic") {
  and
  or
}
"""
An edge in a connection.
"""
type DeliveryRuleConstraintGroupEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryRuleConstraintGroup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryRuleConstraintGroupWhereInput is used for filtering DeliveryRuleConstraintGroup objects.
Input was generated by ent.
"""
input DeliveryRuleConstraintGroupWhereInput {
  not: DeliveryRuleConstraintGroupWhereInput
  and: [DeliveryRuleConstraintGroupWhereInput!]
  or: [DeliveryRuleConstraintGroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  constraint_logic field predicates
  """
  constraintLogic: DeliveryRuleConstraintGroupConstraintLogic
  constraintLogicNEQ: DeliveryRuleConstraintGroupConstraintLogic
  constraintLogicIn: [DeliveryRuleConstraintGroupConstraintLogic!]
  constraintLogicNotIn: [DeliveryRuleConstraintGroupConstraintLogic!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_rule_constraints edge predicates
  """
  hasDeliveryRuleConstraints: Boolean
  hasDeliveryRuleConstraintsWith: [DeliveryRuleConstraintWhereInput!]
  """
  delivery_rule edge predicates
  """
  hasDeliveryRule: Boolean
  hasDeliveryRuleWith: [DeliveryRuleWhereInput!]
}
"""
DeliveryRuleConstraintPropertyType is enum for the field property_type
"""
enum DeliveryRuleConstraintPropertyType @goModel(model: "delivrio.io/go/ent/deliveryruleconstraint.PropertyType") {
  total_weight
  cart_total
  day_of_week
  time_of_day
  product_tag
  all_products_tagged
  sku
  order_lines
  postal_code_numeric
  postal_code_string
}
"""
DeliveryRuleConstraintWhereInput is used for filtering DeliveryRuleConstraint objects.
Input was generated by ent.
"""
input DeliveryRuleConstraintWhereInput {
  not: DeliveryRuleConstraintWhereInput
  and: [DeliveryRuleConstraintWhereInput!]
  or: [DeliveryRuleConstraintWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  property_type field predicates
  """
  propertyType: DeliveryRuleConstraintPropertyType
  propertyTypeNEQ: DeliveryRuleConstraintPropertyType
  propertyTypeIn: [DeliveryRuleConstraintPropertyType!]
  propertyTypeNotIn: [DeliveryRuleConstraintPropertyType!]
  """
  comparison field predicates
  """
  comparison: DeliveryRuleConstraintComparison
  comparisonNEQ: DeliveryRuleConstraintComparison
  comparisonIn: [DeliveryRuleConstraintComparison!]
  comparisonNotIn: [DeliveryRuleConstraintComparison!]
  """
  selected_value field predicates
  """
  selectedValue: DeliveryRuleConstraintSelectedValueInput
  selectedValueNEQ: DeliveryRuleConstraintSelectedValueInput
  selectedValueIn: [DeliveryRuleConstraintSelectedValueInput!]
  selectedValueNotIn: [DeliveryRuleConstraintSelectedValueInput!]
  selectedValueGT: DeliveryRuleConstraintSelectedValueInput
  selectedValueGTE: DeliveryRuleConstraintSelectedValueInput
  selectedValueLT: DeliveryRuleConstraintSelectedValueInput
  selectedValueLTE: DeliveryRuleConstraintSelectedValueInput
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_rule_constraint_group edge predicates
  """
  hasDeliveryRuleConstraintGroup: Boolean
  hasDeliveryRuleConstraintGroupWith: [DeliveryRuleConstraintGroupWhereInput!]
}
"""
An edge in a connection.
"""
type DeliveryRuleEdge {
  """
  The item at the end of the edge.
  """
  node: DeliveryRule
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DeliveryRuleWhereInput is used for filtering DeliveryRule objects.
Input was generated by ent.
"""
input DeliveryRuleWhereInput {
  not: DeliveryRuleWhereInput
  and: [DeliveryRuleWhereInput!]
  or: [DeliveryRuleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  price field predicates
  """
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_rule_constraint_group edge predicates
  """
  hasDeliveryRuleConstraintGroup: Boolean
  hasDeliveryRuleConstraintGroupWith: [DeliveryRuleConstraintGroupWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  country edge predicates
  """
  hasCountry: Boolean
  hasCountryWith: [CountryWhereInput!]
  """
  currency edge predicates
  """
  hasCurrency: Boolean
  hasCurrencyWith: [CurrencyWhereInput!]
}
type Document implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  htmlTemplate: String
  htmlHeader: String
  htmlFooter: String
  """
  Facilitates printing by saving the latest version of this document
  """
  lastBase64Pdf: String @goField(name: "LastBase64Pdf", forceResolver: false)
  mergeType: DocumentMergeType!
  paperSize: DocumentPaperSize!
  startAt: Time!
  endAt: Time!
  createdAt: Time!
  tenant: Tenant!
  carrierBrand: CarrierBrand
  connectionPackingSlip: [Connection!]
}
"""
A connection to a list of items.
"""
type DocumentConnection {
  """
  A list of edges.
  """
  edges: [DocumentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type DocumentEdge {
  """
  The item at the end of the edge.
  """
  node: Document
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type DocumentFile implements Node {
  id: ID!
  tenantID: ID!
  createdAt: Time!
  storageType: DocumentFileStorageType!
  storagePath: String
  storagePathZpl: String
  docType: DocumentFileDocType!
  dataPdfBase64: String
  dataZplBase64: String
  tenant: Tenant!
  colli: Colli
  shipmentParcel: ShipmentParcel
}
"""
A connection to a list of items.
"""
type DocumentFileConnection {
  """
  A list of edges.
  """
  edges: [DocumentFileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
DocumentFileDocType is enum for the field doc_type
"""
enum DocumentFileDocType @goModel(model: "delivrio.io/go/ent/documentfile.DocType") {
  carrier_label
  packing_slip
}
"""
An edge in a connection.
"""
type DocumentFileEdge {
  """
  The item at the end of the edge.
  """
  node: DocumentFile
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
DocumentFileStorageType is enum for the field storage_type
"""
enum DocumentFileStorageType @goModel(model: "delivrio.io/go/ent/documentfile.StorageType") {
  database
  bucket
}
"""
DocumentFileWhereInput is used for filtering DocumentFile objects.
Input was generated by ent.
"""
input DocumentFileWhereInput {
  not: DocumentFileWhereInput
  and: [DocumentFileWhereInput!]
  or: [DocumentFileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  storage_type field predicates
  """
  storageType: DocumentFileStorageType
  storageTypeNEQ: DocumentFileStorageType
  storageTypeIn: [DocumentFileStorageType!]
  storageTypeNotIn: [DocumentFileStorageType!]
  """
  storage_path field predicates
  """
  storagePath: String
  storagePathNEQ: String
  storagePathIn: [String!]
  storagePathNotIn: [String!]
  storagePathGT: String
  storagePathGTE: String
  storagePathLT: String
  storagePathLTE: String
  storagePathContains: String
  storagePathHasPrefix: String
  storagePathHasSuffix: String
  storagePathIsNil: Boolean
  storagePathNotNil: Boolean
  storagePathEqualFold: String
  storagePathContainsFold: String
  """
  storage_path_zpl field predicates
  """
  storagePathZpl: String
  storagePathZplNEQ: String
  storagePathZplIn: [String!]
  storagePathZplNotIn: [String!]
  storagePathZplGT: String
  storagePathZplGTE: String
  storagePathZplLT: String
  storagePathZplLTE: String
  storagePathZplContains: String
  storagePathZplHasPrefix: String
  storagePathZplHasSuffix: String
  storagePathZplIsNil: Boolean
  storagePathZplNotNil: Boolean
  storagePathZplEqualFold: String
  storagePathZplContainsFold: String
  """
  doc_type field predicates
  """
  docType: DocumentFileDocType
  docTypeNEQ: DocumentFileDocType
  docTypeIn: [DocumentFileDocType!]
  docTypeNotIn: [DocumentFileDocType!]
  """
  data_pdf_base64 field predicates
  """
  dataPdfBase64: String
  dataPdfBase64NEQ: String
  dataPdfBase64In: [String!]
  dataPdfBase64NotIn: [String!]
  dataPdfBase64GT: String
  dataPdfBase64GTE: String
  dataPdfBase64LT: String
  dataPdfBase64LTE: String
  dataPdfBase64Contains: String
  dataPdfBase64HasPrefix: String
  dataPdfBase64HasSuffix: String
  dataPdfBase64IsNil: Boolean
  dataPdfBase64NotNil: Boolean
  dataPdfBase64EqualFold: String
  dataPdfBase64ContainsFold: String
  """
  data_zpl_base64 field predicates
  """
  dataZplBase64: String
  dataZplBase64NEQ: String
  dataZplBase64In: [String!]
  dataZplBase64NotIn: [String!]
  dataZplBase64GT: String
  dataZplBase64GTE: String
  dataZplBase64LT: String
  dataZplBase64LTE: String
  dataZplBase64Contains: String
  dataZplBase64HasPrefix: String
  dataZplBase64HasSuffix: String
  dataZplBase64IsNil: Boolean
  dataZplBase64NotNil: Boolean
  dataZplBase64EqualFold: String
  dataZplBase64ContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  shipment_parcel edge predicates
  """
  hasShipmentParcel: Boolean
  hasShipmentParcelWith: [ShipmentParcelWhereInput!]
}
"""
DocumentMergeType is enum for the field merge_type
"""
enum DocumentMergeType @goModel(model: "delivrio.io/go/ent/document.MergeType") {
  Orders
  PackingSlip
  Waybill
}
"""
DocumentPaperSize is enum for the field paper_size
"""
enum DocumentPaperSize @goModel(model: "delivrio.io/go/ent/document.PaperSize") {
  A4
  Four_x_six
}
"""
DocumentWhereInput is used for filtering Document objects.
Input was generated by ent.
"""
input DocumentWhereInput {
  not: DocumentWhereInput
  and: [DocumentWhereInput!]
  or: [DocumentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  html_template field predicates
  """
  htmlTemplate: String
  htmlTemplateNEQ: String
  htmlTemplateIn: [String!]
  htmlTemplateNotIn: [String!]
  htmlTemplateGT: String
  htmlTemplateGTE: String
  htmlTemplateLT: String
  htmlTemplateLTE: String
  htmlTemplateContains: String
  htmlTemplateHasPrefix: String
  htmlTemplateHasSuffix: String
  htmlTemplateIsNil: Boolean
  htmlTemplateNotNil: Boolean
  htmlTemplateEqualFold: String
  htmlTemplateContainsFold: String
  """
  html_header field predicates
  """
  htmlHeader: String
  htmlHeaderNEQ: String
  htmlHeaderIn: [String!]
  htmlHeaderNotIn: [String!]
  htmlHeaderGT: String
  htmlHeaderGTE: String
  htmlHeaderLT: String
  htmlHeaderLTE: String
  htmlHeaderContains: String
  htmlHeaderHasPrefix: String
  htmlHeaderHasSuffix: String
  htmlHeaderIsNil: Boolean
  htmlHeaderNotNil: Boolean
  htmlHeaderEqualFold: String
  htmlHeaderContainsFold: String
  """
  html_footer field predicates
  """
  htmlFooter: String
  htmlFooterNEQ: String
  htmlFooterIn: [String!]
  htmlFooterNotIn: [String!]
  htmlFooterGT: String
  htmlFooterGTE: String
  htmlFooterLT: String
  htmlFooterLTE: String
  htmlFooterContains: String
  htmlFooterHasPrefix: String
  htmlFooterHasSuffix: String
  htmlFooterIsNil: Boolean
  htmlFooterNotNil: Boolean
  htmlFooterEqualFold: String
  htmlFooterContainsFold: String
  """
  last_base64_pdf field predicates
  """
  lastBase64Pdf: String
  lastBase64PdfNEQ: String
  lastBase64PdfIn: [String!]
  lastBase64PdfNotIn: [String!]
  lastBase64PdfGT: String
  lastBase64PdfGTE: String
  lastBase64PdfLT: String
  lastBase64PdfLTE: String
  lastBase64PdfContains: String
  lastBase64PdfHasPrefix: String
  lastBase64PdfHasSuffix: String
  lastBase64PdfIsNil: Boolean
  lastBase64PdfNotNil: Boolean
  lastBase64PdfEqualFold: String
  lastBase64PdfContainsFold: String
  """
  merge_type field predicates
  """
  mergeType: DocumentMergeType
  mergeTypeNEQ: DocumentMergeType
  mergeTypeIn: [DocumentMergeType!]
  mergeTypeNotIn: [DocumentMergeType!]
  """
  paper_size field predicates
  """
  paperSize: DocumentPaperSize
  paperSizeNEQ: DocumentPaperSize
  paperSizeIn: [DocumentPaperSize!]
  paperSizeNotIn: [DocumentPaperSize!]
  """
  start_at field predicates
  """
  startAt: Time
  startAtNEQ: Time
  startAtIn: [Time!]
  startAtNotIn: [Time!]
  startAtGT: Time
  startAtGTE: Time
  startAtLT: Time
  startAtLTE: Time
  """
  end_at field predicates
  """
  endAt: Time
  endAtNEQ: Time
  endAtIn: [Time!]
  endAtNotIn: [Time!]
  endAtGT: Time
  endAtGTE: Time
  endAtLT: Time
  endAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier_brand edge predicates
  """
  hasCarrierBrand: Boolean
  hasCarrierBrandWith: [CarrierBrandWhereInput!]
  """
  connection_packing_slip edge predicates
  """
  hasConnectionPackingSlip: Boolean
  hasConnectionPackingSlipWith: [ConnectionWhereInput!]
}
type EmailTemplate implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  subject: String!
  htmlTemplate: String!
  mergeType: EmailTemplateMergeType!
  createdAt: Time
  updatedAt: Time!
  tenant: Tenant!
  returnPortalConfirmationLabel: [ReturnPortal!]
  returnPortalConfirmationQrCode: [ReturnPortal!]
  returnPortalReceived: [ReturnPortal!]
  returnPortalAccepted: [ReturnPortal!]
  deliveryOptionClickCollectAtStore: [DeliveryOption!]
  notifications: [Notification!]
}
"""
A connection to a list of items.
"""
type EmailTemplateConnection {
  """
  A list of edges.
  """
  edges: [EmailTemplateEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EmailTemplateEdge {
  """
  The item at the end of the edge.
  """
  node: EmailTemplate
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EmailTemplateMergeType is enum for the field merge_type
"""
enum EmailTemplateMergeType @goModel(model: "delivrio.io/go/ent/emailtemplate.MergeType") {
  return_colli_label
  return_colli_qr
  return_colli_received
  return_colli_accepted
  order_confirmation
  order_picked
}
"""
EmailTemplateWhereInput is used for filtering EmailTemplate objects.
Input was generated by ent.
"""
input EmailTemplateWhereInput {
  not: EmailTemplateWhereInput
  and: [EmailTemplateWhereInput!]
  or: [EmailTemplateWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  subject field predicates
  """
  subject: String
  subjectNEQ: String
  subjectIn: [String!]
  subjectNotIn: [String!]
  subjectGT: String
  subjectGTE: String
  subjectLT: String
  subjectLTE: String
  subjectContains: String
  subjectHasPrefix: String
  subjectHasSuffix: String
  subjectEqualFold: String
  subjectContainsFold: String
  """
  html_template field predicates
  """
  htmlTemplate: String
  htmlTemplateNEQ: String
  htmlTemplateIn: [String!]
  htmlTemplateNotIn: [String!]
  htmlTemplateGT: String
  htmlTemplateGTE: String
  htmlTemplateLT: String
  htmlTemplateLTE: String
  htmlTemplateContains: String
  htmlTemplateHasPrefix: String
  htmlTemplateHasSuffix: String
  htmlTemplateEqualFold: String
  htmlTemplateContainsFold: String
  """
  merge_type field predicates
  """
  mergeType: EmailTemplateMergeType
  mergeTypeNEQ: EmailTemplateMergeType
  mergeTypeIn: [EmailTemplateMergeType!]
  mergeTypeNotIn: [EmailTemplateMergeType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  return_portal_confirmation_label edge predicates
  """
  hasReturnPortalConfirmationLabel: Boolean
  hasReturnPortalConfirmationLabelWith: [ReturnPortalWhereInput!]
  """
  return_portal_confirmation_qr_code edge predicates
  """
  hasReturnPortalConfirmationQrCode: Boolean
  hasReturnPortalConfirmationQrCodeWith: [ReturnPortalWhereInput!]
  """
  return_portal_received edge predicates
  """
  hasReturnPortalReceived: Boolean
  hasReturnPortalReceivedWith: [ReturnPortalWhereInput!]
  """
  return_portal_accepted edge predicates
  """
  hasReturnPortalAccepted: Boolean
  hasReturnPortalAcceptedWith: [ReturnPortalWhereInput!]
  """
  delivery_option_click_collect_at_store edge predicates
  """
  hasDeliveryOptionClickCollectAtStore: Boolean
  hasDeliveryOptionClickCollectAtStoreWith: [DeliveryOptionWhereInput!]
  """
  notifications edge predicates
  """
  hasNotifications: Boolean
  hasNotificationsWith: [NotificationWhereInput!]
}
type HypothesisTest implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  active: Boolean!
  tenant: Tenant!
  hypothesisTestDeliveryOption: HypothesisTestDeliveryOption
  connection: Connection!
}
"""
A connection to a list of items.
"""
type HypothesisTestConnection {
  """
  A list of edges.
  """
  edges: [HypothesisTestEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type HypothesisTestDeliveryOption implements Node {
  id: ID!
  tenantID: ID!
  randomizeWithinGroupSort: Boolean!
  byIntervalRotation: Boolean!
  rotationIntervalHours: Int!
  byOrder: Boolean!
  tenant: Tenant!
  hypothesisTest: HypothesisTest!
  hypothesisTestDeliveryOptionRequest: [HypothesisTestDeliveryOptionRequest!]
  deliveryOptionGroupOne: [DeliveryOption!]
  deliveryOptionGroupTwo: [DeliveryOption!]
}
"""
A connection to a list of items.
"""
type HypothesisTestDeliveryOptionConnection {
  """
  A list of edges.
  """
  edges: [HypothesisTestDeliveryOptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HypothesisTestDeliveryOptionEdge {
  """
  The item at the end of the edge.
  """
  node: HypothesisTestDeliveryOption
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type HypothesisTestDeliveryOptionLookup implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  deliveryOption: DeliveryOption!
  hypothesisTestDeliveryOptionRequest: HypothesisTestDeliveryOptionRequest!
}
"""
A connection to a list of items.
"""
type HypothesisTestDeliveryOptionLookupConnection {
  """
  A list of edges.
  """
  edges: [HypothesisTestDeliveryOptionLookupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HypothesisTestDeliveryOptionLookupEdge {
  """
  The item at the end of the edge.
  """
  node: HypothesisTestDeliveryOptionLookup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HypothesisTestDeliveryOptionLookupWhereInput is used for filtering HypothesisTestDeliveryOptionLookup objects.
Input was generated by ent.
"""
input HypothesisTestDeliveryOptionLookupWhereInput {
  not: HypothesisTestDeliveryOptionLookupWhereInput
  and: [HypothesisTestDeliveryOptionLookupWhereInput!]
  or: [HypothesisTestDeliveryOptionLookupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  hypothesis_test_delivery_option_request edge predicates
  """
  hasHypothesisTestDeliveryOptionRequest: Boolean
  hasHypothesisTestDeliveryOptionRequestWith: [HypothesisTestDeliveryOptionRequestWhereInput!]
}
type HypothesisTestDeliveryOptionRequest implements Node {
  id: ID!
  tenantID: ID!
  orderHash: String!
  shippingAddressHash: String!
  isControlGroup: Boolean!
  requestCount: Int!
  createdAt: Time!
  lastRequestedAt: Time!
  tenant: Tenant!
  hypothesisTestDeliveryOption: HypothesisTestDeliveryOption!
  order: Order
  hypothesisTestDeliveryOptionLookup: [HypothesisTestDeliveryOptionLookup!]
}
"""
A connection to a list of items.
"""
type HypothesisTestDeliveryOptionRequestConnection {
  """
  A list of edges.
  """
  edges: [HypothesisTestDeliveryOptionRequestEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type HypothesisTestDeliveryOptionRequestEdge {
  """
  The item at the end of the edge.
  """
  node: HypothesisTestDeliveryOptionRequest
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HypothesisTestDeliveryOptionRequestWhereInput is used for filtering HypothesisTestDeliveryOptionRequest objects.
Input was generated by ent.
"""
input HypothesisTestDeliveryOptionRequestWhereInput {
  not: HypothesisTestDeliveryOptionRequestWhereInput
  and: [HypothesisTestDeliveryOptionRequestWhereInput!]
  or: [HypothesisTestDeliveryOptionRequestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  order_hash field predicates
  """
  orderHash: String
  orderHashNEQ: String
  orderHashIn: [String!]
  orderHashNotIn: [String!]
  orderHashGT: String
  orderHashGTE: String
  orderHashLT: String
  orderHashLTE: String
  orderHashContains: String
  orderHashHasPrefix: String
  orderHashHasSuffix: String
  orderHashEqualFold: String
  orderHashContainsFold: String
  """
  shipping_address_hash field predicates
  """
  shippingAddressHash: String
  shippingAddressHashNEQ: String
  shippingAddressHashIn: [String!]
  shippingAddressHashNotIn: [String!]
  shippingAddressHashGT: String
  shippingAddressHashGTE: String
  shippingAddressHashLT: String
  shippingAddressHashLTE: String
  shippingAddressHashContains: String
  shippingAddressHashHasPrefix: String
  shippingAddressHashHasSuffix: String
  shippingAddressHashEqualFold: String
  shippingAddressHashContainsFold: String
  """
  is_control_group field predicates
  """
  isControlGroup: Boolean
  isControlGroupNEQ: Boolean
  """
  request_count field predicates
  """
  requestCount: Int
  requestCountNEQ: Int
  requestCountIn: [Int!]
  requestCountNotIn: [Int!]
  requestCountGT: Int
  requestCountGTE: Int
  requestCountLT: Int
  requestCountLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  last_requested_at field predicates
  """
  lastRequestedAt: Time
  lastRequestedAtNEQ: Time
  lastRequestedAtIn: [Time!]
  lastRequestedAtNotIn: [Time!]
  lastRequestedAtGT: Time
  lastRequestedAtGTE: Time
  lastRequestedAtLT: Time
  lastRequestedAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  hypothesis_test_delivery_option edge predicates
  """
  hasHypothesisTestDeliveryOption: Boolean
  hasHypothesisTestDeliveryOptionWith: [HypothesisTestDeliveryOptionWhereInput!]
  """
  order edge predicates
  """
  hasOrder: Boolean
  hasOrderWith: [OrderWhereInput!]
  """
  hypothesis_test_delivery_option_lookup edge predicates
  """
  hasHypothesisTestDeliveryOptionLookup: Boolean
  hasHypothesisTestDeliveryOptionLookupWith: [HypothesisTestDeliveryOptionLookupWhereInput!]
}
"""
HypothesisTestDeliveryOptionWhereInput is used for filtering HypothesisTestDeliveryOption objects.
Input was generated by ent.
"""
input HypothesisTestDeliveryOptionWhereInput {
  not: HypothesisTestDeliveryOptionWhereInput
  and: [HypothesisTestDeliveryOptionWhereInput!]
  or: [HypothesisTestDeliveryOptionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  randomize_within_group_sort field predicates
  """
  randomizeWithinGroupSort: Boolean
  randomizeWithinGroupSortNEQ: Boolean
  """
  by_interval_rotation field predicates
  """
  byIntervalRotation: Boolean
  byIntervalRotationNEQ: Boolean
  """
  rotation_interval_hours field predicates
  """
  rotationIntervalHours: Int
  rotationIntervalHoursNEQ: Int
  rotationIntervalHoursIn: [Int!]
  rotationIntervalHoursNotIn: [Int!]
  rotationIntervalHoursGT: Int
  rotationIntervalHoursGTE: Int
  rotationIntervalHoursLT: Int
  rotationIntervalHoursLTE: Int
  """
  by_order field predicates
  """
  byOrder: Boolean
  byOrderNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  hypothesis_test edge predicates
  """
  hasHypothesisTest: Boolean
  hasHypothesisTestWith: [HypothesisTestWhereInput!]
  """
  hypothesis_test_delivery_option_request edge predicates
  """
  hasHypothesisTestDeliveryOptionRequest: Boolean
  hasHypothesisTestDeliveryOptionRequestWith: [HypothesisTestDeliveryOptionRequestWhereInput!]
  """
  delivery_option_group_one edge predicates
  """
  hasDeliveryOptionGroupOne: Boolean
  hasDeliveryOptionGroupOneWith: [DeliveryOptionWhereInput!]
  """
  delivery_option_group_two edge predicates
  """
  hasDeliveryOptionGroupTwo: Boolean
  hasDeliveryOptionGroupTwoWith: [DeliveryOptionWhereInput!]
}
"""
An edge in a connection.
"""
type HypothesisTestEdge {
  """
  The item at the end of the edge.
  """
  node: HypothesisTest
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
HypothesisTestWhereInput is used for filtering HypothesisTest objects.
Input was generated by ent.
"""
input HypothesisTestWhereInput {
  not: HypothesisTestWhereInput
  and: [HypothesisTestWhereInput!]
  or: [HypothesisTestWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  hypothesis_test_delivery_option edge predicates
  """
  hasHypothesisTestDeliveryOption: Boolean
  hasHypothesisTestDeliveryOptionWith: [HypothesisTestDeliveryOptionWhereInput!]
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
}
type InventoryItem implements Node {
  id: ID!
  tenantID: ID!
  externalID: String
  """
  Used when country specific code not available
  """
  code: String
  """
  Duplicated to match Shopify InventoryItem/ProductVariant
  """
  sku: String
  tenant: Tenant!
  """
  Takes precedent over general HS code
  """
  countryHarmonizedCode: [CountryHarmonizedCode!]
  """
  Can be null in Shopify
  """
  countryOfOrigin: Country
  productVariant: ProductVariant!
}
"""
A connection to a list of items.
"""
type InventoryItemConnection {
  """
  A list of edges.
  """
  edges: [InventoryItemEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type InventoryItemEdge {
  """
  The item at the end of the edge.
  """
  node: InventoryItem
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
InventoryItemWhereInput is used for filtering InventoryItem objects.
Input was generated by ent.
"""
input InventoryItemWhereInput {
  not: InventoryItemWhereInput
  and: [InventoryItemWhereInput!]
  or: [InventoryItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  external_ID field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeIsNil: Boolean
  codeNotNil: Boolean
  codeEqualFold: String
  codeContainsFold: String
  """
  sku field predicates
  """
  sku: String
  skuNEQ: String
  skuIn: [String!]
  skuNotIn: [String!]
  skuGT: String
  skuGTE: String
  skuLT: String
  skuLTE: String
  skuContains: String
  skuHasPrefix: String
  skuHasSuffix: String
  skuIsNil: Boolean
  skuNotNil: Boolean
  skuEqualFold: String
  skuContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  country_harmonized_code edge predicates
  """
  hasCountryHarmonizedCode: Boolean
  hasCountryHarmonizedCodeWith: [CountryHarmonizedCodeWhereInput!]
  """
  country_of_origin edge predicates
  """
  hasCountryOfOrigin: Boolean
  hasCountryOfOriginWith: [CountryWhereInput!]
  """
  product_variant edge predicates
  """
  hasProductVariant: Boolean
  hasProductVariantWith: [ProductVariantWhereInput!]
}
type Language implements Node {
  id: ID!
  label: String!
  internalID: LanguageInternalID!
  users: [User!]
  language: [Tenant!]
}
"""
A connection to a list of items.
"""
type LanguageConnection {
  """
  A list of edges.
  """
  edges: [LanguageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type LanguageEdge {
  """
  The item at the end of the edge.
  """
  node: Language
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
LanguageInternalID is enum for the field internal_id
"""
enum LanguageInternalID @goModel(model: "delivrio.io/go/ent/language.InternalID") {
  EN
  DA
}
"""
LanguageWhereInput is used for filtering Language objects.
Input was generated by ent.
"""
input LanguageWhereInput {
  not: LanguageWhereInput
  and: [LanguageWhereInput!]
  or: [LanguageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  internal_id field predicates
  """
  internalID: LanguageInternalID
  internalIDNEQ: LanguageInternalID
  internalIDIn: [LanguageInternalID!]
  internalIDNotIn: [LanguageInternalID!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  language edge predicates
  """
  hasLanguage: Boolean
  hasLanguageWith: [TenantWhereInput!]
}
type Location implements Node {
  id: ID!
  tenantID: ID!
  """
  Location name, not used in the address
  """
  name: String!
  tenant: Tenant!
  address: Address!
  locationTags: [LocationTag!]!
  senderConnection: [Connection!]
  pickupConnection: [Connection!]
  returnConnection: [Connection!]
  sellerConnection: [Connection!]
  returnPortal: [ReturnPortal!]
  deliveryOption: [DeliveryOption!]
  colli: [Colli!]
}
"""
A connection to a list of items.
"""
type LocationConnection {
  """
  A list of edges.
  """
  edges: [LocationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type LocationEdge {
  """
  The item at the end of the edge.
  """
  node: Location
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type LocationTag implements Node {
  id: ID!
  label: String!
  internalID: String!
  location: [Location!]
}
"""
A connection to a list of items.
"""
type LocationTagConnection {
  """
  A list of edges.
  """
  edges: [LocationTagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type LocationTagEdge {
  """
  The item at the end of the edge.
  """
  node: LocationTag
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
LocationTagWhereInput is used for filtering LocationTag objects.
Input was generated by ent.
"""
input LocationTagWhereInput {
  not: LocationTagWhereInput
  and: [LocationTagWhereInput!]
  or: [LocationTagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  internal_id field predicates
  """
  internalID: String
  internalIDNEQ: String
  internalIDIn: [String!]
  internalIDNotIn: [String!]
  internalIDGT: String
  internalIDGTE: String
  internalIDLT: String
  internalIDLTE: String
  internalIDContains: String
  internalIDHasPrefix: String
  internalIDHasSuffix: String
  internalIDEqualFold: String
  internalIDContainsFold: String
  """
  location edge predicates
  """
  hasLocation: Boolean
  hasLocationWith: [LocationWhereInput!]
}
"""
LocationWhereInput is used for filtering Location objects.
Input was generated by ent.
"""
input LocationWhereInput {
  not: LocationWhereInput
  and: [LocationWhereInput!]
  or: [LocationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  address edge predicates
  """
  hasAddress: Boolean
  hasAddressWith: [AddressWhereInput!]
  """
  location_tags edge predicates
  """
  hasLocationTags: Boolean
  hasLocationTagsWith: [LocationTagWhereInput!]
  """
  sender_connection edge predicates
  """
  hasSenderConnection: Boolean
  hasSenderConnectionWith: [ConnectionWhereInput!]
  """
  pickup_connection edge predicates
  """
  hasPickupConnection: Boolean
  hasPickupConnectionWith: [ConnectionWhereInput!]
  """
  return_connection edge predicates
  """
  hasReturnConnection: Boolean
  hasReturnConnectionWith: [ConnectionWhereInput!]
  """
  seller_connection edge predicates
  """
  hasSellerConnection: Boolean
  hasSellerConnectionWith: [ConnectionWhereInput!]
  """
  return_portal edge predicates
  """
  hasReturnPortal: Boolean
  hasReturnPortalWith: [ReturnPortalWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "delivrio.io/go/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Notification implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  active: Boolean!
  tenant: Tenant!
  connection: Connection!
  emailTemplate: EmailTemplate!
}
"""
A connection to a list of items.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type NotificationEdge {
  """
  The item at the end of the edge.
  """
  node: Notification
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
NotificationWhereInput is used for filtering Notification objects.
Input was generated by ent.
"""
input NotificationWhereInput {
  not: NotificationWhereInput
  and: [NotificationWhereInput!]
  or: [NotificationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  active field predicates
  """
  active: Boolean
  activeNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
  """
  email_template edge predicates
  """
  hasEmailTemplate: Boolean
  hasEmailTemplateWith: [EmailTemplateWhereInput!]
}
type OTKRequests implements Node {
  id: ID!
  tenantID: ID!
  otk: String!
  tenant: Tenant!
  users: User
}
"""
OTKRequestsWhereInput is used for filtering OTKRequests objects.
Input was generated by ent.
"""
input OTKRequestsWhereInput {
  not: OTKRequestsWhereInput
  and: [OTKRequestsWhereInput!]
  or: [OTKRequestsWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  otk field predicates
  """
  otk: String
  otkNEQ: String
  otkIn: [String!]
  otkNotIn: [String!]
  otkGT: String
  otkGTE: String
  otkLT: String
  otkLTE: String
  otkContains: String
  otkHasPrefix: String
  otkHasSuffix: String
  otkEqualFold: String
  otkContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type Order implements Node {
  id: ID!
  tenantID: ID!
  orderPublicID: String!
  externalID: String
  commentInternal: String
  commentExternal: String
  createdAt: Time!
  emailSyncConfirmationAt: Time
  status: OrderStatus!
  tenant: Tenant!
  orderHistory: [OrderHistory!]
  connection: Connection!
  colli: [Colli!]
  returnColli: [ReturnColli!]
  hypothesisTestDeliveryOptionRequest: HypothesisTestDeliveryOptionRequest
  """
  Orders may be added to consolidation either through a pallet or directly
  """
  pallet: Pallet
  """
  Orders may be added to consolidation either through a pallet or directly
  """
  consolidation: Consolidation
}
"""
A connection to a list of items.
"""
type OrderConnection {
  """
  A list of edges.
  """
  edges: [OrderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
"""
An edge in a connection.
"""
type OrderEdge {
  """
  The item at the end of the edge.
  """
  node: Order
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type OrderHistory implements Node {
  id: ID!
  tenantID: ID!
  description: String!
  type: OrderHistoryType!
  changeHistory: ChangeHistory!
  tenant: Tenant!
  order: Order!
}
"""
OrderHistoryType is enum for the field type
"""
enum OrderHistoryType @goModel(model: "delivrio.io/go/ent/orderhistory.Type") {
  create
  update
  delete
  notify
}
"""
OrderHistoryWhereInput is used for filtering OrderHistory objects.
Input was generated by ent.
"""
input OrderHistoryWhereInput {
  not: OrderHistoryWhereInput
  and: [OrderHistoryWhereInput!]
  or: [OrderHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  type field predicates
  """
  type: OrderHistoryType
  typeNEQ: OrderHistoryType
  typeIn: [OrderHistoryType!]
  typeNotIn: [OrderHistoryType!]
  """
  change_history edge predicates
  """
  hasChangeHistory: Boolean
  hasChangeHistoryWith: [ChangeHistoryWhereInput!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  order edge predicates
  """
  hasOrder: Boolean
  hasOrderWith: [OrderWhereInput!]
}
type OrderLine implements Node {
  id: ID!
  tenantID: ID!
  unitPrice: Float!
  """
  Amount removed from unit_price*units for customs docs
  """
  discountAllocationAmount: Float!
  externalID: String
  units: Int!
  createdAt: Time
  updatedAt: Time!
  productVariantID: ID!
  colliID: ID!
  tenant: Tenant!
  productVariant: ProductVariant!
  colli: Colli!
  returnOrderLine: [ReturnOrderLine!]
  currency: Currency!
}
"""
OrderLineWhereInput is used for filtering OrderLine objects.
Input was generated by ent.
"""
input OrderLineWhereInput {
  not: OrderLineWhereInput
  and: [OrderLineWhereInput!]
  or: [OrderLineWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  unit_price field predicates
  """
  unitPrice: Float
  unitPriceNEQ: Float
  unitPriceIn: [Float!]
  unitPriceNotIn: [Float!]
  unitPriceGT: Float
  unitPriceGTE: Float
  unitPriceLT: Float
  unitPriceLTE: Float
  """
  discount_allocation_amount field predicates
  """
  discountAllocationAmount: Float
  discountAllocationAmountNEQ: Float
  discountAllocationAmountIn: [Float!]
  discountAllocationAmountNotIn: [Float!]
  discountAllocationAmountGT: Float
  discountAllocationAmountGTE: Float
  discountAllocationAmountLT: Float
  discountAllocationAmountLTE: Float
  """
  external_id field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """
  units field predicates
  """
  units: Int
  unitsNEQ: Int
  unitsIn: [Int!]
  unitsNotIn: [Int!]
  unitsGT: Int
  unitsGTE: Int
  unitsLT: Int
  unitsLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  product_variant_id field predicates
  """
  productVariantID: ID
  productVariantIDNEQ: ID
  productVariantIDIn: [ID!]
  productVariantIDNotIn: [ID!]
  productVariantIDGT: ID
  productVariantIDGTE: ID
  productVariantIDLT: ID
  productVariantIDLTE: ID
  productVariantIDContains: ID
  productVariantIDHasPrefix: ID
  productVariantIDHasSuffix: ID
  productVariantIDEqualFold: ID
  productVariantIDContainsFold: ID
  """
  colli_id field predicates
  """
  colliID: ID
  colliIDNEQ: ID
  colliIDIn: [ID!]
  colliIDNotIn: [ID!]
  colliIDGT: ID
  colliIDGTE: ID
  colliIDLT: ID
  colliIDLTE: ID
  colliIDContains: ID
  colliIDHasPrefix: ID
  colliIDHasSuffix: ID
  colliIDEqualFold: ID
  colliIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  product_variant edge predicates
  """
  hasProductVariant: Boolean
  hasProductVariantWith: [ProductVariantWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  return_order_line edge predicates
  """
  hasReturnOrderLine: Boolean
  hasReturnOrderLineWith: [ReturnOrderLineWhereInput!]
  """
  currency edge predicates
  """
  hasCurrency: Boolean
  hasCurrencyWith: [CurrencyWhereInput!]
}
"""
Ordering options for Order connections
"""
input OrderOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Orders.
  """
  field: OrderOrderField!
}
"""
Properties by which Order connections can be ordered.
"""
enum OrderOrderField {
  CREATED_AT
}
type OrderSender implements Node {
  id: ID!
  tenantID: ID!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  vatNumber: String!
  tenant: Tenant!
}
"""
A connection to a list of items.
"""
type OrderSenderConnection {
  """
  A list of edges.
  """
  edges: [OrderSenderEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OrderSenderEdge {
  """
  The item at the end of the edge.
  """
  node: OrderSender
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
OrderSenderWhereInput is used for filtering OrderSender objects.
Input was generated by ent.
"""
input OrderSenderWhereInput {
  not: OrderSenderWhereInput
  and: [OrderSenderWhereInput!]
  or: [OrderSenderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  vat_number field predicates
  """
  vatNumber: String
  vatNumberNEQ: String
  vatNumberIn: [String!]
  vatNumberNotIn: [String!]
  vatNumberGT: String
  vatNumberGTE: String
  vatNumberLT: String
  vatNumberLTE: String
  vatNumberContains: String
  vatNumberHasPrefix: String
  vatNumberHasSuffix: String
  vatNumberEqualFold: String
  vatNumberContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
}
"""
OrderStatus is enum for the field status
"""
enum OrderStatus @goModel(model: "delivrio.io/go/ent/order.Status") {
  Pending
  Partially_dispatched
  Dispatched
  Cancelled
}
"""
OrderWhereInput is used for filtering Order objects.
Input was generated by ent.
"""
input OrderWhereInput {
  not: OrderWhereInput
  and: [OrderWhereInput!]
  or: [OrderWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  order_public_id field predicates
  """
  orderPublicID: String
  orderPublicIDNEQ: String
  orderPublicIDIn: [String!]
  orderPublicIDNotIn: [String!]
  orderPublicIDGT: String
  orderPublicIDGTE: String
  orderPublicIDLT: String
  orderPublicIDLTE: String
  orderPublicIDContains: String
  orderPublicIDHasPrefix: String
  orderPublicIDHasSuffix: String
  orderPublicIDEqualFold: String
  orderPublicIDContainsFold: String
  """
  external_id field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """
  comment_internal field predicates
  """
  commentInternal: String
  commentInternalNEQ: String
  commentInternalIn: [String!]
  commentInternalNotIn: [String!]
  commentInternalGT: String
  commentInternalGTE: String
  commentInternalLT: String
  commentInternalLTE: String
  commentInternalContains: String
  commentInternalHasPrefix: String
  commentInternalHasSuffix: String
  commentInternalIsNil: Boolean
  commentInternalNotNil: Boolean
  commentInternalEqualFold: String
  commentInternalContainsFold: String
  """
  comment_external field predicates
  """
  commentExternal: String
  commentExternalNEQ: String
  commentExternalIn: [String!]
  commentExternalNotIn: [String!]
  commentExternalGT: String
  commentExternalGTE: String
  commentExternalLT: String
  commentExternalLTE: String
  commentExternalContains: String
  commentExternalHasPrefix: String
  commentExternalHasSuffix: String
  commentExternalIsNil: Boolean
  commentExternalNotNil: Boolean
  commentExternalEqualFold: String
  commentExternalContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  email_sync_confirmation_at field predicates
  """
  emailSyncConfirmationAt: Time
  emailSyncConfirmationAtNEQ: Time
  emailSyncConfirmationAtIn: [Time!]
  emailSyncConfirmationAtNotIn: [Time!]
  emailSyncConfirmationAtGT: Time
  emailSyncConfirmationAtGTE: Time
  emailSyncConfirmationAtLT: Time
  emailSyncConfirmationAtLTE: Time
  emailSyncConfirmationAtIsNil: Boolean
  emailSyncConfirmationAtNotNil: Boolean
  """
  status field predicates
  """
  status: OrderStatus
  statusNEQ: OrderStatus
  statusIn: [OrderStatus!]
  statusNotIn: [OrderStatus!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  order_history edge predicates
  """
  hasOrderHistory: Boolean
  hasOrderHistoryWith: [OrderHistoryWhereInput!]
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  return_colli edge predicates
  """
  hasReturnColli: Boolean
  hasReturnColliWith: [ReturnColliWhereInput!]
  """
  hypothesis_test_delivery_option_request edge predicates
  """
  hasHypothesisTestDeliveryOptionRequest: Boolean
  hasHypothesisTestDeliveryOptionRequestWith: [HypothesisTestDeliveryOptionRequestWhereInput!]
  """
  pallet edge predicates
  """
  hasPallet: Boolean
  hasPalletWith: [PalletWhereInput!]
  """
  consolidation edge predicates
  """
  hasConsolidation: Boolean
  hasConsolidationWith: [ConsolidationWhereInput!]
}
type Packaging implements Node {
  id: ID!
  tenantID: ID!
  archivedAt: Time
  name: String!
  heightCm: Int!
  widthCm: Int!
  lengthCm: Int!
  tenant: Tenant!
  shipmentParcel: [ShipmentParcel!]
  pallet: [Pallet!]
  colli: [Colli!]
  returnColli: [ReturnColli!]
  packagingDF: PackagingDF
  packagingUSPS: PackagingUSPS
  carrierBrand: CarrierBrand
  deliveryOption: [DeliveryOption!]
}
"""
A connection to a list of items.
"""
type PackagingConnection {
  """
  A list of edges.
  """
  edges: [PackagingEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type PackagingDF implements Node {
  id: ID!
  tenantID: ID!
  apiType: PackagingDFAPIType!
  maxWeight: Float
  minWeight: Float
  """
  Some carriers this is not boolean, so this is not a general toggle
  """
  stackable: Boolean!
  tenant: Tenant!
  packaging: Packaging!
}
"""
PackagingDFAPIType is enum for the field api_type
"""
enum PackagingDFAPIType @goModel(model: "delivrio.io/go/ent/packagingdf.APIType") {
  PKK
  PL1
  PL2
  PL4
  K10
  K20
  C10
  PL7
  CLL
  PLL
}
"""
A connection to a list of items.
"""
type PackagingDFConnection {
  """
  A list of edges.
  """
  edges: [PackagingDFEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PackagingDFEdge {
  """
  The item at the end of the edge.
  """
  node: PackagingDF
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PackagingDFWhereInput is used for filtering PackagingDF objects.
Input was generated by ent.
"""
input PackagingDFWhereInput {
  not: PackagingDFWhereInput
  and: [PackagingDFWhereInput!]
  or: [PackagingDFWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  api_type field predicates
  """
  apiType: PackagingDFAPIType
  apiTypeNEQ: PackagingDFAPIType
  apiTypeIn: [PackagingDFAPIType!]
  apiTypeNotIn: [PackagingDFAPIType!]
  """
  max_weight field predicates
  """
  maxWeight: Float
  maxWeightNEQ: Float
  maxWeightIn: [Float!]
  maxWeightNotIn: [Float!]
  maxWeightGT: Float
  maxWeightGTE: Float
  maxWeightLT: Float
  maxWeightLTE: Float
  maxWeightIsNil: Boolean
  maxWeightNotNil: Boolean
  """
  min_weight field predicates
  """
  minWeight: Float
  minWeightNEQ: Float
  minWeightIn: [Float!]
  minWeightNotIn: [Float!]
  minWeightGT: Float
  minWeightGTE: Float
  minWeightLT: Float
  minWeightLTE: Float
  minWeightIsNil: Boolean
  minWeightNotNil: Boolean
  """
  stackable field predicates
  """
  stackable: Boolean
  stackableNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
}
"""
An edge in a connection.
"""
type PackagingEdge {
  """
  The item at the end of the edge.
  """
  node: Packaging
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type PackagingUSPS implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  packaging: Packaging!
  packagingUSPSRateIndicator: PackagingUSPSRateIndicator! @goField(name: "PackagingUSPSRateIndicator", forceResolver: false)
  packagingUSPSProcessingCategory: PackagingUSPSProcessingCategory! @goField(name: "PackagingUSPSProcessingCategory", forceResolver: false)
}
"""
A connection to a list of items.
"""
type PackagingUSPSConnection {
  """
  A list of edges.
  """
  edges: [PackagingUSPSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PackagingUSPSEdge {
  """
  The item at the end of the edge.
  """
  node: PackagingUSPS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type PackagingUSPSProcessingCategory implements Node {
  id: ID!
  name: String!
  processingCategory: PackagingUSPSProcessingCategoryProcessingCategory!
}
"""
A connection to a list of items.
"""
type PackagingUSPSProcessingCategoryConnection {
  """
  A list of edges.
  """
  edges: [PackagingUSPSProcessingCategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PackagingUSPSProcessingCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: PackagingUSPSProcessingCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PackagingUSPSProcessingCategoryProcessingCategory is enum for the field processing_category
"""
enum PackagingUSPSProcessingCategoryProcessingCategory @goModel(model: "delivrio.io/go/ent/packaginguspsprocessingcategory.ProcessingCategory") {
  LETTERS
  FLATS
  MACHINABLE
  IRREGULAR
  NON_MACHINABLE
}
"""
PackagingUSPSProcessingCategoryWhereInput is used for filtering PackagingUSPSProcessingCategory objects.
Input was generated by ent.
"""
input PackagingUSPSProcessingCategoryWhereInput {
  not: PackagingUSPSProcessingCategoryWhereInput
  and: [PackagingUSPSProcessingCategoryWhereInput!]
  or: [PackagingUSPSProcessingCategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  processing_category field predicates
  """
  processingCategory: PackagingUSPSProcessingCategoryProcessingCategory
  processingCategoryNEQ: PackagingUSPSProcessingCategoryProcessingCategory
  processingCategoryIn: [PackagingUSPSProcessingCategoryProcessingCategory!]
  processingCategoryNotIn: [PackagingUSPSProcessingCategoryProcessingCategory!]
}
type PackagingUSPSRateIndicator implements Node {
  id: ID!
  code: String!
  name: String!
  packagingUSPS: [PackagingUSPS!]
}
"""
A connection to a list of items.
"""
type PackagingUSPSRateIndicatorConnection {
  """
  A list of edges.
  """
  edges: [PackagingUSPSRateIndicatorEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PackagingUSPSRateIndicatorEdge {
  """
  The item at the end of the edge.
  """
  node: PackagingUSPSRateIndicator
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PackagingUSPSRateIndicatorWhereInput is used for filtering PackagingUSPSRateIndicator objects.
Input was generated by ent.
"""
input PackagingUSPSRateIndicatorWhereInput {
  not: PackagingUSPSRateIndicatorWhereInput
  and: [PackagingUSPSRateIndicatorWhereInput!]
  or: [PackagingUSPSRateIndicatorWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  code field predicates
  """
  code: String
  codeNEQ: String
  codeIn: [String!]
  codeNotIn: [String!]
  codeGT: String
  codeGTE: String
  codeLT: String
  codeLTE: String
  codeContains: String
  codeHasPrefix: String
  codeHasSuffix: String
  codeEqualFold: String
  codeContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  packaging_usps edge predicates
  """
  hasPackagingUSPS: Boolean
  hasPackagingUSPSWith: [PackagingUSPSWhereInput!]
}
"""
PackagingUSPSWhereInput is used for filtering PackagingUSPS objects.
Input was generated by ent.
"""
input PackagingUSPSWhereInput {
  not: PackagingUSPSWhereInput
  and: [PackagingUSPSWhereInput!]
  or: [PackagingUSPSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
  """
  packaging_usps_rate_indicator edge predicates
  """
  hasPackagingUSPSRateIndicator: Boolean
  hasPackagingUSPSRateIndicatorWith: [PackagingUSPSRateIndicatorWhereInput!]
  """
  packaging_usps_processing_category edge predicates
  """
  hasPackagingUSPSProcessingCategory: Boolean
  hasPackagingUSPSProcessingCategoryWith: [PackagingUSPSProcessingCategoryWhereInput!]
}
"""
PackagingWhereInput is used for filtering Packaging objects.
Input was generated by ent.
"""
input PackagingWhereInput {
  not: PackagingWhereInput
  and: [PackagingWhereInput!]
  or: [PackagingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  archived_at field predicates
  """
  archivedAt: Time
  archivedAtNEQ: Time
  archivedAtIn: [Time!]
  archivedAtNotIn: [Time!]
  archivedAtGT: Time
  archivedAtGTE: Time
  archivedAtLT: Time
  archivedAtLTE: Time
  archivedAtIsNil: Boolean
  archivedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  height_cm field predicates
  """
  heightCm: Int
  heightCmNEQ: Int
  heightCmIn: [Int!]
  heightCmNotIn: [Int!]
  heightCmGT: Int
  heightCmGTE: Int
  heightCmLT: Int
  heightCmLTE: Int
  """
  width_cm field predicates
  """
  widthCm: Int
  widthCmNEQ: Int
  widthCmIn: [Int!]
  widthCmNotIn: [Int!]
  widthCmGT: Int
  widthCmGTE: Int
  widthCmLT: Int
  widthCmLTE: Int
  """
  length_cm field predicates
  """
  lengthCm: Int
  lengthCmNEQ: Int
  lengthCmIn: [Int!]
  lengthCmNotIn: [Int!]
  lengthCmGT: Int
  lengthCmGTE: Int
  lengthCmLT: Int
  lengthCmLTE: Int
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment_parcel edge predicates
  """
  hasShipmentParcel: Boolean
  hasShipmentParcelWith: [ShipmentParcelWhereInput!]
  """
  pallet edge predicates
  """
  hasPallet: Boolean
  hasPalletWith: [PalletWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  return_colli edge predicates
  """
  hasReturnColli: Boolean
  hasReturnColliWith: [ReturnColliWhereInput!]
  """
  packaging_df edge predicates
  """
  hasPackagingDF: Boolean
  hasPackagingDFWith: [PackagingDFWhereInput!]
  """
  packaging_usps edge predicates
  """
  hasPackagingUSPS: Boolean
  hasPackagingUSPSWith: [PackagingUSPSWhereInput!]
  """
  carrier_brand edge predicates
  """
  hasCarrierBrand: Boolean
  hasCarrierBrandWith: [CarrierBrandWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Pallet implements Node {
  id: ID!
  tenantID: ID!
  publicID: String!
  description: String!
  tenant: Tenant!
  orders: [Order!]
  packaging: Packaging
  consolidation: Consolidation!
  """
  A pallet may only have 1 active shipment
  """
  shipmentPallet: ShipmentPallet
  """
  Cancelled shipments move here to maintain the ref
  """
  cancelledShipmentPallet: [ShipmentPallet!]
}
"""
A connection to a list of items.
"""
type PalletConnection {
  """
  A list of edges.
  """
  edges: [PalletEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PalletEdge {
  """
  The item at the end of the edge.
  """
  node: Pallet
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PalletWhereInput is used for filtering Pallet objects.
Input was generated by ent.
"""
input PalletWhereInput {
  not: PalletWhereInput
  and: [PalletWhereInput!]
  or: [PalletWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  public_id field predicates
  """
  publicID: String
  publicIDNEQ: String
  publicIDIn: [String!]
  publicIDNotIn: [String!]
  publicIDGT: String
  publicIDGTE: String
  publicIDLT: String
  publicIDLTE: String
  publicIDContains: String
  publicIDHasPrefix: String
  publicIDHasSuffix: String
  publicIDEqualFold: String
  publicIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  orders edge predicates
  """
  hasOrders: Boolean
  hasOrdersWith: [OrderWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
  """
  consolidation edge predicates
  """
  hasConsolidation: Boolean
  hasConsolidationWith: [ConsolidationWhereInput!]
  """
  shipment_pallet edge predicates
  """
  hasShipmentPallet: Boolean
  hasShipmentPalletWith: [ShipmentPalletWhereInput!]
  """
  cancelled_shipment_pallet edge predicates
  """
  hasCancelledShipmentPallet: Boolean
  hasCancelledShipmentPalletWith: [ShipmentPalletWhereInput!]
}
type ParcelShop implements Node {
  id: ID!
  name: String!
  lastUpdated: Time!
  parcelShopDAO: ParcelShopDAO
  parcelShopPostNord: ParcelShopPostNord
  parcelShopGLS: ParcelShopGLS
  parcelShopBring: ParcelShopBring
  carrierBrand: CarrierBrand!
  address: AddressGlobal!
  colli: [Colli!]
  businessHoursPeriod: [BusinessHoursPeriod!]
}
type ParcelShopBring implements Node {
  id: ID!
  """
  https://developer.bring.com/api/pickup-point/#pickup-point-types
  """
  pointType: ParcelShopBringPointType!
  bringID: String!
  parcelShop: ParcelShop!
  addressDelivery: AddressGlobal!
}
"""
A connection to a list of items.
"""
type ParcelShopBringConnection {
  """
  A list of edges.
  """
  edges: [ParcelShopBringEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ParcelShopBringEdge {
  """
  The item at the end of the edge.
  """
  node: ParcelShopBring
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ParcelShopBringPointType is enum for the field point_type
"""
enum ParcelShopBringPointType @goModel(model: "delivrio.io/go/ent/parcelshopbring.PointType") {
  one
  four
  nineteen
  twenty_one
  thirty_two
  thirty_four
  thirty_seven
  thirty_eight
  thirty_nine
  eighty_five
  eighty_six
  SmartPOST
  Posti
  Noutopiste
  LOCKER
  Unknown
}
"""
ParcelShopBringWhereInput is used for filtering ParcelShopBring objects.
Input was generated by ent.
"""
input ParcelShopBringWhereInput {
  not: ParcelShopBringWhereInput
  and: [ParcelShopBringWhereInput!]
  or: [ParcelShopBringWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  point_type field predicates
  """
  pointType: ParcelShopBringPointType
  pointTypeNEQ: ParcelShopBringPointType
  pointTypeIn: [ParcelShopBringPointType!]
  pointTypeNotIn: [ParcelShopBringPointType!]
  """
  bring_id field predicates
  """
  bringID: String
  bringIDNEQ: String
  bringIDIn: [String!]
  bringIDNotIn: [String!]
  bringIDGT: String
  bringIDGTE: String
  bringIDLT: String
  bringIDLTE: String
  bringIDContains: String
  bringIDHasPrefix: String
  bringIDHasSuffix: String
  bringIDEqualFold: String
  bringIDContainsFold: String
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
  """
  address_delivery edge predicates
  """
  hasAddressDelivery: Boolean
  hasAddressDeliveryWith: [AddressGlobalWhereInput!]
}
"""
A connection to a list of items.
"""
type ParcelShopConnection {
  """
  A list of edges.
  """
  edges: [ParcelShopEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type ParcelShopDAO implements Node {
  id: ID!
  shopID: String!
  parcelShop: ParcelShop!
}
"""
A connection to a list of items.
"""
type ParcelShopDAOConnection {
  """
  A list of edges.
  """
  edges: [ParcelShopDAOEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ParcelShopDAOEdge {
  """
  The item at the end of the edge.
  """
  node: ParcelShopDAO
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ParcelShopDAOWhereInput is used for filtering ParcelShopDAO objects.
Input was generated by ent.
"""
input ParcelShopDAOWhereInput {
  not: ParcelShopDAOWhereInput
  and: [ParcelShopDAOWhereInput!]
  or: [ParcelShopDAOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  shop_id field predicates
  """
  shopID: String
  shopIDNEQ: String
  shopIDIn: [String!]
  shopIDNotIn: [String!]
  shopIDGT: String
  shopIDGTE: String
  shopIDLT: String
  shopIDLTE: String
  shopIDContains: String
  shopIDHasPrefix: String
  shopIDHasSuffix: String
  shopIDEqualFold: String
  shopIDContainsFold: String
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
}
"""
An edge in a connection.
"""
type ParcelShopEdge {
  """
  The item at the end of the edge.
  """
  node: ParcelShop
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ParcelShopGLS implements Node {
  id: ID!
  glsParcelShopID: String!
  """
  Only available in Group API
  """
  partnerID: String
  """
  Only available in Group API
  """
  type: String
  parcelShop: ParcelShop!
}
"""
A connection to a list of items.
"""
type ParcelShopGLSConnection {
  """
  A list of edges.
  """
  edges: [ParcelShopGLSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ParcelShopGLSEdge {
  """
  The item at the end of the edge.
  """
  node: ParcelShopGLS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ParcelShopGLSWhereInput is used for filtering ParcelShopGLS objects.
Input was generated by ent.
"""
input ParcelShopGLSWhereInput {
  not: ParcelShopGLSWhereInput
  and: [ParcelShopGLSWhereInput!]
  or: [ParcelShopGLSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  gls_parcel_shop_id field predicates
  """
  glsParcelShopID: String
  glsParcelShopIDNEQ: String
  glsParcelShopIDIn: [String!]
  glsParcelShopIDNotIn: [String!]
  glsParcelShopIDGT: String
  glsParcelShopIDGTE: String
  glsParcelShopIDLT: String
  glsParcelShopIDLTE: String
  glsParcelShopIDContains: String
  glsParcelShopIDHasPrefix: String
  glsParcelShopIDHasSuffix: String
  glsParcelShopIDEqualFold: String
  glsParcelShopIDContainsFold: String
  """
  partner_id field predicates
  """
  partnerID: String
  partnerIDNEQ: String
  partnerIDIn: [String!]
  partnerIDNotIn: [String!]
  partnerIDGT: String
  partnerIDGTE: String
  partnerIDLT: String
  partnerIDLTE: String
  partnerIDContains: String
  partnerIDHasPrefix: String
  partnerIDHasSuffix: String
  partnerIDIsNil: Boolean
  partnerIDNotNil: Boolean
  partnerIDEqualFold: String
  partnerIDContainsFold: String
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeIsNil: Boolean
  typeNotNil: Boolean
  typeEqualFold: String
  typeContainsFold: String
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
}
type ParcelShopPostNord implements Node {
  id: ID!
  servicePointID: String!
  pudoid: String!
  """
  No idea what the options are aside from the default: 156. Maybe box, shop, etc??
  """
  typeID: String!
  parcelShop: ParcelShop!
  addressDelivery: AddressGlobal!
}
"""
A connection to a list of items.
"""
type ParcelShopPostNordConnection {
  """
  A list of edges.
  """
  edges: [ParcelShopPostNordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ParcelShopPostNordEdge {
  """
  The item at the end of the edge.
  """
  node: ParcelShopPostNord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ParcelShopPostNordWhereInput is used for filtering ParcelShopPostNord objects.
Input was generated by ent.
"""
input ParcelShopPostNordWhereInput {
  not: ParcelShopPostNordWhereInput
  and: [ParcelShopPostNordWhereInput!]
  or: [ParcelShopPostNordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  service_point_id field predicates
  """
  servicePointID: String
  servicePointIDNEQ: String
  servicePointIDIn: [String!]
  servicePointIDNotIn: [String!]
  servicePointIDGT: String
  servicePointIDGTE: String
  servicePointIDLT: String
  servicePointIDLTE: String
  servicePointIDContains: String
  servicePointIDHasPrefix: String
  servicePointIDHasSuffix: String
  servicePointIDEqualFold: String
  servicePointIDContainsFold: String
  """
  pudoid field predicates
  """
  pudoid: String
  pudoidNEQ: String
  pudoidIn: [String!]
  pudoidNotIn: [String!]
  pudoidGT: String
  pudoidGTE: String
  pudoidLT: String
  pudoidLTE: String
  pudoidContains: String
  pudoidHasPrefix: String
  pudoidHasSuffix: String
  pudoidEqualFold: String
  pudoidContainsFold: String
  """
  type_id field predicates
  """
  typeID: String
  typeIDNEQ: String
  typeIDIn: [String!]
  typeIDNotIn: [String!]
  typeIDGT: String
  typeIDGTE: String
  typeIDLT: String
  typeIDLTE: String
  typeIDContains: String
  typeIDHasPrefix: String
  typeIDHasSuffix: String
  typeIDEqualFold: String
  typeIDContainsFold: String
  """
  parcel_shop edge predicates
  """
  hasParcelShop: Boolean
  hasParcelShopWith: [ParcelShopWhereInput!]
  """
  address_delivery edge predicates
  """
  hasAddressDelivery: Boolean
  hasAddressDeliveryWith: [AddressGlobalWhereInput!]
}
"""
ParcelShopWhereInput is used for filtering ParcelShop objects.
Input was generated by ent.
"""
input ParcelShopWhereInput {
  not: ParcelShopWhereInput
  and: [ParcelShopWhereInput!]
  or: [ParcelShopWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  last_updated field predicates
  """
  lastUpdated: Time
  lastUpdatedNEQ: Time
  lastUpdatedIn: [Time!]
  lastUpdatedNotIn: [Time!]
  lastUpdatedGT: Time
  lastUpdatedGTE: Time
  lastUpdatedLT: Time
  lastUpdatedLTE: Time
  """
  parcel_shop_dao edge predicates
  """
  hasParcelShopDAO: Boolean
  hasParcelShopDAOWith: [ParcelShopDAOWhereInput!]
  """
  parcel_shop_post_nord edge predicates
  """
  hasParcelShopPostNord: Boolean
  hasParcelShopPostNordWith: [ParcelShopPostNordWhereInput!]
  """
  parcel_shop_gls edge predicates
  """
  hasParcelShopGLS: Boolean
  hasParcelShopGLSWith: [ParcelShopGLSWhereInput!]
  """
  parcel_shop_bring edge predicates
  """
  hasParcelShopBring: Boolean
  hasParcelShopBringWith: [ParcelShopBringWhereInput!]
  """
  carrier_brand edge predicates
  """
  hasCarrierBrand: Boolean
  hasCarrierBrandWith: [CarrierBrandWhereInput!]
  """
  address edge predicates
  """
  hasAddress: Boolean
  hasAddressWith: [AddressGlobalWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  business_hours_period edge predicates
  """
  hasBusinessHoursPeriod: Boolean
  hasBusinessHoursPeriodWith: [BusinessHoursPeriodWhereInput!]
}
type Plan implements Node {
  id: ID!
  label: String!
  rank: Int!
  priceDkk: Int!
  createdAt: Time!
  tenant: [Tenant!]
  planHistoryPlan: [PlanHistory!]
}
"""
A connection to a list of items.
"""
type PlanConnection {
  """
  A list of edges.
  """
  edges: [PlanEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PlanEdge {
  """
  The item at the end of the edge.
  """
  node: Plan
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type PlanHistory implements Node {
  id: ID!
  tenantID: ID!
  createdAt: Time!
  changeHistory: ChangeHistory!
  tenant: Tenant!
  changedBy: User!
  changedFrom: Plan!
}
"""
PlanHistoryWhereInput is used for filtering PlanHistory objects.
Input was generated by ent.
"""
input PlanHistoryWhereInput {
  not: PlanHistoryWhereInput
  and: [PlanHistoryWhereInput!]
  or: [PlanHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  change_history edge predicates
  """
  hasChangeHistory: Boolean
  hasChangeHistoryWith: [ChangeHistoryWhereInput!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  changed_by edge predicates
  """
  hasChangedBy: Boolean
  hasChangedByWith: [UserWhereInput!]
  """
  changed_from edge predicates
  """
  hasChangedFrom: Boolean
  hasChangedFromWith: [PlanWhereInput!]
}
"""
PlanWhereInput is used for filtering Plan objects.
Input was generated by ent.
"""
input PlanWhereInput {
  not: PlanWhereInput
  and: [PlanWhereInput!]
  or: [PlanWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  rank field predicates
  """
  rank: Int
  rankNEQ: Int
  rankIn: [Int!]
  rankNotIn: [Int!]
  rankGT: Int
  rankGTE: Int
  rankLT: Int
  rankLTE: Int
  """
  price_dkk field predicates
  """
  priceDkk: Int
  priceDkkNEQ: Int
  priceDkkIn: [Int!]
  priceDkkNotIn: [Int!]
  priceDkkGT: Int
  priceDkkGTE: Int
  priceDkkLT: Int
  priceDkkLTE: Int
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  plan_history_plan edge predicates
  """
  hasPlanHistoryPlan: Boolean
  hasPlanHistoryPlanWith: [PlanHistoryWhereInput!]
}
type PrintJob implements Node {
  id: ID!
  tenantID: ID!
  status: PrintJobStatus!
  fileExtension: PrintJobFileExtension!
  documentType: PrintJobDocumentType!
  printerMessages: [String!]
  base64PrintData: String!
  createdAt: Time!
  tenant: Tenant!
  printer: Printer!
  colli: Colli
  shipmentParcel: ShipmentParcel
}
"""
PrintJobDocumentType is enum for the field document_type
"""
enum PrintJobDocumentType @goModel(model: "delivrio.io/go/ent/printjob.DocumentType") {
  parcel_label
  unknown
  packing_list
}
"""
PrintJobFileExtension is enum for the field file_extension
"""
enum PrintJobFileExtension @goModel(model: "delivrio.io/go/ent/printjob.FileExtension") {
  pdf
  zpl
  txt
  png
}
"""
PrintJobStatus is enum for the field status
"""
enum PrintJobStatus @goModel(model: "delivrio.io/go/ent/printjob.Status") {
  pending
  at_printer
  success
  canceled
}
"""
PrintJobWhereInput is used for filtering PrintJob objects.
Input was generated by ent.
"""
input PrintJobWhereInput {
  not: PrintJobWhereInput
  and: [PrintJobWhereInput!]
  or: [PrintJobWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  status field predicates
  """
  status: PrintJobStatus
  statusNEQ: PrintJobStatus
  statusIn: [PrintJobStatus!]
  statusNotIn: [PrintJobStatus!]
  """
  file_extension field predicates
  """
  fileExtension: PrintJobFileExtension
  fileExtensionNEQ: PrintJobFileExtension
  fileExtensionIn: [PrintJobFileExtension!]
  fileExtensionNotIn: [PrintJobFileExtension!]
  """
  document_type field predicates
  """
  documentType: PrintJobDocumentType
  documentTypeNEQ: PrintJobDocumentType
  documentTypeIn: [PrintJobDocumentType!]
  documentTypeNotIn: [PrintJobDocumentType!]
  """
  base64_print_data field predicates
  """
  base64PrintData: String
  base64PrintDataNEQ: String
  base64PrintDataIn: [String!]
  base64PrintDataNotIn: [String!]
  base64PrintDataGT: String
  base64PrintDataGTE: String
  base64PrintDataLT: String
  base64PrintDataLTE: String
  base64PrintDataContains: String
  base64PrintDataHasPrefix: String
  base64PrintDataHasSuffix: String
  base64PrintDataEqualFold: String
  base64PrintDataContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  printer edge predicates
  """
  hasPrinter: Boolean
  hasPrinterWith: [PrinterWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  shipment_parcel edge predicates
  """
  hasShipmentParcel: Boolean
  hasShipmentParcelWith: [ShipmentParcelWhereInput!]
}
type Printer implements Node {
  id: ID!
  tenantID: ID!
  """
  ID from desktop print client
  """
  deviceID: String!
  name: String!
  labelZpl: Boolean!
  labelPdf: Boolean!
  labelPng: Boolean!
  document: Boolean!
  rotate180: Boolean!
  useShell: Boolean!
  printSize: PrinterPrintSize!
  createdAt: Time!
  lastPing: Time!
  tenant: Tenant!
  workstation: Workstation!
  printJobs: [PrintJob!]
}
"""
A connection to a list of items.
"""
type PrinterConnection {
  """
  A list of edges.
  """
  edges: [PrinterEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PrinterEdge {
  """
  The item at the end of the edge.
  """
  node: Printer
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
PrinterPrintSize is enum for the field print_size
"""
enum PrinterPrintSize @goModel(model: "delivrio.io/go/ent/printer.PrintSize") {
  A4
  cm_100_150
  cm_100_192
}
"""
PrinterWhereInput is used for filtering Printer objects.
Input was generated by ent.
"""
input PrinterWhereInput {
  not: PrinterWhereInput
  and: [PrinterWhereInput!]
  or: [PrinterWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  device_id field predicates
  """
  deviceID: String
  deviceIDNEQ: String
  deviceIDIn: [String!]
  deviceIDNotIn: [String!]
  deviceIDGT: String
  deviceIDGTE: String
  deviceIDLT: String
  deviceIDLTE: String
  deviceIDContains: String
  deviceIDHasPrefix: String
  deviceIDHasSuffix: String
  deviceIDEqualFold: String
  deviceIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  label_zpl field predicates
  """
  labelZpl: Boolean
  labelZplNEQ: Boolean
  """
  label_pdf field predicates
  """
  labelPdf: Boolean
  labelPdfNEQ: Boolean
  """
  label_png field predicates
  """
  labelPng: Boolean
  labelPngNEQ: Boolean
  """
  document field predicates
  """
  document: Boolean
  documentNEQ: Boolean
  """
  rotate_180 field predicates
  """
  rotate180: Boolean
  rotate180NEQ: Boolean
  """
  use_shell field predicates
  """
  useShell: Boolean
  useShellNEQ: Boolean
  """
  print_size field predicates
  """
  printSize: PrinterPrintSize
  printSizeNEQ: PrinterPrintSize
  printSizeIn: [PrinterPrintSize!]
  printSizeNotIn: [PrinterPrintSize!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  last_ping field predicates
  """
  lastPing: Time
  lastPingNEQ: Time
  lastPingIn: [Time!]
  lastPingNotIn: [Time!]
  lastPingGT: Time
  lastPingGTE: Time
  lastPingLT: Time
  lastPingLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  workstation edge predicates
  """
  hasWorkstation: Boolean
  hasWorkstationWith: [WorkstationWhereInput!]
  """
  print_jobs edge predicates
  """
  hasPrintJobs: Boolean
  hasPrintJobsWith: [PrintJobWhereInput!]
}
type Product implements Node {
  id: ID!
  tenantID: ID!
  externalID: String
  title: String!
  bodyHTML: String
  status: ProductStatus!
  createdAt: Time
  updatedAt: Time!
  tenant: Tenant!
  productTags: [ProductTag!]
  productVariant: [ProductVariant!]
  productImage: [ProductImage!]
}
"""
A connection to a list of items.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProductEdge {
  """
  The item at the end of the edge.
  """
  node: Product
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ProductImage implements Node {
  id: ID!
  tenantID: ID!
  externalID: String
  url: String!
  tenant: Tenant!
  product: Product!
  productVariant: [ProductVariant!]
}
"""
A connection to a list of items.
"""
type ProductImageConnection {
  """
  A list of edges.
  """
  edges: [ProductImageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProductImageEdge {
  """
  The item at the end of the edge.
  """
  node: ProductImage
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProductImageWhereInput is used for filtering ProductImage objects.
Input was generated by ent.
"""
input ProductImageWhereInput {
  not: ProductImageWhereInput
  and: [ProductImageWhereInput!]
  or: [ProductImageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  external_id field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  product edge predicates
  """
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
  """
  product_variant edge predicates
  """
  hasProductVariant: Boolean
  hasProductVariantWith: [ProductVariantWhereInput!]
}
"""
ProductStatus is enum for the field status
"""
enum ProductStatus @goModel(model: "delivrio.io/go/ent/product.Status") {
  active
  archived
  draft
}
type ProductTag implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  createdAt: Time
  tenant: Tenant!
  products: [Product!]
}
"""
A connection to a list of items.
"""
type ProductTagConnection {
  """
  A list of edges.
  """
  edges: [ProductTagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProductTagEdge {
  """
  The item at the end of the edge.
  """
  node: ProductTag
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProductTagWhereInput is used for filtering ProductTag objects.
Input was generated by ent.
"""
input ProductTagWhereInput {
  not: ProductTagWhereInput
  and: [ProductTagWhereInput!]
  or: [ProductTagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  products edge predicates
  """
  hasProducts: Boolean
  hasProductsWith: [ProductWhereInput!]
}
type ProductVariant implements Node {
  id: ID!
  tenantID: ID!
  archived: Boolean!
  externalID: String
  description: String
  eanNumber: String
  weightG: Int
  dimensionLength: Int
  dimensionWidth: Int
  dimensionHeight: Int
  createdAt: Time
  updatedAt: Time!
  tenant: Tenant!
  product: Product!
  orderLines: [OrderLine!]
  productImage: [ProductImage!]
  inventoryItem: InventoryItem
}
"""
A connection to a list of items.
"""
type ProductVariantConnection {
  """
  A list of edges.
  """
  edges: [ProductVariantEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProductVariantEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariant
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ProductVariantWhereInput is used for filtering ProductVariant objects.
Input was generated by ent.
"""
input ProductVariantWhereInput {
  not: ProductVariantWhereInput
  and: [ProductVariantWhereInput!]
  or: [ProductVariantWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  archived field predicates
  """
  archived: Boolean
  archivedNEQ: Boolean
  """
  external_ID field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  ean_number field predicates
  """
  eanNumber: String
  eanNumberNEQ: String
  eanNumberIn: [String!]
  eanNumberNotIn: [String!]
  eanNumberGT: String
  eanNumberGTE: String
  eanNumberLT: String
  eanNumberLTE: String
  eanNumberContains: String
  eanNumberHasPrefix: String
  eanNumberHasSuffix: String
  eanNumberIsNil: Boolean
  eanNumberNotNil: Boolean
  eanNumberEqualFold: String
  eanNumberContainsFold: String
  """
  weight_g field predicates
  """
  weightG: Int
  weightGNEQ: Int
  weightGIn: [Int!]
  weightGNotIn: [Int!]
  weightGGT: Int
  weightGGTE: Int
  weightGLT: Int
  weightGLTE: Int
  weightGIsNil: Boolean
  weightGNotNil: Boolean
  """
  dimension_length field predicates
  """
  dimensionLength: Int
  dimensionLengthNEQ: Int
  dimensionLengthIn: [Int!]
  dimensionLengthNotIn: [Int!]
  dimensionLengthGT: Int
  dimensionLengthGTE: Int
  dimensionLengthLT: Int
  dimensionLengthLTE: Int
  dimensionLengthIsNil: Boolean
  dimensionLengthNotNil: Boolean
  """
  dimension_width field predicates
  """
  dimensionWidth: Int
  dimensionWidthNEQ: Int
  dimensionWidthIn: [Int!]
  dimensionWidthNotIn: [Int!]
  dimensionWidthGT: Int
  dimensionWidthGTE: Int
  dimensionWidthLT: Int
  dimensionWidthLTE: Int
  dimensionWidthIsNil: Boolean
  dimensionWidthNotNil: Boolean
  """
  dimension_height field predicates
  """
  dimensionHeight: Int
  dimensionHeightNEQ: Int
  dimensionHeightIn: [Int!]
  dimensionHeightNotIn: [Int!]
  dimensionHeightGT: Int
  dimensionHeightGTE: Int
  dimensionHeightLT: Int
  dimensionHeightLTE: Int
  dimensionHeightIsNil: Boolean
  dimensionHeightNotNil: Boolean
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  product edge predicates
  """
  hasProduct: Boolean
  hasProductWith: [ProductWhereInput!]
  """
  order_lines edge predicates
  """
  hasOrderLines: Boolean
  hasOrderLinesWith: [OrderLineWhereInput!]
  """
  product_image edge predicates
  """
  hasProductImage: Boolean
  hasProductImageWith: [ProductImageWhereInput!]
  """
  inventory_item edge predicates
  """
  hasInventoryItem: Boolean
  hasInventoryItemWith: [InventoryItemWhereInput!]
}
"""
ProductWhereInput is used for filtering Product objects.
Input was generated by ent.
"""
input ProductWhereInput {
  not: ProductWhereInput
  and: [ProductWhereInput!]
  or: [ProductWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  external_id field predicates
  """
  externalID: String
  externalIDNEQ: String
  externalIDIn: [String!]
  externalIDNotIn: [String!]
  externalIDGT: String
  externalIDGTE: String
  externalIDLT: String
  externalIDLTE: String
  externalIDContains: String
  externalIDHasPrefix: String
  externalIDHasSuffix: String
  externalIDIsNil: Boolean
  externalIDNotNil: Boolean
  externalIDEqualFold: String
  externalIDContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  body_html field predicates
  """
  bodyHTML: String
  bodyHTMLNEQ: String
  bodyHTMLIn: [String!]
  bodyHTMLNotIn: [String!]
  bodyHTMLGT: String
  bodyHTMLGTE: String
  bodyHTMLLT: String
  bodyHTMLLTE: String
  bodyHTMLContains: String
  bodyHTMLHasPrefix: String
  bodyHTMLHasSuffix: String
  bodyHTMLIsNil: Boolean
  bodyHTMLNotNil: Boolean
  bodyHTMLEqualFold: String
  bodyHTMLContainsFold: String
  """
  status field predicates
  """
  status: ProductStatus
  statusNEQ: ProductStatus
  statusIn: [ProductStatus!]
  statusNotIn: [ProductStatus!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  product_tags edge predicates
  """
  hasProductTags: Boolean
  hasProductTagsWith: [ProductTagWhereInput!]
  """
  product_variant edge predicates
  """
  hasProductVariant: Boolean
  hasProductVariantWith: [ProductVariantWhereInput!]
  """
  product_image edge predicates
  """
  hasProductImage: Boolean
  hasProductImageWith: [ProductImageWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  apiTokens(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for APITokens returned from the connection.
    """
    where: APITokenWhereInput
  ): APITokenConnection!
  accessRights(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for AccessRights returned from the connection.
    """
    where: AccessRightWhereInput
  ): AccessRightConnection!
  addresses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Addresses returned from the connection.
    """
    where: AddressWhereInput
  ): AddressConnection!
  addressGlobals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for AddressGlobals returned from the connection.
    """
    where: AddressGlobalWhereInput
  ): AddressGlobalConnection!
  businessHoursPeriods(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for BusinessHoursPeriods returned from the connection.
    """
    where: BusinessHoursPeriodWhereInput
  ): BusinessHoursPeriodConnection!
  carriers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Carriers returned from the connection.
    """
    where: CarrierWhereInput
  ): CarrierConnection!
  carrierAdditionalServiceBrings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceBrings returned from the connection.
    """
    where: CarrierAdditionalServiceBringWhereInput
  ): CarrierAdditionalServiceBringConnection!
  carrierAdditionalServiceDaOs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceDAOs returned from the connection.
    """
    where: CarrierAdditionalServiceDAOWhereInput
  ): CarrierAdditionalServiceDAOConnection!
  carrierAdditionalServiceDfs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceDFs returned from the connection.
    """
    where: CarrierAdditionalServiceDFWhereInput
  ): CarrierAdditionalServiceDFConnection!
  carrierAdditionalServiceDsVs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceDSVs returned from the connection.
    """
    where: CarrierAdditionalServiceDSVWhereInput
  ): CarrierAdditionalServiceDSVConnection!
  carrierAdditionalServiceEasyPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceEasyPosts returned from the connection.
    """
    where: CarrierAdditionalServiceEasyPostWhereInput
  ): CarrierAdditionalServiceEasyPostConnection!
  carrierAdditionalServiceGlSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceGLSs returned from the connection.
    """
    where: CarrierAdditionalServiceGLSWhereInput
  ): CarrierAdditionalServiceGLSConnection!
  carrierAdditionalServicePostNords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServicePostNords returned from the connection.
    """
    where: CarrierAdditionalServicePostNordWhereInput
  ): CarrierAdditionalServicePostNordConnection!
  carrierAdditionalServiceUspSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierAdditionalServiceUSPSs returned from the connection.
    """
    where: CarrierAdditionalServiceUSPSWhereInput
  ): CarrierAdditionalServiceUSPSConnection!
  carrierBrands(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierBrands returned from the connection.
    """
    where: CarrierBrandWhereInput
  ): CarrierBrandConnection!
  carrierBrings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierBrings returned from the connection.
    """
    where: CarrierBringWhereInput
  ): CarrierBringConnection!
  carrierDaOs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierDAOs returned from the connection.
    """
    where: CarrierDAOWhereInput
  ): CarrierDAOConnection!
  carrierDfs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierDFs returned from the connection.
    """
    where: CarrierDFWhereInput
  ): CarrierDFConnection!
  carrierDsVs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierDSVs returned from the connection.
    """
    where: CarrierDSVWhereInput
  ): CarrierDSVConnection!
  carrierEasyPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierEasyPosts returned from the connection.
    """
    where: CarrierEasyPostWhereInput
  ): CarrierEasyPostConnection!
  carrierGlSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierGLSs returned from the connection.
    """
    where: CarrierGLSWhereInput
  ): CarrierGLSConnection!
  carrierPostNords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierPostNords returned from the connection.
    """
    where: CarrierPostNordWhereInput
  ): CarrierPostNordConnection!
  carrierServices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierServices returned from the connection.
    """
    where: CarrierServiceWhereInput
  ): CarrierServiceConnection!
  carrierServiceBrings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierServiceBrings returned from the connection.
    """
    where: CarrierServiceBringWhereInput
  ): CarrierServiceBringConnection!
  carrierServiceDaOs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierServiceDAOs returned from the connection.
    """
    where: CarrierServiceDAOWhereInput
  ): CarrierServiceDAOConnection!
  carrierServiceDfs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierServiceDFs returned from the connection.
    """
    where: CarrierServiceDFWhereInput
  ): CarrierServiceDFConnection!
  carrierServiceDsVs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierServiceDSVs returned from the connection.
    """
    where: CarrierServiceDSVWhereInput
  ): CarrierServiceDSVConnection!
  carrierServiceEasyPosts: [CarrierServiceEasyPost!]!
  carrierServiceGlSs: [CarrierServiceGLS!]!
  carrierServicePostNords: [CarrierServicePostNord!]!
  carrierUspSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CarrierUSPSs returned from the connection.
    """
    where: CarrierUSPSWhereInput
  ): CarrierUSPSConnection!
  changeHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ChangeHistories returned from the connection.
    """
    orderBy: ChangeHistoryOrder

    """
    Filtering options for ChangeHistories returned from the connection.
    """
    where: ChangeHistoryWhereInput
  ): ChangeHistoryConnection!
  collis(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Collis returned from the connection.
    """
    where: ColliWhereInput
  ): ColliConnection!
  connectOptionCarriers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ConnectOptionCarriers returned from the connection.
    """
    where: ConnectOptionCarrierWhereInput
  ): ConnectOptionCarrierConnection!
  connectOptionPlatforms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ConnectOptionPlatforms returned from the connection.
    """
    where: ConnectOptionPlatformWhereInput
  ): ConnectOptionPlatformConnection!
  connections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Connections returned from the connection.
    """
    where: ConnectionWhereInput
  ): ConnectionConnection!
  connectionBrands(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ConnectionBrands returned from the connection.
    """
    where: ConnectionBrandWhereInput
  ): ConnectionBrandConnection!
  connectionLookups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ConnectionLookups returned from the connection.
    """
    orderBy: ConnectionLookupOrder

    """
    Filtering options for ConnectionLookups returned from the connection.
    """
    where: ConnectionLookupWhereInput
  ): ConnectionLookupConnection!
  connectionShopifies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ConnectionShopifies returned from the connection.
    """
    where: ConnectionShopifyWhereInput
  ): ConnectionShopifyConnection!
  consolidations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Consolidations returned from the connection.
    """
    orderBy: ConsolidationOrder

    """
    Filtering options for Consolidations returned from the connection.
    """
    where: ConsolidationWhereInput
  ): ConsolidationConnection!
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Contacts returned from the connection.
    """
    where: ContactWhereInput
  ): ContactConnection!
  countries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Countries returned from the connection.
    """
    where: CountryWhereInput
  ): CountryConnection!
  countryHarmonizedCodes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for CountryHarmonizedCodes returned from the connection.
    """
    where: CountryHarmonizedCodeWhereInput
  ): CountryHarmonizedCodeConnection!
  currencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Currencies returned from the connection.
    """
    where: CurrencyWhereInput
  ): CurrencyConnection!
  deliveryOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptions returned from the connection.
    """
    where: DeliveryOptionWhereInput
  ): DeliveryOptionConnection!
  deliveryOptionBrings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionBrings returned from the connection.
    """
    where: DeliveryOptionBringWhereInput
  ): DeliveryOptionBringConnection!
  deliveryOptionDaOs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionDAOs returned from the connection.
    """
    where: DeliveryOptionDAOWhereInput
  ): DeliveryOptionDAOConnection!
  deliveryOptionDfs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionDFs returned from the connection.
    """
    where: DeliveryOptionDFWhereInput
  ): DeliveryOptionDFConnection!
  deliveryOptionDsVs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionDSVs returned from the connection.
    """
    where: DeliveryOptionDSVWhereInput
  ): DeliveryOptionDSVConnection!
  deliveryOptionEasyPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionEasyPosts returned from the connection.
    """
    where: DeliveryOptionEasyPostWhereInput
  ): DeliveryOptionEasyPostConnection!
  deliveryOptionGlSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionGLSs returned from the connection.
    """
    where: DeliveryOptionGLSWhereInput
  ): DeliveryOptionGLSConnection!
  deliveryOptionPostNords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionPostNords returned from the connection.
    """
    where: DeliveryOptionPostNordWhereInput
  ): DeliveryOptionPostNordConnection!
  deliveryOptionUspSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryOptionUSPSs returned from the connection.
    """
    where: DeliveryOptionUSPSWhereInput
  ): DeliveryOptionUSPSConnection!
  deliveryRules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryRules returned from the connection.
    """
    where: DeliveryRuleWhereInput
  ): DeliveryRuleConnection!
  deliveryRuleConstraints(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryRuleConstraints returned from the connection.
    """
    where: DeliveryRuleConstraintWhereInput
  ): DeliveryRuleConstraintConnection!
  deliveryRuleConstraintGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DeliveryRuleConstraintGroups returned from the connection.
    """
    where: DeliveryRuleConstraintGroupWhereInput
  ): DeliveryRuleConstraintGroupConnection!
  documents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Documents returned from the connection.
    """
    where: DocumentWhereInput
  ): DocumentConnection!
  documentFiles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for DocumentFiles returned from the connection.
    """
    where: DocumentFileWhereInput
  ): DocumentFileConnection!
  emailTemplates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for EmailTemplates returned from the connection.
    """
    where: EmailTemplateWhereInput
  ): EmailTemplateConnection!
  hypothesisTests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for HypothesisTests returned from the connection.
    """
    where: HypothesisTestWhereInput
  ): HypothesisTestConnection!
  hypothesisTestDeliveryOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for HypothesisTestDeliveryOptions returned from the connection.
    """
    where: HypothesisTestDeliveryOptionWhereInput
  ): HypothesisTestDeliveryOptionConnection!
  hypothesisTestDeliveryOptionLookups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for HypothesisTestDeliveryOptionLookups returned from the connection.
    """
    where: HypothesisTestDeliveryOptionLookupWhereInput
  ): HypothesisTestDeliveryOptionLookupConnection!
  hypothesisTestDeliveryOptionRequests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for HypothesisTestDeliveryOptionRequests returned from the connection.
    """
    where: HypothesisTestDeliveryOptionRequestWhereInput
  ): HypothesisTestDeliveryOptionRequestConnection!
  inventoryItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for InventoryItems returned from the connection.
    """
    where: InventoryItemWhereInput
  ): InventoryItemConnection!
  languages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Languages returned from the connection.
    """
    where: LanguageWhereInput
  ): LanguageConnection!
  locations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Locations returned from the connection.
    """
    where: LocationWhereInput
  ): LocationConnection!
  locationTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for LocationTags returned from the connection.
    """
    where: LocationTagWhereInput
  ): LocationTagConnection!
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Notifications returned from the connection.
    """
    where: NotificationWhereInput
  ): NotificationConnection!
  orders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Orders returned from the connection.
    """
    orderBy: OrderOrder

    """
    Filtering options for Orders returned from the connection.
    """
    where: OrderWhereInput
  ): OrderConnection!
  orderSenders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for OrderSenders returned from the connection.
    """
    where: OrderSenderWhereInput
  ): OrderSenderConnection!
  packagings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Packagings returned from the connection.
    """
    where: PackagingWhereInput
  ): PackagingConnection!
  packagingDfs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for PackagingDFs returned from the connection.
    """
    where: PackagingDFWhereInput
  ): PackagingDFConnection!
  packagingUspSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for PackagingUSPSs returned from the connection.
    """
    where: PackagingUSPSWhereInput
  ): PackagingUSPSConnection!
  packagingUSPSProcessingCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for PackagingUSPSProcessingCategories returned from the connection.
    """
    where: PackagingUSPSProcessingCategoryWhereInput
  ): PackagingUSPSProcessingCategoryConnection!
  packagingUSPSRateIndicators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for PackagingUSPSRateIndicators returned from the connection.
    """
    where: PackagingUSPSRateIndicatorWhereInput
  ): PackagingUSPSRateIndicatorConnection!
  pallets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Pallets returned from the connection.
    """
    where: PalletWhereInput
  ): PalletConnection!
  parcelShops(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ParcelShops returned from the connection.
    """
    where: ParcelShopWhereInput
  ): ParcelShopConnection!
  parcelShopBrings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ParcelShopBrings returned from the connection.
    """
    where: ParcelShopBringWhereInput
  ): ParcelShopBringConnection!
  parcelShopDaOs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ParcelShopDAOs returned from the connection.
    """
    where: ParcelShopDAOWhereInput
  ): ParcelShopDAOConnection!
  parcelShopGlSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ParcelShopGLSs returned from the connection.
    """
    where: ParcelShopGLSWhereInput
  ): ParcelShopGLSConnection!
  parcelShopPostNords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ParcelShopPostNords returned from the connection.
    """
    where: ParcelShopPostNordWhereInput
  ): ParcelShopPostNordConnection!
  plans(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Plans returned from the connection.
    """
    where: PlanWhereInput
  ): PlanConnection!
  printers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Printers returned from the connection.
    """
    where: PrinterWhereInput
  ): PrinterConnection!
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Products returned from the connection.
    """
    where: ProductWhereInput
  ): ProductConnection!
  productImages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProductImages returned from the connection.
    """
    where: ProductImageWhereInput
  ): ProductImageConnection!
  productTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProductTags returned from the connection.
    """
    where: ProductTagWhereInput
  ): ProductTagConnection!
  productVariants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ProductVariants returned from the connection.
    """
    where: ProductVariantWhereInput
  ): ProductVariantConnection!
  returnCollis(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ReturnCollis returned from the connection.
    """
    orderBy: ReturnColliOrder

    """
    Filtering options for ReturnCollis returned from the connection.
    """
    where: ReturnColliWhereInput
  ): ReturnColliConnection!
  returnColliHistories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ReturnColliHistories returned from the connection.
    """
    where: ReturnColliHistoryWhereInput
  ): ReturnColliHistoryConnection!
  returnOrderLines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ReturnOrderLines returned from the connection.
    """
    where: ReturnOrderLineWhereInput
  ): ReturnOrderLineConnection!
  returnPortals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ReturnPortals returned from the connection.
    """
    where: ReturnPortalWhereInput
  ): ReturnPortalConnection!
  returnPortalClaims(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ReturnPortalClaims returned from the connection.
    """
    where: ReturnPortalClaimWhereInput
  ): ReturnPortalClaimConnection!
  seatGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for SeatGroups returned from the connection.
    """
    where: SeatGroupWhereInput
  ): SeatGroupConnection!
  seatGroupAccessRights(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for SeatGroupAccessRights returned from the connection.
    """
    where: SeatGroupAccessRightWhereInput
  ): SeatGroupAccessRightConnection!
  shipments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Shipments returned from the connection.
    """
    orderBy: ShipmentOrder

    """
    Filtering options for Shipments returned from the connection.
    """
    where: ShipmentWhereInput
  ): ShipmentConnection!
  shipmentBrings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentBrings returned from the connection.
    """
    where: ShipmentBringWhereInput
  ): ShipmentBringConnection!
  shipmentDaOs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentDAOs returned from the connection.
    """
    where: ShipmentDAOWhereInput
  ): ShipmentDAOConnection!
  shipmentDfs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentDFs returned from the connection.
    """
    where: ShipmentDFWhereInput
  ): ShipmentDFConnection!
  shipmentDsVs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentDSVs returned from the connection.
    """
    where: ShipmentDSVWhereInput
  ): ShipmentDSVConnection!
  shipmentEasyPosts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentEasyPosts returned from the connection.
    """
    where: ShipmentEasyPostWhereInput
  ): ShipmentEasyPostConnection!
  shipmentGlSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentGLSs returned from the connection.
    """
    where: ShipmentGLSWhereInput
  ): ShipmentGLSConnection!
  shipmentPallets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentPallets returned from the connection.
    """
    where: ShipmentPalletWhereInput
  ): ShipmentPalletConnection!
  shipmentParcels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for ShipmentParcels returned from the connection.
    """
    orderBy: ShipmentParcelOrder

    """
    Filtering options for ShipmentParcels returned from the connection.
    """
    where: ShipmentParcelWhereInput
  ): ShipmentParcelConnection!
  shipmentPostNords(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentPostNords returned from the connection.
    """
    where: ShipmentPostNordWhereInput
  ): ShipmentPostNordConnection!
  shipmentUspSs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ShipmentUSPSs returned from the connection.
    """
    where: ShipmentUSPSWhereInput
  ): ShipmentUSPSConnection!
  signupOptionsSlice(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for SignupOptionsSlice returned from the connection.
    """
    where: SignupOptionsWhereInput
  ): SignupOptionsConnection!
  systemEventsSlice(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for SystemEventsSlice returned from the connection.
    """
    where: SystemEventsWhereInput
  ): SystemEventsConnection!
  tenants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Tenants returned from the connection.
    """
    where: TenantWhereInput
  ): TenantConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  userSeats(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for UserSeats returned from the connection.
    """
    where: UserSeatWhereInput
  ): UserSeatConnection!
  workstations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Workstations returned from the connection.
    """
    where: WorkstationWhereInput
  ): WorkstationConnection!
}
type ReturnColli implements Node {
  id: ID!
  tenantID: ID!
  expectedAt: Time
  labelPdf: String
  labelPng: String
  qrCodePng: String
  comment: String
  createdAt: Time!
  status: ReturnColliStatus!
  """
  Timestamp of email successfully sent after status changed to received
  """
  emailReceived: Time
  """
  Timestamp of email successfully sent after status changed to accepted
  """
  emailAccepted: Time
  """
  Timestamp of email successfully sent after status changed to pending
  """
  emailConfirmationLabel: Time
  """
  Timestamp of email successfully sent after status changed to pending
  """
  emailConfirmationQrCode: Time
  tenant: Tenant!
  recipient: Address!
  sender: Address!
  order: Order!
  deliveryOption: DeliveryOption
  returnPortal: ReturnPortal!
  """
  Allows packaging to be predefined for this colli and will be used for the return shipment parcel
  """
  packaging: Packaging
  returnOrderLine: [ReturnOrderLine!]
  returnColliHistory: [ReturnColliHistory!]
}
"""
A connection to a list of items.
"""
type ReturnColliConnection {
  """
  A list of edges.
  """
  edges: [ReturnColliEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReturnColliEdge {
  """
  The item at the end of the edge.
  """
  node: ReturnColli
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ReturnColliHistory implements Node {
  id: ID!
  tenantID: ID!
  description: String!
  type: ReturnColliHistoryType!
  changeHistory: ChangeHistory!
  tenant: Tenant!
  returnColli: ReturnColli!
}
"""
A connection to a list of items.
"""
type ReturnColliHistoryConnection {
  """
  A list of edges.
  """
  edges: [ReturnColliHistoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReturnColliHistoryEdge {
  """
  The item at the end of the edge.
  """
  node: ReturnColliHistory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ReturnColliHistoryType is enum for the field type
"""
enum ReturnColliHistoryType @goModel(model: "delivrio.io/go/ent/returncollihistory.Type") {
  create
  update
  delete
  notify
}
"""
ReturnColliHistoryWhereInput is used for filtering ReturnColliHistory objects.
Input was generated by ent.
"""
input ReturnColliHistoryWhereInput {
  not: ReturnColliHistoryWhereInput
  and: [ReturnColliHistoryWhereInput!]
  or: [ReturnColliHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  type field predicates
  """
  type: ReturnColliHistoryType
  typeNEQ: ReturnColliHistoryType
  typeIn: [ReturnColliHistoryType!]
  typeNotIn: [ReturnColliHistoryType!]
  """
  change_history edge predicates
  """
  hasChangeHistory: Boolean
  hasChangeHistoryWith: [ChangeHistoryWhereInput!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  return_colli edge predicates
  """
  hasReturnColli: Boolean
  hasReturnColliWith: [ReturnColliWhereInput!]
}
"""
Ordering options for ReturnColli connections
"""
input ReturnColliOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ReturnCollis.
  """
  field: ReturnColliOrderField!
}
"""
Properties by which ReturnColli connections can be ordered.
"""
enum ReturnColliOrderField {
  CREATED_AT
}
"""
ReturnColliStatus is enum for the field status
"""
enum ReturnColliStatus @goModel(model: "delivrio.io/go/ent/returncolli.Status") {
  Opened
  Pending
  Inbound
  Received
  Accepted
  Declined
  Deleted
}
"""
ReturnColliWhereInput is used for filtering ReturnColli objects.
Input was generated by ent.
"""
input ReturnColliWhereInput {
  not: ReturnColliWhereInput
  and: [ReturnColliWhereInput!]
  or: [ReturnColliWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  expected_at field predicates
  """
  expectedAt: Time
  expectedAtNEQ: Time
  expectedAtIn: [Time!]
  expectedAtNotIn: [Time!]
  expectedAtGT: Time
  expectedAtGTE: Time
  expectedAtLT: Time
  expectedAtLTE: Time
  expectedAtIsNil: Boolean
  expectedAtNotNil: Boolean
  """
  label_pdf field predicates
  """
  labelPdf: String
  labelPdfNEQ: String
  labelPdfIn: [String!]
  labelPdfNotIn: [String!]
  labelPdfGT: String
  labelPdfGTE: String
  labelPdfLT: String
  labelPdfLTE: String
  labelPdfContains: String
  labelPdfHasPrefix: String
  labelPdfHasSuffix: String
  labelPdfIsNil: Boolean
  labelPdfNotNil: Boolean
  labelPdfEqualFold: String
  labelPdfContainsFold: String
  """
  label_png field predicates
  """
  labelPng: String
  labelPngNEQ: String
  labelPngIn: [String!]
  labelPngNotIn: [String!]
  labelPngGT: String
  labelPngGTE: String
  labelPngLT: String
  labelPngLTE: String
  labelPngContains: String
  labelPngHasPrefix: String
  labelPngHasSuffix: String
  labelPngIsNil: Boolean
  labelPngNotNil: Boolean
  labelPngEqualFold: String
  labelPngContainsFold: String
  """
  qr_code_png field predicates
  """
  qrCodePng: String
  qrCodePngNEQ: String
  qrCodePngIn: [String!]
  qrCodePngNotIn: [String!]
  qrCodePngGT: String
  qrCodePngGTE: String
  qrCodePngLT: String
  qrCodePngLTE: String
  qrCodePngContains: String
  qrCodePngHasPrefix: String
  qrCodePngHasSuffix: String
  qrCodePngIsNil: Boolean
  qrCodePngNotNil: Boolean
  qrCodePngEqualFold: String
  qrCodePngContainsFold: String
  """
  comment field predicates
  """
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  status field predicates
  """
  status: ReturnColliStatus
  statusNEQ: ReturnColliStatus
  statusIn: [ReturnColliStatus!]
  statusNotIn: [ReturnColliStatus!]
  """
  email_received field predicates
  """
  emailReceived: Time
  emailReceivedNEQ: Time
  emailReceivedIn: [Time!]
  emailReceivedNotIn: [Time!]
  emailReceivedGT: Time
  emailReceivedGTE: Time
  emailReceivedLT: Time
  emailReceivedLTE: Time
  emailReceivedIsNil: Boolean
  emailReceivedNotNil: Boolean
  """
  email_accepted field predicates
  """
  emailAccepted: Time
  emailAcceptedNEQ: Time
  emailAcceptedIn: [Time!]
  emailAcceptedNotIn: [Time!]
  emailAcceptedGT: Time
  emailAcceptedGTE: Time
  emailAcceptedLT: Time
  emailAcceptedLTE: Time
  emailAcceptedIsNil: Boolean
  emailAcceptedNotNil: Boolean
  """
  email_confirmation_label field predicates
  """
  emailConfirmationLabel: Time
  emailConfirmationLabelNEQ: Time
  emailConfirmationLabelIn: [Time!]
  emailConfirmationLabelNotIn: [Time!]
  emailConfirmationLabelGT: Time
  emailConfirmationLabelGTE: Time
  emailConfirmationLabelLT: Time
  emailConfirmationLabelLTE: Time
  emailConfirmationLabelIsNil: Boolean
  emailConfirmationLabelNotNil: Boolean
  """
  email_confirmation_qr_code field predicates
  """
  emailConfirmationQrCode: Time
  emailConfirmationQrCodeNEQ: Time
  emailConfirmationQrCodeIn: [Time!]
  emailConfirmationQrCodeNotIn: [Time!]
  emailConfirmationQrCodeGT: Time
  emailConfirmationQrCodeGTE: Time
  emailConfirmationQrCodeLT: Time
  emailConfirmationQrCodeLTE: Time
  emailConfirmationQrCodeIsNil: Boolean
  emailConfirmationQrCodeNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  recipient edge predicates
  """
  hasRecipient: Boolean
  hasRecipientWith: [AddressWhereInput!]
  """
  sender edge predicates
  """
  hasSender: Boolean
  hasSenderWith: [AddressWhereInput!]
  """
  order edge predicates
  """
  hasOrder: Boolean
  hasOrderWith: [OrderWhereInput!]
  """
  delivery_option edge predicates
  """
  hasDeliveryOption: Boolean
  hasDeliveryOptionWith: [DeliveryOptionWhereInput!]
  """
  return_portal edge predicates
  """
  hasReturnPortal: Boolean
  hasReturnPortalWith: [ReturnPortalWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
  """
  return_order_line edge predicates
  """
  hasReturnOrderLine: Boolean
  hasReturnOrderLineWith: [ReturnOrderLineWhereInput!]
  """
  return_colli_history edge predicates
  """
  hasReturnColliHistory: Boolean
  hasReturnColliHistoryWith: [ReturnColliHistoryWhereInput!]
}
type ReturnOrderLine implements Node {
  id: ID!
  tenantID: ID!
  units: Int!
  tenant: Tenant!
  returnColli: ReturnColli!
  orderLine: OrderLine!
  returnPortalClaim: ReturnPortalClaim!
}
"""
A connection to a list of items.
"""
type ReturnOrderLineConnection {
  """
  A list of edges.
  """
  edges: [ReturnOrderLineEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReturnOrderLineEdge {
  """
  The item at the end of the edge.
  """
  node: ReturnOrderLine
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ReturnOrderLineWhereInput is used for filtering ReturnOrderLine objects.
Input was generated by ent.
"""
input ReturnOrderLineWhereInput {
  not: ReturnOrderLineWhereInput
  and: [ReturnOrderLineWhereInput!]
  or: [ReturnOrderLineWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  units field predicates
  """
  units: Int
  unitsNEQ: Int
  unitsIn: [Int!]
  unitsNotIn: [Int!]
  unitsGT: Int
  unitsGTE: Int
  unitsLT: Int
  unitsLTE: Int
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  return_colli edge predicates
  """
  hasReturnColli: Boolean
  hasReturnColliWith: [ReturnColliWhereInput!]
  """
  order_line edge predicates
  """
  hasOrderLine: Boolean
  hasOrderLineWith: [OrderLineWhereInput!]
  """
  return_portal_claim edge predicates
  """
  hasReturnPortalClaim: Boolean
  hasReturnPortalClaimWith: [ReturnPortalClaimWhereInput!]
}
type ReturnPortal implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  returnOpenHours: Int!
  automaticallyAccept: Boolean!
  tenant: Tenant!
  returnPortalClaim: [ReturnPortalClaim!]
  returnLocation: [Location!]
  deliveryOptions: [DeliveryOption!]
  connection: Connection
  emailConfirmationLabel: EmailTemplate
  emailConfirmationQrCode: EmailTemplate
  emailReceived: EmailTemplate
  emailAccepted: EmailTemplate
  returnColli: [ReturnColli!]
}
type ReturnPortalClaim implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  description: String!
  restockable: Boolean!
  archived: Boolean!
  tenant: Tenant!
  returnPortal: ReturnPortal!
  """
  Return to address
  """
  returnLocation: Location
  returnOrderLine: [ReturnOrderLine!]
}
"""
A connection to a list of items.
"""
type ReturnPortalClaimConnection {
  """
  A list of edges.
  """
  edges: [ReturnPortalClaimEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReturnPortalClaimEdge {
  """
  The item at the end of the edge.
  """
  node: ReturnPortalClaim
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ReturnPortalClaimWhereInput is used for filtering ReturnPortalClaim objects.
Input was generated by ent.
"""
input ReturnPortalClaimWhereInput {
  not: ReturnPortalClaimWhereInput
  and: [ReturnPortalClaimWhereInput!]
  or: [ReturnPortalClaimWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  restockable field predicates
  """
  restockable: Boolean
  restockableNEQ: Boolean
  """
  archived field predicates
  """
  archived: Boolean
  archivedNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  return_portal edge predicates
  """
  hasReturnPortal: Boolean
  hasReturnPortalWith: [ReturnPortalWhereInput!]
  """
  return_location edge predicates
  """
  hasReturnLocation: Boolean
  hasReturnLocationWith: [LocationWhereInput!]
  """
  return_order_line edge predicates
  """
  hasReturnOrderLine: Boolean
  hasReturnOrderLineWith: [ReturnOrderLineWhereInput!]
}
"""
A connection to a list of items.
"""
type ReturnPortalConnection {
  """
  A list of edges.
  """
  edges: [ReturnPortalEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ReturnPortalEdge {
  """
  The item at the end of the edge.
  """
  node: ReturnPortal
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ReturnPortalWhereInput is used for filtering ReturnPortal objects.
Input was generated by ent.
"""
input ReturnPortalWhereInput {
  not: ReturnPortalWhereInput
  and: [ReturnPortalWhereInput!]
  or: [ReturnPortalWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  return_open_hours field predicates
  """
  returnOpenHours: Int
  returnOpenHoursNEQ: Int
  returnOpenHoursIn: [Int!]
  returnOpenHoursNotIn: [Int!]
  returnOpenHoursGT: Int
  returnOpenHoursGTE: Int
  returnOpenHoursLT: Int
  returnOpenHoursLTE: Int
  """
  automatically_accept field predicates
  """
  automaticallyAccept: Boolean
  automaticallyAcceptNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  return_portal_claim edge predicates
  """
  hasReturnPortalClaim: Boolean
  hasReturnPortalClaimWith: [ReturnPortalClaimWhereInput!]
  """
  return_location edge predicates
  """
  hasReturnLocation: Boolean
  hasReturnLocationWith: [LocationWhereInput!]
  """
  delivery_options edge predicates
  """
  hasDeliveryOptions: Boolean
  hasDeliveryOptionsWith: [DeliveryOptionWhereInput!]
  """
  connection edge predicates
  """
  hasConnection: Boolean
  hasConnectionWith: [ConnectionWhereInput!]
  """
  email_confirmation_label edge predicates
  """
  hasEmailConfirmationLabel: Boolean
  hasEmailConfirmationLabelWith: [EmailTemplateWhereInput!]
  """
  email_confirmation_qr_code edge predicates
  """
  hasEmailConfirmationQrCode: Boolean
  hasEmailConfirmationQrCodeWith: [EmailTemplateWhereInput!]
  """
  email_received edge predicates
  """
  hasEmailReceived: Boolean
  hasEmailReceivedWith: [EmailTemplateWhereInput!]
  """
  email_accepted edge predicates
  """
  hasEmailAccepted: Boolean
  hasEmailAcceptedWith: [EmailTemplateWhereInput!]
  """
  return_colli edge predicates
  """
  hasReturnColli: Boolean
  hasReturnColliWith: [ReturnColliWhereInput!]
}
type SeatGroup implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  createdAt: Time
  tenant: Tenant!
  user: [User!]
  assignedAccessRight: [AccessRight!]
  seatGroupAccessRight: [SeatGroupAccessRight!]
}
type SeatGroupAccessRight implements Node {
  id: ID!
  tenantID: ID!
  level: SeatGroupAccessRightLevel!
  accessRightID: ID!
  seatGroupID: ID!
  tenant: Tenant!
  accessRight: AccessRight!
  seatGroup: SeatGroup!
}
"""
A connection to a list of items.
"""
type SeatGroupAccessRightConnection {
  """
  A list of edges.
  """
  edges: [SeatGroupAccessRightEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SeatGroupAccessRightEdge {
  """
  The item at the end of the edge.
  """
  node: SeatGroupAccessRight
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SeatGroupAccessRightLevel is enum for the field level
"""
enum SeatGroupAccessRightLevel @goModel(model: "delivrio.io/go/ent/seatgroupaccessright.Level") {
  none
  read
  write
}
"""
SeatGroupAccessRightWhereInput is used for filtering SeatGroupAccessRight objects.
Input was generated by ent.
"""
input SeatGroupAccessRightWhereInput {
  not: SeatGroupAccessRightWhereInput
  and: [SeatGroupAccessRightWhereInput!]
  or: [SeatGroupAccessRightWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  level field predicates
  """
  level: SeatGroupAccessRightLevel
  levelNEQ: SeatGroupAccessRightLevel
  levelIn: [SeatGroupAccessRightLevel!]
  levelNotIn: [SeatGroupAccessRightLevel!]
}
"""
A connection to a list of items.
"""
type SeatGroupConnection {
  """
  A list of edges.
  """
  edges: [SeatGroupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SeatGroupEdge {
  """
  The item at the end of the edge.
  """
  node: SeatGroup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SeatGroupWhereInput is used for filtering SeatGroup objects.
Input was generated by ent.
"""
input SeatGroupWhereInput {
  not: SeatGroupWhereInput
  and: [SeatGroupWhereInput!]
  or: [SeatGroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  assigned_access_right edge predicates
  """
  hasAssignedAccessRight: Boolean
  hasAssignedAccessRightWith: [AccessRightWhereInput!]
  """
  seat_group_access_right edge predicates
  """
  hasSeatGroupAccessRight: Boolean
  hasSeatGroupAccessRightWith: [SeatGroupAccessRightWhereInput!]
}
type Shipment implements Node {
  id: ID!
  tenantID: ID!
  shipmentPublicID: String!
  createdAt: Time!
  status: ShipmentStatus!
  tenant: Tenant!
  """
  Can get this from edges, but want the reference to persist even after cancelling
  """
  carrier: Carrier!
  shipmentHistory: [ShipmentHistory!]
  shipmentBring: ShipmentBring
  shipmentDAO: ShipmentDAO
  shipmentDF: ShipmentDF
  shipmentDSV: ShipmentDSV
  shipmentEasyPost: ShipmentEasyPost
  shipmentPostNord: ShipmentPostNord
  shipmentGLS: ShipmentGLS
  shipmentUSPS: ShipmentUSPS
  """
  A shipment may have 0 or more collis
  """
  consolidation: Consolidation
  """
  After a shipment is cancelled
  """
  oldConsolidation: [Consolidation!]
  """
  A shipment may have 0 or more collis
  """
  shipmentParcel: [ShipmentParcel!]
  """
  A shipment may have 0 or more pallets
  """
  shipmentPallet: [ShipmentPallet!]
}
type ShipmentBring implements Node {
  id: ID!
  tenantID: ID!
  consignmentNumber: String!
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentBringConnection {
  """
  A list of edges.
  """
  edges: [ShipmentBringEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentBringEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentBring
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentBringWhereInput is used for filtering ShipmentBring objects.
Input was generated by ent.
"""
input ShipmentBringWhereInput {
  not: ShipmentBringWhereInput
  and: [ShipmentBringWhereInput!]
  or: [ShipmentBringWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  consignment_number field predicates
  """
  consignmentNumber: String
  consignmentNumberNEQ: String
  consignmentNumberIn: [String!]
  consignmentNumberNotIn: [String!]
  consignmentNumberGT: String
  consignmentNumberGTE: String
  consignmentNumberLT: String
  consignmentNumberLTE: String
  consignmentNumberContains: String
  consignmentNumberHasPrefix: String
  consignmentNumberHasSuffix: String
  consignmentNumberEqualFold: String
  consignmentNumberContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
"""
A connection to a list of items.
"""
type ShipmentConnection {
  """
  A list of edges.
  """
  edges: [ShipmentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type ShipmentDAO implements Node {
  id: ID!
  tenantID: ID!
  barcodeID: String!
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentDAOConnection {
  """
  A list of edges.
  """
  edges: [ShipmentDAOEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentDAOEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentDAO
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentDAOWhereInput is used for filtering ShipmentDAO objects.
Input was generated by ent.
"""
input ShipmentDAOWhereInput {
  not: ShipmentDAOWhereInput
  and: [ShipmentDAOWhereInput!]
  or: [ShipmentDAOWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  barcode_id field predicates
  """
  barcodeID: String
  barcodeIDNEQ: String
  barcodeIDIn: [String!]
  barcodeIDNotIn: [String!]
  barcodeIDGT: String
  barcodeIDGTE: String
  barcodeIDLT: String
  barcodeIDLTE: String
  barcodeIDContains: String
  barcodeIDHasPrefix: String
  barcodeIDHasSuffix: String
  barcodeIDEqualFold: String
  barcodeIDContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
type ShipmentDF implements Node {
  id: ID!
  tenantID: ID!
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentDFConnection {
  """
  A list of edges.
  """
  edges: [ShipmentDFEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentDFEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentDF
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentDFWhereInput is used for filtering ShipmentDF objects.
Input was generated by ent.
"""
input ShipmentDFWhereInput {
  not: ShipmentDFWhereInput
  and: [ShipmentDFWhereInput!]
  or: [ShipmentDFWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
type ShipmentDSV implements Node {
  id: ID!
  tenantID: ID!
  barcodeID: String!
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentDSVConnection {
  """
  A list of edges.
  """
  edges: [ShipmentDSVEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentDSVEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentDSV
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentDSVWhereInput is used for filtering ShipmentDSV objects.
Input was generated by ent.
"""
input ShipmentDSVWhereInput {
  not: ShipmentDSVWhereInput
  and: [ShipmentDSVWhereInput!]
  or: [ShipmentDSVWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  barcode_id field predicates
  """
  barcodeID: String
  barcodeIDNEQ: String
  barcodeIDIn: [String!]
  barcodeIDNotIn: [String!]
  barcodeIDGT: String
  barcodeIDGTE: String
  barcodeIDLT: String
  barcodeIDLTE: String
  barcodeIDContains: String
  barcodeIDHasPrefix: String
  barcodeIDHasSuffix: String
  barcodeIDEqualFold: String
  barcodeIDContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
type ShipmentEasyPost implements Node {
  id: ID!
  tenantID: ID!
  """
  duplicate, may be dropped after verifying
  """
  trackingNumber: String
  epShipmentID: String
  rate: Float
  estDeliveryDate: Time
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentEasyPostConnection {
  """
  A list of edges.
  """
  edges: [ShipmentEasyPostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentEasyPostEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentEasyPost
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentEasyPostWhereInput is used for filtering ShipmentEasyPost objects.
Input was generated by ent.
"""
input ShipmentEasyPostWhereInput {
  not: ShipmentEasyPostWhereInput
  and: [ShipmentEasyPostWhereInput!]
  or: [ShipmentEasyPostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tracking_number field predicates
  """
  trackingNumber: String
  trackingNumberNEQ: String
  trackingNumberIn: [String!]
  trackingNumberNotIn: [String!]
  trackingNumberGT: String
  trackingNumberGTE: String
  trackingNumberLT: String
  trackingNumberLTE: String
  trackingNumberContains: String
  trackingNumberHasPrefix: String
  trackingNumberHasSuffix: String
  trackingNumberIsNil: Boolean
  trackingNumberNotNil: Boolean
  trackingNumberEqualFold: String
  trackingNumberContainsFold: String
  """
  ep_shipment_id field predicates
  """
  epShipmentID: String
  epShipmentIDNEQ: String
  epShipmentIDIn: [String!]
  epShipmentIDNotIn: [String!]
  epShipmentIDGT: String
  epShipmentIDGTE: String
  epShipmentIDLT: String
  epShipmentIDLTE: String
  epShipmentIDContains: String
  epShipmentIDHasPrefix: String
  epShipmentIDHasSuffix: String
  epShipmentIDIsNil: Boolean
  epShipmentIDNotNil: Boolean
  epShipmentIDEqualFold: String
  epShipmentIDContainsFold: String
  """
  rate field predicates
  """
  rate: Float
  rateNEQ: Float
  rateIn: [Float!]
  rateNotIn: [Float!]
  rateGT: Float
  rateGTE: Float
  rateLT: Float
  rateLTE: Float
  rateIsNil: Boolean
  rateNotNil: Boolean
  """
  est_delivery_date field predicates
  """
  estDeliveryDate: Time
  estDeliveryDateNEQ: Time
  estDeliveryDateIn: [Time!]
  estDeliveryDateNotIn: [Time!]
  estDeliveryDateGT: Time
  estDeliveryDateGTE: Time
  estDeliveryDateLT: Time
  estDeliveryDateLTE: Time
  estDeliveryDateIsNil: Boolean
  estDeliveryDateNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
"""
An edge in a connection.
"""
type ShipmentEdge {
  """
  The item at the end of the edge.
  """
  node: Shipment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ShipmentGLS implements Node {
  id: ID!
  tenantID: ID!
  consignmentID: String!
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentGLSConnection {
  """
  A list of edges.
  """
  edges: [ShipmentGLSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentGLSEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentGLS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentGLSWhereInput is used for filtering ShipmentGLS objects.
Input was generated by ent.
"""
input ShipmentGLSWhereInput {
  not: ShipmentGLSWhereInput
  and: [ShipmentGLSWhereInput!]
  or: [ShipmentGLSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  consignment_id field predicates
  """
  consignmentID: String
  consignmentIDNEQ: String
  consignmentIDIn: [String!]
  consignmentIDNotIn: [String!]
  consignmentIDGT: String
  consignmentIDGTE: String
  consignmentIDLT: String
  consignmentIDLTE: String
  consignmentIDContains: String
  consignmentIDHasPrefix: String
  consignmentIDHasSuffix: String
  consignmentIDEqualFold: String
  consignmentIDContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
type ShipmentHistory implements Node {
  id: ID!
  tenantID: ID!
  type: ShipmentHistoryType!
  changeHistory: ChangeHistory!
  tenant: Tenant!
  shipment: Shipment!
}
"""
ShipmentHistoryType is enum for the field type
"""
enum ShipmentHistoryType @goModel(model: "delivrio.io/go/ent/shipmenthistory.Type") {
  create
  update
  delete
}
"""
ShipmentHistoryWhereInput is used for filtering ShipmentHistory objects.
Input was generated by ent.
"""
input ShipmentHistoryWhereInput {
  not: ShipmentHistoryWhereInput
  and: [ShipmentHistoryWhereInput!]
  or: [ShipmentHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  type field predicates
  """
  type: ShipmentHistoryType
  typeNEQ: ShipmentHistoryType
  typeIn: [ShipmentHistoryType!]
  typeNotIn: [ShipmentHistoryType!]
  """
  change_history edge predicates
  """
  hasChangeHistory: Boolean
  hasChangeHistoryWith: [ChangeHistoryWhereInput!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
"""
Ordering options for Shipment connections
"""
input ShipmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Shipments.
  """
  field: ShipmentOrderField!
}
"""
Properties by which Shipment connections can be ordered.
"""
enum ShipmentOrderField {
  CREATED_AT
}
type ShipmentPallet implements Node {
  id: ID!
  tenantID: ID!
  barcode: String!
  colliNumber: String!
  carrierID: String!
  labelPdf: String
  labelZpl: String
  status: ShipmentPalletStatus!
  tenant: Tenant!
  pallet: Pallet
  """
  After shipment cancelled, ref moved here. Mostly for consistency, since the Shipment is also connected still.
  """
  oldPallet: [Pallet!]
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentPalletConnection {
  """
  A list of edges.
  """
  edges: [ShipmentPalletEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentPalletEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentPallet
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentPalletStatus is enum for the field status
"""
enum ShipmentPalletStatus @goModel(model: "delivrio.io/go/ent/shipmentpallet.Status") {
  pending
  printed
}
"""
ShipmentPalletWhereInput is used for filtering ShipmentPallet objects.
Input was generated by ent.
"""
input ShipmentPalletWhereInput {
  not: ShipmentPalletWhereInput
  and: [ShipmentPalletWhereInput!]
  or: [ShipmentPalletWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  barcode field predicates
  """
  barcode: String
  barcodeNEQ: String
  barcodeIn: [String!]
  barcodeNotIn: [String!]
  barcodeGT: String
  barcodeGTE: String
  barcodeLT: String
  barcodeLTE: String
  barcodeContains: String
  barcodeHasPrefix: String
  barcodeHasSuffix: String
  barcodeEqualFold: String
  barcodeContainsFold: String
  """
  colli_number field predicates
  """
  colliNumber: String
  colliNumberNEQ: String
  colliNumberIn: [String!]
  colliNumberNotIn: [String!]
  colliNumberGT: String
  colliNumberGTE: String
  colliNumberLT: String
  colliNumberLTE: String
  colliNumberContains: String
  colliNumberHasPrefix: String
  colliNumberHasSuffix: String
  colliNumberEqualFold: String
  colliNumberContainsFold: String
  """
  carrier_id field predicates
  """
  carrierID: String
  carrierIDNEQ: String
  carrierIDIn: [String!]
  carrierIDNotIn: [String!]
  carrierIDGT: String
  carrierIDGTE: String
  carrierIDLT: String
  carrierIDLTE: String
  carrierIDContains: String
  carrierIDHasPrefix: String
  carrierIDHasSuffix: String
  carrierIDEqualFold: String
  carrierIDContainsFold: String
  """
  label_pdf field predicates
  """
  labelPdf: String
  labelPdfNEQ: String
  labelPdfIn: [String!]
  labelPdfNotIn: [String!]
  labelPdfGT: String
  labelPdfGTE: String
  labelPdfLT: String
  labelPdfLTE: String
  labelPdfContains: String
  labelPdfHasPrefix: String
  labelPdfHasSuffix: String
  labelPdfIsNil: Boolean
  labelPdfNotNil: Boolean
  labelPdfEqualFold: String
  labelPdfContainsFold: String
  """
  label_zpl field predicates
  """
  labelZpl: String
  labelZplNEQ: String
  labelZplIn: [String!]
  labelZplNotIn: [String!]
  labelZplGT: String
  labelZplGTE: String
  labelZplLT: String
  labelZplLTE: String
  labelZplContains: String
  labelZplHasPrefix: String
  labelZplHasSuffix: String
  labelZplIsNil: Boolean
  labelZplNotNil: Boolean
  labelZplEqualFold: String
  labelZplContainsFold: String
  """
  status field predicates
  """
  status: ShipmentPalletStatus
  statusNEQ: ShipmentPalletStatus
  statusIn: [ShipmentPalletStatus!]
  statusNotIn: [ShipmentPalletStatus!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  pallet edge predicates
  """
  hasPallet: Boolean
  hasPalletWith: [PalletWhereInput!]
  """
  old_pallet edge predicates
  """
  hasOldPallet: Boolean
  hasOldPalletWith: [PalletWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
type ShipmentParcel implements Node {
  id: ID!
  tenantID: ID!
  itemID: String
  status: ShipmentParcelStatus!
  ccPickupSignatureUrls: [String!]
  expectedAt: Time
  fulfillmentSyncedAt: Time
  """
  For supported carriers will attempt to cancel shipment via the API
  """
  cancelSyncedAt: Time
  tenant: Tenant!
  shipment: Shipment!
  colli: Colli
  """
  After shipment cancelled, ref moved here.
  """
  oldColli: [Colli!]
  workspaceRecentScan: [WorkspaceRecentScan!]
  packaging: Packaging
  printJob: [PrintJob!]
  documentFile: DocumentFile
}
"""
A connection to a list of items.
"""
type ShipmentParcelConnection {
  """
  A list of edges.
  """
  edges: [ShipmentParcelEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentParcelEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentParcel
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for ShipmentParcel connections
"""
input ShipmentParcelOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order ShipmentParcels.
  """
  field: ShipmentParcelOrderField!
}
"""
Properties by which ShipmentParcel connections can be ordered.
"""
enum ShipmentParcelOrderField {
  EXPECTED_AT
  CANCEL_SYNCED_AT
  SHIPMENT_CREATED_AT
}
"""
ShipmentParcelStatus is enum for the field status
"""
enum ShipmentParcelStatus @goModel(model: "delivrio.io/go/ent/shipmentparcel.Status") {
  pending
  printed
  in_transit
  out_for_delivery
  delivered
  awaiting_cc_pickup
  picked_up
}
"""
ShipmentParcelWhereInput is used for filtering ShipmentParcel objects.
Input was generated by ent.
"""
input ShipmentParcelWhereInput {
  not: ShipmentParcelWhereInput
  and: [ShipmentParcelWhereInput!]
  or: [ShipmentParcelWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  item_id field predicates
  """
  itemID: String
  itemIDNEQ: String
  itemIDIn: [String!]
  itemIDNotIn: [String!]
  itemIDGT: String
  itemIDGTE: String
  itemIDLT: String
  itemIDLTE: String
  itemIDContains: String
  itemIDHasPrefix: String
  itemIDHasSuffix: String
  itemIDIsNil: Boolean
  itemIDNotNil: Boolean
  itemIDEqualFold: String
  itemIDContainsFold: String
  """
  status field predicates
  """
  status: ShipmentParcelStatus
  statusNEQ: ShipmentParcelStatus
  statusIn: [ShipmentParcelStatus!]
  statusNotIn: [ShipmentParcelStatus!]
  """
  expected_at field predicates
  """
  expectedAt: Time
  expectedAtNEQ: Time
  expectedAtIn: [Time!]
  expectedAtNotIn: [Time!]
  expectedAtGT: Time
  expectedAtGTE: Time
  expectedAtLT: Time
  expectedAtLTE: Time
  expectedAtIsNil: Boolean
  expectedAtNotNil: Boolean
  """
  fulfillment_synced_at field predicates
  """
  fulfillmentSyncedAt: Time
  fulfillmentSyncedAtNEQ: Time
  fulfillmentSyncedAtIn: [Time!]
  fulfillmentSyncedAtNotIn: [Time!]
  fulfillmentSyncedAtGT: Time
  fulfillmentSyncedAtGTE: Time
  fulfillmentSyncedAtLT: Time
  fulfillmentSyncedAtLTE: Time
  fulfillmentSyncedAtIsNil: Boolean
  fulfillmentSyncedAtNotNil: Boolean
  """
  cancel_synced_at field predicates
  """
  cancelSyncedAt: Time
  cancelSyncedAtNEQ: Time
  cancelSyncedAtIn: [Time!]
  cancelSyncedAtNotIn: [Time!]
  cancelSyncedAtGT: Time
  cancelSyncedAtGTE: Time
  cancelSyncedAtLT: Time
  cancelSyncedAtLTE: Time
  cancelSyncedAtIsNil: Boolean
  cancelSyncedAtNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
  """
  colli edge predicates
  """
  hasColli: Boolean
  hasColliWith: [ColliWhereInput!]
  """
  old_colli edge predicates
  """
  hasOldColli: Boolean
  hasOldColliWith: [ColliWhereInput!]
  """
  workspace_recent_scan edge predicates
  """
  hasWorkspaceRecentScan: Boolean
  hasWorkspaceRecentScanWith: [WorkspaceRecentScanWhereInput!]
  """
  packaging edge predicates
  """
  hasPackaging: Boolean
  hasPackagingWith: [PackagingWhereInput!]
  """
  print_job edge predicates
  """
  hasPrintJob: Boolean
  hasPrintJobWith: [PrintJobWhereInput!]
  """
  document_file edge predicates
  """
  hasDocumentFile: Boolean
  hasDocumentFileWith: [DocumentFileWhereInput!]
}
type ShipmentPostNord implements Node {
  id: ID!
  tenantID: ID!
  """
  Multiple labels. May contain unrelated shipments.
  """
  bookingID: String!
  """
  Individual label. Can be grouped to same address. Probably should not be on this ent?
  """
  itemID: String!
  """
  Shipment can contain multiple parcels to same address.
  """
  shipmentReferenceNo: String!
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentPostNordConnection {
  """
  A list of edges.
  """
  edges: [ShipmentPostNordEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentPostNordEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentPostNord
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentPostNordWhereInput is used for filtering ShipmentPostNord objects.
Input was generated by ent.
"""
input ShipmentPostNordWhereInput {
  not: ShipmentPostNordWhereInput
  and: [ShipmentPostNordWhereInput!]
  or: [ShipmentPostNordWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  booking_id field predicates
  """
  bookingID: String
  bookingIDNEQ: String
  bookingIDIn: [String!]
  bookingIDNotIn: [String!]
  bookingIDGT: String
  bookingIDGTE: String
  bookingIDLT: String
  bookingIDLTE: String
  bookingIDContains: String
  bookingIDHasPrefix: String
  bookingIDHasSuffix: String
  bookingIDEqualFold: String
  bookingIDContainsFold: String
  """
  item_id field predicates
  """
  itemID: String
  itemIDNEQ: String
  itemIDIn: [String!]
  itemIDNotIn: [String!]
  itemIDGT: String
  itemIDGTE: String
  itemIDLT: String
  itemIDLTE: String
  itemIDContains: String
  itemIDHasPrefix: String
  itemIDHasSuffix: String
  itemIDEqualFold: String
  itemIDContainsFold: String
  """
  shipment_reference_no field predicates
  """
  shipmentReferenceNo: String
  shipmentReferenceNoNEQ: String
  shipmentReferenceNoIn: [String!]
  shipmentReferenceNoNotIn: [String!]
  shipmentReferenceNoGT: String
  shipmentReferenceNoGTE: String
  shipmentReferenceNoLT: String
  shipmentReferenceNoLTE: String
  shipmentReferenceNoContains: String
  shipmentReferenceNoHasPrefix: String
  shipmentReferenceNoHasSuffix: String
  shipmentReferenceNoEqualFold: String
  shipmentReferenceNoContainsFold: String
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
"""
ShipmentStatus is enum for the field status
"""
enum ShipmentStatus @goModel(model: "delivrio.io/go/ent/shipment.Status") {
  Pending
  Prebooked
  Booked
  Partially_dispatched
  Dispatched
  Deleted
}
type ShipmentUSPS implements Node {
  id: ID!
  tenantID: ID!
  trackingNumber: String
  postage: Float
  scheduledDeliveryDate: Time
  tenant: Tenant!
  shipment: Shipment!
}
"""
A connection to a list of items.
"""
type ShipmentUSPSConnection {
  """
  A list of edges.
  """
  edges: [ShipmentUSPSEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ShipmentUSPSEdge {
  """
  The item at the end of the edge.
  """
  node: ShipmentUSPS
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ShipmentUSPSWhereInput is used for filtering ShipmentUSPS objects.
Input was generated by ent.
"""
input ShipmentUSPSWhereInput {
  not: ShipmentUSPSWhereInput
  and: [ShipmentUSPSWhereInput!]
  or: [ShipmentUSPSWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  tracking_number field predicates
  """
  trackingNumber: String
  trackingNumberNEQ: String
  trackingNumberIn: [String!]
  trackingNumberNotIn: [String!]
  trackingNumberGT: String
  trackingNumberGTE: String
  trackingNumberLT: String
  trackingNumberLTE: String
  trackingNumberContains: String
  trackingNumberHasPrefix: String
  trackingNumberHasSuffix: String
  trackingNumberIsNil: Boolean
  trackingNumberNotNil: Boolean
  trackingNumberEqualFold: String
  trackingNumberContainsFold: String
  """
  postage field predicates
  """
  postage: Float
  postageNEQ: Float
  postageIn: [Float!]
  postageNotIn: [Float!]
  postageGT: Float
  postageGTE: Float
  postageLT: Float
  postageLTE: Float
  postageIsNil: Boolean
  postageNotNil: Boolean
  """
  scheduled_delivery_date field predicates
  """
  scheduledDeliveryDate: Time
  scheduledDeliveryDateNEQ: Time
  scheduledDeliveryDateIn: [Time!]
  scheduledDeliveryDateNotIn: [Time!]
  scheduledDeliveryDateGT: Time
  scheduledDeliveryDateGTE: Time
  scheduledDeliveryDateLT: Time
  scheduledDeliveryDateLTE: Time
  scheduledDeliveryDateIsNil: Boolean
  scheduledDeliveryDateNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment edge predicates
  """
  hasShipment: Boolean
  hasShipmentWith: [ShipmentWhereInput!]
}
"""
ShipmentWhereInput is used for filtering Shipment objects.
Input was generated by ent.
"""
input ShipmentWhereInput {
  not: ShipmentWhereInput
  and: [ShipmentWhereInput!]
  or: [ShipmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  shipment_public_id field predicates
  """
  shipmentPublicID: String
  shipmentPublicIDNEQ: String
  shipmentPublicIDIn: [String!]
  shipmentPublicIDNotIn: [String!]
  shipmentPublicIDGT: String
  shipmentPublicIDGTE: String
  shipmentPublicIDLT: String
  shipmentPublicIDLTE: String
  shipmentPublicIDContains: String
  shipmentPublicIDHasPrefix: String
  shipmentPublicIDHasSuffix: String
  shipmentPublicIDEqualFold: String
  shipmentPublicIDContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  status field predicates
  """
  status: ShipmentStatus
  statusNEQ: ShipmentStatus
  statusIn: [ShipmentStatus!]
  statusNotIn: [ShipmentStatus!]
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  carrier edge predicates
  """
  hasCarrier: Boolean
  hasCarrierWith: [CarrierWhereInput!]
  """
  shipment_history edge predicates
  """
  hasShipmentHistory: Boolean
  hasShipmentHistoryWith: [ShipmentHistoryWhereInput!]
  """
  shipment_bring edge predicates
  """
  hasShipmentBring: Boolean
  hasShipmentBringWith: [ShipmentBringWhereInput!]
  """
  shipment_dao edge predicates
  """
  hasShipmentDAO: Boolean
  hasShipmentDAOWith: [ShipmentDAOWhereInput!]
  """
  shipment_df edge predicates
  """
  hasShipmentDF: Boolean
  hasShipmentDFWith: [ShipmentDFWhereInput!]
  """
  shipment_dsv edge predicates
  """
  hasShipmentDSV: Boolean
  hasShipmentDSVWith: [ShipmentDSVWhereInput!]
  """
  shipment_easy_post edge predicates
  """
  hasShipmentEasyPost: Boolean
  hasShipmentEasyPostWith: [ShipmentEasyPostWhereInput!]
  """
  shipment_post_nord edge predicates
  """
  hasShipmentPostNord: Boolean
  hasShipmentPostNordWith: [ShipmentPostNordWhereInput!]
  """
  shipment_gls edge predicates
  """
  hasShipmentGLS: Boolean
  hasShipmentGLSWith: [ShipmentGLSWhereInput!]
  """
  shipment_usps edge predicates
  """
  hasShipmentUSPS: Boolean
  hasShipmentUSPSWith: [ShipmentUSPSWhereInput!]
  """
  consolidation edge predicates
  """
  hasConsolidation: Boolean
  hasConsolidationWith: [ConsolidationWhereInput!]
  """
  old_consolidation edge predicates
  """
  hasOldConsolidation: Boolean
  hasOldConsolidationWith: [ConsolidationWhereInput!]
  """
  shipment_parcel edge predicates
  """
  hasShipmentParcel: Boolean
  hasShipmentParcelWith: [ShipmentParcelWhereInput!]
  """
  shipment_pallet edge predicates
  """
  hasShipmentPallet: Boolean
  hasShipmentPalletWith: [ShipmentPalletWhereInput!]
}
type SignupOptions implements Node {
  id: ID!
  betterDeliveryOptions: Boolean!
  improvePickPack: Boolean!
  shippingLabel: Boolean!
  customDocs: Boolean!
  reducedCosts: Boolean!
  easyReturns: Boolean!
  clickCollect: Boolean!
  numShipments: Int!
  users: User!
}
"""
A connection to a list of items.
"""
type SignupOptionsConnection {
  """
  A list of edges.
  """
  edges: [SignupOptionsEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SignupOptionsEdge {
  """
  The item at the end of the edge.
  """
  node: SignupOptions
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SignupOptionsWhereInput is used for filtering SignupOptions objects.
Input was generated by ent.
"""
input SignupOptionsWhereInput {
  not: SignupOptionsWhereInput
  and: [SignupOptionsWhereInput!]
  or: [SignupOptionsWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  better_delivery_options field predicates
  """
  betterDeliveryOptions: Boolean
  betterDeliveryOptionsNEQ: Boolean
  """
  improve_pick_pack field predicates
  """
  improvePickPack: Boolean
  improvePickPackNEQ: Boolean
  """
  shipping_label field predicates
  """
  shippingLabel: Boolean
  shippingLabelNEQ: Boolean
  """
  custom_docs field predicates
  """
  customDocs: Boolean
  customDocsNEQ: Boolean
  """
  reduced_costs field predicates
  """
  reducedCosts: Boolean
  reducedCostsNEQ: Boolean
  """
  easy_returns field predicates
  """
  easyReturns: Boolean
  easyReturnsNEQ: Boolean
  """
  click_collect field predicates
  """
  clickCollect: Boolean
  clickCollectNEQ: Boolean
  """
  num_shipments field predicates
  """
  numShipments: Int
  numShipmentsNEQ: Int
  numShipmentsIn: [Int!]
  numShipmentsNotIn: [Int!]
  numShipmentsGT: Int
  numShipmentsGTE: Int
  numShipmentsLT: Int
  numShipmentsLTE: Int
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type SystemEvents implements Node {
  id: ID!
  tenantID: ID!
  eventType: SystemEventsEventType!
  eventTypeID: String
  status: SystemEventsStatus!
  description: String!
  data: String
  updatedAt: Time!
  createdAt: Time
  tenant: Tenant!
}
"""
A connection to a list of items.
"""
type SystemEventsConnection {
  """
  A list of edges.
  """
  edges: [SystemEventsEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SystemEventsEdge {
  """
  The item at the end of the edge.
  """
  node: SystemEvents
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SystemEventsEventType is enum for the field event_type
"""
enum SystemEventsEventType @goModel(model: "delivrio.io/go/ent/systemevents.EventType") {
  background_tasks
  shopify_product_sync
  shopify_order_sync
  shopify_order_cancelled_sync
  background_product_mutate
  send_notifications
  sync_cancelled_shipments
}
"""
SystemEventsStatus is enum for the field status
"""
enum SystemEventsStatus @goModel(model: "delivrio.io/go/ent/systemevents.Status") {
  running
  fail
  success
}
"""
SystemEventsWhereInput is used for filtering SystemEvents objects.
Input was generated by ent.
"""
input SystemEventsWhereInput {
  not: SystemEventsWhereInput
  and: [SystemEventsWhereInput!]
  or: [SystemEventsWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  event_type field predicates
  """
  eventType: SystemEventsEventType
  eventTypeNEQ: SystemEventsEventType
  eventTypeIn: [SystemEventsEventType!]
  eventTypeNotIn: [SystemEventsEventType!]
  """
  event_type_id field predicates
  """
  eventTypeID: String
  eventTypeIDNEQ: String
  eventTypeIDIn: [String!]
  eventTypeIDNotIn: [String!]
  eventTypeIDGT: String
  eventTypeIDGTE: String
  eventTypeIDLT: String
  eventTypeIDLTE: String
  eventTypeIDContains: String
  eventTypeIDHasPrefix: String
  eventTypeIDHasSuffix: String
  eventTypeIDIsNil: Boolean
  eventTypeIDNotNil: Boolean
  eventTypeIDEqualFold: String
  eventTypeIDContainsFold: String
  """
  status field predicates
  """
  status: SystemEventsStatus
  statusNEQ: SystemEventsStatus
  statusIn: [SystemEventsStatus!]
  statusNotIn: [SystemEventsStatus!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  data field predicates
  """
  data: String
  dataNEQ: String
  dataIn: [String!]
  dataNotIn: [String!]
  dataGT: String
  dataGTE: String
  dataLT: String
  dataLTE: String
  dataContains: String
  dataHasPrefix: String
  dataHasSuffix: String
  dataIsNil: Boolean
  dataNotNil: Boolean
  dataEqualFold: String
  dataContainsFold: String
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
}
type Tenant implements Node {
  id: ID!
  name: String!
  vatNumber: String
  invoiceReference: String
  connectOptionCarriers: [ConnectOptionCarrier!]
  connectOptionPlatforms: [ConnectOptionPlatform!]
  plan: Plan!
  companyAddress: Address
  defaultLanguage: Language!
  billingContact: Contact
  adminContact: Contact
}
"""
A connection to a list of items.
"""
type TenantConnection {
  """
  A list of edges.
  """
  edges: [TenantEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenantEdge {
  """
  The item at the end of the edge.
  """
  node: Tenant
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TenantWhereInput is used for filtering Tenant objects.
Input was generated by ent.
"""
input TenantWhereInput {
  not: TenantWhereInput
  and: [TenantWhereInput!]
  or: [TenantWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  vat_number field predicates
  """
  vatNumber: String
  vatNumberNEQ: String
  vatNumberIn: [String!]
  vatNumberNotIn: [String!]
  vatNumberGT: String
  vatNumberGTE: String
  vatNumberLT: String
  vatNumberLTE: String
  vatNumberContains: String
  vatNumberHasPrefix: String
  vatNumberHasSuffix: String
  vatNumberIsNil: Boolean
  vatNumberNotNil: Boolean
  vatNumberEqualFold: String
  vatNumberContainsFold: String
  """
  invoice_reference field predicates
  """
  invoiceReference: String
  invoiceReferenceNEQ: String
  invoiceReferenceIn: [String!]
  invoiceReferenceNotIn: [String!]
  invoiceReferenceGT: String
  invoiceReferenceGTE: String
  invoiceReferenceLT: String
  invoiceReferenceLTE: String
  invoiceReferenceContains: String
  invoiceReferenceHasPrefix: String
  invoiceReferenceHasSuffix: String
  invoiceReferenceIsNil: Boolean
  invoiceReferenceNotNil: Boolean
  invoiceReferenceEqualFold: String
  invoiceReferenceContainsFold: String
  """
  connect_option_carriers edge predicates
  """
  hasConnectOptionCarriers: Boolean
  hasConnectOptionCarriersWith: [ConnectOptionCarrierWhereInput!]
  """
  connect_option_platforms edge predicates
  """
  hasConnectOptionPlatforms: Boolean
  hasConnectOptionPlatformsWith: [ConnectOptionPlatformWhereInput!]
  """
  plan edge predicates
  """
  hasPlan: Boolean
  hasPlanWith: [PlanWhereInput!]
  """
  company_address edge predicates
  """
  hasCompanyAddress: Boolean
  hasCompanyAddressWith: [AddressWhereInput!]
  """
  default_language edge predicates
  """
  hasDefaultLanguage: Boolean
  hasDefaultLanguageWith: [LanguageWhereInput!]
  """
  billing_contact edge predicates
  """
  hasBillingContact: Boolean
  hasBillingContactWith: [ContactWhereInput!]
  """
  admin_contact edge predicates
  """
  hasAdminContact: Boolean
  hasAdminContactWith: [ContactWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateAddressGlobalInput is used for update AddressGlobal object.
Input was generated by ent.
"""
input UpdateAddressGlobalInput {
  company: String
  clearCompany: Boolean
  addressOne: String
  addressTwo: String
  clearAddressTwo: Boolean
  city: String
  state: String
  clearState: Boolean
  zip: String
  latitude: Float
  longitude: Float
  parcelShopPostNordDeliveryID: ID
  clearParcelShopPostNordDelivery: Boolean
  parcelShopBringDeliveryID: ID
  clearParcelShopBringDelivery: Boolean
  parcelShopID: ID
  clearParcelShop: Boolean
  countryID: ID
}
"""
UpdateAddressInput is used for update Address object.
Input was generated by ent.
"""
input UpdateAddressInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  """
  Some applications have both mobile and generic
  """
  phoneNumber2: String
  clearPhoneNumber2: Boolean
  """
  Electronic customs
  """
  vatNumber: String
  clearVatNumber: Boolean
  company: String
  clearCompany: Boolean
  addressOne: String
  addressTwo: String
  city: String
  state: String
  clearState: Boolean
  zip: String
  addRecipientColliIDs: [ID!]
  removeRecipientColliIDs: [ID!]
  clearRecipientColli: Boolean
  recipientConsolidationID: ID
  clearRecipientConsolidation: Boolean
  addCompanyAddresIDs: [ID!]
  removeCompanyAddresIDs: [ID!]
  clearCompanyAddress: Boolean
  addLocationIDs: [ID!]
  removeLocationIDs: [ID!]
  clearLocation: Boolean
  addSenderColliIDs: [ID!]
  removeSenderColliIDs: [ID!]
  clearSenderColli: Boolean
  senderConsolidationID: ID
  clearSenderConsolidation: Boolean
  addReturnSenderColliIDs: [ID!]
  removeReturnSenderColliIDs: [ID!]
  clearReturnSenderColli: Boolean
  addReturnRecipientColliIDs: [ID!]
  removeReturnRecipientColliIDs: [ID!]
  clearReturnRecipientColli: Boolean
  countryID: ID
}
"""
UpdateCarrierAdditionalServiceBringInput is used for update CarrierAdditionalServiceBring object.
Input was generated by ent.
"""
input UpdateCarrierAdditionalServiceBringInput {
  label: String
  apiCodeBooking: String
  carrierServiceBringID: ID
  clearCarrierServiceBring: Boolean
  addDeliveryOptionBringIDs: [ID!]
  removeDeliveryOptionBringIDs: [ID!]
  clearDeliveryOptionBring: Boolean
}
"""
UpdateCarrierAdditionalServiceDAOInput is used for update CarrierAdditionalServiceDAO object.
Input was generated by ent.
"""
input UpdateCarrierAdditionalServiceDAOInput {
  label: String
  apiCode: String
  addCarrierServiceDAOIDs: [ID!]
  removeCarrierServiceDAOIDs: [ID!]
  clearCarrierServiceDAO: Boolean
  addDeliveryOptionDAOIDs: [ID!]
  removeDeliveryOptionDAOIDs: [ID!]
  clearDeliveryOptionDAO: Boolean
}
"""
UpdateCarrierAdditionalServiceDSVInput is used for update CarrierAdditionalServiceDSV object.
Input was generated by ent.
"""
input UpdateCarrierAdditionalServiceDSVInput {
  label: String
  apiCode: String
  addCarrierServiceDSVIDs: [ID!]
  removeCarrierServiceDSVIDs: [ID!]
  clearCarrierServiceDSV: Boolean
  addDeliveryOptionDSVIDs: [ID!]
  removeDeliveryOptionDSVIDs: [ID!]
  clearDeliveryOptionDSV: Boolean
}
"""
UpdateCarrierAdditionalServiceGLSInput is used for update CarrierAdditionalServiceGLS object.
Input was generated by ent.
"""
input UpdateCarrierAdditionalServiceGLSInput {
  label: String
  mandatory: Boolean
  """
  When false, only edge countries will validate on this consignor service
  """
  allCountriesConsignor: Boolean
  """
  When false, only edge countries will validate on this consignee service
  """
  allCountriesConsignee: Boolean
  internalID: String
  carrierServiceGLSID: ID
  clearCarrierServiceGLS: Boolean
  addDeliveryOptionGlIDs: [ID!]
  removeDeliveryOptionGlIDs: [ID!]
  clearDeliveryOptionGLS: Boolean
  addCountriesConsigneeIDs: [ID!]
  removeCountriesConsigneeIDs: [ID!]
  clearCountriesConsignee: Boolean
  addCountriesConsignorIDs: [ID!]
  removeCountriesConsignorIDs: [ID!]
  clearCountriesConsignor: Boolean
}
"""
UpdateCarrierBringInput is used for update CarrierBring object.
Input was generated by ent.
"""
input UpdateCarrierBringInput {
  apiKey: String
  clearAPIKey: Boolean
  customerNumber: String
  clearCustomerNumber: Boolean
  test: Boolean
  carrierID: ID
}
"""
UpdateCarrierDAOInput is used for update CarrierDAO object.
Input was generated by ent.
"""
input UpdateCarrierDAOInput {
  customerID: String
  clearCustomerID: Boolean
  apiKey: String
  clearAPIKey: Boolean
  test: Boolean
  carrierID: ID
}
"""
UpdateCarrierDFInput is used for update CarrierDF object.
Input was generated by ent.
"""
input UpdateCarrierDFInput {
  customerID: String
  agreementNumber: String
  whoPays: CarrierDFWhoPays
  test: Boolean
  carrierID: ID
}
"""
UpdateCarrierDSVInput is used for update CarrierDSV object.
Input was generated by ent.
"""
input UpdateCarrierDSVInput {
  carrierID: ID
}
"""
UpdateCarrierEasyPostInput is used for update CarrierEasyPost object.
Input was generated by ent.
"""
input UpdateCarrierEasyPostInput {
  apiKey: String
  test: Boolean
  """
  When > 1, then we use rate, then buy. =1 one-call buy. Former not implemented in first round.
  """
  carrierAccounts: [String!]
  appendCarrierAccounts: [String!]
  carrierID: ID
}
"""
UpdateCarrierGLSInput is used for update CarrierGLS object.
Input was generated by ent.
"""
input UpdateCarrierGLSInput {
  contactID: String
  clearContactID: Boolean
  glsUsername: String
  clearGLSUsername: Boolean
  glsPassword: String
  clearGLSPassword: Boolean
  customerID: String
  clearCustomerID: Boolean
  glsCountryCode: String
  clearGLSCountryCode: Boolean
  syncShipmentCancellation: Boolean
  clearSyncShipmentCancellation: Boolean
  printErrorOnLabel: Boolean
  clearPrintErrorOnLabel: Boolean
  carrierID: ID
}
"""
UpdateCarrierPostNordInput is used for update CarrierPostNord object.
Input was generated by ent.
"""
input UpdateCarrierPostNordInput {
  """
  Default empty to allow creation from dialog with followup editing
  """
  customerNumber: String
  carrierID: ID
}
"""
UpdateCarrierUSPSInput is used for update CarrierUSPS object.
Input was generated by ent.
"""
input UpdateCarrierUSPSInput {
  isTestAPI: Boolean
  consumerKey: String
  clearConsumerKey: Boolean
  consumerSecret: String
  clearConsumerSecret: Boolean
  mid: String
  clearMid: Boolean
  manifestMid: String
  clearManifestMid: Boolean
  crid: String
  clearCrid: Boolean
  epsAccountNumber: String
  clearEpsAccountNumber: Boolean
  carrierID: ID
}
"""
UpdateColliInput is used for update Colli object.
Input was generated by ent.
"""
input UpdateColliInput {
  """
  Code128 type C compatible for faster reads
  """
  internalBarcode: Int
  clearInternalBarcode: Boolean
  slipPrintStatus: ColliSlipPrintStatus
  deliveryOptionID: ID
  clearDeliveryOption: Boolean
  addDocumentFileIDs: [ID!]
  removeDocumentFileIDs: [ID!]
  clearDocumentFile: Boolean
  shipmentParcelID: ID
  clearShipmentParcel: Boolean
  addCancelledShipmentParcelIDs: [ID!]
  removeCancelledShipmentParcelIDs: [ID!]
  clearCancelledShipmentParcel: Boolean
  orderID: ID
  packagingID: ID
  clearPackaging: Boolean
  addPrintJobIDs: [ID!]
  removePrintJobIDs: [ID!]
  clearPrintJob: Boolean
}
"""
UpdateConnectOptionCarrierInput is used for update ConnectOptionCarrier object.
Input was generated by ent.
"""
input UpdateConnectOptionCarrierInput {
  name: String
  addTenantIDs: [ID!]
  removeTenantIDs: [ID!]
  clearTenant: Boolean
}
"""
UpdateConnectOptionPlatformInput is used for update ConnectOptionPlatform object.
Input was generated by ent.
"""
input UpdateConnectOptionPlatformInput {
  name: String
  addTenantIDs: [ID!]
  removeTenantIDs: [ID!]
  clearTenant: Boolean
}
"""
UpdateConnectionInput is used for update Connection object.
Input was generated by ent.
"""
input UpdateConnectionInput {
  name: String
  syncOrders: Boolean
  syncProducts: Boolean
  fulfillAutomatically: Boolean
  dispatchAutomatically: Boolean
  convertCurrency: Boolean
  autoPrintParcelSlip: Boolean
  connectionShopifyID: ID
  clearConnectionShopify: Boolean
  addOrderIDs: [ID!]
  removeOrderIDs: [ID!]
  clearOrders: Boolean
  senderLocationID: ID
  pickupLocationID: ID
  returnLocationID: ID
  sellerLocationID: ID
  addDeliveryOptionIDs: [ID!]
  removeDeliveryOptionIDs: [ID!]
  clearDeliveryOption: Boolean
  defaultDeliveryOptionID: ID
  clearDefaultDeliveryOption: Boolean
  returnPortalID: ID
  clearReturnPortal: Boolean
  addHypothesisTestIDs: [ID!]
  removeHypothesisTestIDs: [ID!]
  clearHypothesisTest: Boolean
  addNotificationIDs: [ID!]
  removeNotificationIDs: [ID!]
  clearNotifications: Boolean
  currencyID: ID
  packingSlipTemplateID: ID
  clearPackingSlipTemplate: Boolean
  addConnectionLookupIDs: [ID!]
  removeConnectionLookupIDs: [ID!]
  clearConnectionLookup: Boolean
}
"""
UpdateConnectionShopifyInput is used for update ConnectionShopify object.
Input was generated by ent.
"""
input UpdateConnectionShopifyInput {
  """
  Since certain plans don't allow for external rates
  """
  rateIntegration: Boolean
  storeURL: String
  clearStoreURL: Boolean
  apiKey: String
  clearAPIKey: Boolean
  syncFrom: Time
  clearSyncFrom: Boolean
  """
  When set, only orders with these tags will be synchronized. Supports a 
  """
  filterTags: [String!]
  appendFilterTags: [String!]
  clearFilterTags: Boolean
}
"""
UpdateConsolidationInput is used for update Consolidation object.
Input was generated by ent.
"""
input UpdateConsolidationInput {
  publicID: String
  description: String
  clearDescription: Boolean
  status: ConsolidationStatus
  addPalletIDs: [ID!]
  removePalletIDs: [ID!]
  clearPallets: Boolean
  addOrderIDs: [ID!]
  removeOrderIDs: [ID!]
  clearOrders: Boolean
  deliveryOptionID: ID
  clearDeliveryOption: Boolean
  shipmentID: ID
  clearShipment: Boolean
  addCancelledShipmentIDs: [ID!]
  removeCancelledShipmentIDs: [ID!]
  clearCancelledShipments: Boolean
}
"""
UpdateContactInput is used for update Contact object.
Input was generated by ent.
"""
input UpdateContactInput {
  name: String
  surname: String
  email: String
  phoneNumber: String
  addBillingContactIDs: [ID!]
  removeBillingContactIDs: [ID!]
  clearBillingContact: Boolean
  addAdminContactIDs: [ID!]
  removeAdminContactIDs: [ID!]
  clearAdminContact: Boolean
}
"""
UpdateCountryHarmonizedCodeInput is used for update CountryHarmonizedCode object.
Input was generated by ent.
"""
input UpdateCountryHarmonizedCodeInput {
  code: String
  inventoryItemID: ID
  countryID: ID
}
"""
UpdateDeliveryOptionBringInput is used for update DeliveryOptionBring object.
Input was generated by ent.
"""
input UpdateDeliveryOptionBringInput {
  electronicCustoms: Boolean
  deliveryOptionID: ID
}
"""
UpdateDeliveryOptionEasyPostInput is used for update DeliveryOptionEasyPost object.
Input was generated by ent.
"""
input UpdateDeliveryOptionEasyPostInput {
  deliveryOptionID: ID
  addCarrierAddServEasyPostIDs: [ID!]
  removeCarrierAddServEasyPostIDs: [ID!]
  clearCarrierAddServEasyPost: Boolean
}
"""
UpdateDeliveryOptionInput is used for update DeliveryOption object.
Input was generated by ent.
"""
input UpdateDeliveryOptionInput {
  archivedAt: Time
  clearArchivedAt: Boolean
  name: String
  sortOrder: Int
  clickOptionDisplayCount: Int
  clearClickOptionDisplayCount: Boolean
  description: String
  clearDescription: Boolean
  clickCollect: Boolean
  clearClickCollect: Boolean
  overrideSenderAddress: Boolean
  clearOverrideSenderAddress: Boolean
  overrideReturnAddress: Boolean
  clearOverrideReturnAddress: Boolean
  hideDeliveryOption: Boolean
  clearHideDeliveryOption: Boolean
  deliveryEstimateFrom: Int
  clearDeliveryEstimateFrom: Boolean
  deliveryEstimateTo: Int
  clearDeliveryEstimateTo: Boolean
  webshipperIntegration: Boolean
  webshipperID: Int
  clearWebshipperID: Boolean
  shipmondoIntegration: Boolean
  """
  May contain placeholders
  """
  shipmondoDeliveryOption: String
  clearShipmondoDeliveryOption: Boolean
  """
  Since some services are customs optional
  """
  customsEnabled: Boolean
  """
  Who is responsible for signing of custom docs
  """
  customsSigner: String
  clearCustomsSigner: Boolean
  """
  Toggle to hide this rate if a company field is not provided.
  """
  hideIfCompanyEmpty: Boolean
  carrierID: ID
  addDeliveryRuleIDs: [ID!]
  removeDeliveryRuleIDs: [ID!]
  clearDeliveryRule: Boolean
  deliveryOptionDAOID: ID
  clearDeliveryOptionDAO: Boolean
  deliveryOptionDFID: ID
  clearDeliveryOptionDF: Boolean
  deliveryOptionDSVID: ID
  clearDeliveryOptionDSV: Boolean
  deliveryOptionEasyPostID: ID
  clearDeliveryOptionEasyPost: Boolean
  deliveryOptionGLSID: ID
  clearDeliveryOptionGLS: Boolean
  deliveryOptionPostNordID: ID
  clearDeliveryOptionPostNord: Boolean
  deliveryOptionUSPSID: ID
  clearDeliveryOptionUSPS: Boolean
  deliveryOptionBringID: ID
  clearDeliveryOptionBring: Boolean
  addReturnPortalIDs: [ID!]
  removeReturnPortalIDs: [ID!]
  clearReturnPortals: Boolean
  addColliIDs: [ID!]
  removeColliIDs: [ID!]
  clearColli: Boolean
  addReturnColliIDs: [ID!]
  removeReturnColliIDs: [ID!]
  clearReturnColli: Boolean
  carrierServiceID: ID
  connectionID: ID
  connectionDefaultID: ID
  clearConnectionDefault: Boolean
  addHypothesisTestDeliveryOptionGroupOneIDs: [ID!]
  removeHypothesisTestDeliveryOptionGroupOneIDs: [ID!]
  clearHypothesisTestDeliveryOptionGroupOne: Boolean
  addHypothesisTestDeliveryOptionGroupTwoIDs: [ID!]
  removeHypothesisTestDeliveryOptionGroupTwoIDs: [ID!]
  clearHypothesisTestDeliveryOptionGroupTwo: Boolean
  addHypothesisTestDeliveryOptionLookupIDs: [ID!]
  removeHypothesisTestDeliveryOptionLookupIDs: [ID!]
  clearHypothesisTestDeliveryOptionLookup: Boolean
  addClickCollectLocationIDs: [ID!]
  removeClickCollectLocationIDs: [ID!]
  clearClickCollectLocation: Boolean
  emailClickCollectAtStoreID: ID
  clearEmailClickCollectAtStore: Boolean
  addConsolidationIDs: [ID!]
  removeConsolidationIDs: [ID!]
  clearConsolidation: Boolean
  defaultPackagingID: ID
  clearDefaultPackaging: Boolean
}
"""
UpdateDeliveryOptionPostNordInput is used for update DeliveryOptionPostNord object.
Input was generated by ent.
"""
input UpdateDeliveryOptionPostNordInput {
  formatZpl: Boolean
  deliveryOptionID: ID
}
"""
UpdateDeliveryOptionUSPSInput is used for update DeliveryOptionUSPS object.
Input was generated by ent.
"""
input UpdateDeliveryOptionUSPSInput {
  formatZpl: Boolean
  deliveryOptionID: ID
}
"""
UpdateDeliveryRuleConstraintGroupInput is used for update DeliveryRuleConstraintGroup object.
Input was generated by ent.
"""
input UpdateDeliveryRuleConstraintGroupInput {
  constraintLogic: DeliveryRuleConstraintGroupConstraintLogic
  addDeliveryRuleConstraintIDs: [ID!]
  removeDeliveryRuleConstraintIDs: [ID!]
  clearDeliveryRuleConstraints: Boolean
  deliveryRuleID: ID
}
"""
UpdateDeliveryRuleConstraintInput is used for update DeliveryRuleConstraint object.
Input was generated by ent.
"""
input UpdateDeliveryRuleConstraintInput {
  propertyType: DeliveryRuleConstraintPropertyType
  comparison: DeliveryRuleConstraintComparison
  selectedValue: DeliveryRuleConstraintSelectedValueInput
}
"""
UpdateDeliveryRuleInput is used for update DeliveryRule object.
Input was generated by ent.
"""
input UpdateDeliveryRuleInput {
  name: String
  price: Float
  addDeliveryRuleConstraintGroupIDs: [ID!]
  removeDeliveryRuleConstraintGroupIDs: [ID!]
  clearDeliveryRuleConstraintGroup: Boolean
  deliveryOptionID: ID
  clearDeliveryOption: Boolean
  addCountryIDs: [ID!]
  removeCountryIDs: [ID!]
  clearCountry: Boolean
  currencyID: ID
  clearCurrency: Boolean
}
"""
UpdateDocumentInput is used for update Document object.
Input was generated by ent.
"""
input UpdateDocumentInput {
  name: String
  htmlTemplate: String
  clearHTMLTemplate: Boolean
  htmlHeader: String
  clearHTMLHeader: Boolean
  htmlFooter: String
  clearHTMLFooter: Boolean
  """
  Facilitates printing by saving the latest version of this document
  """
  lastBase64Pdf: String
  clearLastBase64Pdf: Boolean
  mergeType: DocumentMergeType
  paperSize: DocumentPaperSize
  startAt: Time
  endAt: Time
  carrierBrandID: ID
  clearCarrierBrand: Boolean
  addConnectionPackingSlipIDs: [ID!]
  removeConnectionPackingSlipIDs: [ID!]
  clearConnectionPackingSlip: Boolean
}
"""
UpdateEmailTemplateInput is used for update EmailTemplate object.
Input was generated by ent.
"""
input UpdateEmailTemplateInput {
  name: String
  subject: String
  htmlTemplate: String
  mergeType: EmailTemplateMergeType
  addReturnPortalConfirmationLabelIDs: [ID!]
  removeReturnPortalConfirmationLabelIDs: [ID!]
  clearReturnPortalConfirmationLabel: Boolean
  addReturnPortalConfirmationQrCodeIDs: [ID!]
  removeReturnPortalConfirmationQrCodeIDs: [ID!]
  clearReturnPortalConfirmationQrCode: Boolean
  addReturnPortalReceivedIDs: [ID!]
  removeReturnPortalReceivedIDs: [ID!]
  clearReturnPortalReceived: Boolean
  addReturnPortalAcceptedIDs: [ID!]
  removeReturnPortalAcceptedIDs: [ID!]
  clearReturnPortalAccepted: Boolean
  addDeliveryOptionClickCollectAtStoreIDs: [ID!]
  removeDeliveryOptionClickCollectAtStoreIDs: [ID!]
  clearDeliveryOptionClickCollectAtStore: Boolean
  addNotificationIDs: [ID!]
  removeNotificationIDs: [ID!]
  clearNotifications: Boolean
}
"""
UpdateHypothesisTestDeliveryOptionInput is used for update HypothesisTestDeliveryOption object.
Input was generated by ent.
"""
input UpdateHypothesisTestDeliveryOptionInput {
  randomizeWithinGroupSort: Boolean
  byIntervalRotation: Boolean
  rotationIntervalHours: Int
  byOrder: Boolean
  hypothesisTestID: ID
  addHypothesisTestDeliveryOptionRequestIDs: [ID!]
  removeHypothesisTestDeliveryOptionRequestIDs: [ID!]
  clearHypothesisTestDeliveryOptionRequest: Boolean
  addDeliveryOptionGroupOneIDs: [ID!]
  removeDeliveryOptionGroupOneIDs: [ID!]
  clearDeliveryOptionGroupOne: Boolean
  addDeliveryOptionGroupTwoIDs: [ID!]
  removeDeliveryOptionGroupTwoIDs: [ID!]
  clearDeliveryOptionGroupTwo: Boolean
}
"""
UpdateHypothesisTestDeliveryOptionLookupInput is used for update HypothesisTestDeliveryOptionLookup object.
Input was generated by ent.
"""
input UpdateHypothesisTestDeliveryOptionLookupInput {
  deliveryOptionID: ID
  hypothesisTestDeliveryOptionRequestID: ID
}
"""
UpdateHypothesisTestDeliveryOptionRequestInput is used for update HypothesisTestDeliveryOptionRequest object.
Input was generated by ent.
"""
input UpdateHypothesisTestDeliveryOptionRequestInput {
  orderHash: String
  shippingAddressHash: String
  isControlGroup: Boolean
  requestCount: Int
  hypothesisTestDeliveryOptionID: ID
  orderID: ID
  clearOrder: Boolean
  addHypothesisTestDeliveryOptionLookupIDs: [ID!]
  removeHypothesisTestDeliveryOptionLookupIDs: [ID!]
  clearHypothesisTestDeliveryOptionLookup: Boolean
}
"""
UpdateHypothesisTestInput is used for update HypothesisTest object.
Input was generated by ent.
"""
input UpdateHypothesisTestInput {
  name: String
  active: Boolean
  hypothesisTestDeliveryOptionID: ID
  clearHypothesisTestDeliveryOption: Boolean
  connectionID: ID
}
"""
UpdateInventoryItemInput is used for update InventoryItem object.
Input was generated by ent.
"""
input UpdateInventoryItemInput {
  """
  Used when country specific code not available
  """
  code: String
  clearCode: Boolean
  """
  Duplicated to match Shopify InventoryItem/ProductVariant
  """
  sku: String
  clearSku: Boolean
  addCountryHarmonizedCodeIDs: [ID!]
  removeCountryHarmonizedCodeIDs: [ID!]
  clearCountryHarmonizedCode: Boolean
  countryOfOriginID: ID
  clearCountryOfOrigin: Boolean
  productVariantID: ID
}
"""
UpdateLocationInput is used for update Location object.
Input was generated by ent.
"""
input UpdateLocationInput {
  """
  Location name, not used in the address
  """
  name: String
  addressID: ID
  addLocationTagIDs: [ID!]
  removeLocationTagIDs: [ID!]
  addSenderConnectionIDs: [ID!]
  removeSenderConnectionIDs: [ID!]
  clearSenderConnection: Boolean
  addPickupConnectionIDs: [ID!]
  removePickupConnectionIDs: [ID!]
  clearPickupConnection: Boolean
  addReturnConnectionIDs: [ID!]
  removeReturnConnectionIDs: [ID!]
  clearReturnConnection: Boolean
  addSellerConnectionIDs: [ID!]
  removeSellerConnectionIDs: [ID!]
  clearSellerConnection: Boolean
  addReturnPortalIDs: [ID!]
  removeReturnPortalIDs: [ID!]
  clearReturnPortal: Boolean
  addDeliveryOptionIDs: [ID!]
  removeDeliveryOptionIDs: [ID!]
  clearDeliveryOption: Boolean
  addColliIDs: [ID!]
  removeColliIDs: [ID!]
  clearColli: Boolean
}
"""
UpdateNotificationInput is used for update Notification object.
Input was generated by ent.
"""
input UpdateNotificationInput {
  name: String
  active: Boolean
  connectionID: ID
  emailTemplateID: ID
}
"""
UpdateOrderInput is used for update Order object.
Input was generated by ent.
"""
input UpdateOrderInput {
  orderPublicID: String
  commentInternal: String
  clearCommentInternal: Boolean
  commentExternal: String
  clearCommentExternal: Boolean
  connectionID: ID
  addReturnColliIDs: [ID!]
  removeReturnColliIDs: [ID!]
  clearReturnColli: Boolean
  hypothesisTestDeliveryOptionRequestID: ID
  clearHypothesisTestDeliveryOptionRequest: Boolean
  palletID: ID
  clearPallet: Boolean
  consolidationID: ID
  clearConsolidation: Boolean
}
"""
UpdateOrderSenderInput is used for update OrderSender object.
Input was generated by ent.
"""
input UpdateOrderSenderInput {
  firstName: String
  lastName: String
  email: String
  phoneNumber: String
  vatNumber: String
}
"""
UpdatePackagingDFInput is used for update PackagingDF object.
Input was generated by ent.
"""
input UpdatePackagingDFInput {
  apiType: PackagingDFAPIType
  maxWeight: Float
  clearMaxWeight: Boolean
  minWeight: Float
  clearMinWeight: Boolean
  """
  Some carriers this is not boolean, so this is not a general toggle
  """
  stackable: Boolean
}
"""
UpdatePackagingInput is used for update Packaging object.
Input was generated by ent.
"""
input UpdatePackagingInput {
  archivedAt: Time
  clearArchivedAt: Boolean
  name: String
  heightCm: Int
  widthCm: Int
  lengthCm: Int
  addShipmentParcelIDs: [ID!]
  removeShipmentParcelIDs: [ID!]
  clearShipmentParcel: Boolean
  addPalletIDs: [ID!]
  removePalletIDs: [ID!]
  clearPallet: Boolean
  addColliIDs: [ID!]
  removeColliIDs: [ID!]
  clearColli: Boolean
  addReturnColliIDs: [ID!]
  removeReturnColliIDs: [ID!]
  clearReturnColli: Boolean
  packagingDFID: ID
  clearPackagingDF: Boolean
  packagingUSPSID: ID
  clearPackagingUSPS: Boolean
  carrierBrandID: ID
  clearCarrierBrand: Boolean
  addDeliveryOptionIDs: [ID!]
  removeDeliveryOptionIDs: [ID!]
  clearDeliveryOption: Boolean
}
"""
UpdatePackagingUSPSInput is used for update PackagingUSPS object.
Input was generated by ent.
"""
input UpdatePackagingUSPSInput {
  packagingUSPSRateIndicatorID: ID
  packagingUSPSProcessingCategoryID: ID
}
"""
UpdatePackagingUSPSProcessingCategoryInput is used for update PackagingUSPSProcessingCategory object.
Input was generated by ent.
"""
input UpdatePackagingUSPSProcessingCategoryInput {
  name: String
  processingCategory: PackagingUSPSProcessingCategoryProcessingCategory
}
"""
UpdatePalletInput is used for update Pallet object.
Input was generated by ent.
"""
input UpdatePalletInput {
  publicID: String
  description: String
  addOrderIDs: [ID!]
  removeOrderIDs: [ID!]
  clearOrders: Boolean
  packagingID: ID
  clearPackaging: Boolean
  consolidationID: ID
  shipmentPalletID: ID
  clearShipmentPallet: Boolean
  addCancelledShipmentPalletIDs: [ID!]
  removeCancelledShipmentPalletIDs: [ID!]
  clearCancelledShipmentPallet: Boolean
}
"""
UpdateParcelShopBringInput is used for update ParcelShopBring object.
Input was generated by ent.
"""
input UpdateParcelShopBringInput {
  """
  https://developer.bring.com/api/pickup-point/#pickup-point-types
  """
  pointType: ParcelShopBringPointType
  bringID: String
  parcelShopID: ID
  addressDeliveryID: ID
}
"""
UpdateParcelShopDAOInput is used for update ParcelShopDAO object.
Input was generated by ent.
"""
input UpdateParcelShopDAOInput {
  shopID: String
  parcelShopID: ID
}
"""
UpdateParcelShopGLSInput is used for update ParcelShopGLS object.
Input was generated by ent.
"""
input UpdateParcelShopGLSInput {
  glsParcelShopID: String
  """
  Only available in Group API
  """
  partnerID: String
  clearPartnerID: Boolean
  """
  Only available in Group API
  """
  type: String
  clearType: Boolean
  parcelShopID: ID
}
"""
UpdateParcelShopInput is used for update ParcelShop object.
Input was generated by ent.
"""
input UpdateParcelShopInput {
  name: String
  parcelShopDAOID: ID
  clearParcelShopDAO: Boolean
  parcelShopPostNordID: ID
  clearParcelShopPostNord: Boolean
  parcelShopGLSID: ID
  clearParcelShopGLS: Boolean
  parcelShopBringID: ID
  clearParcelShopBring: Boolean
  carrierBrandID: ID
  addressID: ID
  addColliIDs: [ID!]
  removeColliIDs: [ID!]
  clearColli: Boolean
  addBusinessHoursPeriodIDs: [ID!]
  removeBusinessHoursPeriodIDs: [ID!]
  clearBusinessHoursPeriod: Boolean
}
"""
UpdateParcelShopPostNordInput is used for update ParcelShopPostNord object.
Input was generated by ent.
"""
input UpdateParcelShopPostNordInput {
  servicePointID: String
  pudoid: String
  """
  No idea what the options are aside from the default: 156. Maybe box, shop, etc??
  """
  typeID: String
  parcelShopID: ID
  addressDeliveryID: ID
}
"""
UpdatePrinterInput is used for update Printer object.
Input was generated by ent.
"""
input UpdatePrinterInput {
  name: String
  labelZpl: Boolean
  labelPdf: Boolean
  labelPng: Boolean
  document: Boolean
  rotate180: Boolean
  useShell: Boolean
  printSize: PrinterPrintSize
  workstationID: ID
  addPrintJobIDs: [ID!]
  removePrintJobIDs: [ID!]
  clearPrintJobs: Boolean
}
"""
UpdateProductInput is used for update Product object.
Input was generated by ent.
"""
input UpdateProductInput {
  title: String
  bodyHTML: String
  clearBodyHTML: Boolean
  status: ProductStatus
  addProductTagIDs: [ID!]
  removeProductTagIDs: [ID!]
  clearProductTags: Boolean
  addProductVariantIDs: [ID!]
  removeProductVariantIDs: [ID!]
  clearProductVariant: Boolean
  addProductImageIDs: [ID!]
  removeProductImageIDs: [ID!]
  clearProductImage: Boolean
}
"""
UpdateProductTagInput is used for update ProductTag object.
Input was generated by ent.
"""
input UpdateProductTagInput {
  name: String
  addProductIDs: [ID!]
  removeProductIDs: [ID!]
  clearProducts: Boolean
}
"""
UpdateProductVariantInput is used for update ProductVariant object.
Input was generated by ent.
"""
input UpdateProductVariantInput {
  archived: Boolean
  description: String
  clearDescription: Boolean
  eanNumber: String
  clearEanNumber: Boolean
  weightG: Int
  clearWeightG: Boolean
  dimensionLength: Int
  clearDimensionLength: Boolean
  dimensionWidth: Int
  clearDimensionWidth: Boolean
  dimensionHeight: Int
  clearDimensionHeight: Boolean
  addOrderLineIDs: [ID!]
  removeOrderLineIDs: [ID!]
  clearOrderLines: Boolean
  addProductImageIDs: [ID!]
  removeProductImageIDs: [ID!]
  clearProductImage: Boolean
  inventoryItemID: ID
  clearInventoryItem: Boolean
}
"""
UpdateReturnColliInput is used for update ReturnColli object.
Input was generated by ent.
"""
input UpdateReturnColliInput {
  expectedAt: Time
  clearExpectedAt: Boolean
  labelPdf: String
  clearLabelPdf: Boolean
  labelPng: String
  clearLabelPng: Boolean
  qrCodePng: String
  clearQrCodePng: Boolean
  comment: String
  clearComment: Boolean
  status: ReturnColliStatus
  """
  Timestamp of email successfully sent after status changed to received
  """
  emailReceived: Time
  clearEmailReceived: Boolean
  """
  Timestamp of email successfully sent after status changed to accepted
  """
  emailAccepted: Time
  clearEmailAccepted: Boolean
  """
  Timestamp of email successfully sent after status changed to pending
  """
  emailConfirmationLabel: Time
  clearEmailConfirmationLabel: Boolean
  """
  Timestamp of email successfully sent after status changed to pending
  """
  emailConfirmationQrCode: Time
  clearEmailConfirmationQrCode: Boolean
  orderID: ID
  deliveryOptionID: ID
  clearDeliveryOption: Boolean
  returnPortalID: ID
  packagingID: ID
  clearPackaging: Boolean
  addReturnOrderLineIDs: [ID!]
  removeReturnOrderLineIDs: [ID!]
  clearReturnOrderLine: Boolean
}
"""
UpdateReturnOrderLineInput is used for update ReturnOrderLine object.
Input was generated by ent.
"""
input UpdateReturnOrderLineInput {
  units: Int
  returnColliID: ID
  orderLineID: ID
  returnPortalClaimID: ID
}
"""
UpdateReturnPortalClaimInput is used for update ReturnPortalClaim object.
Input was generated by ent.
"""
input UpdateReturnPortalClaimInput {
  name: String
  description: String
  restockable: Boolean
  returnPortalID: ID
  returnLocationID: ID
  clearReturnLocation: Boolean
  addReturnOrderLineIDs: [ID!]
  removeReturnOrderLineIDs: [ID!]
  clearReturnOrderLine: Boolean
}
"""
UpdateReturnPortalInput is used for update ReturnPortal object.
Input was generated by ent.
"""
input UpdateReturnPortalInput {
  name: String
  returnOpenHours: Int
  automaticallyAccept: Boolean
  addReturnPortalClaimIDs: [ID!]
  removeReturnPortalClaimIDs: [ID!]
  clearReturnPortalClaim: Boolean
  addReturnLocationIDs: [ID!]
  removeReturnLocationIDs: [ID!]
  clearReturnLocation: Boolean
  addDeliveryOptionIDs: [ID!]
  removeDeliveryOptionIDs: [ID!]
  clearDeliveryOptions: Boolean
  connectionID: ID
  clearConnection: Boolean
  emailConfirmationLabelID: ID
  clearEmailConfirmationLabel: Boolean
  emailConfirmationQrCodeID: ID
  clearEmailConfirmationQrCode: Boolean
  emailReceivedID: ID
  clearEmailReceived: Boolean
  emailAcceptedID: ID
  clearEmailAccepted: Boolean
  addReturnColliIDs: [ID!]
  removeReturnColliIDs: [ID!]
  clearReturnColli: Boolean
}
"""
UpdateSeatGroupAccessRightInput is used for update SeatGroupAccessRight object.
Input was generated by ent.
"""
input UpdateSeatGroupAccessRightInput {
  level: SeatGroupAccessRightLevel
  accessRightID: ID
  seatGroupID: ID
}
"""
UpdateSeatGroupInput is used for update SeatGroup object.
Input was generated by ent.
"""
input UpdateSeatGroupInput {
  name: String
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUser: Boolean
  addAssignedAccessRightIDs: [ID!]
  removeAssignedAccessRightIDs: [ID!]
  clearAssignedAccessRight: Boolean
}
"""
UpdateShipmentBringInput is used for update ShipmentBring object.
Input was generated by ent.
"""
input UpdateShipmentBringInput {
  consignmentNumber: String
  shipmentID: ID
}
"""
UpdateShipmentDAOInput is used for update ShipmentDAO object.
Input was generated by ent.
"""
input UpdateShipmentDAOInput {
  barcodeID: String
  shipmentID: ID
}
"""
UpdateShipmentDSVInput is used for update ShipmentDSV object.
Input was generated by ent.
"""
input UpdateShipmentDSVInput {
  barcodeID: String
  shipmentID: ID
}
"""
UpdateShipmentInput is used for update Shipment object.
Input was generated by ent.
"""
input UpdateShipmentInput {
  shipmentPublicID: String
  status: ShipmentStatus
  addShipmentHistoryIDs: [ID!]
  removeShipmentHistoryIDs: [ID!]
  clearShipmentHistory: Boolean
  shipmentBringID: ID
  clearShipmentBring: Boolean
  shipmentDAOID: ID
  clearShipmentDAO: Boolean
  shipmentDFID: ID
  clearShipmentDF: Boolean
  shipmentDSVID: ID
  clearShipmentDSV: Boolean
  shipmentEasyPostID: ID
  clearShipmentEasyPost: Boolean
  shipmentPostNordID: ID
  clearShipmentPostNord: Boolean
  shipmentGLSID: ID
  clearShipmentGLS: Boolean
  shipmentUSPSID: ID
  clearShipmentUSPS: Boolean
  consolidationID: ID
  clearConsolidation: Boolean
  addOldConsolidationIDs: [ID!]
  removeOldConsolidationIDs: [ID!]
  clearOldConsolidation: Boolean
  addShipmentParcelIDs: [ID!]
  removeShipmentParcelIDs: [ID!]
  clearShipmentParcel: Boolean
  addShipmentPalletIDs: [ID!]
  removeShipmentPalletIDs: [ID!]
  clearShipmentPallet: Boolean
}
"""
UpdateShipmentPalletInput is used for update ShipmentPallet object.
Input was generated by ent.
"""
input UpdateShipmentPalletInput {
  barcode: String
  colliNumber: String
  carrierID: String
  labelPdf: String
  clearLabelPdf: Boolean
  labelZpl: String
  clearLabelZpl: Boolean
  status: ShipmentPalletStatus
  palletID: ID
  clearPallet: Boolean
  addOldPalletIDs: [ID!]
  removeOldPalletIDs: [ID!]
  clearOldPallet: Boolean
}
"""
UpdateShipmentParcelInput is used for update ShipmentParcel object.
Input was generated by ent.
"""
input UpdateShipmentParcelInput {
  itemID: String
  clearItemID: Boolean
  status: ShipmentParcelStatus
  ccPickupSignatureUrls: [String!]
  appendCcPickupSignatureUrls: [String!]
  clearCcPickupSignatureUrls: Boolean
  colliID: ID
  clearColli: Boolean
  addOldColliIDs: [ID!]
  removeOldColliIDs: [ID!]
  clearOldColli: Boolean
  addWorkspaceRecentScanIDs: [ID!]
  removeWorkspaceRecentScanIDs: [ID!]
  clearWorkspaceRecentScan: Boolean
  packagingID: ID
  clearPackaging: Boolean
  addPrintJobIDs: [ID!]
  removePrintJobIDs: [ID!]
  clearPrintJob: Boolean
  documentFileID: ID
  clearDocumentFile: Boolean
}
"""
UpdateShipmentPostNordInput is used for update ShipmentPostNord object.
Input was generated by ent.
"""
input UpdateShipmentPostNordInput {
  """
  Multiple labels. May contain unrelated shipments.
  """
  bookingID: String
  """
  Individual label. Can be grouped to same address. Probably should not be on this ent?
  """
  itemID: String
  """
  Shipment can contain multiple parcels to same address.
  """
  shipmentReferenceNo: String
  shipmentID: ID
}
"""
UpdateShipmentUSPSInput is used for update ShipmentUSPS object.
Input was generated by ent.
"""
input UpdateShipmentUSPSInput {
  trackingNumber: String
  clearTrackingNumber: Boolean
  postage: Float
  clearPostage: Boolean
  scheduledDeliveryDate: Time
  clearScheduledDeliveryDate: Boolean
  shipmentID: ID
}
"""
UpdateSignupOptionsInput is used for update SignupOptions object.
Input was generated by ent.
"""
input UpdateSignupOptionsInput {
  betterDeliveryOptions: Boolean
  improvePickPack: Boolean
  shippingLabel: Boolean
  customDocs: Boolean
  reducedCosts: Boolean
  easyReturns: Boolean
  clickCollect: Boolean
  numShipments: Int
  usersID: ID
}
"""
UpdateTenantInput is used for update Tenant object.
Input was generated by ent.
"""
input UpdateTenantInput {
  name: String
  vatNumber: String
  clearVatNumber: Boolean
  invoiceReference: String
  clearInvoiceReference: Boolean
  addConnectOptionCarrierIDs: [ID!]
  removeConnectOptionCarrierIDs: [ID!]
  clearConnectOptionCarriers: Boolean
  addConnectOptionPlatformIDs: [ID!]
  removeConnectOptionPlatformIDs: [ID!]
  clearConnectOptionPlatforms: Boolean
  planID: ID
  companyAddressID: ID
  clearCompanyAddress: Boolean
  defaultLanguageID: ID
  billingContactID: ID
  clearBillingContact: Boolean
  adminContactID: ID
  clearAdminContact: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  clearName: Boolean
  surname: String
  clearSurname: Boolean
  phoneNumber: String
  clearPhoneNumber: Boolean
  email: String
  """
  Field is just for front end convenience. Password gets stored as hash.
  """
  password: String
  clearPassword: Boolean
  marketingConsent: Boolean
  clearMarketingConsent: Boolean
  archivedAt: Time
  clearArchivedAt: Boolean
  """
  When fulfilling, the next carrier pickup date for the package can be selected
  """
  pickupDay: UserPickupDay
  """
  So we can ask the user to confirm their pickup day after X hours
  """
  pickupDayLastChanged: Time
  clearPickupDayLastChanged: Boolean
  addOtkRequestIDs: [ID!]
  removeOtkRequestIDs: [ID!]
  clearOtkRequests: Boolean
  signupOptionsID: ID
  clearSignupOptions: Boolean
  languageID: ID
  clearLanguage: Boolean
  addChangeHistoryIDs: [ID!]
  removeChangeHistoryIDs: [ID!]
  clearChangeHistory: Boolean
  addPlanHistoryUserIDs: [ID!]
  removePlanHistoryUserIDs: [ID!]
  clearPlanHistoryUser: Boolean
  addAPITokenIDs: [ID!]
  removeAPITokenIDs: [ID!]
  clearAPIToken: Boolean
  selectedWorkstationID: ID
  clearSelectedWorkstation: Boolean
  seatGroupID: ID
  clearSeatGroup: Boolean
  addWorkspaceRecentScanIDs: [ID!]
  removeWorkspaceRecentScanIDs: [ID!]
  clearWorkspaceRecentScan: Boolean
}
"""
UpdateUserSeatInput is used for update UserSeat object.
Input was generated by ent.
"""
input UpdateUserSeatInput {
  name: String
  clearName: Boolean
  surname: String
  clearSurname: Boolean
  email: String
}
"""
UpdateWorkstationInput is used for update Workstation object.
Input was generated by ent.
"""
input UpdateWorkstationInput {
  archivedAt: Time
  clearArchivedAt: Boolean
  name: String
  deviceType: WorkstationDeviceType
  status: WorkstationStatus
  autoPrintReceiver: Boolean
  addPrinterIDs: [ID!]
  removePrinterIDs: [ID!]
  clearPrinter: Boolean
  selectedUserID: ID
  clearSelectedUser: Boolean
}
type User implements Node {
  id: ID!
  tenantID: ID!
  name: String
  surname: String
  phoneNumber: String
  email: String!
  isAccountOwner: Boolean!
  isGlobalAdmin: Boolean!
  marketingConsent: Boolean
  createdAt: Time
  archivedAt: Time
  """
  When fulfilling, the next carrier pickup date for the package can be selected
  """
  pickupDay: UserPickupDay!
  """
  So we can ask the user to confirm their pickup day after X hours
  """
  pickupDayLastChanged: Time
  tenant: Tenant!
  otkRequests: [OTKRequests!]
  signupOptions: SignupOptions
  language: Language
  changeHistory: [ChangeHistory!]
  planHistoryUser: [PlanHistory!]
  apiToken: [APIToken!]
  selectedWorkstation: Workstation
  seatGroup: SeatGroup
  workspaceRecentScan: [WorkspaceRecentScan!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserPickupDay is enum for the field pickup_day
"""
enum UserPickupDay @goModel(model: "delivrio.io/go/ent/user.PickupDay") {
  Today
  Tomorrow
  In_2_Days
  In_3_Days
  In_4_Days
  In_5_Days
}
type UserSeat implements Node {
  id: ID!
  tenantID: ID!
  name: String
  surname: String
  email: String!
  createdAt: Time!
  tenant: Tenant!
}
"""
A connection to a list of items.
"""
type UserSeatConnection {
  """
  A list of edges.
  """
  edges: [UserSeatEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserSeatEdge {
  """
  The item at the end of the edge.
  """
  node: UserSeat
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserSeatWhereInput is used for filtering UserSeat objects.
Input was generated by ent.
"""
input UserSeatWhereInput {
  not: UserSeatWhereInput
  and: [UserSeatWhereInput!]
  or: [UserSeatWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  surname field predicates
  """
  surname: String
  surnameNEQ: String
  surnameIn: [String!]
  surnameNotIn: [String!]
  surnameGT: String
  surnameGTE: String
  surnameLT: String
  surnameLTE: String
  surnameContains: String
  surnameHasPrefix: String
  surnameHasSuffix: String
  surnameIsNil: Boolean
  surnameNotNil: Boolean
  surnameEqualFold: String
  surnameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  surname field predicates
  """
  surname: String
  surnameNEQ: String
  surnameIn: [String!]
  surnameNotIn: [String!]
  surnameGT: String
  surnameGTE: String
  surnameLT: String
  surnameLTE: String
  surnameContains: String
  surnameHasPrefix: String
  surnameHasSuffix: String
  surnameIsNil: Boolean
  surnameNotNil: Boolean
  surnameEqualFold: String
  surnameContainsFold: String
  """
  phone_number field predicates
  """
  phoneNumber: String
  phoneNumberNEQ: String
  phoneNumberIn: [String!]
  phoneNumberNotIn: [String!]
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberContains: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIsNil: Boolean
  phoneNumberNotNil: Boolean
  phoneNumberEqualFold: String
  phoneNumberContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  is_account_owner field predicates
  """
  isAccountOwner: Boolean
  isAccountOwnerNEQ: Boolean
  """
  is_global_admin field predicates
  """
  isGlobalAdmin: Boolean
  isGlobalAdminNEQ: Boolean
  """
  marketing_consent field predicates
  """
  marketingConsent: Boolean
  marketingConsentNEQ: Boolean
  marketingConsentIsNil: Boolean
  marketingConsentNotNil: Boolean
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  archived_at field predicates
  """
  archivedAt: Time
  archivedAtNEQ: Time
  archivedAtIn: [Time!]
  archivedAtNotIn: [Time!]
  archivedAtGT: Time
  archivedAtGTE: Time
  archivedAtLT: Time
  archivedAtLTE: Time
  archivedAtIsNil: Boolean
  archivedAtNotNil: Boolean
  """
  pickup_day field predicates
  """
  pickupDay: UserPickupDay
  pickupDayNEQ: UserPickupDay
  pickupDayIn: [UserPickupDay!]
  pickupDayNotIn: [UserPickupDay!]
  """
  pickup_day_last_changed field predicates
  """
  pickupDayLastChanged: Time
  pickupDayLastChangedNEQ: Time
  pickupDayLastChangedIn: [Time!]
  pickupDayLastChangedNotIn: [Time!]
  pickupDayLastChangedGT: Time
  pickupDayLastChangedGTE: Time
  pickupDayLastChangedLT: Time
  pickupDayLastChangedLTE: Time
  pickupDayLastChangedIsNil: Boolean
  pickupDayLastChangedNotNil: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  otk_requests edge predicates
  """
  hasOtkRequests: Boolean
  hasOtkRequestsWith: [OTKRequestsWhereInput!]
  """
  signup_options edge predicates
  """
  hasSignupOptions: Boolean
  hasSignupOptionsWith: [SignupOptionsWhereInput!]
  """
  language edge predicates
  """
  hasLanguage: Boolean
  hasLanguageWith: [LanguageWhereInput!]
  """
  change_history edge predicates
  """
  hasChangeHistory: Boolean
  hasChangeHistoryWith: [ChangeHistoryWhereInput!]
  """
  plan_history_user edge predicates
  """
  hasPlanHistoryUser: Boolean
  hasPlanHistoryUserWith: [PlanHistoryWhereInput!]
  """
  api_token edge predicates
  """
  hasAPIToken: Boolean
  hasAPITokenWith: [APITokenWhereInput!]
  """
  selected_workstation edge predicates
  """
  hasSelectedWorkstation: Boolean
  hasSelectedWorkstationWith: [WorkstationWhereInput!]
  """
  seat_group edge predicates
  """
  hasSeatGroup: Boolean
  hasSeatGroupWith: [SeatGroupWhereInput!]
  """
  workspace_recent_scan edge predicates
  """
  hasWorkspaceRecentScan: Boolean
  hasWorkspaceRecentScanWith: [WorkspaceRecentScanWhereInput!]
}
type WorkspaceRecentScan implements Node {
  id: ID!
  tenantID: ID!
  createdAt: Time!
  tenant: Tenant!
  shipmentParcel: ShipmentParcel
  user: User!
}
"""
WorkspaceRecentScanWhereInput is used for filtering WorkspaceRecentScan objects.
Input was generated by ent.
"""
input WorkspaceRecentScanWhereInput {
  not: WorkspaceRecentScanWhereInput
  and: [WorkspaceRecentScanWhereInput!]
  or: [WorkspaceRecentScanWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  shipment_parcel edge predicates
  """
  hasShipmentParcel: Boolean
  hasShipmentParcelWith: [ShipmentParcelWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Workstation implements Node {
  id: ID!
  tenantID: ID!
  archivedAt: Time
  name: String!
  deviceType: WorkstationDeviceType!
  workstationID: String!
  createdAt: Time!
  lastPing: Time
  status: WorkstationStatus!
  autoPrintReceiver: Boolean!
  tenant: Tenant!
  printer: [Printer!]
  """
  the user who created the workstation
  """
  user: User
  """
  the user currently sending print jobs to this workstation
  """
  selectedUser: User
}
"""
A connection to a list of items.
"""
type WorkstationConnection {
  """
  A list of edges.
  """
  edges: [WorkstationEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
WorkstationDeviceType is enum for the field device_type
"""
enum WorkstationDeviceType @goModel(model: "delivrio.io/go/ent/workstation.DeviceType") {
  label_station
  app
}
"""
An edge in a connection.
"""
type WorkstationEdge {
  """
  The item at the end of the edge.
  """
  node: Workstation
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
WorkstationStatus is enum for the field status
"""
enum WorkstationStatus @goModel(model: "delivrio.io/go/ent/workstation.Status") {
  pending
  active
  offline
  disabled
}
"""
WorkstationWhereInput is used for filtering Workstation objects.
Input was generated by ent.
"""
input WorkstationWhereInput {
  not: WorkstationWhereInput
  and: [WorkstationWhereInput!]
  or: [WorkstationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  tenant_id field predicates
  """
  tenantID: ID
  tenantIDNEQ: ID
  tenantIDIn: [ID!]
  tenantIDNotIn: [ID!]
  tenantIDGT: ID
  tenantIDGTE: ID
  tenantIDLT: ID
  tenantIDLTE: ID
  tenantIDContains: ID
  tenantIDHasPrefix: ID
  tenantIDHasSuffix: ID
  tenantIDEqualFold: ID
  tenantIDContainsFold: ID
  """
  archived_at field predicates
  """
  archivedAt: Time
  archivedAtNEQ: Time
  archivedAtIn: [Time!]
  archivedAtNotIn: [Time!]
  archivedAtGT: Time
  archivedAtGTE: Time
  archivedAtLT: Time
  archivedAtLTE: Time
  archivedAtIsNil: Boolean
  archivedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  device_type field predicates
  """
  deviceType: WorkstationDeviceType
  deviceTypeNEQ: WorkstationDeviceType
  deviceTypeIn: [WorkstationDeviceType!]
  deviceTypeNotIn: [WorkstationDeviceType!]
  """
  workstation_id field predicates
  """
  workstationID: String
  workstationIDNEQ: String
  workstationIDIn: [String!]
  workstationIDNotIn: [String!]
  workstationIDGT: String
  workstationIDGTE: String
  workstationIDLT: String
  workstationIDLTE: String
  workstationIDContains: String
  workstationIDHasPrefix: String
  workstationIDHasSuffix: String
  workstationIDEqualFold: String
  workstationIDContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  last_ping field predicates
  """
  lastPing: Time
  lastPingNEQ: Time
  lastPingIn: [Time!]
  lastPingNotIn: [Time!]
  lastPingGT: Time
  lastPingGTE: Time
  lastPingLT: Time
  lastPingLTE: Time
  lastPingIsNil: Boolean
  lastPingNotNil: Boolean
  """
  status field predicates
  """
  status: WorkstationStatus
  statusNEQ: WorkstationStatus
  statusIn: [WorkstationStatus!]
  statusNotIn: [WorkstationStatus!]
  """
  auto_print_receiver field predicates
  """
  autoPrintReceiver: Boolean
  autoPrintReceiverNEQ: Boolean
  """
  tenant edge predicates
  """
  hasTenant: Boolean
  hasTenantWith: [TenantWhereInput!]
  """
  printer edge predicates
  """
  hasPrinter: Boolean
  hasPrinterWith: [PrinterWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  selected_user edge predicates
  """
  hasSelectedUser: Boolean
  hasSelectedUserWith: [UserWhereInput!]
}
`, BuiltIn: false},
	{Name: "../history_logs.graphql", Input: `type HistoryLog {
    histories: [ChangeHistory!]!
    system_event: [SystemEvents!]!
}

extend type Query {
    historyLogs: HistoryLog!
}`, BuiltIn: false},
	{Name: "../hypothesis_testing.graphql", Input: `
type DashboardHypothesisTestResult {
    id: ID!
    Name: String!
    ControlSuccess: Int!
    ControlFailure: Int!
    TestSuccess: Int!
    TestFailure: Int!
    SignificantlyDifferent: Boolean!
    ControlWin: Float!
    TestWin: Float!
}

extend type Query {
    hypothesisTest(id: ID!): HypothesisTest!
    unassignedDeliveryOptions(hypothesisTestID: ID!): [DeliveryOption!]!
    hypothesisTestResultsDashboard: [DashboardHypothesisTestResult!]!
}

extend type Mutation {
    createHypothesisTestDeliveryOption(name: String!, connectionID: ID!): ID!
    updateHypothesisTestDeliveryOption(id: ID!, input: UpdateHypothesisTestInput!, inputDeliveryOption: UpdateHypothesisTestDeliveryOptionInput!): HypothesisTest!
}`, BuiltIn: false},
	{Name: "../locations.graphql", Input: `extend type Query {
    location(id: ID!): Location
    allLocationsIn(country: ID): [Location!]!
}

extend type Mutation {
    createLocation(input: CreateLocationInput!, inputAddress: CreateAddressInput!): Location
    updateLocation(id: ID!, input: UpdateLocationInput!, inputAddress: UpdateAddressInput!): Location
}`, BuiltIn: false},
	{Name: "../notifications.graphql", Input: `
extend type Mutation {
    createNotification(name: String!, connectionID: ID!, emailTemplateID: ID!): [Notification!]!
    toggleNotification(notificationID: ID!, checked: Boolean!): Boolean!
}`, BuiltIn: false},
	{Name: "../order.graphql", Input: `enum DeliveryOptionBrandNameStatus @goModel(model: "delivrio.io/go/deliveryoptions.DeliveryOptionBrandNameStatus") {
    SELECTED
    AVAILABLE
    NOT_AVAILABLE
}

type DeliveryOptionBrandName @goModel(model: "delivrio.io/go/deliveryoptions.DeliveryOptionBrandName") {
    deliveryOptionID: ID!
    name: String!
    description: String!
    status: DeliveryOptionBrandNameStatus!
    # When not matched, price/currency is ambiguous and won't be displayed
    price: String
    currency: Currency
    warning: String
    requiresDeliveryPoint: Boolean!
    deliveryPoint: Boolean!
    clickAndCollect: Boolean!
}

input DeliveryOptionProductLineInput @goModel(model: "delivrio.io/go/deliveryoptions.DeliveryOptionProductLineInput") {
    productVariantID: ID!
    units: Int!
    unitPrice: Float!
}

input DeliveryOptionSeedInput @goModel(model: "delivrio.io/go/deliveryoptions.DeliveryOptionSeedInput") {
    connectionID: ID!
    country: ID!
    zip: String!
    productLines: [DeliveryOptionProductLineInput!]
}

input ProductVariantQuantity {
    orderLineID: ID!
    variantID: ID!
    units: Int!
    price: Float!
    discount: Float!
    currency: String!
}

type OrderShipmentStatus {
    mayShipRemaining: Boolean!
    shipmentStatuses: [ParcelStatuses!]!
}

type ParcelStatuses {
    colliID: ID!
    shipmentID: ID
    ccSignatures: [String!]!
}

type DeliveryPoint {
    id: ID!
    name: String!
    address: AddressGlobal!
}

type PackingSlipsOutput {
    packingSlips: [String!]!
    allPackingSlips: String!
}

extend type Query {
    order(id: ID): Order
    orderShipments(orderID: ID!): OrderShipmentStatus
    colli(id: ID): Colli
    orderTimeline(orderID: ID!): [ChangeHistory]!
    deliveryOptionsList(orderInfo: DeliveryOptionSeedInput!): [DeliveryOptionBrandName]!
    deliveryPoint(colliID: ID!): DeliveryPoint
    availableDeliveryPoints(deliveryOptionID: ID, address: CreateAddressInput): [DeliveryPoint!]!
    clickCollectLocation(colliID: ID!): Location
    packingSlips(colliIDs: [ID!]!): PackingSlipsOutput!
    packingSlipsByOrder(orderIDs: [ID!]!): PackingSlipsOutput!
    packingSlipsClearCache(orderIDs: [ID!]!): Boolean!
}

extend type Mutation {
    duplicateColli(fromColliID: ID!): Order!
    deleteColli(colliID: ID!): Order!
    moveOrderLine(orderLineID: ID!, colliID: ID!): [Colli!]
    createColli(
        orderID: ID!,
        input: CreateColliInput!,
        deliveryOptionID: ID,
        deliveryPointID: ID,
        ccLocationID: ID,
        packagingID: ID,
        recipientAddress: CreateAddressInput!,
        senderAddress: CreateAddressInput!,
        products: [ProductVariantQuantity!]!
    ): Order!
    updateColli(
        id: ID!,
        input: UpdateColliInput!,
        deliveryOptionID: ID,
        deliveryPointID: ID,
        ccLocationID: ID,
        packagingID: ID,
        recipientAddressID: ID!,
        recipientAddress: UpdateAddressInput!,
        senderAddressID: ID!,
        senderAddress: UpdateAddressInput!,
        updateExistingRecipient: Boolean,
        products: [ProductVariantQuantity!]!
        removeProducts: [ID!]!
    ): Colli
    createEmptyOrder(input: CreateOrderInput!): Order
    updateOrder(id: ID!, input: UpdateOrderInput!): Order
    bulkUpdatePackaging(orderIDs: [ID!]!, packagingID: ID): BulkUpdateMessage!
}

type BulkUpdateMessage {
    success: Boolean!
    msg: String!
}`, BuiltIn: false},
	{Name: "../packaging.graphql", Input: `extend type Query {
    packagingFiltered(showArchived: Boolean!): [Packaging!]!
}

extend type Mutation {
    createPackaging(input: CreatePackagingInput!, inputPackagingUSPS: CreatePackagingUSPSInput, inputPackagingDF: CreatePackagingDFInput): [Packaging!]!
    updatePackaging(input: UpdatePackagingInput!, inputPackagingUSPS: UpdatePackagingUSPSInput, inputPackagingDF: CreatePackagingDFInput): [Packaging!]!
    archivePackaging(id: ID!): Boolean!
}`, BuiltIn: false},
	{Name: "../printer.graphql", Input: `extend type Query {
    # Potentially has side effect of request labels or generating a PDF, so we don't want auto-tx started
    createPackingListPrintJob(colliIDs: [ID!]!): Boolean!
    createLabelsPrintJob(colliIDs: [ID!]!): Boolean!
}`, BuiltIn: false},
	{Name: "../product.graphql", Input: `scalar Upload

input UpdateProductVariantIDInput {
    id: ID!
    variant: UpdateProductVariantInput!
}

extend type Query {
    product(id: ID!): Product
}

input ProductVariantImageInput {
    variantIDs: [ID!]!
    imageID: ID!
}

extend type Mutation {
    createProduct(input: CreateProductInput!, variants: [CreateProductVariantInput!], images: [String!]): Product
    updateProduct(id: ID!, input: UpdateProductInput!, variants: [UpdateProductVariantIDInput!], images: [ProductVariantImageInput!]): Product
    uploadProductImage(productID: ID!, image: String!): Product!
    deleteProductImage(imageID: ID!): Product!
    archiveProductVariant(variantID: ID!): Product!

    createVariant(productID: ID!, input: CreateProductVariantInput): ProductVariant!
    mustInventory(productVariantID: ID!): InventoryItem!
    updateInventory(iventoryItemID: ID!, input: UpdateInventoryItemInput!): InventoryItem!

    createProductTags(input: [String!]): [ProductTag]
    deleteTag(id: ID!): [ProductTag]
}
`, BuiltIn: false},
	{Name: "../return_portal.graphql", Input: `type ReturnColliEdit {
    collis: [ReturnColliTimeline!]!
    order: Order!
}

type ReturnColliTimeline {
    colli: ReturnColli!
    timeline:  [ChangeHistory!]!
}

input MutateReturnDeliveryOption {
    deliveryOptionID: ID!
    returnColliID: ID!
}

extend type Query {
    returnPortal(id: ID!): ReturnPortal!
    #returnOrder(id: ID!): ReturnOrder!
    # Redunant ID avoids package shadowing
    returnClaimsByOrder(orderID: ID!): [ReturnPortalClaim!]!
    returnColli(orderID: ID!): ReturnColliEdit!
    returnDeliveryOptions(returnColliIDs: [ID!]!): [[DeliveryOptionBrandName]]!

    # Mutates, but we want individual TX
    addReturnDeliveryOption(deliveryOptions: [MutateReturnDeliveryOption!]!): ID!
}

# We need to track the ID since it gets
# attached to returns
input MutateReturnPortalClaim {
    id: ID!
    input: CreateReturnPortalClaimInput!
}

input MutateReturnItems {
    units: Int!
    claimID: ID!
    orderLineID: ID!
}

extend type Mutation {
    createReturnPortal(name: String!, connection: ID!): ID!
    updateReturnPortal(id: ID!, input: UpdateReturnPortalInput!, inputClaims: [MutateReturnPortalClaim!]!): ReturnPortal!

    createReturnOrder(orderID: ID!, portalID: ID!, orderLines: [MutateReturnItems!]!): [ID!]!

    updateReturnColliStatus(returnColliID: ID!, status: ReturnColliStatus!): ReturnColliEdit!
    markColliDeleted(returnColliID: ID!): Boolean!
}`, BuiltIn: false},
	{Name: "../search.graphql", Input: `enum EntityType {
    ORDER
    PRODUCT
}

type SearchResult {
    id: ID!
    title: String!
    imagePath: String
    entity: EntityType!
}

extend type Query {
    search(term: String!, filter: [EntityType!]): [SearchResult!]!
}`, BuiltIn: false},
	{Name: "../shipments.graphql", Input: `type ShipmentListItem {
    id: ID!
    orderIDDisplay: [String!]!
    shipment: Shipment!
    recipient: Address!
    sender: Address!
    deliveryOption: DeliveryOption!
}

extend type Query {
    shipmentsList(
        after: Cursor,
        first: Int,
        before: Cursor,
        last: Int,
        where: ShipmentWhereInput
    ): [ShipmentListItem!]
    shipment(id: ID!): Shipment!
    shipmentLabels(colliIDs: [ID!]!): ShipmentLabelsResponse!

    sendOverviewEmail(to: String!, emailTpl: ID!, where: ShipmentWhereInput!): Boolean!

    # Because this endpoint necessarily makes external connections, we don't
    # want to auto-start a mutation transaction
    createShipments(orderID: ID!, packageIDs: [ID!]!): CreateShipmentsResponse!
}

type ShipmentLabelsResponse {
    labelsPDF: [String!]!
    allLabels: String!
}

type CreateShipmentsResponse {
    order: Order!
    shipments: [ShipmentLabelsResponse!]!
    labelsPDF: [String!]!
    allLabels: String!
}

extend type Mutation {
    cancelShipment(shipmentID: ID!): Shipment!
    cancelShipmentByColliIDs(colliIDs: [ID!]!): Boolean!
    debugUpdateLabelIDs(parcelID: ID!, itemID: String!): Boolean!

    cancelFulfillmentSync(shipmentParcelID: ID!): Boolean!
    cancelCancelSync(shipmentParcelID: ID!): Boolean!
}`, BuiltIn: false},
	{Name: "../singles.graphql", Input: `extend type Query {
    country(id: ID!): Country
}
`, BuiltIn: false},
	{Name: "../user.graphql", Input: `extend type Query {
    user(id: ID): User
    seatGroup(id: ID!): SeatGroup
    tenant(id: ID): Tenant
    selectedWorkstation: SelectedWorkstation
    buildInfo: BuildInfo!
    availableTenants: [Tenant!]!
}

type BuildInfo {
    Time: String!
    Hash: String!
    LimitedSystem: Boolean!
}

type SelectedWorkstation {
    workstation: Workstation
    jobs: [PrintJob!]!
    limitExceeded: Boolean!
}

extend type Mutation {

    updateUser(input: UpdateUserInput!, newTenantID: ID): User
    updateCompanyInfo(input: UpdateTenantInput!, defaultLanguage: ID!, adminContact: CreateContactInput!, billingContact: CreateContactInput!, address: CreateAddressInput!): Tenant
    updatePlan(planID: ID!): Tenant

    createUserSeat(input: CreateUserInput!): User
    updateUserSeat(id: ID!, input: UpdateUserInput!): User
    updateUserPassword(id: ID!, input: String!): User

    createSeatGroup(input: CreateSeatGroupInput!, accessRights: [CreateSeatGroupAccessRightInput!]): SeatGroup
    replaceSeatGroup(id: ID!, input: UpdateSeatGroupInput!, accessRights: [CreateSeatGroupAccessRightInput!]): SeatGroup

    replaceSignupOptions(userID: ID!, input: CreateSignupOptionsInput!): SignupOptions
    replaceInterestedCarriersPlatforms(userID: ID!, inputCarriers: [ID!]!, inputPlatforms: [ID!]!): User
}`, BuiltIn: false},
	{Name: "../workstations.graphql", Input: `extend type Query {
    workstation(id: ID!): Workstation!
    filteredWorkstations(showArchived: Boolean!): [Workstation!]!
}

type CreateWorkstationSuccess {
    id: ID!
    registrationToken: String!
    registrationTokenImg: String!
}

input UpdatePrinterWithIDInput {
    id: ID!
    updatePrinters: UpdatePrinterInput!
}

extend input UpdateWorkstationInput {
    updatePrinters: [UpdatePrinterWithIDInput!]!
}

extend type Mutation {
    createWorkstation(input: CreateWorkstationInput!): CreateWorkstationSuccess
    updateWorkstation(id: ID!, input: UpdateWorkstationInput!): Workstation
    saveSelectedWorkstation(id: ID!, pickupDay: UserPickupDay!): Boolean!
    archiveWorkstation(id: ID!): Boolean!

    #registerWorkstation(registrationCode: String!, workstationID: String!): Boolean
    #syncPrinters(registrationCode: String!, workstationID: String!, printerIDs: [String!]!): Boolean
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
