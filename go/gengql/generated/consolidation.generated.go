// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/gengql/generated/models"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ConsolidationShipmentStatus_mayPrebook(ctx context.Context, field graphql.CollectedField, obj *models.ConsolidationShipmentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsolidationShipmentStatus_mayPrebook(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MayPrebook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsolidationShipmentStatus_mayPrebook(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsolidationShipmentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConsolidationShipmentStatus_mayBook(ctx context.Context, field graphql.CollectedField, obj *models.ConsolidationShipmentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsolidationShipmentStatus_mayBook(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MayBook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsolidationShipmentStatus_mayBook(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsolidationShipmentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConsolidationShipmentStatus_shipment(ctx context.Context, field graphql.CollectedField, obj *models.ConsolidationShipmentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsolidationShipmentStatus_shipment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Shipment)
	fc.Result = res
	return ec.marshalOShipment2ᚖdelivrioᚗioᚋgoᚋentᚐShipment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsolidationShipmentStatus_shipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsolidationShipmentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Shipment_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Shipment_tenantID(ctx, field)
			case "shipmentPublicID":
				return ec.fieldContext_Shipment_shipmentPublicID(ctx, field)
			case "createdAt":
				return ec.fieldContext_Shipment_createdAt(ctx, field)
			case "status":
				return ec.fieldContext_Shipment_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Shipment_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_Shipment_carrier(ctx, field)
			case "shipmentHistory":
				return ec.fieldContext_Shipment_shipmentHistory(ctx, field)
			case "shipmentBring":
				return ec.fieldContext_Shipment_shipmentBring(ctx, field)
			case "shipmentDAO":
				return ec.fieldContext_Shipment_shipmentDAO(ctx, field)
			case "shipmentDF":
				return ec.fieldContext_Shipment_shipmentDF(ctx, field)
			case "shipmentDSV":
				return ec.fieldContext_Shipment_shipmentDSV(ctx, field)
			case "shipmentEasyPost":
				return ec.fieldContext_Shipment_shipmentEasyPost(ctx, field)
			case "shipmentPostNord":
				return ec.fieldContext_Shipment_shipmentPostNord(ctx, field)
			case "shipmentGLS":
				return ec.fieldContext_Shipment_shipmentGLS(ctx, field)
			case "shipmentUSPS":
				return ec.fieldContext_Shipment_shipmentUSPS(ctx, field)
			case "consolidation":
				return ec.fieldContext_Shipment_consolidation(ctx, field)
			case "oldConsolidation":
				return ec.fieldContext_Shipment_oldConsolidation(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Shipment_shipmentParcel(ctx, field)
			case "shipmentPallet":
				return ec.fieldContext_Shipment_shipmentPallet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Shipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateShipmentConsolidationResponse_shipment(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentConsolidationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentConsolidationResponse_shipment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shipment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Shipment)
	fc.Result = res
	return ec.marshalNShipment2ᚖdelivrioᚗioᚋgoᚋentᚐShipment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentConsolidationResponse_shipment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentConsolidationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Shipment_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Shipment_tenantID(ctx, field)
			case "shipmentPublicID":
				return ec.fieldContext_Shipment_shipmentPublicID(ctx, field)
			case "createdAt":
				return ec.fieldContext_Shipment_createdAt(ctx, field)
			case "status":
				return ec.fieldContext_Shipment_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Shipment_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_Shipment_carrier(ctx, field)
			case "shipmentHistory":
				return ec.fieldContext_Shipment_shipmentHistory(ctx, field)
			case "shipmentBring":
				return ec.fieldContext_Shipment_shipmentBring(ctx, field)
			case "shipmentDAO":
				return ec.fieldContext_Shipment_shipmentDAO(ctx, field)
			case "shipmentDF":
				return ec.fieldContext_Shipment_shipmentDF(ctx, field)
			case "shipmentDSV":
				return ec.fieldContext_Shipment_shipmentDSV(ctx, field)
			case "shipmentEasyPost":
				return ec.fieldContext_Shipment_shipmentEasyPost(ctx, field)
			case "shipmentPostNord":
				return ec.fieldContext_Shipment_shipmentPostNord(ctx, field)
			case "shipmentGLS":
				return ec.fieldContext_Shipment_shipmentGLS(ctx, field)
			case "shipmentUSPS":
				return ec.fieldContext_Shipment_shipmentUSPS(ctx, field)
			case "consolidation":
				return ec.fieldContext_Shipment_consolidation(ctx, field)
			case "oldConsolidation":
				return ec.fieldContext_Shipment_oldConsolidation(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Shipment_shipmentParcel(ctx, field)
			case "shipmentPallet":
				return ec.fieldContext_Shipment_shipmentPallet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Shipment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateShipmentConsolidationResponse_labelsPDF(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentConsolidationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentConsolidationResponse_labelsPDF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LabelsPDF, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentConsolidationResponse_labelsPDF(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentConsolidationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateShipmentConsolidationResponse_allLabels(ctx context.Context, field graphql.CollectedField, obj *models.CreateShipmentConsolidationResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateShipmentConsolidationResponse_allLabels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllLabels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateShipmentConsolidationResponse_allLabels(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateShipmentConsolidationResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateOrUpdatePallet(ctx context.Context, obj interface{}) (models.CreateOrUpdatePallet, error) {
	var it models.CreateOrUpdatePallet
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "create"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "create":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("create"))
			data, err := ec.unmarshalNCreatePalletInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreatePalletInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Create = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var consolidationShipmentStatusImplementors = []string{"ConsolidationShipmentStatus"}

func (ec *executionContext) _ConsolidationShipmentStatus(ctx context.Context, sel ast.SelectionSet, obj *models.ConsolidationShipmentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, consolidationShipmentStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConsolidationShipmentStatus")
		case "mayPrebook":
			out.Values[i] = ec._ConsolidationShipmentStatus_mayPrebook(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mayBook":
			out.Values[i] = ec._ConsolidationShipmentStatus_mayBook(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shipment":
			out.Values[i] = ec._ConsolidationShipmentStatus_shipment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createShipmentConsolidationResponseImplementors = []string{"CreateShipmentConsolidationResponse"}

func (ec *executionContext) _CreateShipmentConsolidationResponse(ctx context.Context, sel ast.SelectionSet, obj *models.CreateShipmentConsolidationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createShipmentConsolidationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateShipmentConsolidationResponse")
		case "shipment":
			out.Values[i] = ec._CreateShipmentConsolidationResponse_shipment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "labelsPDF":
			out.Values[i] = ec._CreateShipmentConsolidationResponse_labelsPDF(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allLabels":
			out.Values[i] = ec._CreateShipmentConsolidationResponse_allLabels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNConsolidationShipmentStatus2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐConsolidationShipmentStatus(ctx context.Context, sel ast.SelectionSet, v models.ConsolidationShipmentStatus) graphql.Marshaler {
	return ec._ConsolidationShipmentStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNConsolidationShipmentStatus2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐConsolidationShipmentStatus(ctx context.Context, sel ast.SelectionSet, v *models.ConsolidationShipmentStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConsolidationShipmentStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateOrUpdatePallet2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateOrUpdatePalletᚄ(ctx context.Context, v interface{}) ([]*models.CreateOrUpdatePallet, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*models.CreateOrUpdatePallet, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateOrUpdatePallet2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateOrUpdatePallet(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateOrUpdatePallet2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateOrUpdatePallet(ctx context.Context, v interface{}) (*models.CreateOrUpdatePallet, error) {
	res, err := ec.unmarshalInputCreateOrUpdatePallet(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateShipmentConsolidationResponse2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateShipmentConsolidationResponse(ctx context.Context, sel ast.SelectionSet, v models.CreateShipmentConsolidationResponse) graphql.Marshaler {
	return ec._CreateShipmentConsolidationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateShipmentConsolidationResponse2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateShipmentConsolidationResponse(ctx context.Context, sel ast.SelectionSet, v *models.CreateShipmentConsolidationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateShipmentConsolidationResponse(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
