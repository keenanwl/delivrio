// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/utils"
	"delivrio.io/shared-utils/pulid"
	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type MutationResolver interface {
	CreateAPIToken(ctx context.Context, name string) (*models.CreateAPITokenSuccess, error)
	UpdateAPIToken(ctx context.Context, id pulid.ID, name string) (bool, error)
	DeleteAPIToken(ctx context.Context, id pulid.ID) ([]*ent.APIToken, error)
	CreateCarrierAgreement(ctx context.Context, name string, carrierBrand pulid.ID) (*models.CreateCarrierAgreementSuccess, error)
	UpdateCarrierAgreementBring(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierBringInput) (*ent.Carrier, error)
	UpdateCarrierAgreementDao(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierDAOInput) (*ent.Carrier, error)
	UpdateCarrierAgreementDf(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierDFInput) (*ent.Carrier, error)
	UpdateCarrierAgreementDsv(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierDSVInput) (*ent.Carrier, error)
	UpdateCarrierAgreementEasyPost(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierEasyPostInput) (*ent.Carrier, error)
	UpdateCarrierAgreementGls(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierGLSInput) (*ent.CarrierGLS, error)
	UpdateCarrierAgreementPostNord(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierPostNordInput) (*ent.CarrierPostNord, error)
	UpdateCarrierAgreementUsps(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierUSPSInput) (*ent.CarrierUSPS, error)
	CreateShopifyConnection(ctx context.Context, input ent.CreateConnectionShopifyInput, inputConnection ent.CreateConnectionInput) (*ent.ConnectionShopify, error)
	UpdateShopifyConnection(ctx context.Context, id pulid.ID, input ent.UpdateConnectionShopifyInput, inputConnection ent.UpdateConnectionInput) (*ent.ConnectionShopify, error)
	CreateConsolidation(ctx context.Context, publicID string, description string) (*ent.Consolidation, error)
	UpdateConsolidation(ctx context.Context, id pulid.ID, input ent.UpdateConsolidationInput, sender *ent.CreateAddressInput, recipient *ent.CreateAddressInput, inputPallets []*models.CreateOrUpdatePallet) (*ent.Consolidation, error)
	CreateDeliveryOption(ctx context.Context, name string, agreementID pulid.ID, connectionID pulid.ID) (*models.CreateDeliveryOptionSuccess, error)
	UpdateDeliveryOptionBring(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionBringInput, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionBring, error)
	UpdateDeliveryOptionDao(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionDAO, error)
	UpdateDeliveryOptionDf(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionDF, error)
	UpdateDeliveryOptionDsv(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionDSV, error)
	UpdateDeliveryOptionEasyPost(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionEasyPostInput, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionEasyPost, error)
	UpdateDeliveryOptionGls(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionGLS, error)
	UpdateDeliveryOptionPostNord(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionPostNordInput, inputDeliveryOption ent.UpdateDeliveryOptionInput, inputAdditionalServices []string) (*ent.DeliveryOptionPostNord, error)
	UpdateDeliveryOptionUsps(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionUSPSInput, inputDeliveryOption ent.UpdateDeliveryOptionInput, inputAdditionalServices []pulid.ID) (*ent.DeliveryOptionUSPS, error)
	CreateDeliveryRule(ctx context.Context, input ent.CreateDeliveryRuleInput) (*ent.DeliveryRule, error)
	UpdateDeliveryRule(ctx context.Context, deliveryRuleID pulid.ID, val ent.UpdateDeliveryRuleInput) (*ent.DeliveryRule, error)
	CreateDeliveryRuleConstraintGroup(ctx context.Context, input ent.CreateDeliveryRuleConstraintGroupInput) (*ent.DeliveryRuleConstraintGroup, error)
	CreateDeliveryRuleConstraintGroupConstraints(ctx context.Context, deliveryRuleID pulid.ID, logicType deliveryruleconstraintgroup.ConstraintLogic, input []*ent.CreateDeliveryRuleConstraintInput) ([]*models.DeliveryRuleConstraintWithTags, error)
	ReplaceDeliveryRuleConstraintGroupConstraints(ctx context.Context, deliveryGroupID pulid.ID, logicType deliveryruleconstraintgroup.ConstraintLogic, input []*ent.CreateDeliveryRuleConstraintInput) ([]*models.DeliveryRuleConstraintWithTags, error)
	DeleteDeliveryRule(ctx context.Context, deliveryRuleID pulid.ID) ([]*ent.DeliveryRule, error)
	DeleteDeliveryRuleConstraintGroupConstraints(ctx context.Context, deliveryGroupID pulid.ID) ([]*ent.DeliveryRule, error)
	ReplaceDeliveryRuleCountries(ctx context.Context, ruleID pulid.ID, countries []pulid.ID) (*ent.DeliveryRule, error)
	UpdateDeliveryOptionSortOrder(ctx context.Context, newOrder []pulid.ID) ([]*ent.DeliveryOption, error)
	DeliveryOptionArchive(ctx context.Context, deliveryOptionID pulid.ID) (bool, error)
	CreateDocument(ctx context.Context, name string, mergeType document.MergeType) (pulid.ID, error)
	UpdateDocument(ctx context.Context, id pulid.ID, input ent.UpdateDocumentInput) (*ent.Document, error)
	CreateEmailTemplates(ctx context.Context, name string, merge emailtemplate.MergeType) (pulid.ID, error)
	UpdateEmailTemplate(ctx context.Context, id pulid.ID, input ent.UpdateEmailTemplateInput) (*ent.EmailTemplate, error)
	CreateHypothesisTestDeliveryOption(ctx context.Context, name string, connectionID pulid.ID) (pulid.ID, error)
	UpdateHypothesisTestDeliveryOption(ctx context.Context, id pulid.ID, input ent.UpdateHypothesisTestInput, inputDeliveryOption ent.UpdateHypothesisTestDeliveryOptionInput) (*ent.HypothesisTest, error)
	CreateLocation(ctx context.Context, input ent.CreateLocationInput, inputAddress ent.CreateAddressInput) (*ent.Location, error)
	UpdateLocation(ctx context.Context, id pulid.ID, input ent.UpdateLocationInput, inputAddress ent.UpdateAddressInput) (*ent.Location, error)
	CreateNotification(ctx context.Context, name string, connectionID pulid.ID, emailTemplateID pulid.ID) ([]*ent.Notification, error)
	ToggleNotification(ctx context.Context, notificationID pulid.ID, checked bool) (bool, error)
	DuplicateColli(ctx context.Context, fromColliID pulid.ID) (*ent.Order, error)
	DeleteColli(ctx context.Context, colliID pulid.ID) (*ent.Order, error)
	MoveOrderLine(ctx context.Context, orderLineID pulid.ID, colliID pulid.ID) ([]*ent.Colli, error)
	CreateColli(ctx context.Context, orderID pulid.ID, input ent.CreateColliInput, deliveryOptionID *pulid.ID, deliveryPointID *pulid.ID, ccLocationID *pulid.ID, packagingID *pulid.ID, recipientAddress ent.CreateAddressInput, senderAddress ent.CreateAddressInput, products []*utils.ProductVariantQuantity) (*ent.Order, error)
	UpdateColli(ctx context.Context, id pulid.ID, input ent.UpdateColliInput, deliveryOptionID *pulid.ID, deliveryPointID *pulid.ID, ccLocationID *pulid.ID, packagingID *pulid.ID, recipientAddressID pulid.ID, recipientAddress ent.UpdateAddressInput, senderAddressID pulid.ID, senderAddress ent.UpdateAddressInput, updateExistingRecipient *bool, products []*utils.ProductVariantQuantity, removeProducts []pulid.ID) (*ent.Colli, error)
	CreateEmptyOrder(ctx context.Context, input ent.CreateOrderInput) (*ent.Order, error)
	UpdateOrder(ctx context.Context, id pulid.ID, input ent.UpdateOrderInput) (*ent.Order, error)
	BulkUpdatePackaging(ctx context.Context, orderIDs []pulid.ID, packagingID *pulid.ID) (*models.BulkUpdateMessage, error)
	CreatePackaging(ctx context.Context, input ent.CreatePackagingInput, inputPackagingUsps *ent.CreatePackagingUSPSInput, inputPackagingDf *ent.CreatePackagingDFInput) ([]*ent.Packaging, error)
	UpdatePackaging(ctx context.Context, input ent.UpdatePackagingInput, inputPackagingUsps *ent.UpdatePackagingUSPSInput, inputPackagingDf *ent.CreatePackagingDFInput) ([]*ent.Packaging, error)
	ArchivePackaging(ctx context.Context, id pulid.ID) (bool, error)
	CreateProduct(ctx context.Context, input ent.CreateProductInput, variants []*ent.CreateProductVariantInput, images []string) (*ent.Product, error)
	UpdateProduct(ctx context.Context, id pulid.ID, input ent.UpdateProductInput, variants []*models.UpdateProductVariantIDInput, images []*models.ProductVariantImageInput) (*ent.Product, error)
	UploadProductImage(ctx context.Context, productID pulid.ID, image string) (*ent.Product, error)
	DeleteProductImage(ctx context.Context, imageID pulid.ID) (*ent.Product, error)
	ArchiveProductVariant(ctx context.Context, variantID pulid.ID) (*ent.Product, error)
	CreateVariant(ctx context.Context, productID pulid.ID, input *ent.CreateProductVariantInput) (*ent.ProductVariant, error)
	MustInventory(ctx context.Context, productVariantID pulid.ID) (*ent.InventoryItem, error)
	UpdateInventory(ctx context.Context, iventoryItemID pulid.ID, input ent.UpdateInventoryItemInput) (*ent.InventoryItem, error)
	CreateProductTags(ctx context.Context, input []string) ([]*ent.ProductTag, error)
	DeleteTag(ctx context.Context, id pulid.ID) ([]*ent.ProductTag, error)
	CreateReturnPortal(ctx context.Context, name string, connection pulid.ID) (pulid.ID, error)
	UpdateReturnPortal(ctx context.Context, id pulid.ID, input ent.UpdateReturnPortalInput, inputClaims []*models.MutateReturnPortalClaim) (*ent.ReturnPortal, error)
	CreateReturnOrder(ctx context.Context, orderID pulid.ID, portalID pulid.ID, orderLines []*models.MutateReturnItems) ([]pulid.ID, error)
	UpdateReturnColliStatus(ctx context.Context, returnColliID pulid.ID, status returncolli.Status) (*models.ReturnColliEdit, error)
	MarkColliDeleted(ctx context.Context, returnColliID pulid.ID) (bool, error)
	CancelShipment(ctx context.Context, shipmentID pulid.ID) (*ent.Shipment, error)
	CancelShipmentByColliIDs(ctx context.Context, colliIDs []pulid.ID) (bool, error)
	DebugUpdateLabelIDs(ctx context.Context, parcelID pulid.ID, itemID string) (bool, error)
	CancelFulfillmentSync(ctx context.Context, shipmentParcelID pulid.ID) (bool, error)
	CancelCancelSync(ctx context.Context, shipmentParcelID pulid.ID) (bool, error)
	UpdateUser(ctx context.Context, input ent.UpdateUserInput, newTenantID *pulid.ID) (*ent.User, error)
	UpdateCompanyInfo(ctx context.Context, input ent.UpdateTenantInput, defaultLanguage pulid.ID, adminContact ent.CreateContactInput, billingContact ent.CreateContactInput, address ent.CreateAddressInput) (*ent.Tenant, error)
	UpdatePlan(ctx context.Context, planID pulid.ID) (*ent.Tenant, error)
	CreateUserSeat(ctx context.Context, input ent.CreateUserInput) (*ent.User, error)
	UpdateUserSeat(ctx context.Context, id pulid.ID, input ent.UpdateUserInput) (*ent.User, error)
	UpdateUserPassword(ctx context.Context, id pulid.ID, input string) (*ent.User, error)
	CreateSeatGroup(ctx context.Context, input ent.CreateSeatGroupInput, accessRights []*ent.CreateSeatGroupAccessRightInput) (*ent.SeatGroup, error)
	ReplaceSeatGroup(ctx context.Context, id pulid.ID, input ent.UpdateSeatGroupInput, accessRights []*ent.CreateSeatGroupAccessRightInput) (*ent.SeatGroup, error)
	ReplaceSignupOptions(ctx context.Context, userID pulid.ID, input ent.CreateSignupOptionsInput) (*ent.SignupOptions, error)
	ReplaceInterestedCarriersPlatforms(ctx context.Context, userID pulid.ID, inputCarriers []pulid.ID, inputPlatforms []pulid.ID) (*ent.User, error)
	CreateWorkstation(ctx context.Context, input ent.CreateWorkstationInput) (*models.CreateWorkstationSuccess, error)
	UpdateWorkstation(ctx context.Context, id pulid.ID, input ent.UpdateWorkstationInput) (*ent.Workstation, error)
	SaveSelectedWorkstation(ctx context.Context, id pulid.ID, pickupDay user.PickupDay) (bool, error)
	ArchiveWorkstation(ctx context.Context, id pulid.ID) (bool, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_archivePackaging_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_archiveProductVariant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["variantID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_archiveWorkstation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bulkUpdatePackaging_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []pulid.ID
	if tmp, ok := rawArgs["orderIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderIDs"))
		arg0, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderIDs"] = arg0
	var arg1 *pulid.ID
	if tmp, ok := rawArgs["packagingID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagingID"))
		arg1, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["packagingID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelCancelSync_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["shipmentParcelID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shipmentParcelID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shipmentParcelID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelFulfillmentSync_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["shipmentParcelID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shipmentParcelID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shipmentParcelID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelShipmentByColliIDs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []pulid.ID
	if tmp, ok := rawArgs["colliIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colliIDs"))
		arg0, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["colliIDs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_cancelShipment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["shipmentID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shipmentID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shipmentID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAPIToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCarrierAgreement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["carrierBrand"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrierBrand"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["carrierBrand"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createColli_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["orderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderID"] = arg0
	var arg1 ent.CreateColliInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateColliInput2delivrioᚗioᚋgoᚋentᚐCreateColliInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *pulid.ID
	if tmp, ok := rawArgs["deliveryOptionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryOptionID"))
		arg2, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryOptionID"] = arg2
	var arg3 *pulid.ID
	if tmp, ok := rawArgs["deliveryPointID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryPointID"))
		arg3, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryPointID"] = arg3
	var arg4 *pulid.ID
	if tmp, ok := rawArgs["ccLocationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ccLocationID"))
		arg4, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ccLocationID"] = arg4
	var arg5 *pulid.ID
	if tmp, ok := rawArgs["packagingID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagingID"))
		arg5, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["packagingID"] = arg5
	var arg6 ent.CreateAddressInput
	if tmp, ok := rawArgs["recipientAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipientAddress"))
		arg6, err = ec.unmarshalNCreateAddressInput2delivrioᚗioᚋgoᚋentᚐCreateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recipientAddress"] = arg6
	var arg7 ent.CreateAddressInput
	if tmp, ok := rawArgs["senderAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderAddress"))
		arg7, err = ec.unmarshalNCreateAddressInput2delivrioᚗioᚋgoᚋentᚐCreateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["senderAddress"] = arg7
	var arg8 []*utils.ProductVariantQuantity
	if tmp, ok := rawArgs["products"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("products"))
		arg8, err = ec.unmarshalNProductVariantQuantity2ᚕᚖdelivrioᚗioᚋgoᚋutilsᚐProductVariantQuantityᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["products"] = arg8
	return args, nil
}

func (ec *executionContext) field_Mutation_createConsolidation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["publicID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["publicID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeliveryOption_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["agreementID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agreementID"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["agreementID"] = arg1
	var arg2 pulid.ID
	if tmp, ok := rawArgs["connectionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionID"))
		arg2, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeliveryRuleConstraintGroupConstraints_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["deliveryRuleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryRuleId"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryRuleId"] = arg0
	var arg1 deliveryruleconstraintgroup.ConstraintLogic
	if tmp, ok := rawArgs["logicType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logicType"))
		arg1, err = ec.unmarshalNDeliveryRuleConstraintGroupConstraintLogic2delivrioᚗioᚋgoᚋentᚋdeliveryruleconstraintgroupᚐConstraintLogic(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["logicType"] = arg1
	var arg2 []*ent.CreateDeliveryRuleConstraintInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalOCreateDeliveryRuleConstraintInput2ᚕᚖdelivrioᚗioᚋgoᚋentᚐCreateDeliveryRuleConstraintInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeliveryRuleConstraintGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateDeliveryRuleConstraintGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateDeliveryRuleConstraintGroupInput2delivrioᚗioᚋgoᚋentᚐCreateDeliveryRuleConstraintGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeliveryRule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateDeliveryRuleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateDeliveryRuleInput2delivrioᚗioᚋgoᚋentᚐCreateDeliveryRuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 document.MergeType
	if tmp, ok := rawArgs["mergeType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mergeType"))
		arg1, err = ec.unmarshalNDocumentMergeType2delivrioᚗioᚋgoᚋentᚋdocumentᚐMergeType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mergeType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createEmailTemplates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 emailtemplate.MergeType
	if tmp, ok := rawArgs["merge"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("merge"))
		arg1, err = ec.unmarshalNEmailTemplateMergeType2delivrioᚗioᚋgoᚋentᚋemailtemplateᚐMergeType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["merge"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createEmptyOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateOrderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateOrderInput2delivrioᚗioᚋgoᚋentᚐCreateOrderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHypothesisTestDeliveryOption_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["connectionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionID"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateLocationInput2delivrioᚗioᚋgoᚋentᚐCreateLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 ent.CreateAddressInput
	if tmp, ok := rawArgs["inputAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputAddress"))
		arg1, err = ec.unmarshalNCreateAddressInput2delivrioᚗioᚋgoᚋentᚐCreateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputAddress"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["connectionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionID"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionID"] = arg1
	var arg2 pulid.ID
	if tmp, ok := rawArgs["emailTemplateID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailTemplateID"))
		arg2, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["emailTemplateID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createPackaging_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreatePackagingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePackagingInput2delivrioᚗioᚋgoᚋentᚐCreatePackagingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *ent.CreatePackagingUSPSInput
	if tmp, ok := rawArgs["inputPackagingUSPS"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputPackagingUSPS"))
		arg1, err = ec.unmarshalOCreatePackagingUSPSInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreatePackagingUSPSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputPackagingUSPS"] = arg1
	var arg2 *ent.CreatePackagingDFInput
	if tmp, ok := rawArgs["inputPackagingDF"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputPackagingDF"))
		arg2, err = ec.unmarshalOCreatePackagingDFInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreatePackagingDFInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputPackagingDF"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createProductTags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateProductInput2delivrioᚗioᚋgoᚋentᚐCreateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 []*ent.CreateProductVariantInput
	if tmp, ok := rawArgs["variants"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variants"))
		arg1, err = ec.unmarshalOCreateProductVariantInput2ᚕᚖdelivrioᚗioᚋgoᚋentᚐCreateProductVariantInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variants"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["images"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
		arg2, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["images"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createReturnOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["orderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderID"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["portalID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("portalID"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["portalID"] = arg1
	var arg2 []*models.MutateReturnItems
	if tmp, ok := rawArgs["orderLines"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderLines"))
		arg2, err = ec.unmarshalNMutateReturnItems2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnItemsᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderLines"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createReturnPortal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["connection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connection"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connection"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createSeatGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateSeatGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateSeatGroupInput2delivrioᚗioᚋgoᚋentᚐCreateSeatGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 []*ent.CreateSeatGroupAccessRightInput
	if tmp, ok := rawArgs["accessRights"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessRights"))
		arg1, err = ec.unmarshalOCreateSeatGroupAccessRightInput2ᚕᚖdelivrioᚗioᚋgoᚋentᚐCreateSeatGroupAccessRightInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accessRights"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createShopifyConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateConnectionShopifyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateConnectionShopifyInput2delivrioᚗioᚋgoᚋentᚐCreateConnectionShopifyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 ent.CreateConnectionInput
	if tmp, ok := rawArgs["inputConnection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputConnection"))
		arg1, err = ec.unmarshalNCreateConnectionInput2delivrioᚗioᚋgoᚋentᚐCreateConnectionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputConnection"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createUserSeat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateUserInput2delivrioᚗioᚋgoᚋentᚐCreateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createVariant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["productID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productID"] = arg0
	var arg1 *ent.CreateProductVariantInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOCreateProductVariantInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreateProductVariantInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createWorkstation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.CreateWorkstationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateWorkstationInput2delivrioᚗioᚋgoᚋentᚐCreateWorkstationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_debugUpdateLabelIDs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["parcelID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parcelID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parcelID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAPIToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteColli_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["colliID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colliID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["colliID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeliveryRuleConstraintGroupConstraints_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["deliveryGroupId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryGroupId"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryGroupId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeliveryRule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["deliveryRuleID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryRuleID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryRuleID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProductImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["imageID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["imageID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deliveryOptionArchive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["deliveryOptionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryOptionID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryOptionID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_duplicateColli_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["fromColliID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fromColliID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fromColliID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_markColliDeleted_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["returnColliID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("returnColliID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["returnColliID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moveOrderLine_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["orderLineID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderLineID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderLineID"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["colliID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("colliID"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["colliID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_mustInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["productVariantID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productVariantID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productVariantID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceDeliveryRuleConstraintGroupConstraints_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["deliveryGroupId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryGroupId"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryGroupId"] = arg0
	var arg1 deliveryruleconstraintgroup.ConstraintLogic
	if tmp, ok := rawArgs["logicType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logicType"))
		arg1, err = ec.unmarshalNDeliveryRuleConstraintGroupConstraintLogic2delivrioᚗioᚋgoᚋentᚋdeliveryruleconstraintgroupᚐConstraintLogic(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["logicType"] = arg1
	var arg2 []*ent.CreateDeliveryRuleConstraintInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalOCreateDeliveryRuleConstraintInput2ᚕᚖdelivrioᚗioᚋgoᚋentᚐCreateDeliveryRuleConstraintInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceDeliveryRuleCountries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["ruleID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ruleID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ruleID"] = arg0
	var arg1 []pulid.ID
	if tmp, ok := rawArgs["countries"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countries"))
		arg1, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["countries"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceInterestedCarriersPlatforms_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 []pulid.ID
	if tmp, ok := rawArgs["inputCarriers"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputCarriers"))
		arg1, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputCarriers"] = arg1
	var arg2 []pulid.ID
	if tmp, ok := rawArgs["inputPlatforms"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputPlatforms"))
		arg2, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputPlatforms"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceSeatGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateSeatGroupInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateSeatGroupInput2delivrioᚗioᚋgoᚋentᚐUpdateSeatGroupInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 []*ent.CreateSeatGroupAccessRightInput
	if tmp, ok := rawArgs["accessRights"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessRights"))
		arg2, err = ec.unmarshalOCreateSeatGroupAccessRightInput2ᚕᚖdelivrioᚗioᚋgoᚋentᚐCreateSeatGroupAccessRightInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accessRights"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_replaceSignupOptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["userID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userID"] = arg0
	var arg1 ent.CreateSignupOptionsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateSignupOptionsInput2delivrioᚗioᚋgoᚋentᚐCreateSignupOptionsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_saveSelectedWorkstation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 user.PickupDay
	if tmp, ok := rawArgs["pickupDay"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pickupDay"))
		arg1, err = ec.unmarshalNUserPickupDay2delivrioᚗioᚋgoᚋentᚋuserᚐPickupDay(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pickupDay"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_toggleNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["notificationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notificationID"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["checked"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("checked"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["checked"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAPIToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementBring_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierBringInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierBringInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierBringInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementDAO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierDAOInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierDAOInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierDAOInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementDF_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierDFInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierDFInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierDFInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementDSV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierDSVInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierDSVInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierDSVInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementEasyPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierEasyPostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierEasyPostInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierEasyPostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementGLS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierGLSInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierGLSInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierGLSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementPostNord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierPostNordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierPostNordInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierPostNordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCarrierAgreementUSPS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 ent.UpdateCarrierUSPSInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNUpdateCarrierUSPSInput2delivrioᚗioᚋgoᚋentᚐUpdateCarrierUSPSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateColli_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateColliInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateColliInput2delivrioᚗioᚋgoᚋentᚐUpdateColliInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *pulid.ID
	if tmp, ok := rawArgs["deliveryOptionID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryOptionID"))
		arg2, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryOptionID"] = arg2
	var arg3 *pulid.ID
	if tmp, ok := rawArgs["deliveryPointID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryPointID"))
		arg3, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryPointID"] = arg3
	var arg4 *pulid.ID
	if tmp, ok := rawArgs["ccLocationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ccLocationID"))
		arg4, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ccLocationID"] = arg4
	var arg5 *pulid.ID
	if tmp, ok := rawArgs["packagingID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("packagingID"))
		arg5, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["packagingID"] = arg5
	var arg6 pulid.ID
	if tmp, ok := rawArgs["recipientAddressID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipientAddressID"))
		arg6, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recipientAddressID"] = arg6
	var arg7 ent.UpdateAddressInput
	if tmp, ok := rawArgs["recipientAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipientAddress"))
		arg7, err = ec.unmarshalNUpdateAddressInput2delivrioᚗioᚋgoᚋentᚐUpdateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recipientAddress"] = arg7
	var arg8 pulid.ID
	if tmp, ok := rawArgs["senderAddressID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderAddressID"))
		arg8, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["senderAddressID"] = arg8
	var arg9 ent.UpdateAddressInput
	if tmp, ok := rawArgs["senderAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderAddress"))
		arg9, err = ec.unmarshalNUpdateAddressInput2delivrioᚗioᚋgoᚋentᚐUpdateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["senderAddress"] = arg9
	var arg10 *bool
	if tmp, ok := rawArgs["updateExistingRecipient"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updateExistingRecipient"))
		arg10, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["updateExistingRecipient"] = arg10
	var arg11 []*utils.ProductVariantQuantity
	if tmp, ok := rawArgs["products"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("products"))
		arg11, err = ec.unmarshalNProductVariantQuantity2ᚕᚖdelivrioᚗioᚋgoᚋutilsᚐProductVariantQuantityᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["products"] = arg11
	var arg12 []pulid.ID
	if tmp, ok := rawArgs["removeProducts"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeProducts"))
		arg12, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["removeProducts"] = arg12
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCompanyInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.UpdateTenantInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateTenantInput2delivrioᚗioᚋgoᚋentᚐUpdateTenantInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 pulid.ID
	if tmp, ok := rawArgs["defaultLanguage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultLanguage"))
		arg1, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaultLanguage"] = arg1
	var arg2 ent.CreateContactInput
	if tmp, ok := rawArgs["adminContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminContact"))
		arg2, err = ec.unmarshalNCreateContactInput2delivrioᚗioᚋgoᚋentᚐCreateContactInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["adminContact"] = arg2
	var arg3 ent.CreateContactInput
	if tmp, ok := rawArgs["billingContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingContact"))
		arg3, err = ec.unmarshalNCreateContactInput2delivrioᚗioᚋgoᚋentᚐCreateContactInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billingContact"] = arg3
	var arg4 ent.CreateAddressInput
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg4, err = ec.unmarshalNCreateAddressInput2delivrioᚗioᚋgoᚋentᚐCreateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateConsolidation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateConsolidationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateConsolidationInput2delivrioᚗioᚋgoᚋentᚐUpdateConsolidationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 *ent.CreateAddressInput
	if tmp, ok := rawArgs["sender"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sender"))
		arg2, err = ec.unmarshalOCreateAddressInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sender"] = arg2
	var arg3 *ent.CreateAddressInput
	if tmp, ok := rawArgs["recipient"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipient"))
		arg3, err = ec.unmarshalOCreateAddressInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recipient"] = arg3
	var arg4 []*models.CreateOrUpdatePallet
	if tmp, ok := rawArgs["inputPallets"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputPallets"))
		arg4, err = ec.unmarshalNCreateOrUpdatePallet2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateOrUpdatePalletᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputPallets"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionBring_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionBringInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionBringInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionBringInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg2, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionDAO_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionDF_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionDSV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionEasyPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionEasyPostInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionEasyPostInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionEasyPostInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg2, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionGLS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionPostNord_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionPostNordInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionPostNordInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionPostNordInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg2, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg2
	var arg3 []string
	if tmp, ok := rawArgs["inputAdditionalServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputAdditionalServices"))
		arg3, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputAdditionalServices"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionSortOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []pulid.ID
	if tmp, ok := rawArgs["newOrder"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newOrder"))
		arg0, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newOrder"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryOptionUSPS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDeliveryOptionUSPSInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateDeliveryOptionUSPSInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionUSPSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg2, err = ec.unmarshalNUpdateDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg2
	var arg3 []pulid.ID
	if tmp, ok := rawArgs["inputAdditionalServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputAdditionalServices"))
		arg3, err = ec.unmarshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputAdditionalServices"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeliveryRule_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["deliveryRuleID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryRuleID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryRuleID"] = arg0
	var arg1 ent.UpdateDeliveryRuleInput
	if tmp, ok := rawArgs["val"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("val"))
		arg1, err = ec.unmarshalNUpdateDeliveryRuleInput2delivrioᚗioᚋgoᚋentᚐUpdateDeliveryRuleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["val"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDocument_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateDocumentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateDocumentInput2delivrioᚗioᚋgoᚋentᚐUpdateDocumentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmailTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateEmailTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateEmailTemplateInput2delivrioᚗioᚋgoᚋentᚐUpdateEmailTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateHypothesisTestDeliveryOption_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateHypothesisTestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateHypothesisTestInput2delivrioᚗioᚋgoᚋentᚐUpdateHypothesisTestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateHypothesisTestDeliveryOptionInput
	if tmp, ok := rawArgs["inputDeliveryOption"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputDeliveryOption"))
		arg2, err = ec.unmarshalNUpdateHypothesisTestDeliveryOptionInput2delivrioᚗioᚋgoᚋentᚐUpdateHypothesisTestDeliveryOptionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputDeliveryOption"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["iventoryItemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iventoryItemID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["iventoryItemID"] = arg0
	var arg1 ent.UpdateInventoryItemInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateInventoryItemInput2delivrioᚗioᚋgoᚋentᚐUpdateInventoryItemInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateLocationInput2delivrioᚗioᚋgoᚋentᚐUpdateLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateAddressInput
	if tmp, ok := rawArgs["inputAddress"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputAddress"))
		arg2, err = ec.unmarshalNUpdateAddressInput2delivrioᚗioᚋgoᚋentᚐUpdateAddressInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputAddress"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateOrderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateOrderInput2delivrioᚗioᚋgoᚋentᚐUpdateOrderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePackaging_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.UpdatePackagingInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePackagingInput2delivrioᚗioᚋgoᚋentᚐUpdatePackagingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *ent.UpdatePackagingUSPSInput
	if tmp, ok := rawArgs["inputPackagingUSPS"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputPackagingUSPS"))
		arg1, err = ec.unmarshalOUpdatePackagingUSPSInput2ᚖdelivrioᚗioᚋgoᚋentᚐUpdatePackagingUSPSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputPackagingUSPS"] = arg1
	var arg2 *ent.CreatePackagingDFInput
	if tmp, ok := rawArgs["inputPackagingDF"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputPackagingDF"))
		arg2, err = ec.unmarshalOCreatePackagingDFInput2ᚖdelivrioᚗioᚋgoᚋentᚐCreatePackagingDFInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputPackagingDF"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["planID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["planID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProduct_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateProductInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateProductInput2delivrioᚗioᚋgoᚋentᚐUpdateProductInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 []*models.UpdateProductVariantIDInput
	if tmp, ok := rawArgs["variants"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variants"))
		arg2, err = ec.unmarshalOUpdateProductVariantIDInput2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐUpdateProductVariantIDInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variants"] = arg2
	var arg3 []*models.ProductVariantImageInput
	if tmp, ok := rawArgs["images"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("images"))
		arg3, err = ec.unmarshalOProductVariantImageInput2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐProductVariantImageInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["images"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReturnColliStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["returnColliID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("returnColliID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["returnColliID"] = arg0
	var arg1 returncolli.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNReturnColliStatus2delivrioᚗioᚋgoᚋentᚋreturncolliᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateReturnPortal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateReturnPortalInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateReturnPortalInput2delivrioᚗioᚋgoᚋentᚐUpdateReturnPortalInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 []*models.MutateReturnPortalClaim
	if tmp, ok := rawArgs["inputClaims"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputClaims"))
		arg2, err = ec.unmarshalNMutateReturnPortalClaim2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐMutateReturnPortalClaimᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputClaims"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateShopifyConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateConnectionShopifyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateConnectionShopifyInput2delivrioᚗioᚋgoᚋentᚐUpdateConnectionShopifyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	var arg2 ent.UpdateConnectionInput
	if tmp, ok := rawArgs["inputConnection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inputConnection"))
		arg2, err = ec.unmarshalNUpdateConnectionInput2delivrioᚗioᚋgoᚋentᚐUpdateConnectionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["inputConnection"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserSeat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateUserInput2delivrioᚗioᚋgoᚋentᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ent.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateUserInput2delivrioᚗioᚋgoᚋentᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *pulid.ID
	if tmp, ok := rawArgs["newTenantID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newTenantID"))
		arg1, err = ec.unmarshalOID2ᚖdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newTenantID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateWorkstation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ent.UpdateWorkstationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateWorkstationInput2delivrioᚗioᚋgoᚋentᚐUpdateWorkstationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadProductImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 pulid.ID
	if tmp, ok := rawArgs["productID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
		arg0, err = ec.unmarshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["image"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["image"] = arg1
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreateAPITokenSuccess_id(ctx context.Context, field graphql.CollectedField, obj *models.CreateAPITokenSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateAPITokenSuccess_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateAPITokenSuccess_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateAPITokenSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateAPITokenSuccess_token(ctx context.Context, field graphql.CollectedField, obj *models.CreateAPITokenSuccess) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateAPITokenSuccess_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateAPITokenSuccess_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateAPITokenSuccess",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAPIToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAPIToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAPIToken(rctx, fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreateAPITokenSuccess)
	fc.Result = res
	return ec.marshalNCreateAPITokenSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateAPITokenSuccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAPIToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateAPITokenSuccess_id(ctx, field)
			case "token":
				return ec.fieldContext_CreateAPITokenSuccess_token(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateAPITokenSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAPIToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAPIToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAPIToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAPIToken(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAPIToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAPIToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAPIToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAPIToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAPIToken(rctx, fc.Args["id"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.APIToken)
	fc.Result = res
	return ec.marshalNAPIToken2ᚕᚖdelivrioᚗioᚋgoᚋentᚐAPITokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAPIToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_APIToken_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_APIToken_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_APIToken_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_APIToken_createdAt(ctx, field)
			case "lastUsed":
				return ec.fieldContext_APIToken_lastUsed(ctx, field)
			case "tenant":
				return ec.fieldContext_APIToken_tenant(ctx, field)
			case "user":
				return ec.fieldContext_APIToken_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type APIToken", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAPIToken_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCarrierAgreement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCarrierAgreement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCarrierAgreement(rctx, fc.Args["name"].(string), fc.Args["carrierBrand"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreateCarrierAgreementSuccess)
	fc.Result = res
	return ec.marshalNCreateCarrierAgreementSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateCarrierAgreementSuccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCarrierAgreement(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateCarrierAgreementSuccess_id(ctx, field)
			case "carrier":
				return ec.fieldContext_CreateCarrierAgreementSuccess_carrier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCarrierAgreementSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCarrierAgreement_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementBring(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementBring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementBring(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierBringInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Carrier)
	fc.Result = res
	return ec.marshalNCarrier2ᚖdelivrioᚗioᚋgoᚋentᚐCarrier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementBring(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Carrier_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Carrier_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Carrier_name(ctx, field)
			case "syncCancelation":
				return ec.fieldContext_Carrier_syncCancelation(ctx, field)
			case "tenant":
				return ec.fieldContext_Carrier_tenant(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Carrier_carrierBrand(ctx, field)
			case "carrierDAO":
				return ec.fieldContext_Carrier_carrierDAO(ctx, field)
			case "carrierDF":
				return ec.fieldContext_Carrier_carrierDF(ctx, field)
			case "carrierDSV":
				return ec.fieldContext_Carrier_carrierDSV(ctx, field)
			case "carrierEasyPost":
				return ec.fieldContext_Carrier_carrierEasyPost(ctx, field)
			case "carrierGLS":
				return ec.fieldContext_Carrier_carrierGLS(ctx, field)
			case "carrierPostNord":
				return ec.fieldContext_Carrier_carrierPostNord(ctx, field)
			case "carrierUSPS":
				return ec.fieldContext_Carrier_carrierUSPS(ctx, field)
			case "carrierBring":
				return ec.fieldContext_Carrier_carrierBring(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Carrier_deliveryOption(ctx, field)
			case "shipment":
				return ec.fieldContext_Carrier_shipment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Carrier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementBring_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementDAO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementDAO(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementDao(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierDAOInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Carrier)
	fc.Result = res
	return ec.marshalNCarrier2ᚖdelivrioᚗioᚋgoᚋentᚐCarrier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementDAO(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Carrier_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Carrier_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Carrier_name(ctx, field)
			case "syncCancelation":
				return ec.fieldContext_Carrier_syncCancelation(ctx, field)
			case "tenant":
				return ec.fieldContext_Carrier_tenant(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Carrier_carrierBrand(ctx, field)
			case "carrierDAO":
				return ec.fieldContext_Carrier_carrierDAO(ctx, field)
			case "carrierDF":
				return ec.fieldContext_Carrier_carrierDF(ctx, field)
			case "carrierDSV":
				return ec.fieldContext_Carrier_carrierDSV(ctx, field)
			case "carrierEasyPost":
				return ec.fieldContext_Carrier_carrierEasyPost(ctx, field)
			case "carrierGLS":
				return ec.fieldContext_Carrier_carrierGLS(ctx, field)
			case "carrierPostNord":
				return ec.fieldContext_Carrier_carrierPostNord(ctx, field)
			case "carrierUSPS":
				return ec.fieldContext_Carrier_carrierUSPS(ctx, field)
			case "carrierBring":
				return ec.fieldContext_Carrier_carrierBring(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Carrier_deliveryOption(ctx, field)
			case "shipment":
				return ec.fieldContext_Carrier_shipment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Carrier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementDAO_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementDF(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementDF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementDf(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierDFInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Carrier)
	fc.Result = res
	return ec.marshalNCarrier2ᚖdelivrioᚗioᚋgoᚋentᚐCarrier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementDF(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Carrier_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Carrier_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Carrier_name(ctx, field)
			case "syncCancelation":
				return ec.fieldContext_Carrier_syncCancelation(ctx, field)
			case "tenant":
				return ec.fieldContext_Carrier_tenant(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Carrier_carrierBrand(ctx, field)
			case "carrierDAO":
				return ec.fieldContext_Carrier_carrierDAO(ctx, field)
			case "carrierDF":
				return ec.fieldContext_Carrier_carrierDF(ctx, field)
			case "carrierDSV":
				return ec.fieldContext_Carrier_carrierDSV(ctx, field)
			case "carrierEasyPost":
				return ec.fieldContext_Carrier_carrierEasyPost(ctx, field)
			case "carrierGLS":
				return ec.fieldContext_Carrier_carrierGLS(ctx, field)
			case "carrierPostNord":
				return ec.fieldContext_Carrier_carrierPostNord(ctx, field)
			case "carrierUSPS":
				return ec.fieldContext_Carrier_carrierUSPS(ctx, field)
			case "carrierBring":
				return ec.fieldContext_Carrier_carrierBring(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Carrier_deliveryOption(ctx, field)
			case "shipment":
				return ec.fieldContext_Carrier_shipment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Carrier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementDF_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementDSV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementDSV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementDsv(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierDSVInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Carrier)
	fc.Result = res
	return ec.marshalNCarrier2ᚖdelivrioᚗioᚋgoᚋentᚐCarrier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementDSV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Carrier_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Carrier_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Carrier_name(ctx, field)
			case "syncCancelation":
				return ec.fieldContext_Carrier_syncCancelation(ctx, field)
			case "tenant":
				return ec.fieldContext_Carrier_tenant(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Carrier_carrierBrand(ctx, field)
			case "carrierDAO":
				return ec.fieldContext_Carrier_carrierDAO(ctx, field)
			case "carrierDF":
				return ec.fieldContext_Carrier_carrierDF(ctx, field)
			case "carrierDSV":
				return ec.fieldContext_Carrier_carrierDSV(ctx, field)
			case "carrierEasyPost":
				return ec.fieldContext_Carrier_carrierEasyPost(ctx, field)
			case "carrierGLS":
				return ec.fieldContext_Carrier_carrierGLS(ctx, field)
			case "carrierPostNord":
				return ec.fieldContext_Carrier_carrierPostNord(ctx, field)
			case "carrierUSPS":
				return ec.fieldContext_Carrier_carrierUSPS(ctx, field)
			case "carrierBring":
				return ec.fieldContext_Carrier_carrierBring(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Carrier_deliveryOption(ctx, field)
			case "shipment":
				return ec.fieldContext_Carrier_shipment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Carrier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementDSV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementEasyPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementEasyPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementEasyPost(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierEasyPostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Carrier)
	fc.Result = res
	return ec.marshalNCarrier2ᚖdelivrioᚗioᚋgoᚋentᚐCarrier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementEasyPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Carrier_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Carrier_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Carrier_name(ctx, field)
			case "syncCancelation":
				return ec.fieldContext_Carrier_syncCancelation(ctx, field)
			case "tenant":
				return ec.fieldContext_Carrier_tenant(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Carrier_carrierBrand(ctx, field)
			case "carrierDAO":
				return ec.fieldContext_Carrier_carrierDAO(ctx, field)
			case "carrierDF":
				return ec.fieldContext_Carrier_carrierDF(ctx, field)
			case "carrierDSV":
				return ec.fieldContext_Carrier_carrierDSV(ctx, field)
			case "carrierEasyPost":
				return ec.fieldContext_Carrier_carrierEasyPost(ctx, field)
			case "carrierGLS":
				return ec.fieldContext_Carrier_carrierGLS(ctx, field)
			case "carrierPostNord":
				return ec.fieldContext_Carrier_carrierPostNord(ctx, field)
			case "carrierUSPS":
				return ec.fieldContext_Carrier_carrierUSPS(ctx, field)
			case "carrierBring":
				return ec.fieldContext_Carrier_carrierBring(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Carrier_deliveryOption(ctx, field)
			case "shipment":
				return ec.fieldContext_Carrier_shipment(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Carrier", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementEasyPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementGLS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementGLS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementGls(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierGLSInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CarrierGLS)
	fc.Result = res
	return ec.marshalNCarrierGLS2ᚖdelivrioᚗioᚋgoᚋentᚐCarrierGLS(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementGLS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CarrierGLS_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_CarrierGLS_tenantID(ctx, field)
			case "contactID":
				return ec.fieldContext_CarrierGLS_contactID(ctx, field)
			case "glsUsername":
				return ec.fieldContext_CarrierGLS_glsUsername(ctx, field)
			case "glsPassword":
				return ec.fieldContext_CarrierGLS_glsPassword(ctx, field)
			case "customerID":
				return ec.fieldContext_CarrierGLS_customerID(ctx, field)
			case "glsCountryCode":
				return ec.fieldContext_CarrierGLS_glsCountryCode(ctx, field)
			case "syncShipmentCancellation":
				return ec.fieldContext_CarrierGLS_syncShipmentCancellation(ctx, field)
			case "printErrorOnLabel":
				return ec.fieldContext_CarrierGLS_printErrorOnLabel(ctx, field)
			case "tenant":
				return ec.fieldContext_CarrierGLS_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_CarrierGLS_carrier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarrierGLS", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementGLS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementPostNord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementPostNord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementPostNord(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierPostNordInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CarrierPostNord)
	fc.Result = res
	return ec.marshalNCarrierPostNord2ᚖdelivrioᚗioᚋgoᚋentᚐCarrierPostNord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementPostNord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CarrierPostNord_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_CarrierPostNord_tenantID(ctx, field)
			case "customerNumber":
				return ec.fieldContext_CarrierPostNord_customerNumber(ctx, field)
			case "tenant":
				return ec.fieldContext_CarrierPostNord_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_CarrierPostNord_carrier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarrierPostNord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementPostNord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCarrierAgreementUSPS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCarrierAgreementUSPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCarrierAgreementUsps(rctx, fc.Args["id"].(pulid.ID), fc.Args["name"].(string), fc.Args["input"].(ent.UpdateCarrierUSPSInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.CarrierUSPS)
	fc.Result = res
	return ec.marshalNCarrierUSPS2ᚖdelivrioᚗioᚋgoᚋentᚐCarrierUSPS(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCarrierAgreementUSPS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CarrierUSPS_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_CarrierUSPS_tenantID(ctx, field)
			case "isTestAPI":
				return ec.fieldContext_CarrierUSPS_isTestAPI(ctx, field)
			case "consumerKey":
				return ec.fieldContext_CarrierUSPS_consumerKey(ctx, field)
			case "consumerSecret":
				return ec.fieldContext_CarrierUSPS_consumerSecret(ctx, field)
			case "mid":
				return ec.fieldContext_CarrierUSPS_mid(ctx, field)
			case "manifestMid":
				return ec.fieldContext_CarrierUSPS_manifestMid(ctx, field)
			case "crid":
				return ec.fieldContext_CarrierUSPS_crid(ctx, field)
			case "epsAccountNumber":
				return ec.fieldContext_CarrierUSPS_epsAccountNumber(ctx, field)
			case "tenant":
				return ec.fieldContext_CarrierUSPS_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_CarrierUSPS_carrier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarrierUSPS", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCarrierAgreementUSPS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createShopifyConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createShopifyConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateShopifyConnection(rctx, fc.Args["input"].(ent.CreateConnectionShopifyInput), fc.Args["inputConnection"].(ent.CreateConnectionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ConnectionShopify)
	fc.Result = res
	return ec.marshalOConnectionShopify2ᚖdelivrioᚗioᚋgoᚋentᚐConnectionShopify(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createShopifyConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionShopify_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ConnectionShopify_tenantID(ctx, field)
			case "rateIntegration":
				return ec.fieldContext_ConnectionShopify_rateIntegration(ctx, field)
			case "storeURL":
				return ec.fieldContext_ConnectionShopify_storeURL(ctx, field)
			case "apiKey":
				return ec.fieldContext_ConnectionShopify_apiKey(ctx, field)
			case "lookupKey":
				return ec.fieldContext_ConnectionShopify_lookupKey(ctx, field)
			case "syncFrom":
				return ec.fieldContext_ConnectionShopify_syncFrom(ctx, field)
			case "filterTags":
				return ec.fieldContext_ConnectionShopify_filterTags(ctx, field)
			case "tenant":
				return ec.fieldContext_ConnectionShopify_tenant(ctx, field)
			case "connection":
				return ec.fieldContext_ConnectionShopify_connection(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionShopify", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createShopifyConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateShopifyConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateShopifyConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateShopifyConnection(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateConnectionShopifyInput), fc.Args["inputConnection"].(ent.UpdateConnectionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.ConnectionShopify)
	fc.Result = res
	return ec.marshalOConnectionShopify2ᚖdelivrioᚗioᚋgoᚋentᚐConnectionShopify(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateShopifyConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionShopify_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ConnectionShopify_tenantID(ctx, field)
			case "rateIntegration":
				return ec.fieldContext_ConnectionShopify_rateIntegration(ctx, field)
			case "storeURL":
				return ec.fieldContext_ConnectionShopify_storeURL(ctx, field)
			case "apiKey":
				return ec.fieldContext_ConnectionShopify_apiKey(ctx, field)
			case "lookupKey":
				return ec.fieldContext_ConnectionShopify_lookupKey(ctx, field)
			case "syncFrom":
				return ec.fieldContext_ConnectionShopify_syncFrom(ctx, field)
			case "filterTags":
				return ec.fieldContext_ConnectionShopify_filterTags(ctx, field)
			case "tenant":
				return ec.fieldContext_ConnectionShopify_tenant(ctx, field)
			case "connection":
				return ec.fieldContext_ConnectionShopify_connection(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionShopify", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateShopifyConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createConsolidation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createConsolidation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateConsolidation(rctx, fc.Args["publicID"].(string), fc.Args["description"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Consolidation)
	fc.Result = res
	return ec.marshalNConsolidation2ᚖdelivrioᚗioᚋgoᚋentᚐConsolidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createConsolidation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Consolidation_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Consolidation_tenantID(ctx, field)
			case "publicID":
				return ec.fieldContext_Consolidation_publicID(ctx, field)
			case "description":
				return ec.fieldContext_Consolidation_description(ctx, field)
			case "status":
				return ec.fieldContext_Consolidation_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Consolidation_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Consolidation_tenant(ctx, field)
			case "pallets":
				return ec.fieldContext_Consolidation_pallets(ctx, field)
			case "orders":
				return ec.fieldContext_Consolidation_orders(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Consolidation_deliveryOption(ctx, field)
			case "recipient":
				return ec.fieldContext_Consolidation_recipient(ctx, field)
			case "sender":
				return ec.fieldContext_Consolidation_sender(ctx, field)
			case "shipment":
				return ec.fieldContext_Consolidation_shipment(ctx, field)
			case "cancelledShipments":
				return ec.fieldContext_Consolidation_cancelledShipments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Consolidation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createConsolidation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateConsolidation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateConsolidation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConsolidation(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateConsolidationInput), fc.Args["sender"].(*ent.CreateAddressInput), fc.Args["recipient"].(*ent.CreateAddressInput), fc.Args["inputPallets"].([]*models.CreateOrUpdatePallet))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Consolidation)
	fc.Result = res
	return ec.marshalNConsolidation2ᚖdelivrioᚗioᚋgoᚋentᚐConsolidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateConsolidation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Consolidation_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Consolidation_tenantID(ctx, field)
			case "publicID":
				return ec.fieldContext_Consolidation_publicID(ctx, field)
			case "description":
				return ec.fieldContext_Consolidation_description(ctx, field)
			case "status":
				return ec.fieldContext_Consolidation_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Consolidation_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Consolidation_tenant(ctx, field)
			case "pallets":
				return ec.fieldContext_Consolidation_pallets(ctx, field)
			case "orders":
				return ec.fieldContext_Consolidation_orders(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Consolidation_deliveryOption(ctx, field)
			case "recipient":
				return ec.fieldContext_Consolidation_recipient(ctx, field)
			case "sender":
				return ec.fieldContext_Consolidation_sender(ctx, field)
			case "shipment":
				return ec.fieldContext_Consolidation_shipment(ctx, field)
			case "cancelledShipments":
				return ec.fieldContext_Consolidation_cancelledShipments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Consolidation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateConsolidation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeliveryOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeliveryOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeliveryOption(rctx, fc.Args["name"].(string), fc.Args["agreementID"].(pulid.ID), fc.Args["connectionID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CreateDeliveryOptionSuccess)
	fc.Result = res
	return ec.marshalNCreateDeliveryOptionSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateDeliveryOptionSuccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeliveryOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateDeliveryOptionSuccess_id(ctx, field)
			case "carrier":
				return ec.fieldContext_CreateDeliveryOptionSuccess_carrier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateDeliveryOptionSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeliveryOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionBring(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionBring(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionBring(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateDeliveryOptionBringInput), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionBring)
	fc.Result = res
	return ec.marshalNDeliveryOptionBring2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionBring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionBring(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionBring_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionBring_tenantID(ctx, field)
			case "electronicCustoms":
				return ec.fieldContext_DeliveryOptionBring_electronicCustoms(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionBring_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionBring_deliveryOption(ctx, field)
			case "carrierAdditionalServiceBring":
				return ec.fieldContext_DeliveryOptionBring_carrierAdditionalServiceBring(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionBring", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionBring_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionDAO(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionDAO(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionDao(rctx, fc.Args["id"].(pulid.ID), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionDAO)
	fc.Result = res
	return ec.marshalNDeliveryOptionDAO2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionDAO(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionDAO(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionDAO_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionDAO_tenantID(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionDAO_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionDAO_deliveryOption(ctx, field)
			case "carrierAdditionalServiceDAO":
				return ec.fieldContext_DeliveryOptionDAO_carrierAdditionalServiceDAO(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionDAO", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionDAO_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionDF(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionDF(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionDf(rctx, fc.Args["id"].(pulid.ID), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionDF)
	fc.Result = res
	return ec.marshalNDeliveryOptionDF2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionDF(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionDF(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionDF_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionDF_tenantID(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionDF_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionDF_deliveryOption(ctx, field)
			case "carrierAdditionalServiceDF":
				return ec.fieldContext_DeliveryOptionDF_carrierAdditionalServiceDF(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionDF", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionDF_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionDSV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionDSV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionDsv(rctx, fc.Args["id"].(pulid.ID), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionDSV)
	fc.Result = res
	return ec.marshalNDeliveryOptionDSV2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionDSV(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionDSV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionDSV_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionDSV_tenantID(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionDSV_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionDSV_deliveryOption(ctx, field)
			case "carrierAdditionalServiceDSV":
				return ec.fieldContext_DeliveryOptionDSV_carrierAdditionalServiceDSV(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionDSV", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionDSV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionEasyPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionEasyPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionEasyPost(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateDeliveryOptionEasyPostInput), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionEasyPost)
	fc.Result = res
	return ec.marshalNDeliveryOptionEasyPost2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionEasyPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionEasyPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionEasyPost_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionEasyPost_tenantID(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionEasyPost_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionEasyPost_deliveryOption(ctx, field)
			case "carrierAddServEasyPost":
				return ec.fieldContext_DeliveryOptionEasyPost_carrierAddServEasyPost(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionEasyPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionEasyPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionGLS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionGLS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionGls(rctx, fc.Args["id"].(pulid.ID), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionGLS)
	fc.Result = res
	return ec.marshalNDeliveryOptionGLS2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionGLS(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionGLS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionGLS_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionGLS_tenantID(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionGLS_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionGLS_deliveryOption(ctx, field)
			case "carrierAdditionalServiceGLS":
				return ec.fieldContext_DeliveryOptionGLS_carrierAdditionalServiceGLS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionGLS", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionGLS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionPostNord(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionPostNord(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionPostNord(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateDeliveryOptionPostNordInput), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput), fc.Args["inputAdditionalServices"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionPostNord)
	fc.Result = res
	return ec.marshalNDeliveryOptionPostNord2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionPostNord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionPostNord(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionPostNord_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionPostNord_tenantID(ctx, field)
			case "formatZpl":
				return ec.fieldContext_DeliveryOptionPostNord_formatZpl(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionPostNord_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionPostNord_deliveryOption(ctx, field)
			case "carrierAddServPostNord":
				return ec.fieldContext_DeliveryOptionPostNord_carrierAddServPostNord(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionPostNord", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionPostNord_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionUSPS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionUSPS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionUsps(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateDeliveryOptionUSPSInput), fc.Args["inputDeliveryOption"].(ent.UpdateDeliveryOptionInput), fc.Args["inputAdditionalServices"].([]pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryOptionUSPS)
	fc.Result = res
	return ec.marshalNDeliveryOptionUSPS2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionUSPS(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionUSPS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOptionUSPS_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOptionUSPS_tenantID(ctx, field)
			case "formatZpl":
				return ec.fieldContext_DeliveryOptionUSPS_formatZpl(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOptionUSPS_tenant(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryOptionUSPS_deliveryOption(ctx, field)
			case "carrierAdditionalServiceUSPS":
				return ec.fieldContext_DeliveryOptionUSPS_carrierAdditionalServiceUSPS(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOptionUSPS", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionUSPS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeliveryRule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeliveryRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeliveryRule(rctx, fc.Args["input"].(ent.CreateDeliveryRuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryRule)
	fc.Result = res
	return ec.marshalNDeliveryRule2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeliveryRule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRule_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRule_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryRule_name(ctx, field)
			case "price":
				return ec.fieldContext_DeliveryRule_price(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRule_tenant(ctx, field)
			case "deliveryRuleConstraintGroup":
				return ec.fieldContext_DeliveryRule_deliveryRuleConstraintGroup(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryRule_deliveryOption(ctx, field)
			case "country":
				return ec.fieldContext_DeliveryRule_country(ctx, field)
			case "currency":
				return ec.fieldContext_DeliveryRule_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRule", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeliveryRule_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryRule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryRule(rctx, fc.Args["deliveryRuleID"].(pulid.ID), fc.Args["val"].(ent.UpdateDeliveryRuleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryRule)
	fc.Result = res
	return ec.marshalNDeliveryRule2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryRule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRule_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRule_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryRule_name(ctx, field)
			case "price":
				return ec.fieldContext_DeliveryRule_price(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRule_tenant(ctx, field)
			case "deliveryRuleConstraintGroup":
				return ec.fieldContext_DeliveryRule_deliveryRuleConstraintGroup(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryRule_deliveryOption(ctx, field)
			case "country":
				return ec.fieldContext_DeliveryRule_country(ctx, field)
			case "currency":
				return ec.fieldContext_DeliveryRule_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRule", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryRule_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeliveryRuleConstraintGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeliveryRuleConstraintGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeliveryRuleConstraintGroup(rctx, fc.Args["input"].(ent.CreateDeliveryRuleConstraintGroupInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryRuleConstraintGroup)
	fc.Result = res
	return ec.marshalNDeliveryRuleConstraintGroup2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRuleConstraintGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeliveryRuleConstraintGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRuleConstraintGroup_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRuleConstraintGroup_tenantID(ctx, field)
			case "constraintLogic":
				return ec.fieldContext_DeliveryRuleConstraintGroup_constraintLogic(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRuleConstraintGroup_tenant(ctx, field)
			case "deliveryRuleConstraints":
				return ec.fieldContext_DeliveryRuleConstraintGroup_deliveryRuleConstraints(ctx, field)
			case "deliveryRule":
				return ec.fieldContext_DeliveryRuleConstraintGroup_deliveryRule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRuleConstraintGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeliveryRuleConstraintGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeliveryRuleConstraintGroupConstraints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeliveryRuleConstraintGroupConstraints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDeliveryRuleConstraintGroupConstraints(rctx, fc.Args["deliveryRuleId"].(pulid.ID), fc.Args["logicType"].(deliveryruleconstraintgroup.ConstraintLogic), fc.Args["input"].([]*ent.CreateDeliveryRuleConstraintInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DeliveryRuleConstraintWithTags)
	fc.Result = res
	return ec.marshalODeliveryRuleConstraintWithTags2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryRuleConstraintWithTagsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeliveryRuleConstraintGroupConstraints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constraint":
				return ec.fieldContext_DeliveryRuleConstraintWithTags_constraint(ctx, field)
			case "tags":
				return ec.fieldContext_DeliveryRuleConstraintWithTags_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRuleConstraintWithTags", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeliveryRuleConstraintGroupConstraints_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceDeliveryRuleConstraintGroupConstraints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceDeliveryRuleConstraintGroupConstraints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceDeliveryRuleConstraintGroupConstraints(rctx, fc.Args["deliveryGroupId"].(pulid.ID), fc.Args["logicType"].(deliveryruleconstraintgroup.ConstraintLogic), fc.Args["input"].([]*ent.CreateDeliveryRuleConstraintInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.DeliveryRuleConstraintWithTags)
	fc.Result = res
	return ec.marshalODeliveryRuleConstraintWithTags2ᚕᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐDeliveryRuleConstraintWithTagsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceDeliveryRuleConstraintGroupConstraints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "constraint":
				return ec.fieldContext_DeliveryRuleConstraintWithTags_constraint(ctx, field)
			case "tags":
				return ec.fieldContext_DeliveryRuleConstraintWithTags_tags(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRuleConstraintWithTags", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceDeliveryRuleConstraintGroupConstraints_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeliveryRule(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeliveryRule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeliveryRule(rctx, fc.Args["deliveryRuleID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.DeliveryRule)
	fc.Result = res
	return ec.marshalNDeliveryRule2ᚕᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeliveryRule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRule_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRule_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryRule_name(ctx, field)
			case "price":
				return ec.fieldContext_DeliveryRule_price(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRule_tenant(ctx, field)
			case "deliveryRuleConstraintGroup":
				return ec.fieldContext_DeliveryRule_deliveryRuleConstraintGroup(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryRule_deliveryOption(ctx, field)
			case "country":
				return ec.fieldContext_DeliveryRule_country(ctx, field)
			case "currency":
				return ec.fieldContext_DeliveryRule_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRule", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeliveryRule_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeliveryRuleConstraintGroupConstraints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeliveryRuleConstraintGroupConstraints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDeliveryRuleConstraintGroupConstraints(rctx, fc.Args["deliveryGroupId"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.DeliveryRule)
	fc.Result = res
	return ec.marshalNDeliveryRule2ᚕᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeliveryRuleConstraintGroupConstraints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRule_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRule_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryRule_name(ctx, field)
			case "price":
				return ec.fieldContext_DeliveryRule_price(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRule_tenant(ctx, field)
			case "deliveryRuleConstraintGroup":
				return ec.fieldContext_DeliveryRule_deliveryRuleConstraintGroup(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryRule_deliveryOption(ctx, field)
			case "country":
				return ec.fieldContext_DeliveryRule_country(ctx, field)
			case "currency":
				return ec.fieldContext_DeliveryRule_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRule", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeliveryRuleConstraintGroupConstraints_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceDeliveryRuleCountries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceDeliveryRuleCountries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceDeliveryRuleCountries(rctx, fc.Args["ruleID"].(pulid.ID), fc.Args["countries"].([]pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.DeliveryRule)
	fc.Result = res
	return ec.marshalNDeliveryRule2ᚖdelivrioᚗioᚋgoᚋentᚐDeliveryRule(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceDeliveryRuleCountries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryRule_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryRule_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryRule_name(ctx, field)
			case "price":
				return ec.fieldContext_DeliveryRule_price(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryRule_tenant(ctx, field)
			case "deliveryRuleConstraintGroup":
				return ec.fieldContext_DeliveryRule_deliveryRuleConstraintGroup(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_DeliveryRule_deliveryOption(ctx, field)
			case "country":
				return ec.fieldContext_DeliveryRule_country(ctx, field)
			case "currency":
				return ec.fieldContext_DeliveryRule_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryRule", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceDeliveryRuleCountries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeliveryOptionSortOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeliveryOptionSortOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDeliveryOptionSortOrder(rctx, fc.Args["newOrder"].([]pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.DeliveryOption)
	fc.Result = res
	return ec.marshalNDeliveryOption2ᚕᚖdelivrioᚗioᚋgoᚋentᚐDeliveryOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeliveryOptionSortOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeliveryOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_DeliveryOption_tenantID(ctx, field)
			case "archivedAt":
				return ec.fieldContext_DeliveryOption_archivedAt(ctx, field)
			case "name":
				return ec.fieldContext_DeliveryOption_name(ctx, field)
			case "sortOrder":
				return ec.fieldContext_DeliveryOption_sortOrder(ctx, field)
			case "clickOptionDisplayCount":
				return ec.fieldContext_DeliveryOption_clickOptionDisplayCount(ctx, field)
			case "description":
				return ec.fieldContext_DeliveryOption_description(ctx, field)
			case "clickCollect":
				return ec.fieldContext_DeliveryOption_clickCollect(ctx, field)
			case "overrideSenderAddress":
				return ec.fieldContext_DeliveryOption_overrideSenderAddress(ctx, field)
			case "overrideReturnAddress":
				return ec.fieldContext_DeliveryOption_overrideReturnAddress(ctx, field)
			case "hideDeliveryOption":
				return ec.fieldContext_DeliveryOption_hideDeliveryOption(ctx, field)
			case "deliveryEstimateFrom":
				return ec.fieldContext_DeliveryOption_deliveryEstimateFrom(ctx, field)
			case "deliveryEstimateTo":
				return ec.fieldContext_DeliveryOption_deliveryEstimateTo(ctx, field)
			case "webshipperIntegration":
				return ec.fieldContext_DeliveryOption_webshipperIntegration(ctx, field)
			case "webshipperID":
				return ec.fieldContext_DeliveryOption_webshipperID(ctx, field)
			case "shipmondoIntegration":
				return ec.fieldContext_DeliveryOption_shipmondoIntegration(ctx, field)
			case "shipmondoDeliveryOption":
				return ec.fieldContext_DeliveryOption_shipmondoDeliveryOption(ctx, field)
			case "customsEnabled":
				return ec.fieldContext_DeliveryOption_customsEnabled(ctx, field)
			case "customsSigner":
				return ec.fieldContext_DeliveryOption_customsSigner(ctx, field)
			case "hideIfCompanyEmpty":
				return ec.fieldContext_DeliveryOption_hideIfCompanyEmpty(ctx, field)
			case "tenant":
				return ec.fieldContext_DeliveryOption_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_DeliveryOption_carrier(ctx, field)
			case "deliveryRule":
				return ec.fieldContext_DeliveryOption_deliveryRule(ctx, field)
			case "deliveryOptionDAO":
				return ec.fieldContext_DeliveryOption_deliveryOptionDAO(ctx, field)
			case "deliveryOptionDF":
				return ec.fieldContext_DeliveryOption_deliveryOptionDF(ctx, field)
			case "deliveryOptionDSV":
				return ec.fieldContext_DeliveryOption_deliveryOptionDSV(ctx, field)
			case "deliveryOptionEasyPost":
				return ec.fieldContext_DeliveryOption_deliveryOptionEasyPost(ctx, field)
			case "deliveryOptionGLS":
				return ec.fieldContext_DeliveryOption_deliveryOptionGLS(ctx, field)
			case "deliveryOptionPostNord":
				return ec.fieldContext_DeliveryOption_deliveryOptionPostNord(ctx, field)
			case "deliveryOptionUSPS":
				return ec.fieldContext_DeliveryOption_deliveryOptionUSPS(ctx, field)
			case "deliveryOptionBring":
				return ec.fieldContext_DeliveryOption_deliveryOptionBring(ctx, field)
			case "returnPortals":
				return ec.fieldContext_DeliveryOption_returnPortals(ctx, field)
			case "colli":
				return ec.fieldContext_DeliveryOption_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_DeliveryOption_returnColli(ctx, field)
			case "carrierService":
				return ec.fieldContext_DeliveryOption_carrierService(ctx, field)
			case "connection":
				return ec.fieldContext_DeliveryOption_connection(ctx, field)
			case "connectionDefault":
				return ec.fieldContext_DeliveryOption_connectionDefault(ctx, field)
			case "hypothesisTestDeliveryOptionGroupOne":
				return ec.fieldContext_DeliveryOption_hypothesisTestDeliveryOptionGroupOne(ctx, field)
			case "hypothesisTestDeliveryOptionGroupTwo":
				return ec.fieldContext_DeliveryOption_hypothesisTestDeliveryOptionGroupTwo(ctx, field)
			case "hypothesisTestDeliveryOptionLookup":
				return ec.fieldContext_DeliveryOption_hypothesisTestDeliveryOptionLookup(ctx, field)
			case "clickCollectLocation":
				return ec.fieldContext_DeliveryOption_clickCollectLocation(ctx, field)
			case "emailClickCollectAtStore":
				return ec.fieldContext_DeliveryOption_emailClickCollectAtStore(ctx, field)
			case "consolidation":
				return ec.fieldContext_DeliveryOption_consolidation(ctx, field)
			case "defaultPackaging":
				return ec.fieldContext_DeliveryOption_defaultPackaging(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeliveryOption", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeliveryOptionSortOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deliveryOptionArchive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deliveryOptionArchive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeliveryOptionArchive(rctx, fc.Args["deliveryOptionID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deliveryOptionArchive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deliveryOptionArchive_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDocument(rctx, fc.Args["name"].(string), fc.Args["mergeType"].(document.MergeType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDocument(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateDocumentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Document)
	fc.Result = res
	return ec.marshalNDocument2ᚖdelivrioᚗioᚋgoᚋentᚐDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Document_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Document_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Document_name(ctx, field)
			case "htmlTemplate":
				return ec.fieldContext_Document_htmlTemplate(ctx, field)
			case "htmlHeader":
				return ec.fieldContext_Document_htmlHeader(ctx, field)
			case "htmlFooter":
				return ec.fieldContext_Document_htmlFooter(ctx, field)
			case "lastBase64Pdf":
				return ec.fieldContext_Document_lastBase64Pdf(ctx, field)
			case "mergeType":
				return ec.fieldContext_Document_mergeType(ctx, field)
			case "paperSize":
				return ec.fieldContext_Document_paperSize(ctx, field)
			case "startAt":
				return ec.fieldContext_Document_startAt(ctx, field)
			case "endAt":
				return ec.fieldContext_Document_endAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Document_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Document_tenant(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Document_carrierBrand(ctx, field)
			case "connectionPackingSlip":
				return ec.fieldContext_Document_connectionPackingSlip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Document", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEmailTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEmailTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmailTemplates(rctx, fc.Args["name"].(string), fc.Args["merge"].(emailtemplate.MergeType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEmailTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEmailTemplates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateEmailTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateEmailTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmailTemplate(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateEmailTemplateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.EmailTemplate)
	fc.Result = res
	return ec.marshalNEmailTemplate2ᚖdelivrioᚗioᚋgoᚋentᚐEmailTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateEmailTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EmailTemplate_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_EmailTemplate_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_EmailTemplate_name(ctx, field)
			case "subject":
				return ec.fieldContext_EmailTemplate_subject(ctx, field)
			case "htmlTemplate":
				return ec.fieldContext_EmailTemplate_htmlTemplate(ctx, field)
			case "mergeType":
				return ec.fieldContext_EmailTemplate_mergeType(ctx, field)
			case "createdAt":
				return ec.fieldContext_EmailTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EmailTemplate_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_EmailTemplate_tenant(ctx, field)
			case "returnPortalConfirmationLabel":
				return ec.fieldContext_EmailTemplate_returnPortalConfirmationLabel(ctx, field)
			case "returnPortalConfirmationQrCode":
				return ec.fieldContext_EmailTemplate_returnPortalConfirmationQrCode(ctx, field)
			case "returnPortalReceived":
				return ec.fieldContext_EmailTemplate_returnPortalReceived(ctx, field)
			case "returnPortalAccepted":
				return ec.fieldContext_EmailTemplate_returnPortalAccepted(ctx, field)
			case "deliveryOptionClickCollectAtStore":
				return ec.fieldContext_EmailTemplate_deliveryOptionClickCollectAtStore(ctx, field)
			case "notifications":
				return ec.fieldContext_EmailTemplate_notifications(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmailTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateEmailTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createHypothesisTestDeliveryOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createHypothesisTestDeliveryOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHypothesisTestDeliveryOption(rctx, fc.Args["name"].(string), fc.Args["connectionID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createHypothesisTestDeliveryOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createHypothesisTestDeliveryOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateHypothesisTestDeliveryOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateHypothesisTestDeliveryOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateHypothesisTestDeliveryOption(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateHypothesisTestInput), fc.Args["inputDeliveryOption"].(ent.UpdateHypothesisTestDeliveryOptionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.HypothesisTest)
	fc.Result = res
	return ec.marshalNHypothesisTest2ᚖdelivrioᚗioᚋgoᚋentᚐHypothesisTest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateHypothesisTestDeliveryOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_HypothesisTest_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_HypothesisTest_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_HypothesisTest_name(ctx, field)
			case "active":
				return ec.fieldContext_HypothesisTest_active(ctx, field)
			case "tenant":
				return ec.fieldContext_HypothesisTest_tenant(ctx, field)
			case "hypothesisTestDeliveryOption":
				return ec.fieldContext_HypothesisTest_hypothesisTestDeliveryOption(ctx, field)
			case "connection":
				return ec.fieldContext_HypothesisTest_connection(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HypothesisTest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateHypothesisTestDeliveryOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLocation(rctx, fc.Args["input"].(ent.CreateLocationInput), fc.Args["inputAddress"].(ent.CreateAddressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖdelivrioᚗioᚋgoᚋentᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Location_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "tenant":
				return ec.fieldContext_Location_tenant(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "locationTags":
				return ec.fieldContext_Location_locationTags(ctx, field)
			case "senderConnection":
				return ec.fieldContext_Location_senderConnection(ctx, field)
			case "pickupConnection":
				return ec.fieldContext_Location_pickupConnection(ctx, field)
			case "returnConnection":
				return ec.fieldContext_Location_returnConnection(ctx, field)
			case "sellerConnection":
				return ec.fieldContext_Location_sellerConnection(ctx, field)
			case "returnPortal":
				return ec.fieldContext_Location_returnPortal(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Location_deliveryOption(ctx, field)
			case "colli":
				return ec.fieldContext_Location_colli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLocation(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateLocationInput), fc.Args["inputAddress"].(ent.UpdateAddressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖdelivrioᚗioᚋgoᚋentᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Location_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "tenant":
				return ec.fieldContext_Location_tenant(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "locationTags":
				return ec.fieldContext_Location_locationTags(ctx, field)
			case "senderConnection":
				return ec.fieldContext_Location_senderConnection(ctx, field)
			case "pickupConnection":
				return ec.fieldContext_Location_pickupConnection(ctx, field)
			case "returnConnection":
				return ec.fieldContext_Location_returnConnection(ctx, field)
			case "sellerConnection":
				return ec.fieldContext_Location_sellerConnection(ctx, field)
			case "returnPortal":
				return ec.fieldContext_Location_returnPortal(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Location_deliveryOption(ctx, field)
			case "colli":
				return ec.fieldContext_Location_colli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNotification(rctx, fc.Args["name"].(string), fc.Args["connectionID"].(pulid.ID), fc.Args["emailTemplateID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕᚖdelivrioᚗioᚋgoᚋentᚐNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Notification_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Notification_name(ctx, field)
			case "active":
				return ec.fieldContext_Notification_active(ctx, field)
			case "tenant":
				return ec.fieldContext_Notification_tenant(ctx, field)
			case "connection":
				return ec.fieldContext_Notification_connection(ctx, field)
			case "emailTemplate":
				return ec.fieldContext_Notification_emailTemplate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_toggleNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_toggleNotification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ToggleNotification(rctx, fc.Args["notificationID"].(pulid.ID), fc.Args["checked"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_toggleNotification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_toggleNotification_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_duplicateColli(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_duplicateColli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DuplicateColli(rctx, fc.Args["fromColliID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_duplicateColli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_duplicateColli_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteColli(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteColli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteColli(rctx, fc.Args["colliID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteColli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteColli_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_moveOrderLine(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_moveOrderLine(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoveOrderLine(rctx, fc.Args["orderLineID"].(pulid.ID), fc.Args["colliID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.Colli)
	fc.Result = res
	return ec.marshalOColli2ᚕᚖdelivrioᚗioᚋgoᚋentᚐColliᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_moveOrderLine(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Colli_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Colli_tenantID(ctx, field)
			case "internalBarcode":
				return ec.fieldContext_Colli_internalBarcode(ctx, field)
			case "status":
				return ec.fieldContext_Colli_status(ctx, field)
			case "slipPrintStatus":
				return ec.fieldContext_Colli_slipPrintStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Colli_createdAt(ctx, field)
			case "emailPackingSlipPrintedAt":
				return ec.fieldContext_Colli_emailPackingSlipPrintedAt(ctx, field)
			case "emailLabelPrintedAt":
				return ec.fieldContext_Colli_emailLabelPrintedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Colli_tenant(ctx, field)
			case "recipient":
				return ec.fieldContext_Colli_recipient(ctx, field)
			case "sender":
				return ec.fieldContext_Colli_sender(ctx, field)
			case "parcelShop":
				return ec.fieldContext_Colli_parcelShop(ctx, field)
			case "clickCollectLocation":
				return ec.fieldContext_Colli_clickCollectLocation(ctx, field)
			case "orderLines":
				return ec.fieldContext_Colli_orderLines(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Colli_deliveryOption(ctx, field)
			case "documentFile":
				return ec.fieldContext_Colli_documentFile(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Colli_shipmentParcel(ctx, field)
			case "cancelledShipmentParcel":
				return ec.fieldContext_Colli_cancelledShipmentParcel(ctx, field)
			case "order":
				return ec.fieldContext_Colli_order(ctx, field)
			case "packaging":
				return ec.fieldContext_Colli_packaging(ctx, field)
			case "printJob":
				return ec.fieldContext_Colli_printJob(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Colli", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_moveOrderLine_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createColli(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createColli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateColli(rctx, fc.Args["orderID"].(pulid.ID), fc.Args["input"].(ent.CreateColliInput), fc.Args["deliveryOptionID"].(*pulid.ID), fc.Args["deliveryPointID"].(*pulid.ID), fc.Args["ccLocationID"].(*pulid.ID), fc.Args["packagingID"].(*pulid.ID), fc.Args["recipientAddress"].(ent.CreateAddressInput), fc.Args["senderAddress"].(ent.CreateAddressInput), fc.Args["products"].([]*utils.ProductVariantQuantity))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalNOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createColli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createColli_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateColli(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateColli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateColli(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateColliInput), fc.Args["deliveryOptionID"].(*pulid.ID), fc.Args["deliveryPointID"].(*pulid.ID), fc.Args["ccLocationID"].(*pulid.ID), fc.Args["packagingID"].(*pulid.ID), fc.Args["recipientAddressID"].(pulid.ID), fc.Args["recipientAddress"].(ent.UpdateAddressInput), fc.Args["senderAddressID"].(pulid.ID), fc.Args["senderAddress"].(ent.UpdateAddressInput), fc.Args["updateExistingRecipient"].(*bool), fc.Args["products"].([]*utils.ProductVariantQuantity), fc.Args["removeProducts"].([]pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Colli)
	fc.Result = res
	return ec.marshalOColli2ᚖdelivrioᚗioᚋgoᚋentᚐColli(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateColli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Colli_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Colli_tenantID(ctx, field)
			case "internalBarcode":
				return ec.fieldContext_Colli_internalBarcode(ctx, field)
			case "status":
				return ec.fieldContext_Colli_status(ctx, field)
			case "slipPrintStatus":
				return ec.fieldContext_Colli_slipPrintStatus(ctx, field)
			case "createdAt":
				return ec.fieldContext_Colli_createdAt(ctx, field)
			case "emailPackingSlipPrintedAt":
				return ec.fieldContext_Colli_emailPackingSlipPrintedAt(ctx, field)
			case "emailLabelPrintedAt":
				return ec.fieldContext_Colli_emailLabelPrintedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Colli_tenant(ctx, field)
			case "recipient":
				return ec.fieldContext_Colli_recipient(ctx, field)
			case "sender":
				return ec.fieldContext_Colli_sender(ctx, field)
			case "parcelShop":
				return ec.fieldContext_Colli_parcelShop(ctx, field)
			case "clickCollectLocation":
				return ec.fieldContext_Colli_clickCollectLocation(ctx, field)
			case "orderLines":
				return ec.fieldContext_Colli_orderLines(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Colli_deliveryOption(ctx, field)
			case "documentFile":
				return ec.fieldContext_Colli_documentFile(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Colli_shipmentParcel(ctx, field)
			case "cancelledShipmentParcel":
				return ec.fieldContext_Colli_cancelledShipmentParcel(ctx, field)
			case "order":
				return ec.fieldContext_Colli_order(ctx, field)
			case "packaging":
				return ec.fieldContext_Colli_packaging(ctx, field)
			case "printJob":
				return ec.fieldContext_Colli_printJob(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Colli", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateColli_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEmptyOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEmptyOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmptyOrder(rctx, fc.Args["input"].(ent.CreateOrderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalOOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEmptyOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEmptyOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrder(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateOrderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Order)
	fc.Result = res
	return ec.marshalOOrder2ᚖdelivrioᚗioᚋgoᚋentᚐOrder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Order_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Order_tenantID(ctx, field)
			case "orderPublicID":
				return ec.fieldContext_Order_orderPublicID(ctx, field)
			case "externalID":
				return ec.fieldContext_Order_externalID(ctx, field)
			case "commentInternal":
				return ec.fieldContext_Order_commentInternal(ctx, field)
			case "commentExternal":
				return ec.fieldContext_Order_commentExternal(ctx, field)
			case "createdAt":
				return ec.fieldContext_Order_createdAt(ctx, field)
			case "emailSyncConfirmationAt":
				return ec.fieldContext_Order_emailSyncConfirmationAt(ctx, field)
			case "status":
				return ec.fieldContext_Order_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Order_tenant(ctx, field)
			case "orderHistory":
				return ec.fieldContext_Order_orderHistory(ctx, field)
			case "connection":
				return ec.fieldContext_Order_connection(ctx, field)
			case "colli":
				return ec.fieldContext_Order_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Order_returnColli(ctx, field)
			case "hypothesisTestDeliveryOptionRequest":
				return ec.fieldContext_Order_hypothesisTestDeliveryOptionRequest(ctx, field)
			case "pallet":
				return ec.fieldContext_Order_pallet(ctx, field)
			case "consolidation":
				return ec.fieldContext_Order_consolidation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Order", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bulkUpdatePackaging(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bulkUpdatePackaging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BulkUpdatePackaging(rctx, fc.Args["orderIDs"].([]pulid.ID), fc.Args["packagingID"].(*pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.BulkUpdateMessage)
	fc.Result = res
	return ec.marshalNBulkUpdateMessage2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐBulkUpdateMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bulkUpdatePackaging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "success":
				return ec.fieldContext_BulkUpdateMessage_success(ctx, field)
			case "msg":
				return ec.fieldContext_BulkUpdateMessage_msg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkUpdateMessage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bulkUpdatePackaging_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPackaging(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPackaging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePackaging(rctx, fc.Args["input"].(ent.CreatePackagingInput), fc.Args["inputPackagingUSPS"].(*ent.CreatePackagingUSPSInput), fc.Args["inputPackagingDF"].(*ent.CreatePackagingDFInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Packaging)
	fc.Result = res
	return ec.marshalNPackaging2ᚕᚖdelivrioᚗioᚋgoᚋentᚐPackagingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPackaging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Packaging_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Packaging_tenantID(ctx, field)
			case "archivedAt":
				return ec.fieldContext_Packaging_archivedAt(ctx, field)
			case "name":
				return ec.fieldContext_Packaging_name(ctx, field)
			case "heightCm":
				return ec.fieldContext_Packaging_heightCm(ctx, field)
			case "widthCm":
				return ec.fieldContext_Packaging_widthCm(ctx, field)
			case "lengthCm":
				return ec.fieldContext_Packaging_lengthCm(ctx, field)
			case "tenant":
				return ec.fieldContext_Packaging_tenant(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Packaging_shipmentParcel(ctx, field)
			case "pallet":
				return ec.fieldContext_Packaging_pallet(ctx, field)
			case "colli":
				return ec.fieldContext_Packaging_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Packaging_returnColli(ctx, field)
			case "packagingDF":
				return ec.fieldContext_Packaging_packagingDF(ctx, field)
			case "packagingUSPS":
				return ec.fieldContext_Packaging_packagingUSPS(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Packaging_carrierBrand(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Packaging_deliveryOption(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Packaging", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPackaging_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePackaging(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePackaging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePackaging(rctx, fc.Args["input"].(ent.UpdatePackagingInput), fc.Args["inputPackagingUSPS"].(*ent.UpdatePackagingUSPSInput), fc.Args["inputPackagingDF"].(*ent.CreatePackagingDFInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ent.Packaging)
	fc.Result = res
	return ec.marshalNPackaging2ᚕᚖdelivrioᚗioᚋgoᚋentᚐPackagingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePackaging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Packaging_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Packaging_tenantID(ctx, field)
			case "archivedAt":
				return ec.fieldContext_Packaging_archivedAt(ctx, field)
			case "name":
				return ec.fieldContext_Packaging_name(ctx, field)
			case "heightCm":
				return ec.fieldContext_Packaging_heightCm(ctx, field)
			case "widthCm":
				return ec.fieldContext_Packaging_widthCm(ctx, field)
			case "lengthCm":
				return ec.fieldContext_Packaging_lengthCm(ctx, field)
			case "tenant":
				return ec.fieldContext_Packaging_tenant(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Packaging_shipmentParcel(ctx, field)
			case "pallet":
				return ec.fieldContext_Packaging_pallet(ctx, field)
			case "colli":
				return ec.fieldContext_Packaging_colli(ctx, field)
			case "returnColli":
				return ec.fieldContext_Packaging_returnColli(ctx, field)
			case "packagingDF":
				return ec.fieldContext_Packaging_packagingDF(ctx, field)
			case "packagingUSPS":
				return ec.fieldContext_Packaging_packagingUSPS(ctx, field)
			case "carrierBrand":
				return ec.fieldContext_Packaging_carrierBrand(ctx, field)
			case "deliveryOption":
				return ec.fieldContext_Packaging_deliveryOption(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Packaging", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePackaging_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_archivePackaging(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_archivePackaging(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchivePackaging(rctx, fc.Args["id"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_archivePackaging(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_archivePackaging_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProduct(rctx, fc.Args["input"].(ent.CreateProductInput), fc.Args["variants"].([]*ent.CreateProductVariantInput), fc.Args["images"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖdelivrioᚗioᚋgoᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Product_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_Product_externalID(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "bodyHTML":
				return ec.fieldContext_Product_bodyHTML(ctx, field)
			case "status":
				return ec.fieldContext_Product_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Product_tenant(ctx, field)
			case "productTags":
				return ec.fieldContext_Product_productTags(ctx, field)
			case "productVariant":
				return ec.fieldContext_Product_productVariant(ctx, field)
			case "productImage":
				return ec.fieldContext_Product_productImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateProduct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateProduct(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateProductInput), fc.Args["variants"].([]*models.UpdateProductVariantIDInput), fc.Args["images"].([]*models.ProductVariantImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalOProduct2ᚖdelivrioᚗioᚋgoᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateProduct(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Product_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_Product_externalID(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "bodyHTML":
				return ec.fieldContext_Product_bodyHTML(ctx, field)
			case "status":
				return ec.fieldContext_Product_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Product_tenant(ctx, field)
			case "productTags":
				return ec.fieldContext_Product_productTags(ctx, field)
			case "productVariant":
				return ec.fieldContext_Product_productVariant(ctx, field)
			case "productImage":
				return ec.fieldContext_Product_productImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProduct_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadProductImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadProductImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadProductImage(rctx, fc.Args["productID"].(pulid.ID), fc.Args["image"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖdelivrioᚗioᚋgoᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadProductImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Product_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_Product_externalID(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "bodyHTML":
				return ec.fieldContext_Product_bodyHTML(ctx, field)
			case "status":
				return ec.fieldContext_Product_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Product_tenant(ctx, field)
			case "productTags":
				return ec.fieldContext_Product_productTags(ctx, field)
			case "productVariant":
				return ec.fieldContext_Product_productVariant(ctx, field)
			case "productImage":
				return ec.fieldContext_Product_productImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadProductImage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProductImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteProductImage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteProductImage(rctx, fc.Args["imageID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖdelivrioᚗioᚋgoᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteProductImage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Product_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_Product_externalID(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "bodyHTML":
				return ec.fieldContext_Product_bodyHTML(ctx, field)
			case "status":
				return ec.fieldContext_Product_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Product_tenant(ctx, field)
			case "productTags":
				return ec.fieldContext_Product_productTags(ctx, field)
			case "productVariant":
				return ec.fieldContext_Product_productVariant(ctx, field)
			case "productImage":
				return ec.fieldContext_Product_productImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProductImage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_archiveProductVariant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_archiveProductVariant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchiveProductVariant(rctx, fc.Args["variantID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖdelivrioᚗioᚋgoᚋentᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_archiveProductVariant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Product_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Product_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_Product_externalID(ctx, field)
			case "title":
				return ec.fieldContext_Product_title(ctx, field)
			case "bodyHTML":
				return ec.fieldContext_Product_bodyHTML(ctx, field)
			case "status":
				return ec.fieldContext_Product_status(ctx, field)
			case "createdAt":
				return ec.fieldContext_Product_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Product_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Product_tenant(ctx, field)
			case "productTags":
				return ec.fieldContext_Product_productTags(ctx, field)
			case "productVariant":
				return ec.fieldContext_Product_productVariant(ctx, field)
			case "productImage":
				return ec.fieldContext_Product_productImage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_archiveProductVariant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createVariant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createVariant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateVariant(rctx, fc.Args["productID"].(pulid.ID), fc.Args["input"].(*ent.CreateProductVariantInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ProductVariant)
	fc.Result = res
	return ec.marshalNProductVariant2ᚖdelivrioᚗioᚋgoᚋentᚐProductVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createVariant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductVariant_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ProductVariant_tenantID(ctx, field)
			case "archived":
				return ec.fieldContext_ProductVariant_archived(ctx, field)
			case "externalID":
				return ec.fieldContext_ProductVariant_externalID(ctx, field)
			case "description":
				return ec.fieldContext_ProductVariant_description(ctx, field)
			case "eanNumber":
				return ec.fieldContext_ProductVariant_eanNumber(ctx, field)
			case "weightG":
				return ec.fieldContext_ProductVariant_weightG(ctx, field)
			case "dimensionLength":
				return ec.fieldContext_ProductVariant_dimensionLength(ctx, field)
			case "dimensionWidth":
				return ec.fieldContext_ProductVariant_dimensionWidth(ctx, field)
			case "dimensionHeight":
				return ec.fieldContext_ProductVariant_dimensionHeight(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProductVariant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ProductVariant_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_ProductVariant_tenant(ctx, field)
			case "product":
				return ec.fieldContext_ProductVariant_product(ctx, field)
			case "orderLines":
				return ec.fieldContext_ProductVariant_orderLines(ctx, field)
			case "productImage":
				return ec.fieldContext_ProductVariant_productImage(ctx, field)
			case "inventoryItem":
				return ec.fieldContext_ProductVariant_inventoryItem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductVariant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createVariant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_mustInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_mustInventory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MustInventory(rctx, fc.Args["productVariantID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.InventoryItem)
	fc.Result = res
	return ec.marshalNInventoryItem2ᚖdelivrioᚗioᚋgoᚋentᚐInventoryItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_mustInventory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InventoryItem_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_InventoryItem_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_InventoryItem_externalID(ctx, field)
			case "code":
				return ec.fieldContext_InventoryItem_code(ctx, field)
			case "sku":
				return ec.fieldContext_InventoryItem_sku(ctx, field)
			case "tenant":
				return ec.fieldContext_InventoryItem_tenant(ctx, field)
			case "countryHarmonizedCode":
				return ec.fieldContext_InventoryItem_countryHarmonizedCode(ctx, field)
			case "countryOfOrigin":
				return ec.fieldContext_InventoryItem_countryOfOrigin(ctx, field)
			case "productVariant":
				return ec.fieldContext_InventoryItem_productVariant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InventoryItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_mustInventory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateInventory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateInventory(rctx, fc.Args["iventoryItemID"].(pulid.ID), fc.Args["input"].(ent.UpdateInventoryItemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.InventoryItem)
	fc.Result = res
	return ec.marshalNInventoryItem2ᚖdelivrioᚗioᚋgoᚋentᚐInventoryItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateInventory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InventoryItem_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_InventoryItem_tenantID(ctx, field)
			case "externalID":
				return ec.fieldContext_InventoryItem_externalID(ctx, field)
			case "code":
				return ec.fieldContext_InventoryItem_code(ctx, field)
			case "sku":
				return ec.fieldContext_InventoryItem_sku(ctx, field)
			case "tenant":
				return ec.fieldContext_InventoryItem_tenant(ctx, field)
			case "countryHarmonizedCode":
				return ec.fieldContext_InventoryItem_countryHarmonizedCode(ctx, field)
			case "countryOfOrigin":
				return ec.fieldContext_InventoryItem_countryOfOrigin(ctx, field)
			case "productVariant":
				return ec.fieldContext_InventoryItem_productVariant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InventoryItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateInventory_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProductTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createProductTags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateProductTags(rctx, fc.Args["input"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProductTag)
	fc.Result = res
	return ec.marshalOProductTag2ᚕᚖdelivrioᚗioᚋgoᚋentᚐProductTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createProductTags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductTag_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ProductTag_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_ProductTag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProductTag_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_ProductTag_tenant(ctx, field)
			case "products":
				return ec.fieldContext_ProductTag_products(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductTag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProductTags_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTag(rctx, fc.Args["id"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.ProductTag)
	fc.Result = res
	return ec.marshalOProductTag2ᚕᚖdelivrioᚗioᚋgoᚋentᚐProductTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductTag_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ProductTag_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_ProductTag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_ProductTag_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_ProductTag_tenant(ctx, field)
			case "products":
				return ec.fieldContext_ProductTag_products(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductTag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createReturnPortal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createReturnPortal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReturnPortal(rctx, fc.Args["name"].(string), fc.Args["connection"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(pulid.ID)
	fc.Result = res
	return ec.marshalNID2delivrioᚗioᚋsharedᚑutilsᚋpulidᚐID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createReturnPortal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createReturnPortal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateReturnPortal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateReturnPortal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReturnPortal(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateReturnPortalInput), fc.Args["inputClaims"].([]*models.MutateReturnPortalClaim))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.ReturnPortal)
	fc.Result = res
	return ec.marshalNReturnPortal2ᚖdelivrioᚗioᚋgoᚋentᚐReturnPortal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateReturnPortal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ReturnPortal_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_ReturnPortal_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_ReturnPortal_name(ctx, field)
			case "returnOpenHours":
				return ec.fieldContext_ReturnPortal_returnOpenHours(ctx, field)
			case "automaticallyAccept":
				return ec.fieldContext_ReturnPortal_automaticallyAccept(ctx, field)
			case "tenant":
				return ec.fieldContext_ReturnPortal_tenant(ctx, field)
			case "returnPortalClaim":
				return ec.fieldContext_ReturnPortal_returnPortalClaim(ctx, field)
			case "returnLocation":
				return ec.fieldContext_ReturnPortal_returnLocation(ctx, field)
			case "deliveryOptions":
				return ec.fieldContext_ReturnPortal_deliveryOptions(ctx, field)
			case "connection":
				return ec.fieldContext_ReturnPortal_connection(ctx, field)
			case "emailConfirmationLabel":
				return ec.fieldContext_ReturnPortal_emailConfirmationLabel(ctx, field)
			case "emailConfirmationQrCode":
				return ec.fieldContext_ReturnPortal_emailConfirmationQrCode(ctx, field)
			case "emailReceived":
				return ec.fieldContext_ReturnPortal_emailReceived(ctx, field)
			case "emailAccepted":
				return ec.fieldContext_ReturnPortal_emailAccepted(ctx, field)
			case "returnColli":
				return ec.fieldContext_ReturnPortal_returnColli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReturnPortal", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateReturnPortal_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createReturnOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createReturnOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateReturnOrder(rctx, fc.Args["orderID"].(pulid.ID), fc.Args["portalID"].(pulid.ID), fc.Args["orderLines"].([]*models.MutateReturnItems))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]pulid.ID)
	fc.Result = res
	return ec.marshalNID2ᚕdelivrioᚗioᚋsharedᚑutilsᚋpulidᚐIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createReturnOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createReturnOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateReturnColliStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateReturnColliStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateReturnColliStatus(rctx, fc.Args["returnColliID"].(pulid.ID), fc.Args["status"].(returncolli.Status))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ReturnColliEdit)
	fc.Result = res
	return ec.marshalNReturnColliEdit2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐReturnColliEdit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateReturnColliStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "collis":
				return ec.fieldContext_ReturnColliEdit_collis(ctx, field)
			case "order":
				return ec.fieldContext_ReturnColliEdit_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReturnColliEdit", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateReturnColliStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markColliDeleted(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_markColliDeleted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MarkColliDeleted(rctx, fc.Args["returnColliID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_markColliDeleted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markColliDeleted_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelShipment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelShipment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelShipment(rctx, fc.Args["shipmentID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ent.Shipment)
	fc.Result = res
	return ec.marshalNShipment2ᚖdelivrioᚗioᚋgoᚋentᚐShipment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelShipment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Shipment_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Shipment_tenantID(ctx, field)
			case "shipmentPublicID":
				return ec.fieldContext_Shipment_shipmentPublicID(ctx, field)
			case "createdAt":
				return ec.fieldContext_Shipment_createdAt(ctx, field)
			case "status":
				return ec.fieldContext_Shipment_status(ctx, field)
			case "tenant":
				return ec.fieldContext_Shipment_tenant(ctx, field)
			case "carrier":
				return ec.fieldContext_Shipment_carrier(ctx, field)
			case "shipmentHistory":
				return ec.fieldContext_Shipment_shipmentHistory(ctx, field)
			case "shipmentBring":
				return ec.fieldContext_Shipment_shipmentBring(ctx, field)
			case "shipmentDAO":
				return ec.fieldContext_Shipment_shipmentDAO(ctx, field)
			case "shipmentDF":
				return ec.fieldContext_Shipment_shipmentDF(ctx, field)
			case "shipmentDSV":
				return ec.fieldContext_Shipment_shipmentDSV(ctx, field)
			case "shipmentEasyPost":
				return ec.fieldContext_Shipment_shipmentEasyPost(ctx, field)
			case "shipmentPostNord":
				return ec.fieldContext_Shipment_shipmentPostNord(ctx, field)
			case "shipmentGLS":
				return ec.fieldContext_Shipment_shipmentGLS(ctx, field)
			case "shipmentUSPS":
				return ec.fieldContext_Shipment_shipmentUSPS(ctx, field)
			case "consolidation":
				return ec.fieldContext_Shipment_consolidation(ctx, field)
			case "oldConsolidation":
				return ec.fieldContext_Shipment_oldConsolidation(ctx, field)
			case "shipmentParcel":
				return ec.fieldContext_Shipment_shipmentParcel(ctx, field)
			case "shipmentPallet":
				return ec.fieldContext_Shipment_shipmentPallet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Shipment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelShipment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelShipmentByColliIDs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelShipmentByColliIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelShipmentByColliIDs(rctx, fc.Args["colliIDs"].([]pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelShipmentByColliIDs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelShipmentByColliIDs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_debugUpdateLabelIDs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_debugUpdateLabelIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DebugUpdateLabelIDs(rctx, fc.Args["parcelID"].(pulid.ID), fc.Args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_debugUpdateLabelIDs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_debugUpdateLabelIDs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelFulfillmentSync(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelFulfillmentSync(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelFulfillmentSync(rctx, fc.Args["shipmentParcelID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelFulfillmentSync(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelFulfillmentSync_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cancelCancelSync(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cancelCancelSync(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelCancelSync(rctx, fc.Args["shipmentParcelID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cancelCancelSync(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_cancelCancelSync_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, fc.Args["input"].(ent.UpdateUserInput), fc.Args["newTenantID"].(*pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖdelivrioᚗioᚋgoᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_User_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "surname":
				return ec.fieldContext_User_surname(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_User_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "isAccountOwner":
				return ec.fieldContext_User_isAccountOwner(ctx, field)
			case "isGlobalAdmin":
				return ec.fieldContext_User_isGlobalAdmin(ctx, field)
			case "marketingConsent":
				return ec.fieldContext_User_marketingConsent(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "archivedAt":
				return ec.fieldContext_User_archivedAt(ctx, field)
			case "pickupDay":
				return ec.fieldContext_User_pickupDay(ctx, field)
			case "pickupDayLastChanged":
				return ec.fieldContext_User_pickupDayLastChanged(ctx, field)
			case "tenant":
				return ec.fieldContext_User_tenant(ctx, field)
			case "otkRequests":
				return ec.fieldContext_User_otkRequests(ctx, field)
			case "signupOptions":
				return ec.fieldContext_User_signupOptions(ctx, field)
			case "language":
				return ec.fieldContext_User_language(ctx, field)
			case "changeHistory":
				return ec.fieldContext_User_changeHistory(ctx, field)
			case "planHistoryUser":
				return ec.fieldContext_User_planHistoryUser(ctx, field)
			case "apiToken":
				return ec.fieldContext_User_apiToken(ctx, field)
			case "selectedWorkstation":
				return ec.fieldContext_User_selectedWorkstation(ctx, field)
			case "seatGroup":
				return ec.fieldContext_User_seatGroup(ctx, field)
			case "workspaceRecentScan":
				return ec.fieldContext_User_workspaceRecentScan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCompanyInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCompanyInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCompanyInfo(rctx, fc.Args["input"].(ent.UpdateTenantInput), fc.Args["defaultLanguage"].(pulid.ID), fc.Args["adminContact"].(ent.CreateContactInput), fc.Args["billingContact"].(ent.CreateContactInput), fc.Args["address"].(ent.CreateAddressInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Tenant)
	fc.Result = res
	return ec.marshalOTenant2ᚖdelivrioᚗioᚋgoᚋentᚐTenant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCompanyInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "name":
				return ec.fieldContext_Tenant_name(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Tenant_vatNumber(ctx, field)
			case "invoiceReference":
				return ec.fieldContext_Tenant_invoiceReference(ctx, field)
			case "connectOptionCarriers":
				return ec.fieldContext_Tenant_connectOptionCarriers(ctx, field)
			case "connectOptionPlatforms":
				return ec.fieldContext_Tenant_connectOptionPlatforms(ctx, field)
			case "plan":
				return ec.fieldContext_Tenant_plan(ctx, field)
			case "companyAddress":
				return ec.fieldContext_Tenant_companyAddress(ctx, field)
			case "defaultLanguage":
				return ec.fieldContext_Tenant_defaultLanguage(ctx, field)
			case "billingContact":
				return ec.fieldContext_Tenant_billingContact(ctx, field)
			case "adminContact":
				return ec.fieldContext_Tenant_adminContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCompanyInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePlan(rctx, fc.Args["planID"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Tenant)
	fc.Result = res
	return ec.marshalOTenant2ᚖdelivrioᚗioᚋgoᚋentᚐTenant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "name":
				return ec.fieldContext_Tenant_name(ctx, field)
			case "vatNumber":
				return ec.fieldContext_Tenant_vatNumber(ctx, field)
			case "invoiceReference":
				return ec.fieldContext_Tenant_invoiceReference(ctx, field)
			case "connectOptionCarriers":
				return ec.fieldContext_Tenant_connectOptionCarriers(ctx, field)
			case "connectOptionPlatforms":
				return ec.fieldContext_Tenant_connectOptionPlatforms(ctx, field)
			case "plan":
				return ec.fieldContext_Tenant_plan(ctx, field)
			case "companyAddress":
				return ec.fieldContext_Tenant_companyAddress(ctx, field)
			case "defaultLanguage":
				return ec.fieldContext_Tenant_defaultLanguage(ctx, field)
			case "billingContact":
				return ec.fieldContext_Tenant_billingContact(ctx, field)
			case "adminContact":
				return ec.fieldContext_Tenant_adminContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUserSeat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUserSeat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUserSeat(rctx, fc.Args["input"].(ent.CreateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖdelivrioᚗioᚋgoᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUserSeat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_User_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "surname":
				return ec.fieldContext_User_surname(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_User_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "isAccountOwner":
				return ec.fieldContext_User_isAccountOwner(ctx, field)
			case "isGlobalAdmin":
				return ec.fieldContext_User_isGlobalAdmin(ctx, field)
			case "marketingConsent":
				return ec.fieldContext_User_marketingConsent(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "archivedAt":
				return ec.fieldContext_User_archivedAt(ctx, field)
			case "pickupDay":
				return ec.fieldContext_User_pickupDay(ctx, field)
			case "pickupDayLastChanged":
				return ec.fieldContext_User_pickupDayLastChanged(ctx, field)
			case "tenant":
				return ec.fieldContext_User_tenant(ctx, field)
			case "otkRequests":
				return ec.fieldContext_User_otkRequests(ctx, field)
			case "signupOptions":
				return ec.fieldContext_User_signupOptions(ctx, field)
			case "language":
				return ec.fieldContext_User_language(ctx, field)
			case "changeHistory":
				return ec.fieldContext_User_changeHistory(ctx, field)
			case "planHistoryUser":
				return ec.fieldContext_User_planHistoryUser(ctx, field)
			case "apiToken":
				return ec.fieldContext_User_apiToken(ctx, field)
			case "selectedWorkstation":
				return ec.fieldContext_User_selectedWorkstation(ctx, field)
			case "seatGroup":
				return ec.fieldContext_User_seatGroup(ctx, field)
			case "workspaceRecentScan":
				return ec.fieldContext_User_workspaceRecentScan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUserSeat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserSeat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserSeat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserSeat(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖdelivrioᚗioᚋgoᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserSeat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_User_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "surname":
				return ec.fieldContext_User_surname(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_User_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "isAccountOwner":
				return ec.fieldContext_User_isAccountOwner(ctx, field)
			case "isGlobalAdmin":
				return ec.fieldContext_User_isGlobalAdmin(ctx, field)
			case "marketingConsent":
				return ec.fieldContext_User_marketingConsent(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "archivedAt":
				return ec.fieldContext_User_archivedAt(ctx, field)
			case "pickupDay":
				return ec.fieldContext_User_pickupDay(ctx, field)
			case "pickupDayLastChanged":
				return ec.fieldContext_User_pickupDayLastChanged(ctx, field)
			case "tenant":
				return ec.fieldContext_User_tenant(ctx, field)
			case "otkRequests":
				return ec.fieldContext_User_otkRequests(ctx, field)
			case "signupOptions":
				return ec.fieldContext_User_signupOptions(ctx, field)
			case "language":
				return ec.fieldContext_User_language(ctx, field)
			case "changeHistory":
				return ec.fieldContext_User_changeHistory(ctx, field)
			case "planHistoryUser":
				return ec.fieldContext_User_planHistoryUser(ctx, field)
			case "apiToken":
				return ec.fieldContext_User_apiToken(ctx, field)
			case "selectedWorkstation":
				return ec.fieldContext_User_selectedWorkstation(ctx, field)
			case "seatGroup":
				return ec.fieldContext_User_seatGroup(ctx, field)
			case "workspaceRecentScan":
				return ec.fieldContext_User_workspaceRecentScan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserSeat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateUserPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPassword(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖdelivrioᚗioᚋgoᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateUserPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_User_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "surname":
				return ec.fieldContext_User_surname(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_User_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "isAccountOwner":
				return ec.fieldContext_User_isAccountOwner(ctx, field)
			case "isGlobalAdmin":
				return ec.fieldContext_User_isGlobalAdmin(ctx, field)
			case "marketingConsent":
				return ec.fieldContext_User_marketingConsent(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "archivedAt":
				return ec.fieldContext_User_archivedAt(ctx, field)
			case "pickupDay":
				return ec.fieldContext_User_pickupDay(ctx, field)
			case "pickupDayLastChanged":
				return ec.fieldContext_User_pickupDayLastChanged(ctx, field)
			case "tenant":
				return ec.fieldContext_User_tenant(ctx, field)
			case "otkRequests":
				return ec.fieldContext_User_otkRequests(ctx, field)
			case "signupOptions":
				return ec.fieldContext_User_signupOptions(ctx, field)
			case "language":
				return ec.fieldContext_User_language(ctx, field)
			case "changeHistory":
				return ec.fieldContext_User_changeHistory(ctx, field)
			case "planHistoryUser":
				return ec.fieldContext_User_planHistoryUser(ctx, field)
			case "apiToken":
				return ec.fieldContext_User_apiToken(ctx, field)
			case "selectedWorkstation":
				return ec.fieldContext_User_selectedWorkstation(ctx, field)
			case "seatGroup":
				return ec.fieldContext_User_seatGroup(ctx, field)
			case "workspaceRecentScan":
				return ec.fieldContext_User_workspaceRecentScan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSeatGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSeatGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSeatGroup(rctx, fc.Args["input"].(ent.CreateSeatGroupInput), fc.Args["accessRights"].([]*ent.CreateSeatGroupAccessRightInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.SeatGroup)
	fc.Result = res
	return ec.marshalOSeatGroup2ᚖdelivrioᚗioᚋgoᚋentᚐSeatGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSeatGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SeatGroup_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_SeatGroup_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_SeatGroup_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_SeatGroup_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_SeatGroup_tenant(ctx, field)
			case "user":
				return ec.fieldContext_SeatGroup_user(ctx, field)
			case "assignedAccessRight":
				return ec.fieldContext_SeatGroup_assignedAccessRight(ctx, field)
			case "seatGroupAccessRight":
				return ec.fieldContext_SeatGroup_seatGroupAccessRight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SeatGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSeatGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceSeatGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceSeatGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceSeatGroup(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateSeatGroupInput), fc.Args["accessRights"].([]*ent.CreateSeatGroupAccessRightInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.SeatGroup)
	fc.Result = res
	return ec.marshalOSeatGroup2ᚖdelivrioᚗioᚋgoᚋentᚐSeatGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceSeatGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SeatGroup_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_SeatGroup_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_SeatGroup_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_SeatGroup_createdAt(ctx, field)
			case "tenant":
				return ec.fieldContext_SeatGroup_tenant(ctx, field)
			case "user":
				return ec.fieldContext_SeatGroup_user(ctx, field)
			case "assignedAccessRight":
				return ec.fieldContext_SeatGroup_assignedAccessRight(ctx, field)
			case "seatGroupAccessRight":
				return ec.fieldContext_SeatGroup_seatGroupAccessRight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SeatGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceSeatGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceSignupOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceSignupOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceSignupOptions(rctx, fc.Args["userID"].(pulid.ID), fc.Args["input"].(ent.CreateSignupOptionsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.SignupOptions)
	fc.Result = res
	return ec.marshalOSignupOptions2ᚖdelivrioᚗioᚋgoᚋentᚐSignupOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceSignupOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SignupOptions_id(ctx, field)
			case "betterDeliveryOptions":
				return ec.fieldContext_SignupOptions_betterDeliveryOptions(ctx, field)
			case "improvePickPack":
				return ec.fieldContext_SignupOptions_improvePickPack(ctx, field)
			case "shippingLabel":
				return ec.fieldContext_SignupOptions_shippingLabel(ctx, field)
			case "customDocs":
				return ec.fieldContext_SignupOptions_customDocs(ctx, field)
			case "reducedCosts":
				return ec.fieldContext_SignupOptions_reducedCosts(ctx, field)
			case "easyReturns":
				return ec.fieldContext_SignupOptions_easyReturns(ctx, field)
			case "clickCollect":
				return ec.fieldContext_SignupOptions_clickCollect(ctx, field)
			case "numShipments":
				return ec.fieldContext_SignupOptions_numShipments(ctx, field)
			case "users":
				return ec.fieldContext_SignupOptions_users(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SignupOptions", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceSignupOptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_replaceInterestedCarriersPlatforms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_replaceInterestedCarriersPlatforms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReplaceInterestedCarriersPlatforms(rctx, fc.Args["userID"].(pulid.ID), fc.Args["inputCarriers"].([]pulid.ID), fc.Args["inputPlatforms"].([]pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.User)
	fc.Result = res
	return ec.marshalOUser2ᚖdelivrioᚗioᚋgoᚋentᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_replaceInterestedCarriersPlatforms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_User_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "surname":
				return ec.fieldContext_User_surname(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_User_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "isAccountOwner":
				return ec.fieldContext_User_isAccountOwner(ctx, field)
			case "isGlobalAdmin":
				return ec.fieldContext_User_isGlobalAdmin(ctx, field)
			case "marketingConsent":
				return ec.fieldContext_User_marketingConsent(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "archivedAt":
				return ec.fieldContext_User_archivedAt(ctx, field)
			case "pickupDay":
				return ec.fieldContext_User_pickupDay(ctx, field)
			case "pickupDayLastChanged":
				return ec.fieldContext_User_pickupDayLastChanged(ctx, field)
			case "tenant":
				return ec.fieldContext_User_tenant(ctx, field)
			case "otkRequests":
				return ec.fieldContext_User_otkRequests(ctx, field)
			case "signupOptions":
				return ec.fieldContext_User_signupOptions(ctx, field)
			case "language":
				return ec.fieldContext_User_language(ctx, field)
			case "changeHistory":
				return ec.fieldContext_User_changeHistory(ctx, field)
			case "planHistoryUser":
				return ec.fieldContext_User_planHistoryUser(ctx, field)
			case "apiToken":
				return ec.fieldContext_User_apiToken(ctx, field)
			case "selectedWorkstation":
				return ec.fieldContext_User_selectedWorkstation(ctx, field)
			case "seatGroup":
				return ec.fieldContext_User_seatGroup(ctx, field)
			case "workspaceRecentScan":
				return ec.fieldContext_User_workspaceRecentScan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_replaceInterestedCarriersPlatforms_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createWorkstation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createWorkstation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWorkstation(rctx, fc.Args["input"].(ent.CreateWorkstationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateWorkstationSuccess)
	fc.Result = res
	return ec.marshalOCreateWorkstationSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateWorkstationSuccess(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createWorkstation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreateWorkstationSuccess_id(ctx, field)
			case "registrationToken":
				return ec.fieldContext_CreateWorkstationSuccess_registrationToken(ctx, field)
			case "registrationTokenImg":
				return ec.fieldContext_CreateWorkstationSuccess_registrationTokenImg(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateWorkstationSuccess", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createWorkstation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateWorkstation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateWorkstation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateWorkstation(rctx, fc.Args["id"].(pulid.ID), fc.Args["input"].(ent.UpdateWorkstationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Workstation)
	fc.Result = res
	return ec.marshalOWorkstation2ᚖdelivrioᚗioᚋgoᚋentᚐWorkstation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateWorkstation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Workstation_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Workstation_tenantID(ctx, field)
			case "archivedAt":
				return ec.fieldContext_Workstation_archivedAt(ctx, field)
			case "name":
				return ec.fieldContext_Workstation_name(ctx, field)
			case "deviceType":
				return ec.fieldContext_Workstation_deviceType(ctx, field)
			case "workstationID":
				return ec.fieldContext_Workstation_workstationID(ctx, field)
			case "createdAt":
				return ec.fieldContext_Workstation_createdAt(ctx, field)
			case "lastPing":
				return ec.fieldContext_Workstation_lastPing(ctx, field)
			case "status":
				return ec.fieldContext_Workstation_status(ctx, field)
			case "autoPrintReceiver":
				return ec.fieldContext_Workstation_autoPrintReceiver(ctx, field)
			case "tenant":
				return ec.fieldContext_Workstation_tenant(ctx, field)
			case "printer":
				return ec.fieldContext_Workstation_printer(ctx, field)
			case "user":
				return ec.fieldContext_Workstation_user(ctx, field)
			case "selectedUser":
				return ec.fieldContext_Workstation_selectedUser(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Workstation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateWorkstation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_saveSelectedWorkstation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_saveSelectedWorkstation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveSelectedWorkstation(rctx, fc.Args["id"].(pulid.ID), fc.Args["pickupDay"].(user.PickupDay))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_saveSelectedWorkstation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_saveSelectedWorkstation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_archiveWorkstation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_archiveWorkstation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchiveWorkstation(rctx, fc.Args["id"].(pulid.ID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_archiveWorkstation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_archiveWorkstation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createAPITokenSuccessImplementors = []string{"CreateAPITokenSuccess"}

func (ec *executionContext) _CreateAPITokenSuccess(ctx context.Context, sel ast.SelectionSet, obj *models.CreateAPITokenSuccess) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createAPITokenSuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateAPITokenSuccess")
		case "id":
			out.Values[i] = ec._CreateAPITokenSuccess_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "token":
			out.Values[i] = ec._CreateAPITokenSuccess_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAPIToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAPIToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateAPIToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAPIToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAPIToken":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAPIToken(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCarrierAgreement":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCarrierAgreement(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementBring":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementBring(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementDAO":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementDAO(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementDF":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementDF(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementDSV":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementDSV(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementEasyPost":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementEasyPost(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementGLS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementGLS(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementPostNord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementPostNord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCarrierAgreementUSPS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCarrierAgreementUSPS(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createShopifyConnection":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createShopifyConnection(ctx, field)
			})
		case "updateShopifyConnection":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateShopifyConnection(ctx, field)
			})
		case "createConsolidation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createConsolidation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateConsolidation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateConsolidation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDeliveryOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeliveryOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionBring":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionBring(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionDAO":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionDAO(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionDF":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionDF(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionDSV":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionDSV(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionEasyPost":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionEasyPost(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionGLS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionGLS(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionPostNord":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionPostNord(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionUSPS":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionUSPS(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDeliveryRule":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeliveryRule(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryRule":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryRule(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDeliveryRuleConstraintGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeliveryRuleConstraintGroup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDeliveryRuleConstraintGroupConstraints":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeliveryRuleConstraintGroupConstraints(ctx, field)
			})
		case "replaceDeliveryRuleConstraintGroupConstraints":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceDeliveryRuleConstraintGroupConstraints(ctx, field)
			})
		case "deleteDeliveryRule":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeliveryRule(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDeliveryRuleConstraintGroupConstraints":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeliveryRuleConstraintGroupConstraints(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "replaceDeliveryRuleCountries":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceDeliveryRuleCountries(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDeliveryOptionSortOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeliveryOptionSortOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryOptionArchive":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deliveryOptionArchive(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDocument(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createEmailTemplates":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEmailTemplates(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateEmailTemplate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateEmailTemplate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createHypothesisTestDeliveryOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createHypothesisTestDeliveryOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateHypothesisTestDeliveryOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateHypothesisTestDeliveryOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createLocation(ctx, field)
			})
		case "updateLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLocation(ctx, field)
			})
		case "createNotification":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createNotification(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "toggleNotification":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_toggleNotification(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "duplicateColli":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_duplicateColli(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteColli":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteColli(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "moveOrderLine":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_moveOrderLine(ctx, field)
			})
		case "createColli":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createColli(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateColli":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateColli(ctx, field)
			})
		case "createEmptyOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEmptyOrder(ctx, field)
			})
		case "updateOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrder(ctx, field)
			})
		case "bulkUpdatePackaging":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bulkUpdatePackaging(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPackaging":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPackaging(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePackaging":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePackaging(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "archivePackaging":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_archivePackaging(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProduct(ctx, field)
			})
		case "updateProduct":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProduct(ctx, field)
			})
		case "uploadProductImage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadProductImage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProductImage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProductImage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "archiveProductVariant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_archiveProductVariant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createVariant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createVariant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mustInventory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_mustInventory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateInventory":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateInventory(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProductTags":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProductTags(ctx, field)
			})
		case "deleteTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTag(ctx, field)
			})
		case "createReturnPortal":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createReturnPortal(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateReturnPortal":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateReturnPortal(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createReturnOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createReturnOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateReturnColliStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateReturnColliStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markColliDeleted":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markColliDeleted(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cancelShipment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelShipment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cancelShipmentByColliIDs":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelShipmentByColliIDs(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "debugUpdateLabelIDs":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_debugUpdateLabelIDs(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cancelFulfillmentSync":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelFulfillmentSync(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cancelCancelSync":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cancelCancelSync(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
		case "updateCompanyInfo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCompanyInfo(ctx, field)
			})
		case "updatePlan":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlan(ctx, field)
			})
		case "createUserSeat":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUserSeat(ctx, field)
			})
		case "updateUserSeat":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserSeat(ctx, field)
			})
		case "updateUserPassword":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserPassword(ctx, field)
			})
		case "createSeatGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSeatGroup(ctx, field)
			})
		case "replaceSeatGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceSeatGroup(ctx, field)
			})
		case "replaceSignupOptions":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceSignupOptions(ctx, field)
			})
		case "replaceInterestedCarriersPlatforms":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_replaceInterestedCarriersPlatforms(ctx, field)
			})
		case "createWorkstation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createWorkstation(ctx, field)
			})
		case "updateWorkstation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateWorkstation(ctx, field)
			})
		case "saveSelectedWorkstation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_saveSelectedWorkstation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "archiveWorkstation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_archiveWorkstation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCreateAPITokenSuccess2delivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateAPITokenSuccess(ctx context.Context, sel ast.SelectionSet, v models.CreateAPITokenSuccess) graphql.Marshaler {
	return ec._CreateAPITokenSuccess(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateAPITokenSuccess2ᚖdelivrioᚗioᚋgoᚋgengqlᚋgeneratedᚋmodelsᚐCreateAPITokenSuccess(ctx context.Context, sel ast.SelectionSet, v *models.CreateAPITokenSuccess) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreateAPITokenSuccess(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
