package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/gengql/generated"
	"delivrio.io/go/schema/mixins"
	pulid_server_prefix "delivrio.io/go/schema/pulid-server-prefix"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
)

// RequestCount is the resolver for the requestCount field.
func (r *hypothesisTestDeliveryOptionRequestResolver) RequestCount(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequest) (int, error) {
	panic(fmt.Errorf("not implemented: RequestCount - requestCount"))
}

// DeviceID is the resolver for the deviceID field.
func (r *printerResolver) DeviceID(ctx context.Context, obj *ent.Printer) (string, error) {
	panic(fmt.Errorf("not implemented: DeviceID - deviceID"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id pulid.ID) (ent.Noder, error) {
	t, err := pulid_server_prefix.IDToType(ctx, id)
	if err != nil {
		return nil, err
	}
	return r.client.Noder(ctx, id, ent.WithFixedNodeType(t))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []pulid.ID) ([]ent.Noder, error) {
	nodes := make([]ent.Noder, 0)
	for _, id := range ids {
		t, err := pulid_server_prefix.IDToType(ctx, id)
		if err != nil {
			return nil, err
		}
		n, err := r.client.Noder(ctx, id, ent.WithFixedNodeType(t))
		if err != nil {
			return nil, err
		}
		nodes = append(nodes, n)
	}

	return nodes, nil
}

// APITokens is the resolver for the apiTokens field.
func (r *queryResolver) APITokens(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.APITokenWhereInput) (*ent.APITokenConnection, error) {
	panic(fmt.Errorf("not implemented: APITokens - apiTokens"))
}

// AccessRights is the resolver for the accessRights field.
func (r *queryResolver) AccessRights(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.AccessRightWhereInput) (*ent.AccessRightConnection, error) {
	return r.client.AccessRight.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithAccessRightFilter(where.Filter),
		)
}

// Addresses is the resolver for the addresses field.
func (r *queryResolver) Addresses(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.AddressWhereInput) (*ent.AddressConnection, error) {
	return r.client.Address.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithAddressFilter(where.Filter),
		)
}

// AddressGlobals is the resolver for the addressGlobals field.
func (r *queryResolver) AddressGlobals(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.AddressGlobalWhereInput) (*ent.AddressGlobalConnection, error) {
	panic(fmt.Errorf("not implemented: AddressGlobals - addressGlobals"))
}

// BusinessHoursPeriods is the resolver for the businessHoursPeriods field.
func (r *queryResolver) BusinessHoursPeriods(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.BusinessHoursPeriodWhereInput) (*ent.BusinessHoursPeriodConnection, error) {
	panic(fmt.Errorf("not implemented: BusinessHoursPeriods - businessHoursPeriods"))
}

// Carriers is the resolver for the carriers field.
func (r *queryResolver) Carriers(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierWhereInput) (*ent.CarrierConnection, error) {
	return r.client.Carrier.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierFilter(where.Filter),
		)
}

// CarrierAdditionalServiceBrings is the resolver for the carrierAdditionalServiceBrings field.
func (r *queryResolver) CarrierAdditionalServiceBrings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceBringWhereInput) (*ent.CarrierAdditionalServiceBringConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierAdditionalServiceBrings - carrierAdditionalServiceBrings"))
}

// CarrierAdditionalServiceDaOs is the resolver for the carrierAdditionalServiceDaOs field.
func (r *queryResolver) CarrierAdditionalServiceDaOs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceDAOWhereInput) (*ent.CarrierAdditionalServiceDAOConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierAdditionalServiceDaOs - carrierAdditionalServiceDaOs"))
}

// CarrierAdditionalServiceDfs is the resolver for the carrierAdditionalServiceDfs field.
func (r *queryResolver) CarrierAdditionalServiceDfs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceDFWhereInput) (*ent.CarrierAdditionalServiceDFConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierAdditionalServiceDfs - carrierAdditionalServiceDfs"))
}

// CarrierAdditionalServiceDsVs is the resolver for the carrierAdditionalServiceDsVs field.
func (r *queryResolver) CarrierAdditionalServiceDsVs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceDSVWhereInput) (*ent.CarrierAdditionalServiceDSVConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierAdditionalServiceDsVs - carrierAdditionalServiceDsVs"))
}

// CarrierAdditionalServiceEasyPosts is the resolver for the carrierAdditionalServiceEasyPosts field.
func (r *queryResolver) CarrierAdditionalServiceEasyPosts(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceEasyPostWhereInput) (*ent.CarrierAdditionalServiceEasyPostConnection, error) {
	return r.client.CarrierAdditionalServiceEasyPost.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierAdditionalServiceEasyPostFilter(where.Filter),
		)
}

// CarrierAdditionalServiceGlSs is the resolver for the carrierAdditionalServiceGlSs field.
func (r *queryResolver) CarrierAdditionalServiceGlSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceGLSWhereInput) (*ent.CarrierAdditionalServiceGLSConnection, error) {
	return r.client.CarrierAdditionalServiceGLS.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierAdditionalServiceGLSFilter(where.Filter),
		)
}

// CarrierAdditionalServicePostNords is the resolver for the carrierAdditionalServicePostNords field.
func (r *queryResolver) CarrierAdditionalServicePostNords(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServicePostNordWhereInput) (*ent.CarrierAdditionalServicePostNordConnection, error) {
	return r.client.CarrierAdditionalServicePostNord.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierAdditionalServicePostNordFilter(where.Filter),
		)
}

// CarrierAdditionalServiceUspSs is the resolver for the carrierAdditionalServiceUspSs field.
func (r *queryResolver) CarrierAdditionalServiceUspSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierAdditionalServiceUSPSWhereInput) (*ent.CarrierAdditionalServiceUSPSConnection, error) {
	return r.client.CarrierAdditionalServiceUSPS.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierAdditionalServiceUSPSFilter(where.Filter),
		)
}

// CarrierBrands is the resolver for the carrierBrands field.
func (r *queryResolver) CarrierBrands(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierBrandWhereInput) (*ent.CarrierBrandConnection, error) {
	return r.client.CarrierBrand.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierBrandFilter(where.Filter),
		)
}

// CarrierBrings is the resolver for the carrierBrings field.
func (r *queryResolver) CarrierBrings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierBringWhereInput) (*ent.CarrierBringConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierBrings - carrierBrings"))
}

// CarrierDaOs is the resolver for the carrierDaOs field.
func (r *queryResolver) CarrierDaOs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierDAOWhereInput) (*ent.CarrierDAOConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierDaOs - carrierDaOs"))
}

// CarrierDfs is the resolver for the carrierDfs field.
func (r *queryResolver) CarrierDfs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierDFWhereInput) (*ent.CarrierDFConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierDfs - carrierDfs"))
}

// CarrierDsVs is the resolver for the carrierDsVs field.
func (r *queryResolver) CarrierDsVs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierDSVWhereInput) (*ent.CarrierDSVConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierDsVs - carrierDsVs"))
}

// CarrierEasyPosts is the resolver for the carrierEasyPosts field.
func (r *queryResolver) CarrierEasyPosts(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierEasyPostWhereInput) (*ent.CarrierEasyPostConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierEasyPosts - carrierEasyPosts"))
}

// CarrierGlSs is the resolver for the carrierGlSs field.
func (r *queryResolver) CarrierGlSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierGLSWhereInput) (*ent.CarrierGLSConnection, error) {
	return r.client.CarrierGLS.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierGLSFilter(where.Filter),
		)
}

// CarrierPostNords is the resolver for the carrierPostNords field.
func (r *queryResolver) CarrierPostNords(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierPostNordWhereInput) (*ent.CarrierPostNordConnection, error) {
	return r.client.CarrierPostNord.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierPostNordFilter(where.Filter),
		)
}

// CarrierServices is the resolver for the carrierServices field.
func (r *queryResolver) CarrierServices(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceWhereInput) (*ent.CarrierServiceConnection, error) {
	return r.client.CarrierService.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCarrierServiceFilter(where.Filter),
		)
}

// CarrierServiceBrings is the resolver for the carrierServiceBrings field.
func (r *queryResolver) CarrierServiceBrings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceBringWhereInput) (*ent.CarrierServiceBringConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierServiceBrings - carrierServiceBrings"))
}

// CarrierServiceDaOs is the resolver for the carrierServiceDaOs field.
func (r *queryResolver) CarrierServiceDaOs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceDAOWhereInput) (*ent.CarrierServiceDAOConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierServiceDaOs - carrierServiceDaOs"))
}

// CarrierServiceDfs is the resolver for the carrierServiceDfs field.
func (r *queryResolver) CarrierServiceDfs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceDFWhereInput) (*ent.CarrierServiceDFConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierServiceDfs - carrierServiceDfs"))
}

// CarrierServiceDsVs is the resolver for the carrierServiceDsVs field.
func (r *queryResolver) CarrierServiceDsVs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierServiceDSVWhereInput) (*ent.CarrierServiceDSVConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierServiceDsVs - carrierServiceDsVs"))
}

// CarrierServiceEasyPosts is the resolver for the carrierServiceEasyPosts field.
func (r *queryResolver) CarrierServiceEasyPosts(ctx context.Context) ([]*ent.CarrierServiceEasyPost, error) {
	panic(fmt.Errorf("not implemented: CarrierServiceEasyPosts - carrierServiceEasyPosts"))
}

// CarrierServiceGlSs is the resolver for the carrierServiceGlSs field.
func (r *queryResolver) CarrierServiceGlSs(ctx context.Context) ([]*ent.CarrierServiceGLS, error) {
	panic(fmt.Errorf("not implemented: CarrierServiceGlSs - carrierServiceGlSs"))
}

// CarrierServicePostNords is the resolver for the carrierServicePostNords field.
func (r *queryResolver) CarrierServicePostNords(ctx context.Context) ([]*ent.CarrierServicePostNord, error) {
	return r.client.CarrierServicePostNord.Query().
		All(ctx)
}

// CarrierUspSs is the resolver for the carrierUspSs field.
func (r *queryResolver) CarrierUspSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CarrierUSPSWhereInput) (*ent.CarrierUSPSConnection, error) {
	panic(fmt.Errorf("not implemented: CarrierUspSs - carrierUspSs"))
}

// ChangeHistories is the resolver for the changeHistories field.
func (r *queryResolver) ChangeHistories(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ChangeHistoryOrder, where *ent.ChangeHistoryWhereInput) (*ent.ChangeHistoryConnection, error) {
	return r.client.ChangeHistory.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithChangeHistoryFilter(where.Filter),
		)
}

// Collis is the resolver for the collis field.
func (r *queryResolver) Collis(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ColliWhereInput) (*ent.ColliConnection, error) {
	return r.client.Colli.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithColliFilter(where.Filter),
		)
}

// ConnectOptionCarriers is the resolver for the connectOptionCarriers field.
func (r *queryResolver) ConnectOptionCarriers(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectOptionCarrierWhereInput) (*ent.ConnectOptionCarrierConnection, error) {
	return r.client.ConnectOptionCarrier.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithConnectOptionCarrierFilter(where.Filter),
		)
}

// ConnectOptionPlatforms is the resolver for the connectOptionPlatforms field.
func (r *queryResolver) ConnectOptionPlatforms(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectOptionPlatformWhereInput) (*ent.ConnectOptionPlatformConnection, error) {
	return r.client.ConnectOptionPlatform.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithConnectOptionPlatformFilter(where.Filter),
		)
}

// Connections is the resolver for the connections field.
func (r *queryResolver) Connections(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectionWhereInput) (*ent.ConnectionConnection, error) {
	return r.client.Connection.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithConnectionFilter(where.Filter),
		)
}

// ConnectionBrands is the resolver for the connectionBrands field.
func (r *queryResolver) ConnectionBrands(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectionBrandWhereInput) (*ent.ConnectionBrandConnection, error) {
	return r.client.ConnectionBrand.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithConnectionBrandFilter(where.Filter),
		)
}

// ConnectionLookups is the resolver for the connectionLookups field.
func (r *queryResolver) ConnectionLookups(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ConnectionLookupOrder, where *ent.ConnectionLookupWhereInput) (*ent.ConnectionLookupConnection, error) {
	panic(fmt.Errorf("not implemented: ConnectionLookups - connectionLookups"))
}

// ConnectionShopifies is the resolver for the connectionShopifies field.
func (r *queryResolver) ConnectionShopifies(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ConnectionShopifyWhereInput) (*ent.ConnectionShopifyConnection, error) {
	return r.client.ConnectionShopify.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithConnectionShopifyFilter(where.Filter),
		)
}

// Consolidations is the resolver for the consolidations field.
func (r *queryResolver) Consolidations(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ConsolidationOrder, where *ent.ConsolidationWhereInput) (*ent.ConsolidationConnection, error) {
	return r.client.Consolidation.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithConsolidationFilter(where.Filter),
		)
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ContactWhereInput) (*ent.ContactConnection, error) {
	return r.client.Contact.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithContactFilter(where.Filter),
		)
}

// Countries is the resolver for the countries field.
func (r *queryResolver) Countries(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CountryWhereInput) (*ent.CountryConnection, error) {
	return r.client.Country.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCountryFilter(where.Filter),
		)
}

// CountryHarmonizedCodes is the resolver for the countryHarmonizedCodes field.
func (r *queryResolver) CountryHarmonizedCodes(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CountryHarmonizedCodeWhereInput) (*ent.CountryHarmonizedCodeConnection, error) {
	panic(fmt.Errorf("not implemented: CountryHarmonizedCodes - countryHarmonizedCodes"))
}

// Currencies is the resolver for the currencies field.
func (r *queryResolver) Currencies(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.CurrencyWhereInput) (*ent.CurrencyConnection, error) {
	return r.client.Currency.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithCurrencyFilter(where.Filter),
		)
}

// DeliveryOptions is the resolver for the deliveryOptions field.
func (r *queryResolver) DeliveryOptions(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionWhereInput) (*ent.DeliveryOptionConnection, error) {
	return r.client.DeliveryOption.Query().
		Order(deliveryoption.BySortOrder(sql.OrderAsc())).
		Paginate(ctx, after, first, before, last,
			ent.WithDeliveryOptionFilter(where.Filter),
		)
}

// DeliveryOptionBrings is the resolver for the deliveryOptionBrings field.
func (r *queryResolver) DeliveryOptionBrings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionBringWhereInput) (*ent.DeliveryOptionBringConnection, error) {
	panic(fmt.Errorf("not implemented: DeliveryOptionBrings - deliveryOptionBrings"))
}

// DeliveryOptionDaOs is the resolver for the deliveryOptionDaOs field.
func (r *queryResolver) DeliveryOptionDaOs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionDAOWhereInput) (*ent.DeliveryOptionDAOConnection, error) {
	panic(fmt.Errorf("not implemented: DeliveryOptionDaOs - deliveryOptionDaOs"))
}

// DeliveryOptionDfs is the resolver for the deliveryOptionDfs field.
func (r *queryResolver) DeliveryOptionDfs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionDFWhereInput) (*ent.DeliveryOptionDFConnection, error) {
	panic(fmt.Errorf("not implemented: DeliveryOptionDfs - deliveryOptionDfs"))
}

// DeliveryOptionDsVs is the resolver for the deliveryOptionDsVs field.
func (r *queryResolver) DeliveryOptionDsVs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionDSVWhereInput) (*ent.DeliveryOptionDSVConnection, error) {
	panic(fmt.Errorf("not implemented: DeliveryOptionDsVs - deliveryOptionDsVs"))
}

// DeliveryOptionEasyPosts is the resolver for the deliveryOptionEasyPosts field.
func (r *queryResolver) DeliveryOptionEasyPosts(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionEasyPostWhereInput) (*ent.DeliveryOptionEasyPostConnection, error) {
	panic(fmt.Errorf("not implemented: DeliveryOptionEasyPosts - deliveryOptionEasyPosts"))
}

// DeliveryOptionGlSs is the resolver for the deliveryOptionGlSs field.
func (r *queryResolver) DeliveryOptionGlSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionGLSWhereInput) (*ent.DeliveryOptionGLSConnection, error) {
	return r.client.DeliveryOptionGLS.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithDeliveryOptionGLSFilter(where.Filter),
		)
}

// DeliveryOptionPostNords is the resolver for the deliveryOptionPostNords field.
func (r *queryResolver) DeliveryOptionPostNords(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionPostNordWhereInput) (*ent.DeliveryOptionPostNordConnection, error) {
	return r.client.DeliveryOptionPostNord.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithDeliveryOptionPostNordFilter(where.Filter),
		)
}

// DeliveryOptionUspSs is the resolver for the deliveryOptionUspSs field.
func (r *queryResolver) DeliveryOptionUspSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryOptionUSPSWhereInput) (*ent.DeliveryOptionUSPSConnection, error) {
	panic(fmt.Errorf("not implemented: DeliveryOptionUspSs - deliveryOptionUspSs"))
}

// DeliveryRules is the resolver for the deliveryRules field.
func (r *queryResolver) DeliveryRules(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryRuleWhereInput) (*ent.DeliveryRuleConnection, error) {
	return r.client.DeliveryRule.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithDeliveryRuleFilter(where.Filter),
		)
}

// DeliveryRuleConstraints is the resolver for the deliveryRuleConstraints field.
func (r *queryResolver) DeliveryRuleConstraints(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryRuleConstraintWhereInput) (*ent.DeliveryRuleConstraintConnection, error) {
	return r.client.DeliveryRuleConstraint.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithDeliveryRuleConstraintFilter(where.Filter),
		)
}

// DeliveryRuleConstraintGroups is the resolver for the deliveryRuleConstraintGroups field.
func (r *queryResolver) DeliveryRuleConstraintGroups(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DeliveryRuleConstraintGroupWhereInput) (*ent.DeliveryRuleConstraintGroupConnection, error) {
	return r.client.DeliveryRuleConstraintGroup.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithDeliveryRuleConstraintGroupFilter(where.Filter),
		)
}

// Documents is the resolver for the documents field.
func (r *queryResolver) Documents(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DocumentWhereInput) (*ent.DocumentConnection, error) {
	return r.client.Document.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithDocumentFilter(where.Filter),
		)
}

// DocumentFiles is the resolver for the documentFiles field.
func (r *queryResolver) DocumentFiles(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.DocumentFileWhereInput) (*ent.DocumentFileConnection, error) {
	panic(fmt.Errorf("not implemented: DocumentFiles - documentFiles"))
}

// EmailTemplates is the resolver for the emailTemplates field.
func (r *queryResolver) EmailTemplates(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.EmailTemplateWhereInput) (*ent.EmailTemplateConnection, error) {
	return r.client.EmailTemplate.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithEmailTemplateFilter(where.Filter),
		)
}

// HypothesisTests is the resolver for the hypothesisTests field.
func (r *queryResolver) HypothesisTests(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestWhereInput) (*ent.HypothesisTestConnection, error) {
	return r.client.HypothesisTest.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithHypothesisTestFilter(where.Filter),
		)
}

// HypothesisTestDeliveryOptions is the resolver for the hypothesisTestDeliveryOptions field.
func (r *queryResolver) HypothesisTestDeliveryOptions(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestDeliveryOptionWhereInput) (*ent.HypothesisTestDeliveryOptionConnection, error) {
	return r.client.HypothesisTestDeliveryOption.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithHypothesisTestDeliveryOptionFilter(where.Filter),
		)
}

// HypothesisTestDeliveryOptionLookups is the resolver for the hypothesisTestDeliveryOptionLookups field.
func (r *queryResolver) HypothesisTestDeliveryOptionLookups(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestDeliveryOptionLookupWhereInput) (*ent.HypothesisTestDeliveryOptionLookupConnection, error) {
	panic(fmt.Errorf("not implemented: HypothesisTestDeliveryOptionLookups - hypothesisTestDeliveryOptionLookups"))
}

// HypothesisTestDeliveryOptionRequests is the resolver for the hypothesisTestDeliveryOptionRequests field.
func (r *queryResolver) HypothesisTestDeliveryOptionRequests(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.HypothesisTestDeliveryOptionRequestWhereInput) (*ent.HypothesisTestDeliveryOptionRequestConnection, error) {
	return r.client.HypothesisTestDeliveryOptionRequest.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithHypothesisTestDeliveryOptionRequestFilter(where.Filter),
		)
}

// InventoryItems is the resolver for the inventoryItems field.
func (r *queryResolver) InventoryItems(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.InventoryItemWhereInput) (*ent.InventoryItemConnection, error) {
	panic(fmt.Errorf("not implemented: InventoryItems - inventoryItems"))
}

// Languages is the resolver for the languages field.
func (r *queryResolver) Languages(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.LanguageWhereInput) (*ent.LanguageConnection, error) {
	return r.client.Language.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithLanguageFilter(where.Filter),
		)
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.LocationWhereInput) (*ent.LocationConnection, error) {
	return r.client.Location.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithLocationFilter(where.Filter),
		)
}

// LocationTags is the resolver for the locationTags field.
func (r *queryResolver) LocationTags(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.LocationTagWhereInput) (*ent.LocationTagConnection, error) {
	return r.client.LocationTag.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithLocationTagFilter(where.Filter),
		)
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.NotificationWhereInput) (*ent.NotificationConnection, error) {
	return r.client.Notification.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithNotificationFilter(where.Filter),
		)
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.OrderOrder, where *ent.OrderWhereInput) (*ent.OrderConnection, error) {
	return r.client.Order.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithOrderOrder(orderBy),
			ent.WithOrderFilter(where.Filter),
		)
}

// OrderSenders is the resolver for the orderSenders field.
func (r *queryResolver) OrderSenders(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.OrderSenderWhereInput) (*ent.OrderSenderConnection, error) {
	return r.client.OrderSender.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithOrderSenderFilter(where.Filter),
		)
}

// Packagings is the resolver for the packagings field.
func (r *queryResolver) Packagings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingWhereInput) (*ent.PackagingConnection, error) {
	return r.client.Packaging.Query().
		// Exclude archive from lists, but still allow it to be joined
		// when requested as part of another entity
		Paginate(mixins.ExcludeArchived(ctx), after, first, before, last,
			ent.WithPackagingFilter(where.Filter),
		)
}

// PackagingDfs is the resolver for the packagingDfs field.
func (r *queryResolver) PackagingDfs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingDFWhereInput) (*ent.PackagingDFConnection, error) {
	panic(fmt.Errorf("not implemented: PackagingDfs - packagingDfs"))
}

// PackagingUspSs is the resolver for the packagingUspSs field.
func (r *queryResolver) PackagingUspSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingUSPSWhereInput) (*ent.PackagingUSPSConnection, error) {
	panic(fmt.Errorf("not implemented: PackagingUspSs - packagingUspSs"))
}

// PackagingUSPSProcessingCategories is the resolver for the packagingUSPSProcessingCategories field.
func (r *queryResolver) PackagingUSPSProcessingCategories(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingUSPSProcessingCategoryWhereInput) (*ent.PackagingUSPSProcessingCategoryConnection, error) {
	return r.client.PackagingUSPSProcessingCategory.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithPackagingUSPSProcessingCategoryFilter(where.Filter),
		)
}

// PackagingUSPSRateIndicators is the resolver for the packagingUSPSRateIndicators field.
func (r *queryResolver) PackagingUSPSRateIndicators(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PackagingUSPSRateIndicatorWhereInput) (*ent.PackagingUSPSRateIndicatorConnection, error) {
	return r.client.PackagingUSPSRateIndicator.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithPackagingUSPSRateIndicatorFilter(where.Filter),
		)
}

// Pallets is the resolver for the pallets field.
func (r *queryResolver) Pallets(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PalletWhereInput) (*ent.PalletConnection, error) {
	panic(fmt.Errorf("not implemented: Pallets - pallets"))
}

// ParcelShops is the resolver for the parcelShops field.
func (r *queryResolver) ParcelShops(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopWhereInput) (*ent.ParcelShopConnection, error) {
	panic(fmt.Errorf("not implemented: ParcelShops - parcelShops"))
}

// ParcelShopBrings is the resolver for the parcelShopBrings field.
func (r *queryResolver) ParcelShopBrings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopBringWhereInput) (*ent.ParcelShopBringConnection, error) {
	panic(fmt.Errorf("not implemented: ParcelShopBrings - parcelShopBrings"))
}

// ParcelShopDaOs is the resolver for the parcelShopDaOs field.
func (r *queryResolver) ParcelShopDaOs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopDAOWhereInput) (*ent.ParcelShopDAOConnection, error) {
	panic(fmt.Errorf("not implemented: ParcelShopDaOs - parcelShopDaOs"))
}

// ParcelShopGlSs is the resolver for the parcelShopGlSs field.
func (r *queryResolver) ParcelShopGlSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopGLSWhereInput) (*ent.ParcelShopGLSConnection, error) {
	panic(fmt.Errorf("not implemented: ParcelShopGlSs - parcelShopGlSs"))
}

// ParcelShopPostNords is the resolver for the parcelShopPostNords field.
func (r *queryResolver) ParcelShopPostNords(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ParcelShopPostNordWhereInput) (*ent.ParcelShopPostNordConnection, error) {
	panic(fmt.Errorf("not implemented: ParcelShopPostNords - parcelShopPostNords"))
}

// Plans is the resolver for the plans field.
func (r *queryResolver) Plans(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PlanWhereInput) (*ent.PlanConnection, error) {
	return r.client.Plan.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithPlanFilter(where.Filter),
		)
}

// Printers is the resolver for the printers field.
func (r *queryResolver) Printers(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.PrinterWhereInput) (*ent.PrinterConnection, error) {
	panic(fmt.Errorf("not implemented: Printers - printers"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductWhereInput) (*ent.ProductConnection, error) {
	return r.client.Product.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithProductFilter(where.Filter),
		)
}

// ProductImages is the resolver for the productImages field.
func (r *queryResolver) ProductImages(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductImageWhereInput) (*ent.ProductImageConnection, error) {
	panic(fmt.Errorf("not implemented: ProductImages - productImages"))
}

// ProductTags is the resolver for the productTags field.
func (r *queryResolver) ProductTags(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductTagWhereInput) (*ent.ProductTagConnection, error) {
	return r.client.ProductTag.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithProductTagFilter(where.Filter),
		)
}

// ProductVariants is the resolver for the productVariants field.
func (r *queryResolver) ProductVariants(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ProductVariantWhereInput) (*ent.ProductVariantConnection, error) {
	pvc, err := r.client.ProductVariant.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithProductVariantFilter(where.Filter),
		)

	return pvc, err
}

// ReturnCollis is the resolver for the returnCollis field.
func (r *queryResolver) ReturnCollis(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ReturnColliOrder, where *ent.ReturnColliWhereInput) (*ent.ReturnColliConnection, error) {
	return r.client.ReturnColli.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithReturnColliFilter(where.Filter),
		)
}

// ReturnColliHistories is the resolver for the returnColliHistories field.
func (r *queryResolver) ReturnColliHistories(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnColliHistoryWhereInput) (*ent.ReturnColliHistoryConnection, error) {
	panic(fmt.Errorf("not implemented: ReturnColliHistories - returnColliHistories"))
}

// ReturnOrderLines is the resolver for the returnOrderLines field.
func (r *queryResolver) ReturnOrderLines(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnOrderLineWhereInput) (*ent.ReturnOrderLineConnection, error) {
	panic(fmt.Errorf("not implemented: ReturnOrderLines - returnOrderLines"))
}

// ReturnPortals is the resolver for the returnPortals field.
func (r *queryResolver) ReturnPortals(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnPortalWhereInput) (*ent.ReturnPortalConnection, error) {
	return r.client.ReturnPortal.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithReturnPortalFilter(where.Filter),
		)
}

// ReturnPortalClaims is the resolver for the returnPortalClaims field.
func (r *queryResolver) ReturnPortalClaims(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ReturnPortalClaimWhereInput) (*ent.ReturnPortalClaimConnection, error) {
	return r.client.ReturnPortalClaim.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithReturnPortalClaimFilter(where.Filter),
		)
}

// SeatGroups is the resolver for the seatGroups field.
func (r *queryResolver) SeatGroups(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SeatGroupWhereInput) (*ent.SeatGroupConnection, error) {
	return r.client.SeatGroup.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithSeatGroupFilter(where.Filter),
		)
}

// SeatGroupAccessRights is the resolver for the seatGroupAccessRights field.
func (r *queryResolver) SeatGroupAccessRights(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SeatGroupAccessRightWhereInput) (*ent.SeatGroupAccessRightConnection, error) {
	return r.client.SeatGroupAccessRight.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithSeatGroupAccessRightFilter(where.Filter),
		)
}

// Shipments is the resolver for the shipments field.
func (r *queryResolver) Shipments(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ShipmentOrder, where *ent.ShipmentWhereInput) (*ent.ShipmentConnection, error) {
	return r.client.Shipment.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithShipmentOrder(orderBy),
			ent.WithShipmentFilter(where.Filter),
		)
}

// ShipmentBrings is the resolver for the shipmentBrings field.
func (r *queryResolver) ShipmentBrings(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentBringWhereInput) (*ent.ShipmentBringConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentBrings - shipmentBrings"))
}

// ShipmentDaOs is the resolver for the shipmentDaOs field.
func (r *queryResolver) ShipmentDaOs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentDAOWhereInput) (*ent.ShipmentDAOConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentDaOs - shipmentDaOs"))
}

// ShipmentDfs is the resolver for the shipmentDfs field.
func (r *queryResolver) ShipmentDfs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentDFWhereInput) (*ent.ShipmentDFConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentDfs - shipmentDfs"))
}

// ShipmentDsVs is the resolver for the shipmentDsVs field.
func (r *queryResolver) ShipmentDsVs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentDSVWhereInput) (*ent.ShipmentDSVConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentDsVs - shipmentDsVs"))
}

// ShipmentEasyPosts is the resolver for the shipmentEasyPosts field.
func (r *queryResolver) ShipmentEasyPosts(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentEasyPostWhereInput) (*ent.ShipmentEasyPostConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentEasyPosts - shipmentEasyPosts"))
}

// ShipmentGlSs is the resolver for the shipmentGlSs field.
func (r *queryResolver) ShipmentGlSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentGLSWhereInput) (*ent.ShipmentGLSConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentGlSs - shipmentGlSs"))
}

// ShipmentPallets is the resolver for the shipmentPallets field.
func (r *queryResolver) ShipmentPallets(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentPalletWhereInput) (*ent.ShipmentPalletConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentPallets - shipmentPallets"))
}

// ShipmentParcels is the resolver for the shipmentParcels field.
func (r *queryResolver) ShipmentParcels(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy *ent.ShipmentParcelOrder, where *ent.ShipmentParcelWhereInput) (*ent.ShipmentParcelConnection, error) {
	return r.client.ShipmentParcel.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithShipmentParcelOrder(orderBy),
			ent.WithShipmentParcelFilter(where.Filter),
		)
}

// ShipmentPostNords is the resolver for the shipmentPostNords field.
func (r *queryResolver) ShipmentPostNords(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentPostNordWhereInput) (*ent.ShipmentPostNordConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentPostNords - shipmentPostNords"))
}

// ShipmentUspSs is the resolver for the shipmentUspSs field.
func (r *queryResolver) ShipmentUspSs(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.ShipmentUSPSWhereInput) (*ent.ShipmentUSPSConnection, error) {
	panic(fmt.Errorf("not implemented: ShipmentUspSs - shipmentUspSs"))
}

// SignupOptionsSlice is the resolver for the signupOptionsSlice field.
func (r *queryResolver) SignupOptionsSlice(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SignupOptionsWhereInput) (*ent.SignupOptionsConnection, error) {
	return r.client.SignupOptions.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithSignupOptionsFilter(where.Filter),
		)
}

// SystemEventsSlice is the resolver for the systemEventsSlice field.
func (r *queryResolver) SystemEventsSlice(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.SystemEventsWhereInput) (*ent.SystemEventsConnection, error) {
	return r.client.SystemEvents.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithSystemEventsFilter(where.Filter),
		)
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.TenantWhereInput) (*ent.TenantConnection, error) {
	return r.client.Tenant.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithTenantFilter(where.Filter),
		)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.client.User.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithUserFilter(where.Filter),
		)
}

// UserSeats is the resolver for the userSeats field.
func (r *queryResolver) UserSeats(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.UserSeatWhereInput) (*ent.UserSeatConnection, error) {
	return r.client.UserSeat.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithUserSeatFilter(where.Filter),
		)
}

// Workstations is the resolver for the workstations field.
func (r *queryResolver) Workstations(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, where *ent.WorkstationWhereInput) (*ent.WorkstationConnection, error) {
	return r.client.Workstation.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithWorkstationFilter(where.Filter),
		)
}

// WorkstationID is the resolver for the workstationID field.
func (r *workstationResolver) WorkstationID(ctx context.Context, obj *ent.Workstation) (string, error) {
	panic(fmt.Errorf("not implemented: WorkstationID - workstationID"))
}

// RequestCount is the resolver for the requestCount field.
func (r *createHypothesisTestDeliveryOptionRequestInputResolver) RequestCount(ctx context.Context, obj *ent.CreateHypothesisTestDeliveryOptionRequestInput, data int) error {
	panic(fmt.Errorf("not implemented: RequestCount - requestCount"))
}

// RequestCount is the resolver for the requestCount field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCount(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCount - requestCount"))
}

// RequestCountNeq is the resolver for the requestCountNEQ field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountNeq(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCountNeq - requestCountNEQ"))
}

// RequestCountIn is the resolver for the requestCountIn field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountIn(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RequestCountIn - requestCountIn"))
}

// RequestCountNotIn is the resolver for the requestCountNotIn field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountNotIn(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data []int) error {
	panic(fmt.Errorf("not implemented: RequestCountNotIn - requestCountNotIn"))
}

// RequestCountGt is the resolver for the requestCountGT field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountGt(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCountGt - requestCountGT"))
}

// RequestCountGte is the resolver for the requestCountGTE field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountGte(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCountGte - requestCountGTE"))
}

// RequestCountLt is the resolver for the requestCountLT field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountLt(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCountLt - requestCountLT"))
}

// RequestCountLte is the resolver for the requestCountLTE field.
func (r *hypothesisTestDeliveryOptionRequestWhereInputResolver) RequestCountLte(ctx context.Context, obj *ent.HypothesisTestDeliveryOptionRequestWhereInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCountLte - requestCountLTE"))
}

// DeviceID is the resolver for the deviceID field.
func (r *printerWhereInputResolver) DeviceID(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceID - deviceID"))
}

// DeviceIDNeq is the resolver for the deviceIDNEQ field.
func (r *printerWhereInputResolver) DeviceIDNeq(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDNeq - deviceIDNEQ"))
}

// DeviceIDIn is the resolver for the deviceIDIn field.
func (r *printerWhereInputResolver) DeviceIDIn(ctx context.Context, obj *ent.PrinterWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: DeviceIDIn - deviceIDIn"))
}

// DeviceIDNotIn is the resolver for the deviceIDNotIn field.
func (r *printerWhereInputResolver) DeviceIDNotIn(ctx context.Context, obj *ent.PrinterWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: DeviceIDNotIn - deviceIDNotIn"))
}

// DeviceIDGt is the resolver for the deviceIDGT field.
func (r *printerWhereInputResolver) DeviceIDGt(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDGt - deviceIDGT"))
}

// DeviceIDGte is the resolver for the deviceIDGTE field.
func (r *printerWhereInputResolver) DeviceIDGte(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDGte - deviceIDGTE"))
}

// DeviceIDLt is the resolver for the deviceIDLT field.
func (r *printerWhereInputResolver) DeviceIDLt(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDLt - deviceIDLT"))
}

// DeviceIDLte is the resolver for the deviceIDLTE field.
func (r *printerWhereInputResolver) DeviceIDLte(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDLte - deviceIDLTE"))
}

// DeviceIDContains is the resolver for the deviceIDContains field.
func (r *printerWhereInputResolver) DeviceIDContains(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDContains - deviceIDContains"))
}

// DeviceIDHasPrefix is the resolver for the deviceIDHasPrefix field.
func (r *printerWhereInputResolver) DeviceIDHasPrefix(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDHasPrefix - deviceIDHasPrefix"))
}

// DeviceIDHasSuffix is the resolver for the deviceIDHasSuffix field.
func (r *printerWhereInputResolver) DeviceIDHasSuffix(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDHasSuffix - deviceIDHasSuffix"))
}

// DeviceIDEqualFold is the resolver for the deviceIDEqualFold field.
func (r *printerWhereInputResolver) DeviceIDEqualFold(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDEqualFold - deviceIDEqualFold"))
}

// DeviceIDContainsFold is the resolver for the deviceIDContainsFold field.
func (r *printerWhereInputResolver) DeviceIDContainsFold(ctx context.Context, obj *ent.PrinterWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: DeviceIDContainsFold - deviceIDContainsFold"))
}

// RequestCount is the resolver for the requestCount field.
func (r *updateHypothesisTestDeliveryOptionRequestInputResolver) RequestCount(ctx context.Context, obj *ent.UpdateHypothesisTestDeliveryOptionRequestInput, data *int) error {
	panic(fmt.Errorf("not implemented: RequestCount - requestCount"))
}

// WorkstationID is the resolver for the workstationID field.
func (r *workstationWhereInputResolver) WorkstationID(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationID - workstationID"))
}

// WorkstationIDNeq is the resolver for the workstationIDNEQ field.
func (r *workstationWhereInputResolver) WorkstationIDNeq(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDNeq - workstationIDNEQ"))
}

// WorkstationIDIn is the resolver for the workstationIDIn field.
func (r *workstationWhereInputResolver) WorkstationIDIn(ctx context.Context, obj *ent.WorkstationWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDIn - workstationIDIn"))
}

// WorkstationIDNotIn is the resolver for the workstationIDNotIn field.
func (r *workstationWhereInputResolver) WorkstationIDNotIn(ctx context.Context, obj *ent.WorkstationWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDNotIn - workstationIDNotIn"))
}

// WorkstationIDGt is the resolver for the workstationIDGT field.
func (r *workstationWhereInputResolver) WorkstationIDGt(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDGt - workstationIDGT"))
}

// WorkstationIDGte is the resolver for the workstationIDGTE field.
func (r *workstationWhereInputResolver) WorkstationIDGte(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDGte - workstationIDGTE"))
}

// WorkstationIDLt is the resolver for the workstationIDLT field.
func (r *workstationWhereInputResolver) WorkstationIDLt(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDLt - workstationIDLT"))
}

// WorkstationIDLte is the resolver for the workstationIDLTE field.
func (r *workstationWhereInputResolver) WorkstationIDLte(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDLte - workstationIDLTE"))
}

// WorkstationIDContains is the resolver for the workstationIDContains field.
func (r *workstationWhereInputResolver) WorkstationIDContains(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDContains - workstationIDContains"))
}

// WorkstationIDHasPrefix is the resolver for the workstationIDHasPrefix field.
func (r *workstationWhereInputResolver) WorkstationIDHasPrefix(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDHasPrefix - workstationIDHasPrefix"))
}

// WorkstationIDHasSuffix is the resolver for the workstationIDHasSuffix field.
func (r *workstationWhereInputResolver) WorkstationIDHasSuffix(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDHasSuffix - workstationIDHasSuffix"))
}

// WorkstationIDEqualFold is the resolver for the workstationIDEqualFold field.
func (r *workstationWhereInputResolver) WorkstationIDEqualFold(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDEqualFold - workstationIDEqualFold"))
}

// WorkstationIDContainsFold is the resolver for the workstationIDContainsFold field.
func (r *workstationWhereInputResolver) WorkstationIDContainsFold(ctx context.Context, obj *ent.WorkstationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: WorkstationIDContainsFold - workstationIDContainsFold"))
}

// HypothesisTestDeliveryOptionRequest returns generated.HypothesisTestDeliveryOptionRequestResolver implementation.
func (r *Resolver) HypothesisTestDeliveryOptionRequest() generated.HypothesisTestDeliveryOptionRequestResolver {
	return &hypothesisTestDeliveryOptionRequestResolver{r}
}

// Printer returns generated.PrinterResolver implementation.
func (r *Resolver) Printer() generated.PrinterResolver { return &printerResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Workstation returns generated.WorkstationResolver implementation.
func (r *Resolver) Workstation() generated.WorkstationResolver { return &workstationResolver{r} }

// CreateHypothesisTestDeliveryOptionRequestInput returns generated.CreateHypothesisTestDeliveryOptionRequestInputResolver implementation.
func (r *Resolver) CreateHypothesisTestDeliveryOptionRequestInput() generated.CreateHypothesisTestDeliveryOptionRequestInputResolver {
	return &createHypothesisTestDeliveryOptionRequestInputResolver{r}
}

// HypothesisTestDeliveryOptionRequestWhereInput returns generated.HypothesisTestDeliveryOptionRequestWhereInputResolver implementation.
func (r *Resolver) HypothesisTestDeliveryOptionRequestWhereInput() generated.HypothesisTestDeliveryOptionRequestWhereInputResolver {
	return &hypothesisTestDeliveryOptionRequestWhereInputResolver{r}
}

// PrinterWhereInput returns generated.PrinterWhereInputResolver implementation.
func (r *Resolver) PrinterWhereInput() generated.PrinterWhereInputResolver {
	return &printerWhereInputResolver{r}
}

// UpdateHypothesisTestDeliveryOptionRequestInput returns generated.UpdateHypothesisTestDeliveryOptionRequestInputResolver implementation.
func (r *Resolver) UpdateHypothesisTestDeliveryOptionRequestInput() generated.UpdateHypothesisTestDeliveryOptionRequestInputResolver {
	return &updateHypothesisTestDeliveryOptionRequestInputResolver{r}
}

// UpdateWorkstationInput returns generated.UpdateWorkstationInputResolver implementation.
func (r *Resolver) UpdateWorkstationInput() generated.UpdateWorkstationInputResolver {
	return &updateWorkstationInputResolver{r}
}

// WorkstationWhereInput returns generated.WorkstationWhereInputResolver implementation.
func (r *Resolver) WorkstationWhereInput() generated.WorkstationWhereInputResolver {
	return &workstationWhereInputResolver{r}
}

type hypothesisTestDeliveryOptionRequestResolver struct{ *Resolver }
type printerResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type workstationResolver struct{ *Resolver }
type createHypothesisTestDeliveryOptionRequestInputResolver struct{ *Resolver }
type hypothesisTestDeliveryOptionRequestWhereInputResolver struct{ *Resolver }
type printerWhereInputResolver struct{ *Resolver }
type updateHypothesisTestDeliveryOptionRequestInputResolver struct{ *Resolver }
type updateWorkstationInputResolver struct{ *Resolver }
type workstationWhereInputResolver struct{ *Resolver }
