package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"delivrio.io/go/ent"
	address2 "delivrio.io/go/ent/address"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input ent.CreateLocationInput, inputAddress ent.CreateAddressInput) (*ent.Location, error) {
	v := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	if len(inputAddress.CountryID) == 0 {
		co, err := tx.Country.Query().Where(country.Alpha2EqualFold("DK")).Only(ctx)
		if err != nil {
			return nil, err
		}
		inputAddress.CountryID = co.ID
	}

	if len(input.LocationTagIDs) == 0 {
		loc, err := tx.LocationTag.Query().IDs(ctx)
		if err != nil {
			return nil, err
		}
		input.LocationTagIDs = loc
	}

	address, err := tx.Address.Create().
		SetInput(inputAddress).
		SetTenantID(v.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Location.Create().
		SetInput(input).
		SetAddress(address).
		SetTenantID(v.TenantID()).
		Save(ctx)
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id pulid.ID, input ent.UpdateLocationInput, inputAddress ent.UpdateAddressInput) (*ent.Location, error) {
	v := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	_, err := tx.Address.Update().
		SetInput(inputAddress).
		Where(address2.HasLocationWith(location.ID(id))).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	err = tx.Location.Update().
		ClearLocationTags().
		SetInput(input).
		SetTenantID(v.TenantID()).
		Where(location.ID(id)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Location.Query().Where(location.ID(id)).Only(ctx)
}

// Location is the resolver for the location field.
func (r *queryResolver) Location(ctx context.Context, id pulid.ID) (*ent.Location, error) {
	return r.client.Location.Query().Where(location.ID(id)).Only(ctx)
}

// AllLocationsIn is the resolver for the allLocationsIn field.
func (r *queryResolver) AllLocationsIn(ctx context.Context, country *pulid.ID) ([]*ent.Location, error) {
	panic(fmt.Errorf("not implemented: AllLocationsIn - allLocationsIn"))
}
