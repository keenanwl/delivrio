package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"delivrio.io/go/carrierapis/labels"
	"delivrio.io/go/ent"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/schema/hooks/history"
	"delivrio.io/go/utils/printerutils"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreatePackingListPrintJob is the resolver for the createPackingListPrintJob field.
func (r *queryResolver) CreatePackingListPrintJob(ctx context.Context, colliIDs []pulid.ID) (bool, error) {
	cli := ent.FromContext(ctx)
	view := viewer.FromContext(ctx)

	allCollis, err := cli.Colli.Query().
		Where(colli.IDIn(colliIDs...)).
		All(ctx)
	if err != nil {
		return false, err
	}

	selectedWorkstation, err := cli.User.Query().
		Where(user.ID(view.MyId())).
		QuerySelectedWorkstation().
		Only(ctx)
	if err != nil {
		return false, err
	}

	historyCtx := history.NewConfig(ctx).
		SetDescription("Print parcel slip").
		SetOrigin(changehistory.OriginWebClient).
		Ctx()

	err = printerutils.CreatePackingSlipPrintJobs(historyCtx, allCollis, selectedWorkstation)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateLabelsPrintJob is the resolver for the createLabelsPrintJob field.
func (r *queryResolver) CreateLabelsPrintJob(ctx context.Context, colliIDs []pulid.ID) (bool, error) {
	cli := ent.FromContext(ctx)
	view := viewer.FromContext(ctx)

	selectedPrinters, err := cli.User.Query().
		Where(user.ID(view.MyId())).
		QuerySelectedWorkstation().
		QueryPrinter().
		Where(printer.Or(
			printer.LabelZpl(true),
			printer.LabelPdf(true),
		)).
		All(ctx)
	if err != nil {
		return false, err
	}

	if len(selectedPrinters) == 0 {
		return false, fmt.Errorf("no printer found")
	}

	for _, colliID := range colliIDs {

		shipments, err := labels.MustShipmentFromColliID(ctx, colliID)
		if err != nil {
			return false, err
		}

		err = labels.CreatePrintJobs(ctx, selectedPrinters, shipments)
		if err != nil {
			return false, err
		}

	}

	return true, nil
}
