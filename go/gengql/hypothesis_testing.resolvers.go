package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"math"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/stats/bayesian"
	"delivrio.io/go/stats/chi"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateHypothesisTestDeliveryOption is the resolver for the createHypothesisTestDeliveryOption field.
func (r *mutationResolver) CreateHypothesisTestDeliveryOption(ctx context.Context, name string, connectionID pulid.ID) (pulid.ID, error) {
	tx := ent.TxFromContext(ctx)
	view := viewer.FromContext(ctx)

	ht, err := tx.HypothesisTest.Create().
		SetTenantID(view.TenantID()).
		SetConnectionID(connectionID).
		SetName(name).
		Save(ctx)
	if err != nil {
		return "", err
	}

	_, err = tx.HypothesisTestDeliveryOption.Create().
		SetHypothesisTest(ht).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return "", err
	}

	return ht.ID, nil
}

// UpdateHypothesisTestDeliveryOption is the resolver for the updateHypothesisTestDeliveryOption field.
func (r *mutationResolver) UpdateHypothesisTestDeliveryOption(ctx context.Context, id pulid.ID, input ent.UpdateHypothesisTestInput, inputDeliveryOption ent.UpdateHypothesisTestDeliveryOptionInput) (*ent.HypothesisTest, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.HypothesisTest.Update().
		SetInput(input).
		Where(hypothesistest.ID(id)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	err = tx.HypothesisTestDeliveryOption.Update().
		SetInput(inputDeliveryOption).
		Where(hypothesistestdeliveryoption.HasHypothesisTestWith(hypothesistest.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.HypothesisTest.Query().
		Where(hypothesistest.ID(id)).
		Only(ctx)
}

// HypothesisTest is the resolver for the hypothesisTest field.
func (r *queryResolver) HypothesisTest(ctx context.Context, id pulid.ID) (*ent.HypothesisTest, error) {
	return r.client.HypothesisTest.Query().Where(hypothesistest.ID(id)).Only(ctx)
}

// UnassignedDeliveryOptions is the resolver for the unassignedDeliveryOptions field.
func (r *queryResolver) UnassignedDeliveryOptions(ctx context.Context, hypothesisTestID pulid.ID) ([]*ent.DeliveryOption, error) {
	return r.client.DeliveryOption.Query().Where(deliveryoption.And(
		deliveryoption.Not(deliveryoption.HasHypothesisTestDeliveryOptionGroupOne()),
		deliveryoption.Not(deliveryoption.HasHypothesisTestDeliveryOptionGroupTwo()),
		deliveryoption.HasConnectionWith(connection.HasHypothesisTestWith(hypothesistest.ID(hypothesisTestID))),
	)).All(ctx)
}

// HypothesisTestResultsDashboard is the resolver for the hypothesisTestResultsDashboard field.
func (r *queryResolver) HypothesisTestResultsDashboard(ctx context.Context) ([]*models.DashboardHypothesisTestResult, error) {
	allTests, err := r.client.HypothesisTestDeliveryOption.Query().
		WithHypothesisTest().
		Where(
			hypothesistestdeliveryoption.HasHypothesisTestWith(hypothesistest.Active(true)),
		).All(ctx)
	if err != nil {
		return nil, err
	}

	output := make([]*models.DashboardHypothesisTestResult, 0)
	for _, t := range allTests {

		controlCount, err := t.QueryHypothesisTestDeliveryOptionRequest().
			Where(hypothesistestdeliveryoptionrequest.IsControlGroup(true)).
			Count(ctx)
		if err != nil {
			return nil, err
		}

		controlSuccess, err := t.QueryHypothesisTestDeliveryOptionRequest().
			Where(hypothesistestdeliveryoptionrequest.And(
				hypothesistestdeliveryoptionrequest.IsControlGroup(true),
				hypothesistestdeliveryoptionrequest.HasOrder(),
			)).
			Count(ctx)
		if err != nil {
			return nil, err
		}

		testCount, err := t.QueryHypothesisTestDeliveryOptionRequest().
			Where(hypothesistestdeliveryoptionrequest.IsControlGroup(false)).
			Count(ctx)
		if err != nil {
			return nil, err
		}

		testSuccess, err := t.QueryHypothesisTestDeliveryOptionRequest().
			Where(hypothesistestdeliveryoptionrequest.And(
				hypothesistestdeliveryoptionrequest.IsControlGroup(false),
				hypothesistestdeliveryoptionrequest.HasOrder(),
			)).
			Count(ctx)
		if err != nil {
			return nil, err
		}

		controlFail := float64(controlCount - controlSuccess)
		testFail := float64(testCount - testSuccess)

		testStatistic := chi.TestStatistic(float64(controlSuccess), controlFail, float64(testSuccess), testFail)
		if testCount == 0 || controlCount == 0 || math.IsInf(testStatistic, 0) || math.IsNaN(testStatistic) {
			testStatistic = 0
		}
		tableValue := 3.841

		bt := bayesian.NewBinaryTest()
		bt.Add(controlCount, controlSuccess)
		bt.Add(testCount, testSuccess)

		probs := bt.Probabilities()

		output = append(output, &models.DashboardHypothesisTestResult{
			ID:                     t.ID,
			Name:                   t.Edges.HypothesisTest.Name,
			ControlSuccess:         controlSuccess,
			ControlFailure:         controlCount - controlSuccess,
			TestSuccess:            testSuccess,
			TestFailure:            testCount - testSuccess,
			SignificantlyDifferent: testStatistic >= tableValue,
			ControlWin:             math.Round(probs[0] * 100),
			TestWin:                math.Round(probs[1] * 100),
		})
	}
	return output, nil
}
