package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/gengql/generated"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/go/schema/hooks"
	"delivrio.io/go/schema/mixins"
	"delivrio.io/go/utils"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
)

// Text is the resolver for the text field.
func (r *deliveryRuleConstraintSelectedValueResolver) Text(ctx context.Context, obj *fieldjson.DeliveryRuleConstraintSelectedValue) (*string, error) {
	panic(fmt.Errorf("not implemented: Text - text"))
}

// CreateDeliveryOption is the resolver for the createDeliveryOption field.
func (r *mutationResolver) CreateDeliveryOption(ctx context.Context, name string, agreementID pulid.ID, connectionID pulid.ID) (*models.CreateDeliveryOptionSuccess, error) {
	view := viewer.FromContext(ctx)
	tx := ent.TxFromContext(ctx)

	ca, err := tx.Carrier.Query().
		Where(carrier.ID(agreementID)).
		WithCarrierBrand().
		WithCarrierPostNord().
		Only(ctx)
	if err != nil {
		return nil, err
	}

	var nextSortOrder int = 0
	lastOption, err := tx.DeliveryOption.Query().
		Order(deliveryoption.BySortOrder(sql.OrderDesc())).
		First(ctx)
	if err != nil && !ent.IsNotFound(err) {
		return nil, err
	} else if !ent.IsNotFound(err) {
		nextSortOrder = lastOption.SortOrder + 1
	}

	doCreate := tx.DeliveryOption.Create().
		SetCarrierID(agreementID).
		// Does not account for simultaneous saves
		SetSortOrder(nextSortOrder).
		SetName(name).
		SetConnectionID(connectionID).
		SetTenantID(view.TenantID())

	switch ca.Edges.CarrierBrand.InternalID {
	case carrierbrand.InternalIDBring:

		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServiceBring()).
			First(ctx)
		if err != nil {
			return nil, err
		}

		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionBring.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDBring,
			},
			nil
	case carrierbrand.InternalIDDAO:

		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServiceDAO()).
			First(ctx)
		if err != nil {
			return nil, err
		}

		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionDAO.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDDAO,
			},
			nil
	case carrierbrand.InternalIDDF:

		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServiceDF()).
			First(ctx)
		if err != nil {
			return nil, err
		}

		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionDF.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDDF,
			},
			nil
	case carrierbrand.InternalIDDSV:

		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServiceDAO()).
			First(ctx)
		if err != nil {
			return nil, err
		}

		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionDSV.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDDSV,
			},
			nil
	case carrierbrand.InternalIDEasyPost:

		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServEasyPost()).
			First(ctx)
		if err != nil {
			return nil, err
		}

		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionEasyPost.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDEasyPost,
			},
			nil
	case carrierbrand.InternalIDPostNord:

		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServicePostNord()).
			First(ctx)
		if err != nil {
			return nil, err
		}

		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionPostNord.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDPostNord,
			},
			nil
	case carrierbrand.InternalIDGLS:
		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServiceGLS()).
			First(ctx)
		if err != nil {
			return nil, err
		}
		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionGLS.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDGLS,
			},
			nil
	case carrierbrand.InternalIDUSPS:
		// Default to first available
		// Can be changed on update
		service, err := tx.CarrierService.Query().
			Where(carrierservice.HasCarrierServiceUSPS()).
			First(ctx)
		if err != nil {
			return nil, err
		}
		do, err := doCreate.
			SetCarrierService(service).
			SetCarrier(ca).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		_, err = tx.DeliveryOptionUSPS.Create().
			SetTenantID(view.TenantID()).
			SetDeliveryOption(do).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateDeliveryOptionSuccess{
				ID:      do.ID,
				Carrier: carrierbrand.InternalIDUSPS,
			},
			nil
	}

	return nil, fmt.Errorf("could not find carrier brand matching agreement")
}

// UpdateDeliveryOptionBring is the resolver for the updateDeliveryOptionBring field.
func (r *mutationResolver) UpdateDeliveryOptionBring(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionBringInput, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionBring, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.DeliveryOptionBring.Update().
		Where(deliveryoptionbring.HasDeliveryOptionWith(deliveryoption.ID(id))).
		SetInput(input).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	err = utils.UpdateDeliveryOption(ctx, id, inputDeliveryOption)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryOptionBring.Query().
		Where(deliveryoptionbring.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// UpdateDeliveryOptionDao is the resolver for the updateDeliveryOptionDAO field.
func (r *mutationResolver) UpdateDeliveryOptionDao(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionDAO, error) {
	tx := ent.TxFromContext(ctx)

	err := utils.UpdateDeliveryOption(ctx, id, inputDeliveryOption)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryOptionDAO.Query().
		Where(deliveryoptiondao.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// UpdateDeliveryOptionDf is the resolver for the updateDeliveryOptionDF field.
func (r *mutationResolver) UpdateDeliveryOptionDf(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionDF, error) {
	tx := ent.TxFromContext(ctx)

	err := utils.UpdateDeliveryOption(ctx, id, inputDeliveryOption)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryOptionDF.Query().
		Where(deliveryoptiondf.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// UpdateDeliveryOptionDsv is the resolver for the updateDeliveryOptionDSV field.
func (r *mutationResolver) UpdateDeliveryOptionDsv(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionDSV, error) {
	tx := ent.TxFromContext(ctx)

	err := utils.UpdateDeliveryOption(ctx, id, inputDeliveryOption)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryOptionDSV.Query().
		Where(deliveryoptiondsv.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// UpdateDeliveryOptionEasyPost is the resolver for the updateDeliveryOptionEasyPost field.
func (r *mutationResolver) UpdateDeliveryOptionEasyPost(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionEasyPostInput, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionEasyPost, error) {
	tx := ent.TxFromContext(ctx)

	err := utils.UpdateDeliveryOption(ctx, id, inputDeliveryOption)
	if err != nil {
		return nil, err
	}

	err = tx.DeliveryOptionEasyPost.Update().
		SetInput(input).
		Where(deliveryoptioneasypost.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryOptionEasyPost.Query().
		Where(deliveryoptioneasypost.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// UpdateDeliveryOptionGls is the resolver for the updateDeliveryOptionGLS field.
func (r *mutationResolver) UpdateDeliveryOptionGls(ctx context.Context, id pulid.ID, inputDeliveryOption ent.UpdateDeliveryOptionInput) (*ent.DeliveryOptionGLS, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.DeliveryOption.Update().
		Where(deliveryoption.ID(id)).
		SetInput(inputDeliveryOption).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	doGLS, err := tx.DeliveryOptionGLS.Query().
		WithDeliveryOption().
		Where(deliveryoptiongls.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryOptionGLS.Update().
		Where(deliveryoptiongls.ID(doGLS.ID)).
		Save(ctx)
	if err != nil {
		var fieldErrors *hooks.ValidationError
		if errors.As(err, &fieldErrors) {
			ctxZone := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			for _, e := range fieldErrors.InvalidFields(ctxZone) {
				graphql.AddError(ctxZone, e)
			}
		} else {
			return nil, err
		}
	}

	return tx.DeliveryOptionGLS.Query().Where(deliveryoptiongls.ID(doGLS.ID)).Only(ctx)
}

// UpdateDeliveryOptionPostNord is the resolver for the updateDeliveryOptionPostNord field.
func (r *mutationResolver) UpdateDeliveryOptionPostNord(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionPostNordInput, inputDeliveryOption ent.UpdateDeliveryOptionInput, inputAdditionalServices []string) (*ent.DeliveryOptionPostNord, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.DeliveryOption.Update().
		SetInput(inputDeliveryOption).
		Where(deliveryoption.ID(id)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	addServiceIDs := make([]pulid.ID, 0)
	for _, internalID := range inputAdditionalServices {
		ID, err := tx.CarrierAdditionalServicePostNord.Query().
			Where(carrieradditionalservicepostnord.And(
				carrieradditionalservicepostnord.InternalIDEQ(internalID),
				carrieradditionalservicepostnord.HasCarrierServicePostNordWith(
					carrierservicepostnord.HasCarrierServiceWith(
						carrierservice.ID(*inputDeliveryOption.CarrierServiceID),
					),
				),
			)).OnlyID(ctx)
		if err != nil {
			return nil, fmt.Errorf("%w: could not find additional service: %s", err, internalID)
		}
		addServiceIDs = append(addServiceIDs, ID)
	}

	_, err = tx.DeliveryOptionPostNord.Update().
		SetInput(input).
		ClearCarrierAddServPostNord().
		AddCarrierAddServPostNordIDs(addServiceIDs...).
		Where(deliveryoptionpostnord.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Save(ctx)
	if err != nil {
		var fieldErrors *hooks.ValidationError
		if errors.As(err, &fieldErrors) {
			ctxZone := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			for _, e := range fieldErrors.InvalidFields(ctxZone) {
				graphql.AddError(ctxZone, e)
			}
		} else {
			return nil, err
		}
	}

	return tx.DeliveryOptionPostNord.Query().
		Where(deliveryoptionpostnord.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// UpdateDeliveryOptionUsps is the resolver for the updateDeliveryOptionUSPS field.
func (r *mutationResolver) UpdateDeliveryOptionUsps(ctx context.Context, id pulid.ID, input ent.UpdateDeliveryOptionUSPSInput, inputDeliveryOption ent.UpdateDeliveryOptionInput, inputAdditionalServices []pulid.ID) (*ent.DeliveryOptionUSPS, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.DeliveryOption.Update().
		SetInput(inputDeliveryOption).
		Where(deliveryoption.ID(id)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryOptionUSPS.Update().
		SetInput(input).
		ClearCarrierAdditionalServiceUSPS().
		AddCarrierAdditionalServiceUspIDs(inputAdditionalServices...).
		Where(deliveryoptionusps.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Save(ctx)
	if err != nil {
		var fieldErrors *hooks.ValidationError
		if errors.As(err, &fieldErrors) {
			ctxZone := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
			for _, e := range fieldErrors.InvalidFields(ctxZone) {
				graphql.AddError(ctxZone, e)
			}
		} else {
			return nil, err
		}
	}

	return tx.DeliveryOptionUSPS.Query().
		Where(deliveryoptionusps.HasDeliveryOptionWith(deliveryoption.ID(id))).
		Only(ctx)
}

// CreateDeliveryRule is the resolver for the createDeliveryRule field.
func (r *mutationResolver) CreateDeliveryRule(ctx context.Context, input ent.CreateDeliveryRuleInput) (*ent.DeliveryRule, error) {
	view := viewer.FromContext(ctx)
	tx := ent.TxFromContext(ctx)

	c, err := tx.DeliveryOption.Query().
		Where(deliveryoption.ID(*input.DeliveryOptionID)).
		QueryConnection().
		QueryCurrency().
		Only(ctx)
	if err != nil {
		return nil, err
	}

	dr, err := tx.DeliveryRule.Create().
		SetInput(input).
		SetCurrency(c).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryRule.Query().
		Where(deliveryrule.ID(dr.ID)).
		Only(ctx)
}

// UpdateDeliveryRule is the resolver for the updateDeliveryRule field.
func (r *mutationResolver) UpdateDeliveryRule(ctx context.Context, deliveryRuleID pulid.ID, val ent.UpdateDeliveryRuleInput) (*ent.DeliveryRule, error) {
	tx := ent.TxFromContext(ctx)
	err := tx.DeliveryRule.Update().
		SetInput(val).
		Where(deliveryrule.ID(deliveryRuleID)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}
	return tx.DeliveryRule.Query().
		Where(deliveryrule.ID(deliveryRuleID)).
		Only(ctx)
}

// CreateDeliveryRuleConstraintGroup is the resolver for the createDeliveryRuleConstraintGroup field.
func (r *mutationResolver) CreateDeliveryRuleConstraintGroup(ctx context.Context, input ent.CreateDeliveryRuleConstraintGroupInput) (*ent.DeliveryRuleConstraintGroup, error) {
	tx := ent.TxFromContext(ctx)
	return tx.DeliveryRuleConstraintGroup.Create().
		SetInput(input).
		Save(ctx)
}

// CreateDeliveryRuleConstraintGroupConstraints is the resolver for the createDeliveryRuleConstraintGroupConstraints field.
func (r *mutationResolver) CreateDeliveryRuleConstraintGroupConstraints(ctx context.Context, deliveryRuleID pulid.ID, logicType deliveryruleconstraintgroup.ConstraintLogic, input []*ent.CreateDeliveryRuleConstraintInput) ([]*models.DeliveryRuleConstraintWithTags, error) {
	view := viewer.FromContext(ctx)
	tx := ent.TxFromContext(ctx)

	group, err := tx.DeliveryRuleConstraintGroup.Create().
		SetDeliveryRuleID(deliveryRuleID).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	constraints := make([]*ent.DeliveryRuleConstraint, 0)
	for _, i := range input {
		constraint, err := tx.DeliveryRuleConstraint.Create().
			SetInput(*i).
			SetDeliveryRuleConstraintGroupID(group.ID).
			SetTenantID(view.TenantID()).
			Save(ctx)

		if err != nil {
			return nil, err
		}
		constraints = append(constraints, constraint)
	}

	_, err = tx.DeliveryRuleConstraintGroup.Update().
		Where(deliveryruleconstraintgroup.ID(group.ID)).
		SetConstraintLogic(logicType).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	res, err := tx.DeliveryRuleConstraintGroup.Query().
		WithDeliveryRuleConstraints().
		Where(deliveryruleconstraintgroup.ID(group.ID)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	output := make([]*models.DeliveryRuleConstraintWithTags, 0)
	for _, c := range res.Edges.DeliveryRuleConstraints {
		idsToLookup := make([]pulid.ID, 0)
		for _, ID := range c.SelectedValue.IDs {
			idsToLookup = append(idsToLookup, pulid.ID(ID))
		}
		tags, err := tx.ProductTag.Query().
			Where(producttag.IDIn(idsToLookup...)).
			All(ctx)
		if err != nil {
			return nil, err
		}

		output = append(output, &models.DeliveryRuleConstraintWithTags{
			Constraint: c,
			Tags:       tags,
		})
	}

	return output, nil
}

// ReplaceDeliveryRuleConstraintGroupConstraints is the resolver for the replaceDeliveryRuleConstraintGroupConstraints field.
func (r *mutationResolver) ReplaceDeliveryRuleConstraintGroupConstraints(ctx context.Context, deliveryGroupID pulid.ID, logicType deliveryruleconstraintgroup.ConstraintLogic, input []*ent.CreateDeliveryRuleConstraintInput) ([]*models.DeliveryRuleConstraintWithTags, error) {
	view := viewer.FromContext(ctx)
	tx := ent.TxFromContext(ctx)

	_, err := tx.DeliveryRuleConstraint.Delete().
		Where(deliveryruleconstraint.HasDeliveryRuleConstraintGroupWith(deliveryruleconstraintgroup.ID(deliveryGroupID))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	constraints := make([]*ent.DeliveryRuleConstraint, 0)
	for index, i := range input {
		constraint, err := tx.DeliveryRuleConstraint.Create().
			SetInput(*i).
			SetDeliveryRuleConstraintGroupID(deliveryGroupID).
			SetTenantID(view.TenantID()).
			Save(ctx)
		if err != nil {
			var fieldErrors *hooks.ValidationError
			if errors.As(err, &fieldErrors) {
				ctxConstraint := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
				ctxConstraint = graphql.WithPathContext(ctxConstraint, graphql.NewPathWithIndex(index))
				for _, e := range fieldErrors.InvalidFields(ctxConstraint) {
					graphql.AddError(ctxConstraint, e)
				}
			}
			return nil, err
		}
		constraints = append(constraints, constraint)
	}

	err = tx.DeliveryRuleConstraintGroup.Update().
		SetConstraintLogic(logicType).Exec(ctx)
	if err != nil {
		return nil, err
	}

	res, err := tx.DeliveryRuleConstraintGroup.Query().
		WithDeliveryRuleConstraints().
		Where(deliveryruleconstraintgroup.ID(deliveryGroupID)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	output := make([]*models.DeliveryRuleConstraintWithTags, 0)
	for _, c := range res.Edges.DeliveryRuleConstraints {
		idsToLookup := make([]pulid.ID, 0)
		for _, ID := range c.SelectedValue.IDs {
			idsToLookup = append(idsToLookup, pulid.ID(ID))
		}
		tags, err := tx.ProductTag.Query().
			Where(producttag.IDIn(idsToLookup...)).
			All(ctx)
		if err != nil {
			return nil, err
		}

		output = append(output, &models.DeliveryRuleConstraintWithTags{
			Constraint: c,
			Tags:       tags,
		})
	}

	return output, nil
}

// DeleteDeliveryRule is the resolver for the deleteDeliveryRule field.
func (r *mutationResolver) DeleteDeliveryRule(ctx context.Context, deliveryRuleID pulid.ID) ([]*ent.DeliveryRule, error) {
	tx := ent.TxFromContext(ctx)
	deliveryOption, err := tx.DeliveryRule.Query().
		Where(deliveryrule.ID(deliveryRuleID)).
		QueryDeliveryOption().
		Only(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryRuleConstraint.Delete().Where(
		deliveryruleconstraint.HasDeliveryRuleConstraintGroupWith(
			deliveryruleconstraintgroup.HasDeliveryRuleWith(
				deliveryrule.ID(deliveryRuleID),
			)),
	).Exec(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryRuleConstraintGroup.Delete().Where(
		deliveryruleconstraintgroup.HasDeliveryRuleWith(
			deliveryrule.ID(deliveryRuleID),
		),
	).Exec(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryRule.Delete().Where(
		deliveryrule.ID(deliveryRuleID),
	).Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryRule.Query().
		Where(deliveryrule.ID(deliveryOption.ID)).
		All(ctx)
}

// DeleteDeliveryRuleConstraintGroupConstraints is the resolver for the deleteDeliveryRuleConstraintGroupConstraints field.
func (r *mutationResolver) DeleteDeliveryRuleConstraintGroupConstraints(ctx context.Context, deliveryGroupID pulid.ID) ([]*ent.DeliveryRule, error) {
	tx := ent.TxFromContext(ctx)

	rule, err := tx.DeliveryRule.Query().Where(deliveryrule.HasDeliveryRuleConstraintGroupWith(
		deliveryruleconstraintgroup.ID(deliveryGroupID))).Only(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryRuleConstraint.Delete().Where(
		deliveryruleconstraint.HasDeliveryRuleConstraintGroupWith(
			deliveryruleconstraintgroup.ID(deliveryGroupID)),
	).Exec(ctx)
	if err != nil {
		return nil, err
	}

	_, err = tx.DeliveryRuleConstraintGroup.Delete().Where(deliveryruleconstraintgroup.ID(deliveryGroupID)).Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryRule.Query().Where(deliveryrule.ID(rule.ID)).All(ctx)
}

// ReplaceDeliveryRuleCountries is the resolver for the replaceDeliveryRuleCountries field.
func (r *mutationResolver) ReplaceDeliveryRuleCountries(ctx context.Context, ruleID pulid.ID, countries []pulid.ID) (*ent.DeliveryRule, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.DeliveryRule.Update().Where(deliveryrule.ID(ruleID)).
		ClearCountry().
		AddCountryIDs(countries...).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.DeliveryRule.Query().Where(deliveryrule.ID(ruleID)).Only(ctx)
}

// UpdateDeliveryOptionSortOrder is the resolver for the updateDeliveryOptionSortOrder field.
func (r *mutationResolver) UpdateDeliveryOptionSortOrder(ctx context.Context, newOrder []pulid.ID) ([]*ent.DeliveryOption, error) {
	tx := ent.TxFromContext(ctx)

	for index, id := range newOrder {
		err := tx.DeliveryOption.UpdateOneID(id).
			SetSortOrder(index).
			Exec(ctx)
		if err != nil {
			return nil, err
		}
	}

	return tx.DeliveryOption.Query().
		Order(deliveryoption.BySortOrder(sql.OrderAsc())).
		All(ctx)
}

// DeliveryOptionArchive is the resolver for the deliveryOptionArchive field.
func (r *mutationResolver) DeliveryOptionArchive(ctx context.Context, deliveryOptionID pulid.ID) (bool, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.DeliveryOption.UpdateOneID(deliveryOptionID).
		SetArchivedAt(time.Now()).
		Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeliveryOptionsFiltered is the resolver for the deliveryOptionsFiltered field.
func (r *queryResolver) DeliveryOptionsFiltered(ctx context.Context, showArchived bool) ([]*ent.DeliveryOption, error) {
	cli := ent.FromContext(ctx)

	if !showArchived {
		ctx = mixins.ExcludeArchived(ctx)
	}

	return cli.DeliveryOption.Query().
		All(ctx)
}

// DeliveryOptionBring is the resolver for the deliveryOptionBring field.
func (r *queryResolver) DeliveryOptionBring(ctx context.Context, id pulid.ID) (*ent.DeliveryOptionBring, error) {
	return r.client.DeliveryOptionBring.Query().
		Where(
			deliveryoptionbring.HasDeliveryOptionWith(deliveryoption.ID(id)),
		).Only(ctx)
}

// DeliveryOptionDao is the resolver for the deliveryOptionDAO field.
func (r *queryResolver) DeliveryOptionDao(ctx context.Context, id pulid.ID) (*ent.DeliveryOptionDAO, error) {
	return r.client.DeliveryOptionDAO.Query().
		Where(
			deliveryoptiondao.HasDeliveryOptionWith(deliveryoption.ID(id)),
		).Only(ctx)
}

// DeliveryOptionDf is the resolver for the deliveryOptionDF field.
func (r *queryResolver) DeliveryOptionDf(ctx context.Context, id pulid.ID) (*ent.DeliveryOptionDF, error) {
	return r.client.DeliveryOptionDF.Query().
		Where(
			deliveryoptiondf.HasDeliveryOptionWith(deliveryoption.ID(id)),
		).Only(ctx)
}

// DeliveryOptionDsv is the resolver for the deliveryOptionDSV field.
func (r *queryResolver) DeliveryOptionDsv(ctx context.Context, id pulid.ID) (*ent.DeliveryOptionDSV, error) {
	return r.client.DeliveryOptionDSV.Query().
		Where(
			deliveryoptiondsv.HasDeliveryOptionWith(deliveryoption.ID(id)),
		).Only(ctx)
}

// DeliveryOptionEasyPost is the resolver for the deliveryOptionEasyPost field.
func (r *queryResolver) DeliveryOptionEasyPost(ctx context.Context, id pulid.ID) (*ent.DeliveryOptionEasyPost, error) {
	return r.client.DeliveryOptionEasyPost.Query().
		Where(
			deliveryoptioneasypost.HasDeliveryOptionWith(deliveryoption.ID(id)),
		).Only(ctx)
}

// DeliveryOptionGls is the resolver for the deliveryOptionGLS field.
func (r *queryResolver) DeliveryOptionGls(ctx context.Context, id pulid.ID) (*ent.DeliveryOptionGLS, error) {
	return r.client.DeliveryOptionGLS.Query().
		Where(
			deliveryoptiongls.HasDeliveryOptionWith(deliveryoption.ID(id)),
		).Only(ctx)
}

// DeliveryOptionPostNord is the resolver for the deliveryOptionPostNord field.
func (r *queryResolver) DeliveryOptionPostNord(ctx context.Context, deliveryOptionID pulid.ID) (*ent.DeliveryOptionPostNord, error) {
	return r.client.DeliveryOptionPostNord.Query().
		Where(
			deliveryoptionpostnord.HasDeliveryOptionWith(deliveryoption.ID(deliveryOptionID)),
		).Only(ctx)
}

// DeliveryOptionUsps is the resolver for the deliveryOptionUSPS field.
func (r *queryResolver) DeliveryOptionUsps(ctx context.Context, deliveryOptionID pulid.ID) (*ent.DeliveryOptionUSPS, error) {
	return r.client.DeliveryOptionUSPS.Query().
		Where(
			deliveryoptionusps.HasDeliveryOptionWith(deliveryoption.ID(deliveryOptionID)),
		).Only(ctx)
}

// ConstraintGroup is the resolver for the constraintGroup field.
func (r *queryResolver) ConstraintGroup(ctx context.Context, id pulid.ID) (*ent.DeliveryRuleConstraintGroup, error) {
	return r.client.DeliveryRuleConstraintGroup.Query().
		Where(
			deliveryruleconstraintgroup.ID(id),
		).Only(ctx)
}

// Constraints is the resolver for the constraints field.
func (r *queryResolver) Constraints(ctx context.Context, groupID pulid.ID) ([]*models.DeliveryRuleConstraintWithTags, error) {
	constraints, err := r.client.DeliveryRuleConstraint.Query().Where(
		deliveryruleconstraint.HasDeliveryRuleConstraintGroupWith(deliveryruleconstraintgroup.ID(groupID)),
	).All(ctx)
	if err != nil {
		return nil, err
	}

	output := make([]*models.DeliveryRuleConstraintWithTags, 0)
	for _, c := range constraints {
		idsToLookup := make([]pulid.ID, 0)
		for _, ID := range c.SelectedValue.IDs {
			idsToLookup = append(idsToLookup, pulid.ID(ID))
		}
		tags, err := r.client.ProductTag.Query().
			Where(producttag.IDIn(idsToLookup...)).
			All(ctx)
		if err != nil {
			return nil, err
		}

		output = append(output, &models.DeliveryRuleConstraintWithTags{
			Constraint: c,
			Tags:       tags,
		})
	}

	return output, nil
}

// AvailableAdditionalServicesPostNord is the resolver for the availableAdditionalServicesPostNord field.
func (r *queryResolver) AvailableAdditionalServicesPostNord(ctx context.Context, carrierServiceID pulid.ID) ([]string, error) {
	// TODO: we need additional filtering here
	// Countries on either side
	addServices, err := r.client.CarrierAdditionalServicePostNord.Query().
		Where(carrieradditionalservicepostnord.HasCarrierServicePostNordWith(
			carrierservicepostnord.HasCarrierServiceWith(carrierservice.ID(carrierServiceID)),
		)).All(ctx)
	if err != nil {
		return nil, err
	}

	internalIDs := make([]string, 0)
	for _, r := range addServices {
		internalIDs = append(internalIDs, r.InternalID)
	}

	return internalIDs, nil
}

// AvailableAdditionalServicesUsps is the resolver for the availableAdditionalServicesUSPS field.
func (r *queryResolver) AvailableAdditionalServicesUsps(ctx context.Context, carrierServiceID pulid.ID) ([]*ent.CarrierAdditionalServiceUSPS, error) {
	// TODO: we need additional filtering here
	// Countries on either side
	return r.client.CarrierAdditionalServiceUSPS.Query().
		// Unknown filtering, so they are all available
		All(ctx)
}

// Text is the resolver for the text field.
func (r *deliveryRuleConstraintSelectedValueInputResolver) Text(ctx context.Context, obj *fieldjson.DeliveryRuleConstraintSelectedValue, data *string) error {
	panic(fmt.Errorf("not implemented: Text - text"))
}

// DeliveryRuleConstraintSelectedValue returns generated.DeliveryRuleConstraintSelectedValueResolver implementation.
func (r *Resolver) DeliveryRuleConstraintSelectedValue() generated.DeliveryRuleConstraintSelectedValueResolver {
	return &deliveryRuleConstraintSelectedValueResolver{r}
}

// DeliveryRuleConstraintSelectedValueInput returns generated.DeliveryRuleConstraintSelectedValueInputResolver implementation.
func (r *Resolver) DeliveryRuleConstraintSelectedValueInput() generated.DeliveryRuleConstraintSelectedValueInputResolver {
	return &deliveryRuleConstraintSelectedValueInputResolver{r}
}

type deliveryRuleConstraintSelectedValueResolver struct{ *Resolver }
type deliveryRuleConstraintSelectedValueInputResolver struct{ *Resolver }
