package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateShopifyConnection is the resolver for the createShopifyConnection field.
func (r *mutationResolver) CreateShopifyConnection(ctx context.Context, input ent.CreateConnectionShopifyInput, inputConnection ent.CreateConnectionInput) (*ent.ConnectionShopify, error) {
	view := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	brand, err := tx.ConnectionBrand.Query().
		Where(connectionbrand.LabelEqualFold("shopify")).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	conn, err := tx.Connection.Create().
		SetInput(inputConnection).
		SetTenantID(view.TenantID()).
		SetConnectionBrand(brand).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	shopify, err := tx.ConnectionShopify.Create().
		SetInput(input).
		SetConnection(conn).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.ConnectionShopify.Query().
		Where(connectionshopify.ID(shopify.ID)).
		Only(ctx)
}

// UpdateShopifyConnection is the resolver for the updateShopifyConnection field.
func (r *mutationResolver) UpdateShopifyConnection(ctx context.Context, id pulid.ID, input ent.UpdateConnectionShopifyInput, inputConnection ent.UpdateConnectionInput) (*ent.ConnectionShopify, error) {
	tx := ent.FromContext(ctx)
	err := tx.ConnectionShopify.Update().
		SetInput(input).
		Where(connectionshopify.HasConnectionWith(connection.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	err = tx.Connection.Update().
		SetInput(inputConnection).
		Where(connection.ID(id)).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.ConnectionShopify.Query().
		Where(connectionshopify.HasConnectionWith(connection.ID(id))).
		Only(ctx)
}

// Connection is the resolver for the connection field.
func (r *queryResolver) Connection(ctx context.Context, id *pulid.ID) (*ent.Connection, error) {
	return r.client.Connection.Query().
		Where(
			connection.ID(*id),
		).Only(ctx)
}

// ConnectionList is the resolver for the connectionList field.
func (r *queryResolver) ConnectionList(ctx context.Context) ([]*models.ConnectionListItem, error) {
	output := make([]*models.ConnectionListItem, 0)
	return output, nil
}

// ConnectionShopify is the resolver for the connectionShopify field.
func (r *queryResolver) ConnectionShopify(ctx context.Context, id pulid.ID) (*ent.ConnectionShopify, error) {
	return r.client.ConnectionShopify.Query().Where(connectionshopify.ID(id)).Only(ctx)
}
