package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/mergeutils"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateEmailTemplates is the resolver for the createEmailTemplates field.
func (r *mutationResolver) CreateEmailTemplates(ctx context.Context, name string, merge emailtemplate.MergeType) (pulid.ID, error) {
	tx := ent.TxFromContext(ctx)
	view := viewer.FromContext(ctx)

	temp, err := tx.EmailTemplate.Create().
		SetName(name).
		SetMergeType(merge).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return "", err
	}

	return temp.ID, nil
}

// UpdateEmailTemplate is the resolver for the updateEmailTemplate field.
func (r *mutationResolver) UpdateEmailTemplate(ctx context.Context, id pulid.ID, input ent.UpdateEmailTemplateInput) (*ent.EmailTemplate, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.EmailTemplate.UpdateOneID(id).
		SetInput(input).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.EmailTemplate.Query().
		Where(emailtemplate.ID(id)).
		Only(ctx)
}

// EmailTemplate is the resolver for the emailTemplate field.
func (r *queryResolver) EmailTemplate(ctx context.Context, id pulid.ID) (*ent.EmailTemplate, error) {
	return r.client.EmailTemplate.Query().Where(emailtemplate.ID(id)).Only(ctx)
}

// SendTestEmail is the resolver for the sendTestEmail field.
func (r *queryResolver) SendTestEmail(ctx context.Context, id pulid.ID, toEmail string) (bool, error) {
	email, err := r.client.EmailTemplate.Query().
		Where(emailtemplate.ID(id)).
		Only(ctx)
	if err != nil {
		return false, fmt.Errorf("send test email: %w", err)
	}

	var dta interface{}
	switch email.MergeType {
	case emailtemplate.MergeTypeOrderConfirmation:
		dta = mergeutils.NewTestOrderConfirmation(ctx)
		break
	case emailtemplate.MergeTypeOrderPicked:
		dta = mergeutils.NewTestColliPacked(ctx)
		break
	case emailtemplate.MergeTypeReturnColliLabel:
		dta = mergeutils.NewTestReturnConfirmationLabel(ctx)
		break
	case emailtemplate.MergeTypeReturnColliQr:
		dta = mergeutils.NewTestReturnConfirmationQRCode(ctx)
		break
	case emailtemplate.MergeTypeReturnColliReceived:
		dta = mergeutils.NewTestReturnReceived(ctx)
		break
	case emailtemplate.MergeTypeReturnColliAccepted:
		dta = mergeutils.NewTestReturnAccepted(ctx)
		break
	default:
		return false, fmt.Errorf("unknown email merge type: %v", email.MergeType)
	}

	return mergeutils.SendTransactionalEmail(
		email.HTMLTemplate,
		email.Subject,
		toEmail,
		dta,
	)
}
