package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	b64 "encoding/base64"
	"fmt"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/gengql/generated"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/utils"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateAPIToken is the resolver for the createAPIToken field.
func (r *mutationResolver) CreateAPIToken(ctx context.Context, name string) (*models.CreateAPITokenSuccess, error) {
	tx := ent.FromContext(ctx)
	view := viewer.FromContext(ctx)

	token := utils.RandomX(30)
	hashedToken := utils.HashPasswordX(token)

	savedToken, err := tx.APIToken.Create().
		SetName(name).
		SetUserID(view.MyId()).
		SetHashedToken(hashedToken).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	encodedToken := b64.StdEncoding.EncodeToString([]byte(fmt.Sprintf("%s:%s", token, savedToken.ID)))
	return &models.CreateAPITokenSuccess{
		Token: encodedToken,
		ID:    savedToken.ID,
	}, nil
}

// UpdateAPIToken is the resolver for the updateAPIToken field.
func (r *mutationResolver) UpdateAPIToken(ctx context.Context, id pulid.ID, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateAPIToken - updateAPIToken"))
}

// DeleteAPIToken is the resolver for the deleteAPIToken field.
func (r *mutationResolver) DeleteAPIToken(ctx context.Context, id pulid.ID) ([]*ent.APIToken, error) {
	tx := ent.FromContext(ctx)
	view := viewer.FromContext(ctx)

	_, err := tx.APIToken.Delete().Where(apitoken.And(
		apitoken.ID(id),
		// Convert to privacy
		apitoken.HasUserWith(user.ID(view.MyId())),
	)).Exec(ctx)
	if err != nil {
		return nil, err
	}
	return tx.APIToken.Query().Where(
		// Convert to privacy
		apitoken.HasUserWith(user.ID(view.MyId())),
	).All(ctx)
}

// MyAPITokens is the resolver for the myAPITokens field.
func (r *queryResolver) MyAPITokens(ctx context.Context) ([]*ent.APIToken, error) {
	view := viewer.FromContext(ctx)

	return r.client.APIToken.Query().Where(
		// Convert to privacy
		apitoken.HasUserWith(user.ID(view.MyId())),
	).All(ctx)
}

// DevicePing is the resolver for the devicePing field.
func (r *queryResolver) DevicePing(ctx context.Context, token string) (bool, error) {
	panic(fmt.Errorf("not implemented: DevicePing - devicePing"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
