package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, name string, connectionID pulid.ID, emailTemplateID pulid.ID) ([]*ent.Notification, error) {
	tx := ent.TxFromContext(ctx)
	view := viewer.FromContext(ctx)

	err := tx.Notification.Create().
		SetTenantID(view.TenantID()).
		SetActive(true).
		SetConnectionID(connectionID).
		SetEmailTemplateID(emailTemplateID).
		SetName(name).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Notification.Query().All(ctx)
}

// ToggleNotification is the resolver for the toggleNotification field.
func (r *mutationResolver) ToggleNotification(ctx context.Context, notificationID pulid.ID, checked bool) (bool, error) {
	tx := ent.TxFromContext(ctx)
	err := tx.Notification.Update().
		SetActive(checked).
		Where(notification.ID(notificationID)).
		Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}
