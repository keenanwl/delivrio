package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"time"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/schema/mixins"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
)

// CreatePackaging is the resolver for the createPackaging field.
func (r *mutationResolver) CreatePackaging(ctx context.Context, input ent.CreatePackagingInput, inputPackagingUsps *ent.CreatePackagingUSPSInput, inputPackagingDf *ent.CreatePackagingDFInput) ([]*ent.Packaging, error) {
	tx := ent.TxFromContext(ctx)
	view := viewer.FromContext(ctx)

	p, err := tx.Packaging.Create().
		SetInput(input).
		SetTenantID(view.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	if inputPackagingUsps != nil {
		err := tx.PackagingUSPS.Create().
			SetInput(*inputPackagingUsps).
			SetPackaging(p).
			SetTenantID(view.TenantID()).
			Exec(ctx)
		if err != nil {
			return nil, err
		}
	} else if inputPackagingDf != nil {
		err := tx.PackagingDF.Create().
			SetInput(*inputPackagingDf).
			SetPackaging(p).
			SetTenantID(view.TenantID()).
			Exec(ctx)
		if err != nil {
			return nil, err
		}
	}

	return tx.Packaging.Query().
		All(ctx)
}

// UpdatePackaging is the resolver for the updatePackaging field.
func (r *mutationResolver) UpdatePackaging(ctx context.Context, input ent.UpdatePackagingInput, inputPackagingUsps *ent.UpdatePackagingUSPSInput, inputPackagingDf *ent.CreatePackagingDFInput) ([]*ent.Packaging, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.Packaging.Update().
		SetInput(input).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Packaging.Query().
		All(ctx)
}

// ArchivePackaging is the resolver for the archivePackaging field.
func (r *mutationResolver) ArchivePackaging(ctx context.Context, id pulid.ID) (bool, error) {
	tx := ent.TxFromContext(ctx)

	err := tx.Packaging.Update().
		SetArchivedAt(time.Now()).
		Where(packaging.ID(id)).
		Exec(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// PackagingFiltered is the resolver for the packagingFiltered field.
func (r *queryResolver) PackagingFiltered(ctx context.Context, showArchived bool) ([]*ent.Packaging, error) {
	cli := ent.FromContext(ctx)

	if !showArchived {
		ctx = mixins.ExcludeArchived(ctx)
	}

	return cli.Packaging.Query().
		All(ctx)
}
