package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/utils"
	"entgo.io/ent/dialect/sql"
)

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, term string, filter []models.EntityType) ([]*models.SearchResult, error) {
	output := make([]*models.SearchResult, 0)
	termSplit := strings.Split(term, "")
	termAny := strings.Join(termSplit, "%")

	searchOrders := false
	searchProducts := false

	if len(filter) == 0 {
		searchProducts = true
		searchOrders = true
	} else {

		for _, f := range filter {
			if f == models.EntityTypeProduct {
				searchProducts = true
			} else if f == models.EntityTypeOrder {
				searchOrders = true
			}
		}

	}

	if searchOrders {
		resultOrders, err := r.client.Order.Query().Where(
			order.Or(
				order.OrderPublicIDContainsFold(term),
				func(s *sql.Selector) {
					s.Where(sql.Like(order.FieldOrderPublicID, termAny))
				},
				func(s *sql.Selector) {
					s.Where(sql.Like(order.FieldCommentInternal, termAny))
				},
				func(s *sql.Selector) {
					s.Where(sql.Like(order.FieldCommentExternal, termAny))
				},
			),
		).Limit(5).
			All(ctx)

		if err != nil {
			return nil, err
		}

		for _, o := range resultOrders {
			output = append(output, &models.SearchResult{
				ID: o.ID,
				Title: fmt.Sprintf(
					"Order# %s | %s",
					o.OrderPublicID,
					o.CreatedAt.Format(time.Stamp),
				),
				Entity: models.EntityTypeOrder,
			})
		}
	}

	if searchProducts {
		resultProducts, err := r.client.Product.Query().WithProductVariant().Where(
			product.Or(
				product.TitleContainsFold(term),
				func(s *sql.Selector) {
					s.Where(sql.Like(product.FieldBodyHTML, termAny))
				},
			),
		).Limit(5).
			All(ctx)
		if err != nil {
			return nil, err
		}

		for _, p := range resultProducts {
			img, err := utils.DefaultProductImg(ctx, p)
			if err != nil {
				return nil, err
			}

			output = append(output, &models.SearchResult{
				ID: p.ID,
				Title: fmt.Sprintf(
					"%s %s",
					p.Title,
					p.Edges.ProductVariant[0].Description,
				),
				ImagePath: &img,
				Entity:    models.EntityTypeProduct,
			})
		}
	}

	return output, nil
}
