package gengql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/gengql/generated/models"
	"delivrio.io/go/schema"
	"delivrio.io/go/viewer"
	"delivrio.io/shared-utils/pulid"
	"github.com/99designs/gqlgen/graphql"
)

// CreateCarrierAgreement is the resolver for the createCarrierAgreement field.
func (r *mutationResolver) CreateCarrierAgreement(ctx context.Context, name string, carrierBrand pulid.ID) (*models.CreateCarrierAgreementSuccess, error) {
	v := viewer.FromContext(ctx)
	tx := ent.FromContext(ctx)

	cb, err := tx.CarrierBrand.Query().
		Where(carrierbrand.ID(carrierBrand)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	createCarrier, err := tx.Carrier.Create().
		SetName(name).
		SetCarrierBrandID(carrierBrand).
		SetTenantID(v.TenantID()).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	switch cb.InternalID {
	case carrierbrand.InternalIDBring:
		_, err := tx.CarrierBring.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDBring,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDDAO:
		_, err := tx.CarrierDAO.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDDAO,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDDF:
		_, err := tx.CarrierDF.Create().
			SetCarrier(createCarrier).
			SetAgreementNumber("").
			SetCustomerID("").
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDDF,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDDSV:
		_, err := tx.CarrierDSV.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDDSV,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDEasyPost:
		_, err := tx.CarrierEasyPost.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			SetAPIKey("").
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDEasyPost,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDGLS:
		_, err := tx.CarrierGLS.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDGLS,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDPostNord:
		_, err := tx.CarrierPostNord.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDPostNord,
			ID:      createCarrier.ID,
		}, nil
	case carrierbrand.InternalIDUSPS:
		_, err := tx.CarrierUSPS.Create().
			SetCarrier(createCarrier).
			SetTenantID(v.TenantID()).
			Save(ctx)
		if err != nil {
			return nil, err
		}

		return &models.CreateCarrierAgreementSuccess{
			Carrier: carrierbrand.InternalIDUSPS,
			ID:      createCarrier.ID,
		}, nil
	}

	return nil, fmt.Errorf("could not find carrier brand %s", cb.InternalID)
}

// UpdateCarrierAgreementBring is the resolver for the updateCarrierAgreementBring field.
func (r *mutationResolver) UpdateCarrierAgreementBring(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierBringInput) (*ent.Carrier, error) {
	tx := ent.FromContext(ctx)

	_, err := tx.CarrierBring.Update().
		SetInput(input).
		Where(carrierbring.HasCarrierWith(carrier.ID(id))).
		Save(ctx)
	if err != nil {
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Carrier.Query().
		Where(carrier.ID(id)).
		Only(ctx)
}

// UpdateCarrierAgreementDao is the resolver for the updateCarrierAgreementDAO field.
func (r *mutationResolver) UpdateCarrierAgreementDao(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierDAOInput) (*ent.Carrier, error) {
	tx := ent.FromContext(ctx)

	_, err := tx.CarrierDAO.Update().
		SetInput(input).
		Where(carrierdao.HasCarrierWith(carrier.ID(id))).
		Save(ctx)
	if err != nil {
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Carrier.Query().
		Where(carrier.ID(id)).
		Only(ctx)
}

// UpdateCarrierAgreementDf is the resolver for the updateCarrierAgreementDF field.
func (r *mutationResolver) UpdateCarrierAgreementDf(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierDFInput) (*ent.Carrier, error) {
	tx := ent.FromContext(ctx)

	_, err := tx.CarrierDF.Update().
		SetInput(input).
		Where(carrierdf.HasCarrierWith(carrier.ID(id))).
		Save(ctx)
	if err != nil {
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Carrier.Query().
		Where(carrier.ID(id)).
		Only(ctx)
}

// UpdateCarrierAgreementDsv is the resolver for the updateCarrierAgreementDSV field.
func (r *mutationResolver) UpdateCarrierAgreementDsv(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierDSVInput) (*ent.Carrier, error) {
	tx := ent.FromContext(ctx)

	err := tx.CarrierDSV.Update().
		SetInput(input).
		Where(carrierdsv.HasCarrierWith(carrier.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Carrier.Query().
		Where(carrier.ID(id)).
		Only(ctx)
}

// UpdateCarrierAgreementEasyPost is the resolver for the updateCarrierAgreementEasyPost field.
func (r *mutationResolver) UpdateCarrierAgreementEasyPost(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierEasyPostInput) (*ent.Carrier, error) {
	tx := ent.FromContext(ctx)

	err := tx.CarrierEasyPost.Update().
		SetInput(input).
		Where(carriereasypost.HasCarrierWith(carrier.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.Carrier.Query().
		Where(carrier.ID(id)).
		Only(ctx)
}

// UpdateCarrierAgreementGls is the resolver for the updateCarrierAgreementGLS field.
func (r *mutationResolver) UpdateCarrierAgreementGls(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierGLSInput) (*ent.CarrierGLS, error) {
	tx := ent.FromContext(ctx)

	err := tx.CarrierGLS.Update().
		SetInput(input).
		Where(carriergls.HasCarrierWith(carrier.ID(id))).
		Exec(ctx)
	if err != nil {
		var fieldErrors schema.ErrCarrierGLSFields
		if errors.As(err, &fieldErrors) {
			for _, e := range fieldErrors.InvalidFields(ctx) {
				graphql.AddError(ctx, e)
			}
		}
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.CarrierGLS.Query().
		Where(carriergls.HasCarrierWith(carrier.ID(id))).
		Only(ctx)
}

// UpdateCarrierAgreementPostNord is the resolver for the updateCarrierAgreementPostNord field.
func (r *mutationResolver) UpdateCarrierAgreementPostNord(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierPostNordInput) (*ent.CarrierPostNord, error) {
	tx := ent.FromContext(ctx)

	err := tx.CarrierPostNord.Update().
		SetInput(input).
		Where(carrierpostnord.HasCarrierWith(carrier.ID(id))).
		Exec(ctx)
	if err != nil {
		var fieldErrors schema.ErrCarrierGLSFields
		if errors.As(err, &fieldErrors) {
			for _, e := range fieldErrors.InvalidFields(ctx) {
				graphql.AddError(ctx, e)
			}
		}
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.CarrierPostNord.Query().
		Where(carrierpostnord.HasCarrierWith(carrier.ID(id))).
		Only(ctx)
}

// UpdateCarrierAgreementUsps is the resolver for the updateCarrierAgreementUSPS field.
func (r *mutationResolver) UpdateCarrierAgreementUsps(ctx context.Context, id pulid.ID, name string, input ent.UpdateCarrierUSPSInput) (*ent.CarrierUSPS, error) {
	tx := ent.FromContext(ctx)

	err := tx.CarrierUSPS.Update().
		SetInput(input).
		Where(carrierusps.HasCarrierWith(carrier.ID(id))).
		Exec(ctx)
	if err != nil {
		return nil, err
	}
	_, err = tx.Carrier.Update().
		SetName(name).
		Where(carrier.ID(id)).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	return tx.CarrierUSPS.Query().
		Where(carrierusps.HasCarrierWith(carrier.ID(id))).
		Only(ctx)
}

// CarrierGls is the resolver for the carrierGLS field.
func (r *queryResolver) CarrierGls(ctx context.Context, id pulid.ID) (*ent.CarrierGLS, error) {
	return r.client.CarrierGLS.Query().
		Where(
			carriergls.HasCarrierWith(carrier.ID(id)),
		).Only(ctx)
}

// CarrierPostNord is the resolver for the carrierPostNord field.
func (r *queryResolver) CarrierPostNord(ctx context.Context, id pulid.ID) (*ent.CarrierPostNord, error) {
	return r.client.CarrierPostNord.Query().
		Where(
			carrierpostnord.HasCarrierWith(carrier.ID(id)),
		).Only(ctx)
}

// CarrierUsps is the resolver for the carrierUSPS field.
func (r *queryResolver) CarrierUsps(ctx context.Context, id pulid.ID) (*ent.CarrierUSPS, error) {
	return r.client.CarrierUSPS.Query().
		Where(
			carrierusps.HasCarrierWith(carrier.ID(id)),
		).Only(ctx)
}

// Carrier is the resolver for the carrier field.
func (r *queryResolver) Carrier(ctx context.Context, id *pulid.ID) (*ent.Carrier, error) {
	return r.client.Carrier.Query().
		Where(
			carrier.ID(*id),
		).Only(ctx)
}
