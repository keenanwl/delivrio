// Code generated by ent, DO NOT EDIT.

package connection

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldName, v))
}

// SyncOrders applies equality check predicate on the "sync_orders" field. It's identical to SyncOrdersEQ.
func SyncOrders(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldSyncOrders, v))
}

// SyncProducts applies equality check predicate on the "sync_products" field. It's identical to SyncProductsEQ.
func SyncProducts(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldSyncProducts, v))
}

// FulfillAutomatically applies equality check predicate on the "fulfill_automatically" field. It's identical to FulfillAutomaticallyEQ.
func FulfillAutomatically(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldFulfillAutomatically, v))
}

// DispatchAutomatically applies equality check predicate on the "dispatch_automatically" field. It's identical to DispatchAutomaticallyEQ.
func DispatchAutomatically(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldDispatchAutomatically, v))
}

// ConvertCurrency applies equality check predicate on the "convert_currency" field. It's identical to ConvertCurrencyEQ.
func ConvertCurrency(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldConvertCurrency, v))
}

// AutoPrintParcelSlip applies equality check predicate on the "auto_print_parcel_slip" field. It's identical to AutoPrintParcelSlipEQ.
func AutoPrintParcelSlip(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldAutoPrintParcelSlip, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Connection {
	vc := string(v)
	return predicate.Connection(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Connection {
	vc := string(v)
	return predicate.Connection(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Connection {
	vc := string(v)
	return predicate.Connection(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Connection {
	vc := string(v)
	return predicate.Connection(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Connection {
	vc := string(v)
	return predicate.Connection(sql.FieldContainsFold(FieldTenantID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Connection {
	return predicate.Connection(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Connection {
	return predicate.Connection(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Connection {
	return predicate.Connection(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Connection {
	return predicate.Connection(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Connection {
	return predicate.Connection(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Connection {
	return predicate.Connection(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Connection {
	return predicate.Connection(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Connection {
	return predicate.Connection(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Connection {
	return predicate.Connection(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Connection {
	return predicate.Connection(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Connection {
	return predicate.Connection(sql.FieldContainsFold(FieldName, v))
}

// SyncOrdersEQ applies the EQ predicate on the "sync_orders" field.
func SyncOrdersEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldSyncOrders, v))
}

// SyncOrdersNEQ applies the NEQ predicate on the "sync_orders" field.
func SyncOrdersNEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldSyncOrders, v))
}

// SyncProductsEQ applies the EQ predicate on the "sync_products" field.
func SyncProductsEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldSyncProducts, v))
}

// SyncProductsNEQ applies the NEQ predicate on the "sync_products" field.
func SyncProductsNEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldSyncProducts, v))
}

// FulfillAutomaticallyEQ applies the EQ predicate on the "fulfill_automatically" field.
func FulfillAutomaticallyEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldFulfillAutomatically, v))
}

// FulfillAutomaticallyNEQ applies the NEQ predicate on the "fulfill_automatically" field.
func FulfillAutomaticallyNEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldFulfillAutomatically, v))
}

// DispatchAutomaticallyEQ applies the EQ predicate on the "dispatch_automatically" field.
func DispatchAutomaticallyEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldDispatchAutomatically, v))
}

// DispatchAutomaticallyNEQ applies the NEQ predicate on the "dispatch_automatically" field.
func DispatchAutomaticallyNEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldDispatchAutomatically, v))
}

// ConvertCurrencyEQ applies the EQ predicate on the "convert_currency" field.
func ConvertCurrencyEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldConvertCurrency, v))
}

// ConvertCurrencyNEQ applies the NEQ predicate on the "convert_currency" field.
func ConvertCurrencyNEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldConvertCurrency, v))
}

// AutoPrintParcelSlipEQ applies the EQ predicate on the "auto_print_parcel_slip" field.
func AutoPrintParcelSlipEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldEQ(FieldAutoPrintParcelSlip, v))
}

// AutoPrintParcelSlipNEQ applies the NEQ predicate on the "auto_print_parcel_slip" field.
func AutoPrintParcelSlipNEQ(v bool) predicate.Connection {
	return predicate.Connection(sql.FieldNEQ(FieldAutoPrintParcelSlip, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectionBrand applies the HasEdge predicate on the "connection_brand" edge.
func HasConnectionBrand() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConnectionBrandTable, ConnectionBrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionBrandWith applies the HasEdge predicate on the "connection_brand" edge with a given conditions (other predicates).
func HasConnectionBrandWith(preds ...predicate.ConnectionBrand) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newConnectionBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectionShopify applies the HasEdge predicate on the "connection_shopify" edge.
func HasConnectionShopify() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ConnectionShopifyTable, ConnectionShopifyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionShopifyWith applies the HasEdge predicate on the "connection_shopify" edge with a given conditions (other predicates).
func HasConnectionShopifyWith(preds ...predicate.ConnectionShopify) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newConnectionShopifyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSenderLocation applies the HasEdge predicate on the "sender_location" edge.
func HasSenderLocation() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderLocationTable, SenderLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderLocationWith applies the HasEdge predicate on the "sender_location" edge with a given conditions (other predicates).
func HasSenderLocationWith(preds ...predicate.Location) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newSenderLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPickupLocation applies the HasEdge predicate on the "pickup_location" edge.
func HasPickupLocation() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PickupLocationTable, PickupLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPickupLocationWith applies the HasEdge predicate on the "pickup_location" edge with a given conditions (other predicates).
func HasPickupLocationWith(preds ...predicate.Location) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newPickupLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnLocation applies the HasEdge predicate on the "return_location" edge.
func HasReturnLocation() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReturnLocationTable, ReturnLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnLocationWith applies the HasEdge predicate on the "return_location" edge with a given conditions (other predicates).
func HasReturnLocationWith(preds ...predicate.Location) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newReturnLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerLocation applies the HasEdge predicate on the "seller_location" edge.
func HasSellerLocation() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SellerLocationTable, SellerLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerLocationWith applies the HasEdge predicate on the "seller_location" edge with a given conditions (other predicates).
func HasSellerLocationWith(preds ...predicate.Location) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newSellerLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultDeliveryOption applies the HasEdge predicate on the "default_delivery_option" edge.
func HasDefaultDeliveryOption() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DefaultDeliveryOptionTable, DefaultDeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultDeliveryOptionWith applies the HasEdge predicate on the "default_delivery_option" edge with a given conditions (other predicates).
func HasDefaultDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newDefaultDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortal applies the HasEdge predicate on the "return_portal" edge.
func HasReturnPortal() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ReturnPortalTable, ReturnPortalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalWith applies the HasEdge predicate on the "return_portal" edge with a given conditions (other predicates).
func HasReturnPortalWith(preds ...predicate.ReturnPortal) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newReturnPortalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTest applies the HasEdge predicate on the "hypothesis_test" edge.
func HasHypothesisTest() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, HypothesisTestTable, HypothesisTestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestWith applies the HasEdge predicate on the "hypothesis_test" edge with a given conditions (other predicates).
func HasHypothesisTestWith(preds ...predicate.HypothesisTest) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newHypothesisTestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCurrency applies the HasEdge predicate on the "currency" edge.
func HasCurrency() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CurrencyTable, CurrencyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyWith applies the HasEdge predicate on the "currency" edge with a given conditions (other predicates).
func HasCurrencyWith(preds ...predicate.Currency) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newCurrencyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackingSlipTemplate applies the HasEdge predicate on the "packing_slip_template" edge.
func HasPackingSlipTemplate() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackingSlipTemplateTable, PackingSlipTemplateColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackingSlipTemplateWith applies the HasEdge predicate on the "packing_slip_template" edge with a given conditions (other predicates).
func HasPackingSlipTemplateWith(preds ...predicate.Document) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newPackingSlipTemplateStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectionLookup applies the HasEdge predicate on the "connection_lookup" edge.
func HasConnectionLookup() predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ConnectionLookupTable, ConnectionLookupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionLookupWith applies the HasEdge predicate on the "connection_lookup" edge with a given conditions (other predicates).
func HasConnectionLookupWith(preds ...predicate.ConnectionLookup) predicate.Connection {
	return predicate.Connection(func(s *sql.Selector) {
		step := newConnectionLookupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Connection) predicate.Connection {
	return predicate.Connection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Connection) predicate.Connection {
	return predicate.Connection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Connection) predicate.Connection {
	return predicate.Connection(sql.NotPredicates(p))
}
