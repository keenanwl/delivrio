// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessHoursPeriodQuery is the builder for querying BusinessHoursPeriod entities.
type BusinessHoursPeriodQuery struct {
	config
	ctx            *QueryContext
	order          []businesshoursperiod.OrderOption
	inters         []Interceptor
	predicates     []predicate.BusinessHoursPeriod
	withParcelShop *ParcelShopQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*BusinessHoursPeriod) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BusinessHoursPeriodQuery builder.
func (bhpq *BusinessHoursPeriodQuery) Where(ps ...predicate.BusinessHoursPeriod) *BusinessHoursPeriodQuery {
	bhpq.predicates = append(bhpq.predicates, ps...)
	return bhpq
}

// Limit the number of records to be returned by this query.
func (bhpq *BusinessHoursPeriodQuery) Limit(limit int) *BusinessHoursPeriodQuery {
	bhpq.ctx.Limit = &limit
	return bhpq
}

// Offset to start from.
func (bhpq *BusinessHoursPeriodQuery) Offset(offset int) *BusinessHoursPeriodQuery {
	bhpq.ctx.Offset = &offset
	return bhpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bhpq *BusinessHoursPeriodQuery) Unique(unique bool) *BusinessHoursPeriodQuery {
	bhpq.ctx.Unique = &unique
	return bhpq
}

// Order specifies how the records should be ordered.
func (bhpq *BusinessHoursPeriodQuery) Order(o ...businesshoursperiod.OrderOption) *BusinessHoursPeriodQuery {
	bhpq.order = append(bhpq.order, o...)
	return bhpq
}

// QueryParcelShop chains the current query on the "parcel_shop" edge.
func (bhpq *BusinessHoursPeriodQuery) QueryParcelShop() *ParcelShopQuery {
	query := (&ParcelShopClient{config: bhpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bhpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bhpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businesshoursperiod.Table, businesshoursperiod.FieldID, selector),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, businesshoursperiod.ParcelShopTable, businesshoursperiod.ParcelShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(bhpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BusinessHoursPeriod entity from the query.
// Returns a *NotFoundError when no BusinessHoursPeriod was found.
func (bhpq *BusinessHoursPeriodQuery) First(ctx context.Context) (*BusinessHoursPeriod, error) {
	nodes, err := bhpq.Limit(1).All(setContextOp(ctx, bhpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{businesshoursperiod.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) FirstX(ctx context.Context) *BusinessHoursPeriod {
	node, err := bhpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BusinessHoursPeriod ID from the query.
// Returns a *NotFoundError when no BusinessHoursPeriod ID was found.
func (bhpq *BusinessHoursPeriodQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = bhpq.Limit(1).IDs(setContextOp(ctx, bhpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{businesshoursperiod.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := bhpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BusinessHoursPeriod entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BusinessHoursPeriod entity is found.
// Returns a *NotFoundError when no BusinessHoursPeriod entities are found.
func (bhpq *BusinessHoursPeriodQuery) Only(ctx context.Context) (*BusinessHoursPeriod, error) {
	nodes, err := bhpq.Limit(2).All(setContextOp(ctx, bhpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{businesshoursperiod.Label}
	default:
		return nil, &NotSingularError{businesshoursperiod.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) OnlyX(ctx context.Context) *BusinessHoursPeriod {
	node, err := bhpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BusinessHoursPeriod ID in the query.
// Returns a *NotSingularError when more than one BusinessHoursPeriod ID is found.
// Returns a *NotFoundError when no entities are found.
func (bhpq *BusinessHoursPeriodQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = bhpq.Limit(2).IDs(setContextOp(ctx, bhpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{businesshoursperiod.Label}
	default:
		err = &NotSingularError{businesshoursperiod.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := bhpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BusinessHoursPeriods.
func (bhpq *BusinessHoursPeriodQuery) All(ctx context.Context) ([]*BusinessHoursPeriod, error) {
	ctx = setContextOp(ctx, bhpq.ctx, ent.OpQueryAll)
	if err := bhpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BusinessHoursPeriod, *BusinessHoursPeriodQuery]()
	return withInterceptors[[]*BusinessHoursPeriod](ctx, bhpq, qr, bhpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) AllX(ctx context.Context) []*BusinessHoursPeriod {
	nodes, err := bhpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BusinessHoursPeriod IDs.
func (bhpq *BusinessHoursPeriodQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if bhpq.ctx.Unique == nil && bhpq.path != nil {
		bhpq.Unique(true)
	}
	ctx = setContextOp(ctx, bhpq.ctx, ent.OpQueryIDs)
	if err = bhpq.Select(businesshoursperiod.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := bhpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bhpq *BusinessHoursPeriodQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bhpq.ctx, ent.OpQueryCount)
	if err := bhpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bhpq, querierCount[*BusinessHoursPeriodQuery](), bhpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) CountX(ctx context.Context) int {
	count, err := bhpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bhpq *BusinessHoursPeriodQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bhpq.ctx, ent.OpQueryExist)
	switch _, err := bhpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bhpq *BusinessHoursPeriodQuery) ExistX(ctx context.Context) bool {
	exist, err := bhpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BusinessHoursPeriodQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bhpq *BusinessHoursPeriodQuery) Clone() *BusinessHoursPeriodQuery {
	if bhpq == nil {
		return nil
	}
	return &BusinessHoursPeriodQuery{
		config:         bhpq.config,
		ctx:            bhpq.ctx.Clone(),
		order:          append([]businesshoursperiod.OrderOption{}, bhpq.order...),
		inters:         append([]Interceptor{}, bhpq.inters...),
		predicates:     append([]predicate.BusinessHoursPeriod{}, bhpq.predicates...),
		withParcelShop: bhpq.withParcelShop.Clone(),
		// clone intermediate query.
		sql:  bhpq.sql.Clone(),
		path: bhpq.path,
	}
}

// WithParcelShop tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop" edge. The optional arguments are used to configure the query builder of the edge.
func (bhpq *BusinessHoursPeriodQuery) WithParcelShop(opts ...func(*ParcelShopQuery)) *BusinessHoursPeriodQuery {
	query := (&ParcelShopClient{config: bhpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bhpq.withParcelShop = query
	return bhpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DayOfWeek businesshoursperiod.DayOfWeek `json:"day_of_week,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BusinessHoursPeriod.Query().
//		GroupBy(businesshoursperiod.FieldDayOfWeek).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bhpq *BusinessHoursPeriodQuery) GroupBy(field string, fields ...string) *BusinessHoursPeriodGroupBy {
	bhpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BusinessHoursPeriodGroupBy{build: bhpq}
	grbuild.flds = &bhpq.ctx.Fields
	grbuild.label = businesshoursperiod.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DayOfWeek businesshoursperiod.DayOfWeek `json:"day_of_week,omitempty"`
//	}
//
//	client.BusinessHoursPeriod.Query().
//		Select(businesshoursperiod.FieldDayOfWeek).
//		Scan(ctx, &v)
func (bhpq *BusinessHoursPeriodQuery) Select(fields ...string) *BusinessHoursPeriodSelect {
	bhpq.ctx.Fields = append(bhpq.ctx.Fields, fields...)
	sbuild := &BusinessHoursPeriodSelect{BusinessHoursPeriodQuery: bhpq}
	sbuild.label = businesshoursperiod.Label
	sbuild.flds, sbuild.scan = &bhpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BusinessHoursPeriodSelect configured with the given aggregations.
func (bhpq *BusinessHoursPeriodQuery) Aggregate(fns ...AggregateFunc) *BusinessHoursPeriodSelect {
	return bhpq.Select().Aggregate(fns...)
}

func (bhpq *BusinessHoursPeriodQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bhpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bhpq); err != nil {
				return err
			}
		}
	}
	for _, f := range bhpq.ctx.Fields {
		if !businesshoursperiod.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bhpq.path != nil {
		prev, err := bhpq.path(ctx)
		if err != nil {
			return err
		}
		bhpq.sql = prev
	}
	if businesshoursperiod.Policy == nil {
		return errors.New("ent: uninitialized businesshoursperiod.Policy (forgotten import ent/runtime?)")
	}
	if err := businesshoursperiod.Policy.EvalQuery(ctx, bhpq); err != nil {
		return err
	}
	return nil
}

func (bhpq *BusinessHoursPeriodQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BusinessHoursPeriod, error) {
	var (
		nodes       = []*BusinessHoursPeriod{}
		withFKs     = bhpq.withFKs
		_spec       = bhpq.querySpec()
		loadedTypes = [1]bool{
			bhpq.withParcelShop != nil,
		}
	)
	if bhpq.withParcelShop != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, businesshoursperiod.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BusinessHoursPeriod).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BusinessHoursPeriod{config: bhpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bhpq.modifiers) > 0 {
		_spec.Modifiers = bhpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bhpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bhpq.withParcelShop; query != nil {
		if err := bhpq.loadParcelShop(ctx, query, nodes, nil,
			func(n *BusinessHoursPeriod, e *ParcelShop) { n.Edges.ParcelShop = e }); err != nil {
			return nil, err
		}
	}
	for i := range bhpq.loadTotal {
		if err := bhpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bhpq *BusinessHoursPeriodQuery) loadParcelShop(ctx context.Context, query *ParcelShopQuery, nodes []*BusinessHoursPeriod, init func(*BusinessHoursPeriod), assign func(*BusinessHoursPeriod, *ParcelShop)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*BusinessHoursPeriod)
	for i := range nodes {
		if nodes[i].parcel_shop_business_hours_period == nil {
			continue
		}
		fk := *nodes[i].parcel_shop_business_hours_period
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(parcelshop.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parcel_shop_business_hours_period" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bhpq *BusinessHoursPeriodQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bhpq.querySpec()
	if len(bhpq.modifiers) > 0 {
		_spec.Modifiers = bhpq.modifiers
	}
	_spec.Node.Columns = bhpq.ctx.Fields
	if len(bhpq.ctx.Fields) > 0 {
		_spec.Unique = bhpq.ctx.Unique != nil && *bhpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bhpq.driver, _spec)
}

func (bhpq *BusinessHoursPeriodQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(businesshoursperiod.Table, businesshoursperiod.Columns, sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString))
	_spec.From = bhpq.sql
	if unique := bhpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bhpq.path != nil {
		_spec.Unique = true
	}
	if fields := bhpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businesshoursperiod.FieldID)
		for i := range fields {
			if fields[i] != businesshoursperiod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bhpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bhpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bhpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bhpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bhpq *BusinessHoursPeriodQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bhpq.driver.Dialect())
	t1 := builder.Table(businesshoursperiod.Table)
	columns := bhpq.ctx.Fields
	if len(columns) == 0 {
		columns = businesshoursperiod.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bhpq.sql != nil {
		selector = bhpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bhpq.ctx.Unique != nil && *bhpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bhpq.predicates {
		p(selector)
	}
	for _, p := range bhpq.order {
		p(selector)
	}
	if offset := bhpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bhpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BusinessHoursPeriodGroupBy is the group-by builder for BusinessHoursPeriod entities.
type BusinessHoursPeriodGroupBy struct {
	selector
	build *BusinessHoursPeriodQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bhpgb *BusinessHoursPeriodGroupBy) Aggregate(fns ...AggregateFunc) *BusinessHoursPeriodGroupBy {
	bhpgb.fns = append(bhpgb.fns, fns...)
	return bhpgb
}

// Scan applies the selector query and scans the result into the given value.
func (bhpgb *BusinessHoursPeriodGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bhpgb.build.ctx, ent.OpQueryGroupBy)
	if err := bhpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessHoursPeriodQuery, *BusinessHoursPeriodGroupBy](ctx, bhpgb.build, bhpgb, bhpgb.build.inters, v)
}

func (bhpgb *BusinessHoursPeriodGroupBy) sqlScan(ctx context.Context, root *BusinessHoursPeriodQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bhpgb.fns))
	for _, fn := range bhpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bhpgb.flds)+len(bhpgb.fns))
		for _, f := range *bhpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bhpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bhpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BusinessHoursPeriodSelect is the builder for selecting fields of BusinessHoursPeriod entities.
type BusinessHoursPeriodSelect struct {
	*BusinessHoursPeriodQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bhps *BusinessHoursPeriodSelect) Aggregate(fns ...AggregateFunc) *BusinessHoursPeriodSelect {
	bhps.fns = append(bhps.fns, fns...)
	return bhps
}

// Scan applies the selector query and scans the result into the given value.
func (bhps *BusinessHoursPeriodSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bhps.ctx, ent.OpQuerySelect)
	if err := bhps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessHoursPeriodQuery, *BusinessHoursPeriodSelect](ctx, bhps.BusinessHoursPeriodQuery, bhps, bhps.inters, v)
}

func (bhps *BusinessHoursPeriodSelect) sqlScan(ctx context.Context, root *BusinessHoursPeriodQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bhps.fns))
	for _, fn := range bhps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bhps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bhps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
