// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShipmentEasyPost is the model entity for the ShipmentEasyPost schema.
type ShipmentEasyPost struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// duplicate, may be dropped after verifying
	TrackingNumber string `json:"tracking_number,omitempty"`
	// EpShipmentID holds the value of the "ep_shipment_id" field.
	EpShipmentID string `json:"ep_shipment_id,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate float64 `json:"rate,omitempty"`
	// EstDeliveryDate holds the value of the "est_delivery_date" field.
	EstDeliveryDate time.Time `json:"est_delivery_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentEasyPostQuery when eager-loading is set.
	Edges                       ShipmentEasyPostEdges `json:"edges"`
	shipment_shipment_easy_post *pulid.ID
	selectValues                sql.SelectValues
}

// ShipmentEasyPostEdges holds the relations/edges for other nodes in the graph.
type ShipmentEasyPostEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEasyPostEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEasyPostEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentEasyPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmenteasypost.FieldID, shipmenteasypost.FieldTenantID:
			values[i] = new(pulid.ID)
		case shipmenteasypost.FieldRate:
			values[i] = new(sql.NullFloat64)
		case shipmenteasypost.FieldTrackingNumber, shipmenteasypost.FieldEpShipmentID:
			values[i] = new(sql.NullString)
		case shipmenteasypost.FieldEstDeliveryDate:
			values[i] = new(sql.NullTime)
		case shipmenteasypost.ForeignKeys[0]: // shipment_shipment_easy_post
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentEasyPost fields.
func (sep *ShipmentEasyPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmenteasypost.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sep.ID = *value
			}
		case shipmenteasypost.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				sep.TenantID = *value
			}
		case shipmenteasypost.FieldTrackingNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tracking_number", values[i])
			} else if value.Valid {
				sep.TrackingNumber = value.String
			}
		case shipmenteasypost.FieldEpShipmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ep_shipment_id", values[i])
			} else if value.Valid {
				sep.EpShipmentID = value.String
			}
		case shipmenteasypost.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				sep.Rate = value.Float64
			}
		case shipmenteasypost.FieldEstDeliveryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field est_delivery_date", values[i])
			} else if value.Valid {
				sep.EstDeliveryDate = value.Time
			}
		case shipmenteasypost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_shipment_easy_post", values[i])
			} else if value.Valid {
				sep.shipment_shipment_easy_post = new(pulid.ID)
				*sep.shipment_shipment_easy_post = *value.S.(*pulid.ID)
			}
		default:
			sep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentEasyPost.
// This includes values selected through modifiers, order, etc.
func (sep *ShipmentEasyPost) Value(name string) (ent.Value, error) {
	return sep.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ShipmentEasyPost entity.
func (sep *ShipmentEasyPost) QueryTenant() *TenantQuery {
	return NewShipmentEasyPostClient(sep.config).QueryTenant(sep)
}

// QueryShipment queries the "shipment" edge of the ShipmentEasyPost entity.
func (sep *ShipmentEasyPost) QueryShipment() *ShipmentQuery {
	return NewShipmentEasyPostClient(sep.config).QueryShipment(sep)
}

// Update returns a builder for updating this ShipmentEasyPost.
// Note that you need to call ShipmentEasyPost.Unwrap() before calling this method if this ShipmentEasyPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (sep *ShipmentEasyPost) Update() *ShipmentEasyPostUpdateOne {
	return NewShipmentEasyPostClient(sep.config).UpdateOne(sep)
}

// Unwrap unwraps the ShipmentEasyPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sep *ShipmentEasyPost) Unwrap() *ShipmentEasyPost {
	_tx, ok := sep.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentEasyPost is not a transactional entity")
	}
	sep.config.driver = _tx.drv
	return sep
}

// String implements the fmt.Stringer.
func (sep *ShipmentEasyPost) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentEasyPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sep.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sep.TenantID))
	builder.WriteString(", ")
	builder.WriteString("tracking_number=")
	builder.WriteString(sep.TrackingNumber)
	builder.WriteString(", ")
	builder.WriteString("ep_shipment_id=")
	builder.WriteString(sep.EpShipmentID)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", sep.Rate))
	builder.WriteString(", ")
	builder.WriteString("est_delivery_date=")
	builder.WriteString(sep.EstDeliveryDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentEasyPosts is a parsable slice of ShipmentEasyPost.
type ShipmentEasyPosts []*ShipmentEasyPost
