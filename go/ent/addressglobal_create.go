// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressGlobalCreate is the builder for creating a AddressGlobal entity.
type AddressGlobalCreate struct {
	config
	mutation *AddressGlobalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUniquenessID sets the "uniqueness_id" field.
func (agc *AddressGlobalCreate) SetUniquenessID(s string) *AddressGlobalCreate {
	agc.mutation.SetUniquenessID(s)
	return agc
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableUniquenessID(s *string) *AddressGlobalCreate {
	if s != nil {
		agc.SetUniquenessID(*s)
	}
	return agc
}

// SetCompany sets the "company" field.
func (agc *AddressGlobalCreate) SetCompany(s string) *AddressGlobalCreate {
	agc.mutation.SetCompany(s)
	return agc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableCompany(s *string) *AddressGlobalCreate {
	if s != nil {
		agc.SetCompany(*s)
	}
	return agc
}

// SetAddressOne sets the "address_one" field.
func (agc *AddressGlobalCreate) SetAddressOne(s string) *AddressGlobalCreate {
	agc.mutation.SetAddressOne(s)
	return agc
}

// SetAddressTwo sets the "address_two" field.
func (agc *AddressGlobalCreate) SetAddressTwo(s string) *AddressGlobalCreate {
	agc.mutation.SetAddressTwo(s)
	return agc
}

// SetNillableAddressTwo sets the "address_two" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableAddressTwo(s *string) *AddressGlobalCreate {
	if s != nil {
		agc.SetAddressTwo(*s)
	}
	return agc
}

// SetCity sets the "city" field.
func (agc *AddressGlobalCreate) SetCity(s string) *AddressGlobalCreate {
	agc.mutation.SetCity(s)
	return agc
}

// SetState sets the "state" field.
func (agc *AddressGlobalCreate) SetState(s string) *AddressGlobalCreate {
	agc.mutation.SetState(s)
	return agc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableState(s *string) *AddressGlobalCreate {
	if s != nil {
		agc.SetState(*s)
	}
	return agc
}

// SetZip sets the "zip" field.
func (agc *AddressGlobalCreate) SetZip(s string) *AddressGlobalCreate {
	agc.mutation.SetZip(s)
	return agc
}

// SetLatitude sets the "latitude" field.
func (agc *AddressGlobalCreate) SetLatitude(f float64) *AddressGlobalCreate {
	agc.mutation.SetLatitude(f)
	return agc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableLatitude(f *float64) *AddressGlobalCreate {
	if f != nil {
		agc.SetLatitude(*f)
	}
	return agc
}

// SetLongitude sets the "longitude" field.
func (agc *AddressGlobalCreate) SetLongitude(f float64) *AddressGlobalCreate {
	agc.mutation.SetLongitude(f)
	return agc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableLongitude(f *float64) *AddressGlobalCreate {
	if f != nil {
		agc.SetLongitude(*f)
	}
	return agc
}

// SetID sets the "id" field.
func (agc *AddressGlobalCreate) SetID(pu pulid.ID) *AddressGlobalCreate {
	agc.mutation.SetID(pu)
	return agc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableID(pu *pulid.ID) *AddressGlobalCreate {
	if pu != nil {
		agc.SetID(*pu)
	}
	return agc
}

// SetParcelShopPostNordDeliveryID sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity by ID.
func (agc *AddressGlobalCreate) SetParcelShopPostNordDeliveryID(id pulid.ID) *AddressGlobalCreate {
	agc.mutation.SetParcelShopPostNordDeliveryID(id)
	return agc
}

// SetNillableParcelShopPostNordDeliveryID sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity by ID if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableParcelShopPostNordDeliveryID(id *pulid.ID) *AddressGlobalCreate {
	if id != nil {
		agc = agc.SetParcelShopPostNordDeliveryID(*id)
	}
	return agc
}

// SetParcelShopPostNordDelivery sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity.
func (agc *AddressGlobalCreate) SetParcelShopPostNordDelivery(p *ParcelShopPostNord) *AddressGlobalCreate {
	return agc.SetParcelShopPostNordDeliveryID(p.ID)
}

// SetParcelShopBringDeliveryID sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity by ID.
func (agc *AddressGlobalCreate) SetParcelShopBringDeliveryID(id pulid.ID) *AddressGlobalCreate {
	agc.mutation.SetParcelShopBringDeliveryID(id)
	return agc
}

// SetNillableParcelShopBringDeliveryID sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity by ID if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableParcelShopBringDeliveryID(id *pulid.ID) *AddressGlobalCreate {
	if id != nil {
		agc = agc.SetParcelShopBringDeliveryID(*id)
	}
	return agc
}

// SetParcelShopBringDelivery sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity.
func (agc *AddressGlobalCreate) SetParcelShopBringDelivery(p *ParcelShopBring) *AddressGlobalCreate {
	return agc.SetParcelShopBringDeliveryID(p.ID)
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (agc *AddressGlobalCreate) SetParcelShopID(id pulid.ID) *AddressGlobalCreate {
	agc.mutation.SetParcelShopID(id)
	return agc
}

// SetNillableParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID if the given value is not nil.
func (agc *AddressGlobalCreate) SetNillableParcelShopID(id *pulid.ID) *AddressGlobalCreate {
	if id != nil {
		agc = agc.SetParcelShopID(*id)
	}
	return agc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (agc *AddressGlobalCreate) SetParcelShop(p *ParcelShop) *AddressGlobalCreate {
	return agc.SetParcelShopID(p.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (agc *AddressGlobalCreate) SetCountryID(id pulid.ID) *AddressGlobalCreate {
	agc.mutation.SetCountryID(id)
	return agc
}

// SetCountry sets the "country" edge to the Country entity.
func (agc *AddressGlobalCreate) SetCountry(c *Country) *AddressGlobalCreate {
	return agc.SetCountryID(c.ID)
}

// Mutation returns the AddressGlobalMutation object of the builder.
func (agc *AddressGlobalCreate) Mutation() *AddressGlobalMutation {
	return agc.mutation
}

// Save creates the AddressGlobal in the database.
func (agc *AddressGlobalCreate) Save(ctx context.Context) (*AddressGlobal, error) {
	if err := agc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, agc.sqlSave, agc.mutation, agc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agc *AddressGlobalCreate) SaveX(ctx context.Context) *AddressGlobal {
	v, err := agc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agc *AddressGlobalCreate) Exec(ctx context.Context) error {
	_, err := agc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agc *AddressGlobalCreate) ExecX(ctx context.Context) {
	if err := agc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agc *AddressGlobalCreate) defaults() error {
	if _, ok := agc.mutation.Latitude(); !ok {
		v := addressglobal.DefaultLatitude
		agc.mutation.SetLatitude(v)
	}
	if _, ok := agc.mutation.Longitude(); !ok {
		v := addressglobal.DefaultLongitude
		agc.mutation.SetLongitude(v)
	}
	if _, ok := agc.mutation.ID(); !ok {
		if addressglobal.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized addressglobal.DefaultID (forgotten import ent/runtime?)")
		}
		v := addressglobal.DefaultID()
		agc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (agc *AddressGlobalCreate) check() error {
	if _, ok := agc.mutation.AddressOne(); !ok {
		return &ValidationError{Name: "address_one", err: errors.New(`ent: missing required field "AddressGlobal.address_one"`)}
	}
	if _, ok := agc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "AddressGlobal.city"`)}
	}
	if _, ok := agc.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "AddressGlobal.zip"`)}
	}
	if _, ok := agc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "AddressGlobal.latitude"`)}
	}
	if _, ok := agc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "AddressGlobal.longitude"`)}
	}
	if len(agc.mutation.CountryIDs()) == 0 {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required edge "AddressGlobal.country"`)}
	}
	return nil
}

func (agc *AddressGlobalCreate) sqlSave(ctx context.Context) (*AddressGlobal, error) {
	if err := agc.check(); err != nil {
		return nil, err
	}
	_node, _spec := agc.createSpec()
	if err := sqlgraph.CreateNode(ctx, agc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	agc.mutation.id = &_node.ID
	agc.mutation.done = true
	return _node, nil
}

func (agc *AddressGlobalCreate) createSpec() (*AddressGlobal, *sqlgraph.CreateSpec) {
	var (
		_node = &AddressGlobal{config: agc.config}
		_spec = sqlgraph.NewCreateSpec(addressglobal.Table, sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString))
	)
	_spec.OnConflict = agc.conflict
	if id, ok := agc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agc.mutation.UniquenessID(); ok {
		_spec.SetField(addressglobal.FieldUniquenessID, field.TypeString, value)
		_node.UniquenessID = value
	}
	if value, ok := agc.mutation.Company(); ok {
		_spec.SetField(addressglobal.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := agc.mutation.AddressOne(); ok {
		_spec.SetField(addressglobal.FieldAddressOne, field.TypeString, value)
		_node.AddressOne = value
	}
	if value, ok := agc.mutation.AddressTwo(); ok {
		_spec.SetField(addressglobal.FieldAddressTwo, field.TypeString, value)
		_node.AddressTwo = value
	}
	if value, ok := agc.mutation.City(); ok {
		_spec.SetField(addressglobal.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := agc.mutation.State(); ok {
		_spec.SetField(addressglobal.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := agc.mutation.Zip(); ok {
		_spec.SetField(addressglobal.FieldZip, field.TypeString, value)
		_node.Zip = value
	}
	if value, ok := agc.mutation.Latitude(); ok {
		_spec.SetField(addressglobal.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := agc.mutation.Longitude(); ok {
		_spec.SetField(addressglobal.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if nodes := agc.mutation.ParcelShopPostNordDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopPostNordDeliveryTable,
			Columns: []string{addressglobal.ParcelShopPostNordDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_post_nord_address_delivery = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := agc.mutation.ParcelShopBringDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopBringDeliveryTable,
			Columns: []string{addressglobal.ParcelShopBringDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_bring_address_delivery = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := agc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopTable,
			Columns: []string{addressglobal.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_address = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := agc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   addressglobal.CountryTable,
			Columns: []string{addressglobal.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.address_global_country = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddressGlobal.Create().
//		SetUniquenessID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressGlobalUpsert) {
//			SetUniquenessID(v+v).
//		}).
//		Exec(ctx)
func (agc *AddressGlobalCreate) OnConflict(opts ...sql.ConflictOption) *AddressGlobalUpsertOne {
	agc.conflict = opts
	return &AddressGlobalUpsertOne{
		create: agc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddressGlobal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agc *AddressGlobalCreate) OnConflictColumns(columns ...string) *AddressGlobalUpsertOne {
	agc.conflict = append(agc.conflict, sql.ConflictColumns(columns...))
	return &AddressGlobalUpsertOne{
		create: agc,
	}
}

type (
	// AddressGlobalUpsertOne is the builder for "upsert"-ing
	//  one AddressGlobal node.
	AddressGlobalUpsertOne struct {
		create *AddressGlobalCreate
	}

	// AddressGlobalUpsert is the "OnConflict" setter.
	AddressGlobalUpsert struct {
		*sql.UpdateSet
	}
)

// SetUniquenessID sets the "uniqueness_id" field.
func (u *AddressGlobalUpsert) SetUniquenessID(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldUniquenessID, v)
	return u
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateUniquenessID() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldUniquenessID)
	return u
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *AddressGlobalUpsert) ClearUniquenessID() *AddressGlobalUpsert {
	u.SetNull(addressglobal.FieldUniquenessID)
	return u
}

// SetCompany sets the "company" field.
func (u *AddressGlobalUpsert) SetCompany(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateCompany() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *AddressGlobalUpsert) ClearCompany() *AddressGlobalUpsert {
	u.SetNull(addressglobal.FieldCompany)
	return u
}

// SetAddressOne sets the "address_one" field.
func (u *AddressGlobalUpsert) SetAddressOne(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldAddressOne, v)
	return u
}

// UpdateAddressOne sets the "address_one" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateAddressOne() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldAddressOne)
	return u
}

// SetAddressTwo sets the "address_two" field.
func (u *AddressGlobalUpsert) SetAddressTwo(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldAddressTwo, v)
	return u
}

// UpdateAddressTwo sets the "address_two" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateAddressTwo() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldAddressTwo)
	return u
}

// ClearAddressTwo clears the value of the "address_two" field.
func (u *AddressGlobalUpsert) ClearAddressTwo() *AddressGlobalUpsert {
	u.SetNull(addressglobal.FieldAddressTwo)
	return u
}

// SetCity sets the "city" field.
func (u *AddressGlobalUpsert) SetCity(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateCity() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *AddressGlobalUpsert) SetState(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateState() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *AddressGlobalUpsert) ClearState() *AddressGlobalUpsert {
	u.SetNull(addressglobal.FieldState)
	return u
}

// SetZip sets the "zip" field.
func (u *AddressGlobalUpsert) SetZip(v string) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldZip, v)
	return u
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateZip() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldZip)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *AddressGlobalUpsert) SetLatitude(v float64) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateLatitude() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *AddressGlobalUpsert) AddLatitude(v float64) *AddressGlobalUpsert {
	u.Add(addressglobal.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *AddressGlobalUpsert) SetLongitude(v float64) *AddressGlobalUpsert {
	u.Set(addressglobal.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AddressGlobalUpsert) UpdateLongitude() *AddressGlobalUpsert {
	u.SetExcluded(addressglobal.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *AddressGlobalUpsert) AddLongitude(v float64) *AddressGlobalUpsert {
	u.Add(addressglobal.FieldLongitude, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AddressGlobal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addressglobal.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressGlobalUpsertOne) UpdateNewValues() *AddressGlobalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(addressglobal.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddressGlobal.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddressGlobalUpsertOne) Ignore() *AddressGlobalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressGlobalUpsertOne) DoNothing() *AddressGlobalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressGlobalCreate.OnConflict
// documentation for more info.
func (u *AddressGlobalUpsertOne) Update(set func(*AddressGlobalUpsert)) *AddressGlobalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressGlobalUpsert{UpdateSet: update})
	}))
	return u
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *AddressGlobalUpsertOne) SetUniquenessID(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetUniquenessID(v)
	})
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateUniquenessID() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateUniquenessID()
	})
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *AddressGlobalUpsertOne) ClearUniquenessID() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearUniquenessID()
	})
}

// SetCompany sets the "company" field.
func (u *AddressGlobalUpsertOne) SetCompany(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateCompany() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *AddressGlobalUpsertOne) ClearCompany() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearCompany()
	})
}

// SetAddressOne sets the "address_one" field.
func (u *AddressGlobalUpsertOne) SetAddressOne(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetAddressOne(v)
	})
}

// UpdateAddressOne sets the "address_one" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateAddressOne() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateAddressOne()
	})
}

// SetAddressTwo sets the "address_two" field.
func (u *AddressGlobalUpsertOne) SetAddressTwo(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetAddressTwo(v)
	})
}

// UpdateAddressTwo sets the "address_two" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateAddressTwo() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateAddressTwo()
	})
}

// ClearAddressTwo clears the value of the "address_two" field.
func (u *AddressGlobalUpsertOne) ClearAddressTwo() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearAddressTwo()
	})
}

// SetCity sets the "city" field.
func (u *AddressGlobalUpsertOne) SetCity(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateCity() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *AddressGlobalUpsertOne) SetState(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateState() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *AddressGlobalUpsertOne) ClearState() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearState()
	})
}

// SetZip sets the "zip" field.
func (u *AddressGlobalUpsertOne) SetZip(v string) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateZip() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateZip()
	})
}

// SetLatitude sets the "latitude" field.
func (u *AddressGlobalUpsertOne) SetLatitude(v float64) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *AddressGlobalUpsertOne) AddLatitude(v float64) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateLatitude() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *AddressGlobalUpsertOne) SetLongitude(v float64) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *AddressGlobalUpsertOne) AddLongitude(v float64) *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AddressGlobalUpsertOne) UpdateLongitude() *AddressGlobalUpsertOne {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateLongitude()
	})
}

// Exec executes the query.
func (u *AddressGlobalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressGlobalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressGlobalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressGlobalUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AddressGlobalUpsertOne.ID is not supported by MySQL driver. Use AddressGlobalUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressGlobalUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressGlobalCreateBulk is the builder for creating many AddressGlobal entities in bulk.
type AddressGlobalCreateBulk struct {
	config
	err      error
	builders []*AddressGlobalCreate
	conflict []sql.ConflictOption
}

// Save creates the AddressGlobal entities in the database.
func (agcb *AddressGlobalCreateBulk) Save(ctx context.Context) ([]*AddressGlobal, error) {
	if agcb.err != nil {
		return nil, agcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agcb.builders))
	nodes := make([]*AddressGlobal, len(agcb.builders))
	mutators := make([]Mutator, len(agcb.builders))
	for i := range agcb.builders {
		func(i int, root context.Context) {
			builder := agcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressGlobalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = agcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agcb *AddressGlobalCreateBulk) SaveX(ctx context.Context) []*AddressGlobal {
	v, err := agcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agcb *AddressGlobalCreateBulk) Exec(ctx context.Context) error {
	_, err := agcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agcb *AddressGlobalCreateBulk) ExecX(ctx context.Context) {
	if err := agcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AddressGlobal.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressGlobalUpsert) {
//			SetUniquenessID(v+v).
//		}).
//		Exec(ctx)
func (agcb *AddressGlobalCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressGlobalUpsertBulk {
	agcb.conflict = opts
	return &AddressGlobalUpsertBulk{
		create: agcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AddressGlobal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (agcb *AddressGlobalCreateBulk) OnConflictColumns(columns ...string) *AddressGlobalUpsertBulk {
	agcb.conflict = append(agcb.conflict, sql.ConflictColumns(columns...))
	return &AddressGlobalUpsertBulk{
		create: agcb,
	}
}

// AddressGlobalUpsertBulk is the builder for "upsert"-ing
// a bulk of AddressGlobal nodes.
type AddressGlobalUpsertBulk struct {
	create *AddressGlobalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AddressGlobal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(addressglobal.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressGlobalUpsertBulk) UpdateNewValues() *AddressGlobalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(addressglobal.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AddressGlobal.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddressGlobalUpsertBulk) Ignore() *AddressGlobalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressGlobalUpsertBulk) DoNothing() *AddressGlobalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressGlobalCreateBulk.OnConflict
// documentation for more info.
func (u *AddressGlobalUpsertBulk) Update(set func(*AddressGlobalUpsert)) *AddressGlobalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressGlobalUpsert{UpdateSet: update})
	}))
	return u
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *AddressGlobalUpsertBulk) SetUniquenessID(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetUniquenessID(v)
	})
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateUniquenessID() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateUniquenessID()
	})
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *AddressGlobalUpsertBulk) ClearUniquenessID() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearUniquenessID()
	})
}

// SetCompany sets the "company" field.
func (u *AddressGlobalUpsertBulk) SetCompany(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateCompany() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *AddressGlobalUpsertBulk) ClearCompany() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearCompany()
	})
}

// SetAddressOne sets the "address_one" field.
func (u *AddressGlobalUpsertBulk) SetAddressOne(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetAddressOne(v)
	})
}

// UpdateAddressOne sets the "address_one" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateAddressOne() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateAddressOne()
	})
}

// SetAddressTwo sets the "address_two" field.
func (u *AddressGlobalUpsertBulk) SetAddressTwo(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetAddressTwo(v)
	})
}

// UpdateAddressTwo sets the "address_two" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateAddressTwo() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateAddressTwo()
	})
}

// ClearAddressTwo clears the value of the "address_two" field.
func (u *AddressGlobalUpsertBulk) ClearAddressTwo() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearAddressTwo()
	})
}

// SetCity sets the "city" field.
func (u *AddressGlobalUpsertBulk) SetCity(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateCity() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *AddressGlobalUpsertBulk) SetState(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateState() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *AddressGlobalUpsertBulk) ClearState() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.ClearState()
	})
}

// SetZip sets the "zip" field.
func (u *AddressGlobalUpsertBulk) SetZip(v string) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateZip() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateZip()
	})
}

// SetLatitude sets the "latitude" field.
func (u *AddressGlobalUpsertBulk) SetLatitude(v float64) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *AddressGlobalUpsertBulk) AddLatitude(v float64) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateLatitude() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *AddressGlobalUpsertBulk) SetLongitude(v float64) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *AddressGlobalUpsertBulk) AddLongitude(v float64) *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *AddressGlobalUpsertBulk) UpdateLongitude() *AddressGlobalUpsertBulk {
	return u.Update(func(s *AddressGlobalUpsert) {
		s.UpdateLongitude()
	})
}

// Exec executes the query.
func (u *AddressGlobalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressGlobalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressGlobalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressGlobalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
