// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentHistoryCreate is the builder for creating a ShipmentHistory entity.
type ShipmentHistoryCreate struct {
	config
	mutation *ShipmentHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (shc *ShipmentHistoryCreate) SetTenantID(pu pulid.ID) *ShipmentHistoryCreate {
	shc.mutation.SetTenantID(pu)
	return shc
}

// SetType sets the "type" field.
func (shc *ShipmentHistoryCreate) SetType(s shipmenthistory.Type) *ShipmentHistoryCreate {
	shc.mutation.SetType(s)
	return shc
}

// SetID sets the "id" field.
func (shc *ShipmentHistoryCreate) SetID(pu pulid.ID) *ShipmentHistoryCreate {
	shc.mutation.SetID(pu)
	return shc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shc *ShipmentHistoryCreate) SetNillableID(pu *pulid.ID) *ShipmentHistoryCreate {
	if pu != nil {
		shc.SetID(*pu)
	}
	return shc
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (shc *ShipmentHistoryCreate) SetChangeHistoryID(id pulid.ID) *ShipmentHistoryCreate {
	shc.mutation.SetChangeHistoryID(id)
	return shc
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (shc *ShipmentHistoryCreate) SetChangeHistory(c *ChangeHistory) *ShipmentHistoryCreate {
	return shc.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (shc *ShipmentHistoryCreate) SetTenant(t *Tenant) *ShipmentHistoryCreate {
	return shc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (shc *ShipmentHistoryCreate) SetShipmentID(id pulid.ID) *ShipmentHistoryCreate {
	shc.mutation.SetShipmentID(id)
	return shc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (shc *ShipmentHistoryCreate) SetShipment(s *Shipment) *ShipmentHistoryCreate {
	return shc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentHistoryMutation object of the builder.
func (shc *ShipmentHistoryCreate) Mutation() *ShipmentHistoryMutation {
	return shc.mutation
}

// Save creates the ShipmentHistory in the database.
func (shc *ShipmentHistoryCreate) Save(ctx context.Context) (*ShipmentHistory, error) {
	if err := shc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *ShipmentHistoryCreate) SaveX(ctx context.Context) *ShipmentHistory {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *ShipmentHistoryCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *ShipmentHistoryCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *ShipmentHistoryCreate) defaults() error {
	if _, ok := shc.mutation.ID(); !ok {
		if shipmenthistory.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmenthistory.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmenthistory.DefaultID()
		shc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (shc *ShipmentHistoryCreate) check() error {
	if _, ok := shc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentHistory.tenant_id"`)}
	}
	if _, ok := shc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ShipmentHistory.type"`)}
	}
	if v, ok := shc.mutation.GetType(); ok {
		if err := shipmenthistory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ShipmentHistory.type": %w`, err)}
		}
	}
	if len(shc.mutation.ChangeHistoryIDs()) == 0 {
		return &ValidationError{Name: "change_history", err: errors.New(`ent: missing required edge "ShipmentHistory.change_history"`)}
	}
	if len(shc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentHistory.tenant"`)}
	}
	if len(shc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentHistory.shipment"`)}
	}
	return nil
}

func (shc *ShipmentHistoryCreate) sqlSave(ctx context.Context) (*ShipmentHistory, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *ShipmentHistoryCreate) createSpec() (*ShipmentHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentHistory{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(shipmenthistory.Table, sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = shc.conflict
	if id, ok := shc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := shc.mutation.GetType(); ok {
		_spec.SetField(shipmenthistory.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := shc.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenthistory.ChangeHistoryTable,
			Columns: []string{shipmenthistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.change_history_shipment_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := shc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenthistory.TenantTable,
			Columns: []string{shipmenthistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := shc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenthistory.ShipmentTable,
			Columns: []string{shipmenthistory.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentHistory.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (shc *ShipmentHistoryCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentHistoryUpsertOne {
	shc.conflict = opts
	return &ShipmentHistoryUpsertOne{
		create: shc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (shc *ShipmentHistoryCreate) OnConflictColumns(columns ...string) *ShipmentHistoryUpsertOne {
	shc.conflict = append(shc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentHistoryUpsertOne{
		create: shc,
	}
}

type (
	// ShipmentHistoryUpsertOne is the builder for "upsert"-ing
	//  one ShipmentHistory node.
	ShipmentHistoryUpsertOne struct {
		create *ShipmentHistoryCreate
	}

	// ShipmentHistoryUpsert is the "OnConflict" setter.
	ShipmentHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentHistoryUpsert) SetTenantID(v pulid.ID) *ShipmentHistoryUpsert {
	u.Set(shipmenthistory.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentHistoryUpsert) UpdateTenantID() *ShipmentHistoryUpsert {
	u.SetExcluded(shipmenthistory.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmenthistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentHistoryUpsertOne) UpdateNewValues() *ShipmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmenthistory.FieldID)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(shipmenthistory.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentHistoryUpsertOne) Ignore() *ShipmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentHistoryUpsertOne) DoNothing() *ShipmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentHistoryCreate.OnConflict
// documentation for more info.
func (u *ShipmentHistoryUpsertOne) Update(set func(*ShipmentHistoryUpsert)) *ShipmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentHistoryUpsertOne) SetTenantID(v pulid.ID) *ShipmentHistoryUpsertOne {
	return u.Update(func(s *ShipmentHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentHistoryUpsertOne) UpdateTenantID() *ShipmentHistoryUpsertOne {
	return u.Update(func(s *ShipmentHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *ShipmentHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentHistoryUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentHistoryUpsertOne.ID is not supported by MySQL driver. Use ShipmentHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentHistoryUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentHistoryCreateBulk is the builder for creating many ShipmentHistory entities in bulk.
type ShipmentHistoryCreateBulk struct {
	config
	err      error
	builders []*ShipmentHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentHistory entities in the database.
func (shcb *ShipmentHistoryCreateBulk) Save(ctx context.Context) ([]*ShipmentHistory, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*ShipmentHistory, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = shcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *ShipmentHistoryCreateBulk) SaveX(ctx context.Context) []*ShipmentHistory {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *ShipmentHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *ShipmentHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (shcb *ShipmentHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentHistoryUpsertBulk {
	shcb.conflict = opts
	return &ShipmentHistoryUpsertBulk{
		create: shcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (shcb *ShipmentHistoryCreateBulk) OnConflictColumns(columns ...string) *ShipmentHistoryUpsertBulk {
	shcb.conflict = append(shcb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentHistoryUpsertBulk{
		create: shcb,
	}
}

// ShipmentHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentHistory nodes.
type ShipmentHistoryUpsertBulk struct {
	create *ShipmentHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmenthistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentHistoryUpsertBulk) UpdateNewValues() *ShipmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmenthistory.FieldID)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(shipmenthistory.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentHistoryUpsertBulk) Ignore() *ShipmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentHistoryUpsertBulk) DoNothing() *ShipmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentHistoryUpsertBulk) Update(set func(*ShipmentHistoryUpsert)) *ShipmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentHistoryUpsertBulk) SetTenantID(v pulid.ID) *ShipmentHistoryUpsertBulk {
	return u.Update(func(s *ShipmentHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentHistoryUpsertBulk) UpdateTenantID() *ShipmentHistoryUpsertBulk {
	return u.Update(func(s *ShipmentHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *ShipmentHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
