// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocationTagUpdate is the builder for updating LocationTag entities.
type LocationTagUpdate struct {
	config
	hooks    []Hook
	mutation *LocationTagMutation
}

// Where appends a list predicates to the LocationTagUpdate builder.
func (ltu *LocationTagUpdate) Where(ps ...predicate.LocationTag) *LocationTagUpdate {
	ltu.mutation.Where(ps...)
	return ltu
}

// SetLabel sets the "label" field.
func (ltu *LocationTagUpdate) SetLabel(s string) *LocationTagUpdate {
	ltu.mutation.SetLabel(s)
	return ltu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ltu *LocationTagUpdate) SetNillableLabel(s *string) *LocationTagUpdate {
	if s != nil {
		ltu.SetLabel(*s)
	}
	return ltu
}

// SetInternalID sets the "internal_id" field.
func (ltu *LocationTagUpdate) SetInternalID(s string) *LocationTagUpdate {
	ltu.mutation.SetInternalID(s)
	return ltu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (ltu *LocationTagUpdate) SetNillableInternalID(s *string) *LocationTagUpdate {
	if s != nil {
		ltu.SetInternalID(*s)
	}
	return ltu
}

// AddLocationIDs adds the "location" edge to the Location entity by IDs.
func (ltu *LocationTagUpdate) AddLocationIDs(ids ...pulid.ID) *LocationTagUpdate {
	ltu.mutation.AddLocationIDs(ids...)
	return ltu
}

// AddLocation adds the "location" edges to the Location entity.
func (ltu *LocationTagUpdate) AddLocation(l ...*Location) *LocationTagUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltu.AddLocationIDs(ids...)
}

// Mutation returns the LocationTagMutation object of the builder.
func (ltu *LocationTagUpdate) Mutation() *LocationTagMutation {
	return ltu.mutation
}

// ClearLocation clears all "location" edges to the Location entity.
func (ltu *LocationTagUpdate) ClearLocation() *LocationTagUpdate {
	ltu.mutation.ClearLocation()
	return ltu
}

// RemoveLocationIDs removes the "location" edge to Location entities by IDs.
func (ltu *LocationTagUpdate) RemoveLocationIDs(ids ...pulid.ID) *LocationTagUpdate {
	ltu.mutation.RemoveLocationIDs(ids...)
	return ltu
}

// RemoveLocation removes "location" edges to Location entities.
func (ltu *LocationTagUpdate) RemoveLocation(l ...*Location) *LocationTagUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltu.RemoveLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ltu *LocationTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ltu.sqlSave, ltu.mutation, ltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltu *LocationTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ltu *LocationTagUpdate) Exec(ctx context.Context) error {
	_, err := ltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltu *LocationTagUpdate) ExecX(ctx context.Context) {
	if err := ltu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ltu *LocationTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(locationtag.Table, locationtag.Columns, sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString))
	if ps := ltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltu.mutation.Label(); ok {
		_spec.SetField(locationtag.FieldLabel, field.TypeString, value)
	}
	if value, ok := ltu.mutation.InternalID(); ok {
		_spec.SetField(locationtag.FieldInternalID, field.TypeString, value)
	}
	if ltu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.RemovedLocationIDs(); len(nodes) > 0 && !ltu.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltu.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{locationtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ltu.mutation.done = true
	return n, nil
}

// LocationTagUpdateOne is the builder for updating a single LocationTag entity.
type LocationTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocationTagMutation
}

// SetLabel sets the "label" field.
func (ltuo *LocationTagUpdateOne) SetLabel(s string) *LocationTagUpdateOne {
	ltuo.mutation.SetLabel(s)
	return ltuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ltuo *LocationTagUpdateOne) SetNillableLabel(s *string) *LocationTagUpdateOne {
	if s != nil {
		ltuo.SetLabel(*s)
	}
	return ltuo
}

// SetInternalID sets the "internal_id" field.
func (ltuo *LocationTagUpdateOne) SetInternalID(s string) *LocationTagUpdateOne {
	ltuo.mutation.SetInternalID(s)
	return ltuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (ltuo *LocationTagUpdateOne) SetNillableInternalID(s *string) *LocationTagUpdateOne {
	if s != nil {
		ltuo.SetInternalID(*s)
	}
	return ltuo
}

// AddLocationIDs adds the "location" edge to the Location entity by IDs.
func (ltuo *LocationTagUpdateOne) AddLocationIDs(ids ...pulid.ID) *LocationTagUpdateOne {
	ltuo.mutation.AddLocationIDs(ids...)
	return ltuo
}

// AddLocation adds the "location" edges to the Location entity.
func (ltuo *LocationTagUpdateOne) AddLocation(l ...*Location) *LocationTagUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltuo.AddLocationIDs(ids...)
}

// Mutation returns the LocationTagMutation object of the builder.
func (ltuo *LocationTagUpdateOne) Mutation() *LocationTagMutation {
	return ltuo.mutation
}

// ClearLocation clears all "location" edges to the Location entity.
func (ltuo *LocationTagUpdateOne) ClearLocation() *LocationTagUpdateOne {
	ltuo.mutation.ClearLocation()
	return ltuo
}

// RemoveLocationIDs removes the "location" edge to Location entities by IDs.
func (ltuo *LocationTagUpdateOne) RemoveLocationIDs(ids ...pulid.ID) *LocationTagUpdateOne {
	ltuo.mutation.RemoveLocationIDs(ids...)
	return ltuo
}

// RemoveLocation removes "location" edges to Location entities.
func (ltuo *LocationTagUpdateOne) RemoveLocation(l ...*Location) *LocationTagUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltuo.RemoveLocationIDs(ids...)
}

// Where appends a list predicates to the LocationTagUpdate builder.
func (ltuo *LocationTagUpdateOne) Where(ps ...predicate.LocationTag) *LocationTagUpdateOne {
	ltuo.mutation.Where(ps...)
	return ltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ltuo *LocationTagUpdateOne) Select(field string, fields ...string) *LocationTagUpdateOne {
	ltuo.fields = append([]string{field}, fields...)
	return ltuo
}

// Save executes the query and returns the updated LocationTag entity.
func (ltuo *LocationTagUpdateOne) Save(ctx context.Context) (*LocationTag, error) {
	return withHooks(ctx, ltuo.sqlSave, ltuo.mutation, ltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ltuo *LocationTagUpdateOne) SaveX(ctx context.Context) *LocationTag {
	node, err := ltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ltuo *LocationTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltuo *LocationTagUpdateOne) ExecX(ctx context.Context) {
	if err := ltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ltuo *LocationTagUpdateOne) sqlSave(ctx context.Context) (_node *LocationTag, err error) {
	_spec := sqlgraph.NewUpdateSpec(locationtag.Table, locationtag.Columns, sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString))
	id, ok := ltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LocationTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, locationtag.FieldID)
		for _, f := range fields {
			if !locationtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != locationtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ltuo.mutation.Label(); ok {
		_spec.SetField(locationtag.FieldLabel, field.TypeString, value)
	}
	if value, ok := ltuo.mutation.InternalID(); ok {
		_spec.SetField(locationtag.FieldInternalID, field.TypeString, value)
	}
	if ltuo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.RemovedLocationIDs(); len(nodes) > 0 && !ltuo.mutation.LocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ltuo.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LocationTag{config: ltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{locationtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ltuo.mutation.done = true
	return _node, nil
}
