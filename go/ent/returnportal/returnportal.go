// Code generated by ent, DO NOT EDIT.

package returnportal

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the returnportal type in the database.
	Label = "return_portal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldReturnOpenHours holds the string denoting the return_open_hours field in the database.
	FieldReturnOpenHours = "return_open_hours"
	// FieldAutomaticallyAccept holds the string denoting the automatically_accept field in the database.
	FieldAutomaticallyAccept = "automatically_accept"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeReturnPortalClaim holds the string denoting the return_portal_claim edge name in mutations.
	EdgeReturnPortalClaim = "return_portal_claim"
	// EdgeReturnLocation holds the string denoting the return_location edge name in mutations.
	EdgeReturnLocation = "return_location"
	// EdgeDeliveryOptions holds the string denoting the delivery_options edge name in mutations.
	EdgeDeliveryOptions = "delivery_options"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// EdgeEmailConfirmationLabel holds the string denoting the email_confirmation_label edge name in mutations.
	EdgeEmailConfirmationLabel = "email_confirmation_label"
	// EdgeEmailConfirmationQrCode holds the string denoting the email_confirmation_qr_code edge name in mutations.
	EdgeEmailConfirmationQrCode = "email_confirmation_qr_code"
	// EdgeEmailReceived holds the string denoting the email_received edge name in mutations.
	EdgeEmailReceived = "email_received"
	// EdgeEmailAccepted holds the string denoting the email_accepted edge name in mutations.
	EdgeEmailAccepted = "email_accepted"
	// EdgeReturnColli holds the string denoting the return_colli edge name in mutations.
	EdgeReturnColli = "return_colli"
	// Table holds the table name of the returnportal in the database.
	Table = "return_portals"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "return_portals"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ReturnPortalClaimTable is the table that holds the return_portal_claim relation/edge.
	ReturnPortalClaimTable = "return_portal_claims"
	// ReturnPortalClaimInverseTable is the table name for the ReturnPortalClaim entity.
	// It exists in this package in order to avoid circular dependency with the "returnportalclaim" package.
	ReturnPortalClaimInverseTable = "return_portal_claims"
	// ReturnPortalClaimColumn is the table column denoting the return_portal_claim relation/edge.
	ReturnPortalClaimColumn = "return_portal_return_portal_claim"
	// ReturnLocationTable is the table that holds the return_location relation/edge. The primary key declared below.
	ReturnLocationTable = "return_portal_return_location"
	// ReturnLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	ReturnLocationInverseTable = "locations"
	// DeliveryOptionsTable is the table that holds the delivery_options relation/edge. The primary key declared below.
	DeliveryOptionsTable = "return_portal_delivery_options"
	// DeliveryOptionsInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionsInverseTable = "delivery_options"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "connections"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "return_portal_connection"
	// EmailConfirmationLabelTable is the table that holds the email_confirmation_label relation/edge.
	EmailConfirmationLabelTable = "return_portals"
	// EmailConfirmationLabelInverseTable is the table name for the EmailTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "emailtemplate" package.
	EmailConfirmationLabelInverseTable = "email_templates"
	// EmailConfirmationLabelColumn is the table column denoting the email_confirmation_label relation/edge.
	EmailConfirmationLabelColumn = "return_portal_email_confirmation_label"
	// EmailConfirmationQrCodeTable is the table that holds the email_confirmation_qr_code relation/edge.
	EmailConfirmationQrCodeTable = "return_portals"
	// EmailConfirmationQrCodeInverseTable is the table name for the EmailTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "emailtemplate" package.
	EmailConfirmationQrCodeInverseTable = "email_templates"
	// EmailConfirmationQrCodeColumn is the table column denoting the email_confirmation_qr_code relation/edge.
	EmailConfirmationQrCodeColumn = "return_portal_email_confirmation_qr_code"
	// EmailReceivedTable is the table that holds the email_received relation/edge.
	EmailReceivedTable = "return_portals"
	// EmailReceivedInverseTable is the table name for the EmailTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "emailtemplate" package.
	EmailReceivedInverseTable = "email_templates"
	// EmailReceivedColumn is the table column denoting the email_received relation/edge.
	EmailReceivedColumn = "return_portal_email_received"
	// EmailAcceptedTable is the table that holds the email_accepted relation/edge.
	EmailAcceptedTable = "return_portals"
	// EmailAcceptedInverseTable is the table name for the EmailTemplate entity.
	// It exists in this package in order to avoid circular dependency with the "emailtemplate" package.
	EmailAcceptedInverseTable = "email_templates"
	// EmailAcceptedColumn is the table column denoting the email_accepted relation/edge.
	EmailAcceptedColumn = "return_portal_email_accepted"
	// ReturnColliTable is the table that holds the return_colli relation/edge.
	ReturnColliTable = "return_collis"
	// ReturnColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnColliInverseTable = "return_collis"
	// ReturnColliColumn is the table column denoting the return_colli relation/edge.
	ReturnColliColumn = "return_colli_return_portal"
)

// Columns holds all SQL columns for returnportal fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldReturnOpenHours,
	FieldAutomaticallyAccept,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "return_portals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"return_portal_email_confirmation_label",
	"return_portal_email_confirmation_qr_code",
	"return_portal_email_received",
	"return_portal_email_accepted",
}

var (
	// ReturnLocationPrimaryKey and ReturnLocationColumn2 are the table columns denoting the
	// primary key for the return_location relation (M2M).
	ReturnLocationPrimaryKey = []string{"return_portal_id", "location_id"}
	// DeliveryOptionsPrimaryKey and DeliveryOptionsColumn2 are the table columns denoting the
	// primary key for the delivery_options relation (M2M).
	DeliveryOptionsPrimaryKey = []string{"return_portal_id", "delivery_option_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultReturnOpenHours holds the default value on creation for the "return_open_hours" field.
	DefaultReturnOpenHours int
	// DefaultAutomaticallyAccept holds the default value on creation for the "automatically_accept" field.
	DefaultAutomaticallyAccept bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ReturnPortal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByReturnOpenHours orders the results by the return_open_hours field.
func ByReturnOpenHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReturnOpenHours, opts...).ToFunc()
}

// ByAutomaticallyAccept orders the results by the automatically_accept field.
func ByAutomaticallyAccept(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutomaticallyAccept, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnPortalClaimCount orders the results by return_portal_claim count.
func ByReturnPortalClaimCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalClaimStep(), opts...)
	}
}

// ByReturnPortalClaim orders the results by return_portal_claim terms.
func ByReturnPortalClaim(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalClaimStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnLocationCount orders the results by return_location count.
func ByReturnLocationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnLocationStep(), opts...)
	}
}

// ByReturnLocation orders the results by return_location terms.
func ByReturnLocation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnLocationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionsCount orders the results by delivery_options count.
func ByDeliveryOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionsStep(), opts...)
	}
}

// ByDeliveryOptions orders the results by delivery_options terms.
func ByDeliveryOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConnectionField orders the results by connection field.
func ByConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmailConfirmationLabelField orders the results by email_confirmation_label field.
func ByEmailConfirmationLabelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailConfirmationLabelStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmailConfirmationQrCodeField orders the results by email_confirmation_qr_code field.
func ByEmailConfirmationQrCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailConfirmationQrCodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmailReceivedField orders the results by email_received field.
func ByEmailReceivedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailReceivedStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmailAcceptedField orders the results by email_accepted field.
func ByEmailAcceptedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmailAcceptedStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnColliCount orders the results by return_colli count.
func ByReturnColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnColliStep(), opts...)
	}
}

// ByReturnColli orders the results by return_colli terms.
func ByReturnColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newReturnPortalClaimStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalClaimInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReturnPortalClaimTable, ReturnPortalClaimColumn),
	)
}
func newReturnLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReturnLocationTable, ReturnLocationPrimaryKey...),
	)
}
func newDeliveryOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DeliveryOptionsTable, DeliveryOptionsPrimaryKey...),
	)
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ConnectionTable, ConnectionColumn),
	)
}
func newEmailConfirmationLabelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailConfirmationLabelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmailConfirmationLabelTable, EmailConfirmationLabelColumn),
	)
}
func newEmailConfirmationQrCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailConfirmationQrCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmailConfirmationQrCodeTable, EmailConfirmationQrCodeColumn),
	)
}
func newEmailReceivedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailReceivedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmailReceivedTable, EmailReceivedColumn),
	)
}
func newEmailAcceptedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmailAcceptedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmailAcceptedTable, EmailAcceptedColumn),
	)
}
func newReturnColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnColliTable, ReturnColliColumn),
	)
}
