// Code generated by ent, DO NOT EDIT.

package returnportal

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldName, v))
}

// ReturnOpenHours applies equality check predicate on the "return_open_hours" field. It's identical to ReturnOpenHoursEQ.
func ReturnOpenHours(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldReturnOpenHours, v))
}

// AutomaticallyAccept applies equality check predicate on the "automatically_accept" field. It's identical to AutomaticallyAcceptEQ.
func AutomaticallyAccept(v bool) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldAutomaticallyAccept, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ReturnPortal {
	vc := string(v)
	return predicate.ReturnPortal(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ReturnPortal {
	vc := string(v)
	return predicate.ReturnPortal(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ReturnPortal {
	vc := string(v)
	return predicate.ReturnPortal(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ReturnPortal {
	vc := string(v)
	return predicate.ReturnPortal(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ReturnPortal {
	vc := string(v)
	return predicate.ReturnPortal(sql.FieldContainsFold(FieldTenantID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldContainsFold(FieldName, v))
}

// ReturnOpenHoursEQ applies the EQ predicate on the "return_open_hours" field.
func ReturnOpenHoursEQ(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldReturnOpenHours, v))
}

// ReturnOpenHoursNEQ applies the NEQ predicate on the "return_open_hours" field.
func ReturnOpenHoursNEQ(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNEQ(FieldReturnOpenHours, v))
}

// ReturnOpenHoursIn applies the In predicate on the "return_open_hours" field.
func ReturnOpenHoursIn(vs ...int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldIn(FieldReturnOpenHours, vs...))
}

// ReturnOpenHoursNotIn applies the NotIn predicate on the "return_open_hours" field.
func ReturnOpenHoursNotIn(vs ...int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNotIn(FieldReturnOpenHours, vs...))
}

// ReturnOpenHoursGT applies the GT predicate on the "return_open_hours" field.
func ReturnOpenHoursGT(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGT(FieldReturnOpenHours, v))
}

// ReturnOpenHoursGTE applies the GTE predicate on the "return_open_hours" field.
func ReturnOpenHoursGTE(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldGTE(FieldReturnOpenHours, v))
}

// ReturnOpenHoursLT applies the LT predicate on the "return_open_hours" field.
func ReturnOpenHoursLT(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLT(FieldReturnOpenHours, v))
}

// ReturnOpenHoursLTE applies the LTE predicate on the "return_open_hours" field.
func ReturnOpenHoursLTE(v int) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldLTE(FieldReturnOpenHours, v))
}

// AutomaticallyAcceptEQ applies the EQ predicate on the "automatically_accept" field.
func AutomaticallyAcceptEQ(v bool) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldEQ(FieldAutomaticallyAccept, v))
}

// AutomaticallyAcceptNEQ applies the NEQ predicate on the "automatically_accept" field.
func AutomaticallyAcceptNEQ(v bool) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.FieldNEQ(FieldAutomaticallyAccept, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortalClaim applies the HasEdge predicate on the "return_portal_claim" edge.
func HasReturnPortalClaim() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReturnPortalClaimTable, ReturnPortalClaimColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalClaimWith applies the HasEdge predicate on the "return_portal_claim" edge with a given conditions (other predicates).
func HasReturnPortalClaimWith(preds ...predicate.ReturnPortalClaim) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newReturnPortalClaimStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnLocation applies the HasEdge predicate on the "return_location" edge.
func HasReturnLocation() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReturnLocationTable, ReturnLocationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnLocationWith applies the HasEdge predicate on the "return_location" edge with a given conditions (other predicates).
func HasReturnLocationWith(preds ...predicate.Location) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newReturnLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptions applies the HasEdge predicate on the "delivery_options" edge.
func HasDeliveryOptions() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DeliveryOptionsTable, DeliveryOptionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionsWith applies the HasEdge predicate on the "delivery_options" edge with a given conditions (other predicates).
func HasDeliveryOptionsWith(preds ...predicate.DeliveryOption) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newDeliveryOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnection applies the HasEdge predicate on the "connection" edge.
func HasConnection() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ConnectionTable, ConnectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionWith applies the HasEdge predicate on the "connection" edge with a given conditions (other predicates).
func HasConnectionWith(preds ...predicate.Connection) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newConnectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailConfirmationLabel applies the HasEdge predicate on the "email_confirmation_label" edge.
func HasEmailConfirmationLabel() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmailConfirmationLabelTable, EmailConfirmationLabelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailConfirmationLabelWith applies the HasEdge predicate on the "email_confirmation_label" edge with a given conditions (other predicates).
func HasEmailConfirmationLabelWith(preds ...predicate.EmailTemplate) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newEmailConfirmationLabelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailConfirmationQrCode applies the HasEdge predicate on the "email_confirmation_qr_code" edge.
func HasEmailConfirmationQrCode() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmailConfirmationQrCodeTable, EmailConfirmationQrCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailConfirmationQrCodeWith applies the HasEdge predicate on the "email_confirmation_qr_code" edge with a given conditions (other predicates).
func HasEmailConfirmationQrCodeWith(preds ...predicate.EmailTemplate) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newEmailConfirmationQrCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailReceived applies the HasEdge predicate on the "email_received" edge.
func HasEmailReceived() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmailReceivedTable, EmailReceivedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailReceivedWith applies the HasEdge predicate on the "email_received" edge with a given conditions (other predicates).
func HasEmailReceivedWith(preds ...predicate.EmailTemplate) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newEmailReceivedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmailAccepted applies the HasEdge predicate on the "email_accepted" edge.
func HasEmailAccepted() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmailAcceptedTable, EmailAcceptedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmailAcceptedWith applies the HasEdge predicate on the "email_accepted" edge with a given conditions (other predicates).
func HasEmailAcceptedWith(preds ...predicate.EmailTemplate) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newEmailAcceptedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnColli applies the HasEdge predicate on the "return_colli" edge.
func HasReturnColli() predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnColliTable, ReturnColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnColliWith applies the HasEdge predicate on the "return_colli" edge with a given conditions (other predicates).
func HasReturnColliWith(preds ...predicate.ReturnColli) predicate.ReturnPortal {
	return predicate.ReturnPortal(func(s *sql.Selector) {
		step := newReturnColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReturnPortal) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReturnPortal) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReturnPortal) predicate.ReturnPortal {
	return predicate.ReturnPortal(sql.NotPredicates(p))
}
