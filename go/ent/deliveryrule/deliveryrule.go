// Code generated by ent, DO NOT EDIT.

package deliveryrule

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deliveryrule type in the database.
	Label = "delivery_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeDeliveryRuleConstraintGroup holds the string denoting the delivery_rule_constraint_group edge name in mutations.
	EdgeDeliveryRuleConstraintGroup = "delivery_rule_constraint_group"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// EdgeCurrency holds the string denoting the currency edge name in mutations.
	EdgeCurrency = "currency"
	// Table holds the table name of the deliveryrule in the database.
	Table = "delivery_rules"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "delivery_rules"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// DeliveryRuleConstraintGroupTable is the table that holds the delivery_rule_constraint_group relation/edge.
	DeliveryRuleConstraintGroupTable = "delivery_rule_constraint_groups"
	// DeliveryRuleConstraintGroupInverseTable is the table name for the DeliveryRuleConstraintGroup entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryruleconstraintgroup" package.
	DeliveryRuleConstraintGroupInverseTable = "delivery_rule_constraint_groups"
	// DeliveryRuleConstraintGroupColumn is the table column denoting the delivery_rule_constraint_group relation/edge.
	DeliveryRuleConstraintGroupColumn = "delivery_rule_delivery_rule_constraint_group"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "delivery_rules"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "delivery_option_delivery_rule"
	// CountryTable is the table that holds the country relation/edge. The primary key declared below.
	CountryTable = "country_delivery_rule"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CurrencyTable is the table that holds the currency relation/edge.
	CurrencyTable = "delivery_rules"
	// CurrencyInverseTable is the table name for the Currency entity.
	// It exists in this package in order to avoid circular dependency with the "currency" package.
	CurrencyInverseTable = "currencies"
	// CurrencyColumn is the table column denoting the currency relation/edge.
	CurrencyColumn = "delivery_rule_currency"
)

// Columns holds all SQL columns for deliveryrule fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "delivery_rules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"delivery_option_delivery_rule",
	"delivery_rule_currency",
}

var (
	// CountryPrimaryKey and CountryColumn2 are the table columns denoting the
	// primary key for the country relation (M2M).
	CountryPrimaryKey = []string{"country_id", "delivery_rule_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultPrice holds the default value on creation for the "price" field.
	DefaultPrice float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the DeliveryRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryRuleConstraintGroupCount orders the results by delivery_rule_constraint_group count.
func ByDeliveryRuleConstraintGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryRuleConstraintGroupStep(), opts...)
	}
}

// ByDeliveryRuleConstraintGroup orders the results by delivery_rule_constraint_group terms.
func ByDeliveryRuleConstraintGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleConstraintGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionField orders the results by delivery_option field.
func ByDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByCountryCount orders the results by country count.
func ByCountryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountryStep(), opts...)
	}
}

// ByCountry orders the results by country terms.
func ByCountry(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCurrencyField orders the results by currency field.
func ByCurrencyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newDeliveryRuleConstraintGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleConstraintGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeliveryRuleConstraintGroupTable, DeliveryRuleConstraintGroupColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CountryTable, CountryPrimaryKey...),
	)
}
func newCurrencyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CurrencyTable, CurrencyColumn),
	)
}
