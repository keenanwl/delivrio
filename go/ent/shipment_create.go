// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentCreate is the builder for creating a Shipment entity.
type ShipmentCreate struct {
	config
	mutation *ShipmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sc *ShipmentCreate) SetTenantID(pu pulid.ID) *ShipmentCreate {
	sc.mutation.SetTenantID(pu)
	return sc
}

// SetShipmentPublicID sets the "shipment_public_id" field.
func (sc *ShipmentCreate) SetShipmentPublicID(s string) *ShipmentCreate {
	sc.mutation.SetShipmentPublicID(s)
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShipmentCreate) SetCreatedAt(t time.Time) *ShipmentCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableCreatedAt(t *time.Time) *ShipmentCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *ShipmentCreate) SetStatus(s shipment.Status) *ShipmentCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetID sets the "id" field.
func (sc *ShipmentCreate) SetID(pu pulid.ID) *ShipmentCreate {
	sc.mutation.SetID(pu)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ShipmentCreate) SetNillableID(pu *pulid.ID) *ShipmentCreate {
	if pu != nil {
		sc.SetID(*pu)
	}
	return sc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sc *ShipmentCreate) SetTenant(t *Tenant) *ShipmentCreate {
	return sc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (sc *ShipmentCreate) SetCarrierID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetCarrierID(id)
	return sc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (sc *ShipmentCreate) SetCarrier(c *Carrier) *ShipmentCreate {
	return sc.SetCarrierID(c.ID)
}

// AddShipmentHistoryIDs adds the "shipment_history" edge to the ShipmentHistory entity by IDs.
func (sc *ShipmentCreate) AddShipmentHistoryIDs(ids ...pulid.ID) *ShipmentCreate {
	sc.mutation.AddShipmentHistoryIDs(ids...)
	return sc
}

// AddShipmentHistory adds the "shipment_history" edges to the ShipmentHistory entity.
func (sc *ShipmentCreate) AddShipmentHistory(s ...*ShipmentHistory) *ShipmentCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShipmentHistoryIDs(ids...)
}

// SetShipmentBringID sets the "shipment_bring" edge to the ShipmentBring entity by ID.
func (sc *ShipmentCreate) SetShipmentBringID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentBringID(id)
	return sc
}

// SetNillableShipmentBringID sets the "shipment_bring" edge to the ShipmentBring entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentBringID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentBringID(*id)
	}
	return sc
}

// SetShipmentBring sets the "shipment_bring" edge to the ShipmentBring entity.
func (sc *ShipmentCreate) SetShipmentBring(s *ShipmentBring) *ShipmentCreate {
	return sc.SetShipmentBringID(s.ID)
}

// SetShipmentDAOID sets the "shipment_dao" edge to the ShipmentDAO entity by ID.
func (sc *ShipmentCreate) SetShipmentDAOID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentDAOID(id)
	return sc
}

// SetNillableShipmentDAOID sets the "shipment_dao" edge to the ShipmentDAO entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentDAOID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentDAOID(*id)
	}
	return sc
}

// SetShipmentDAO sets the "shipment_dao" edge to the ShipmentDAO entity.
func (sc *ShipmentCreate) SetShipmentDAO(s *ShipmentDAO) *ShipmentCreate {
	return sc.SetShipmentDAOID(s.ID)
}

// SetShipmentDFID sets the "shipment_df" edge to the ShipmentDF entity by ID.
func (sc *ShipmentCreate) SetShipmentDFID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentDFID(id)
	return sc
}

// SetNillableShipmentDFID sets the "shipment_df" edge to the ShipmentDF entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentDFID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentDFID(*id)
	}
	return sc
}

// SetShipmentDF sets the "shipment_df" edge to the ShipmentDF entity.
func (sc *ShipmentCreate) SetShipmentDF(s *ShipmentDF) *ShipmentCreate {
	return sc.SetShipmentDFID(s.ID)
}

// SetShipmentDSVID sets the "shipment_dsv" edge to the ShipmentDSV entity by ID.
func (sc *ShipmentCreate) SetShipmentDSVID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentDSVID(id)
	return sc
}

// SetNillableShipmentDSVID sets the "shipment_dsv" edge to the ShipmentDSV entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentDSVID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentDSVID(*id)
	}
	return sc
}

// SetShipmentDSV sets the "shipment_dsv" edge to the ShipmentDSV entity.
func (sc *ShipmentCreate) SetShipmentDSV(s *ShipmentDSV) *ShipmentCreate {
	return sc.SetShipmentDSVID(s.ID)
}

// SetShipmentEasyPostID sets the "shipment_easy_post" edge to the ShipmentEasyPost entity by ID.
func (sc *ShipmentCreate) SetShipmentEasyPostID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentEasyPostID(id)
	return sc
}

// SetNillableShipmentEasyPostID sets the "shipment_easy_post" edge to the ShipmentEasyPost entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentEasyPostID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentEasyPostID(*id)
	}
	return sc
}

// SetShipmentEasyPost sets the "shipment_easy_post" edge to the ShipmentEasyPost entity.
func (sc *ShipmentCreate) SetShipmentEasyPost(s *ShipmentEasyPost) *ShipmentCreate {
	return sc.SetShipmentEasyPostID(s.ID)
}

// SetShipmentPostNordID sets the "shipment_post_nord" edge to the ShipmentPostNord entity by ID.
func (sc *ShipmentCreate) SetShipmentPostNordID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentPostNordID(id)
	return sc
}

// SetNillableShipmentPostNordID sets the "shipment_post_nord" edge to the ShipmentPostNord entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentPostNordID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentPostNordID(*id)
	}
	return sc
}

// SetShipmentPostNord sets the "shipment_post_nord" edge to the ShipmentPostNord entity.
func (sc *ShipmentCreate) SetShipmentPostNord(s *ShipmentPostNord) *ShipmentCreate {
	return sc.SetShipmentPostNordID(s.ID)
}

// SetShipmentGLSID sets the "shipment_gls" edge to the ShipmentGLS entity by ID.
func (sc *ShipmentCreate) SetShipmentGLSID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentGLSID(id)
	return sc
}

// SetNillableShipmentGLSID sets the "shipment_gls" edge to the ShipmentGLS entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentGLSID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentGLSID(*id)
	}
	return sc
}

// SetShipmentGLS sets the "shipment_gls" edge to the ShipmentGLS entity.
func (sc *ShipmentCreate) SetShipmentGLS(s *ShipmentGLS) *ShipmentCreate {
	return sc.SetShipmentGLSID(s.ID)
}

// SetShipmentUSPSID sets the "shipment_usps" edge to the ShipmentUSPS entity by ID.
func (sc *ShipmentCreate) SetShipmentUSPSID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetShipmentUSPSID(id)
	return sc
}

// SetNillableShipmentUSPSID sets the "shipment_usps" edge to the ShipmentUSPS entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableShipmentUSPSID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetShipmentUSPSID(*id)
	}
	return sc
}

// SetShipmentUSPS sets the "shipment_usps" edge to the ShipmentUSPS entity.
func (sc *ShipmentCreate) SetShipmentUSPS(s *ShipmentUSPS) *ShipmentCreate {
	return sc.SetShipmentUSPSID(s.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (sc *ShipmentCreate) SetConsolidationID(id pulid.ID) *ShipmentCreate {
	sc.mutation.SetConsolidationID(id)
	return sc
}

// SetNillableConsolidationID sets the "consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (sc *ShipmentCreate) SetNillableConsolidationID(id *pulid.ID) *ShipmentCreate {
	if id != nil {
		sc = sc.SetConsolidationID(*id)
	}
	return sc
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (sc *ShipmentCreate) SetConsolidation(c *Consolidation) *ShipmentCreate {
	return sc.SetConsolidationID(c.ID)
}

// AddOldConsolidationIDs adds the "old_consolidation" edge to the Consolidation entity by IDs.
func (sc *ShipmentCreate) AddOldConsolidationIDs(ids ...pulid.ID) *ShipmentCreate {
	sc.mutation.AddOldConsolidationIDs(ids...)
	return sc
}

// AddOldConsolidation adds the "old_consolidation" edges to the Consolidation entity.
func (sc *ShipmentCreate) AddOldConsolidation(c ...*Consolidation) *ShipmentCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddOldConsolidationIDs(ids...)
}

// AddShipmentParcelIDs adds the "shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (sc *ShipmentCreate) AddShipmentParcelIDs(ids ...pulid.ID) *ShipmentCreate {
	sc.mutation.AddShipmentParcelIDs(ids...)
	return sc
}

// AddShipmentParcel adds the "shipment_parcel" edges to the ShipmentParcel entity.
func (sc *ShipmentCreate) AddShipmentParcel(s ...*ShipmentParcel) *ShipmentCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShipmentParcelIDs(ids...)
}

// AddShipmentPalletIDs adds the "shipment_pallet" edge to the ShipmentPallet entity by IDs.
func (sc *ShipmentCreate) AddShipmentPalletIDs(ids ...pulid.ID) *ShipmentCreate {
	sc.mutation.AddShipmentPalletIDs(ids...)
	return sc
}

// AddShipmentPallet adds the "shipment_pallet" edges to the ShipmentPallet entity.
func (sc *ShipmentCreate) AddShipmentPallet(s ...*ShipmentPallet) *ShipmentCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddShipmentPalletIDs(ids...)
}

// Mutation returns the ShipmentMutation object of the builder.
func (sc *ShipmentCreate) Mutation() *ShipmentMutation {
	return sc.mutation
}

// Save creates the Shipment in the database.
func (sc *ShipmentCreate) Save(ctx context.Context) (*Shipment, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShipmentCreate) SaveX(ctx context.Context) *Shipment {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShipmentCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShipmentCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShipmentCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if shipment.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized shipment.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := shipment.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if shipment.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipment.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipment.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShipmentCreate) check() error {
	if _, ok := sc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Shipment.tenant_id"`)}
	}
	if _, ok := sc.mutation.ShipmentPublicID(); !ok {
		return &ValidationError{Name: "shipment_public_id", err: errors.New(`ent: missing required field "Shipment.shipment_public_id"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Shipment.created_at"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Shipment.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if len(sc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Shipment.tenant"`)}
	}
	if len(sc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "Shipment.carrier"`)}
	}
	return nil
}

func (sc *ShipmentCreate) sqlSave(ctx context.Context) (*Shipment, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ShipmentCreate) createSpec() (*Shipment, *sqlgraph.CreateSpec) {
	var (
		_node = &Shipment{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(shipment.Table, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.ShipmentPublicID(); ok {
		_spec.SetField(shipment.FieldShipmentPublicID, field.TypeString, value)
		_node.ShipmentPublicID = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(shipment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := sc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TenantTable,
			Columns: []string{shipment.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CarrierTable,
			Columns: []string{shipment.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_carrier = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentBringTable,
			Columns: []string{shipment.ShipmentBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDAOTable,
			Columns: []string{shipment.ShipmentDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDFTable,
			Columns: []string{shipment.ShipmentDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDSVTable,
			Columns: []string{shipment.ShipmentDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentEasyPostTable,
			Columns: []string{shipment.ShipmentEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentPostNordTable,
			Columns: []string{shipment.ShipmentPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentGLSTable,
			Columns: []string{shipment.ShipmentGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentUSPSTable,
			Columns: []string{shipment.ShipmentUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ConsolidationTable,
			Columns: []string{shipment.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OldConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Shipment.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sc *ShipmentCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentUpsertOne {
	sc.conflict = opts
	return &ShipmentUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Shipment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ShipmentCreate) OnConflictColumns(columns ...string) *ShipmentUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentUpsertOne{
		create: sc,
	}
}

type (
	// ShipmentUpsertOne is the builder for "upsert"-ing
	//  one Shipment node.
	ShipmentUpsertOne struct {
		create *ShipmentCreate
	}

	// ShipmentUpsert is the "OnConflict" setter.
	ShipmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentUpsert) SetTenantID(v pulid.ID) *ShipmentUpsert {
	u.Set(shipment.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentUpsert) UpdateTenantID() *ShipmentUpsert {
	u.SetExcluded(shipment.FieldTenantID)
	return u
}

// SetShipmentPublicID sets the "shipment_public_id" field.
func (u *ShipmentUpsert) SetShipmentPublicID(v string) *ShipmentUpsert {
	u.Set(shipment.FieldShipmentPublicID, v)
	return u
}

// UpdateShipmentPublicID sets the "shipment_public_id" field to the value that was provided on create.
func (u *ShipmentUpsert) UpdateShipmentPublicID() *ShipmentUpsert {
	u.SetExcluded(shipment.FieldShipmentPublicID)
	return u
}

// SetStatus sets the "status" field.
func (u *ShipmentUpsert) SetStatus(v shipment.Status) *ShipmentUpsert {
	u.Set(shipment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentUpsert) UpdateStatus() *ShipmentUpsert {
	u.SetExcluded(shipment.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Shipment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentUpsertOne) UpdateNewValues() *ShipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(shipment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Shipment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentUpsertOne) Ignore() *ShipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentUpsertOne) DoNothing() *ShipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentCreate.OnConflict
// documentation for more info.
func (u *ShipmentUpsertOne) Update(set func(*ShipmentUpsert)) *ShipmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentUpsertOne) SetTenantID(v pulid.ID) *ShipmentUpsertOne {
	return u.Update(func(s *ShipmentUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentUpsertOne) UpdateTenantID() *ShipmentUpsertOne {
	return u.Update(func(s *ShipmentUpsert) {
		s.UpdateTenantID()
	})
}

// SetShipmentPublicID sets the "shipment_public_id" field.
func (u *ShipmentUpsertOne) SetShipmentPublicID(v string) *ShipmentUpsertOne {
	return u.Update(func(s *ShipmentUpsert) {
		s.SetShipmentPublicID(v)
	})
}

// UpdateShipmentPublicID sets the "shipment_public_id" field to the value that was provided on create.
func (u *ShipmentUpsertOne) UpdateShipmentPublicID() *ShipmentUpsertOne {
	return u.Update(func(s *ShipmentUpsert) {
		s.UpdateShipmentPublicID()
	})
}

// SetStatus sets the "status" field.
func (u *ShipmentUpsertOne) SetStatus(v shipment.Status) *ShipmentUpsertOne {
	return u.Update(func(s *ShipmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentUpsertOne) UpdateStatus() *ShipmentUpsertOne {
	return u.Update(func(s *ShipmentUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ShipmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentUpsertOne.ID is not supported by MySQL driver. Use ShipmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentCreateBulk is the builder for creating many Shipment entities in bulk.
type ShipmentCreateBulk struct {
	config
	err      error
	builders []*ShipmentCreate
	conflict []sql.ConflictOption
}

// Save creates the Shipment entities in the database.
func (scb *ShipmentCreateBulk) Save(ctx context.Context) ([]*Shipment, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Shipment, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShipmentCreateBulk) SaveX(ctx context.Context) []*Shipment {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShipmentCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShipmentCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Shipment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (scb *ShipmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentUpsertBulk {
	scb.conflict = opts
	return &ShipmentUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Shipment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ShipmentCreateBulk) OnConflictColumns(columns ...string) *ShipmentUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentUpsertBulk{
		create: scb,
	}
}

// ShipmentUpsertBulk is the builder for "upsert"-ing
// a bulk of Shipment nodes.
type ShipmentUpsertBulk struct {
	create *ShipmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Shipment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentUpsertBulk) UpdateNewValues() *ShipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(shipment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Shipment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentUpsertBulk) Ignore() *ShipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentUpsertBulk) DoNothing() *ShipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentUpsertBulk) Update(set func(*ShipmentUpsert)) *ShipmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentUpsertBulk) SetTenantID(v pulid.ID) *ShipmentUpsertBulk {
	return u.Update(func(s *ShipmentUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentUpsertBulk) UpdateTenantID() *ShipmentUpsertBulk {
	return u.Update(func(s *ShipmentUpsert) {
		s.UpdateTenantID()
	})
}

// SetShipmentPublicID sets the "shipment_public_id" field.
func (u *ShipmentUpsertBulk) SetShipmentPublicID(v string) *ShipmentUpsertBulk {
	return u.Update(func(s *ShipmentUpsert) {
		s.SetShipmentPublicID(v)
	})
}

// UpdateShipmentPublicID sets the "shipment_public_id" field to the value that was provided on create.
func (u *ShipmentUpsertBulk) UpdateShipmentPublicID() *ShipmentUpsertBulk {
	return u.Update(func(s *ShipmentUpsert) {
		s.UpdateShipmentPublicID()
	})
}

// SetStatus sets the "status" field.
func (u *ShipmentUpsertBulk) SetStatus(v shipment.Status) *ShipmentUpsertBulk {
	return u.Update(func(s *ShipmentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ShipmentUpsertBulk) UpdateStatus() *ShipmentUpsertBulk {
	return u.Update(func(s *ShipmentUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ShipmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
