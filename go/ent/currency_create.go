// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CurrencyCreate is the builder for creating a Currency entity.
type CurrencyCreate struct {
	config
	mutation *CurrencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDisplay sets the "display" field.
func (cc *CurrencyCreate) SetDisplay(s string) *CurrencyCreate {
	cc.mutation.SetDisplay(s)
	return cc
}

// SetCurrencyCode sets the "currency_code" field.
func (cc *CurrencyCreate) SetCurrencyCode(value currency.CurrencyCode) *CurrencyCreate {
	cc.mutation.SetCurrencyCode(value)
	return cc
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (cc *CurrencyCreate) SetNillableCurrencyCode(value *currency.CurrencyCode) *CurrencyCreate {
	if value != nil {
		cc.SetCurrencyCode(*value)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CurrencyCreate) SetID(pu pulid.ID) *CurrencyCreate {
	cc.mutation.SetID(pu)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CurrencyCreate) SetNillableID(pu *pulid.ID) *CurrencyCreate {
	if pu != nil {
		cc.SetID(*pu)
	}
	return cc
}

// AddOrderLineIDs adds the "order_line" edge to the OrderLine entity by IDs.
func (cc *CurrencyCreate) AddOrderLineIDs(ids ...pulid.ID) *CurrencyCreate {
	cc.mutation.AddOrderLineIDs(ids...)
	return cc
}

// AddOrderLine adds the "order_line" edges to the OrderLine entity.
func (cc *CurrencyCreate) AddOrderLine(o ...*OrderLine) *CurrencyCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderLineIDs(ids...)
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (cc *CurrencyCreate) AddDeliveryRuleIDs(ids ...pulid.ID) *CurrencyCreate {
	cc.mutation.AddDeliveryRuleIDs(ids...)
	return cc
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (cc *CurrencyCreate) AddDeliveryRule(d ...*DeliveryRule) *CurrencyCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeliveryRuleIDs(ids...)
}

// Mutation returns the CurrencyMutation object of the builder.
func (cc *CurrencyCreate) Mutation() *CurrencyMutation {
	return cc.mutation
}

// Save creates the Currency in the database.
func (cc *CurrencyCreate) Save(ctx context.Context) (*Currency, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CurrencyCreate) SaveX(ctx context.Context) *Currency {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CurrencyCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CurrencyCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CurrencyCreate) defaults() error {
	if _, ok := cc.mutation.CurrencyCode(); !ok {
		v := currency.DefaultCurrencyCode
		cc.mutation.SetCurrencyCode(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if currency.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized currency.DefaultID (forgotten import ent/runtime?)")
		}
		v := currency.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CurrencyCreate) check() error {
	if _, ok := cc.mutation.Display(); !ok {
		return &ValidationError{Name: "display", err: errors.New(`ent: missing required field "Currency.display"`)}
	}
	if _, ok := cc.mutation.CurrencyCode(); !ok {
		return &ValidationError{Name: "currency_code", err: errors.New(`ent: missing required field "Currency.currency_code"`)}
	}
	if v, ok := cc.mutation.CurrencyCode(); ok {
		if err := currency.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Currency.currency_code": %w`, err)}
		}
	}
	return nil
}

func (cc *CurrencyCreate) sqlSave(ctx context.Context) (*Currency, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CurrencyCreate) createSpec() (*Currency, *sqlgraph.CreateSpec) {
	var (
		_node = &Currency{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(currency.Table, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Display(); ok {
		_spec.SetField(currency.FieldDisplay, field.TypeString, value)
		_node.Display = value
	}
	if value, ok := cc.mutation.CurrencyCode(); ok {
		_spec.SetField(currency.FieldCurrencyCode, field.TypeEnum, value)
		_node.CurrencyCode = value
	}
	if nodes := cc.mutation.OrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Currency.Create().
//		SetDisplay(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CurrencyUpsert) {
//			SetDisplay(v+v).
//		}).
//		Exec(ctx)
func (cc *CurrencyCreate) OnConflict(opts ...sql.ConflictOption) *CurrencyUpsertOne {
	cc.conflict = opts
	return &CurrencyUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Currency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CurrencyCreate) OnConflictColumns(columns ...string) *CurrencyUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CurrencyUpsertOne{
		create: cc,
	}
}

type (
	// CurrencyUpsertOne is the builder for "upsert"-ing
	//  one Currency node.
	CurrencyUpsertOne struct {
		create *CurrencyCreate
	}

	// CurrencyUpsert is the "OnConflict" setter.
	CurrencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetDisplay sets the "display" field.
func (u *CurrencyUpsert) SetDisplay(v string) *CurrencyUpsert {
	u.Set(currency.FieldDisplay, v)
	return u
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *CurrencyUpsert) UpdateDisplay() *CurrencyUpsert {
	u.SetExcluded(currency.FieldDisplay)
	return u
}

// SetCurrencyCode sets the "currency_code" field.
func (u *CurrencyUpsert) SetCurrencyCode(v currency.CurrencyCode) *CurrencyUpsert {
	u.Set(currency.FieldCurrencyCode, v)
	return u
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *CurrencyUpsert) UpdateCurrencyCode() *CurrencyUpsert {
	u.SetExcluded(currency.FieldCurrencyCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Currency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(currency.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CurrencyUpsertOne) UpdateNewValues() *CurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(currency.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Currency.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CurrencyUpsertOne) Ignore() *CurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CurrencyUpsertOne) DoNothing() *CurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CurrencyCreate.OnConflict
// documentation for more info.
func (u *CurrencyUpsertOne) Update(set func(*CurrencyUpsert)) *CurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetDisplay sets the "display" field.
func (u *CurrencyUpsertOne) SetDisplay(v string) *CurrencyUpsertOne {
	return u.Update(func(s *CurrencyUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *CurrencyUpsertOne) UpdateDisplay() *CurrencyUpsertOne {
	return u.Update(func(s *CurrencyUpsert) {
		s.UpdateDisplay()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *CurrencyUpsertOne) SetCurrencyCode(v currency.CurrencyCode) *CurrencyUpsertOne {
	return u.Update(func(s *CurrencyUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *CurrencyUpsertOne) UpdateCurrencyCode() *CurrencyUpsertOne {
	return u.Update(func(s *CurrencyUpsert) {
		s.UpdateCurrencyCode()
	})
}

// Exec executes the query.
func (u *CurrencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CurrencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CurrencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CurrencyUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CurrencyUpsertOne.ID is not supported by MySQL driver. Use CurrencyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CurrencyUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CurrencyCreateBulk is the builder for creating many Currency entities in bulk.
type CurrencyCreateBulk struct {
	config
	err      error
	builders []*CurrencyCreate
	conflict []sql.ConflictOption
}

// Save creates the Currency entities in the database.
func (ccb *CurrencyCreateBulk) Save(ctx context.Context) ([]*Currency, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Currency, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CurrencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CurrencyCreateBulk) SaveX(ctx context.Context) []*Currency {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CurrencyCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CurrencyCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Currency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CurrencyUpsert) {
//			SetDisplay(v+v).
//		}).
//		Exec(ctx)
func (ccb *CurrencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *CurrencyUpsertBulk {
	ccb.conflict = opts
	return &CurrencyUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Currency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CurrencyCreateBulk) OnConflictColumns(columns ...string) *CurrencyUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CurrencyUpsertBulk{
		create: ccb,
	}
}

// CurrencyUpsertBulk is the builder for "upsert"-ing
// a bulk of Currency nodes.
type CurrencyUpsertBulk struct {
	create *CurrencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Currency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(currency.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CurrencyUpsertBulk) UpdateNewValues() *CurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(currency.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Currency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CurrencyUpsertBulk) Ignore() *CurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CurrencyUpsertBulk) DoNothing() *CurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CurrencyCreateBulk.OnConflict
// documentation for more info.
func (u *CurrencyUpsertBulk) Update(set func(*CurrencyUpsert)) *CurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetDisplay sets the "display" field.
func (u *CurrencyUpsertBulk) SetDisplay(v string) *CurrencyUpsertBulk {
	return u.Update(func(s *CurrencyUpsert) {
		s.SetDisplay(v)
	})
}

// UpdateDisplay sets the "display" field to the value that was provided on create.
func (u *CurrencyUpsertBulk) UpdateDisplay() *CurrencyUpsertBulk {
	return u.Update(func(s *CurrencyUpsert) {
		s.UpdateDisplay()
	})
}

// SetCurrencyCode sets the "currency_code" field.
func (u *CurrencyUpsertBulk) SetCurrencyCode(v currency.CurrencyCode) *CurrencyUpsertBulk {
	return u.Update(func(s *CurrencyUpsert) {
		s.SetCurrencyCode(v)
	})
}

// UpdateCurrencyCode sets the "currency_code" field to the value that was provided on create.
func (u *CurrencyUpsertBulk) UpdateCurrencyCode() *CurrencyUpsertBulk {
	return u.Update(func(s *CurrencyUpsert) {
		s.UpdateCurrencyCode()
	})
}

// Exec executes the query.
func (u *CurrencyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CurrencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CurrencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CurrencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
