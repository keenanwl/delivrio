// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Workstation is the model entity for the Workstation schema.
type Workstation struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt time.Time `json:"archived_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DeviceType holds the value of the "device_type" field.
	DeviceType workstation.DeviceType `json:"device_type,omitempty"`
	// RegistrationCode holds the value of the "registration_code" field.
	RegistrationCode string `json:"-"`
	// WorkstationID holds the value of the "workstation_id" field.
	WorkstationID pulid.ID `json:"workstation_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastPing holds the value of the "last_ping" field.
	LastPing time.Time `json:"last_ping,omitempty"`
	// Status holds the value of the "status" field.
	Status workstation.Status `json:"status,omitempty"`
	// AutoPrintReceiver holds the value of the "auto_print_receiver" field.
	AutoPrintReceiver bool `json:"auto_print_receiver,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkstationQuery when eager-loading is set.
	Edges                     WorkstationEdges `json:"edges"`
	user_selected_workstation *pulid.ID
	workstation_user          *pulid.ID
	selectValues              sql.SelectValues
}

// WorkstationEdges holds the relations/edges for other nodes in the graph.
type WorkstationEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Printer holds the value of the printer edge.
	Printer []*Printer `json:"printer,omitempty"`
	// the user who created the workstation
	User *User `json:"user,omitempty"`
	// the user currently sending print jobs to this workstation
	SelectedUser *User `json:"selected_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedPrinter map[string][]*Printer
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkstationEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PrinterOrErr returns the Printer value or an error if the edge
// was not loaded in eager-loading.
func (e WorkstationEdges) PrinterOrErr() ([]*Printer, error) {
	if e.loadedTypes[1] {
		return e.Printer, nil
	}
	return nil, &NotLoadedError{edge: "printer"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkstationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SelectedUserOrErr returns the SelectedUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkstationEdges) SelectedUserOrErr() (*User, error) {
	if e.SelectedUser != nil {
		return e.SelectedUser, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "selected_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workstation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workstation.FieldID, workstation.FieldTenantID, workstation.FieldWorkstationID:
			values[i] = new(pulid.ID)
		case workstation.FieldAutoPrintReceiver:
			values[i] = new(sql.NullBool)
		case workstation.FieldName, workstation.FieldDeviceType, workstation.FieldRegistrationCode, workstation.FieldStatus:
			values[i] = new(sql.NullString)
		case workstation.FieldArchivedAt, workstation.FieldCreatedAt, workstation.FieldLastPing:
			values[i] = new(sql.NullTime)
		case workstation.ForeignKeys[0]: // user_selected_workstation
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case workstation.ForeignKeys[1]: // workstation_user
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workstation fields.
func (w *Workstation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workstation.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case workstation.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				w.TenantID = *value
			}
		case workstation.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				w.ArchivedAt = value.Time
			}
		case workstation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case workstation.FieldDeviceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_type", values[i])
			} else if value.Valid {
				w.DeviceType = workstation.DeviceType(value.String)
			}
		case workstation.FieldRegistrationCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registration_code", values[i])
			} else if value.Valid {
				w.RegistrationCode = value.String
			}
		case workstation.FieldWorkstationID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field workstation_id", values[i])
			} else if value != nil {
				w.WorkstationID = *value
			}
		case workstation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case workstation.FieldLastPing:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_ping", values[i])
			} else if value.Valid {
				w.LastPing = value.Time
			}
		case workstation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				w.Status = workstation.Status(value.String)
			}
		case workstation.FieldAutoPrintReceiver:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_print_receiver", values[i])
			} else if value.Valid {
				w.AutoPrintReceiver = value.Bool
			}
		case workstation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_selected_workstation", values[i])
			} else if value.Valid {
				w.user_selected_workstation = new(pulid.ID)
				*w.user_selected_workstation = *value.S.(*pulid.ID)
			}
		case workstation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workstation_user", values[i])
			} else if value.Valid {
				w.workstation_user = new(pulid.ID)
				*w.workstation_user = *value.S.(*pulid.ID)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Workstation.
// This includes values selected through modifiers, order, etc.
func (w *Workstation) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Workstation entity.
func (w *Workstation) QueryTenant() *TenantQuery {
	return NewWorkstationClient(w.config).QueryTenant(w)
}

// QueryPrinter queries the "printer" edge of the Workstation entity.
func (w *Workstation) QueryPrinter() *PrinterQuery {
	return NewWorkstationClient(w.config).QueryPrinter(w)
}

// QueryUser queries the "user" edge of the Workstation entity.
func (w *Workstation) QueryUser() *UserQuery {
	return NewWorkstationClient(w.config).QueryUser(w)
}

// QuerySelectedUser queries the "selected_user" edge of the Workstation entity.
func (w *Workstation) QuerySelectedUser() *UserQuery {
	return NewWorkstationClient(w.config).QuerySelectedUser(w)
}

// Update returns a builder for updating this Workstation.
// Note that you need to call Workstation.Unwrap() before calling this method if this Workstation
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workstation) Update() *WorkstationUpdateOne {
	return NewWorkstationClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Workstation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workstation) Unwrap() *Workstation {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Workstation is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workstation) String() string {
	var builder strings.Builder
	builder.WriteString("Workstation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", w.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archived_at=")
	builder.WriteString(w.ArchivedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("device_type=")
	builder.WriteString(fmt.Sprintf("%v", w.DeviceType))
	builder.WriteString(", ")
	builder.WriteString("registration_code=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("workstation_id=")
	builder.WriteString(fmt.Sprintf("%v", w.WorkstationID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_ping=")
	builder.WriteString(w.LastPing.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", w.Status))
	builder.WriteString(", ")
	builder.WriteString("auto_print_receiver=")
	builder.WriteString(fmt.Sprintf("%v", w.AutoPrintReceiver))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPrinter returns the Printer named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Workstation) NamedPrinter(name string) ([]*Printer, error) {
	if w.Edges.namedPrinter == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedPrinter[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Workstation) appendNamedPrinter(name string, edges ...*Printer) {
	if w.Edges.namedPrinter == nil {
		w.Edges.namedPrinter = make(map[string][]*Printer)
	}
	if len(edges) == 0 {
		w.Edges.namedPrinter[name] = []*Printer{}
	} else {
		w.Edges.namedPrinter[name] = append(w.Edges.namedPrinter[name], edges...)
	}
}

// Workstations is a parsable slice of Workstation.
type Workstations []*Workstation
