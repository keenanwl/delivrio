// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceGLSUpdate is the builder for updating CarrierServiceGLS entities.
type CarrierServiceGLSUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServiceGLSMutation
}

// Where appends a list predicates to the CarrierServiceGLSUpdate builder.
func (csgu *CarrierServiceGLSUpdate) Where(ps ...predicate.CarrierServiceGLS) *CarrierServiceGLSUpdate {
	csgu.mutation.Where(ps...)
	return csgu
}

// SetAPIKey sets the "api_key" field.
func (csgu *CarrierServiceGLSUpdate) SetAPIKey(s string) *CarrierServiceGLSUpdate {
	csgu.mutation.SetAPIKey(s)
	return csgu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csgu *CarrierServiceGLSUpdate) SetNillableAPIKey(s *string) *CarrierServiceGLSUpdate {
	if s != nil {
		csgu.SetAPIKey(*s)
	}
	return csgu
}

// ClearAPIKey clears the value of the "api_key" field.
func (csgu *CarrierServiceGLSUpdate) ClearAPIKey() *CarrierServiceGLSUpdate {
	csgu.mutation.ClearAPIKey()
	return csgu
}

// SetAPIValue sets the "api_value" field.
func (csgu *CarrierServiceGLSUpdate) SetAPIValue(cv carrierservicegls.APIValue) *CarrierServiceGLSUpdate {
	csgu.mutation.SetAPIValue(cv)
	return csgu
}

// SetNillableAPIValue sets the "api_value" field if the given value is not nil.
func (csgu *CarrierServiceGLSUpdate) SetNillableAPIValue(cv *carrierservicegls.APIValue) *CarrierServiceGLSUpdate {
	if cv != nil {
		csgu.SetAPIValue(*cv)
	}
	return csgu
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csgu *CarrierServiceGLSUpdate) SetCarrierServiceID(id pulid.ID) *CarrierServiceGLSUpdate {
	csgu.mutation.SetCarrierServiceID(id)
	return csgu
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csgu *CarrierServiceGLSUpdate) SetCarrierService(c *CarrierService) *CarrierServiceGLSUpdate {
	return csgu.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceGlIDs adds the "carrier_additional_service_gls" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (csgu *CarrierServiceGLSUpdate) AddCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *CarrierServiceGLSUpdate {
	csgu.mutation.AddCarrierAdditionalServiceGlIDs(ids...)
	return csgu
}

// AddCarrierAdditionalServiceGLS adds the "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (csgu *CarrierServiceGLSUpdate) AddCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *CarrierServiceGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csgu.AddCarrierAdditionalServiceGlIDs(ids...)
}

// Mutation returns the CarrierServiceGLSMutation object of the builder.
func (csgu *CarrierServiceGLSUpdate) Mutation() *CarrierServiceGLSMutation {
	return csgu.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csgu *CarrierServiceGLSUpdate) ClearCarrierService() *CarrierServiceGLSUpdate {
	csgu.mutation.ClearCarrierService()
	return csgu
}

// ClearCarrierAdditionalServiceGLS clears all "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (csgu *CarrierServiceGLSUpdate) ClearCarrierAdditionalServiceGLS() *CarrierServiceGLSUpdate {
	csgu.mutation.ClearCarrierAdditionalServiceGLS()
	return csgu
}

// RemoveCarrierAdditionalServiceGlIDs removes the "carrier_additional_service_gls" edge to CarrierAdditionalServiceGLS entities by IDs.
func (csgu *CarrierServiceGLSUpdate) RemoveCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *CarrierServiceGLSUpdate {
	csgu.mutation.RemoveCarrierAdditionalServiceGlIDs(ids...)
	return csgu
}

// RemoveCarrierAdditionalServiceGLS removes "carrier_additional_service_gls" edges to CarrierAdditionalServiceGLS entities.
func (csgu *CarrierServiceGLSUpdate) RemoveCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *CarrierServiceGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csgu.RemoveCarrierAdditionalServiceGlIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csgu *CarrierServiceGLSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csgu.sqlSave, csgu.mutation, csgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csgu *CarrierServiceGLSUpdate) SaveX(ctx context.Context) int {
	affected, err := csgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csgu *CarrierServiceGLSUpdate) Exec(ctx context.Context) error {
	_, err := csgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csgu *CarrierServiceGLSUpdate) ExecX(ctx context.Context) {
	if err := csgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csgu *CarrierServiceGLSUpdate) check() error {
	if v, ok := csgu.mutation.APIValue(); ok {
		if err := carrierservicegls.APIValueValidator(v); err != nil {
			return &ValidationError{Name: "api_value", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceGLS.api_value": %w`, err)}
		}
	}
	if csgu.mutation.CarrierServiceCleared() && len(csgu.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceGLS.carrier_service"`)
	}
	return nil
}

func (csgu *CarrierServiceGLSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicegls.Table, carrierservicegls.Columns, sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString))
	if ps := csgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csgu.mutation.APIKey(); ok {
		_spec.SetField(carrierservicegls.FieldAPIKey, field.TypeString, value)
	}
	if csgu.mutation.APIKeyCleared() {
		_spec.ClearField(carrierservicegls.FieldAPIKey, field.TypeString)
	}
	if value, ok := csgu.mutation.APIValue(); ok {
		_spec.SetField(carrierservicegls.FieldAPIValue, field.TypeEnum, value)
	}
	if csgu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicegls.CarrierServiceTable,
			Columns: []string{carrierservicegls.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csgu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicegls.CarrierServiceTable,
			Columns: []string{carrierservicegls.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csgu.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csgu.mutation.RemovedCarrierAdditionalServiceGLSIDs(); len(nodes) > 0 && !csgu.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csgu.mutation.CarrierAdditionalServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicegls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csgu.mutation.done = true
	return n, nil
}

// CarrierServiceGLSUpdateOne is the builder for updating a single CarrierServiceGLS entity.
type CarrierServiceGLSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServiceGLSMutation
}

// SetAPIKey sets the "api_key" field.
func (csguo *CarrierServiceGLSUpdateOne) SetAPIKey(s string) *CarrierServiceGLSUpdateOne {
	csguo.mutation.SetAPIKey(s)
	return csguo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csguo *CarrierServiceGLSUpdateOne) SetNillableAPIKey(s *string) *CarrierServiceGLSUpdateOne {
	if s != nil {
		csguo.SetAPIKey(*s)
	}
	return csguo
}

// ClearAPIKey clears the value of the "api_key" field.
func (csguo *CarrierServiceGLSUpdateOne) ClearAPIKey() *CarrierServiceGLSUpdateOne {
	csguo.mutation.ClearAPIKey()
	return csguo
}

// SetAPIValue sets the "api_value" field.
func (csguo *CarrierServiceGLSUpdateOne) SetAPIValue(cv carrierservicegls.APIValue) *CarrierServiceGLSUpdateOne {
	csguo.mutation.SetAPIValue(cv)
	return csguo
}

// SetNillableAPIValue sets the "api_value" field if the given value is not nil.
func (csguo *CarrierServiceGLSUpdateOne) SetNillableAPIValue(cv *carrierservicegls.APIValue) *CarrierServiceGLSUpdateOne {
	if cv != nil {
		csguo.SetAPIValue(*cv)
	}
	return csguo
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (csguo *CarrierServiceGLSUpdateOne) SetCarrierServiceID(id pulid.ID) *CarrierServiceGLSUpdateOne {
	csguo.mutation.SetCarrierServiceID(id)
	return csguo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (csguo *CarrierServiceGLSUpdateOne) SetCarrierService(c *CarrierService) *CarrierServiceGLSUpdateOne {
	return csguo.SetCarrierServiceID(c.ID)
}

// AddCarrierAdditionalServiceGlIDs adds the "carrier_additional_service_gls" edge to the CarrierAdditionalServiceGLS entity by IDs.
func (csguo *CarrierServiceGLSUpdateOne) AddCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *CarrierServiceGLSUpdateOne {
	csguo.mutation.AddCarrierAdditionalServiceGlIDs(ids...)
	return csguo
}

// AddCarrierAdditionalServiceGLS adds the "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (csguo *CarrierServiceGLSUpdateOne) AddCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *CarrierServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csguo.AddCarrierAdditionalServiceGlIDs(ids...)
}

// Mutation returns the CarrierServiceGLSMutation object of the builder.
func (csguo *CarrierServiceGLSUpdateOne) Mutation() *CarrierServiceGLSMutation {
	return csguo.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (csguo *CarrierServiceGLSUpdateOne) ClearCarrierService() *CarrierServiceGLSUpdateOne {
	csguo.mutation.ClearCarrierService()
	return csguo
}

// ClearCarrierAdditionalServiceGLS clears all "carrier_additional_service_gls" edges to the CarrierAdditionalServiceGLS entity.
func (csguo *CarrierServiceGLSUpdateOne) ClearCarrierAdditionalServiceGLS() *CarrierServiceGLSUpdateOne {
	csguo.mutation.ClearCarrierAdditionalServiceGLS()
	return csguo
}

// RemoveCarrierAdditionalServiceGlIDs removes the "carrier_additional_service_gls" edge to CarrierAdditionalServiceGLS entities by IDs.
func (csguo *CarrierServiceGLSUpdateOne) RemoveCarrierAdditionalServiceGlIDs(ids ...pulid.ID) *CarrierServiceGLSUpdateOne {
	csguo.mutation.RemoveCarrierAdditionalServiceGlIDs(ids...)
	return csguo
}

// RemoveCarrierAdditionalServiceGLS removes "carrier_additional_service_gls" edges to CarrierAdditionalServiceGLS entities.
func (csguo *CarrierServiceGLSUpdateOne) RemoveCarrierAdditionalServiceGLS(c ...*CarrierAdditionalServiceGLS) *CarrierServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csguo.RemoveCarrierAdditionalServiceGlIDs(ids...)
}

// Where appends a list predicates to the CarrierServiceGLSUpdate builder.
func (csguo *CarrierServiceGLSUpdateOne) Where(ps ...predicate.CarrierServiceGLS) *CarrierServiceGLSUpdateOne {
	csguo.mutation.Where(ps...)
	return csguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csguo *CarrierServiceGLSUpdateOne) Select(field string, fields ...string) *CarrierServiceGLSUpdateOne {
	csguo.fields = append([]string{field}, fields...)
	return csguo
}

// Save executes the query and returns the updated CarrierServiceGLS entity.
func (csguo *CarrierServiceGLSUpdateOne) Save(ctx context.Context) (*CarrierServiceGLS, error) {
	return withHooks(ctx, csguo.sqlSave, csguo.mutation, csguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csguo *CarrierServiceGLSUpdateOne) SaveX(ctx context.Context) *CarrierServiceGLS {
	node, err := csguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csguo *CarrierServiceGLSUpdateOne) Exec(ctx context.Context) error {
	_, err := csguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csguo *CarrierServiceGLSUpdateOne) ExecX(ctx context.Context) {
	if err := csguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csguo *CarrierServiceGLSUpdateOne) check() error {
	if v, ok := csguo.mutation.APIValue(); ok {
		if err := carrierservicegls.APIValueValidator(v); err != nil {
			return &ValidationError{Name: "api_value", err: fmt.Errorf(`ent: validator failed for field "CarrierServiceGLS.api_value": %w`, err)}
		}
	}
	if csguo.mutation.CarrierServiceCleared() && len(csguo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServiceGLS.carrier_service"`)
	}
	return nil
}

func (csguo *CarrierServiceGLSUpdateOne) sqlSave(ctx context.Context) (_node *CarrierServiceGLS, err error) {
	if err := csguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicegls.Table, carrierservicegls.Columns, sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString))
	id, ok := csguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierServiceGLS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicegls.FieldID)
		for _, f := range fields {
			if !carrierservicegls.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierservicegls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csguo.mutation.APIKey(); ok {
		_spec.SetField(carrierservicegls.FieldAPIKey, field.TypeString, value)
	}
	if csguo.mutation.APIKeyCleared() {
		_spec.ClearField(carrierservicegls.FieldAPIKey, field.TypeString)
	}
	if value, ok := csguo.mutation.APIValue(); ok {
		_spec.SetField(carrierservicegls.FieldAPIValue, field.TypeEnum, value)
	}
	if csguo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicegls.CarrierServiceTable,
			Columns: []string{carrierservicegls.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csguo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicegls.CarrierServiceTable,
			Columns: []string{carrierservicegls.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csguo.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csguo.mutation.RemovedCarrierAdditionalServiceGLSIDs(); len(nodes) > 0 && !csguo.mutation.CarrierAdditionalServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csguo.mutation.CarrierAdditionalServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierServiceGLS{config: csguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicegls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csguo.mutation.done = true
	return _node, nil
}
