// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReturnOrderLine is the model entity for the ReturnOrderLine schema.
type ReturnOrderLine struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Units holds the value of the "units" field.
	Units int `json:"units,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReturnOrderLineQuery when eager-loading is set.
	Edges                                 ReturnOrderLineEdges `json:"edges"`
	return_colli_return_order_line        *pulid.ID
	return_order_line_order_line          *pulid.ID
	return_order_line_return_portal_claim *pulid.ID
	selectValues                          sql.SelectValues
}

// ReturnOrderLineEdges holds the relations/edges for other nodes in the graph.
type ReturnOrderLineEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ReturnColli holds the value of the return_colli edge.
	ReturnColli *ReturnColli `json:"return_colli,omitempty"`
	// OrderLine holds the value of the order_line edge.
	OrderLine *OrderLine `json:"order_line,omitempty"`
	// ReturnPortalClaim holds the value of the return_portal_claim edge.
	ReturnPortalClaim *ReturnPortalClaim `json:"return_portal_claim,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnOrderLineEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ReturnColliOrErr returns the ReturnColli value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnOrderLineEdges) ReturnColliOrErr() (*ReturnColli, error) {
	if e.ReturnColli != nil {
		return e.ReturnColli, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: returncolli.Label}
	}
	return nil, &NotLoadedError{edge: "return_colli"}
}

// OrderLineOrErr returns the OrderLine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnOrderLineEdges) OrderLineOrErr() (*OrderLine, error) {
	if e.OrderLine != nil {
		return e.OrderLine, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: orderline.Label}
	}
	return nil, &NotLoadedError{edge: "order_line"}
}

// ReturnPortalClaimOrErr returns the ReturnPortalClaim value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnOrderLineEdges) ReturnPortalClaimOrErr() (*ReturnPortalClaim, error) {
	if e.ReturnPortalClaim != nil {
		return e.ReturnPortalClaim, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: returnportalclaim.Label}
	}
	return nil, &NotLoadedError{edge: "return_portal_claim"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReturnOrderLine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case returnorderline.FieldID, returnorderline.FieldTenantID:
			values[i] = new(pulid.ID)
		case returnorderline.FieldUnits:
			values[i] = new(sql.NullInt64)
		case returnorderline.ForeignKeys[0]: // return_colli_return_order_line
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returnorderline.ForeignKeys[1]: // return_order_line_order_line
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returnorderline.ForeignKeys[2]: // return_order_line_return_portal_claim
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReturnOrderLine fields.
func (rol *ReturnOrderLine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case returnorderline.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rol.ID = *value
			}
		case returnorderline.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				rol.TenantID = *value
			}
		case returnorderline.FieldUnits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field units", values[i])
			} else if value.Valid {
				rol.Units = int(value.Int64)
			}
		case returnorderline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_return_order_line", values[i])
			} else if value.Valid {
				rol.return_colli_return_order_line = new(pulid.ID)
				*rol.return_colli_return_order_line = *value.S.(*pulid.ID)
			}
		case returnorderline.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_order_line_order_line", values[i])
			} else if value.Valid {
				rol.return_order_line_order_line = new(pulid.ID)
				*rol.return_order_line_order_line = *value.S.(*pulid.ID)
			}
		case returnorderline.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_order_line_return_portal_claim", values[i])
			} else if value.Valid {
				rol.return_order_line_return_portal_claim = new(pulid.ID)
				*rol.return_order_line_return_portal_claim = *value.S.(*pulid.ID)
			}
		default:
			rol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReturnOrderLine.
// This includes values selected through modifiers, order, etc.
func (rol *ReturnOrderLine) Value(name string) (ent.Value, error) {
	return rol.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ReturnOrderLine entity.
func (rol *ReturnOrderLine) QueryTenant() *TenantQuery {
	return NewReturnOrderLineClient(rol.config).QueryTenant(rol)
}

// QueryReturnColli queries the "return_colli" edge of the ReturnOrderLine entity.
func (rol *ReturnOrderLine) QueryReturnColli() *ReturnColliQuery {
	return NewReturnOrderLineClient(rol.config).QueryReturnColli(rol)
}

// QueryOrderLine queries the "order_line" edge of the ReturnOrderLine entity.
func (rol *ReturnOrderLine) QueryOrderLine() *OrderLineQuery {
	return NewReturnOrderLineClient(rol.config).QueryOrderLine(rol)
}

// QueryReturnPortalClaim queries the "return_portal_claim" edge of the ReturnOrderLine entity.
func (rol *ReturnOrderLine) QueryReturnPortalClaim() *ReturnPortalClaimQuery {
	return NewReturnOrderLineClient(rol.config).QueryReturnPortalClaim(rol)
}

// Update returns a builder for updating this ReturnOrderLine.
// Note that you need to call ReturnOrderLine.Unwrap() before calling this method if this ReturnOrderLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (rol *ReturnOrderLine) Update() *ReturnOrderLineUpdateOne {
	return NewReturnOrderLineClient(rol.config).UpdateOne(rol)
}

// Unwrap unwraps the ReturnOrderLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rol *ReturnOrderLine) Unwrap() *ReturnOrderLine {
	_tx, ok := rol.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReturnOrderLine is not a transactional entity")
	}
	rol.config.driver = _tx.drv
	return rol
}

// String implements the fmt.Stringer.
func (rol *ReturnOrderLine) String() string {
	var builder strings.Builder
	builder.WriteString("ReturnOrderLine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rol.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", rol.TenantID))
	builder.WriteString(", ")
	builder.WriteString("units=")
	builder.WriteString(fmt.Sprintf("%v", rol.Units))
	builder.WriteByte(')')
	return builder.String()
}

// ReturnOrderLines is a parsable slice of ReturnOrderLine.
type ReturnOrderLines []*ReturnOrderLine
