// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalletCreate is the builder for creating a Pallet entity.
type PalletCreate struct {
	config
	mutation *PalletMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pc *PalletCreate) SetTenantID(pu pulid.ID) *PalletCreate {
	pc.mutation.SetTenantID(pu)
	return pc
}

// SetPublicID sets the "public_id" field.
func (pc *PalletCreate) SetPublicID(s string) *PalletCreate {
	pc.mutation.SetPublicID(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PalletCreate) SetDescription(s string) *PalletCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetID sets the "id" field.
func (pc *PalletCreate) SetID(pu pulid.ID) *PalletCreate {
	pc.mutation.SetID(pu)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PalletCreate) SetNillableID(pu *pulid.ID) *PalletCreate {
	if pu != nil {
		pc.SetID(*pu)
	}
	return pc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pc *PalletCreate) SetTenant(t *Tenant) *PalletCreate {
	return pc.SetTenantID(t.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pc *PalletCreate) AddOrderIDs(ids ...pulid.ID) *PalletCreate {
	pc.mutation.AddOrderIDs(ids...)
	return pc
}

// AddOrders adds the "orders" edges to the Order entity.
func (pc *PalletCreate) AddOrders(o ...*Order) *PalletCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderIDs(ids...)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (pc *PalletCreate) SetPackagingID(id pulid.ID) *PalletCreate {
	pc.mutation.SetPackagingID(id)
	return pc
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (pc *PalletCreate) SetNillablePackagingID(id *pulid.ID) *PalletCreate {
	if id != nil {
		pc = pc.SetPackagingID(*id)
	}
	return pc
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (pc *PalletCreate) SetPackaging(p *Packaging) *PalletCreate {
	return pc.SetPackagingID(p.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (pc *PalletCreate) SetConsolidationID(id pulid.ID) *PalletCreate {
	pc.mutation.SetConsolidationID(id)
	return pc
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (pc *PalletCreate) SetConsolidation(c *Consolidation) *PalletCreate {
	return pc.SetConsolidationID(c.ID)
}

// SetShipmentPalletID sets the "shipment_pallet" edge to the ShipmentPallet entity by ID.
func (pc *PalletCreate) SetShipmentPalletID(id pulid.ID) *PalletCreate {
	pc.mutation.SetShipmentPalletID(id)
	return pc
}

// SetNillableShipmentPalletID sets the "shipment_pallet" edge to the ShipmentPallet entity by ID if the given value is not nil.
func (pc *PalletCreate) SetNillableShipmentPalletID(id *pulid.ID) *PalletCreate {
	if id != nil {
		pc = pc.SetShipmentPalletID(*id)
	}
	return pc
}

// SetShipmentPallet sets the "shipment_pallet" edge to the ShipmentPallet entity.
func (pc *PalletCreate) SetShipmentPallet(s *ShipmentPallet) *PalletCreate {
	return pc.SetShipmentPalletID(s.ID)
}

// AddCancelledShipmentPalletIDs adds the "cancelled_shipment_pallet" edge to the ShipmentPallet entity by IDs.
func (pc *PalletCreate) AddCancelledShipmentPalletIDs(ids ...pulid.ID) *PalletCreate {
	pc.mutation.AddCancelledShipmentPalletIDs(ids...)
	return pc
}

// AddCancelledShipmentPallet adds the "cancelled_shipment_pallet" edges to the ShipmentPallet entity.
func (pc *PalletCreate) AddCancelledShipmentPallet(s ...*ShipmentPallet) *PalletCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddCancelledShipmentPalletIDs(ids...)
}

// Mutation returns the PalletMutation object of the builder.
func (pc *PalletCreate) Mutation() *PalletMutation {
	return pc.mutation
}

// Save creates the Pallet in the database.
func (pc *PalletCreate) Save(ctx context.Context) (*Pallet, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PalletCreate) SaveX(ctx context.Context) *Pallet {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PalletCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PalletCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PalletCreate) defaults() error {
	if _, ok := pc.mutation.ID(); !ok {
		if pallet.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized pallet.DefaultID (forgotten import ent/runtime?)")
		}
		v := pallet.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PalletCreate) check() error {
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Pallet.tenant_id"`)}
	}
	if _, ok := pc.mutation.PublicID(); !ok {
		return &ValidationError{Name: "public_id", err: errors.New(`ent: missing required field "Pallet.public_id"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Pallet.description"`)}
	}
	if len(pc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Pallet.tenant"`)}
	}
	if len(pc.mutation.ConsolidationIDs()) == 0 {
		return &ValidationError{Name: "consolidation", err: errors.New(`ent: missing required edge "Pallet.consolidation"`)}
	}
	return nil
}

func (pc *PalletCreate) sqlSave(ctx context.Context) (*Pallet, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PalletCreate) createSpec() (*Pallet, *sqlgraph.CreateSpec) {
	var (
		_node = &Pallet{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pallet.Table, sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.PublicID(); ok {
		_spec.SetField(pallet.FieldPublicID, field.TypeString, value)
		_node.PublicID = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(pallet.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := pc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.TenantTable,
			Columns: []string{pallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.PackagingTable,
			Columns: []string{pallet.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pallet_packaging = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pallet.ConsolidationTable,
			Columns: []string{pallet.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.consolidation_pallets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pallet.ShipmentPalletTable,
			Columns: []string{pallet.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CancelledShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pallet.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalletUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pc *PalletCreate) OnConflict(opts ...sql.ConflictOption) *PalletUpsertOne {
	pc.conflict = opts
	return &PalletUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PalletCreate) OnConflictColumns(columns ...string) *PalletUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PalletUpsertOne{
		create: pc,
	}
}

type (
	// PalletUpsertOne is the builder for "upsert"-ing
	//  one Pallet node.
	PalletUpsertOne struct {
		create *PalletCreate
	}

	// PalletUpsert is the "OnConflict" setter.
	PalletUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *PalletUpsert) SetTenantID(v pulid.ID) *PalletUpsert {
	u.Set(pallet.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PalletUpsert) UpdateTenantID() *PalletUpsert {
	u.SetExcluded(pallet.FieldTenantID)
	return u
}

// SetPublicID sets the "public_id" field.
func (u *PalletUpsert) SetPublicID(v string) *PalletUpsert {
	u.Set(pallet.FieldPublicID, v)
	return u
}

// UpdatePublicID sets the "public_id" field to the value that was provided on create.
func (u *PalletUpsert) UpdatePublicID() *PalletUpsert {
	u.SetExcluded(pallet.FieldPublicID)
	return u
}

// SetDescription sets the "description" field.
func (u *PalletUpsert) SetDescription(v string) *PalletUpsert {
	u.Set(pallet.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PalletUpsert) UpdateDescription() *PalletUpsert {
	u.SetExcluded(pallet.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Pallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalletUpsertOne) UpdateNewValues() *PalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(pallet.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pallet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PalletUpsertOne) Ignore() *PalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalletUpsertOne) DoNothing() *PalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalletCreate.OnConflict
// documentation for more info.
func (u *PalletUpsertOne) Update(set func(*PalletUpsert)) *PalletUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PalletUpsertOne) SetTenantID(v pulid.ID) *PalletUpsertOne {
	return u.Update(func(s *PalletUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PalletUpsertOne) UpdateTenantID() *PalletUpsertOne {
	return u.Update(func(s *PalletUpsert) {
		s.UpdateTenantID()
	})
}

// SetPublicID sets the "public_id" field.
func (u *PalletUpsertOne) SetPublicID(v string) *PalletUpsertOne {
	return u.Update(func(s *PalletUpsert) {
		s.SetPublicID(v)
	})
}

// UpdatePublicID sets the "public_id" field to the value that was provided on create.
func (u *PalletUpsertOne) UpdatePublicID() *PalletUpsertOne {
	return u.Update(func(s *PalletUpsert) {
		s.UpdatePublicID()
	})
}

// SetDescription sets the "description" field.
func (u *PalletUpsertOne) SetDescription(v string) *PalletUpsertOne {
	return u.Update(func(s *PalletUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PalletUpsertOne) UpdateDescription() *PalletUpsertOne {
	return u.Update(func(s *PalletUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *PalletUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalletCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalletUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PalletUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PalletUpsertOne.ID is not supported by MySQL driver. Use PalletUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PalletUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PalletCreateBulk is the builder for creating many Pallet entities in bulk.
type PalletCreateBulk struct {
	config
	err      error
	builders []*PalletCreate
	conflict []sql.ConflictOption
}

// Save creates the Pallet entities in the database.
func (pcb *PalletCreateBulk) Save(ctx context.Context) ([]*Pallet, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pallet, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PalletCreateBulk) SaveX(ctx context.Context) []*Pallet {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PalletCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PalletCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pallet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PalletUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PalletCreateBulk) OnConflict(opts ...sql.ConflictOption) *PalletUpsertBulk {
	pcb.conflict = opts
	return &PalletUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pallet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PalletCreateBulk) OnConflictColumns(columns ...string) *PalletUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PalletUpsertBulk{
		create: pcb,
	}
}

// PalletUpsertBulk is the builder for "upsert"-ing
// a bulk of Pallet nodes.
type PalletUpsertBulk struct {
	create *PalletCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pallet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(pallet.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PalletUpsertBulk) UpdateNewValues() *PalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(pallet.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pallet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PalletUpsertBulk) Ignore() *PalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PalletUpsertBulk) DoNothing() *PalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PalletCreateBulk.OnConflict
// documentation for more info.
func (u *PalletUpsertBulk) Update(set func(*PalletUpsert)) *PalletUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PalletUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PalletUpsertBulk) SetTenantID(v pulid.ID) *PalletUpsertBulk {
	return u.Update(func(s *PalletUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PalletUpsertBulk) UpdateTenantID() *PalletUpsertBulk {
	return u.Update(func(s *PalletUpsert) {
		s.UpdateTenantID()
	})
}

// SetPublicID sets the "public_id" field.
func (u *PalletUpsertBulk) SetPublicID(v string) *PalletUpsertBulk {
	return u.Update(func(s *PalletUpsert) {
		s.SetPublicID(v)
	})
}

// UpdatePublicID sets the "public_id" field to the value that was provided on create.
func (u *PalletUpsertBulk) UpdatePublicID() *PalletUpsertBulk {
	return u.Update(func(s *PalletUpsert) {
		s.UpdatePublicID()
	})
}

// SetDescription sets the "description" field.
func (u *PalletUpsertBulk) SetDescription(v string) *PalletUpsertBulk {
	return u.Update(func(s *PalletUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PalletUpsertBulk) UpdateDescription() *PalletUpsertBulk {
	return u.Update(func(s *PalletUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *PalletUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PalletCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PalletCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PalletUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
