// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentUSPSCreate is the builder for creating a ShipmentUSPS entity.
type ShipmentUSPSCreate struct {
	config
	mutation *ShipmentUSPSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (suc *ShipmentUSPSCreate) SetTenantID(pu pulid.ID) *ShipmentUSPSCreate {
	suc.mutation.SetTenantID(pu)
	return suc
}

// SetTrackingNumber sets the "tracking_number" field.
func (suc *ShipmentUSPSCreate) SetTrackingNumber(s string) *ShipmentUSPSCreate {
	suc.mutation.SetTrackingNumber(s)
	return suc
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (suc *ShipmentUSPSCreate) SetNillableTrackingNumber(s *string) *ShipmentUSPSCreate {
	if s != nil {
		suc.SetTrackingNumber(*s)
	}
	return suc
}

// SetPostage sets the "postage" field.
func (suc *ShipmentUSPSCreate) SetPostage(f float64) *ShipmentUSPSCreate {
	suc.mutation.SetPostage(f)
	return suc
}

// SetNillablePostage sets the "postage" field if the given value is not nil.
func (suc *ShipmentUSPSCreate) SetNillablePostage(f *float64) *ShipmentUSPSCreate {
	if f != nil {
		suc.SetPostage(*f)
	}
	return suc
}

// SetScheduledDeliveryDate sets the "scheduled_delivery_date" field.
func (suc *ShipmentUSPSCreate) SetScheduledDeliveryDate(t time.Time) *ShipmentUSPSCreate {
	suc.mutation.SetScheduledDeliveryDate(t)
	return suc
}

// SetNillableScheduledDeliveryDate sets the "scheduled_delivery_date" field if the given value is not nil.
func (suc *ShipmentUSPSCreate) SetNillableScheduledDeliveryDate(t *time.Time) *ShipmentUSPSCreate {
	if t != nil {
		suc.SetScheduledDeliveryDate(*t)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *ShipmentUSPSCreate) SetID(pu pulid.ID) *ShipmentUSPSCreate {
	suc.mutation.SetID(pu)
	return suc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (suc *ShipmentUSPSCreate) SetNillableID(pu *pulid.ID) *ShipmentUSPSCreate {
	if pu != nil {
		suc.SetID(*pu)
	}
	return suc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suc *ShipmentUSPSCreate) SetTenant(t *Tenant) *ShipmentUSPSCreate {
	return suc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (suc *ShipmentUSPSCreate) SetShipmentID(id pulid.ID) *ShipmentUSPSCreate {
	suc.mutation.SetShipmentID(id)
	return suc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (suc *ShipmentUSPSCreate) SetShipment(s *Shipment) *ShipmentUSPSCreate {
	return suc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentUSPSMutation object of the builder.
func (suc *ShipmentUSPSCreate) Mutation() *ShipmentUSPSMutation {
	return suc.mutation
}

// Save creates the ShipmentUSPS in the database.
func (suc *ShipmentUSPSCreate) Save(ctx context.Context) (*ShipmentUSPS, error) {
	if err := suc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *ShipmentUSPSCreate) SaveX(ctx context.Context) *ShipmentUSPS {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *ShipmentUSPSCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *ShipmentUSPSCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *ShipmentUSPSCreate) defaults() error {
	if _, ok := suc.mutation.ID(); !ok {
		if shipmentusps.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmentusps.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmentusps.DefaultID()
		suc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suc *ShipmentUSPSCreate) check() error {
	if _, ok := suc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentUSPS.tenant_id"`)}
	}
	if len(suc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentUSPS.tenant"`)}
	}
	if len(suc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentUSPS.shipment"`)}
	}
	return nil
}

func (suc *ShipmentUSPSCreate) sqlSave(ctx context.Context) (*ShipmentUSPS, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *ShipmentUSPSCreate) createSpec() (*ShipmentUSPS, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentUSPS{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentusps.Table, sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString))
	)
	_spec.OnConflict = suc.conflict
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := suc.mutation.TrackingNumber(); ok {
		_spec.SetField(shipmentusps.FieldTrackingNumber, field.TypeString, value)
		_node.TrackingNumber = value
	}
	if value, ok := suc.mutation.Postage(); ok {
		_spec.SetField(shipmentusps.FieldPostage, field.TypeFloat64, value)
		_node.Postage = value
	}
	if value, ok := suc.mutation.ScheduledDeliveryDate(); ok {
		_spec.SetField(shipmentusps.FieldScheduledDeliveryDate, field.TypeTime, value)
		_node.ScheduledDeliveryDate = value
	}
	if nodes := suc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentusps.TenantTable,
			Columns: []string{shipmentusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := suc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentusps.ShipmentTable,
			Columns: []string{shipmentusps.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_usps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentUSPS.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (suc *ShipmentUSPSCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentUSPSUpsertOne {
	suc.conflict = opts
	return &ShipmentUSPSUpsertOne{
		create: suc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (suc *ShipmentUSPSCreate) OnConflictColumns(columns ...string) *ShipmentUSPSUpsertOne {
	suc.conflict = append(suc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentUSPSUpsertOne{
		create: suc,
	}
}

type (
	// ShipmentUSPSUpsertOne is the builder for "upsert"-ing
	//  one ShipmentUSPS node.
	ShipmentUSPSUpsertOne struct {
		create *ShipmentUSPSCreate
	}

	// ShipmentUSPSUpsert is the "OnConflict" setter.
	ShipmentUSPSUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentUSPSUpsert) SetTenantID(v pulid.ID) *ShipmentUSPSUpsert {
	u.Set(shipmentusps.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentUSPSUpsert) UpdateTenantID() *ShipmentUSPSUpsert {
	u.SetExcluded(shipmentusps.FieldTenantID)
	return u
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *ShipmentUSPSUpsert) SetTrackingNumber(v string) *ShipmentUSPSUpsert {
	u.Set(shipmentusps.FieldTrackingNumber, v)
	return u
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *ShipmentUSPSUpsert) UpdateTrackingNumber() *ShipmentUSPSUpsert {
	u.SetExcluded(shipmentusps.FieldTrackingNumber)
	return u
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (u *ShipmentUSPSUpsert) ClearTrackingNumber() *ShipmentUSPSUpsert {
	u.SetNull(shipmentusps.FieldTrackingNumber)
	return u
}

// SetPostage sets the "postage" field.
func (u *ShipmentUSPSUpsert) SetPostage(v float64) *ShipmentUSPSUpsert {
	u.Set(shipmentusps.FieldPostage, v)
	return u
}

// UpdatePostage sets the "postage" field to the value that was provided on create.
func (u *ShipmentUSPSUpsert) UpdatePostage() *ShipmentUSPSUpsert {
	u.SetExcluded(shipmentusps.FieldPostage)
	return u
}

// AddPostage adds v to the "postage" field.
func (u *ShipmentUSPSUpsert) AddPostage(v float64) *ShipmentUSPSUpsert {
	u.Add(shipmentusps.FieldPostage, v)
	return u
}

// ClearPostage clears the value of the "postage" field.
func (u *ShipmentUSPSUpsert) ClearPostage() *ShipmentUSPSUpsert {
	u.SetNull(shipmentusps.FieldPostage)
	return u
}

// SetScheduledDeliveryDate sets the "scheduled_delivery_date" field.
func (u *ShipmentUSPSUpsert) SetScheduledDeliveryDate(v time.Time) *ShipmentUSPSUpsert {
	u.Set(shipmentusps.FieldScheduledDeliveryDate, v)
	return u
}

// UpdateScheduledDeliveryDate sets the "scheduled_delivery_date" field to the value that was provided on create.
func (u *ShipmentUSPSUpsert) UpdateScheduledDeliveryDate() *ShipmentUSPSUpsert {
	u.SetExcluded(shipmentusps.FieldScheduledDeliveryDate)
	return u
}

// ClearScheduledDeliveryDate clears the value of the "scheduled_delivery_date" field.
func (u *ShipmentUSPSUpsert) ClearScheduledDeliveryDate() *ShipmentUSPSUpsert {
	u.SetNull(shipmentusps.FieldScheduledDeliveryDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentUSPSUpsertOne) UpdateNewValues() *ShipmentUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmentusps.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentUSPS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentUSPSUpsertOne) Ignore() *ShipmentUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentUSPSUpsertOne) DoNothing() *ShipmentUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentUSPSCreate.OnConflict
// documentation for more info.
func (u *ShipmentUSPSUpsertOne) Update(set func(*ShipmentUSPSUpsert)) *ShipmentUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentUSPSUpsertOne) SetTenantID(v pulid.ID) *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertOne) UpdateTenantID() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *ShipmentUSPSUpsertOne) SetTrackingNumber(v string) *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertOne) UpdateTrackingNumber() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdateTrackingNumber()
	})
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (u *ShipmentUSPSUpsertOne) ClearTrackingNumber() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.ClearTrackingNumber()
	})
}

// SetPostage sets the "postage" field.
func (u *ShipmentUSPSUpsertOne) SetPostage(v float64) *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetPostage(v)
	})
}

// AddPostage adds v to the "postage" field.
func (u *ShipmentUSPSUpsertOne) AddPostage(v float64) *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.AddPostage(v)
	})
}

// UpdatePostage sets the "postage" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertOne) UpdatePostage() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdatePostage()
	})
}

// ClearPostage clears the value of the "postage" field.
func (u *ShipmentUSPSUpsertOne) ClearPostage() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.ClearPostage()
	})
}

// SetScheduledDeliveryDate sets the "scheduled_delivery_date" field.
func (u *ShipmentUSPSUpsertOne) SetScheduledDeliveryDate(v time.Time) *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetScheduledDeliveryDate(v)
	})
}

// UpdateScheduledDeliveryDate sets the "scheduled_delivery_date" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertOne) UpdateScheduledDeliveryDate() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdateScheduledDeliveryDate()
	})
}

// ClearScheduledDeliveryDate clears the value of the "scheduled_delivery_date" field.
func (u *ShipmentUSPSUpsertOne) ClearScheduledDeliveryDate() *ShipmentUSPSUpsertOne {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.ClearScheduledDeliveryDate()
	})
}

// Exec executes the query.
func (u *ShipmentUSPSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentUSPSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentUSPSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentUSPSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentUSPSUpsertOne.ID is not supported by MySQL driver. Use ShipmentUSPSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentUSPSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentUSPSCreateBulk is the builder for creating many ShipmentUSPS entities in bulk.
type ShipmentUSPSCreateBulk struct {
	config
	err      error
	builders []*ShipmentUSPSCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentUSPS entities in the database.
func (sucb *ShipmentUSPSCreateBulk) Save(ctx context.Context) ([]*ShipmentUSPS, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*ShipmentUSPS, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentUSPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *ShipmentUSPSCreateBulk) SaveX(ctx context.Context) []*ShipmentUSPS {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *ShipmentUSPSCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *ShipmentUSPSCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentUSPS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sucb *ShipmentUSPSCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentUSPSUpsertBulk {
	sucb.conflict = opts
	return &ShipmentUSPSUpsertBulk{
		create: sucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sucb *ShipmentUSPSCreateBulk) OnConflictColumns(columns ...string) *ShipmentUSPSUpsertBulk {
	sucb.conflict = append(sucb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentUSPSUpsertBulk{
		create: sucb,
	}
}

// ShipmentUSPSUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentUSPS nodes.
type ShipmentUSPSUpsertBulk struct {
	create *ShipmentUSPSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentUSPSUpsertBulk) UpdateNewValues() *ShipmentUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmentusps.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentUSPS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentUSPSUpsertBulk) Ignore() *ShipmentUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentUSPSUpsertBulk) DoNothing() *ShipmentUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentUSPSCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentUSPSUpsertBulk) Update(set func(*ShipmentUSPSUpsert)) *ShipmentUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentUSPSUpsertBulk) SetTenantID(v pulid.ID) *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertBulk) UpdateTenantID() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *ShipmentUSPSUpsertBulk) SetTrackingNumber(v string) *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertBulk) UpdateTrackingNumber() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdateTrackingNumber()
	})
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (u *ShipmentUSPSUpsertBulk) ClearTrackingNumber() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.ClearTrackingNumber()
	})
}

// SetPostage sets the "postage" field.
func (u *ShipmentUSPSUpsertBulk) SetPostage(v float64) *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetPostage(v)
	})
}

// AddPostage adds v to the "postage" field.
func (u *ShipmentUSPSUpsertBulk) AddPostage(v float64) *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.AddPostage(v)
	})
}

// UpdatePostage sets the "postage" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertBulk) UpdatePostage() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdatePostage()
	})
}

// ClearPostage clears the value of the "postage" field.
func (u *ShipmentUSPSUpsertBulk) ClearPostage() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.ClearPostage()
	})
}

// SetScheduledDeliveryDate sets the "scheduled_delivery_date" field.
func (u *ShipmentUSPSUpsertBulk) SetScheduledDeliveryDate(v time.Time) *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.SetScheduledDeliveryDate(v)
	})
}

// UpdateScheduledDeliveryDate sets the "scheduled_delivery_date" field to the value that was provided on create.
func (u *ShipmentUSPSUpsertBulk) UpdateScheduledDeliveryDate() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.UpdateScheduledDeliveryDate()
	})
}

// ClearScheduledDeliveryDate clears the value of the "scheduled_delivery_date" field.
func (u *ShipmentUSPSUpsertBulk) ClearScheduledDeliveryDate() *ShipmentUSPSUpsertBulk {
	return u.Update(func(s *ShipmentUSPSUpsert) {
		s.ClearScheduledDeliveryDate()
	})
}

// Exec executes the query.
func (u *ShipmentUSPSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentUSPSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentUSPSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentUSPSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
