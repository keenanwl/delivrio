// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopUpdate is the builder for updating ParcelShop entities.
type ParcelShopUpdate struct {
	config
	hooks    []Hook
	mutation *ParcelShopMutation
}

// Where appends a list predicates to the ParcelShopUpdate builder.
func (psu *ParcelShopUpdate) Where(ps ...predicate.ParcelShop) *ParcelShopUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetName sets the "name" field.
func (psu *ParcelShopUpdate) SetName(s string) *ParcelShopUpdate {
	psu.mutation.SetName(s)
	return psu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psu *ParcelShopUpdate) SetNillableName(s *string) *ParcelShopUpdate {
	if s != nil {
		psu.SetName(*s)
	}
	return psu
}

// SetLastUpdated sets the "last_updated" field.
func (psu *ParcelShopUpdate) SetLastUpdated(t time.Time) *ParcelShopUpdate {
	psu.mutation.SetLastUpdated(t)
	return psu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (psu *ParcelShopUpdate) SetNillableLastUpdated(t *time.Time) *ParcelShopUpdate {
	if t != nil {
		psu.SetLastUpdated(*t)
	}
	return psu
}

// SetParcelShopDAOID sets the "parcel_shop_dao" edge to the ParcelShopDAO entity by ID.
func (psu *ParcelShopUpdate) SetParcelShopDAOID(id pulid.ID) *ParcelShopUpdate {
	psu.mutation.SetParcelShopDAOID(id)
	return psu
}

// SetNillableParcelShopDAOID sets the "parcel_shop_dao" edge to the ParcelShopDAO entity by ID if the given value is not nil.
func (psu *ParcelShopUpdate) SetNillableParcelShopDAOID(id *pulid.ID) *ParcelShopUpdate {
	if id != nil {
		psu = psu.SetParcelShopDAOID(*id)
	}
	return psu
}

// SetParcelShopDAO sets the "parcel_shop_dao" edge to the ParcelShopDAO entity.
func (psu *ParcelShopUpdate) SetParcelShopDAO(p *ParcelShopDAO) *ParcelShopUpdate {
	return psu.SetParcelShopDAOID(p.ID)
}

// SetParcelShopPostNordID sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity by ID.
func (psu *ParcelShopUpdate) SetParcelShopPostNordID(id pulid.ID) *ParcelShopUpdate {
	psu.mutation.SetParcelShopPostNordID(id)
	return psu
}

// SetNillableParcelShopPostNordID sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity by ID if the given value is not nil.
func (psu *ParcelShopUpdate) SetNillableParcelShopPostNordID(id *pulid.ID) *ParcelShopUpdate {
	if id != nil {
		psu = psu.SetParcelShopPostNordID(*id)
	}
	return psu
}

// SetParcelShopPostNord sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity.
func (psu *ParcelShopUpdate) SetParcelShopPostNord(p *ParcelShopPostNord) *ParcelShopUpdate {
	return psu.SetParcelShopPostNordID(p.ID)
}

// SetParcelShopGLSID sets the "parcel_shop_gls" edge to the ParcelShopGLS entity by ID.
func (psu *ParcelShopUpdate) SetParcelShopGLSID(id pulid.ID) *ParcelShopUpdate {
	psu.mutation.SetParcelShopGLSID(id)
	return psu
}

// SetNillableParcelShopGLSID sets the "parcel_shop_gls" edge to the ParcelShopGLS entity by ID if the given value is not nil.
func (psu *ParcelShopUpdate) SetNillableParcelShopGLSID(id *pulid.ID) *ParcelShopUpdate {
	if id != nil {
		psu = psu.SetParcelShopGLSID(*id)
	}
	return psu
}

// SetParcelShopGLS sets the "parcel_shop_gls" edge to the ParcelShopGLS entity.
func (psu *ParcelShopUpdate) SetParcelShopGLS(p *ParcelShopGLS) *ParcelShopUpdate {
	return psu.SetParcelShopGLSID(p.ID)
}

// SetParcelShopBringID sets the "parcel_shop_bring" edge to the ParcelShopBring entity by ID.
func (psu *ParcelShopUpdate) SetParcelShopBringID(id pulid.ID) *ParcelShopUpdate {
	psu.mutation.SetParcelShopBringID(id)
	return psu
}

// SetNillableParcelShopBringID sets the "parcel_shop_bring" edge to the ParcelShopBring entity by ID if the given value is not nil.
func (psu *ParcelShopUpdate) SetNillableParcelShopBringID(id *pulid.ID) *ParcelShopUpdate {
	if id != nil {
		psu = psu.SetParcelShopBringID(*id)
	}
	return psu
}

// SetParcelShopBring sets the "parcel_shop_bring" edge to the ParcelShopBring entity.
func (psu *ParcelShopUpdate) SetParcelShopBring(p *ParcelShopBring) *ParcelShopUpdate {
	return psu.SetParcelShopBringID(p.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (psu *ParcelShopUpdate) SetCarrierBrandID(id pulid.ID) *ParcelShopUpdate {
	psu.mutation.SetCarrierBrandID(id)
	return psu
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (psu *ParcelShopUpdate) SetCarrierBrand(c *CarrierBrand) *ParcelShopUpdate {
	return psu.SetCarrierBrandID(c.ID)
}

// SetAddressID sets the "address" edge to the AddressGlobal entity by ID.
func (psu *ParcelShopUpdate) SetAddressID(id pulid.ID) *ParcelShopUpdate {
	psu.mutation.SetAddressID(id)
	return psu
}

// SetAddress sets the "address" edge to the AddressGlobal entity.
func (psu *ParcelShopUpdate) SetAddress(a *AddressGlobal) *ParcelShopUpdate {
	return psu.SetAddressID(a.ID)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (psu *ParcelShopUpdate) AddColliIDs(ids ...pulid.ID) *ParcelShopUpdate {
	psu.mutation.AddColliIDs(ids...)
	return psu
}

// AddColli adds the "colli" edges to the Colli entity.
func (psu *ParcelShopUpdate) AddColli(c ...*Colli) *ParcelShopUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.AddColliIDs(ids...)
}

// AddBusinessHoursPeriodIDs adds the "business_hours_period" edge to the BusinessHoursPeriod entity by IDs.
func (psu *ParcelShopUpdate) AddBusinessHoursPeriodIDs(ids ...pulid.ID) *ParcelShopUpdate {
	psu.mutation.AddBusinessHoursPeriodIDs(ids...)
	return psu
}

// AddBusinessHoursPeriod adds the "business_hours_period" edges to the BusinessHoursPeriod entity.
func (psu *ParcelShopUpdate) AddBusinessHoursPeriod(b ...*BusinessHoursPeriod) *ParcelShopUpdate {
	ids := make([]pulid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return psu.AddBusinessHoursPeriodIDs(ids...)
}

// Mutation returns the ParcelShopMutation object of the builder.
func (psu *ParcelShopUpdate) Mutation() *ParcelShopMutation {
	return psu.mutation
}

// ClearParcelShopDAO clears the "parcel_shop_dao" edge to the ParcelShopDAO entity.
func (psu *ParcelShopUpdate) ClearParcelShopDAO() *ParcelShopUpdate {
	psu.mutation.ClearParcelShopDAO()
	return psu
}

// ClearParcelShopPostNord clears the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity.
func (psu *ParcelShopUpdate) ClearParcelShopPostNord() *ParcelShopUpdate {
	psu.mutation.ClearParcelShopPostNord()
	return psu
}

// ClearParcelShopGLS clears the "parcel_shop_gls" edge to the ParcelShopGLS entity.
func (psu *ParcelShopUpdate) ClearParcelShopGLS() *ParcelShopUpdate {
	psu.mutation.ClearParcelShopGLS()
	return psu
}

// ClearParcelShopBring clears the "parcel_shop_bring" edge to the ParcelShopBring entity.
func (psu *ParcelShopUpdate) ClearParcelShopBring() *ParcelShopUpdate {
	psu.mutation.ClearParcelShopBring()
	return psu
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (psu *ParcelShopUpdate) ClearCarrierBrand() *ParcelShopUpdate {
	psu.mutation.ClearCarrierBrand()
	return psu
}

// ClearAddress clears the "address" edge to the AddressGlobal entity.
func (psu *ParcelShopUpdate) ClearAddress() *ParcelShopUpdate {
	psu.mutation.ClearAddress()
	return psu
}

// ClearColli clears all "colli" edges to the Colli entity.
func (psu *ParcelShopUpdate) ClearColli() *ParcelShopUpdate {
	psu.mutation.ClearColli()
	return psu
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (psu *ParcelShopUpdate) RemoveColliIDs(ids ...pulid.ID) *ParcelShopUpdate {
	psu.mutation.RemoveColliIDs(ids...)
	return psu
}

// RemoveColli removes "colli" edges to Colli entities.
func (psu *ParcelShopUpdate) RemoveColli(c ...*Colli) *ParcelShopUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psu.RemoveColliIDs(ids...)
}

// ClearBusinessHoursPeriod clears all "business_hours_period" edges to the BusinessHoursPeriod entity.
func (psu *ParcelShopUpdate) ClearBusinessHoursPeriod() *ParcelShopUpdate {
	psu.mutation.ClearBusinessHoursPeriod()
	return psu
}

// RemoveBusinessHoursPeriodIDs removes the "business_hours_period" edge to BusinessHoursPeriod entities by IDs.
func (psu *ParcelShopUpdate) RemoveBusinessHoursPeriodIDs(ids ...pulid.ID) *ParcelShopUpdate {
	psu.mutation.RemoveBusinessHoursPeriodIDs(ids...)
	return psu
}

// RemoveBusinessHoursPeriod removes "business_hours_period" edges to BusinessHoursPeriod entities.
func (psu *ParcelShopUpdate) RemoveBusinessHoursPeriod(b ...*BusinessHoursPeriod) *ParcelShopUpdate {
	ids := make([]pulid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return psu.RemoveBusinessHoursPeriodIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *ParcelShopUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *ParcelShopUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *ParcelShopUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *ParcelShopUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psu *ParcelShopUpdate) check() error {
	if psu.mutation.CarrierBrandCleared() && len(psu.mutation.CarrierBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShop.carrier_brand"`)
	}
	if psu.mutation.AddressCleared() && len(psu.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShop.address"`)
	}
	return nil
}

func (psu *ParcelShopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshop.Table, parcelshop.Columns, sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.Name(); ok {
		_spec.SetField(parcelshop.FieldName, field.TypeString, value)
	}
	if value, ok := psu.mutation.LastUpdated(); ok {
		_spec.SetField(parcelshop.FieldLastUpdated, field.TypeTime, value)
	}
	if psu.mutation.ParcelShopDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopDAOTable,
			Columns: []string{parcelshop.ParcelShopDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ParcelShopDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopDAOTable,
			Columns: []string{parcelshop.ParcelShopDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ParcelShopPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopPostNordTable,
			Columns: []string{parcelshop.ParcelShopPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ParcelShopPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopPostNordTable,
			Columns: []string{parcelshop.ParcelShopPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ParcelShopGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopGLSTable,
			Columns: []string{parcelshop.ParcelShopGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ParcelShopGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopGLSTable,
			Columns: []string{parcelshop.ParcelShopGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ParcelShopBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopBringTable,
			Columns: []string{parcelshop.ParcelShopBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ParcelShopBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopBringTable,
			Columns: []string{parcelshop.ParcelShopBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parcelshop.CarrierBrandTable,
			Columns: []string{parcelshop.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parcelshop.CarrierBrandTable,
			Columns: []string{parcelshop.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.AddressTable,
			Columns: []string{parcelshop.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.AddressTable,
			Columns: []string{parcelshop.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedColliIDs(); len(nodes) > 0 && !psu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psu.mutation.BusinessHoursPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.RemovedBusinessHoursPeriodIDs(); len(nodes) > 0 && !psu.mutation.BusinessHoursPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psu.mutation.BusinessHoursPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// ParcelShopUpdateOne is the builder for updating a single ParcelShop entity.
type ParcelShopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParcelShopMutation
}

// SetName sets the "name" field.
func (psuo *ParcelShopUpdateOne) SetName(s string) *ParcelShopUpdateOne {
	psuo.mutation.SetName(s)
	return psuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psuo *ParcelShopUpdateOne) SetNillableName(s *string) *ParcelShopUpdateOne {
	if s != nil {
		psuo.SetName(*s)
	}
	return psuo
}

// SetLastUpdated sets the "last_updated" field.
func (psuo *ParcelShopUpdateOne) SetLastUpdated(t time.Time) *ParcelShopUpdateOne {
	psuo.mutation.SetLastUpdated(t)
	return psuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (psuo *ParcelShopUpdateOne) SetNillableLastUpdated(t *time.Time) *ParcelShopUpdateOne {
	if t != nil {
		psuo.SetLastUpdated(*t)
	}
	return psuo
}

// SetParcelShopDAOID sets the "parcel_shop_dao" edge to the ParcelShopDAO entity by ID.
func (psuo *ParcelShopUpdateOne) SetParcelShopDAOID(id pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.SetParcelShopDAOID(id)
	return psuo
}

// SetNillableParcelShopDAOID sets the "parcel_shop_dao" edge to the ParcelShopDAO entity by ID if the given value is not nil.
func (psuo *ParcelShopUpdateOne) SetNillableParcelShopDAOID(id *pulid.ID) *ParcelShopUpdateOne {
	if id != nil {
		psuo = psuo.SetParcelShopDAOID(*id)
	}
	return psuo
}

// SetParcelShopDAO sets the "parcel_shop_dao" edge to the ParcelShopDAO entity.
func (psuo *ParcelShopUpdateOne) SetParcelShopDAO(p *ParcelShopDAO) *ParcelShopUpdateOne {
	return psuo.SetParcelShopDAOID(p.ID)
}

// SetParcelShopPostNordID sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity by ID.
func (psuo *ParcelShopUpdateOne) SetParcelShopPostNordID(id pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.SetParcelShopPostNordID(id)
	return psuo
}

// SetNillableParcelShopPostNordID sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity by ID if the given value is not nil.
func (psuo *ParcelShopUpdateOne) SetNillableParcelShopPostNordID(id *pulid.ID) *ParcelShopUpdateOne {
	if id != nil {
		psuo = psuo.SetParcelShopPostNordID(*id)
	}
	return psuo
}

// SetParcelShopPostNord sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity.
func (psuo *ParcelShopUpdateOne) SetParcelShopPostNord(p *ParcelShopPostNord) *ParcelShopUpdateOne {
	return psuo.SetParcelShopPostNordID(p.ID)
}

// SetParcelShopGLSID sets the "parcel_shop_gls" edge to the ParcelShopGLS entity by ID.
func (psuo *ParcelShopUpdateOne) SetParcelShopGLSID(id pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.SetParcelShopGLSID(id)
	return psuo
}

// SetNillableParcelShopGLSID sets the "parcel_shop_gls" edge to the ParcelShopGLS entity by ID if the given value is not nil.
func (psuo *ParcelShopUpdateOne) SetNillableParcelShopGLSID(id *pulid.ID) *ParcelShopUpdateOne {
	if id != nil {
		psuo = psuo.SetParcelShopGLSID(*id)
	}
	return psuo
}

// SetParcelShopGLS sets the "parcel_shop_gls" edge to the ParcelShopGLS entity.
func (psuo *ParcelShopUpdateOne) SetParcelShopGLS(p *ParcelShopGLS) *ParcelShopUpdateOne {
	return psuo.SetParcelShopGLSID(p.ID)
}

// SetParcelShopBringID sets the "parcel_shop_bring" edge to the ParcelShopBring entity by ID.
func (psuo *ParcelShopUpdateOne) SetParcelShopBringID(id pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.SetParcelShopBringID(id)
	return psuo
}

// SetNillableParcelShopBringID sets the "parcel_shop_bring" edge to the ParcelShopBring entity by ID if the given value is not nil.
func (psuo *ParcelShopUpdateOne) SetNillableParcelShopBringID(id *pulid.ID) *ParcelShopUpdateOne {
	if id != nil {
		psuo = psuo.SetParcelShopBringID(*id)
	}
	return psuo
}

// SetParcelShopBring sets the "parcel_shop_bring" edge to the ParcelShopBring entity.
func (psuo *ParcelShopUpdateOne) SetParcelShopBring(p *ParcelShopBring) *ParcelShopUpdateOne {
	return psuo.SetParcelShopBringID(p.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (psuo *ParcelShopUpdateOne) SetCarrierBrandID(id pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.SetCarrierBrandID(id)
	return psuo
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (psuo *ParcelShopUpdateOne) SetCarrierBrand(c *CarrierBrand) *ParcelShopUpdateOne {
	return psuo.SetCarrierBrandID(c.ID)
}

// SetAddressID sets the "address" edge to the AddressGlobal entity by ID.
func (psuo *ParcelShopUpdateOne) SetAddressID(id pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.SetAddressID(id)
	return psuo
}

// SetAddress sets the "address" edge to the AddressGlobal entity.
func (psuo *ParcelShopUpdateOne) SetAddress(a *AddressGlobal) *ParcelShopUpdateOne {
	return psuo.SetAddressID(a.ID)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (psuo *ParcelShopUpdateOne) AddColliIDs(ids ...pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.AddColliIDs(ids...)
	return psuo
}

// AddColli adds the "colli" edges to the Colli entity.
func (psuo *ParcelShopUpdateOne) AddColli(c ...*Colli) *ParcelShopUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.AddColliIDs(ids...)
}

// AddBusinessHoursPeriodIDs adds the "business_hours_period" edge to the BusinessHoursPeriod entity by IDs.
func (psuo *ParcelShopUpdateOne) AddBusinessHoursPeriodIDs(ids ...pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.AddBusinessHoursPeriodIDs(ids...)
	return psuo
}

// AddBusinessHoursPeriod adds the "business_hours_period" edges to the BusinessHoursPeriod entity.
func (psuo *ParcelShopUpdateOne) AddBusinessHoursPeriod(b ...*BusinessHoursPeriod) *ParcelShopUpdateOne {
	ids := make([]pulid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return psuo.AddBusinessHoursPeriodIDs(ids...)
}

// Mutation returns the ParcelShopMutation object of the builder.
func (psuo *ParcelShopUpdateOne) Mutation() *ParcelShopMutation {
	return psuo.mutation
}

// ClearParcelShopDAO clears the "parcel_shop_dao" edge to the ParcelShopDAO entity.
func (psuo *ParcelShopUpdateOne) ClearParcelShopDAO() *ParcelShopUpdateOne {
	psuo.mutation.ClearParcelShopDAO()
	return psuo
}

// ClearParcelShopPostNord clears the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity.
func (psuo *ParcelShopUpdateOne) ClearParcelShopPostNord() *ParcelShopUpdateOne {
	psuo.mutation.ClearParcelShopPostNord()
	return psuo
}

// ClearParcelShopGLS clears the "parcel_shop_gls" edge to the ParcelShopGLS entity.
func (psuo *ParcelShopUpdateOne) ClearParcelShopGLS() *ParcelShopUpdateOne {
	psuo.mutation.ClearParcelShopGLS()
	return psuo
}

// ClearParcelShopBring clears the "parcel_shop_bring" edge to the ParcelShopBring entity.
func (psuo *ParcelShopUpdateOne) ClearParcelShopBring() *ParcelShopUpdateOne {
	psuo.mutation.ClearParcelShopBring()
	return psuo
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (psuo *ParcelShopUpdateOne) ClearCarrierBrand() *ParcelShopUpdateOne {
	psuo.mutation.ClearCarrierBrand()
	return psuo
}

// ClearAddress clears the "address" edge to the AddressGlobal entity.
func (psuo *ParcelShopUpdateOne) ClearAddress() *ParcelShopUpdateOne {
	psuo.mutation.ClearAddress()
	return psuo
}

// ClearColli clears all "colli" edges to the Colli entity.
func (psuo *ParcelShopUpdateOne) ClearColli() *ParcelShopUpdateOne {
	psuo.mutation.ClearColli()
	return psuo
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (psuo *ParcelShopUpdateOne) RemoveColliIDs(ids ...pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.RemoveColliIDs(ids...)
	return psuo
}

// RemoveColli removes "colli" edges to Colli entities.
func (psuo *ParcelShopUpdateOne) RemoveColli(c ...*Colli) *ParcelShopUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psuo.RemoveColliIDs(ids...)
}

// ClearBusinessHoursPeriod clears all "business_hours_period" edges to the BusinessHoursPeriod entity.
func (psuo *ParcelShopUpdateOne) ClearBusinessHoursPeriod() *ParcelShopUpdateOne {
	psuo.mutation.ClearBusinessHoursPeriod()
	return psuo
}

// RemoveBusinessHoursPeriodIDs removes the "business_hours_period" edge to BusinessHoursPeriod entities by IDs.
func (psuo *ParcelShopUpdateOne) RemoveBusinessHoursPeriodIDs(ids ...pulid.ID) *ParcelShopUpdateOne {
	psuo.mutation.RemoveBusinessHoursPeriodIDs(ids...)
	return psuo
}

// RemoveBusinessHoursPeriod removes "business_hours_period" edges to BusinessHoursPeriod entities.
func (psuo *ParcelShopUpdateOne) RemoveBusinessHoursPeriod(b ...*BusinessHoursPeriod) *ParcelShopUpdateOne {
	ids := make([]pulid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return psuo.RemoveBusinessHoursPeriodIDs(ids...)
}

// Where appends a list predicates to the ParcelShopUpdate builder.
func (psuo *ParcelShopUpdateOne) Where(ps ...predicate.ParcelShop) *ParcelShopUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *ParcelShopUpdateOne) Select(field string, fields ...string) *ParcelShopUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated ParcelShop entity.
func (psuo *ParcelShopUpdateOne) Save(ctx context.Context) (*ParcelShop, error) {
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *ParcelShopUpdateOne) SaveX(ctx context.Context) *ParcelShop {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *ParcelShopUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *ParcelShopUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psuo *ParcelShopUpdateOne) check() error {
	if psuo.mutation.CarrierBrandCleared() && len(psuo.mutation.CarrierBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShop.carrier_brand"`)
	}
	if psuo.mutation.AddressCleared() && len(psuo.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShop.address"`)
	}
	return nil
}

func (psuo *ParcelShopUpdateOne) sqlSave(ctx context.Context) (_node *ParcelShop, err error) {
	if err := psuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshop.Table, parcelshop.Columns, sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ParcelShop.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshop.FieldID)
		for _, f := range fields {
			if !parcelshop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parcelshop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.Name(); ok {
		_spec.SetField(parcelshop.FieldName, field.TypeString, value)
	}
	if value, ok := psuo.mutation.LastUpdated(); ok {
		_spec.SetField(parcelshop.FieldLastUpdated, field.TypeTime, value)
	}
	if psuo.mutation.ParcelShopDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopDAOTable,
			Columns: []string{parcelshop.ParcelShopDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ParcelShopDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopDAOTable,
			Columns: []string{parcelshop.ParcelShopDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ParcelShopPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopPostNordTable,
			Columns: []string{parcelshop.ParcelShopPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ParcelShopPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopPostNordTable,
			Columns: []string{parcelshop.ParcelShopPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ParcelShopGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopGLSTable,
			Columns: []string{parcelshop.ParcelShopGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ParcelShopGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopGLSTable,
			Columns: []string{parcelshop.ParcelShopGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ParcelShopBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopBringTable,
			Columns: []string{parcelshop.ParcelShopBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ParcelShopBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopBringTable,
			Columns: []string{parcelshop.ParcelShopBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parcelshop.CarrierBrandTable,
			Columns: []string{parcelshop.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parcelshop.CarrierBrandTable,
			Columns: []string{parcelshop.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.AddressTable,
			Columns: []string{parcelshop.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.AddressTable,
			Columns: []string{parcelshop.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedColliIDs(); len(nodes) > 0 && !psuo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psuo.mutation.BusinessHoursPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.RemovedBusinessHoursPeriodIDs(); len(nodes) > 0 && !psuo.mutation.BusinessHoursPeriodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psuo.mutation.BusinessHoursPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ParcelShop{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
