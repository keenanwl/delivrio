// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderLineUpdate is the builder for updating OrderLine entities.
type OrderLineUpdate struct {
	config
	hooks    []Hook
	mutation *OrderLineMutation
}

// Where appends a list predicates to the OrderLineUpdate builder.
func (olu *OrderLineUpdate) Where(ps ...predicate.OrderLine) *OrderLineUpdate {
	olu.mutation.Where(ps...)
	return olu
}

// SetTenantID sets the "tenant_id" field.
func (olu *OrderLineUpdate) SetTenantID(pu pulid.ID) *OrderLineUpdate {
	olu.mutation.SetTenantID(pu)
	return olu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableTenantID(pu *pulid.ID) *OrderLineUpdate {
	if pu != nil {
		olu.SetTenantID(*pu)
	}
	return olu
}

// SetUnitPrice sets the "unit_price" field.
func (olu *OrderLineUpdate) SetUnitPrice(f float64) *OrderLineUpdate {
	olu.mutation.ResetUnitPrice()
	olu.mutation.SetUnitPrice(f)
	return olu
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableUnitPrice(f *float64) *OrderLineUpdate {
	if f != nil {
		olu.SetUnitPrice(*f)
	}
	return olu
}

// AddUnitPrice adds f to the "unit_price" field.
func (olu *OrderLineUpdate) AddUnitPrice(f float64) *OrderLineUpdate {
	olu.mutation.AddUnitPrice(f)
	return olu
}

// SetDiscountAllocationAmount sets the "discount_allocation_amount" field.
func (olu *OrderLineUpdate) SetDiscountAllocationAmount(f float64) *OrderLineUpdate {
	olu.mutation.ResetDiscountAllocationAmount()
	olu.mutation.SetDiscountAllocationAmount(f)
	return olu
}

// SetNillableDiscountAllocationAmount sets the "discount_allocation_amount" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableDiscountAllocationAmount(f *float64) *OrderLineUpdate {
	if f != nil {
		olu.SetDiscountAllocationAmount(*f)
	}
	return olu
}

// AddDiscountAllocationAmount adds f to the "discount_allocation_amount" field.
func (olu *OrderLineUpdate) AddDiscountAllocationAmount(f float64) *OrderLineUpdate {
	olu.mutation.AddDiscountAllocationAmount(f)
	return olu
}

// SetExternalID sets the "external_id" field.
func (olu *OrderLineUpdate) SetExternalID(s string) *OrderLineUpdate {
	olu.mutation.SetExternalID(s)
	return olu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableExternalID(s *string) *OrderLineUpdate {
	if s != nil {
		olu.SetExternalID(*s)
	}
	return olu
}

// ClearExternalID clears the value of the "external_id" field.
func (olu *OrderLineUpdate) ClearExternalID() *OrderLineUpdate {
	olu.mutation.ClearExternalID()
	return olu
}

// SetUnits sets the "units" field.
func (olu *OrderLineUpdate) SetUnits(i int) *OrderLineUpdate {
	olu.mutation.ResetUnits()
	olu.mutation.SetUnits(i)
	return olu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableUnits(i *int) *OrderLineUpdate {
	if i != nil {
		olu.SetUnits(*i)
	}
	return olu
}

// AddUnits adds i to the "units" field.
func (olu *OrderLineUpdate) AddUnits(i int) *OrderLineUpdate {
	olu.mutation.AddUnits(i)
	return olu
}

// SetUpdatedAt sets the "updated_at" field.
func (olu *OrderLineUpdate) SetUpdatedAt(t time.Time) *OrderLineUpdate {
	olu.mutation.SetUpdatedAt(t)
	return olu
}

// SetProductVariantID sets the "product_variant_id" field.
func (olu *OrderLineUpdate) SetProductVariantID(pu pulid.ID) *OrderLineUpdate {
	olu.mutation.SetProductVariantID(pu)
	return olu
}

// SetNillableProductVariantID sets the "product_variant_id" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableProductVariantID(pu *pulid.ID) *OrderLineUpdate {
	if pu != nil {
		olu.SetProductVariantID(*pu)
	}
	return olu
}

// SetColliID sets the "colli_id" field.
func (olu *OrderLineUpdate) SetColliID(pu pulid.ID) *OrderLineUpdate {
	olu.mutation.SetColliID(pu)
	return olu
}

// SetNillableColliID sets the "colli_id" field if the given value is not nil.
func (olu *OrderLineUpdate) SetNillableColliID(pu *pulid.ID) *OrderLineUpdate {
	if pu != nil {
		olu.SetColliID(*pu)
	}
	return olu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (olu *OrderLineUpdate) SetTenant(t *Tenant) *OrderLineUpdate {
	return olu.SetTenantID(t.ID)
}

// SetProductVariant sets the "product_variant" edge to the ProductVariant entity.
func (olu *OrderLineUpdate) SetProductVariant(p *ProductVariant) *OrderLineUpdate {
	return olu.SetProductVariantID(p.ID)
}

// SetColli sets the "colli" edge to the Colli entity.
func (olu *OrderLineUpdate) SetColli(c *Colli) *OrderLineUpdate {
	return olu.SetColliID(c.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (olu *OrderLineUpdate) AddReturnOrderLineIDs(ids ...pulid.ID) *OrderLineUpdate {
	olu.mutation.AddReturnOrderLineIDs(ids...)
	return olu
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (olu *OrderLineUpdate) AddReturnOrderLine(r ...*ReturnOrderLine) *OrderLineUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return olu.AddReturnOrderLineIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (olu *OrderLineUpdate) SetCurrencyID(id pulid.ID) *OrderLineUpdate {
	olu.mutation.SetCurrencyID(id)
	return olu
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (olu *OrderLineUpdate) SetCurrency(c *Currency) *OrderLineUpdate {
	return olu.SetCurrencyID(c.ID)
}

// Mutation returns the OrderLineMutation object of the builder.
func (olu *OrderLineUpdate) Mutation() *OrderLineMutation {
	return olu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (olu *OrderLineUpdate) ClearTenant() *OrderLineUpdate {
	olu.mutation.ClearTenant()
	return olu
}

// ClearProductVariant clears the "product_variant" edge to the ProductVariant entity.
func (olu *OrderLineUpdate) ClearProductVariant() *OrderLineUpdate {
	olu.mutation.ClearProductVariant()
	return olu
}

// ClearColli clears the "colli" edge to the Colli entity.
func (olu *OrderLineUpdate) ClearColli() *OrderLineUpdate {
	olu.mutation.ClearColli()
	return olu
}

// ClearReturnOrderLine clears all "return_order_line" edges to the ReturnOrderLine entity.
func (olu *OrderLineUpdate) ClearReturnOrderLine() *OrderLineUpdate {
	olu.mutation.ClearReturnOrderLine()
	return olu
}

// RemoveReturnOrderLineIDs removes the "return_order_line" edge to ReturnOrderLine entities by IDs.
func (olu *OrderLineUpdate) RemoveReturnOrderLineIDs(ids ...pulid.ID) *OrderLineUpdate {
	olu.mutation.RemoveReturnOrderLineIDs(ids...)
	return olu
}

// RemoveReturnOrderLine removes "return_order_line" edges to ReturnOrderLine entities.
func (olu *OrderLineUpdate) RemoveReturnOrderLine(r ...*ReturnOrderLine) *OrderLineUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return olu.RemoveReturnOrderLineIDs(ids...)
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (olu *OrderLineUpdate) ClearCurrency() *OrderLineUpdate {
	olu.mutation.ClearCurrency()
	return olu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (olu *OrderLineUpdate) Save(ctx context.Context) (int, error) {
	if err := olu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, olu.sqlSave, olu.mutation, olu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (olu *OrderLineUpdate) SaveX(ctx context.Context) int {
	affected, err := olu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (olu *OrderLineUpdate) Exec(ctx context.Context) error {
	_, err := olu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (olu *OrderLineUpdate) ExecX(ctx context.Context) {
	if err := olu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (olu *OrderLineUpdate) defaults() error {
	if _, ok := olu.mutation.UpdatedAt(); !ok {
		if orderline.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderline.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderline.UpdateDefaultUpdatedAt()
		olu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (olu *OrderLineUpdate) check() error {
	if v, ok := olu.mutation.Units(); ok {
		if err := orderline.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "OrderLine.units": %w`, err)}
		}
	}
	if olu.mutation.TenantCleared() && len(olu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.tenant"`)
	}
	if olu.mutation.ProductVariantCleared() && len(olu.mutation.ProductVariantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.product_variant"`)
	}
	if olu.mutation.ColliCleared() && len(olu.mutation.ColliIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.colli"`)
	}
	if olu.mutation.CurrencyCleared() && len(olu.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.currency"`)
	}
	return nil
}

func (olu *OrderLineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := olu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderline.Table, orderline.Columns, sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString))
	if ps := olu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := olu.mutation.UnitPrice(); ok {
		_spec.SetField(orderline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := olu.mutation.AddedUnitPrice(); ok {
		_spec.AddField(orderline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := olu.mutation.DiscountAllocationAmount(); ok {
		_spec.SetField(orderline.FieldDiscountAllocationAmount, field.TypeFloat64, value)
	}
	if value, ok := olu.mutation.AddedDiscountAllocationAmount(); ok {
		_spec.AddField(orderline.FieldDiscountAllocationAmount, field.TypeFloat64, value)
	}
	if value, ok := olu.mutation.ExternalID(); ok {
		_spec.SetField(orderline.FieldExternalID, field.TypeString, value)
	}
	if olu.mutation.ExternalIDCleared() {
		_spec.ClearField(orderline.FieldExternalID, field.TypeString)
	}
	if value, ok := olu.mutation.Units(); ok {
		_spec.SetField(orderline.FieldUnits, field.TypeInt, value)
	}
	if value, ok := olu.mutation.AddedUnits(); ok {
		_spec.AddField(orderline.FieldUnits, field.TypeInt, value)
	}
	if olu.mutation.CreatedAtCleared() {
		_spec.ClearField(orderline.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := olu.mutation.UpdatedAt(); ok {
		_spec.SetField(orderline.FieldUpdatedAt, field.TypeTime, value)
	}
	if olu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.TenantTable,
			Columns: []string{orderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.TenantTable,
			Columns: []string{orderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if olu.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.ProductVariantTable,
			Columns: []string{orderline.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.ProductVariantTable,
			Columns: []string{orderline.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if olu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderline.ColliTable,
			Columns: []string{orderline.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderline.ColliTable,
			Columns: []string{orderline.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if olu.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.RemovedReturnOrderLineIDs(); len(nodes) > 0 && !olu.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if olu.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.CurrencyTable,
			Columns: []string{orderline.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := olu.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.CurrencyTable,
			Columns: []string{orderline.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, olu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	olu.mutation.done = true
	return n, nil
}

// OrderLineUpdateOne is the builder for updating a single OrderLine entity.
type OrderLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderLineMutation
}

// SetTenantID sets the "tenant_id" field.
func (oluo *OrderLineUpdateOne) SetTenantID(pu pulid.ID) *OrderLineUpdateOne {
	oluo.mutation.SetTenantID(pu)
	return oluo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableTenantID(pu *pulid.ID) *OrderLineUpdateOne {
	if pu != nil {
		oluo.SetTenantID(*pu)
	}
	return oluo
}

// SetUnitPrice sets the "unit_price" field.
func (oluo *OrderLineUpdateOne) SetUnitPrice(f float64) *OrderLineUpdateOne {
	oluo.mutation.ResetUnitPrice()
	oluo.mutation.SetUnitPrice(f)
	return oluo
}

// SetNillableUnitPrice sets the "unit_price" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableUnitPrice(f *float64) *OrderLineUpdateOne {
	if f != nil {
		oluo.SetUnitPrice(*f)
	}
	return oluo
}

// AddUnitPrice adds f to the "unit_price" field.
func (oluo *OrderLineUpdateOne) AddUnitPrice(f float64) *OrderLineUpdateOne {
	oluo.mutation.AddUnitPrice(f)
	return oluo
}

// SetDiscountAllocationAmount sets the "discount_allocation_amount" field.
func (oluo *OrderLineUpdateOne) SetDiscountAllocationAmount(f float64) *OrderLineUpdateOne {
	oluo.mutation.ResetDiscountAllocationAmount()
	oluo.mutation.SetDiscountAllocationAmount(f)
	return oluo
}

// SetNillableDiscountAllocationAmount sets the "discount_allocation_amount" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableDiscountAllocationAmount(f *float64) *OrderLineUpdateOne {
	if f != nil {
		oluo.SetDiscountAllocationAmount(*f)
	}
	return oluo
}

// AddDiscountAllocationAmount adds f to the "discount_allocation_amount" field.
func (oluo *OrderLineUpdateOne) AddDiscountAllocationAmount(f float64) *OrderLineUpdateOne {
	oluo.mutation.AddDiscountAllocationAmount(f)
	return oluo
}

// SetExternalID sets the "external_id" field.
func (oluo *OrderLineUpdateOne) SetExternalID(s string) *OrderLineUpdateOne {
	oluo.mutation.SetExternalID(s)
	return oluo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableExternalID(s *string) *OrderLineUpdateOne {
	if s != nil {
		oluo.SetExternalID(*s)
	}
	return oluo
}

// ClearExternalID clears the value of the "external_id" field.
func (oluo *OrderLineUpdateOne) ClearExternalID() *OrderLineUpdateOne {
	oluo.mutation.ClearExternalID()
	return oluo
}

// SetUnits sets the "units" field.
func (oluo *OrderLineUpdateOne) SetUnits(i int) *OrderLineUpdateOne {
	oluo.mutation.ResetUnits()
	oluo.mutation.SetUnits(i)
	return oluo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableUnits(i *int) *OrderLineUpdateOne {
	if i != nil {
		oluo.SetUnits(*i)
	}
	return oluo
}

// AddUnits adds i to the "units" field.
func (oluo *OrderLineUpdateOne) AddUnits(i int) *OrderLineUpdateOne {
	oluo.mutation.AddUnits(i)
	return oluo
}

// SetUpdatedAt sets the "updated_at" field.
func (oluo *OrderLineUpdateOne) SetUpdatedAt(t time.Time) *OrderLineUpdateOne {
	oluo.mutation.SetUpdatedAt(t)
	return oluo
}

// SetProductVariantID sets the "product_variant_id" field.
func (oluo *OrderLineUpdateOne) SetProductVariantID(pu pulid.ID) *OrderLineUpdateOne {
	oluo.mutation.SetProductVariantID(pu)
	return oluo
}

// SetNillableProductVariantID sets the "product_variant_id" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableProductVariantID(pu *pulid.ID) *OrderLineUpdateOne {
	if pu != nil {
		oluo.SetProductVariantID(*pu)
	}
	return oluo
}

// SetColliID sets the "colli_id" field.
func (oluo *OrderLineUpdateOne) SetColliID(pu pulid.ID) *OrderLineUpdateOne {
	oluo.mutation.SetColliID(pu)
	return oluo
}

// SetNillableColliID sets the "colli_id" field if the given value is not nil.
func (oluo *OrderLineUpdateOne) SetNillableColliID(pu *pulid.ID) *OrderLineUpdateOne {
	if pu != nil {
		oluo.SetColliID(*pu)
	}
	return oluo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oluo *OrderLineUpdateOne) SetTenant(t *Tenant) *OrderLineUpdateOne {
	return oluo.SetTenantID(t.ID)
}

// SetProductVariant sets the "product_variant" edge to the ProductVariant entity.
func (oluo *OrderLineUpdateOne) SetProductVariant(p *ProductVariant) *OrderLineUpdateOne {
	return oluo.SetProductVariantID(p.ID)
}

// SetColli sets the "colli" edge to the Colli entity.
func (oluo *OrderLineUpdateOne) SetColli(c *Colli) *OrderLineUpdateOne {
	return oluo.SetColliID(c.ID)
}

// AddReturnOrderLineIDs adds the "return_order_line" edge to the ReturnOrderLine entity by IDs.
func (oluo *OrderLineUpdateOne) AddReturnOrderLineIDs(ids ...pulid.ID) *OrderLineUpdateOne {
	oluo.mutation.AddReturnOrderLineIDs(ids...)
	return oluo
}

// AddReturnOrderLine adds the "return_order_line" edges to the ReturnOrderLine entity.
func (oluo *OrderLineUpdateOne) AddReturnOrderLine(r ...*ReturnOrderLine) *OrderLineUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oluo.AddReturnOrderLineIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (oluo *OrderLineUpdateOne) SetCurrencyID(id pulid.ID) *OrderLineUpdateOne {
	oluo.mutation.SetCurrencyID(id)
	return oluo
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (oluo *OrderLineUpdateOne) SetCurrency(c *Currency) *OrderLineUpdateOne {
	return oluo.SetCurrencyID(c.ID)
}

// Mutation returns the OrderLineMutation object of the builder.
func (oluo *OrderLineUpdateOne) Mutation() *OrderLineMutation {
	return oluo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (oluo *OrderLineUpdateOne) ClearTenant() *OrderLineUpdateOne {
	oluo.mutation.ClearTenant()
	return oluo
}

// ClearProductVariant clears the "product_variant" edge to the ProductVariant entity.
func (oluo *OrderLineUpdateOne) ClearProductVariant() *OrderLineUpdateOne {
	oluo.mutation.ClearProductVariant()
	return oluo
}

// ClearColli clears the "colli" edge to the Colli entity.
func (oluo *OrderLineUpdateOne) ClearColli() *OrderLineUpdateOne {
	oluo.mutation.ClearColli()
	return oluo
}

// ClearReturnOrderLine clears all "return_order_line" edges to the ReturnOrderLine entity.
func (oluo *OrderLineUpdateOne) ClearReturnOrderLine() *OrderLineUpdateOne {
	oluo.mutation.ClearReturnOrderLine()
	return oluo
}

// RemoveReturnOrderLineIDs removes the "return_order_line" edge to ReturnOrderLine entities by IDs.
func (oluo *OrderLineUpdateOne) RemoveReturnOrderLineIDs(ids ...pulid.ID) *OrderLineUpdateOne {
	oluo.mutation.RemoveReturnOrderLineIDs(ids...)
	return oluo
}

// RemoveReturnOrderLine removes "return_order_line" edges to ReturnOrderLine entities.
func (oluo *OrderLineUpdateOne) RemoveReturnOrderLine(r ...*ReturnOrderLine) *OrderLineUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oluo.RemoveReturnOrderLineIDs(ids...)
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (oluo *OrderLineUpdateOne) ClearCurrency() *OrderLineUpdateOne {
	oluo.mutation.ClearCurrency()
	return oluo
}

// Where appends a list predicates to the OrderLineUpdate builder.
func (oluo *OrderLineUpdateOne) Where(ps ...predicate.OrderLine) *OrderLineUpdateOne {
	oluo.mutation.Where(ps...)
	return oluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oluo *OrderLineUpdateOne) Select(field string, fields ...string) *OrderLineUpdateOne {
	oluo.fields = append([]string{field}, fields...)
	return oluo
}

// Save executes the query and returns the updated OrderLine entity.
func (oluo *OrderLineUpdateOne) Save(ctx context.Context) (*OrderLine, error) {
	if err := oluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oluo.sqlSave, oluo.mutation, oluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oluo *OrderLineUpdateOne) SaveX(ctx context.Context) *OrderLine {
	node, err := oluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oluo *OrderLineUpdateOne) Exec(ctx context.Context) error {
	_, err := oluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oluo *OrderLineUpdateOne) ExecX(ctx context.Context) {
	if err := oluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oluo *OrderLineUpdateOne) defaults() error {
	if _, ok := oluo.mutation.UpdatedAt(); !ok {
		if orderline.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderline.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderline.UpdateDefaultUpdatedAt()
		oluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oluo *OrderLineUpdateOne) check() error {
	if v, ok := oluo.mutation.Units(); ok {
		if err := orderline.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "OrderLine.units": %w`, err)}
		}
	}
	if oluo.mutation.TenantCleared() && len(oluo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.tenant"`)
	}
	if oluo.mutation.ProductVariantCleared() && len(oluo.mutation.ProductVariantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.product_variant"`)
	}
	if oluo.mutation.ColliCleared() && len(oluo.mutation.ColliIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.colli"`)
	}
	if oluo.mutation.CurrencyCleared() && len(oluo.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderLine.currency"`)
	}
	return nil
}

func (oluo *OrderLineUpdateOne) sqlSave(ctx context.Context) (_node *OrderLine, err error) {
	if err := oluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderline.Table, orderline.Columns, sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString))
	id, ok := oluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderline.FieldID)
		for _, f := range fields {
			if !orderline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oluo.mutation.UnitPrice(); ok {
		_spec.SetField(orderline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := oluo.mutation.AddedUnitPrice(); ok {
		_spec.AddField(orderline.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := oluo.mutation.DiscountAllocationAmount(); ok {
		_spec.SetField(orderline.FieldDiscountAllocationAmount, field.TypeFloat64, value)
	}
	if value, ok := oluo.mutation.AddedDiscountAllocationAmount(); ok {
		_spec.AddField(orderline.FieldDiscountAllocationAmount, field.TypeFloat64, value)
	}
	if value, ok := oluo.mutation.ExternalID(); ok {
		_spec.SetField(orderline.FieldExternalID, field.TypeString, value)
	}
	if oluo.mutation.ExternalIDCleared() {
		_spec.ClearField(orderline.FieldExternalID, field.TypeString)
	}
	if value, ok := oluo.mutation.Units(); ok {
		_spec.SetField(orderline.FieldUnits, field.TypeInt, value)
	}
	if value, ok := oluo.mutation.AddedUnits(); ok {
		_spec.AddField(orderline.FieldUnits, field.TypeInt, value)
	}
	if oluo.mutation.CreatedAtCleared() {
		_spec.ClearField(orderline.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oluo.mutation.UpdatedAt(); ok {
		_spec.SetField(orderline.FieldUpdatedAt, field.TypeTime, value)
	}
	if oluo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.TenantTable,
			Columns: []string{orderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.TenantTable,
			Columns: []string{orderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oluo.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.ProductVariantTable,
			Columns: []string{orderline.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.ProductVariantTable,
			Columns: []string{orderline.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oluo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderline.ColliTable,
			Columns: []string{orderline.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderline.ColliTable,
			Columns: []string{orderline.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oluo.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.RemovedReturnOrderLineIDs(); len(nodes) > 0 && !oluo.mutation.ReturnOrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.ReturnOrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oluo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.CurrencyTable,
			Columns: []string{orderline.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oluo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.CurrencyTable,
			Columns: []string{orderline.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderLine{config: oluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oluo.mutation.done = true
	return _node, nil
}
