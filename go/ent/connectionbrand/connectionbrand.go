// Code generated by ent, DO NOT EDIT.

package connectionbrand

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the connectionbrand type in the database.
	Label = "connection_brand"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// Table holds the table name of the connectionbrand in the database.
	Table = "connection_brands"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "connections"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "connection_connection_brand"
)

// Columns holds all SQL columns for connectionbrand fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldInternalID,
	FieldLogoURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// InternalID defines the type for the "internal_id" enum field.
type InternalID string

// InternalIDShopify is the default value of the InternalID enum.
const DefaultInternalID = InternalIDShopify

// InternalID values.
const (
	InternalIDShopify InternalID = "shopify"
)

func (ii InternalID) String() string {
	return string(ii)
}

// InternalIDValidator is a validator for the "internal_id" field enum values. It is called by the builders before save.
func InternalIDValidator(ii InternalID) error {
	switch ii {
	case InternalIDShopify:
		return nil
	default:
		return fmt.Errorf("connectionbrand: invalid enum value for internal_id field: %q", ii)
	}
}

// OrderOption defines the ordering options for the ConnectionBrand queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByConnectionCount orders the results by connection count.
func ByConnectionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConnectionStep(), opts...)
	}
}

// ByConnection orders the results by connection terms.
func ByConnection(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ConnectionTable, ConnectionColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e InternalID) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *InternalID) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = InternalID(str)
	if err := InternalIDValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid InternalID", str)
	}
	return nil
}
