// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierServiceGLS is the model entity for the CarrierServiceGLS schema.
type CarrierServiceGLS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey *string `json:"api_key,omitempty"`
	// APIValue holds the value of the "api_value" field.
	APIValue carrierservicegls.APIValue `json:"api_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierServiceGLSQuery when eager-loading is set.
	Edges                               CarrierServiceGLSEdges `json:"edges"`
	carrier_service_carrier_service_gls *pulid.ID
	selectValues                        sql.SelectValues
}

// CarrierServiceGLSEdges holds the relations/edges for other nodes in the graph.
type CarrierServiceGLSEdges struct {
	// CarrierService holds the value of the carrier_service edge.
	CarrierService *CarrierService `json:"carrier_service,omitempty"`
	// CarrierAdditionalServiceGLS holds the value of the carrier_additional_service_gls edge.
	CarrierAdditionalServiceGLS []*CarrierAdditionalServiceGLS `json:"carrier_additional_service_gls,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierAdditionalServiceGLS map[string][]*CarrierAdditionalServiceGLS
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceGLSEdges) CarrierServiceOrErr() (*CarrierService, error) {
	if e.CarrierService != nil {
		return e.CarrierService, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservice.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// CarrierAdditionalServiceGLSOrErr returns the CarrierAdditionalServiceGLS value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierServiceGLSEdges) CarrierAdditionalServiceGLSOrErr() ([]*CarrierAdditionalServiceGLS, error) {
	if e.loadedTypes[1] {
		return e.CarrierAdditionalServiceGLS, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_gls"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierServiceGLS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierservicegls.FieldID:
			values[i] = new(pulid.ID)
		case carrierservicegls.FieldAPIKey, carrierservicegls.FieldAPIValue:
			values[i] = new(sql.NullString)
		case carrierservicegls.ForeignKeys[0]: // carrier_service_carrier_service_gls
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierServiceGLS fields.
func (csg *CarrierServiceGLS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierservicegls.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				csg.ID = *value
			}
		case carrierservicegls.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				csg.APIKey = new(string)
				*csg.APIKey = value.String
			}
		case carrierservicegls.FieldAPIValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_value", values[i])
			} else if value.Valid {
				csg.APIValue = carrierservicegls.APIValue(value.String)
			}
		case carrierservicegls.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_carrier_service_gls", values[i])
			} else if value.Valid {
				csg.carrier_service_carrier_service_gls = new(pulid.ID)
				*csg.carrier_service_carrier_service_gls = *value.S.(*pulid.ID)
			}
		default:
			csg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierServiceGLS.
// This includes values selected through modifiers, order, etc.
func (csg *CarrierServiceGLS) Value(name string) (ent.Value, error) {
	return csg.selectValues.Get(name)
}

// QueryCarrierService queries the "carrier_service" edge of the CarrierServiceGLS entity.
func (csg *CarrierServiceGLS) QueryCarrierService() *CarrierServiceQuery {
	return NewCarrierServiceGLSClient(csg.config).QueryCarrierService(csg)
}

// QueryCarrierAdditionalServiceGLS queries the "carrier_additional_service_gls" edge of the CarrierServiceGLS entity.
func (csg *CarrierServiceGLS) QueryCarrierAdditionalServiceGLS() *CarrierAdditionalServiceGLSQuery {
	return NewCarrierServiceGLSClient(csg.config).QueryCarrierAdditionalServiceGLS(csg)
}

// Update returns a builder for updating this CarrierServiceGLS.
// Note that you need to call CarrierServiceGLS.Unwrap() before calling this method if this CarrierServiceGLS
// was returned from a transaction, and the transaction was committed or rolled back.
func (csg *CarrierServiceGLS) Update() *CarrierServiceGLSUpdateOne {
	return NewCarrierServiceGLSClient(csg.config).UpdateOne(csg)
}

// Unwrap unwraps the CarrierServiceGLS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csg *CarrierServiceGLS) Unwrap() *CarrierServiceGLS {
	_tx, ok := csg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierServiceGLS is not a transactional entity")
	}
	csg.config.driver = _tx.drv
	return csg
}

// String implements the fmt.Stringer.
func (csg *CarrierServiceGLS) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierServiceGLS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csg.ID))
	if v := csg.APIKey; v != nil {
		builder.WriteString("api_key=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("api_value=")
	builder.WriteString(fmt.Sprintf("%v", csg.APIValue))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAdditionalServiceGLS returns the CarrierAdditionalServiceGLS named value or an error if the edge was not
// loaded in eager-loading with this name.
func (csg *CarrierServiceGLS) NamedCarrierAdditionalServiceGLS(name string) ([]*CarrierAdditionalServiceGLS, error) {
	if csg.Edges.namedCarrierAdditionalServiceGLS == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := csg.Edges.namedCarrierAdditionalServiceGLS[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (csg *CarrierServiceGLS) appendNamedCarrierAdditionalServiceGLS(name string, edges ...*CarrierAdditionalServiceGLS) {
	if csg.Edges.namedCarrierAdditionalServiceGLS == nil {
		csg.Edges.namedCarrierAdditionalServiceGLS = make(map[string][]*CarrierAdditionalServiceGLS)
	}
	if len(edges) == 0 {
		csg.Edges.namedCarrierAdditionalServiceGLS[name] = []*CarrierAdditionalServiceGLS{}
	} else {
		csg.Edges.namedCarrierAdditionalServiceGLS[name] = append(csg.Edges.namedCarrierAdditionalServiceGLS[name], edges...)
	}
}

// CarrierServiceGLSs is a parsable slice of CarrierServiceGLS.
type CarrierServiceGLSs []*CarrierServiceGLS
