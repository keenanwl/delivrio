// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierBrandQuery is the builder for querying CarrierBrand entities.
type CarrierBrandQuery struct {
	config
	ctx                     *QueryContext
	order                   []carrierbrand.OrderOption
	inters                  []Interceptor
	predicates              []predicate.CarrierBrand
	withCarrierService      *CarrierServiceQuery
	withCarrier             *CarrierQuery
	withParcelShop          *ParcelShopQuery
	withPackaging           *PackagingQuery
	withDocument            *DocumentQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*CarrierBrand) error
	withNamedCarrierService map[string]*CarrierServiceQuery
	withNamedCarrier        map[string]*CarrierQuery
	withNamedParcelShop     map[string]*ParcelShopQuery
	withNamedPackaging      map[string]*PackagingQuery
	withNamedDocument       map[string]*DocumentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierBrandQuery builder.
func (cbq *CarrierBrandQuery) Where(ps ...predicate.CarrierBrand) *CarrierBrandQuery {
	cbq.predicates = append(cbq.predicates, ps...)
	return cbq
}

// Limit the number of records to be returned by this query.
func (cbq *CarrierBrandQuery) Limit(limit int) *CarrierBrandQuery {
	cbq.ctx.Limit = &limit
	return cbq
}

// Offset to start from.
func (cbq *CarrierBrandQuery) Offset(offset int) *CarrierBrandQuery {
	cbq.ctx.Offset = &offset
	return cbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cbq *CarrierBrandQuery) Unique(unique bool) *CarrierBrandQuery {
	cbq.ctx.Unique = &unique
	return cbq
}

// Order specifies how the records should be ordered.
func (cbq *CarrierBrandQuery) Order(o ...carrierbrand.OrderOption) *CarrierBrandQuery {
	cbq.order = append(cbq.order, o...)
	return cbq
}

// QueryCarrierService chains the current query on the "carrier_service" edge.
func (cbq *CarrierBrandQuery) QueryCarrierService() *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: cbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, selector),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierbrand.CarrierServiceTable, carrierbrand.CarrierServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(cbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrier chains the current query on the "carrier" edge.
func (cbq *CarrierBrandQuery) QueryCarrier() *CarrierQuery {
	query := (&CarrierClient{config: cbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, selector),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.CarrierTable, carrierbrand.CarrierColumn),
		)
		fromU = sqlgraph.SetNeighbors(cbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParcelShop chains the current query on the "parcel_shop" edge.
func (cbq *CarrierBrandQuery) QueryParcelShop() *ParcelShopQuery {
	query := (&ParcelShopClient{config: cbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, selector),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.ParcelShopTable, carrierbrand.ParcelShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(cbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackaging chains the current query on the "packaging" edge.
func (cbq *CarrierBrandQuery) QueryPackaging() *PackagingQuery {
	query := (&PackagingClient{config: cbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, selector),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.PackagingTable, carrierbrand.PackagingColumn),
		)
		fromU = sqlgraph.SetNeighbors(cbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocument chains the current query on the "document" edge.
func (cbq *CarrierBrandQuery) QueryDocument() *DocumentQuery {
	query := (&DocumentClient{config: cbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.DocumentTable, carrierbrand.DocumentColumn),
		)
		fromU = sqlgraph.SetNeighbors(cbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierBrand entity from the query.
// Returns a *NotFoundError when no CarrierBrand was found.
func (cbq *CarrierBrandQuery) First(ctx context.Context) (*CarrierBrand, error) {
	nodes, err := cbq.Limit(1).All(setContextOp(ctx, cbq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierbrand.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cbq *CarrierBrandQuery) FirstX(ctx context.Context) *CarrierBrand {
	node, err := cbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierBrand ID from the query.
// Returns a *NotFoundError when no CarrierBrand ID was found.
func (cbq *CarrierBrandQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cbq.Limit(1).IDs(setContextOp(ctx, cbq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierbrand.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cbq *CarrierBrandQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierBrand entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierBrand entity is found.
// Returns a *NotFoundError when no CarrierBrand entities are found.
func (cbq *CarrierBrandQuery) Only(ctx context.Context) (*CarrierBrand, error) {
	nodes, err := cbq.Limit(2).All(setContextOp(ctx, cbq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierbrand.Label}
	default:
		return nil, &NotSingularError{carrierbrand.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cbq *CarrierBrandQuery) OnlyX(ctx context.Context) *CarrierBrand {
	node, err := cbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierBrand ID in the query.
// Returns a *NotSingularError when more than one CarrierBrand ID is found.
// Returns a *NotFoundError when no entities are found.
func (cbq *CarrierBrandQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cbq.Limit(2).IDs(setContextOp(ctx, cbq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierbrand.Label}
	default:
		err = &NotSingularError{carrierbrand.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cbq *CarrierBrandQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierBrands.
func (cbq *CarrierBrandQuery) All(ctx context.Context) ([]*CarrierBrand, error) {
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryAll)
	if err := cbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierBrand, *CarrierBrandQuery]()
	return withInterceptors[[]*CarrierBrand](ctx, cbq, qr, cbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cbq *CarrierBrandQuery) AllX(ctx context.Context) []*CarrierBrand {
	nodes, err := cbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierBrand IDs.
func (cbq *CarrierBrandQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cbq.ctx.Unique == nil && cbq.path != nil {
		cbq.Unique(true)
	}
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryIDs)
	if err = cbq.Select(carrierbrand.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cbq *CarrierBrandQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cbq *CarrierBrandQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryCount)
	if err := cbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cbq, querierCount[*CarrierBrandQuery](), cbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cbq *CarrierBrandQuery) CountX(ctx context.Context) int {
	count, err := cbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cbq *CarrierBrandQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryExist)
	switch _, err := cbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cbq *CarrierBrandQuery) ExistX(ctx context.Context) bool {
	exist, err := cbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierBrandQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cbq *CarrierBrandQuery) Clone() *CarrierBrandQuery {
	if cbq == nil {
		return nil
	}
	return &CarrierBrandQuery{
		config:             cbq.config,
		ctx:                cbq.ctx.Clone(),
		order:              append([]carrierbrand.OrderOption{}, cbq.order...),
		inters:             append([]Interceptor{}, cbq.inters...),
		predicates:         append([]predicate.CarrierBrand{}, cbq.predicates...),
		withCarrierService: cbq.withCarrierService.Clone(),
		withCarrier:        cbq.withCarrier.Clone(),
		withParcelShop:     cbq.withParcelShop.Clone(),
		withPackaging:      cbq.withPackaging.Clone(),
		withDocument:       cbq.withDocument.Clone(),
		// clone intermediate query.
		sql:  cbq.sql.Clone(),
		path: cbq.path,
	}
}

// WithCarrierService tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service" edge. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithCarrierService(opts ...func(*CarrierServiceQuery)) *CarrierBrandQuery {
	query := (&CarrierServiceClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cbq.withCarrierService = query
	return cbq
}

// WithCarrier tells the query-builder to eager-load the nodes that are connected to
// the "carrier" edge. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithCarrier(opts ...func(*CarrierQuery)) *CarrierBrandQuery {
	query := (&CarrierClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cbq.withCarrier = query
	return cbq
}

// WithParcelShop tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop" edge. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithParcelShop(opts ...func(*ParcelShopQuery)) *CarrierBrandQuery {
	query := (&ParcelShopClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cbq.withParcelShop = query
	return cbq
}

// WithPackaging tells the query-builder to eager-load the nodes that are connected to
// the "packaging" edge. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithPackaging(opts ...func(*PackagingQuery)) *CarrierBrandQuery {
	query := (&PackagingClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cbq.withPackaging = query
	return cbq
}

// WithDocument tells the query-builder to eager-load the nodes that are connected to
// the "document" edge. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithDocument(opts ...func(*DocumentQuery)) *CarrierBrandQuery {
	query := (&DocumentClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cbq.withDocument = query
	return cbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierBrand.Query().
//		GroupBy(carrierbrand.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cbq *CarrierBrandQuery) GroupBy(field string, fields ...string) *CarrierBrandGroupBy {
	cbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierBrandGroupBy{build: cbq}
	grbuild.flds = &cbq.ctx.Fields
	grbuild.label = carrierbrand.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierBrand.Query().
//		Select(carrierbrand.FieldLabel).
//		Scan(ctx, &v)
func (cbq *CarrierBrandQuery) Select(fields ...string) *CarrierBrandSelect {
	cbq.ctx.Fields = append(cbq.ctx.Fields, fields...)
	sbuild := &CarrierBrandSelect{CarrierBrandQuery: cbq}
	sbuild.label = carrierbrand.Label
	sbuild.flds, sbuild.scan = &cbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierBrandSelect configured with the given aggregations.
func (cbq *CarrierBrandQuery) Aggregate(fns ...AggregateFunc) *CarrierBrandSelect {
	return cbq.Select().Aggregate(fns...)
}

func (cbq *CarrierBrandQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cbq); err != nil {
				return err
			}
		}
	}
	for _, f := range cbq.ctx.Fields {
		if !carrierbrand.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cbq.path != nil {
		prev, err := cbq.path(ctx)
		if err != nil {
			return err
		}
		cbq.sql = prev
	}
	if carrierbrand.Policy == nil {
		return errors.New("ent: uninitialized carrierbrand.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierbrand.Policy.EvalQuery(ctx, cbq); err != nil {
		return err
	}
	return nil
}

func (cbq *CarrierBrandQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierBrand, error) {
	var (
		nodes       = []*CarrierBrand{}
		_spec       = cbq.querySpec()
		loadedTypes = [5]bool{
			cbq.withCarrierService != nil,
			cbq.withCarrier != nil,
			cbq.withParcelShop != nil,
			cbq.withPackaging != nil,
			cbq.withDocument != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierBrand).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierBrand{config: cbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cbq.modifiers) > 0 {
		_spec.Modifiers = cbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cbq.withCarrierService; query != nil {
		if err := cbq.loadCarrierService(ctx, query, nodes,
			func(n *CarrierBrand) { n.Edges.CarrierService = []*CarrierService{} },
			func(n *CarrierBrand, e *CarrierService) { n.Edges.CarrierService = append(n.Edges.CarrierService, e) }); err != nil {
			return nil, err
		}
	}
	if query := cbq.withCarrier; query != nil {
		if err := cbq.loadCarrier(ctx, query, nodes,
			func(n *CarrierBrand) { n.Edges.Carrier = []*Carrier{} },
			func(n *CarrierBrand, e *Carrier) { n.Edges.Carrier = append(n.Edges.Carrier, e) }); err != nil {
			return nil, err
		}
	}
	if query := cbq.withParcelShop; query != nil {
		if err := cbq.loadParcelShop(ctx, query, nodes,
			func(n *CarrierBrand) { n.Edges.ParcelShop = []*ParcelShop{} },
			func(n *CarrierBrand, e *ParcelShop) { n.Edges.ParcelShop = append(n.Edges.ParcelShop, e) }); err != nil {
			return nil, err
		}
	}
	if query := cbq.withPackaging; query != nil {
		if err := cbq.loadPackaging(ctx, query, nodes,
			func(n *CarrierBrand) { n.Edges.Packaging = []*Packaging{} },
			func(n *CarrierBrand, e *Packaging) { n.Edges.Packaging = append(n.Edges.Packaging, e) }); err != nil {
			return nil, err
		}
	}
	if query := cbq.withDocument; query != nil {
		if err := cbq.loadDocument(ctx, query, nodes,
			func(n *CarrierBrand) { n.Edges.Document = []*Document{} },
			func(n *CarrierBrand, e *Document) { n.Edges.Document = append(n.Edges.Document, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cbq.withNamedCarrierService {
		if err := cbq.loadCarrierService(ctx, query, nodes,
			func(n *CarrierBrand) { n.appendNamedCarrierService(name) },
			func(n *CarrierBrand, e *CarrierService) { n.appendNamedCarrierService(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cbq.withNamedCarrier {
		if err := cbq.loadCarrier(ctx, query, nodes,
			func(n *CarrierBrand) { n.appendNamedCarrier(name) },
			func(n *CarrierBrand, e *Carrier) { n.appendNamedCarrier(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cbq.withNamedParcelShop {
		if err := cbq.loadParcelShop(ctx, query, nodes,
			func(n *CarrierBrand) { n.appendNamedParcelShop(name) },
			func(n *CarrierBrand, e *ParcelShop) { n.appendNamedParcelShop(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cbq.withNamedPackaging {
		if err := cbq.loadPackaging(ctx, query, nodes,
			func(n *CarrierBrand) { n.appendNamedPackaging(name) },
			func(n *CarrierBrand, e *Packaging) { n.appendNamedPackaging(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cbq.withNamedDocument {
		if err := cbq.loadDocument(ctx, query, nodes,
			func(n *CarrierBrand) { n.appendNamedDocument(name) },
			func(n *CarrierBrand, e *Document) { n.appendNamedDocument(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cbq.loadTotal {
		if err := cbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cbq *CarrierBrandQuery) loadCarrierService(ctx context.Context, query *CarrierServiceQuery, nodes []*CarrierBrand, init func(*CarrierBrand), assign func(*CarrierBrand, *CarrierService)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierBrand)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CarrierService(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierbrand.CarrierServiceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_brand_carrier_service
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_brand_carrier_service" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_brand_carrier_service" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cbq *CarrierBrandQuery) loadCarrier(ctx context.Context, query *CarrierQuery, nodes []*CarrierBrand, init func(*CarrierBrand), assign func(*CarrierBrand, *Carrier)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierBrand)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Carrier(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierbrand.CarrierColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_carrier_brand
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_carrier_brand" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_carrier_brand" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cbq *CarrierBrandQuery) loadParcelShop(ctx context.Context, query *ParcelShopQuery, nodes []*CarrierBrand, init func(*CarrierBrand), assign func(*CarrierBrand, *ParcelShop)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierBrand)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ParcelShop(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierbrand.ParcelShopColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_carrier_brand
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_carrier_brand" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_carrier_brand" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cbq *CarrierBrandQuery) loadPackaging(ctx context.Context, query *PackagingQuery, nodes []*CarrierBrand, init func(*CarrierBrand), assign func(*CarrierBrand, *Packaging)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierBrand)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Packaging(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierbrand.PackagingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.packaging_carrier_brand
		if fk == nil {
			return fmt.Errorf(`foreign-key "packaging_carrier_brand" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "packaging_carrier_brand" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cbq *CarrierBrandQuery) loadDocument(ctx context.Context, query *DocumentQuery, nodes []*CarrierBrand, init func(*CarrierBrand), assign func(*CarrierBrand, *Document)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierBrand)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Document(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierbrand.DocumentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.document_carrier_brand
		if fk == nil {
			return fmt.Errorf(`foreign-key "document_carrier_brand" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "document_carrier_brand" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cbq *CarrierBrandQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cbq.querySpec()
	if len(cbq.modifiers) > 0 {
		_spec.Modifiers = cbq.modifiers
	}
	_spec.Node.Columns = cbq.ctx.Fields
	if len(cbq.ctx.Fields) > 0 {
		_spec.Unique = cbq.ctx.Unique != nil && *cbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cbq.driver, _spec)
}

func (cbq *CarrierBrandQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierbrand.Table, carrierbrand.Columns, sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString))
	_spec.From = cbq.sql
	if unique := cbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cbq.path != nil {
		_spec.Unique = true
	}
	if fields := cbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierbrand.FieldID)
		for i := range fields {
			if fields[i] != carrierbrand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cbq *CarrierBrandQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cbq.driver.Dialect())
	t1 := builder.Table(carrierbrand.Table)
	columns := cbq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierbrand.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cbq.sql != nil {
		selector = cbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cbq.ctx.Unique != nil && *cbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cbq.predicates {
		p(selector)
	}
	for _, p := range cbq.order {
		p(selector)
	}
	if offset := cbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierService tells the query-builder to eager-load the nodes that are connected to the "carrier_service"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithNamedCarrierService(name string, opts ...func(*CarrierServiceQuery)) *CarrierBrandQuery {
	query := (&CarrierServiceClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cbq.withNamedCarrierService == nil {
		cbq.withNamedCarrierService = make(map[string]*CarrierServiceQuery)
	}
	cbq.withNamedCarrierService[name] = query
	return cbq
}

// WithNamedCarrier tells the query-builder to eager-load the nodes that are connected to the "carrier"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithNamedCarrier(name string, opts ...func(*CarrierQuery)) *CarrierBrandQuery {
	query := (&CarrierClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cbq.withNamedCarrier == nil {
		cbq.withNamedCarrier = make(map[string]*CarrierQuery)
	}
	cbq.withNamedCarrier[name] = query
	return cbq
}

// WithNamedParcelShop tells the query-builder to eager-load the nodes that are connected to the "parcel_shop"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithNamedParcelShop(name string, opts ...func(*ParcelShopQuery)) *CarrierBrandQuery {
	query := (&ParcelShopClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cbq.withNamedParcelShop == nil {
		cbq.withNamedParcelShop = make(map[string]*ParcelShopQuery)
	}
	cbq.withNamedParcelShop[name] = query
	return cbq
}

// WithNamedPackaging tells the query-builder to eager-load the nodes that are connected to the "packaging"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithNamedPackaging(name string, opts ...func(*PackagingQuery)) *CarrierBrandQuery {
	query := (&PackagingClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cbq.withNamedPackaging == nil {
		cbq.withNamedPackaging = make(map[string]*PackagingQuery)
	}
	cbq.withNamedPackaging[name] = query
	return cbq
}

// WithNamedDocument tells the query-builder to eager-load the nodes that are connected to the "document"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cbq *CarrierBrandQuery) WithNamedDocument(name string, opts ...func(*DocumentQuery)) *CarrierBrandQuery {
	query := (&DocumentClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cbq.withNamedDocument == nil {
		cbq.withNamedDocument = make(map[string]*DocumentQuery)
	}
	cbq.withNamedDocument[name] = query
	return cbq
}

// CarrierBrandGroupBy is the group-by builder for CarrierBrand entities.
type CarrierBrandGroupBy struct {
	selector
	build *CarrierBrandQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cbgb *CarrierBrandGroupBy) Aggregate(fns ...AggregateFunc) *CarrierBrandGroupBy {
	cbgb.fns = append(cbgb.fns, fns...)
	return cbgb
}

// Scan applies the selector query and scans the result into the given value.
func (cbgb *CarrierBrandGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cbgb.build.ctx, ent.OpQueryGroupBy)
	if err := cbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierBrandQuery, *CarrierBrandGroupBy](ctx, cbgb.build, cbgb, cbgb.build.inters, v)
}

func (cbgb *CarrierBrandGroupBy) sqlScan(ctx context.Context, root *CarrierBrandQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cbgb.fns))
	for _, fn := range cbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cbgb.flds)+len(cbgb.fns))
		for _, f := range *cbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierBrandSelect is the builder for selecting fields of CarrierBrand entities.
type CarrierBrandSelect struct {
	*CarrierBrandQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cbs *CarrierBrandSelect) Aggregate(fns ...AggregateFunc) *CarrierBrandSelect {
	cbs.fns = append(cbs.fns, fns...)
	return cbs
}

// Scan applies the selector query and scans the result into the given value.
func (cbs *CarrierBrandSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cbs.ctx, ent.OpQuerySelect)
	if err := cbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierBrandQuery, *CarrierBrandSelect](ctx, cbs.CarrierBrandQuery, cbs, cbs.inters, v)
}

func (cbs *CarrierBrandSelect) sqlScan(ctx context.Context, root *CarrierBrandQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cbs.fns))
	for _, fn := range cbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
