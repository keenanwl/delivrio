// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionEasyPostUpdate is the builder for updating DeliveryOptionEasyPost entities.
type DeliveryOptionEasyPostUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionEasyPostMutation
}

// Where appends a list predicates to the DeliveryOptionEasyPostUpdate builder.
func (doepu *DeliveryOptionEasyPostUpdate) Where(ps ...predicate.DeliveryOptionEasyPost) *DeliveryOptionEasyPostUpdate {
	doepu.mutation.Where(ps...)
	return doepu
}

// SetTenantID sets the "tenant_id" field.
func (doepu *DeliveryOptionEasyPostUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionEasyPostUpdate {
	doepu.mutation.SetTenantID(pu)
	return doepu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (doepu *DeliveryOptionEasyPostUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionEasyPostUpdate {
	if pu != nil {
		doepu.SetTenantID(*pu)
	}
	return doepu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (doepu *DeliveryOptionEasyPostUpdate) SetTenant(t *Tenant) *DeliveryOptionEasyPostUpdate {
	return doepu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (doepu *DeliveryOptionEasyPostUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionEasyPostUpdate {
	doepu.mutation.SetDeliveryOptionID(id)
	return doepu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (doepu *DeliveryOptionEasyPostUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionEasyPostUpdate {
	return doepu.SetDeliveryOptionID(d.ID)
}

// AddCarrierAddServEasyPostIDs adds the "carrier_add_serv_easy_post" edge to the CarrierAdditionalServiceEasyPost entity by IDs.
func (doepu *DeliveryOptionEasyPostUpdate) AddCarrierAddServEasyPostIDs(ids ...pulid.ID) *DeliveryOptionEasyPostUpdate {
	doepu.mutation.AddCarrierAddServEasyPostIDs(ids...)
	return doepu
}

// AddCarrierAddServEasyPost adds the "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (doepu *DeliveryOptionEasyPostUpdate) AddCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *DeliveryOptionEasyPostUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doepu.AddCarrierAddServEasyPostIDs(ids...)
}

// Mutation returns the DeliveryOptionEasyPostMutation object of the builder.
func (doepu *DeliveryOptionEasyPostUpdate) Mutation() *DeliveryOptionEasyPostMutation {
	return doepu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (doepu *DeliveryOptionEasyPostUpdate) ClearTenant() *DeliveryOptionEasyPostUpdate {
	doepu.mutation.ClearTenant()
	return doepu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (doepu *DeliveryOptionEasyPostUpdate) ClearDeliveryOption() *DeliveryOptionEasyPostUpdate {
	doepu.mutation.ClearDeliveryOption()
	return doepu
}

// ClearCarrierAddServEasyPost clears all "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (doepu *DeliveryOptionEasyPostUpdate) ClearCarrierAddServEasyPost() *DeliveryOptionEasyPostUpdate {
	doepu.mutation.ClearCarrierAddServEasyPost()
	return doepu
}

// RemoveCarrierAddServEasyPostIDs removes the "carrier_add_serv_easy_post" edge to CarrierAdditionalServiceEasyPost entities by IDs.
func (doepu *DeliveryOptionEasyPostUpdate) RemoveCarrierAddServEasyPostIDs(ids ...pulid.ID) *DeliveryOptionEasyPostUpdate {
	doepu.mutation.RemoveCarrierAddServEasyPostIDs(ids...)
	return doepu
}

// RemoveCarrierAddServEasyPost removes "carrier_add_serv_easy_post" edges to CarrierAdditionalServiceEasyPost entities.
func (doepu *DeliveryOptionEasyPostUpdate) RemoveCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *DeliveryOptionEasyPostUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doepu.RemoveCarrierAddServEasyPostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (doepu *DeliveryOptionEasyPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, doepu.sqlSave, doepu.mutation, doepu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (doepu *DeliveryOptionEasyPostUpdate) SaveX(ctx context.Context) int {
	affected, err := doepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (doepu *DeliveryOptionEasyPostUpdate) Exec(ctx context.Context) error {
	_, err := doepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doepu *DeliveryOptionEasyPostUpdate) ExecX(ctx context.Context) {
	if err := doepu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doepu *DeliveryOptionEasyPostUpdate) check() error {
	if doepu.mutation.TenantCleared() && len(doepu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionEasyPost.tenant"`)
	}
	if doepu.mutation.DeliveryOptionCleared() && len(doepu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionEasyPost.delivery_option"`)
	}
	return nil
}

func (doepu *DeliveryOptionEasyPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := doepu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptioneasypost.Table, deliveryoptioneasypost.Columns, sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString))
	if ps := doepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if doepu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptioneasypost.TenantTable,
			Columns: []string{deliveryoptioneasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptioneasypost.TenantTable,
			Columns: []string{deliveryoptioneasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doepu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptioneasypost.DeliveryOptionTable,
			Columns: []string{deliveryoptioneasypost.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptioneasypost.DeliveryOptionTable,
			Columns: []string{deliveryoptioneasypost.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doepu.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepu.mutation.RemovedCarrierAddServEasyPostIDs(); len(nodes) > 0 && !doepu.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepu.mutation.CarrierAddServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, doepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptioneasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	doepu.mutation.done = true
	return n, nil
}

// DeliveryOptionEasyPostUpdateOne is the builder for updating a single DeliveryOptionEasyPost entity.
type DeliveryOptionEasyPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionEasyPostMutation
}

// SetTenantID sets the "tenant_id" field.
func (doepuo *DeliveryOptionEasyPostUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.SetTenantID(pu)
	return doepuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (doepuo *DeliveryOptionEasyPostUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionEasyPostUpdateOne {
	if pu != nil {
		doepuo.SetTenantID(*pu)
	}
	return doepuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) SetTenant(t *Tenant) *DeliveryOptionEasyPostUpdateOne {
	return doepuo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (doepuo *DeliveryOptionEasyPostUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.SetDeliveryOptionID(id)
	return doepuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionEasyPostUpdateOne {
	return doepuo.SetDeliveryOptionID(d.ID)
}

// AddCarrierAddServEasyPostIDs adds the "carrier_add_serv_easy_post" edge to the CarrierAdditionalServiceEasyPost entity by IDs.
func (doepuo *DeliveryOptionEasyPostUpdateOne) AddCarrierAddServEasyPostIDs(ids ...pulid.ID) *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.AddCarrierAddServEasyPostIDs(ids...)
	return doepuo
}

// AddCarrierAddServEasyPost adds the "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) AddCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *DeliveryOptionEasyPostUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doepuo.AddCarrierAddServEasyPostIDs(ids...)
}

// Mutation returns the DeliveryOptionEasyPostMutation object of the builder.
func (doepuo *DeliveryOptionEasyPostUpdateOne) Mutation() *DeliveryOptionEasyPostMutation {
	return doepuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) ClearTenant() *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.ClearTenant()
	return doepuo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) ClearDeliveryOption() *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.ClearDeliveryOption()
	return doepuo
}

// ClearCarrierAddServEasyPost clears all "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) ClearCarrierAddServEasyPost() *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.ClearCarrierAddServEasyPost()
	return doepuo
}

// RemoveCarrierAddServEasyPostIDs removes the "carrier_add_serv_easy_post" edge to CarrierAdditionalServiceEasyPost entities by IDs.
func (doepuo *DeliveryOptionEasyPostUpdateOne) RemoveCarrierAddServEasyPostIDs(ids ...pulid.ID) *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.RemoveCarrierAddServEasyPostIDs(ids...)
	return doepuo
}

// RemoveCarrierAddServEasyPost removes "carrier_add_serv_easy_post" edges to CarrierAdditionalServiceEasyPost entities.
func (doepuo *DeliveryOptionEasyPostUpdateOne) RemoveCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *DeliveryOptionEasyPostUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doepuo.RemoveCarrierAddServEasyPostIDs(ids...)
}

// Where appends a list predicates to the DeliveryOptionEasyPostUpdate builder.
func (doepuo *DeliveryOptionEasyPostUpdateOne) Where(ps ...predicate.DeliveryOptionEasyPost) *DeliveryOptionEasyPostUpdateOne {
	doepuo.mutation.Where(ps...)
	return doepuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (doepuo *DeliveryOptionEasyPostUpdateOne) Select(field string, fields ...string) *DeliveryOptionEasyPostUpdateOne {
	doepuo.fields = append([]string{field}, fields...)
	return doepuo
}

// Save executes the query and returns the updated DeliveryOptionEasyPost entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) Save(ctx context.Context) (*DeliveryOptionEasyPost, error) {
	return withHooks(ctx, doepuo.sqlSave, doepuo.mutation, doepuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (doepuo *DeliveryOptionEasyPostUpdateOne) SaveX(ctx context.Context) *DeliveryOptionEasyPost {
	node, err := doepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (doepuo *DeliveryOptionEasyPostUpdateOne) Exec(ctx context.Context) error {
	_, err := doepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doepuo *DeliveryOptionEasyPostUpdateOne) ExecX(ctx context.Context) {
	if err := doepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doepuo *DeliveryOptionEasyPostUpdateOne) check() error {
	if doepuo.mutation.TenantCleared() && len(doepuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionEasyPost.tenant"`)
	}
	if doepuo.mutation.DeliveryOptionCleared() && len(doepuo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionEasyPost.delivery_option"`)
	}
	return nil
}

func (doepuo *DeliveryOptionEasyPostUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOptionEasyPost, err error) {
	if err := doepuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptioneasypost.Table, deliveryoptioneasypost.Columns, sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString))
	id, ok := doepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOptionEasyPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := doepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptioneasypost.FieldID)
		for _, f := range fields {
			if !deliveryoptioneasypost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoptioneasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := doepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if doepuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptioneasypost.TenantTable,
			Columns: []string{deliveryoptioneasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptioneasypost.TenantTable,
			Columns: []string{deliveryoptioneasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doepuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptioneasypost.DeliveryOptionTable,
			Columns: []string{deliveryoptioneasypost.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptioneasypost.DeliveryOptionTable,
			Columns: []string{deliveryoptioneasypost.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doepuo.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepuo.mutation.RemovedCarrierAddServEasyPostIDs(); len(nodes) > 0 && !doepuo.mutation.CarrierAddServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doepuo.mutation.CarrierAddServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOptionEasyPost{config: doepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, doepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptioneasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	doepuo.mutation.done = true
	return _node, nil
}
