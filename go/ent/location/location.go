// Code generated by ent, DO NOT EDIT.

package location

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the location type in the database.
	Label = "location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeLocationTags holds the string denoting the location_tags edge name in mutations.
	EdgeLocationTags = "location_tags"
	// EdgeSenderConnection holds the string denoting the sender_connection edge name in mutations.
	EdgeSenderConnection = "sender_connection"
	// EdgePickupConnection holds the string denoting the pickup_connection edge name in mutations.
	EdgePickupConnection = "pickup_connection"
	// EdgeReturnConnection holds the string denoting the return_connection edge name in mutations.
	EdgeReturnConnection = "return_connection"
	// EdgeSellerConnection holds the string denoting the seller_connection edge name in mutations.
	EdgeSellerConnection = "seller_connection"
	// EdgeReturnPortal holds the string denoting the return_portal edge name in mutations.
	EdgeReturnPortal = "return_portal"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// Table holds the table name of the location in the database.
	Table = "locations"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "locations"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// AddressTable is the table that holds the address relation/edge.
	AddressTable = "locations"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "addresses"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "location_address"
	// LocationTagsTable is the table that holds the location_tags relation/edge. The primary key declared below.
	LocationTagsTable = "location_location_tags"
	// LocationTagsInverseTable is the table name for the LocationTag entity.
	// It exists in this package in order to avoid circular dependency with the "locationtag" package.
	LocationTagsInverseTable = "location_tags"
	// SenderConnectionTable is the table that holds the sender_connection relation/edge.
	SenderConnectionTable = "connections"
	// SenderConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	SenderConnectionInverseTable = "connections"
	// SenderConnectionColumn is the table column denoting the sender_connection relation/edge.
	SenderConnectionColumn = "connection_sender_location"
	// PickupConnectionTable is the table that holds the pickup_connection relation/edge.
	PickupConnectionTable = "connections"
	// PickupConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	PickupConnectionInverseTable = "connections"
	// PickupConnectionColumn is the table column denoting the pickup_connection relation/edge.
	PickupConnectionColumn = "connection_pickup_location"
	// ReturnConnectionTable is the table that holds the return_connection relation/edge.
	ReturnConnectionTable = "connections"
	// ReturnConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ReturnConnectionInverseTable = "connections"
	// ReturnConnectionColumn is the table column denoting the return_connection relation/edge.
	ReturnConnectionColumn = "connection_return_location"
	// SellerConnectionTable is the table that holds the seller_connection relation/edge.
	SellerConnectionTable = "connections"
	// SellerConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	SellerConnectionInverseTable = "connections"
	// SellerConnectionColumn is the table column denoting the seller_connection relation/edge.
	SellerConnectionColumn = "connection_seller_location"
	// ReturnPortalTable is the table that holds the return_portal relation/edge. The primary key declared below.
	ReturnPortalTable = "return_portal_return_location"
	// ReturnPortalInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalInverseTable = "return_portals"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge. The primary key declared below.
	DeliveryOptionTable = "delivery_option_click_collect_location"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "collis"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_click_collect_location"
)

// Columns holds all SQL columns for location fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "locations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"location_address",
}

var (
	// LocationTagsPrimaryKey and LocationTagsColumn2 are the table columns denoting the
	// primary key for the location_tags relation (M2M).
	LocationTagsPrimaryKey = []string{"location_id", "location_tag_id"}
	// ReturnPortalPrimaryKey and ReturnPortalColumn2 are the table columns denoting the
	// primary key for the return_portal relation (M2M).
	ReturnPortalPrimaryKey = []string{"return_portal_id", "location_id"}
	// DeliveryOptionPrimaryKey and DeliveryOptionColumn2 are the table columns denoting the
	// primary key for the delivery_option relation (M2M).
	DeliveryOptionPrimaryKey = []string{"delivery_option_id", "location_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Location queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressField orders the results by address field.
func ByAddressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressStep(), sql.OrderByField(field, opts...))
	}
}

// ByLocationTagsCount orders the results by location_tags count.
func ByLocationTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationTagsStep(), opts...)
	}
}

// ByLocationTags orders the results by location_tags terms.
func ByLocationTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySenderConnectionCount orders the results by sender_connection count.
func BySenderConnectionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSenderConnectionStep(), opts...)
	}
}

// BySenderConnection orders the results by sender_connection terms.
func BySenderConnection(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderConnectionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPickupConnectionCount orders the results by pickup_connection count.
func ByPickupConnectionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPickupConnectionStep(), opts...)
	}
}

// ByPickupConnection orders the results by pickup_connection terms.
func ByPickupConnection(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPickupConnectionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnConnectionCount orders the results by return_connection count.
func ByReturnConnectionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnConnectionStep(), opts...)
	}
}

// ByReturnConnection orders the results by return_connection terms.
func ByReturnConnection(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnConnectionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySellerConnectionCount orders the results by seller_connection count.
func BySellerConnectionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSellerConnectionStep(), opts...)
	}
}

// BySellerConnection orders the results by seller_connection terms.
func BySellerConnection(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSellerConnectionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnPortalCount orders the results by return_portal count.
func ByReturnPortalCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalStep(), opts...)
	}
}

// ByReturnPortal orders the results by return_portal terms.
func ByReturnPortal(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionCount orders the results by delivery_option count.
func ByDeliveryOptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionStep(), opts...)
	}
}

// ByDeliveryOption orders the results by delivery_option terms.
func ByDeliveryOption(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByColliCount orders the results by colli count.
func ByColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newColliStep(), opts...)
	}
}

// ByColli orders the results by colli terms.
func ByColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AddressTable, AddressColumn),
	)
}
func newLocationTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LocationTagsTable, LocationTagsPrimaryKey...),
	)
}
func newSenderConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SenderConnectionTable, SenderConnectionColumn),
	)
}
func newPickupConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PickupConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PickupConnectionTable, PickupConnectionColumn),
	)
}
func newReturnConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnConnectionTable, ReturnConnectionColumn),
	)
}
func newSellerConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SellerConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SellerConnectionTable, SellerConnectionColumn),
	)
}
func newReturnPortalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReturnPortalTable, ReturnPortalPrimaryKey...),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionTable, DeliveryOptionPrimaryKey...),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
	)
}
