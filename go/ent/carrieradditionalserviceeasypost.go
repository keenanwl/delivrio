// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierAdditionalServiceEasyPost is the model entity for the CarrierAdditionalServiceEasyPost schema.
type CarrierAdditionalServiceEasyPost struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// APIValue holds the value of the "api_value" field.
	APIValue string `json:"api_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierAdditionalServiceEasyPostQuery when eager-loading is set.
	Edges        CarrierAdditionalServiceEasyPostEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarrierAdditionalServiceEasyPostEdges holds the relations/edges for other nodes in the graph.
type CarrierAdditionalServiceEasyPostEdges struct {
	// CarrierServiceEasyPost holds the value of the carrier_service_easy_post edge.
	CarrierServiceEasyPost []*CarrierServiceEasyPost `json:"carrier_service_easy_post,omitempty"`
	// DeliveryOptionEasyPost holds the value of the delivery_option_easy_post edge.
	DeliveryOptionEasyPost []*DeliveryOptionEasyPost `json:"delivery_option_easy_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierServiceEasyPost map[string][]*CarrierServiceEasyPost
	namedDeliveryOptionEasyPost map[string][]*DeliveryOptionEasyPost
}

// CarrierServiceEasyPostOrErr returns the CarrierServiceEasyPost value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceEasyPostEdges) CarrierServiceEasyPostOrErr() ([]*CarrierServiceEasyPost, error) {
	if e.loadedTypes[0] {
		return e.CarrierServiceEasyPost, nil
	}
	return nil, &NotLoadedError{edge: "carrier_service_easy_post"}
}

// DeliveryOptionEasyPostOrErr returns the DeliveryOptionEasyPost value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceEasyPostEdges) DeliveryOptionEasyPostOrErr() ([]*DeliveryOptionEasyPost, error) {
	if e.loadedTypes[1] {
		return e.DeliveryOptionEasyPost, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_easy_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierAdditionalServiceEasyPost) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrieradditionalserviceeasypost.FieldID:
			values[i] = new(pulid.ID)
		case carrieradditionalserviceeasypost.FieldLabel, carrieradditionalserviceeasypost.FieldAPIKey, carrieradditionalserviceeasypost.FieldAPIValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierAdditionalServiceEasyPost fields.
func (casep *CarrierAdditionalServiceEasyPost) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrieradditionalserviceeasypost.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				casep.ID = *value
			}
		case carrieradditionalserviceeasypost.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				casep.Label = value.String
			}
		case carrieradditionalserviceeasypost.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				casep.APIKey = value.String
			}
		case carrieradditionalserviceeasypost.FieldAPIValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_value", values[i])
			} else if value.Valid {
				casep.APIValue = value.String
			}
		default:
			casep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierAdditionalServiceEasyPost.
// This includes values selected through modifiers, order, etc.
func (casep *CarrierAdditionalServiceEasyPost) Value(name string) (ent.Value, error) {
	return casep.selectValues.Get(name)
}

// QueryCarrierServiceEasyPost queries the "carrier_service_easy_post" edge of the CarrierAdditionalServiceEasyPost entity.
func (casep *CarrierAdditionalServiceEasyPost) QueryCarrierServiceEasyPost() *CarrierServiceEasyPostQuery {
	return NewCarrierAdditionalServiceEasyPostClient(casep.config).QueryCarrierServiceEasyPost(casep)
}

// QueryDeliveryOptionEasyPost queries the "delivery_option_easy_post" edge of the CarrierAdditionalServiceEasyPost entity.
func (casep *CarrierAdditionalServiceEasyPost) QueryDeliveryOptionEasyPost() *DeliveryOptionEasyPostQuery {
	return NewCarrierAdditionalServiceEasyPostClient(casep.config).QueryDeliveryOptionEasyPost(casep)
}

// Update returns a builder for updating this CarrierAdditionalServiceEasyPost.
// Note that you need to call CarrierAdditionalServiceEasyPost.Unwrap() before calling this method if this CarrierAdditionalServiceEasyPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (casep *CarrierAdditionalServiceEasyPost) Update() *CarrierAdditionalServiceEasyPostUpdateOne {
	return NewCarrierAdditionalServiceEasyPostClient(casep.config).UpdateOne(casep)
}

// Unwrap unwraps the CarrierAdditionalServiceEasyPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (casep *CarrierAdditionalServiceEasyPost) Unwrap() *CarrierAdditionalServiceEasyPost {
	_tx, ok := casep.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierAdditionalServiceEasyPost is not a transactional entity")
	}
	casep.config.driver = _tx.drv
	return casep
}

// String implements the fmt.Stringer.
func (casep *CarrierAdditionalServiceEasyPost) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierAdditionalServiceEasyPost(")
	builder.WriteString(fmt.Sprintf("id=%v, ", casep.ID))
	builder.WriteString("label=")
	builder.WriteString(casep.Label)
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(casep.APIKey)
	builder.WriteString(", ")
	builder.WriteString("api_value=")
	builder.WriteString(casep.APIValue)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierServiceEasyPost returns the CarrierServiceEasyPost named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casep *CarrierAdditionalServiceEasyPost) NamedCarrierServiceEasyPost(name string) ([]*CarrierServiceEasyPost, error) {
	if casep.Edges.namedCarrierServiceEasyPost == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casep.Edges.namedCarrierServiceEasyPost[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casep *CarrierAdditionalServiceEasyPost) appendNamedCarrierServiceEasyPost(name string, edges ...*CarrierServiceEasyPost) {
	if casep.Edges.namedCarrierServiceEasyPost == nil {
		casep.Edges.namedCarrierServiceEasyPost = make(map[string][]*CarrierServiceEasyPost)
	}
	if len(edges) == 0 {
		casep.Edges.namedCarrierServiceEasyPost[name] = []*CarrierServiceEasyPost{}
	} else {
		casep.Edges.namedCarrierServiceEasyPost[name] = append(casep.Edges.namedCarrierServiceEasyPost[name], edges...)
	}
}

// NamedDeliveryOptionEasyPost returns the DeliveryOptionEasyPost named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casep *CarrierAdditionalServiceEasyPost) NamedDeliveryOptionEasyPost(name string) ([]*DeliveryOptionEasyPost, error) {
	if casep.Edges.namedDeliveryOptionEasyPost == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casep.Edges.namedDeliveryOptionEasyPost[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casep *CarrierAdditionalServiceEasyPost) appendNamedDeliveryOptionEasyPost(name string, edges ...*DeliveryOptionEasyPost) {
	if casep.Edges.namedDeliveryOptionEasyPost == nil {
		casep.Edges.namedDeliveryOptionEasyPost = make(map[string][]*DeliveryOptionEasyPost)
	}
	if len(edges) == 0 {
		casep.Edges.namedDeliveryOptionEasyPost[name] = []*DeliveryOptionEasyPost{}
	} else {
		casep.Edges.namedDeliveryOptionEasyPost[name] = append(casep.Edges.namedDeliveryOptionEasyPost[name], edges...)
	}
}

// CarrierAdditionalServiceEasyPosts is a parsable slice of CarrierAdditionalServiceEasyPost.
type CarrierAdditionalServiceEasyPosts []*CarrierAdditionalServiceEasyPost
