// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectOptionCarrierUpdate is the builder for updating ConnectOptionCarrier entities.
type ConnectOptionCarrierUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectOptionCarrierMutation
}

// Where appends a list predicates to the ConnectOptionCarrierUpdate builder.
func (cocu *ConnectOptionCarrierUpdate) Where(ps ...predicate.ConnectOptionCarrier) *ConnectOptionCarrierUpdate {
	cocu.mutation.Where(ps...)
	return cocu
}

// SetName sets the "name" field.
func (cocu *ConnectOptionCarrierUpdate) SetName(s string) *ConnectOptionCarrierUpdate {
	cocu.mutation.SetName(s)
	return cocu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cocu *ConnectOptionCarrierUpdate) SetNillableName(s *string) *ConnectOptionCarrierUpdate {
	if s != nil {
		cocu.SetName(*s)
	}
	return cocu
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (cocu *ConnectOptionCarrierUpdate) AddTenantIDs(ids ...pulid.ID) *ConnectOptionCarrierUpdate {
	cocu.mutation.AddTenantIDs(ids...)
	return cocu
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (cocu *ConnectOptionCarrierUpdate) AddTenant(t ...*Tenant) *ConnectOptionCarrierUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cocu.AddTenantIDs(ids...)
}

// Mutation returns the ConnectOptionCarrierMutation object of the builder.
func (cocu *ConnectOptionCarrierUpdate) Mutation() *ConnectOptionCarrierMutation {
	return cocu.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (cocu *ConnectOptionCarrierUpdate) ClearTenant() *ConnectOptionCarrierUpdate {
	cocu.mutation.ClearTenant()
	return cocu
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (cocu *ConnectOptionCarrierUpdate) RemoveTenantIDs(ids ...pulid.ID) *ConnectOptionCarrierUpdate {
	cocu.mutation.RemoveTenantIDs(ids...)
	return cocu
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (cocu *ConnectOptionCarrierUpdate) RemoveTenant(t ...*Tenant) *ConnectOptionCarrierUpdate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cocu.RemoveTenantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cocu *ConnectOptionCarrierUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cocu.sqlSave, cocu.mutation, cocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cocu *ConnectOptionCarrierUpdate) SaveX(ctx context.Context) int {
	affected, err := cocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cocu *ConnectOptionCarrierUpdate) Exec(ctx context.Context) error {
	_, err := cocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocu *ConnectOptionCarrierUpdate) ExecX(ctx context.Context) {
	if err := cocu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cocu *ConnectOptionCarrierUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(connectoptioncarrier.Table, connectoptioncarrier.Columns, sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString))
	if ps := cocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cocu.mutation.Name(); ok {
		_spec.SetField(connectoptioncarrier.FieldName, field.TypeString, value)
	}
	if cocu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cocu.mutation.RemovedTenantIDs(); len(nodes) > 0 && !cocu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cocu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectoptioncarrier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cocu.mutation.done = true
	return n, nil
}

// ConnectOptionCarrierUpdateOne is the builder for updating a single ConnectOptionCarrier entity.
type ConnectOptionCarrierUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectOptionCarrierMutation
}

// SetName sets the "name" field.
func (cocuo *ConnectOptionCarrierUpdateOne) SetName(s string) *ConnectOptionCarrierUpdateOne {
	cocuo.mutation.SetName(s)
	return cocuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cocuo *ConnectOptionCarrierUpdateOne) SetNillableName(s *string) *ConnectOptionCarrierUpdateOne {
	if s != nil {
		cocuo.SetName(*s)
	}
	return cocuo
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (cocuo *ConnectOptionCarrierUpdateOne) AddTenantIDs(ids ...pulid.ID) *ConnectOptionCarrierUpdateOne {
	cocuo.mutation.AddTenantIDs(ids...)
	return cocuo
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (cocuo *ConnectOptionCarrierUpdateOne) AddTenant(t ...*Tenant) *ConnectOptionCarrierUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cocuo.AddTenantIDs(ids...)
}

// Mutation returns the ConnectOptionCarrierMutation object of the builder.
func (cocuo *ConnectOptionCarrierUpdateOne) Mutation() *ConnectOptionCarrierMutation {
	return cocuo.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (cocuo *ConnectOptionCarrierUpdateOne) ClearTenant() *ConnectOptionCarrierUpdateOne {
	cocuo.mutation.ClearTenant()
	return cocuo
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (cocuo *ConnectOptionCarrierUpdateOne) RemoveTenantIDs(ids ...pulid.ID) *ConnectOptionCarrierUpdateOne {
	cocuo.mutation.RemoveTenantIDs(ids...)
	return cocuo
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (cocuo *ConnectOptionCarrierUpdateOne) RemoveTenant(t ...*Tenant) *ConnectOptionCarrierUpdateOne {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cocuo.RemoveTenantIDs(ids...)
}

// Where appends a list predicates to the ConnectOptionCarrierUpdate builder.
func (cocuo *ConnectOptionCarrierUpdateOne) Where(ps ...predicate.ConnectOptionCarrier) *ConnectOptionCarrierUpdateOne {
	cocuo.mutation.Where(ps...)
	return cocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cocuo *ConnectOptionCarrierUpdateOne) Select(field string, fields ...string) *ConnectOptionCarrierUpdateOne {
	cocuo.fields = append([]string{field}, fields...)
	return cocuo
}

// Save executes the query and returns the updated ConnectOptionCarrier entity.
func (cocuo *ConnectOptionCarrierUpdateOne) Save(ctx context.Context) (*ConnectOptionCarrier, error) {
	return withHooks(ctx, cocuo.sqlSave, cocuo.mutation, cocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cocuo *ConnectOptionCarrierUpdateOne) SaveX(ctx context.Context) *ConnectOptionCarrier {
	node, err := cocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cocuo *ConnectOptionCarrierUpdateOne) Exec(ctx context.Context) error {
	_, err := cocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocuo *ConnectOptionCarrierUpdateOne) ExecX(ctx context.Context) {
	if err := cocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cocuo *ConnectOptionCarrierUpdateOne) sqlSave(ctx context.Context) (_node *ConnectOptionCarrier, err error) {
	_spec := sqlgraph.NewUpdateSpec(connectoptioncarrier.Table, connectoptioncarrier.Columns, sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString))
	id, ok := cocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectOptionCarrier.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectoptioncarrier.FieldID)
		for _, f := range fields {
			if !connectoptioncarrier.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectoptioncarrier.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cocuo.mutation.Name(); ok {
		_spec.SetField(connectoptioncarrier.FieldName, field.TypeString, value)
	}
	if cocuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cocuo.mutation.RemovedTenantIDs(); len(nodes) > 0 && !cocuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cocuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectOptionCarrier{config: cocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectoptioncarrier.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cocuo.mutation.done = true
	return _node, nil
}
