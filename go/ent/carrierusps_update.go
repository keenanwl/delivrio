// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierUSPSUpdate is the builder for updating CarrierUSPS entities.
type CarrierUSPSUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierUSPSMutation
}

// Where appends a list predicates to the CarrierUSPSUpdate builder.
func (cuu *CarrierUSPSUpdate) Where(ps ...predicate.CarrierUSPS) *CarrierUSPSUpdate {
	cuu.mutation.Where(ps...)
	return cuu
}

// SetTenantID sets the "tenant_id" field.
func (cuu *CarrierUSPSUpdate) SetTenantID(pu pulid.ID) *CarrierUSPSUpdate {
	cuu.mutation.SetTenantID(pu)
	return cuu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierUSPSUpdate {
	if pu != nil {
		cuu.SetTenantID(*pu)
	}
	return cuu
}

// SetIsTestAPI sets the "is_test_api" field.
func (cuu *CarrierUSPSUpdate) SetIsTestAPI(b bool) *CarrierUSPSUpdate {
	cuu.mutation.SetIsTestAPI(b)
	return cuu
}

// SetNillableIsTestAPI sets the "is_test_api" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableIsTestAPI(b *bool) *CarrierUSPSUpdate {
	if b != nil {
		cuu.SetIsTestAPI(*b)
	}
	return cuu
}

// SetConsumerKey sets the "consumer_key" field.
func (cuu *CarrierUSPSUpdate) SetConsumerKey(s string) *CarrierUSPSUpdate {
	cuu.mutation.SetConsumerKey(s)
	return cuu
}

// SetNillableConsumerKey sets the "consumer_key" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableConsumerKey(s *string) *CarrierUSPSUpdate {
	if s != nil {
		cuu.SetConsumerKey(*s)
	}
	return cuu
}

// ClearConsumerKey clears the value of the "consumer_key" field.
func (cuu *CarrierUSPSUpdate) ClearConsumerKey() *CarrierUSPSUpdate {
	cuu.mutation.ClearConsumerKey()
	return cuu
}

// SetConsumerSecret sets the "consumer_secret" field.
func (cuu *CarrierUSPSUpdate) SetConsumerSecret(s string) *CarrierUSPSUpdate {
	cuu.mutation.SetConsumerSecret(s)
	return cuu
}

// SetNillableConsumerSecret sets the "consumer_secret" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableConsumerSecret(s *string) *CarrierUSPSUpdate {
	if s != nil {
		cuu.SetConsumerSecret(*s)
	}
	return cuu
}

// ClearConsumerSecret clears the value of the "consumer_secret" field.
func (cuu *CarrierUSPSUpdate) ClearConsumerSecret() *CarrierUSPSUpdate {
	cuu.mutation.ClearConsumerSecret()
	return cuu
}

// SetMid sets the "mid" field.
func (cuu *CarrierUSPSUpdate) SetMid(s string) *CarrierUSPSUpdate {
	cuu.mutation.SetMid(s)
	return cuu
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableMid(s *string) *CarrierUSPSUpdate {
	if s != nil {
		cuu.SetMid(*s)
	}
	return cuu
}

// ClearMid clears the value of the "mid" field.
func (cuu *CarrierUSPSUpdate) ClearMid() *CarrierUSPSUpdate {
	cuu.mutation.ClearMid()
	return cuu
}

// SetManifestMid sets the "manifest_mid" field.
func (cuu *CarrierUSPSUpdate) SetManifestMid(s string) *CarrierUSPSUpdate {
	cuu.mutation.SetManifestMid(s)
	return cuu
}

// SetNillableManifestMid sets the "manifest_mid" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableManifestMid(s *string) *CarrierUSPSUpdate {
	if s != nil {
		cuu.SetManifestMid(*s)
	}
	return cuu
}

// ClearManifestMid clears the value of the "manifest_mid" field.
func (cuu *CarrierUSPSUpdate) ClearManifestMid() *CarrierUSPSUpdate {
	cuu.mutation.ClearManifestMid()
	return cuu
}

// SetCrid sets the "crid" field.
func (cuu *CarrierUSPSUpdate) SetCrid(s string) *CarrierUSPSUpdate {
	cuu.mutation.SetCrid(s)
	return cuu
}

// SetNillableCrid sets the "crid" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableCrid(s *string) *CarrierUSPSUpdate {
	if s != nil {
		cuu.SetCrid(*s)
	}
	return cuu
}

// ClearCrid clears the value of the "crid" field.
func (cuu *CarrierUSPSUpdate) ClearCrid() *CarrierUSPSUpdate {
	cuu.mutation.ClearCrid()
	return cuu
}

// SetEpsAccountNumber sets the "eps_account_number" field.
func (cuu *CarrierUSPSUpdate) SetEpsAccountNumber(s string) *CarrierUSPSUpdate {
	cuu.mutation.SetEpsAccountNumber(s)
	return cuu
}

// SetNillableEpsAccountNumber sets the "eps_account_number" field if the given value is not nil.
func (cuu *CarrierUSPSUpdate) SetNillableEpsAccountNumber(s *string) *CarrierUSPSUpdate {
	if s != nil {
		cuu.SetEpsAccountNumber(*s)
	}
	return cuu
}

// ClearEpsAccountNumber clears the value of the "eps_account_number" field.
func (cuu *CarrierUSPSUpdate) ClearEpsAccountNumber() *CarrierUSPSUpdate {
	cuu.mutation.ClearEpsAccountNumber()
	return cuu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuu *CarrierUSPSUpdate) SetTenant(t *Tenant) *CarrierUSPSUpdate {
	return cuu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cuu *CarrierUSPSUpdate) SetCarrierID(id pulid.ID) *CarrierUSPSUpdate {
	cuu.mutation.SetCarrierID(id)
	return cuu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cuu *CarrierUSPSUpdate) SetCarrier(c *Carrier) *CarrierUSPSUpdate {
	return cuu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierUSPSMutation object of the builder.
func (cuu *CarrierUSPSUpdate) Mutation() *CarrierUSPSMutation {
	return cuu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuu *CarrierUSPSUpdate) ClearTenant() *CarrierUSPSUpdate {
	cuu.mutation.ClearTenant()
	return cuu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cuu *CarrierUSPSUpdate) ClearCarrier() *CarrierUSPSUpdate {
	cuu.mutation.ClearCarrier()
	return cuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cuu *CarrierUSPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cuu.sqlSave, cuu.mutation, cuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuu *CarrierUSPSUpdate) SaveX(ctx context.Context) int {
	affected, err := cuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cuu *CarrierUSPSUpdate) Exec(ctx context.Context) error {
	_, err := cuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuu *CarrierUSPSUpdate) ExecX(ctx context.Context) {
	if err := cuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuu *CarrierUSPSUpdate) check() error {
	if cuu.mutation.TenantCleared() && len(cuu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierUSPS.tenant"`)
	}
	if cuu.mutation.CarrierCleared() && len(cuu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierUSPS.carrier"`)
	}
	return nil
}

func (cuu *CarrierUSPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierusps.Table, carrierusps.Columns, sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString))
	if ps := cuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuu.mutation.IsTestAPI(); ok {
		_spec.SetField(carrierusps.FieldIsTestAPI, field.TypeBool, value)
	}
	if value, ok := cuu.mutation.ConsumerKey(); ok {
		_spec.SetField(carrierusps.FieldConsumerKey, field.TypeString, value)
	}
	if cuu.mutation.ConsumerKeyCleared() {
		_spec.ClearField(carrierusps.FieldConsumerKey, field.TypeString)
	}
	if value, ok := cuu.mutation.ConsumerSecret(); ok {
		_spec.SetField(carrierusps.FieldConsumerSecret, field.TypeString, value)
	}
	if cuu.mutation.ConsumerSecretCleared() {
		_spec.ClearField(carrierusps.FieldConsumerSecret, field.TypeString)
	}
	if value, ok := cuu.mutation.Mid(); ok {
		_spec.SetField(carrierusps.FieldMid, field.TypeString, value)
	}
	if cuu.mutation.MidCleared() {
		_spec.ClearField(carrierusps.FieldMid, field.TypeString)
	}
	if value, ok := cuu.mutation.ManifestMid(); ok {
		_spec.SetField(carrierusps.FieldManifestMid, field.TypeString, value)
	}
	if cuu.mutation.ManifestMidCleared() {
		_spec.ClearField(carrierusps.FieldManifestMid, field.TypeString)
	}
	if value, ok := cuu.mutation.Crid(); ok {
		_spec.SetField(carrierusps.FieldCrid, field.TypeString, value)
	}
	if cuu.mutation.CridCleared() {
		_spec.ClearField(carrierusps.FieldCrid, field.TypeString)
	}
	if value, ok := cuu.mutation.EpsAccountNumber(); ok {
		_spec.SetField(carrierusps.FieldEpsAccountNumber, field.TypeString, value)
	}
	if cuu.mutation.EpsAccountNumberCleared() {
		_spec.ClearField(carrierusps.FieldEpsAccountNumber, field.TypeString)
	}
	if cuu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierusps.TenantTable,
			Columns: []string{carrierusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierusps.TenantTable,
			Columns: []string{carrierusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierusps.CarrierTable,
			Columns: []string{carrierusps.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierusps.CarrierTable,
			Columns: []string{carrierusps.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cuu.mutation.done = true
	return n, nil
}

// CarrierUSPSUpdateOne is the builder for updating a single CarrierUSPS entity.
type CarrierUSPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierUSPSMutation
}

// SetTenantID sets the "tenant_id" field.
func (cuuo *CarrierUSPSUpdateOne) SetTenantID(pu pulid.ID) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetTenantID(pu)
	return cuuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierUSPSUpdateOne {
	if pu != nil {
		cuuo.SetTenantID(*pu)
	}
	return cuuo
}

// SetIsTestAPI sets the "is_test_api" field.
func (cuuo *CarrierUSPSUpdateOne) SetIsTestAPI(b bool) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetIsTestAPI(b)
	return cuuo
}

// SetNillableIsTestAPI sets the "is_test_api" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableIsTestAPI(b *bool) *CarrierUSPSUpdateOne {
	if b != nil {
		cuuo.SetIsTestAPI(*b)
	}
	return cuuo
}

// SetConsumerKey sets the "consumer_key" field.
func (cuuo *CarrierUSPSUpdateOne) SetConsumerKey(s string) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetConsumerKey(s)
	return cuuo
}

// SetNillableConsumerKey sets the "consumer_key" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableConsumerKey(s *string) *CarrierUSPSUpdateOne {
	if s != nil {
		cuuo.SetConsumerKey(*s)
	}
	return cuuo
}

// ClearConsumerKey clears the value of the "consumer_key" field.
func (cuuo *CarrierUSPSUpdateOne) ClearConsumerKey() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearConsumerKey()
	return cuuo
}

// SetConsumerSecret sets the "consumer_secret" field.
func (cuuo *CarrierUSPSUpdateOne) SetConsumerSecret(s string) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetConsumerSecret(s)
	return cuuo
}

// SetNillableConsumerSecret sets the "consumer_secret" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableConsumerSecret(s *string) *CarrierUSPSUpdateOne {
	if s != nil {
		cuuo.SetConsumerSecret(*s)
	}
	return cuuo
}

// ClearConsumerSecret clears the value of the "consumer_secret" field.
func (cuuo *CarrierUSPSUpdateOne) ClearConsumerSecret() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearConsumerSecret()
	return cuuo
}

// SetMid sets the "mid" field.
func (cuuo *CarrierUSPSUpdateOne) SetMid(s string) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetMid(s)
	return cuuo
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableMid(s *string) *CarrierUSPSUpdateOne {
	if s != nil {
		cuuo.SetMid(*s)
	}
	return cuuo
}

// ClearMid clears the value of the "mid" field.
func (cuuo *CarrierUSPSUpdateOne) ClearMid() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearMid()
	return cuuo
}

// SetManifestMid sets the "manifest_mid" field.
func (cuuo *CarrierUSPSUpdateOne) SetManifestMid(s string) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetManifestMid(s)
	return cuuo
}

// SetNillableManifestMid sets the "manifest_mid" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableManifestMid(s *string) *CarrierUSPSUpdateOne {
	if s != nil {
		cuuo.SetManifestMid(*s)
	}
	return cuuo
}

// ClearManifestMid clears the value of the "manifest_mid" field.
func (cuuo *CarrierUSPSUpdateOne) ClearManifestMid() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearManifestMid()
	return cuuo
}

// SetCrid sets the "crid" field.
func (cuuo *CarrierUSPSUpdateOne) SetCrid(s string) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetCrid(s)
	return cuuo
}

// SetNillableCrid sets the "crid" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableCrid(s *string) *CarrierUSPSUpdateOne {
	if s != nil {
		cuuo.SetCrid(*s)
	}
	return cuuo
}

// ClearCrid clears the value of the "crid" field.
func (cuuo *CarrierUSPSUpdateOne) ClearCrid() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearCrid()
	return cuuo
}

// SetEpsAccountNumber sets the "eps_account_number" field.
func (cuuo *CarrierUSPSUpdateOne) SetEpsAccountNumber(s string) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetEpsAccountNumber(s)
	return cuuo
}

// SetNillableEpsAccountNumber sets the "eps_account_number" field if the given value is not nil.
func (cuuo *CarrierUSPSUpdateOne) SetNillableEpsAccountNumber(s *string) *CarrierUSPSUpdateOne {
	if s != nil {
		cuuo.SetEpsAccountNumber(*s)
	}
	return cuuo
}

// ClearEpsAccountNumber clears the value of the "eps_account_number" field.
func (cuuo *CarrierUSPSUpdateOne) ClearEpsAccountNumber() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearEpsAccountNumber()
	return cuuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuuo *CarrierUSPSUpdateOne) SetTenant(t *Tenant) *CarrierUSPSUpdateOne {
	return cuuo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cuuo *CarrierUSPSUpdateOne) SetCarrierID(id pulid.ID) *CarrierUSPSUpdateOne {
	cuuo.mutation.SetCarrierID(id)
	return cuuo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cuuo *CarrierUSPSUpdateOne) SetCarrier(c *Carrier) *CarrierUSPSUpdateOne {
	return cuuo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierUSPSMutation object of the builder.
func (cuuo *CarrierUSPSUpdateOne) Mutation() *CarrierUSPSMutation {
	return cuuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuuo *CarrierUSPSUpdateOne) ClearTenant() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearTenant()
	return cuuo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cuuo *CarrierUSPSUpdateOne) ClearCarrier() *CarrierUSPSUpdateOne {
	cuuo.mutation.ClearCarrier()
	return cuuo
}

// Where appends a list predicates to the CarrierUSPSUpdate builder.
func (cuuo *CarrierUSPSUpdateOne) Where(ps ...predicate.CarrierUSPS) *CarrierUSPSUpdateOne {
	cuuo.mutation.Where(ps...)
	return cuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuuo *CarrierUSPSUpdateOne) Select(field string, fields ...string) *CarrierUSPSUpdateOne {
	cuuo.fields = append([]string{field}, fields...)
	return cuuo
}

// Save executes the query and returns the updated CarrierUSPS entity.
func (cuuo *CarrierUSPSUpdateOne) Save(ctx context.Context) (*CarrierUSPS, error) {
	return withHooks(ctx, cuuo.sqlSave, cuuo.mutation, cuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuuo *CarrierUSPSUpdateOne) SaveX(ctx context.Context) *CarrierUSPS {
	node, err := cuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuuo *CarrierUSPSUpdateOne) Exec(ctx context.Context) error {
	_, err := cuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuuo *CarrierUSPSUpdateOne) ExecX(ctx context.Context) {
	if err := cuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuuo *CarrierUSPSUpdateOne) check() error {
	if cuuo.mutation.TenantCleared() && len(cuuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierUSPS.tenant"`)
	}
	if cuuo.mutation.CarrierCleared() && len(cuuo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierUSPS.carrier"`)
	}
	return nil
}

func (cuuo *CarrierUSPSUpdateOne) sqlSave(ctx context.Context) (_node *CarrierUSPS, err error) {
	if err := cuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierusps.Table, carrierusps.Columns, sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString))
	id, ok := cuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierUSPS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierusps.FieldID)
		for _, f := range fields {
			if !carrierusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuuo.mutation.IsTestAPI(); ok {
		_spec.SetField(carrierusps.FieldIsTestAPI, field.TypeBool, value)
	}
	if value, ok := cuuo.mutation.ConsumerKey(); ok {
		_spec.SetField(carrierusps.FieldConsumerKey, field.TypeString, value)
	}
	if cuuo.mutation.ConsumerKeyCleared() {
		_spec.ClearField(carrierusps.FieldConsumerKey, field.TypeString)
	}
	if value, ok := cuuo.mutation.ConsumerSecret(); ok {
		_spec.SetField(carrierusps.FieldConsumerSecret, field.TypeString, value)
	}
	if cuuo.mutation.ConsumerSecretCleared() {
		_spec.ClearField(carrierusps.FieldConsumerSecret, field.TypeString)
	}
	if value, ok := cuuo.mutation.Mid(); ok {
		_spec.SetField(carrierusps.FieldMid, field.TypeString, value)
	}
	if cuuo.mutation.MidCleared() {
		_spec.ClearField(carrierusps.FieldMid, field.TypeString)
	}
	if value, ok := cuuo.mutation.ManifestMid(); ok {
		_spec.SetField(carrierusps.FieldManifestMid, field.TypeString, value)
	}
	if cuuo.mutation.ManifestMidCleared() {
		_spec.ClearField(carrierusps.FieldManifestMid, field.TypeString)
	}
	if value, ok := cuuo.mutation.Crid(); ok {
		_spec.SetField(carrierusps.FieldCrid, field.TypeString, value)
	}
	if cuuo.mutation.CridCleared() {
		_spec.ClearField(carrierusps.FieldCrid, field.TypeString)
	}
	if value, ok := cuuo.mutation.EpsAccountNumber(); ok {
		_spec.SetField(carrierusps.FieldEpsAccountNumber, field.TypeString, value)
	}
	if cuuo.mutation.EpsAccountNumberCleared() {
		_spec.ClearField(carrierusps.FieldEpsAccountNumber, field.TypeString)
	}
	if cuuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierusps.TenantTable,
			Columns: []string{carrierusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierusps.TenantTable,
			Columns: []string{carrierusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuuo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierusps.CarrierTable,
			Columns: []string{carrierusps.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuuo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierusps.CarrierTable,
			Columns: []string{carrierusps.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierUSPS{config: cuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuuo.mutation.done = true
	return _node, nil
}
