// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Printer is the model entity for the Printer schema.
type Printer struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ID from desktop print client
	DeviceID pulid.ID `json:"device_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LabelZpl holds the value of the "label_zpl" field.
	LabelZpl bool `json:"label_zpl,omitempty"`
	// LabelPdf holds the value of the "label_pdf" field.
	LabelPdf bool `json:"label_pdf,omitempty"`
	// LabelPng holds the value of the "label_png" field.
	LabelPng bool `json:"label_png,omitempty"`
	// Document holds the value of the "document" field.
	Document bool `json:"document,omitempty"`
	// Rotate180 holds the value of the "rotate_180" field.
	Rotate180 bool `json:"rotate_180,omitempty"`
	// UseShell holds the value of the "use_shell" field.
	UseShell bool `json:"use_shell,omitempty"`
	// PrintSize holds the value of the "print_size" field.
	PrintSize printer.PrintSize `json:"print_size,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastPing holds the value of the "last_ping" field.
	LastPing time.Time `json:"last_ping,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrinterQuery when eager-loading is set.
	Edges               PrinterEdges `json:"edges"`
	workstation_printer *pulid.ID
	selectValues        sql.SelectValues
}

// PrinterEdges holds the relations/edges for other nodes in the graph.
type PrinterEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Workstation holds the value of the workstation edge.
	Workstation *Workstation `json:"workstation,omitempty"`
	// PrintJobs holds the value of the print_jobs edge.
	PrintJobs []*PrintJob `json:"print_jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedPrintJobs map[string][]*PrintJob
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrinterEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// WorkstationOrErr returns the Workstation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrinterEdges) WorkstationOrErr() (*Workstation, error) {
	if e.Workstation != nil {
		return e.Workstation, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workstation.Label}
	}
	return nil, &NotLoadedError{edge: "workstation"}
}

// PrintJobsOrErr returns the PrintJobs value or an error if the edge
// was not loaded in eager-loading.
func (e PrinterEdges) PrintJobsOrErr() ([]*PrintJob, error) {
	if e.loadedTypes[2] {
		return e.PrintJobs, nil
	}
	return nil, &NotLoadedError{edge: "print_jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Printer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case printer.FieldID, printer.FieldTenantID, printer.FieldDeviceID:
			values[i] = new(pulid.ID)
		case printer.FieldLabelZpl, printer.FieldLabelPdf, printer.FieldLabelPng, printer.FieldDocument, printer.FieldRotate180, printer.FieldUseShell:
			values[i] = new(sql.NullBool)
		case printer.FieldName, printer.FieldPrintSize:
			values[i] = new(sql.NullString)
		case printer.FieldCreatedAt, printer.FieldLastPing:
			values[i] = new(sql.NullTime)
		case printer.ForeignKeys[0]: // workstation_printer
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Printer fields.
func (pr *Printer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case printer.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case printer.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pr.TenantID = *value
			}
		case printer.FieldDeviceID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value != nil {
				pr.DeviceID = *value
			}
		case printer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case printer.FieldLabelZpl:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field label_zpl", values[i])
			} else if value.Valid {
				pr.LabelZpl = value.Bool
			}
		case printer.FieldLabelPdf:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field label_pdf", values[i])
			} else if value.Valid {
				pr.LabelPdf = value.Bool
			}
		case printer.FieldLabelPng:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field label_png", values[i])
			} else if value.Valid {
				pr.LabelPng = value.Bool
			}
		case printer.FieldDocument:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field document", values[i])
			} else if value.Valid {
				pr.Document = value.Bool
			}
		case printer.FieldRotate180:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rotate_180", values[i])
			} else if value.Valid {
				pr.Rotate180 = value.Bool
			}
		case printer.FieldUseShell:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_shell", values[i])
			} else if value.Valid {
				pr.UseShell = value.Bool
			}
		case printer.FieldPrintSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field print_size", values[i])
			} else if value.Valid {
				pr.PrintSize = printer.PrintSize(value.String)
			}
		case printer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case printer.FieldLastPing:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_ping", values[i])
			} else if value.Valid {
				pr.LastPing = value.Time
			}
		case printer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workstation_printer", values[i])
			} else if value.Valid {
				pr.workstation_printer = new(pulid.ID)
				*pr.workstation_printer = *value.S.(*pulid.ID)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Printer.
// This includes values selected through modifiers, order, etc.
func (pr *Printer) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Printer entity.
func (pr *Printer) QueryTenant() *TenantQuery {
	return NewPrinterClient(pr.config).QueryTenant(pr)
}

// QueryWorkstation queries the "workstation" edge of the Printer entity.
func (pr *Printer) QueryWorkstation() *WorkstationQuery {
	return NewPrinterClient(pr.config).QueryWorkstation(pr)
}

// QueryPrintJobs queries the "print_jobs" edge of the Printer entity.
func (pr *Printer) QueryPrintJobs() *PrintJobQuery {
	return NewPrinterClient(pr.config).QueryPrintJobs(pr)
}

// Update returns a builder for updating this Printer.
// Note that you need to call Printer.Unwrap() before calling this method if this Printer
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Printer) Update() *PrinterUpdateOne {
	return NewPrinterClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Printer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Printer) Unwrap() *Printer {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Printer is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Printer) String() string {
	var builder strings.Builder
	builder.WriteString("Printer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("label_zpl=")
	builder.WriteString(fmt.Sprintf("%v", pr.LabelZpl))
	builder.WriteString(", ")
	builder.WriteString("label_pdf=")
	builder.WriteString(fmt.Sprintf("%v", pr.LabelPdf))
	builder.WriteString(", ")
	builder.WriteString("label_png=")
	builder.WriteString(fmt.Sprintf("%v", pr.LabelPng))
	builder.WriteString(", ")
	builder.WriteString("document=")
	builder.WriteString(fmt.Sprintf("%v", pr.Document))
	builder.WriteString(", ")
	builder.WriteString("rotate_180=")
	builder.WriteString(fmt.Sprintf("%v", pr.Rotate180))
	builder.WriteString(", ")
	builder.WriteString("use_shell=")
	builder.WriteString(fmt.Sprintf("%v", pr.UseShell))
	builder.WriteString(", ")
	builder.WriteString("print_size=")
	builder.WriteString(fmt.Sprintf("%v", pr.PrintSize))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_ping=")
	builder.WriteString(pr.LastPing.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPrintJobs returns the PrintJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pr *Printer) NamedPrintJobs(name string) ([]*PrintJob, error) {
	if pr.Edges.namedPrintJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pr.Edges.namedPrintJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pr *Printer) appendNamedPrintJobs(name string, edges ...*PrintJob) {
	if pr.Edges.namedPrintJobs == nil {
		pr.Edges.namedPrintJobs = make(map[string][]*PrintJob)
	}
	if len(edges) == 0 {
		pr.Edges.namedPrintJobs[name] = []*PrintJob{}
	} else {
		pr.Edges.namedPrintJobs[name] = append(pr.Edges.namedPrintJobs[name], edges...)
	}
}

// Printers is a parsable slice of Printer.
type Printers []*Printer
