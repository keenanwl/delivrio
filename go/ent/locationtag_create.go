// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocationTagCreate is the builder for creating a LocationTag entity.
type LocationTagCreate struct {
	config
	mutation *LocationTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (ltc *LocationTagCreate) SetLabel(s string) *LocationTagCreate {
	ltc.mutation.SetLabel(s)
	return ltc
}

// SetInternalID sets the "internal_id" field.
func (ltc *LocationTagCreate) SetInternalID(s string) *LocationTagCreate {
	ltc.mutation.SetInternalID(s)
	return ltc
}

// SetID sets the "id" field.
func (ltc *LocationTagCreate) SetID(pu pulid.ID) *LocationTagCreate {
	ltc.mutation.SetID(pu)
	return ltc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ltc *LocationTagCreate) SetNillableID(pu *pulid.ID) *LocationTagCreate {
	if pu != nil {
		ltc.SetID(*pu)
	}
	return ltc
}

// AddLocationIDs adds the "location" edge to the Location entity by IDs.
func (ltc *LocationTagCreate) AddLocationIDs(ids ...pulid.ID) *LocationTagCreate {
	ltc.mutation.AddLocationIDs(ids...)
	return ltc
}

// AddLocation adds the "location" edges to the Location entity.
func (ltc *LocationTagCreate) AddLocation(l ...*Location) *LocationTagCreate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ltc.AddLocationIDs(ids...)
}

// Mutation returns the LocationTagMutation object of the builder.
func (ltc *LocationTagCreate) Mutation() *LocationTagMutation {
	return ltc.mutation
}

// Save creates the LocationTag in the database.
func (ltc *LocationTagCreate) Save(ctx context.Context) (*LocationTag, error) {
	if err := ltc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ltc.sqlSave, ltc.mutation, ltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ltc *LocationTagCreate) SaveX(ctx context.Context) *LocationTag {
	v, err := ltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltc *LocationTagCreate) Exec(ctx context.Context) error {
	_, err := ltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltc *LocationTagCreate) ExecX(ctx context.Context) {
	if err := ltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ltc *LocationTagCreate) defaults() error {
	if _, ok := ltc.mutation.ID(); !ok {
		if locationtag.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized locationtag.DefaultID (forgotten import ent/runtime?)")
		}
		v := locationtag.DefaultID()
		ltc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ltc *LocationTagCreate) check() error {
	if _, ok := ltc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "LocationTag.label"`)}
	}
	if _, ok := ltc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "LocationTag.internal_id"`)}
	}
	return nil
}

func (ltc *LocationTagCreate) sqlSave(ctx context.Context) (*LocationTag, error) {
	if err := ltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ltc.mutation.id = &_node.ID
	ltc.mutation.done = true
	return _node, nil
}

func (ltc *LocationTagCreate) createSpec() (*LocationTag, *sqlgraph.CreateSpec) {
	var (
		_node = &LocationTag{config: ltc.config}
		_spec = sqlgraph.NewCreateSpec(locationtag.Table, sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString))
	)
	_spec.OnConflict = ltc.conflict
	if id, ok := ltc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ltc.mutation.Label(); ok {
		_spec.SetField(locationtag.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := ltc.mutation.InternalID(); ok {
		_spec.SetField(locationtag.FieldInternalID, field.TypeString, value)
		_node.InternalID = value
	}
	if nodes := ltc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LocationTag.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationTagUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (ltc *LocationTagCreate) OnConflict(opts ...sql.ConflictOption) *LocationTagUpsertOne {
	ltc.conflict = opts
	return &LocationTagUpsertOne{
		create: ltc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LocationTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltc *LocationTagCreate) OnConflictColumns(columns ...string) *LocationTagUpsertOne {
	ltc.conflict = append(ltc.conflict, sql.ConflictColumns(columns...))
	return &LocationTagUpsertOne{
		create: ltc,
	}
}

type (
	// LocationTagUpsertOne is the builder for "upsert"-ing
	//  one LocationTag node.
	LocationTagUpsertOne struct {
		create *LocationTagCreate
	}

	// LocationTagUpsert is the "OnConflict" setter.
	LocationTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *LocationTagUpsert) SetLabel(v string) *LocationTagUpsert {
	u.Set(locationtag.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *LocationTagUpsert) UpdateLabel() *LocationTagUpsert {
	u.SetExcluded(locationtag.FieldLabel)
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *LocationTagUpsert) SetInternalID(v string) *LocationTagUpsert {
	u.Set(locationtag.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *LocationTagUpsert) UpdateInternalID() *LocationTagUpsert {
	u.SetExcluded(locationtag.FieldInternalID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LocationTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(locationtag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocationTagUpsertOne) UpdateNewValues() *LocationTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(locationtag.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LocationTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LocationTagUpsertOne) Ignore() *LocationTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationTagUpsertOne) DoNothing() *LocationTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationTagCreate.OnConflict
// documentation for more info.
func (u *LocationTagUpsertOne) Update(set func(*LocationTagUpsert)) *LocationTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *LocationTagUpsertOne) SetLabel(v string) *LocationTagUpsertOne {
	return u.Update(func(s *LocationTagUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *LocationTagUpsertOne) UpdateLabel() *LocationTagUpsertOne {
	return u.Update(func(s *LocationTagUpsert) {
		s.UpdateLabel()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *LocationTagUpsertOne) SetInternalID(v string) *LocationTagUpsertOne {
	return u.Update(func(s *LocationTagUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *LocationTagUpsertOne) UpdateInternalID() *LocationTagUpsertOne {
	return u.Update(func(s *LocationTagUpsert) {
		s.UpdateInternalID()
	})
}

// Exec executes the query.
func (u *LocationTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LocationTagUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LocationTagUpsertOne.ID is not supported by MySQL driver. Use LocationTagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LocationTagUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LocationTagCreateBulk is the builder for creating many LocationTag entities in bulk.
type LocationTagCreateBulk struct {
	config
	err      error
	builders []*LocationTagCreate
	conflict []sql.ConflictOption
}

// Save creates the LocationTag entities in the database.
func (ltcb *LocationTagCreateBulk) Save(ctx context.Context) ([]*LocationTag, error) {
	if ltcb.err != nil {
		return nil, ltcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ltcb.builders))
	nodes := make([]*LocationTag, len(ltcb.builders))
	mutators := make([]Mutator, len(ltcb.builders))
	for i := range ltcb.builders {
		func(i int, root context.Context) {
			builder := ltcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LocationTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ltcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ltcb *LocationTagCreateBulk) SaveX(ctx context.Context) []*LocationTag {
	v, err := ltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ltcb *LocationTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ltcb *LocationTagCreateBulk) ExecX(ctx context.Context) {
	if err := ltcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LocationTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LocationTagUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (ltcb *LocationTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *LocationTagUpsertBulk {
	ltcb.conflict = opts
	return &LocationTagUpsertBulk{
		create: ltcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LocationTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ltcb *LocationTagCreateBulk) OnConflictColumns(columns ...string) *LocationTagUpsertBulk {
	ltcb.conflict = append(ltcb.conflict, sql.ConflictColumns(columns...))
	return &LocationTagUpsertBulk{
		create: ltcb,
	}
}

// LocationTagUpsertBulk is the builder for "upsert"-ing
// a bulk of LocationTag nodes.
type LocationTagUpsertBulk struct {
	create *LocationTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LocationTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(locationtag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LocationTagUpsertBulk) UpdateNewValues() *LocationTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(locationtag.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LocationTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LocationTagUpsertBulk) Ignore() *LocationTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LocationTagUpsertBulk) DoNothing() *LocationTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LocationTagCreateBulk.OnConflict
// documentation for more info.
func (u *LocationTagUpsertBulk) Update(set func(*LocationTagUpsert)) *LocationTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LocationTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *LocationTagUpsertBulk) SetLabel(v string) *LocationTagUpsertBulk {
	return u.Update(func(s *LocationTagUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *LocationTagUpsertBulk) UpdateLabel() *LocationTagUpsertBulk {
	return u.Update(func(s *LocationTagUpsert) {
		s.UpdateLabel()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *LocationTagUpsertBulk) SetInternalID(v string) *LocationTagUpsertBulk {
	return u.Update(func(s *LocationTagUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *LocationTagUpsertBulk) UpdateInternalID() *LocationTagUpsertBulk {
	return u.Update(func(s *LocationTagUpsert) {
		s.UpdateInternalID()
	})
}

// Exec executes the query.
func (u *LocationTagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LocationTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LocationTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LocationTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
