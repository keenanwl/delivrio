// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleConstraintUpdate is the builder for updating DeliveryRuleConstraint entities.
type DeliveryRuleConstraintUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryRuleConstraintMutation
}

// Where appends a list predicates to the DeliveryRuleConstraintUpdate builder.
func (drcu *DeliveryRuleConstraintUpdate) Where(ps ...predicate.DeliveryRuleConstraint) *DeliveryRuleConstraintUpdate {
	drcu.mutation.Where(ps...)
	return drcu
}

// SetTenantID sets the "tenant_id" field.
func (drcu *DeliveryRuleConstraintUpdate) SetTenantID(pu pulid.ID) *DeliveryRuleConstraintUpdate {
	drcu.mutation.SetTenantID(pu)
	return drcu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (drcu *DeliveryRuleConstraintUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryRuleConstraintUpdate {
	if pu != nil {
		drcu.SetTenantID(*pu)
	}
	return drcu
}

// SetPropertyType sets the "property_type" field.
func (drcu *DeliveryRuleConstraintUpdate) SetPropertyType(dt deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpdate {
	drcu.mutation.SetPropertyType(dt)
	return drcu
}

// SetNillablePropertyType sets the "property_type" field if the given value is not nil.
func (drcu *DeliveryRuleConstraintUpdate) SetNillablePropertyType(dt *deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpdate {
	if dt != nil {
		drcu.SetPropertyType(*dt)
	}
	return drcu
}

// SetComparison sets the "comparison" field.
func (drcu *DeliveryRuleConstraintUpdate) SetComparison(d deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpdate {
	drcu.mutation.SetComparison(d)
	return drcu
}

// SetNillableComparison sets the "comparison" field if the given value is not nil.
func (drcu *DeliveryRuleConstraintUpdate) SetNillableComparison(d *deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpdate {
	if d != nil {
		drcu.SetComparison(*d)
	}
	return drcu
}

// SetSelectedValue sets the "selected_value" field.
func (drcu *DeliveryRuleConstraintUpdate) SetSelectedValue(frcsv *fieldjson.DeliveryRuleConstraintSelectedValue) *DeliveryRuleConstraintUpdate {
	drcu.mutation.SetSelectedValue(frcsv)
	return drcu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drcu *DeliveryRuleConstraintUpdate) SetTenant(t *Tenant) *DeliveryRuleConstraintUpdate {
	return drcu.SetTenantID(t.ID)
}

// SetDeliveryRuleConstraintGroupID sets the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity by ID.
func (drcu *DeliveryRuleConstraintUpdate) SetDeliveryRuleConstraintGroupID(id pulid.ID) *DeliveryRuleConstraintUpdate {
	drcu.mutation.SetDeliveryRuleConstraintGroupID(id)
	return drcu
}

// SetDeliveryRuleConstraintGroup sets the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity.
func (drcu *DeliveryRuleConstraintUpdate) SetDeliveryRuleConstraintGroup(d *DeliveryRuleConstraintGroup) *DeliveryRuleConstraintUpdate {
	return drcu.SetDeliveryRuleConstraintGroupID(d.ID)
}

// Mutation returns the DeliveryRuleConstraintMutation object of the builder.
func (drcu *DeliveryRuleConstraintUpdate) Mutation() *DeliveryRuleConstraintMutation {
	return drcu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (drcu *DeliveryRuleConstraintUpdate) ClearTenant() *DeliveryRuleConstraintUpdate {
	drcu.mutation.ClearTenant()
	return drcu
}

// ClearDeliveryRuleConstraintGroup clears the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity.
func (drcu *DeliveryRuleConstraintUpdate) ClearDeliveryRuleConstraintGroup() *DeliveryRuleConstraintUpdate {
	drcu.mutation.ClearDeliveryRuleConstraintGroup()
	return drcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (drcu *DeliveryRuleConstraintUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, drcu.sqlSave, drcu.mutation, drcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drcu *DeliveryRuleConstraintUpdate) SaveX(ctx context.Context) int {
	affected, err := drcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (drcu *DeliveryRuleConstraintUpdate) Exec(ctx context.Context) error {
	_, err := drcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcu *DeliveryRuleConstraintUpdate) ExecX(ctx context.Context) {
	if err := drcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drcu *DeliveryRuleConstraintUpdate) check() error {
	if v, ok := drcu.mutation.PropertyType(); ok {
		if err := deliveryruleconstraint.PropertyTypeValidator(v); err != nil {
			return &ValidationError{Name: "property_type", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraint.property_type": %w`, err)}
		}
	}
	if v, ok := drcu.mutation.Comparison(); ok {
		if err := deliveryruleconstraint.ComparisonValidator(v); err != nil {
			return &ValidationError{Name: "comparison", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraint.comparison": %w`, err)}
		}
	}
	if drcu.mutation.TenantCleared() && len(drcu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraint.tenant"`)
	}
	if drcu.mutation.DeliveryRuleConstraintGroupCleared() && len(drcu.mutation.DeliveryRuleConstraintGroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraint.delivery_rule_constraint_group"`)
	}
	return nil
}

func (drcu *DeliveryRuleConstraintUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := drcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryruleconstraint.Table, deliveryruleconstraint.Columns, sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString))
	if ps := drcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drcu.mutation.PropertyType(); ok {
		_spec.SetField(deliveryruleconstraint.FieldPropertyType, field.TypeEnum, value)
	}
	if value, ok := drcu.mutation.Comparison(); ok {
		_spec.SetField(deliveryruleconstraint.FieldComparison, field.TypeEnum, value)
	}
	if value, ok := drcu.mutation.SelectedValue(); ok {
		_spec.SetField(deliveryruleconstraint.FieldSelectedValue, field.TypeOther, value)
	}
	if drcu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraint.TenantTable,
			Columns: []string{deliveryruleconstraint.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraint.TenantTable,
			Columns: []string{deliveryruleconstraint.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if drcu.mutation.DeliveryRuleConstraintGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraint.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryruleconstraint.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcu.mutation.DeliveryRuleConstraintGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraint.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryruleconstraint.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, drcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryruleconstraint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	drcu.mutation.done = true
	return n, nil
}

// DeliveryRuleConstraintUpdateOne is the builder for updating a single DeliveryRuleConstraint entity.
type DeliveryRuleConstraintUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryRuleConstraintMutation
}

// SetTenantID sets the "tenant_id" field.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetTenantID(pu pulid.ID) *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.SetTenantID(pu)
	return drcuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryRuleConstraintUpdateOne {
	if pu != nil {
		drcuo.SetTenantID(*pu)
	}
	return drcuo
}

// SetPropertyType sets the "property_type" field.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetPropertyType(dt deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.SetPropertyType(dt)
	return drcuo
}

// SetNillablePropertyType sets the "property_type" field if the given value is not nil.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetNillablePropertyType(dt *deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpdateOne {
	if dt != nil {
		drcuo.SetPropertyType(*dt)
	}
	return drcuo
}

// SetComparison sets the "comparison" field.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetComparison(d deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.SetComparison(d)
	return drcuo
}

// SetNillableComparison sets the "comparison" field if the given value is not nil.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetNillableComparison(d *deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpdateOne {
	if d != nil {
		drcuo.SetComparison(*d)
	}
	return drcuo
}

// SetSelectedValue sets the "selected_value" field.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetSelectedValue(frcsv *fieldjson.DeliveryRuleConstraintSelectedValue) *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.SetSelectedValue(frcsv)
	return drcuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetTenant(t *Tenant) *DeliveryRuleConstraintUpdateOne {
	return drcuo.SetTenantID(t.ID)
}

// SetDeliveryRuleConstraintGroupID sets the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity by ID.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetDeliveryRuleConstraintGroupID(id pulid.ID) *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.SetDeliveryRuleConstraintGroupID(id)
	return drcuo
}

// SetDeliveryRuleConstraintGroup sets the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity.
func (drcuo *DeliveryRuleConstraintUpdateOne) SetDeliveryRuleConstraintGroup(d *DeliveryRuleConstraintGroup) *DeliveryRuleConstraintUpdateOne {
	return drcuo.SetDeliveryRuleConstraintGroupID(d.ID)
}

// Mutation returns the DeliveryRuleConstraintMutation object of the builder.
func (drcuo *DeliveryRuleConstraintUpdateOne) Mutation() *DeliveryRuleConstraintMutation {
	return drcuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (drcuo *DeliveryRuleConstraintUpdateOne) ClearTenant() *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.ClearTenant()
	return drcuo
}

// ClearDeliveryRuleConstraintGroup clears the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity.
func (drcuo *DeliveryRuleConstraintUpdateOne) ClearDeliveryRuleConstraintGroup() *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.ClearDeliveryRuleConstraintGroup()
	return drcuo
}

// Where appends a list predicates to the DeliveryRuleConstraintUpdate builder.
func (drcuo *DeliveryRuleConstraintUpdateOne) Where(ps ...predicate.DeliveryRuleConstraint) *DeliveryRuleConstraintUpdateOne {
	drcuo.mutation.Where(ps...)
	return drcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (drcuo *DeliveryRuleConstraintUpdateOne) Select(field string, fields ...string) *DeliveryRuleConstraintUpdateOne {
	drcuo.fields = append([]string{field}, fields...)
	return drcuo
}

// Save executes the query and returns the updated DeliveryRuleConstraint entity.
func (drcuo *DeliveryRuleConstraintUpdateOne) Save(ctx context.Context) (*DeliveryRuleConstraint, error) {
	return withHooks(ctx, drcuo.sqlSave, drcuo.mutation, drcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drcuo *DeliveryRuleConstraintUpdateOne) SaveX(ctx context.Context) *DeliveryRuleConstraint {
	node, err := drcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (drcuo *DeliveryRuleConstraintUpdateOne) Exec(ctx context.Context) error {
	_, err := drcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcuo *DeliveryRuleConstraintUpdateOne) ExecX(ctx context.Context) {
	if err := drcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drcuo *DeliveryRuleConstraintUpdateOne) check() error {
	if v, ok := drcuo.mutation.PropertyType(); ok {
		if err := deliveryruleconstraint.PropertyTypeValidator(v); err != nil {
			return &ValidationError{Name: "property_type", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraint.property_type": %w`, err)}
		}
	}
	if v, ok := drcuo.mutation.Comparison(); ok {
		if err := deliveryruleconstraint.ComparisonValidator(v); err != nil {
			return &ValidationError{Name: "comparison", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraint.comparison": %w`, err)}
		}
	}
	if drcuo.mutation.TenantCleared() && len(drcuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraint.tenant"`)
	}
	if drcuo.mutation.DeliveryRuleConstraintGroupCleared() && len(drcuo.mutation.DeliveryRuleConstraintGroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraint.delivery_rule_constraint_group"`)
	}
	return nil
}

func (drcuo *DeliveryRuleConstraintUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryRuleConstraint, err error) {
	if err := drcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryruleconstraint.Table, deliveryruleconstraint.Columns, sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString))
	id, ok := drcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryRuleConstraint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := drcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryruleconstraint.FieldID)
		for _, f := range fields {
			if !deliveryruleconstraint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryruleconstraint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := drcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drcuo.mutation.PropertyType(); ok {
		_spec.SetField(deliveryruleconstraint.FieldPropertyType, field.TypeEnum, value)
	}
	if value, ok := drcuo.mutation.Comparison(); ok {
		_spec.SetField(deliveryruleconstraint.FieldComparison, field.TypeEnum, value)
	}
	if value, ok := drcuo.mutation.SelectedValue(); ok {
		_spec.SetField(deliveryruleconstraint.FieldSelectedValue, field.TypeOther, value)
	}
	if drcuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraint.TenantTable,
			Columns: []string{deliveryruleconstraint.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraint.TenantTable,
			Columns: []string{deliveryruleconstraint.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if drcuo.mutation.DeliveryRuleConstraintGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraint.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryruleconstraint.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcuo.mutation.DeliveryRuleConstraintGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraint.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryruleconstraint.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryRuleConstraint{config: drcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, drcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryruleconstraint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	drcuo.mutation.done = true
	return _node, nil
}
