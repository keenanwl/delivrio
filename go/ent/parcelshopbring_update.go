// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopBringUpdate is the builder for updating ParcelShopBring entities.
type ParcelShopBringUpdate struct {
	config
	hooks    []Hook
	mutation *ParcelShopBringMutation
}

// Where appends a list predicates to the ParcelShopBringUpdate builder.
func (psbu *ParcelShopBringUpdate) Where(ps ...predicate.ParcelShopBring) *ParcelShopBringUpdate {
	psbu.mutation.Where(ps...)
	return psbu
}

// SetPointType sets the "point_type" field.
func (psbu *ParcelShopBringUpdate) SetPointType(pt parcelshopbring.PointType) *ParcelShopBringUpdate {
	psbu.mutation.SetPointType(pt)
	return psbu
}

// SetNillablePointType sets the "point_type" field if the given value is not nil.
func (psbu *ParcelShopBringUpdate) SetNillablePointType(pt *parcelshopbring.PointType) *ParcelShopBringUpdate {
	if pt != nil {
		psbu.SetPointType(*pt)
	}
	return psbu
}

// SetBringID sets the "bring_id" field.
func (psbu *ParcelShopBringUpdate) SetBringID(s string) *ParcelShopBringUpdate {
	psbu.mutation.SetBringID(s)
	return psbu
}

// SetNillableBringID sets the "bring_id" field if the given value is not nil.
func (psbu *ParcelShopBringUpdate) SetNillableBringID(s *string) *ParcelShopBringUpdate {
	if s != nil {
		psbu.SetBringID(*s)
	}
	return psbu
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psbu *ParcelShopBringUpdate) SetParcelShopID(id pulid.ID) *ParcelShopBringUpdate {
	psbu.mutation.SetParcelShopID(id)
	return psbu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psbu *ParcelShopBringUpdate) SetParcelShop(p *ParcelShop) *ParcelShopBringUpdate {
	return psbu.SetParcelShopID(p.ID)
}

// SetAddressDeliveryID sets the "address_delivery" edge to the AddressGlobal entity by ID.
func (psbu *ParcelShopBringUpdate) SetAddressDeliveryID(id pulid.ID) *ParcelShopBringUpdate {
	psbu.mutation.SetAddressDeliveryID(id)
	return psbu
}

// SetAddressDelivery sets the "address_delivery" edge to the AddressGlobal entity.
func (psbu *ParcelShopBringUpdate) SetAddressDelivery(a *AddressGlobal) *ParcelShopBringUpdate {
	return psbu.SetAddressDeliveryID(a.ID)
}

// Mutation returns the ParcelShopBringMutation object of the builder.
func (psbu *ParcelShopBringUpdate) Mutation() *ParcelShopBringMutation {
	return psbu.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (psbu *ParcelShopBringUpdate) ClearParcelShop() *ParcelShopBringUpdate {
	psbu.mutation.ClearParcelShop()
	return psbu
}

// ClearAddressDelivery clears the "address_delivery" edge to the AddressGlobal entity.
func (psbu *ParcelShopBringUpdate) ClearAddressDelivery() *ParcelShopBringUpdate {
	psbu.mutation.ClearAddressDelivery()
	return psbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psbu *ParcelShopBringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psbu.sqlSave, psbu.mutation, psbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psbu *ParcelShopBringUpdate) SaveX(ctx context.Context) int {
	affected, err := psbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psbu *ParcelShopBringUpdate) Exec(ctx context.Context) error {
	_, err := psbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psbu *ParcelShopBringUpdate) ExecX(ctx context.Context) {
	if err := psbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psbu *ParcelShopBringUpdate) check() error {
	if v, ok := psbu.mutation.PointType(); ok {
		if err := parcelshopbring.PointTypeValidator(v); err != nil {
			return &ValidationError{Name: "point_type", err: fmt.Errorf(`ent: validator failed for field "ParcelShopBring.point_type": %w`, err)}
		}
	}
	if psbu.mutation.ParcelShopCleared() && len(psbu.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopBring.parcel_shop"`)
	}
	if psbu.mutation.AddressDeliveryCleared() && len(psbu.mutation.AddressDeliveryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopBring.address_delivery"`)
	}
	return nil
}

func (psbu *ParcelShopBringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshopbring.Table, parcelshopbring.Columns, sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString))
	if ps := psbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psbu.mutation.PointType(); ok {
		_spec.SetField(parcelshopbring.FieldPointType, field.TypeEnum, value)
	}
	if value, ok := psbu.mutation.BringID(); ok {
		_spec.SetField(parcelshopbring.FieldBringID, field.TypeString, value)
	}
	if psbu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopbring.ParcelShopTable,
			Columns: []string{parcelshopbring.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psbu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopbring.ParcelShopTable,
			Columns: []string{parcelshopbring.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psbu.mutation.AddressDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshopbring.AddressDeliveryTable,
			Columns: []string{parcelshopbring.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psbu.mutation.AddressDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshopbring.AddressDeliveryTable,
			Columns: []string{parcelshopbring.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshopbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psbu.mutation.done = true
	return n, nil
}

// ParcelShopBringUpdateOne is the builder for updating a single ParcelShopBring entity.
type ParcelShopBringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParcelShopBringMutation
}

// SetPointType sets the "point_type" field.
func (psbuo *ParcelShopBringUpdateOne) SetPointType(pt parcelshopbring.PointType) *ParcelShopBringUpdateOne {
	psbuo.mutation.SetPointType(pt)
	return psbuo
}

// SetNillablePointType sets the "point_type" field if the given value is not nil.
func (psbuo *ParcelShopBringUpdateOne) SetNillablePointType(pt *parcelshopbring.PointType) *ParcelShopBringUpdateOne {
	if pt != nil {
		psbuo.SetPointType(*pt)
	}
	return psbuo
}

// SetBringID sets the "bring_id" field.
func (psbuo *ParcelShopBringUpdateOne) SetBringID(s string) *ParcelShopBringUpdateOne {
	psbuo.mutation.SetBringID(s)
	return psbuo
}

// SetNillableBringID sets the "bring_id" field if the given value is not nil.
func (psbuo *ParcelShopBringUpdateOne) SetNillableBringID(s *string) *ParcelShopBringUpdateOne {
	if s != nil {
		psbuo.SetBringID(*s)
	}
	return psbuo
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psbuo *ParcelShopBringUpdateOne) SetParcelShopID(id pulid.ID) *ParcelShopBringUpdateOne {
	psbuo.mutation.SetParcelShopID(id)
	return psbuo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psbuo *ParcelShopBringUpdateOne) SetParcelShop(p *ParcelShop) *ParcelShopBringUpdateOne {
	return psbuo.SetParcelShopID(p.ID)
}

// SetAddressDeliveryID sets the "address_delivery" edge to the AddressGlobal entity by ID.
func (psbuo *ParcelShopBringUpdateOne) SetAddressDeliveryID(id pulid.ID) *ParcelShopBringUpdateOne {
	psbuo.mutation.SetAddressDeliveryID(id)
	return psbuo
}

// SetAddressDelivery sets the "address_delivery" edge to the AddressGlobal entity.
func (psbuo *ParcelShopBringUpdateOne) SetAddressDelivery(a *AddressGlobal) *ParcelShopBringUpdateOne {
	return psbuo.SetAddressDeliveryID(a.ID)
}

// Mutation returns the ParcelShopBringMutation object of the builder.
func (psbuo *ParcelShopBringUpdateOne) Mutation() *ParcelShopBringMutation {
	return psbuo.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (psbuo *ParcelShopBringUpdateOne) ClearParcelShop() *ParcelShopBringUpdateOne {
	psbuo.mutation.ClearParcelShop()
	return psbuo
}

// ClearAddressDelivery clears the "address_delivery" edge to the AddressGlobal entity.
func (psbuo *ParcelShopBringUpdateOne) ClearAddressDelivery() *ParcelShopBringUpdateOne {
	psbuo.mutation.ClearAddressDelivery()
	return psbuo
}

// Where appends a list predicates to the ParcelShopBringUpdate builder.
func (psbuo *ParcelShopBringUpdateOne) Where(ps ...predicate.ParcelShopBring) *ParcelShopBringUpdateOne {
	psbuo.mutation.Where(ps...)
	return psbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psbuo *ParcelShopBringUpdateOne) Select(field string, fields ...string) *ParcelShopBringUpdateOne {
	psbuo.fields = append([]string{field}, fields...)
	return psbuo
}

// Save executes the query and returns the updated ParcelShopBring entity.
func (psbuo *ParcelShopBringUpdateOne) Save(ctx context.Context) (*ParcelShopBring, error) {
	return withHooks(ctx, psbuo.sqlSave, psbuo.mutation, psbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psbuo *ParcelShopBringUpdateOne) SaveX(ctx context.Context) *ParcelShopBring {
	node, err := psbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psbuo *ParcelShopBringUpdateOne) Exec(ctx context.Context) error {
	_, err := psbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psbuo *ParcelShopBringUpdateOne) ExecX(ctx context.Context) {
	if err := psbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psbuo *ParcelShopBringUpdateOne) check() error {
	if v, ok := psbuo.mutation.PointType(); ok {
		if err := parcelshopbring.PointTypeValidator(v); err != nil {
			return &ValidationError{Name: "point_type", err: fmt.Errorf(`ent: validator failed for field "ParcelShopBring.point_type": %w`, err)}
		}
	}
	if psbuo.mutation.ParcelShopCleared() && len(psbuo.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopBring.parcel_shop"`)
	}
	if psbuo.mutation.AddressDeliveryCleared() && len(psbuo.mutation.AddressDeliveryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopBring.address_delivery"`)
	}
	return nil
}

func (psbuo *ParcelShopBringUpdateOne) sqlSave(ctx context.Context) (_node *ParcelShopBring, err error) {
	if err := psbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshopbring.Table, parcelshopbring.Columns, sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString))
	id, ok := psbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ParcelShopBring.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshopbring.FieldID)
		for _, f := range fields {
			if !parcelshopbring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parcelshopbring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psbuo.mutation.PointType(); ok {
		_spec.SetField(parcelshopbring.FieldPointType, field.TypeEnum, value)
	}
	if value, ok := psbuo.mutation.BringID(); ok {
		_spec.SetField(parcelshopbring.FieldBringID, field.TypeString, value)
	}
	if psbuo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopbring.ParcelShopTable,
			Columns: []string{parcelshopbring.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psbuo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopbring.ParcelShopTable,
			Columns: []string{parcelshopbring.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psbuo.mutation.AddressDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshopbring.AddressDeliveryTable,
			Columns: []string{parcelshopbring.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psbuo.mutation.AddressDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshopbring.AddressDeliveryTable,
			Columns: []string{parcelshopbring.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ParcelShopBring{config: psbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshopbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psbuo.mutation.done = true
	return _node, nil
}
