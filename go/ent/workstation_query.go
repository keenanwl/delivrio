// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkstationQuery is the builder for querying Workstation entities.
type WorkstationQuery struct {
	config
	ctx              *QueryContext
	order            []workstation.OrderOption
	inters           []Interceptor
	predicates       []predicate.Workstation
	withTenant       *TenantQuery
	withPrinter      *PrinterQuery
	withUser         *UserQuery
	withSelectedUser *UserQuery
	withFKs          bool
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*Workstation) error
	withNamedPrinter map[string]*PrinterQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkstationQuery builder.
func (wq *WorkstationQuery) Where(ps ...predicate.Workstation) *WorkstationQuery {
	wq.predicates = append(wq.predicates, ps...)
	return wq
}

// Limit the number of records to be returned by this query.
func (wq *WorkstationQuery) Limit(limit int) *WorkstationQuery {
	wq.ctx.Limit = &limit
	return wq
}

// Offset to start from.
func (wq *WorkstationQuery) Offset(offset int) *WorkstationQuery {
	wq.ctx.Offset = &offset
	return wq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wq *WorkstationQuery) Unique(unique bool) *WorkstationQuery {
	wq.ctx.Unique = &unique
	return wq
}

// Order specifies how the records should be ordered.
func (wq *WorkstationQuery) Order(o ...workstation.OrderOption) *WorkstationQuery {
	wq.order = append(wq.order, o...)
	return wq
}

// QueryTenant chains the current query on the "tenant" edge.
func (wq *WorkstationQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workstation.TenantTable, workstation.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrinter chains the current query on the "printer" edge.
func (wq *WorkstationQuery) QueryPrinter() *PrinterQuery {
	query := (&PrinterClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, selector),
			sqlgraph.To(printer.Table, printer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workstation.PrinterTable, workstation.PrinterColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (wq *WorkstationQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workstation.UserTable, workstation.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySelectedUser chains the current query on the "selected_user" edge.
func (wq *WorkstationQuery) QuerySelectedUser() *UserQuery {
	query := (&UserClient{config: wq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workstation.SelectedUserTable, workstation.SelectedUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(wq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Workstation entity from the query.
// Returns a *NotFoundError when no Workstation was found.
func (wq *WorkstationQuery) First(ctx context.Context) (*Workstation, error) {
	nodes, err := wq.Limit(1).All(setContextOp(ctx, wq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workstation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wq *WorkstationQuery) FirstX(ctx context.Context) *Workstation {
	node, err := wq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Workstation ID from the query.
// Returns a *NotFoundError when no Workstation ID was found.
func (wq *WorkstationQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = wq.Limit(1).IDs(setContextOp(ctx, wq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workstation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wq *WorkstationQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := wq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Workstation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Workstation entity is found.
// Returns a *NotFoundError when no Workstation entities are found.
func (wq *WorkstationQuery) Only(ctx context.Context) (*Workstation, error) {
	nodes, err := wq.Limit(2).All(setContextOp(ctx, wq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workstation.Label}
	default:
		return nil, &NotSingularError{workstation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wq *WorkstationQuery) OnlyX(ctx context.Context) *Workstation {
	node, err := wq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Workstation ID in the query.
// Returns a *NotSingularError when more than one Workstation ID is found.
// Returns a *NotFoundError when no entities are found.
func (wq *WorkstationQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = wq.Limit(2).IDs(setContextOp(ctx, wq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workstation.Label}
	default:
		err = &NotSingularError{workstation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wq *WorkstationQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := wq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Workstations.
func (wq *WorkstationQuery) All(ctx context.Context) ([]*Workstation, error) {
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryAll)
	if err := wq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Workstation, *WorkstationQuery]()
	return withInterceptors[[]*Workstation](ctx, wq, qr, wq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wq *WorkstationQuery) AllX(ctx context.Context) []*Workstation {
	nodes, err := wq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Workstation IDs.
func (wq *WorkstationQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if wq.ctx.Unique == nil && wq.path != nil {
		wq.Unique(true)
	}
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryIDs)
	if err = wq.Select(workstation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wq *WorkstationQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := wq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wq *WorkstationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryCount)
	if err := wq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wq, querierCount[*WorkstationQuery](), wq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wq *WorkstationQuery) CountX(ctx context.Context) int {
	count, err := wq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wq *WorkstationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wq.ctx, ent.OpQueryExist)
	switch _, err := wq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wq *WorkstationQuery) ExistX(ctx context.Context) bool {
	exist, err := wq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkstationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wq *WorkstationQuery) Clone() *WorkstationQuery {
	if wq == nil {
		return nil
	}
	return &WorkstationQuery{
		config:           wq.config,
		ctx:              wq.ctx.Clone(),
		order:            append([]workstation.OrderOption{}, wq.order...),
		inters:           append([]Interceptor{}, wq.inters...),
		predicates:       append([]predicate.Workstation{}, wq.predicates...),
		withTenant:       wq.withTenant.Clone(),
		withPrinter:      wq.withPrinter.Clone(),
		withUser:         wq.withUser.Clone(),
		withSelectedUser: wq.withSelectedUser.Clone(),
		// clone intermediate query.
		sql:  wq.sql.Clone(),
		path: wq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkstationQuery) WithTenant(opts ...func(*TenantQuery)) *WorkstationQuery {
	query := (&TenantClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withTenant = query
	return wq
}

// WithPrinter tells the query-builder to eager-load the nodes that are connected to
// the "printer" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkstationQuery) WithPrinter(opts ...func(*PrinterQuery)) *WorkstationQuery {
	query := (&PrinterClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withPrinter = query
	return wq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkstationQuery) WithUser(opts ...func(*UserQuery)) *WorkstationQuery {
	query := (&UserClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withUser = query
	return wq
}

// WithSelectedUser tells the query-builder to eager-load the nodes that are connected to
// the "selected_user" edge. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkstationQuery) WithSelectedUser(opts ...func(*UserQuery)) *WorkstationQuery {
	query := (&UserClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wq.withSelectedUser = query
	return wq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Workstation.Query().
//		GroupBy(workstation.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wq *WorkstationQuery) GroupBy(field string, fields ...string) *WorkstationGroupBy {
	wq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkstationGroupBy{build: wq}
	grbuild.flds = &wq.ctx.Fields
	grbuild.label = workstation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Workstation.Query().
//		Select(workstation.FieldTenantID).
//		Scan(ctx, &v)
func (wq *WorkstationQuery) Select(fields ...string) *WorkstationSelect {
	wq.ctx.Fields = append(wq.ctx.Fields, fields...)
	sbuild := &WorkstationSelect{WorkstationQuery: wq}
	sbuild.label = workstation.Label
	sbuild.flds, sbuild.scan = &wq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkstationSelect configured with the given aggregations.
func (wq *WorkstationQuery) Aggregate(fns ...AggregateFunc) *WorkstationSelect {
	return wq.Select().Aggregate(fns...)
}

func (wq *WorkstationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wq); err != nil {
				return err
			}
		}
	}
	for _, f := range wq.ctx.Fields {
		if !workstation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wq.path != nil {
		prev, err := wq.path(ctx)
		if err != nil {
			return err
		}
		wq.sql = prev
	}
	if workstation.Policy == nil {
		return errors.New("ent: uninitialized workstation.Policy (forgotten import ent/runtime?)")
	}
	if err := workstation.Policy.EvalQuery(ctx, wq); err != nil {
		return err
	}
	return nil
}

func (wq *WorkstationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Workstation, error) {
	var (
		nodes       = []*Workstation{}
		withFKs     = wq.withFKs
		_spec       = wq.querySpec()
		loadedTypes = [4]bool{
			wq.withTenant != nil,
			wq.withPrinter != nil,
			wq.withUser != nil,
			wq.withSelectedUser != nil,
		}
	)
	if wq.withUser != nil || wq.withSelectedUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workstation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Workstation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Workstation{config: wq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wq.modifiers) > 0 {
		_spec.Modifiers = wq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wq.withTenant; query != nil {
		if err := wq.loadTenant(ctx, query, nodes, nil,
			func(n *Workstation, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := wq.withPrinter; query != nil {
		if err := wq.loadPrinter(ctx, query, nodes,
			func(n *Workstation) { n.Edges.Printer = []*Printer{} },
			func(n *Workstation, e *Printer) { n.Edges.Printer = append(n.Edges.Printer, e) }); err != nil {
			return nil, err
		}
	}
	if query := wq.withUser; query != nil {
		if err := wq.loadUser(ctx, query, nodes, nil,
			func(n *Workstation, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := wq.withSelectedUser; query != nil {
		if err := wq.loadSelectedUser(ctx, query, nodes, nil,
			func(n *Workstation, e *User) { n.Edges.SelectedUser = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range wq.withNamedPrinter {
		if err := wq.loadPrinter(ctx, query, nodes,
			func(n *Workstation) { n.appendNamedPrinter(name) },
			func(n *Workstation, e *Printer) { n.appendNamedPrinter(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range wq.loadTotal {
		if err := wq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wq *WorkstationQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Workstation, init func(*Workstation), assign func(*Workstation, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Workstation)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wq *WorkstationQuery) loadPrinter(ctx context.Context, query *PrinterQuery, nodes []*Workstation, init func(*Workstation), assign func(*Workstation, *Printer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Workstation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Printer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workstation.PrinterColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workstation_printer
		if fk == nil {
			return fmt.Errorf(`foreign-key "workstation_printer" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workstation_printer" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (wq *WorkstationQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Workstation, init func(*Workstation), assign func(*Workstation, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Workstation)
	for i := range nodes {
		if nodes[i].workstation_user == nil {
			continue
		}
		fk := *nodes[i].workstation_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workstation_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wq *WorkstationQuery) loadSelectedUser(ctx context.Context, query *UserQuery, nodes []*Workstation, init func(*Workstation), assign func(*Workstation, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Workstation)
	for i := range nodes {
		if nodes[i].user_selected_workstation == nil {
			continue
		}
		fk := *nodes[i].user_selected_workstation
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_selected_workstation" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wq *WorkstationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wq.querySpec()
	if len(wq.modifiers) > 0 {
		_spec.Modifiers = wq.modifiers
	}
	_spec.Node.Columns = wq.ctx.Fields
	if len(wq.ctx.Fields) > 0 {
		_spec.Unique = wq.ctx.Unique != nil && *wq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wq.driver, _spec)
}

func (wq *WorkstationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workstation.Table, workstation.Columns, sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString))
	_spec.From = wq.sql
	if unique := wq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wq.path != nil {
		_spec.Unique = true
	}
	if fields := wq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workstation.FieldID)
		for i := range fields {
			if fields[i] != workstation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wq.withTenant != nil {
			_spec.Node.AddColumnOnce(workstation.FieldTenantID)
		}
	}
	if ps := wq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wq *WorkstationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wq.driver.Dialect())
	t1 := builder.Table(workstation.Table)
	columns := wq.ctx.Fields
	if len(columns) == 0 {
		columns = workstation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wq.sql != nil {
		selector = wq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wq.ctx.Unique != nil && *wq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wq.predicates {
		p(selector)
	}
	for _, p := range wq.order {
		p(selector)
	}
	if offset := wq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPrinter tells the query-builder to eager-load the nodes that are connected to the "printer"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (wq *WorkstationQuery) WithNamedPrinter(name string, opts ...func(*PrinterQuery)) *WorkstationQuery {
	query := (&PrinterClient{config: wq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if wq.withNamedPrinter == nil {
		wq.withNamedPrinter = make(map[string]*PrinterQuery)
	}
	wq.withNamedPrinter[name] = query
	return wq
}

// WorkstationGroupBy is the group-by builder for Workstation entities.
type WorkstationGroupBy struct {
	selector
	build *WorkstationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wgb *WorkstationGroupBy) Aggregate(fns ...AggregateFunc) *WorkstationGroupBy {
	wgb.fns = append(wgb.fns, fns...)
	return wgb
}

// Scan applies the selector query and scans the result into the given value.
func (wgb *WorkstationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wgb.build.ctx, ent.OpQueryGroupBy)
	if err := wgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkstationQuery, *WorkstationGroupBy](ctx, wgb.build, wgb, wgb.build.inters, v)
}

func (wgb *WorkstationGroupBy) sqlScan(ctx context.Context, root *WorkstationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wgb.fns))
	for _, fn := range wgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wgb.flds)+len(wgb.fns))
		for _, f := range *wgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkstationSelect is the builder for selecting fields of Workstation entities.
type WorkstationSelect struct {
	*WorkstationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ws *WorkstationSelect) Aggregate(fns ...AggregateFunc) *WorkstationSelect {
	ws.fns = append(ws.fns, fns...)
	return ws
}

// Scan applies the selector query and scans the result into the given value.
func (ws *WorkstationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ws.ctx, ent.OpQuerySelect)
	if err := ws.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkstationQuery, *WorkstationSelect](ctx, ws.WorkstationQuery, ws, ws.inters, v)
}

func (ws *WorkstationSelect) sqlScan(ctx context.Context, root *WorkstationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ws.fns))
	for _, fn := range ws.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ws.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ws.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
