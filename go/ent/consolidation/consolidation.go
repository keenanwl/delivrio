// Code generated by ent, DO NOT EDIT.

package consolidation

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the consolidation type in the database.
	Label = "consolidation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPublicID holds the string denoting the public_id field in the database.
	FieldPublicID = "public_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePallets holds the string denoting the pallets edge name in mutations.
	EdgePallets = "pallets"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeRecipient holds the string denoting the recipient edge name in mutations.
	EdgeRecipient = "recipient"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeShipment holds the string denoting the shipment edge name in mutations.
	EdgeShipment = "shipment"
	// EdgeCancelledShipments holds the string denoting the cancelled_shipments edge name in mutations.
	EdgeCancelledShipments = "cancelled_shipments"
	// Table holds the table name of the consolidation in the database.
	Table = "consolidations"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "consolidations"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PalletsTable is the table that holds the pallets relation/edge.
	PalletsTable = "pallets"
	// PalletsInverseTable is the table name for the Pallet entity.
	// It exists in this package in order to avoid circular dependency with the "pallet" package.
	PalletsInverseTable = "pallets"
	// PalletsColumn is the table column denoting the pallets relation/edge.
	PalletsColumn = "consolidation_pallets"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "consolidation_orders"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "consolidations"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "consolidation_delivery_option"
	// RecipientTable is the table that holds the recipient relation/edge.
	RecipientTable = "addresses"
	// RecipientInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	RecipientInverseTable = "addresses"
	// RecipientColumn is the table column denoting the recipient relation/edge.
	RecipientColumn = "consolidation_recipient"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "addresses"
	// SenderInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	SenderInverseTable = "addresses"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "consolidation_sender"
	// ShipmentTable is the table that holds the shipment relation/edge.
	ShipmentTable = "consolidations"
	// ShipmentInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	ShipmentInverseTable = "shipments"
	// ShipmentColumn is the table column denoting the shipment relation/edge.
	ShipmentColumn = "shipment_consolidation"
	// CancelledShipmentsTable is the table that holds the cancelled_shipments relation/edge. The primary key declared below.
	CancelledShipmentsTable = "shipment_old_consolidation"
	// CancelledShipmentsInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	CancelledShipmentsInverseTable = "shipments"
)

// Columns holds all SQL columns for consolidation fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldPublicID,
	FieldDescription,
	FieldStatus,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "consolidations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"consolidation_delivery_option",
	"shipment_consolidation",
}

var (
	// CancelledShipmentsPrimaryKey and CancelledShipmentsColumn2 are the table columns denoting the
	// primary key for the cancelled_shipments relation (M2M).
	CancelledShipmentsPrimaryKey = []string{"shipment_id", "consolidation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "Pending"
	StatusPrebooked Status = "Prebooked"
	StatusBooked    Status = "Booked"
	StatusCancelled Status = "Cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusPrebooked, StatusBooked, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("consolidation: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Consolidation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPublicID orders the results by the public_id field.
func ByPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPalletsCount orders the results by pallets count.
func ByPalletsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPalletsStep(), opts...)
	}
}

// ByPallets orders the results by pallets terms.
func ByPallets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPalletsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionField orders the results by delivery_option field.
func ByDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecipientField orders the results by recipient field.
func ByRecipientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipientStep(), sql.OrderByField(field, opts...))
	}
}

// BySenderField orders the results by sender field.
func BySenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentField orders the results by shipment field.
func ByShipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByCancelledShipmentsCount orders the results by cancelled_shipments count.
func ByCancelledShipmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCancelledShipmentsStep(), opts...)
	}
}

// ByCancelledShipments orders the results by cancelled_shipments terms.
func ByCancelledShipments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCancelledShipmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPalletsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PalletsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PalletsTable, PalletsColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
func newRecipientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RecipientTable, RecipientColumn),
	)
}
func newSenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SenderTable, SenderColumn),
	)
}
func newShipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ShipmentTable, ShipmentColumn),
	)
}
func newCancelledShipmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CancelledShipmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CancelledShipmentsTable, CancelledShipmentsPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
