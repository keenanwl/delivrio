// Code generated by ent, DO NOT EDIT.

package carrieradditionalservicedsv

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrieradditionalservicedsv type in the database.
	Label = "carrier_additional_service_dsv"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldAPICode holds the string denoting the api_code field in the database.
	FieldAPICode = "api_code"
	// EdgeCarrierServiceDSV holds the string denoting the carrier_service_dsv edge name in mutations.
	EdgeCarrierServiceDSV = "carrier_service_dsv"
	// EdgeDeliveryOptionDSV holds the string denoting the delivery_option_dsv edge name in mutations.
	EdgeDeliveryOptionDSV = "delivery_option_dsv"
	// Table holds the table name of the carrieradditionalservicedsv in the database.
	Table = "carrier_additional_service_ds_vs"
	// CarrierServiceDSVTable is the table that holds the carrier_service_dsv relation/edge. The primary key declared below.
	CarrierServiceDSVTable = "carrier_service_dsv_carrier_additional_service_dsv"
	// CarrierServiceDSVInverseTable is the table name for the CarrierServiceDSV entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicedsv" package.
	CarrierServiceDSVInverseTable = "carrier_service_ds_vs"
	// DeliveryOptionDSVTable is the table that holds the delivery_option_dsv relation/edge. The primary key declared below.
	DeliveryOptionDSVTable = "delivery_option_dsv_carrier_additional_service_dsv"
	// DeliveryOptionDSVInverseTable is the table name for the DeliveryOptionDSV entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiondsv" package.
	DeliveryOptionDSVInverseTable = "delivery_option_ds_vs"
)

// Columns holds all SQL columns for carrieradditionalservicedsv fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldAPICode,
}

var (
	// CarrierServiceDSVPrimaryKey and CarrierServiceDSVColumn2 are the table columns denoting the
	// primary key for the carrier_service_dsv relation (M2M).
	CarrierServiceDSVPrimaryKey = []string{"carrier_service_dsv_id", "carrier_additional_service_dsv_id"}
	// DeliveryOptionDSVPrimaryKey and DeliveryOptionDSVColumn2 are the table columns denoting the
	// primary key for the delivery_option_dsv relation (M2M).
	DeliveryOptionDSVPrimaryKey = []string{"delivery_option_dsv_id", "carrier_additional_service_dsv_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierAdditionalServiceDSV queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByAPICode orders the results by the api_code field.
func ByAPICode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPICode, opts...).ToFunc()
}

// ByCarrierServiceDSVCount orders the results by carrier_service_dsv count.
func ByCarrierServiceDSVCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierServiceDSVStep(), opts...)
	}
}

// ByCarrierServiceDSV orders the results by carrier_service_dsv terms.
func ByCarrierServiceDSV(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceDSVStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionDSVCount orders the results by delivery_option_dsv count.
func ByDeliveryOptionDSVCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionDSVStep(), opts...)
	}
}

// ByDeliveryOptionDSV orders the results by delivery_option_dsv terms.
func ByDeliveryOptionDSV(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionDSVStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceDSVStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceDSVInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierServiceDSVTable, CarrierServiceDSVPrimaryKey...),
	)
}
func newDeliveryOptionDSVStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionDSVInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionDSVTable, DeliveryOptionDSVPrimaryKey...),
	)
}
