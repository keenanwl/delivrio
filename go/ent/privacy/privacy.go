// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"delivrio.io/go/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The APITokenQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type APITokenQueryRuleFunc func(context.Context, *ent.APITokenQuery) error

// EvalQuery return f(ctx, q).
func (f APITokenQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.APITokenQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.APITokenQuery", q)
}

// The APITokenMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type APITokenMutationRuleFunc func(context.Context, *ent.APITokenMutation) error

// EvalMutation calls f(ctx, m).
func (f APITokenMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.APITokenMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.APITokenMutation", m)
}

// The AccessRightQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccessRightQueryRuleFunc func(context.Context, *ent.AccessRightQuery) error

// EvalQuery return f(ctx, q).
func (f AccessRightQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccessRightQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccessRightQuery", q)
}

// The AccessRightMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccessRightMutationRuleFunc func(context.Context, *ent.AccessRightMutation) error

// EvalMutation calls f(ctx, m).
func (f AccessRightMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccessRightMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccessRightMutation", m)
}

// The AddressQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AddressQueryRuleFunc func(context.Context, *ent.AddressQuery) error

// EvalQuery return f(ctx, q).
func (f AddressQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AddressQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AddressQuery", q)
}

// The AddressMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AddressMutationRuleFunc func(context.Context, *ent.AddressMutation) error

// EvalMutation calls f(ctx, m).
func (f AddressMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AddressMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AddressMutation", m)
}

// The AddressGlobalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AddressGlobalQueryRuleFunc func(context.Context, *ent.AddressGlobalQuery) error

// EvalQuery return f(ctx, q).
func (f AddressGlobalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AddressGlobalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AddressGlobalQuery", q)
}

// The AddressGlobalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AddressGlobalMutationRuleFunc func(context.Context, *ent.AddressGlobalMutation) error

// EvalMutation calls f(ctx, m).
func (f AddressGlobalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AddressGlobalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AddressGlobalMutation", m)
}

// The BusinessHoursPeriodQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BusinessHoursPeriodQueryRuleFunc func(context.Context, *ent.BusinessHoursPeriodQuery) error

// EvalQuery return f(ctx, q).
func (f BusinessHoursPeriodQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BusinessHoursPeriodQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BusinessHoursPeriodQuery", q)
}

// The BusinessHoursPeriodMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BusinessHoursPeriodMutationRuleFunc func(context.Context, *ent.BusinessHoursPeriodMutation) error

// EvalMutation calls f(ctx, m).
func (f BusinessHoursPeriodMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BusinessHoursPeriodMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BusinessHoursPeriodMutation", m)
}

// The CarrierQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierQueryRuleFunc func(context.Context, *ent.CarrierQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierQuery", q)
}

// The CarrierMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierMutationRuleFunc func(context.Context, *ent.CarrierMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierMutation", m)
}

// The CarrierAdditionalServiceBringQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceBringQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceBringQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceBringQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceBringQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceBringQuery", q)
}

// The CarrierAdditionalServiceBringMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceBringMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceBringMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceBringMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceBringMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceBringMutation", m)
}

// The CarrierAdditionalServiceDAOQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceDAOQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceDAOQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceDAOQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceDAOQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceDAOQuery", q)
}

// The CarrierAdditionalServiceDAOMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceDAOMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceDAOMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceDAOMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceDAOMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceDAOMutation", m)
}

// The CarrierAdditionalServiceDFQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceDFQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceDFQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceDFQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceDFQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceDFQuery", q)
}

// The CarrierAdditionalServiceDFMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceDFMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceDFMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceDFMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceDFMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceDFMutation", m)
}

// The CarrierAdditionalServiceDSVQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceDSVQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceDSVQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceDSVQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceDSVQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceDSVQuery", q)
}

// The CarrierAdditionalServiceDSVMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceDSVMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceDSVMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceDSVMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceDSVMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceDSVMutation", m)
}

// The CarrierAdditionalServiceEasyPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceEasyPostQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceEasyPostQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceEasyPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceEasyPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceEasyPostQuery", q)
}

// The CarrierAdditionalServiceEasyPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceEasyPostMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceEasyPostMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceEasyPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceEasyPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceEasyPostMutation", m)
}

// The CarrierAdditionalServiceGLSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceGLSQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceGLSQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceGLSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceGLSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceGLSQuery", q)
}

// The CarrierAdditionalServiceGLSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceGLSMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceGLSMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceGLSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceGLSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceGLSMutation", m)
}

// The CarrierAdditionalServicePostNordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServicePostNordQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServicePostNordQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServicePostNordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServicePostNordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServicePostNordQuery", q)
}

// The CarrierAdditionalServicePostNordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServicePostNordMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServicePostNordMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServicePostNordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServicePostNordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServicePostNordMutation", m)
}

// The CarrierAdditionalServiceUSPSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierAdditionalServiceUSPSQueryRuleFunc func(context.Context, *ent.CarrierAdditionalServiceUSPSQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierAdditionalServiceUSPSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceUSPSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierAdditionalServiceUSPSQuery", q)
}

// The CarrierAdditionalServiceUSPSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierAdditionalServiceUSPSMutationRuleFunc func(context.Context, *ent.CarrierAdditionalServiceUSPSMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierAdditionalServiceUSPSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierAdditionalServiceUSPSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierAdditionalServiceUSPSMutation", m)
}

// The CarrierBrandQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierBrandQueryRuleFunc func(context.Context, *ent.CarrierBrandQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierBrandQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierBrandQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierBrandQuery", q)
}

// The CarrierBrandMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierBrandMutationRuleFunc func(context.Context, *ent.CarrierBrandMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierBrandMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierBrandMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierBrandMutation", m)
}

// The CarrierBringQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierBringQueryRuleFunc func(context.Context, *ent.CarrierBringQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierBringQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierBringQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierBringQuery", q)
}

// The CarrierBringMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierBringMutationRuleFunc func(context.Context, *ent.CarrierBringMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierBringMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierBringMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierBringMutation", m)
}

// The CarrierDAOQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierDAOQueryRuleFunc func(context.Context, *ent.CarrierDAOQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierDAOQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierDAOQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierDAOQuery", q)
}

// The CarrierDAOMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierDAOMutationRuleFunc func(context.Context, *ent.CarrierDAOMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierDAOMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierDAOMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierDAOMutation", m)
}

// The CarrierDFQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierDFQueryRuleFunc func(context.Context, *ent.CarrierDFQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierDFQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierDFQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierDFQuery", q)
}

// The CarrierDFMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierDFMutationRuleFunc func(context.Context, *ent.CarrierDFMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierDFMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierDFMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierDFMutation", m)
}

// The CarrierDSVQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierDSVQueryRuleFunc func(context.Context, *ent.CarrierDSVQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierDSVQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierDSVQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierDSVQuery", q)
}

// The CarrierDSVMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierDSVMutationRuleFunc func(context.Context, *ent.CarrierDSVMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierDSVMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierDSVMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierDSVMutation", m)
}

// The CarrierEasyPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierEasyPostQueryRuleFunc func(context.Context, *ent.CarrierEasyPostQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierEasyPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierEasyPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierEasyPostQuery", q)
}

// The CarrierEasyPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierEasyPostMutationRuleFunc func(context.Context, *ent.CarrierEasyPostMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierEasyPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierEasyPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierEasyPostMutation", m)
}

// The CarrierGLSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierGLSQueryRuleFunc func(context.Context, *ent.CarrierGLSQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierGLSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierGLSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierGLSQuery", q)
}

// The CarrierGLSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierGLSMutationRuleFunc func(context.Context, *ent.CarrierGLSMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierGLSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierGLSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierGLSMutation", m)
}

// The CarrierPostNordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierPostNordQueryRuleFunc func(context.Context, *ent.CarrierPostNordQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierPostNordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierPostNordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierPostNordQuery", q)
}

// The CarrierPostNordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierPostNordMutationRuleFunc func(context.Context, *ent.CarrierPostNordMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierPostNordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierPostNordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierPostNordMutation", m)
}

// The CarrierServiceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceQueryRuleFunc func(context.Context, *ent.CarrierServiceQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceQuery", q)
}

// The CarrierServiceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceMutationRuleFunc func(context.Context, *ent.CarrierServiceMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceMutation", m)
}

// The CarrierServiceBringQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceBringQueryRuleFunc func(context.Context, *ent.CarrierServiceBringQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceBringQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceBringQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceBringQuery", q)
}

// The CarrierServiceBringMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceBringMutationRuleFunc func(context.Context, *ent.CarrierServiceBringMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceBringMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceBringMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceBringMutation", m)
}

// The CarrierServiceDAOQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceDAOQueryRuleFunc func(context.Context, *ent.CarrierServiceDAOQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceDAOQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceDAOQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceDAOQuery", q)
}

// The CarrierServiceDAOMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceDAOMutationRuleFunc func(context.Context, *ent.CarrierServiceDAOMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceDAOMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceDAOMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceDAOMutation", m)
}

// The CarrierServiceDFQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceDFQueryRuleFunc func(context.Context, *ent.CarrierServiceDFQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceDFQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceDFQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceDFQuery", q)
}

// The CarrierServiceDFMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceDFMutationRuleFunc func(context.Context, *ent.CarrierServiceDFMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceDFMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceDFMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceDFMutation", m)
}

// The CarrierServiceDSVQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceDSVQueryRuleFunc func(context.Context, *ent.CarrierServiceDSVQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceDSVQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceDSVQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceDSVQuery", q)
}

// The CarrierServiceDSVMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceDSVMutationRuleFunc func(context.Context, *ent.CarrierServiceDSVMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceDSVMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceDSVMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceDSVMutation", m)
}

// The CarrierServiceEasyPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceEasyPostQueryRuleFunc func(context.Context, *ent.CarrierServiceEasyPostQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceEasyPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceEasyPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceEasyPostQuery", q)
}

// The CarrierServiceEasyPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceEasyPostMutationRuleFunc func(context.Context, *ent.CarrierServiceEasyPostMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceEasyPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceEasyPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceEasyPostMutation", m)
}

// The CarrierServiceGLSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceGLSQueryRuleFunc func(context.Context, *ent.CarrierServiceGLSQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceGLSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceGLSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceGLSQuery", q)
}

// The CarrierServiceGLSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceGLSMutationRuleFunc func(context.Context, *ent.CarrierServiceGLSMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceGLSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceGLSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceGLSMutation", m)
}

// The CarrierServicePostNordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServicePostNordQueryRuleFunc func(context.Context, *ent.CarrierServicePostNordQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServicePostNordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServicePostNordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServicePostNordQuery", q)
}

// The CarrierServicePostNordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServicePostNordMutationRuleFunc func(context.Context, *ent.CarrierServicePostNordMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServicePostNordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServicePostNordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServicePostNordMutation", m)
}

// The CarrierServiceUSPSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierServiceUSPSQueryRuleFunc func(context.Context, *ent.CarrierServiceUSPSQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierServiceUSPSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceUSPSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierServiceUSPSQuery", q)
}

// The CarrierServiceUSPSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierServiceUSPSMutationRuleFunc func(context.Context, *ent.CarrierServiceUSPSMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierServiceUSPSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierServiceUSPSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierServiceUSPSMutation", m)
}

// The CarrierUSPSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarrierUSPSQueryRuleFunc func(context.Context, *ent.CarrierUSPSQuery) error

// EvalQuery return f(ctx, q).
func (f CarrierUSPSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierUSPSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarrierUSPSQuery", q)
}

// The CarrierUSPSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarrierUSPSMutationRuleFunc func(context.Context, *ent.CarrierUSPSMutation) error

// EvalMutation calls f(ctx, m).
func (f CarrierUSPSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarrierUSPSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarrierUSPSMutation", m)
}

// The ChangeHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChangeHistoryQueryRuleFunc func(context.Context, *ent.ChangeHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ChangeHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChangeHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ChangeHistoryQuery", q)
}

// The ChangeHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChangeHistoryMutationRuleFunc func(context.Context, *ent.ChangeHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ChangeHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ChangeHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ChangeHistoryMutation", m)
}

// The ColliQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ColliQueryRuleFunc func(context.Context, *ent.ColliQuery) error

// EvalQuery return f(ctx, q).
func (f ColliQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ColliQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ColliQuery", q)
}

// The ColliMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ColliMutationRuleFunc func(context.Context, *ent.ColliMutation) error

// EvalMutation calls f(ctx, m).
func (f ColliMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ColliMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ColliMutation", m)
}

// The ConnectOptionCarrierQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectOptionCarrierQueryRuleFunc func(context.Context, *ent.ConnectOptionCarrierQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectOptionCarrierQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectOptionCarrierQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectOptionCarrierQuery", q)
}

// The ConnectOptionCarrierMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectOptionCarrierMutationRuleFunc func(context.Context, *ent.ConnectOptionCarrierMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectOptionCarrierMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectOptionCarrierMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectOptionCarrierMutation", m)
}

// The ConnectOptionPlatformQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectOptionPlatformQueryRuleFunc func(context.Context, *ent.ConnectOptionPlatformQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectOptionPlatformQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectOptionPlatformQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectOptionPlatformQuery", q)
}

// The ConnectOptionPlatformMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectOptionPlatformMutationRuleFunc func(context.Context, *ent.ConnectOptionPlatformMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectOptionPlatformMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectOptionPlatformMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectOptionPlatformMutation", m)
}

// The ConnectionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectionQueryRuleFunc func(context.Context, *ent.ConnectionQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectionQuery", q)
}

// The ConnectionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectionMutationRuleFunc func(context.Context, *ent.ConnectionMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectionMutation", m)
}

// The ConnectionBrandQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectionBrandQueryRuleFunc func(context.Context, *ent.ConnectionBrandQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectionBrandQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionBrandQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectionBrandQuery", q)
}

// The ConnectionBrandMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectionBrandMutationRuleFunc func(context.Context, *ent.ConnectionBrandMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectionBrandMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectionBrandMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectionBrandMutation", m)
}

// The ConnectionLookupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectionLookupQueryRuleFunc func(context.Context, *ent.ConnectionLookupQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectionLookupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionLookupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectionLookupQuery", q)
}

// The ConnectionLookupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectionLookupMutationRuleFunc func(context.Context, *ent.ConnectionLookupMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectionLookupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectionLookupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectionLookupMutation", m)
}

// The ConnectionShopifyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConnectionShopifyQueryRuleFunc func(context.Context, *ent.ConnectionShopifyQuery) error

// EvalQuery return f(ctx, q).
func (f ConnectionShopifyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionShopifyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConnectionShopifyQuery", q)
}

// The ConnectionShopifyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConnectionShopifyMutationRuleFunc func(context.Context, *ent.ConnectionShopifyMutation) error

// EvalMutation calls f(ctx, m).
func (f ConnectionShopifyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConnectionShopifyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConnectionShopifyMutation", m)
}

// The ConsolidationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ConsolidationQueryRuleFunc func(context.Context, *ent.ConsolidationQuery) error

// EvalQuery return f(ctx, q).
func (f ConsolidationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConsolidationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ConsolidationQuery", q)
}

// The ConsolidationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ConsolidationMutationRuleFunc func(context.Context, *ent.ConsolidationMutation) error

// EvalMutation calls f(ctx, m).
func (f ConsolidationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ConsolidationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ConsolidationMutation", m)
}

// The ContactQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ContactQueryRuleFunc func(context.Context, *ent.ContactQuery) error

// EvalQuery return f(ctx, q).
func (f ContactQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ContactQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ContactQuery", q)
}

// The ContactMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ContactMutationRuleFunc func(context.Context, *ent.ContactMutation) error

// EvalMutation calls f(ctx, m).
func (f ContactMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ContactMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ContactMutation", m)
}

// The CountryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CountryQueryRuleFunc func(context.Context, *ent.CountryQuery) error

// EvalQuery return f(ctx, q).
func (f CountryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CountryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CountryQuery", q)
}

// The CountryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CountryMutationRuleFunc func(context.Context, *ent.CountryMutation) error

// EvalMutation calls f(ctx, m).
func (f CountryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CountryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CountryMutation", m)
}

// The CountryHarmonizedCodeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CountryHarmonizedCodeQueryRuleFunc func(context.Context, *ent.CountryHarmonizedCodeQuery) error

// EvalQuery return f(ctx, q).
func (f CountryHarmonizedCodeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CountryHarmonizedCodeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CountryHarmonizedCodeQuery", q)
}

// The CountryHarmonizedCodeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CountryHarmonizedCodeMutationRuleFunc func(context.Context, *ent.CountryHarmonizedCodeMutation) error

// EvalMutation calls f(ctx, m).
func (f CountryHarmonizedCodeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CountryHarmonizedCodeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CountryHarmonizedCodeMutation", m)
}

// The CurrencyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CurrencyQueryRuleFunc func(context.Context, *ent.CurrencyQuery) error

// EvalQuery return f(ctx, q).
func (f CurrencyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CurrencyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CurrencyQuery", q)
}

// The CurrencyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CurrencyMutationRuleFunc func(context.Context, *ent.CurrencyMutation) error

// EvalMutation calls f(ctx, m).
func (f CurrencyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CurrencyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CurrencyMutation", m)
}

// The DeliveryOptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionQueryRuleFunc func(context.Context, *ent.DeliveryOptionQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionQuery", q)
}

// The DeliveryOptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionMutationRuleFunc func(context.Context, *ent.DeliveryOptionMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionMutation", m)
}

// The DeliveryOptionBringQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionBringQueryRuleFunc func(context.Context, *ent.DeliveryOptionBringQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionBringQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionBringQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionBringQuery", q)
}

// The DeliveryOptionBringMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionBringMutationRuleFunc func(context.Context, *ent.DeliveryOptionBringMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionBringMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionBringMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionBringMutation", m)
}

// The DeliveryOptionDAOQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionDAOQueryRuleFunc func(context.Context, *ent.DeliveryOptionDAOQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionDAOQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionDAOQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionDAOQuery", q)
}

// The DeliveryOptionDAOMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionDAOMutationRuleFunc func(context.Context, *ent.DeliveryOptionDAOMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionDAOMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionDAOMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionDAOMutation", m)
}

// The DeliveryOptionDFQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionDFQueryRuleFunc func(context.Context, *ent.DeliveryOptionDFQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionDFQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionDFQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionDFQuery", q)
}

// The DeliveryOptionDFMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionDFMutationRuleFunc func(context.Context, *ent.DeliveryOptionDFMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionDFMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionDFMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionDFMutation", m)
}

// The DeliveryOptionDSVQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionDSVQueryRuleFunc func(context.Context, *ent.DeliveryOptionDSVQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionDSVQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionDSVQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionDSVQuery", q)
}

// The DeliveryOptionDSVMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionDSVMutationRuleFunc func(context.Context, *ent.DeliveryOptionDSVMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionDSVMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionDSVMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionDSVMutation", m)
}

// The DeliveryOptionEasyPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionEasyPostQueryRuleFunc func(context.Context, *ent.DeliveryOptionEasyPostQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionEasyPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionEasyPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionEasyPostQuery", q)
}

// The DeliveryOptionEasyPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionEasyPostMutationRuleFunc func(context.Context, *ent.DeliveryOptionEasyPostMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionEasyPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionEasyPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionEasyPostMutation", m)
}

// The DeliveryOptionGLSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionGLSQueryRuleFunc func(context.Context, *ent.DeliveryOptionGLSQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionGLSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionGLSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionGLSQuery", q)
}

// The DeliveryOptionGLSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionGLSMutationRuleFunc func(context.Context, *ent.DeliveryOptionGLSMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionGLSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionGLSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionGLSMutation", m)
}

// The DeliveryOptionPostNordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionPostNordQueryRuleFunc func(context.Context, *ent.DeliveryOptionPostNordQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionPostNordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionPostNordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionPostNordQuery", q)
}

// The DeliveryOptionPostNordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionPostNordMutationRuleFunc func(context.Context, *ent.DeliveryOptionPostNordMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionPostNordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionPostNordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionPostNordMutation", m)
}

// The DeliveryOptionUSPSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryOptionUSPSQueryRuleFunc func(context.Context, *ent.DeliveryOptionUSPSQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryOptionUSPSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionUSPSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryOptionUSPSQuery", q)
}

// The DeliveryOptionUSPSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryOptionUSPSMutationRuleFunc func(context.Context, *ent.DeliveryOptionUSPSMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryOptionUSPSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryOptionUSPSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryOptionUSPSMutation", m)
}

// The DeliveryRuleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryRuleQueryRuleFunc func(context.Context, *ent.DeliveryRuleQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryRuleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryRuleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryRuleQuery", q)
}

// The DeliveryRuleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryRuleMutationRuleFunc func(context.Context, *ent.DeliveryRuleMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryRuleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryRuleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryRuleMutation", m)
}

// The DeliveryRuleConstraintQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryRuleConstraintQueryRuleFunc func(context.Context, *ent.DeliveryRuleConstraintQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryRuleConstraintQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryRuleConstraintQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryRuleConstraintQuery", q)
}

// The DeliveryRuleConstraintMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryRuleConstraintMutationRuleFunc func(context.Context, *ent.DeliveryRuleConstraintMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryRuleConstraintMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryRuleConstraintMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryRuleConstraintMutation", m)
}

// The DeliveryRuleConstraintGroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeliveryRuleConstraintGroupQueryRuleFunc func(context.Context, *ent.DeliveryRuleConstraintGroupQuery) error

// EvalQuery return f(ctx, q).
func (f DeliveryRuleConstraintGroupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryRuleConstraintGroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeliveryRuleConstraintGroupQuery", q)
}

// The DeliveryRuleConstraintGroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeliveryRuleConstraintGroupMutationRuleFunc func(context.Context, *ent.DeliveryRuleConstraintGroupMutation) error

// EvalMutation calls f(ctx, m).
func (f DeliveryRuleConstraintGroupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeliveryRuleConstraintGroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeliveryRuleConstraintGroupMutation", m)
}

// The DocumentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentQueryRuleFunc func(context.Context, *ent.DocumentQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentQuery", q)
}

// The DocumentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentMutationRuleFunc func(context.Context, *ent.DocumentMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentMutation", m)
}

// The DocumentFileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentFileQueryRuleFunc func(context.Context, *ent.DocumentFileQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentFileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentFileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentFileQuery", q)
}

// The DocumentFileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentFileMutationRuleFunc func(context.Context, *ent.DocumentFileMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentFileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentFileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentFileMutation", m)
}

// The EmailTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmailTemplateQueryRuleFunc func(context.Context, *ent.EmailTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f EmailTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmailTemplateQuery", q)
}

// The EmailTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmailTemplateMutationRuleFunc func(context.Context, *ent.EmailTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f EmailTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmailTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmailTemplateMutation", m)
}

// The HypothesisTestQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HypothesisTestQueryRuleFunc func(context.Context, *ent.HypothesisTestQuery) error

// EvalQuery return f(ctx, q).
func (f HypothesisTestQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HypothesisTestQuery", q)
}

// The HypothesisTestMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HypothesisTestMutationRuleFunc func(context.Context, *ent.HypothesisTestMutation) error

// EvalMutation calls f(ctx, m).
func (f HypothesisTestMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HypothesisTestMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HypothesisTestMutation", m)
}

// The HypothesisTestDeliveryOptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HypothesisTestDeliveryOptionQueryRuleFunc func(context.Context, *ent.HypothesisTestDeliveryOptionQuery) error

// EvalQuery return f(ctx, q).
func (f HypothesisTestDeliveryOptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HypothesisTestDeliveryOptionQuery", q)
}

// The HypothesisTestDeliveryOptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HypothesisTestDeliveryOptionMutationRuleFunc func(context.Context, *ent.HypothesisTestDeliveryOptionMutation) error

// EvalMutation calls f(ctx, m).
func (f HypothesisTestDeliveryOptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HypothesisTestDeliveryOptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HypothesisTestDeliveryOptionMutation", m)
}

// The HypothesisTestDeliveryOptionLookupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HypothesisTestDeliveryOptionLookupQueryRuleFunc func(context.Context, *ent.HypothesisTestDeliveryOptionLookupQuery) error

// EvalQuery return f(ctx, q).
func (f HypothesisTestDeliveryOptionLookupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionLookupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HypothesisTestDeliveryOptionLookupQuery", q)
}

// The HypothesisTestDeliveryOptionLookupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HypothesisTestDeliveryOptionLookupMutationRuleFunc func(context.Context, *ent.HypothesisTestDeliveryOptionLookupMutation) error

// EvalMutation calls f(ctx, m).
func (f HypothesisTestDeliveryOptionLookupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HypothesisTestDeliveryOptionLookupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HypothesisTestDeliveryOptionLookupMutation", m)
}

// The HypothesisTestDeliveryOptionRequestQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type HypothesisTestDeliveryOptionRequestQueryRuleFunc func(context.Context, *ent.HypothesisTestDeliveryOptionRequestQuery) error

// EvalQuery return f(ctx, q).
func (f HypothesisTestDeliveryOptionRequestQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionRequestQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.HypothesisTestDeliveryOptionRequestQuery", q)
}

// The HypothesisTestDeliveryOptionRequestMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type HypothesisTestDeliveryOptionRequestMutationRuleFunc func(context.Context, *ent.HypothesisTestDeliveryOptionRequestMutation) error

// EvalMutation calls f(ctx, m).
func (f HypothesisTestDeliveryOptionRequestMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.HypothesisTestDeliveryOptionRequestMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.HypothesisTestDeliveryOptionRequestMutation", m)
}

// The InventoryItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InventoryItemQueryRuleFunc func(context.Context, *ent.InventoryItemQuery) error

// EvalQuery return f(ctx, q).
func (f InventoryItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InventoryItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.InventoryItemQuery", q)
}

// The InventoryItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InventoryItemMutationRuleFunc func(context.Context, *ent.InventoryItemMutation) error

// EvalMutation calls f(ctx, m).
func (f InventoryItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.InventoryItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.InventoryItemMutation", m)
}

// The LanguageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LanguageQueryRuleFunc func(context.Context, *ent.LanguageQuery) error

// EvalQuery return f(ctx, q).
func (f LanguageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LanguageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LanguageQuery", q)
}

// The LanguageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LanguageMutationRuleFunc func(context.Context, *ent.LanguageMutation) error

// EvalMutation calls f(ctx, m).
func (f LanguageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LanguageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LanguageMutation", m)
}

// The LocationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationQueryRuleFunc func(context.Context, *ent.LocationQuery) error

// EvalQuery return f(ctx, q).
func (f LocationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationQuery", q)
}

// The LocationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationMutationRuleFunc func(context.Context, *ent.LocationMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationMutation", m)
}

// The LocationTagQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LocationTagQueryRuleFunc func(context.Context, *ent.LocationTagQuery) error

// EvalQuery return f(ctx, q).
func (f LocationTagQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationTagQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LocationTagQuery", q)
}

// The LocationTagMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LocationTagMutationRuleFunc func(context.Context, *ent.LocationTagMutation) error

// EvalMutation calls f(ctx, m).
func (f LocationTagMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LocationTagMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LocationTagMutation", m)
}

// The NotificationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type NotificationQueryRuleFunc func(context.Context, *ent.NotificationQuery) error

// EvalQuery return f(ctx, q).
func (f NotificationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NotificationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.NotificationQuery", q)
}

// The NotificationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type NotificationMutationRuleFunc func(context.Context, *ent.NotificationMutation) error

// EvalMutation calls f(ctx, m).
func (f NotificationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.NotificationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.NotificationMutation", m)
}

// The OTKRequestsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OTKRequestsQueryRuleFunc func(context.Context, *ent.OTKRequestsQuery) error

// EvalQuery return f(ctx, q).
func (f OTKRequestsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OTKRequestsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OTKRequestsQuery", q)
}

// The OTKRequestsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OTKRequestsMutationRuleFunc func(context.Context, *ent.OTKRequestsMutation) error

// EvalMutation calls f(ctx, m).
func (f OTKRequestsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OTKRequestsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OTKRequestsMutation", m)
}

// The OrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderQueryRuleFunc func(context.Context, *ent.OrderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderQuery", q)
}

// The OrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderMutationRuleFunc func(context.Context, *ent.OrderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderMutation", m)
}

// The OrderHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderHistoryQueryRuleFunc func(context.Context, *ent.OrderHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f OrderHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderHistoryQuery", q)
}

// The OrderHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderHistoryMutationRuleFunc func(context.Context, *ent.OrderHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderHistoryMutation", m)
}

// The OrderLineQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderLineQueryRuleFunc func(context.Context, *ent.OrderLineQuery) error

// EvalQuery return f(ctx, q).
func (f OrderLineQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderLineQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderLineQuery", q)
}

// The OrderLineMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderLineMutationRuleFunc func(context.Context, *ent.OrderLineMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderLineMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderLineMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderLineMutation", m)
}

// The OrderSenderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderSenderQueryRuleFunc func(context.Context, *ent.OrderSenderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderSenderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderSenderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderSenderQuery", q)
}

// The OrderSenderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderSenderMutationRuleFunc func(context.Context, *ent.OrderSenderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderSenderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderSenderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderSenderMutation", m)
}

// The PackagingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PackagingQueryRuleFunc func(context.Context, *ent.PackagingQuery) error

// EvalQuery return f(ctx, q).
func (f PackagingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PackagingQuery", q)
}

// The PackagingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PackagingMutationRuleFunc func(context.Context, *ent.PackagingMutation) error

// EvalMutation calls f(ctx, m).
func (f PackagingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PackagingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PackagingMutation", m)
}

// The PackagingDFQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PackagingDFQueryRuleFunc func(context.Context, *ent.PackagingDFQuery) error

// EvalQuery return f(ctx, q).
func (f PackagingDFQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingDFQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PackagingDFQuery", q)
}

// The PackagingDFMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PackagingDFMutationRuleFunc func(context.Context, *ent.PackagingDFMutation) error

// EvalMutation calls f(ctx, m).
func (f PackagingDFMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PackagingDFMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PackagingDFMutation", m)
}

// The PackagingUSPSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PackagingUSPSQueryRuleFunc func(context.Context, *ent.PackagingUSPSQuery) error

// EvalQuery return f(ctx, q).
func (f PackagingUSPSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingUSPSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PackagingUSPSQuery", q)
}

// The PackagingUSPSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PackagingUSPSMutationRuleFunc func(context.Context, *ent.PackagingUSPSMutation) error

// EvalMutation calls f(ctx, m).
func (f PackagingUSPSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PackagingUSPSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PackagingUSPSMutation", m)
}

// The PackagingUSPSProcessingCategoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PackagingUSPSProcessingCategoryQueryRuleFunc func(context.Context, *ent.PackagingUSPSProcessingCategoryQuery) error

// EvalQuery return f(ctx, q).
func (f PackagingUSPSProcessingCategoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingUSPSProcessingCategoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PackagingUSPSProcessingCategoryQuery", q)
}

// The PackagingUSPSProcessingCategoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PackagingUSPSProcessingCategoryMutationRuleFunc func(context.Context, *ent.PackagingUSPSProcessingCategoryMutation) error

// EvalMutation calls f(ctx, m).
func (f PackagingUSPSProcessingCategoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PackagingUSPSProcessingCategoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PackagingUSPSProcessingCategoryMutation", m)
}

// The PackagingUSPSRateIndicatorQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PackagingUSPSRateIndicatorQueryRuleFunc func(context.Context, *ent.PackagingUSPSRateIndicatorQuery) error

// EvalQuery return f(ctx, q).
func (f PackagingUSPSRateIndicatorQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingUSPSRateIndicatorQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PackagingUSPSRateIndicatorQuery", q)
}

// The PackagingUSPSRateIndicatorMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PackagingUSPSRateIndicatorMutationRuleFunc func(context.Context, *ent.PackagingUSPSRateIndicatorMutation) error

// EvalMutation calls f(ctx, m).
func (f PackagingUSPSRateIndicatorMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PackagingUSPSRateIndicatorMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PackagingUSPSRateIndicatorMutation", m)
}

// The PalletQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PalletQueryRuleFunc func(context.Context, *ent.PalletQuery) error

// EvalQuery return f(ctx, q).
func (f PalletQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PalletQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PalletQuery", q)
}

// The PalletMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PalletMutationRuleFunc func(context.Context, *ent.PalletMutation) error

// EvalMutation calls f(ctx, m).
func (f PalletMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PalletMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PalletMutation", m)
}

// The ParcelShopQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ParcelShopQueryRuleFunc func(context.Context, *ent.ParcelShopQuery) error

// EvalQuery return f(ctx, q).
func (f ParcelShopQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ParcelShopQuery", q)
}

// The ParcelShopMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ParcelShopMutationRuleFunc func(context.Context, *ent.ParcelShopMutation) error

// EvalMutation calls f(ctx, m).
func (f ParcelShopMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ParcelShopMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ParcelShopMutation", m)
}

// The ParcelShopBringQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ParcelShopBringQueryRuleFunc func(context.Context, *ent.ParcelShopBringQuery) error

// EvalQuery return f(ctx, q).
func (f ParcelShopBringQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopBringQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ParcelShopBringQuery", q)
}

// The ParcelShopBringMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ParcelShopBringMutationRuleFunc func(context.Context, *ent.ParcelShopBringMutation) error

// EvalMutation calls f(ctx, m).
func (f ParcelShopBringMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ParcelShopBringMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ParcelShopBringMutation", m)
}

// The ParcelShopDAOQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ParcelShopDAOQueryRuleFunc func(context.Context, *ent.ParcelShopDAOQuery) error

// EvalQuery return f(ctx, q).
func (f ParcelShopDAOQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopDAOQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ParcelShopDAOQuery", q)
}

// The ParcelShopDAOMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ParcelShopDAOMutationRuleFunc func(context.Context, *ent.ParcelShopDAOMutation) error

// EvalMutation calls f(ctx, m).
func (f ParcelShopDAOMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ParcelShopDAOMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ParcelShopDAOMutation", m)
}

// The ParcelShopGLSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ParcelShopGLSQueryRuleFunc func(context.Context, *ent.ParcelShopGLSQuery) error

// EvalQuery return f(ctx, q).
func (f ParcelShopGLSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopGLSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ParcelShopGLSQuery", q)
}

// The ParcelShopGLSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ParcelShopGLSMutationRuleFunc func(context.Context, *ent.ParcelShopGLSMutation) error

// EvalMutation calls f(ctx, m).
func (f ParcelShopGLSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ParcelShopGLSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ParcelShopGLSMutation", m)
}

// The ParcelShopPostNordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ParcelShopPostNordQueryRuleFunc func(context.Context, *ent.ParcelShopPostNordQuery) error

// EvalQuery return f(ctx, q).
func (f ParcelShopPostNordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopPostNordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ParcelShopPostNordQuery", q)
}

// The ParcelShopPostNordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ParcelShopPostNordMutationRuleFunc func(context.Context, *ent.ParcelShopPostNordMutation) error

// EvalMutation calls f(ctx, m).
func (f ParcelShopPostNordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ParcelShopPostNordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ParcelShopPostNordMutation", m)
}

// The PlanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlanQueryRuleFunc func(context.Context, *ent.PlanQuery) error

// EvalQuery return f(ctx, q).
func (f PlanQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlanQuery", q)
}

// The PlanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlanMutationRuleFunc func(context.Context, *ent.PlanMutation) error

// EvalMutation calls f(ctx, m).
func (f PlanMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlanMutation", m)
}

// The PlanHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlanHistoryQueryRuleFunc func(context.Context, *ent.PlanHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f PlanHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlanHistoryQuery", q)
}

// The PlanHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlanHistoryMutationRuleFunc func(context.Context, *ent.PlanHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f PlanHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlanHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlanHistoryMutation", m)
}

// The PrintJobQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PrintJobQueryRuleFunc func(context.Context, *ent.PrintJobQuery) error

// EvalQuery return f(ctx, q).
func (f PrintJobQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PrintJobQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PrintJobQuery", q)
}

// The PrintJobMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PrintJobMutationRuleFunc func(context.Context, *ent.PrintJobMutation) error

// EvalMutation calls f(ctx, m).
func (f PrintJobMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PrintJobMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PrintJobMutation", m)
}

// The PrinterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PrinterQueryRuleFunc func(context.Context, *ent.PrinterQuery) error

// EvalQuery return f(ctx, q).
func (f PrinterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PrinterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PrinterQuery", q)
}

// The PrinterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PrinterMutationRuleFunc func(context.Context, *ent.PrinterMutation) error

// EvalMutation calls f(ctx, m).
func (f PrinterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PrinterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PrinterMutation", m)
}

// The ProductQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProductQueryRuleFunc func(context.Context, *ent.ProductQuery) error

// EvalQuery return f(ctx, q).
func (f ProductQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProductQuery", q)
}

// The ProductMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProductMutationRuleFunc func(context.Context, *ent.ProductMutation) error

// EvalMutation calls f(ctx, m).
func (f ProductMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProductMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProductMutation", m)
}

// The ProductImageQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProductImageQueryRuleFunc func(context.Context, *ent.ProductImageQuery) error

// EvalQuery return f(ctx, q).
func (f ProductImageQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductImageQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProductImageQuery", q)
}

// The ProductImageMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProductImageMutationRuleFunc func(context.Context, *ent.ProductImageMutation) error

// EvalMutation calls f(ctx, m).
func (f ProductImageMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProductImageMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProductImageMutation", m)
}

// The ProductTagQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProductTagQueryRuleFunc func(context.Context, *ent.ProductTagQuery) error

// EvalQuery return f(ctx, q).
func (f ProductTagQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductTagQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProductTagQuery", q)
}

// The ProductTagMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProductTagMutationRuleFunc func(context.Context, *ent.ProductTagMutation) error

// EvalMutation calls f(ctx, m).
func (f ProductTagMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProductTagMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProductTagMutation", m)
}

// The ProductVariantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProductVariantQueryRuleFunc func(context.Context, *ent.ProductVariantQuery) error

// EvalQuery return f(ctx, q).
func (f ProductVariantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductVariantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProductVariantQuery", q)
}

// The ProductVariantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProductVariantMutationRuleFunc func(context.Context, *ent.ProductVariantMutation) error

// EvalMutation calls f(ctx, m).
func (f ProductVariantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProductVariantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProductVariantMutation", m)
}

// The ReturnColliQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReturnColliQueryRuleFunc func(context.Context, *ent.ReturnColliQuery) error

// EvalQuery return f(ctx, q).
func (f ReturnColliQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnColliQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReturnColliQuery", q)
}

// The ReturnColliMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReturnColliMutationRuleFunc func(context.Context, *ent.ReturnColliMutation) error

// EvalMutation calls f(ctx, m).
func (f ReturnColliMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReturnColliMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReturnColliMutation", m)
}

// The ReturnColliHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReturnColliHistoryQueryRuleFunc func(context.Context, *ent.ReturnColliHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ReturnColliHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnColliHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReturnColliHistoryQuery", q)
}

// The ReturnColliHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReturnColliHistoryMutationRuleFunc func(context.Context, *ent.ReturnColliHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ReturnColliHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReturnColliHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReturnColliHistoryMutation", m)
}

// The ReturnOrderLineQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReturnOrderLineQueryRuleFunc func(context.Context, *ent.ReturnOrderLineQuery) error

// EvalQuery return f(ctx, q).
func (f ReturnOrderLineQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnOrderLineQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReturnOrderLineQuery", q)
}

// The ReturnOrderLineMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReturnOrderLineMutationRuleFunc func(context.Context, *ent.ReturnOrderLineMutation) error

// EvalMutation calls f(ctx, m).
func (f ReturnOrderLineMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReturnOrderLineMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReturnOrderLineMutation", m)
}

// The ReturnPortalQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReturnPortalQueryRuleFunc func(context.Context, *ent.ReturnPortalQuery) error

// EvalQuery return f(ctx, q).
func (f ReturnPortalQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnPortalQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReturnPortalQuery", q)
}

// The ReturnPortalMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReturnPortalMutationRuleFunc func(context.Context, *ent.ReturnPortalMutation) error

// EvalMutation calls f(ctx, m).
func (f ReturnPortalMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReturnPortalMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReturnPortalMutation", m)
}

// The ReturnPortalClaimQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReturnPortalClaimQueryRuleFunc func(context.Context, *ent.ReturnPortalClaimQuery) error

// EvalQuery return f(ctx, q).
func (f ReturnPortalClaimQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnPortalClaimQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReturnPortalClaimQuery", q)
}

// The ReturnPortalClaimMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReturnPortalClaimMutationRuleFunc func(context.Context, *ent.ReturnPortalClaimMutation) error

// EvalMutation calls f(ctx, m).
func (f ReturnPortalClaimMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReturnPortalClaimMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReturnPortalClaimMutation", m)
}

// The SeatGroupQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SeatGroupQueryRuleFunc func(context.Context, *ent.SeatGroupQuery) error

// EvalQuery return f(ctx, q).
func (f SeatGroupQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SeatGroupQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SeatGroupQuery", q)
}

// The SeatGroupMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SeatGroupMutationRuleFunc func(context.Context, *ent.SeatGroupMutation) error

// EvalMutation calls f(ctx, m).
func (f SeatGroupMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SeatGroupMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SeatGroupMutation", m)
}

// The SeatGroupAccessRightQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SeatGroupAccessRightQueryRuleFunc func(context.Context, *ent.SeatGroupAccessRightQuery) error

// EvalQuery return f(ctx, q).
func (f SeatGroupAccessRightQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SeatGroupAccessRightQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SeatGroupAccessRightQuery", q)
}

// The SeatGroupAccessRightMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SeatGroupAccessRightMutationRuleFunc func(context.Context, *ent.SeatGroupAccessRightMutation) error

// EvalMutation calls f(ctx, m).
func (f SeatGroupAccessRightMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SeatGroupAccessRightMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SeatGroupAccessRightMutation", m)
}

// The ShipmentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentQueryRuleFunc func(context.Context, *ent.ShipmentQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentQuery", q)
}

// The ShipmentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentMutationRuleFunc func(context.Context, *ent.ShipmentMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentMutation", m)
}

// The ShipmentBringQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentBringQueryRuleFunc func(context.Context, *ent.ShipmentBringQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentBringQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentBringQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentBringQuery", q)
}

// The ShipmentBringMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentBringMutationRuleFunc func(context.Context, *ent.ShipmentBringMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentBringMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentBringMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentBringMutation", m)
}

// The ShipmentDAOQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentDAOQueryRuleFunc func(context.Context, *ent.ShipmentDAOQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentDAOQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentDAOQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentDAOQuery", q)
}

// The ShipmentDAOMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentDAOMutationRuleFunc func(context.Context, *ent.ShipmentDAOMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentDAOMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentDAOMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentDAOMutation", m)
}

// The ShipmentDFQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentDFQueryRuleFunc func(context.Context, *ent.ShipmentDFQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentDFQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentDFQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentDFQuery", q)
}

// The ShipmentDFMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentDFMutationRuleFunc func(context.Context, *ent.ShipmentDFMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentDFMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentDFMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentDFMutation", m)
}

// The ShipmentDSVQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentDSVQueryRuleFunc func(context.Context, *ent.ShipmentDSVQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentDSVQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentDSVQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentDSVQuery", q)
}

// The ShipmentDSVMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentDSVMutationRuleFunc func(context.Context, *ent.ShipmentDSVMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentDSVMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentDSVMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentDSVMutation", m)
}

// The ShipmentEasyPostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentEasyPostQueryRuleFunc func(context.Context, *ent.ShipmentEasyPostQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentEasyPostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentEasyPostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentEasyPostQuery", q)
}

// The ShipmentEasyPostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentEasyPostMutationRuleFunc func(context.Context, *ent.ShipmentEasyPostMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentEasyPostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentEasyPostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentEasyPostMutation", m)
}

// The ShipmentGLSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentGLSQueryRuleFunc func(context.Context, *ent.ShipmentGLSQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentGLSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentGLSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentGLSQuery", q)
}

// The ShipmentGLSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentGLSMutationRuleFunc func(context.Context, *ent.ShipmentGLSMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentGLSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentGLSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentGLSMutation", m)
}

// The ShipmentHistoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentHistoryQueryRuleFunc func(context.Context, *ent.ShipmentHistoryQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentHistoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentHistoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentHistoryQuery", q)
}

// The ShipmentHistoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentHistoryMutationRuleFunc func(context.Context, *ent.ShipmentHistoryMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentHistoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentHistoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentHistoryMutation", m)
}

// The ShipmentPalletQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentPalletQueryRuleFunc func(context.Context, *ent.ShipmentPalletQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentPalletQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentPalletQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentPalletQuery", q)
}

// The ShipmentPalletMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentPalletMutationRuleFunc func(context.Context, *ent.ShipmentPalletMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentPalletMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentPalletMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentPalletMutation", m)
}

// The ShipmentParcelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentParcelQueryRuleFunc func(context.Context, *ent.ShipmentParcelQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentParcelQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentParcelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentParcelQuery", q)
}

// The ShipmentParcelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentParcelMutationRuleFunc func(context.Context, *ent.ShipmentParcelMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentParcelMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentParcelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentParcelMutation", m)
}

// The ShipmentPostNordQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentPostNordQueryRuleFunc func(context.Context, *ent.ShipmentPostNordQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentPostNordQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentPostNordQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentPostNordQuery", q)
}

// The ShipmentPostNordMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentPostNordMutationRuleFunc func(context.Context, *ent.ShipmentPostNordMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentPostNordMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentPostNordMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentPostNordMutation", m)
}

// The ShipmentUSPSQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShipmentUSPSQueryRuleFunc func(context.Context, *ent.ShipmentUSPSQuery) error

// EvalQuery return f(ctx, q).
func (f ShipmentUSPSQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentUSPSQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShipmentUSPSQuery", q)
}

// The ShipmentUSPSMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShipmentUSPSMutationRuleFunc func(context.Context, *ent.ShipmentUSPSMutation) error

// EvalMutation calls f(ctx, m).
func (f ShipmentUSPSMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShipmentUSPSMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShipmentUSPSMutation", m)
}

// The SignupOptionsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SignupOptionsQueryRuleFunc func(context.Context, *ent.SignupOptionsQuery) error

// EvalQuery return f(ctx, q).
func (f SignupOptionsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SignupOptionsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SignupOptionsQuery", q)
}

// The SignupOptionsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SignupOptionsMutationRuleFunc func(context.Context, *ent.SignupOptionsMutation) error

// EvalMutation calls f(ctx, m).
func (f SignupOptionsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SignupOptionsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SignupOptionsMutation", m)
}

// The SystemEventsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SystemEventsQueryRuleFunc func(context.Context, *ent.SystemEventsQuery) error

// EvalQuery return f(ctx, q).
func (f SystemEventsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemEventsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SystemEventsQuery", q)
}

// The SystemEventsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SystemEventsMutationRuleFunc func(context.Context, *ent.SystemEventsMutation) error

// EvalMutation calls f(ctx, m).
func (f SystemEventsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SystemEventsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SystemEventsMutation", m)
}

// The TenantQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type TenantQueryRuleFunc func(context.Context, *ent.TenantQuery) error

// EvalQuery return f(ctx, q).
func (f TenantQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.TenantQuery", q)
}

// The TenantMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type TenantMutationRuleFunc func(context.Context, *ent.TenantMutation) error

// EvalMutation calls f(ctx, m).
func (f TenantMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.TenantMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.TenantMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserSeatQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserSeatQueryRuleFunc func(context.Context, *ent.UserSeatQuery) error

// EvalQuery return f(ctx, q).
func (f UserSeatQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserSeatQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserSeatQuery", q)
}

// The UserSeatMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserSeatMutationRuleFunc func(context.Context, *ent.UserSeatMutation) error

// EvalMutation calls f(ctx, m).
func (f UserSeatMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserSeatMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserSeatMutation", m)
}

// The WorkspaceRecentScanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkspaceRecentScanQueryRuleFunc func(context.Context, *ent.WorkspaceRecentScanQuery) error

// EvalQuery return f(ctx, q).
func (f WorkspaceRecentScanQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkspaceRecentScanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkspaceRecentScanQuery", q)
}

// The WorkspaceRecentScanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkspaceRecentScanMutationRuleFunc func(context.Context, *ent.WorkspaceRecentScanMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkspaceRecentScanMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkspaceRecentScanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkspaceRecentScanMutation", m)
}

// The WorkstationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type WorkstationQueryRuleFunc func(context.Context, *ent.WorkstationQuery) error

// EvalQuery return f(ctx, q).
func (f WorkstationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkstationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.WorkstationQuery", q)
}

// The WorkstationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type WorkstationMutationRuleFunc func(context.Context, *ent.WorkstationMutation) error

// EvalMutation calls f(ctx, m).
func (f WorkstationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.WorkstationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.WorkstationMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.APITokenQuery:
		return q.Filter(), nil
	case *ent.AccessRightQuery:
		return q.Filter(), nil
	case *ent.AddressQuery:
		return q.Filter(), nil
	case *ent.AddressGlobalQuery:
		return q.Filter(), nil
	case *ent.BusinessHoursPeriodQuery:
		return q.Filter(), nil
	case *ent.CarrierQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceBringQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceDAOQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceDFQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceDSVQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceEasyPostQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceGLSQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServicePostNordQuery:
		return q.Filter(), nil
	case *ent.CarrierAdditionalServiceUSPSQuery:
		return q.Filter(), nil
	case *ent.CarrierBrandQuery:
		return q.Filter(), nil
	case *ent.CarrierBringQuery:
		return q.Filter(), nil
	case *ent.CarrierDAOQuery:
		return q.Filter(), nil
	case *ent.CarrierDFQuery:
		return q.Filter(), nil
	case *ent.CarrierDSVQuery:
		return q.Filter(), nil
	case *ent.CarrierEasyPostQuery:
		return q.Filter(), nil
	case *ent.CarrierGLSQuery:
		return q.Filter(), nil
	case *ent.CarrierPostNordQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceBringQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceDAOQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceDFQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceDSVQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceEasyPostQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceGLSQuery:
		return q.Filter(), nil
	case *ent.CarrierServicePostNordQuery:
		return q.Filter(), nil
	case *ent.CarrierServiceUSPSQuery:
		return q.Filter(), nil
	case *ent.CarrierUSPSQuery:
		return q.Filter(), nil
	case *ent.ChangeHistoryQuery:
		return q.Filter(), nil
	case *ent.ColliQuery:
		return q.Filter(), nil
	case *ent.ConnectOptionCarrierQuery:
		return q.Filter(), nil
	case *ent.ConnectOptionPlatformQuery:
		return q.Filter(), nil
	case *ent.ConnectionQuery:
		return q.Filter(), nil
	case *ent.ConnectionBrandQuery:
		return q.Filter(), nil
	case *ent.ConnectionLookupQuery:
		return q.Filter(), nil
	case *ent.ConnectionShopifyQuery:
		return q.Filter(), nil
	case *ent.ConsolidationQuery:
		return q.Filter(), nil
	case *ent.ContactQuery:
		return q.Filter(), nil
	case *ent.CountryQuery:
		return q.Filter(), nil
	case *ent.CountryHarmonizedCodeQuery:
		return q.Filter(), nil
	case *ent.CurrencyQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionBringQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionDAOQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionDFQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionDSVQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionEasyPostQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionGLSQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionPostNordQuery:
		return q.Filter(), nil
	case *ent.DeliveryOptionUSPSQuery:
		return q.Filter(), nil
	case *ent.DeliveryRuleQuery:
		return q.Filter(), nil
	case *ent.DeliveryRuleConstraintQuery:
		return q.Filter(), nil
	case *ent.DeliveryRuleConstraintGroupQuery:
		return q.Filter(), nil
	case *ent.DocumentQuery:
		return q.Filter(), nil
	case *ent.DocumentFileQuery:
		return q.Filter(), nil
	case *ent.EmailTemplateQuery:
		return q.Filter(), nil
	case *ent.HypothesisTestQuery:
		return q.Filter(), nil
	case *ent.HypothesisTestDeliveryOptionQuery:
		return q.Filter(), nil
	case *ent.HypothesisTestDeliveryOptionLookupQuery:
		return q.Filter(), nil
	case *ent.HypothesisTestDeliveryOptionRequestQuery:
		return q.Filter(), nil
	case *ent.InventoryItemQuery:
		return q.Filter(), nil
	case *ent.LanguageQuery:
		return q.Filter(), nil
	case *ent.LocationQuery:
		return q.Filter(), nil
	case *ent.LocationTagQuery:
		return q.Filter(), nil
	case *ent.NotificationQuery:
		return q.Filter(), nil
	case *ent.OTKRequestsQuery:
		return q.Filter(), nil
	case *ent.OrderQuery:
		return q.Filter(), nil
	case *ent.OrderHistoryQuery:
		return q.Filter(), nil
	case *ent.OrderLineQuery:
		return q.Filter(), nil
	case *ent.OrderSenderQuery:
		return q.Filter(), nil
	case *ent.PackagingQuery:
		return q.Filter(), nil
	case *ent.PackagingDFQuery:
		return q.Filter(), nil
	case *ent.PackagingUSPSQuery:
		return q.Filter(), nil
	case *ent.PackagingUSPSProcessingCategoryQuery:
		return q.Filter(), nil
	case *ent.PackagingUSPSRateIndicatorQuery:
		return q.Filter(), nil
	case *ent.PalletQuery:
		return q.Filter(), nil
	case *ent.ParcelShopQuery:
		return q.Filter(), nil
	case *ent.ParcelShopBringQuery:
		return q.Filter(), nil
	case *ent.ParcelShopDAOQuery:
		return q.Filter(), nil
	case *ent.ParcelShopGLSQuery:
		return q.Filter(), nil
	case *ent.ParcelShopPostNordQuery:
		return q.Filter(), nil
	case *ent.PlanQuery:
		return q.Filter(), nil
	case *ent.PlanHistoryQuery:
		return q.Filter(), nil
	case *ent.PrintJobQuery:
		return q.Filter(), nil
	case *ent.PrinterQuery:
		return q.Filter(), nil
	case *ent.ProductQuery:
		return q.Filter(), nil
	case *ent.ProductImageQuery:
		return q.Filter(), nil
	case *ent.ProductTagQuery:
		return q.Filter(), nil
	case *ent.ProductVariantQuery:
		return q.Filter(), nil
	case *ent.ReturnColliQuery:
		return q.Filter(), nil
	case *ent.ReturnColliHistoryQuery:
		return q.Filter(), nil
	case *ent.ReturnOrderLineQuery:
		return q.Filter(), nil
	case *ent.ReturnPortalQuery:
		return q.Filter(), nil
	case *ent.ReturnPortalClaimQuery:
		return q.Filter(), nil
	case *ent.SeatGroupQuery:
		return q.Filter(), nil
	case *ent.SeatGroupAccessRightQuery:
		return q.Filter(), nil
	case *ent.ShipmentQuery:
		return q.Filter(), nil
	case *ent.ShipmentBringQuery:
		return q.Filter(), nil
	case *ent.ShipmentDAOQuery:
		return q.Filter(), nil
	case *ent.ShipmentDFQuery:
		return q.Filter(), nil
	case *ent.ShipmentDSVQuery:
		return q.Filter(), nil
	case *ent.ShipmentEasyPostQuery:
		return q.Filter(), nil
	case *ent.ShipmentGLSQuery:
		return q.Filter(), nil
	case *ent.ShipmentHistoryQuery:
		return q.Filter(), nil
	case *ent.ShipmentPalletQuery:
		return q.Filter(), nil
	case *ent.ShipmentParcelQuery:
		return q.Filter(), nil
	case *ent.ShipmentPostNordQuery:
		return q.Filter(), nil
	case *ent.ShipmentUSPSQuery:
		return q.Filter(), nil
	case *ent.SignupOptionsQuery:
		return q.Filter(), nil
	case *ent.SystemEventsQuery:
		return q.Filter(), nil
	case *ent.TenantQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	case *ent.UserSeatQuery:
		return q.Filter(), nil
	case *ent.WorkspaceRecentScanQuery:
		return q.Filter(), nil
	case *ent.WorkstationQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.APITokenMutation:
		return m.Filter(), nil
	case *ent.AccessRightMutation:
		return m.Filter(), nil
	case *ent.AddressMutation:
		return m.Filter(), nil
	case *ent.AddressGlobalMutation:
		return m.Filter(), nil
	case *ent.BusinessHoursPeriodMutation:
		return m.Filter(), nil
	case *ent.CarrierMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceBringMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceDAOMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceDFMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceDSVMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceEasyPostMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceGLSMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServicePostNordMutation:
		return m.Filter(), nil
	case *ent.CarrierAdditionalServiceUSPSMutation:
		return m.Filter(), nil
	case *ent.CarrierBrandMutation:
		return m.Filter(), nil
	case *ent.CarrierBringMutation:
		return m.Filter(), nil
	case *ent.CarrierDAOMutation:
		return m.Filter(), nil
	case *ent.CarrierDFMutation:
		return m.Filter(), nil
	case *ent.CarrierDSVMutation:
		return m.Filter(), nil
	case *ent.CarrierEasyPostMutation:
		return m.Filter(), nil
	case *ent.CarrierGLSMutation:
		return m.Filter(), nil
	case *ent.CarrierPostNordMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceBringMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceDAOMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceDFMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceDSVMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceEasyPostMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceGLSMutation:
		return m.Filter(), nil
	case *ent.CarrierServicePostNordMutation:
		return m.Filter(), nil
	case *ent.CarrierServiceUSPSMutation:
		return m.Filter(), nil
	case *ent.CarrierUSPSMutation:
		return m.Filter(), nil
	case *ent.ChangeHistoryMutation:
		return m.Filter(), nil
	case *ent.ColliMutation:
		return m.Filter(), nil
	case *ent.ConnectOptionCarrierMutation:
		return m.Filter(), nil
	case *ent.ConnectOptionPlatformMutation:
		return m.Filter(), nil
	case *ent.ConnectionMutation:
		return m.Filter(), nil
	case *ent.ConnectionBrandMutation:
		return m.Filter(), nil
	case *ent.ConnectionLookupMutation:
		return m.Filter(), nil
	case *ent.ConnectionShopifyMutation:
		return m.Filter(), nil
	case *ent.ConsolidationMutation:
		return m.Filter(), nil
	case *ent.ContactMutation:
		return m.Filter(), nil
	case *ent.CountryMutation:
		return m.Filter(), nil
	case *ent.CountryHarmonizedCodeMutation:
		return m.Filter(), nil
	case *ent.CurrencyMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionBringMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionDAOMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionDFMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionDSVMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionEasyPostMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionGLSMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionPostNordMutation:
		return m.Filter(), nil
	case *ent.DeliveryOptionUSPSMutation:
		return m.Filter(), nil
	case *ent.DeliveryRuleMutation:
		return m.Filter(), nil
	case *ent.DeliveryRuleConstraintMutation:
		return m.Filter(), nil
	case *ent.DeliveryRuleConstraintGroupMutation:
		return m.Filter(), nil
	case *ent.DocumentMutation:
		return m.Filter(), nil
	case *ent.DocumentFileMutation:
		return m.Filter(), nil
	case *ent.EmailTemplateMutation:
		return m.Filter(), nil
	case *ent.HypothesisTestMutation:
		return m.Filter(), nil
	case *ent.HypothesisTestDeliveryOptionMutation:
		return m.Filter(), nil
	case *ent.HypothesisTestDeliveryOptionLookupMutation:
		return m.Filter(), nil
	case *ent.HypothesisTestDeliveryOptionRequestMutation:
		return m.Filter(), nil
	case *ent.InventoryItemMutation:
		return m.Filter(), nil
	case *ent.LanguageMutation:
		return m.Filter(), nil
	case *ent.LocationMutation:
		return m.Filter(), nil
	case *ent.LocationTagMutation:
		return m.Filter(), nil
	case *ent.NotificationMutation:
		return m.Filter(), nil
	case *ent.OTKRequestsMutation:
		return m.Filter(), nil
	case *ent.OrderMutation:
		return m.Filter(), nil
	case *ent.OrderHistoryMutation:
		return m.Filter(), nil
	case *ent.OrderLineMutation:
		return m.Filter(), nil
	case *ent.OrderSenderMutation:
		return m.Filter(), nil
	case *ent.PackagingMutation:
		return m.Filter(), nil
	case *ent.PackagingDFMutation:
		return m.Filter(), nil
	case *ent.PackagingUSPSMutation:
		return m.Filter(), nil
	case *ent.PackagingUSPSProcessingCategoryMutation:
		return m.Filter(), nil
	case *ent.PackagingUSPSRateIndicatorMutation:
		return m.Filter(), nil
	case *ent.PalletMutation:
		return m.Filter(), nil
	case *ent.ParcelShopMutation:
		return m.Filter(), nil
	case *ent.ParcelShopBringMutation:
		return m.Filter(), nil
	case *ent.ParcelShopDAOMutation:
		return m.Filter(), nil
	case *ent.ParcelShopGLSMutation:
		return m.Filter(), nil
	case *ent.ParcelShopPostNordMutation:
		return m.Filter(), nil
	case *ent.PlanMutation:
		return m.Filter(), nil
	case *ent.PlanHistoryMutation:
		return m.Filter(), nil
	case *ent.PrintJobMutation:
		return m.Filter(), nil
	case *ent.PrinterMutation:
		return m.Filter(), nil
	case *ent.ProductMutation:
		return m.Filter(), nil
	case *ent.ProductImageMutation:
		return m.Filter(), nil
	case *ent.ProductTagMutation:
		return m.Filter(), nil
	case *ent.ProductVariantMutation:
		return m.Filter(), nil
	case *ent.ReturnColliMutation:
		return m.Filter(), nil
	case *ent.ReturnColliHistoryMutation:
		return m.Filter(), nil
	case *ent.ReturnOrderLineMutation:
		return m.Filter(), nil
	case *ent.ReturnPortalMutation:
		return m.Filter(), nil
	case *ent.ReturnPortalClaimMutation:
		return m.Filter(), nil
	case *ent.SeatGroupMutation:
		return m.Filter(), nil
	case *ent.SeatGroupAccessRightMutation:
		return m.Filter(), nil
	case *ent.ShipmentMutation:
		return m.Filter(), nil
	case *ent.ShipmentBringMutation:
		return m.Filter(), nil
	case *ent.ShipmentDAOMutation:
		return m.Filter(), nil
	case *ent.ShipmentDFMutation:
		return m.Filter(), nil
	case *ent.ShipmentDSVMutation:
		return m.Filter(), nil
	case *ent.ShipmentEasyPostMutation:
		return m.Filter(), nil
	case *ent.ShipmentGLSMutation:
		return m.Filter(), nil
	case *ent.ShipmentHistoryMutation:
		return m.Filter(), nil
	case *ent.ShipmentPalletMutation:
		return m.Filter(), nil
	case *ent.ShipmentParcelMutation:
		return m.Filter(), nil
	case *ent.ShipmentPostNordMutation:
		return m.Filter(), nil
	case *ent.ShipmentUSPSMutation:
		return m.Filter(), nil
	case *ent.SignupOptionsMutation:
		return m.Filter(), nil
	case *ent.SystemEventsMutation:
		return m.Filter(), nil
	case *ent.TenantMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	case *ent.UserSeatMutation:
		return m.Filter(), nil
	case *ent.WorkspaceRecentScanMutation:
		return m.Filter(), nil
	case *ent.WorkstationMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
