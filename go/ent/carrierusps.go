// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierUSPS is the model entity for the CarrierUSPS schema.
type CarrierUSPS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// IsTestAPI holds the value of the "is_test_api" field.
	IsTestAPI bool `json:"is_test_api,omitempty"`
	// ConsumerKey holds the value of the "consumer_key" field.
	ConsumerKey string `json:"consumer_key,omitempty"`
	// ConsumerSecret holds the value of the "consumer_secret" field.
	ConsumerSecret string `json:"consumer_secret,omitempty"`
	// Mid holds the value of the "mid" field.
	Mid string `json:"mid,omitempty"`
	// ManifestMid holds the value of the "manifest_mid" field.
	ManifestMid string `json:"manifest_mid,omitempty"`
	// Crid holds the value of the "crid" field.
	Crid string `json:"crid,omitempty"`
	// EpsAccountNumber holds the value of the "eps_account_number" field.
	EpsAccountNumber string `json:"eps_account_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierUSPSQuery when eager-loading is set.
	Edges                CarrierUSPSEdges `json:"edges"`
	carrier_carrier_usps *pulid.ID
	selectValues         sql.SelectValues
}

// CarrierUSPSEdges holds the relations/edges for other nodes in the graph.
type CarrierUSPSEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Carrier holds the value of the carrier edge.
	Carrier *Carrier `json:"carrier,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierUSPSEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierUSPSEdges) CarrierOrErr() (*Carrier, error) {
	if e.Carrier != nil {
		return e.Carrier, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrier.Label}
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierUSPS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierusps.FieldID, carrierusps.FieldTenantID:
			values[i] = new(pulid.ID)
		case carrierusps.FieldIsTestAPI:
			values[i] = new(sql.NullBool)
		case carrierusps.FieldConsumerKey, carrierusps.FieldConsumerSecret, carrierusps.FieldMid, carrierusps.FieldManifestMid, carrierusps.FieldCrid, carrierusps.FieldEpsAccountNumber:
			values[i] = new(sql.NullString)
		case carrierusps.ForeignKeys[0]: // carrier_carrier_usps
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierUSPS fields.
func (cu *CarrierUSPS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierusps.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cu.ID = *value
			}
		case carrierusps.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				cu.TenantID = *value
			}
		case carrierusps.FieldIsTestAPI:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_test_api", values[i])
			} else if value.Valid {
				cu.IsTestAPI = value.Bool
			}
		case carrierusps.FieldConsumerKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consumer_key", values[i])
			} else if value.Valid {
				cu.ConsumerKey = value.String
			}
		case carrierusps.FieldConsumerSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field consumer_secret", values[i])
			} else if value.Valid {
				cu.ConsumerSecret = value.String
			}
		case carrierusps.FieldMid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mid", values[i])
			} else if value.Valid {
				cu.Mid = value.String
			}
		case carrierusps.FieldManifestMid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manifest_mid", values[i])
			} else if value.Valid {
				cu.ManifestMid = value.String
			}
		case carrierusps.FieldCrid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crid", values[i])
			} else if value.Valid {
				cu.Crid = value.String
			}
		case carrierusps.FieldEpsAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field eps_account_number", values[i])
			} else if value.Valid {
				cu.EpsAccountNumber = value.String
			}
		case carrierusps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_carrier_usps", values[i])
			} else if value.Valid {
				cu.carrier_carrier_usps = new(pulid.ID)
				*cu.carrier_carrier_usps = *value.S.(*pulid.ID)
			}
		default:
			cu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierUSPS.
// This includes values selected through modifiers, order, etc.
func (cu *CarrierUSPS) Value(name string) (ent.Value, error) {
	return cu.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CarrierUSPS entity.
func (cu *CarrierUSPS) QueryTenant() *TenantQuery {
	return NewCarrierUSPSClient(cu.config).QueryTenant(cu)
}

// QueryCarrier queries the "carrier" edge of the CarrierUSPS entity.
func (cu *CarrierUSPS) QueryCarrier() *CarrierQuery {
	return NewCarrierUSPSClient(cu.config).QueryCarrier(cu)
}

// Update returns a builder for updating this CarrierUSPS.
// Note that you need to call CarrierUSPS.Unwrap() before calling this method if this CarrierUSPS
// was returned from a transaction, and the transaction was committed or rolled back.
func (cu *CarrierUSPS) Update() *CarrierUSPSUpdateOne {
	return NewCarrierUSPSClient(cu.config).UpdateOne(cu)
}

// Unwrap unwraps the CarrierUSPS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cu *CarrierUSPS) Unwrap() *CarrierUSPS {
	_tx, ok := cu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierUSPS is not a transactional entity")
	}
	cu.config.driver = _tx.drv
	return cu
}

// String implements the fmt.Stringer.
func (cu *CarrierUSPS) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierUSPS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cu.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cu.TenantID))
	builder.WriteString(", ")
	builder.WriteString("is_test_api=")
	builder.WriteString(fmt.Sprintf("%v", cu.IsTestAPI))
	builder.WriteString(", ")
	builder.WriteString("consumer_key=")
	builder.WriteString(cu.ConsumerKey)
	builder.WriteString(", ")
	builder.WriteString("consumer_secret=")
	builder.WriteString(cu.ConsumerSecret)
	builder.WriteString(", ")
	builder.WriteString("mid=")
	builder.WriteString(cu.Mid)
	builder.WriteString(", ")
	builder.WriteString("manifest_mid=")
	builder.WriteString(cu.ManifestMid)
	builder.WriteString(", ")
	builder.WriteString("crid=")
	builder.WriteString(cu.Crid)
	builder.WriteString(", ")
	builder.WriteString("eps_account_number=")
	builder.WriteString(cu.EpsAccountNumber)
	builder.WriteByte(')')
	return builder.String()
}

// CarrierUSPSs is a parsable slice of CarrierUSPS.
type CarrierUSPSs []*CarrierUSPS
