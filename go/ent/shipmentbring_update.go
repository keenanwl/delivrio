// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentBringUpdate is the builder for updating ShipmentBring entities.
type ShipmentBringUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentBringMutation
}

// Where appends a list predicates to the ShipmentBringUpdate builder.
func (sbu *ShipmentBringUpdate) Where(ps ...predicate.ShipmentBring) *ShipmentBringUpdate {
	sbu.mutation.Where(ps...)
	return sbu
}

// SetTenantID sets the "tenant_id" field.
func (sbu *ShipmentBringUpdate) SetTenantID(pu pulid.ID) *ShipmentBringUpdate {
	sbu.mutation.SetTenantID(pu)
	return sbu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sbu *ShipmentBringUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentBringUpdate {
	if pu != nil {
		sbu.SetTenantID(*pu)
	}
	return sbu
}

// SetConsignmentNumber sets the "consignment_number" field.
func (sbu *ShipmentBringUpdate) SetConsignmentNumber(s string) *ShipmentBringUpdate {
	sbu.mutation.SetConsignmentNumber(s)
	return sbu
}

// SetNillableConsignmentNumber sets the "consignment_number" field if the given value is not nil.
func (sbu *ShipmentBringUpdate) SetNillableConsignmentNumber(s *string) *ShipmentBringUpdate {
	if s != nil {
		sbu.SetConsignmentNumber(*s)
	}
	return sbu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sbu *ShipmentBringUpdate) SetTenant(t *Tenant) *ShipmentBringUpdate {
	return sbu.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sbu *ShipmentBringUpdate) SetShipmentID(id pulid.ID) *ShipmentBringUpdate {
	sbu.mutation.SetShipmentID(id)
	return sbu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sbu *ShipmentBringUpdate) SetShipment(s *Shipment) *ShipmentBringUpdate {
	return sbu.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentBringMutation object of the builder.
func (sbu *ShipmentBringUpdate) Mutation() *ShipmentBringMutation {
	return sbu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sbu *ShipmentBringUpdate) ClearTenant() *ShipmentBringUpdate {
	sbu.mutation.ClearTenant()
	return sbu
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (sbu *ShipmentBringUpdate) ClearShipment() *ShipmentBringUpdate {
	sbu.mutation.ClearShipment()
	return sbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sbu *ShipmentBringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sbu.sqlSave, sbu.mutation, sbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbu *ShipmentBringUpdate) SaveX(ctx context.Context) int {
	affected, err := sbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sbu *ShipmentBringUpdate) Exec(ctx context.Context) error {
	_, err := sbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbu *ShipmentBringUpdate) ExecX(ctx context.Context) {
	if err := sbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbu *ShipmentBringUpdate) check() error {
	if sbu.mutation.TenantCleared() && len(sbu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentBring.tenant"`)
	}
	if sbu.mutation.ShipmentCleared() && len(sbu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentBring.shipment"`)
	}
	return nil
}

func (sbu *ShipmentBringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentbring.Table, shipmentbring.Columns, sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString))
	if ps := sbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbu.mutation.ConsignmentNumber(); ok {
		_spec.SetField(shipmentbring.FieldConsignmentNumber, field.TypeString, value)
	}
	if sbu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentbring.TenantTable,
			Columns: []string{shipmentbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentbring.TenantTable,
			Columns: []string{shipmentbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sbu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentbring.ShipmentTable,
			Columns: []string{shipmentbring.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentbring.ShipmentTable,
			Columns: []string{shipmentbring.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sbu.mutation.done = true
	return n, nil
}

// ShipmentBringUpdateOne is the builder for updating a single ShipmentBring entity.
type ShipmentBringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentBringMutation
}

// SetTenantID sets the "tenant_id" field.
func (sbuo *ShipmentBringUpdateOne) SetTenantID(pu pulid.ID) *ShipmentBringUpdateOne {
	sbuo.mutation.SetTenantID(pu)
	return sbuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sbuo *ShipmentBringUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentBringUpdateOne {
	if pu != nil {
		sbuo.SetTenantID(*pu)
	}
	return sbuo
}

// SetConsignmentNumber sets the "consignment_number" field.
func (sbuo *ShipmentBringUpdateOne) SetConsignmentNumber(s string) *ShipmentBringUpdateOne {
	sbuo.mutation.SetConsignmentNumber(s)
	return sbuo
}

// SetNillableConsignmentNumber sets the "consignment_number" field if the given value is not nil.
func (sbuo *ShipmentBringUpdateOne) SetNillableConsignmentNumber(s *string) *ShipmentBringUpdateOne {
	if s != nil {
		sbuo.SetConsignmentNumber(*s)
	}
	return sbuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sbuo *ShipmentBringUpdateOne) SetTenant(t *Tenant) *ShipmentBringUpdateOne {
	return sbuo.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sbuo *ShipmentBringUpdateOne) SetShipmentID(id pulid.ID) *ShipmentBringUpdateOne {
	sbuo.mutation.SetShipmentID(id)
	return sbuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sbuo *ShipmentBringUpdateOne) SetShipment(s *Shipment) *ShipmentBringUpdateOne {
	return sbuo.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentBringMutation object of the builder.
func (sbuo *ShipmentBringUpdateOne) Mutation() *ShipmentBringMutation {
	return sbuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sbuo *ShipmentBringUpdateOne) ClearTenant() *ShipmentBringUpdateOne {
	sbuo.mutation.ClearTenant()
	return sbuo
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (sbuo *ShipmentBringUpdateOne) ClearShipment() *ShipmentBringUpdateOne {
	sbuo.mutation.ClearShipment()
	return sbuo
}

// Where appends a list predicates to the ShipmentBringUpdate builder.
func (sbuo *ShipmentBringUpdateOne) Where(ps ...predicate.ShipmentBring) *ShipmentBringUpdateOne {
	sbuo.mutation.Where(ps...)
	return sbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbuo *ShipmentBringUpdateOne) Select(field string, fields ...string) *ShipmentBringUpdateOne {
	sbuo.fields = append([]string{field}, fields...)
	return sbuo
}

// Save executes the query and returns the updated ShipmentBring entity.
func (sbuo *ShipmentBringUpdateOne) Save(ctx context.Context) (*ShipmentBring, error) {
	return withHooks(ctx, sbuo.sqlSave, sbuo.mutation, sbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbuo *ShipmentBringUpdateOne) SaveX(ctx context.Context) *ShipmentBring {
	node, err := sbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbuo *ShipmentBringUpdateOne) Exec(ctx context.Context) error {
	_, err := sbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbuo *ShipmentBringUpdateOne) ExecX(ctx context.Context) {
	if err := sbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sbuo *ShipmentBringUpdateOne) check() error {
	if sbuo.mutation.TenantCleared() && len(sbuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentBring.tenant"`)
	}
	if sbuo.mutation.ShipmentCleared() && len(sbuo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentBring.shipment"`)
	}
	return nil
}

func (sbuo *ShipmentBringUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentBring, err error) {
	if err := sbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentbring.Table, shipmentbring.Columns, sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString))
	id, ok := sbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentBring.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentbring.FieldID)
		for _, f := range fields {
			if !shipmentbring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentbring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbuo.mutation.ConsignmentNumber(); ok {
		_spec.SetField(shipmentbring.FieldConsignmentNumber, field.TypeString, value)
	}
	if sbuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentbring.TenantTable,
			Columns: []string{shipmentbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentbring.TenantTable,
			Columns: []string{shipmentbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sbuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentbring.ShipmentTable,
			Columns: []string{shipmentbring.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sbuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentbring.ShipmentTable,
			Columns: []string{shipmentbring.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentBring{config: sbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbuo.mutation.done = true
	return _node, nil
}
