// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierServiceUSPS is the model entity for the CarrierServiceUSPS schema.
type CarrierServiceUSPS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey carrierserviceusps.APIKey `json:"api_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierServiceUSPSQuery when eager-loading is set.
	Edges                                CarrierServiceUSPSEdges `json:"edges"`
	carrier_service_carrier_service_usps *pulid.ID
	selectValues                         sql.SelectValues
}

// CarrierServiceUSPSEdges holds the relations/edges for other nodes in the graph.
type CarrierServiceUSPSEdges struct {
	// CarrierService holds the value of the carrier_service edge.
	CarrierService *CarrierService `json:"carrier_service,omitempty"`
	// CarrierAdditionalServiceUSPS holds the value of the carrier_additional_service_usps edge.
	CarrierAdditionalServiceUSPS []*CarrierAdditionalServiceUSPS `json:"carrier_additional_service_usps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierAdditionalServiceUSPS map[string][]*CarrierAdditionalServiceUSPS
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceUSPSEdges) CarrierServiceOrErr() (*CarrierService, error) {
	if e.CarrierService != nil {
		return e.CarrierService, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservice.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// CarrierAdditionalServiceUSPSOrErr returns the CarrierAdditionalServiceUSPS value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierServiceUSPSEdges) CarrierAdditionalServiceUSPSOrErr() ([]*CarrierAdditionalServiceUSPS, error) {
	if e.loadedTypes[1] {
		return e.CarrierAdditionalServiceUSPS, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_usps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierServiceUSPS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierserviceusps.FieldID:
			values[i] = new(pulid.ID)
		case carrierserviceusps.FieldAPIKey:
			values[i] = new(sql.NullString)
		case carrierserviceusps.ForeignKeys[0]: // carrier_service_carrier_service_usps
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierServiceUSPS fields.
func (csu *CarrierServiceUSPS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierserviceusps.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				csu.ID = *value
			}
		case carrierserviceusps.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				csu.APIKey = carrierserviceusps.APIKey(value.String)
			}
		case carrierserviceusps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_carrier_service_usps", values[i])
			} else if value.Valid {
				csu.carrier_service_carrier_service_usps = new(pulid.ID)
				*csu.carrier_service_carrier_service_usps = *value.S.(*pulid.ID)
			}
		default:
			csu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierServiceUSPS.
// This includes values selected through modifiers, order, etc.
func (csu *CarrierServiceUSPS) Value(name string) (ent.Value, error) {
	return csu.selectValues.Get(name)
}

// QueryCarrierService queries the "carrier_service" edge of the CarrierServiceUSPS entity.
func (csu *CarrierServiceUSPS) QueryCarrierService() *CarrierServiceQuery {
	return NewCarrierServiceUSPSClient(csu.config).QueryCarrierService(csu)
}

// QueryCarrierAdditionalServiceUSPS queries the "carrier_additional_service_usps" edge of the CarrierServiceUSPS entity.
func (csu *CarrierServiceUSPS) QueryCarrierAdditionalServiceUSPS() *CarrierAdditionalServiceUSPSQuery {
	return NewCarrierServiceUSPSClient(csu.config).QueryCarrierAdditionalServiceUSPS(csu)
}

// Update returns a builder for updating this CarrierServiceUSPS.
// Note that you need to call CarrierServiceUSPS.Unwrap() before calling this method if this CarrierServiceUSPS
// was returned from a transaction, and the transaction was committed or rolled back.
func (csu *CarrierServiceUSPS) Update() *CarrierServiceUSPSUpdateOne {
	return NewCarrierServiceUSPSClient(csu.config).UpdateOne(csu)
}

// Unwrap unwraps the CarrierServiceUSPS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csu *CarrierServiceUSPS) Unwrap() *CarrierServiceUSPS {
	_tx, ok := csu.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierServiceUSPS is not a transactional entity")
	}
	csu.config.driver = _tx.drv
	return csu
}

// String implements the fmt.Stringer.
func (csu *CarrierServiceUSPS) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierServiceUSPS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csu.ID))
	builder.WriteString("api_key=")
	builder.WriteString(fmt.Sprintf("%v", csu.APIKey))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAdditionalServiceUSPS returns the CarrierAdditionalServiceUSPS named value or an error if the edge was not
// loaded in eager-loading with this name.
func (csu *CarrierServiceUSPS) NamedCarrierAdditionalServiceUSPS(name string) ([]*CarrierAdditionalServiceUSPS, error) {
	if csu.Edges.namedCarrierAdditionalServiceUSPS == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := csu.Edges.namedCarrierAdditionalServiceUSPS[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (csu *CarrierServiceUSPS) appendNamedCarrierAdditionalServiceUSPS(name string, edges ...*CarrierAdditionalServiceUSPS) {
	if csu.Edges.namedCarrierAdditionalServiceUSPS == nil {
		csu.Edges.namedCarrierAdditionalServiceUSPS = make(map[string][]*CarrierAdditionalServiceUSPS)
	}
	if len(edges) == 0 {
		csu.Edges.namedCarrierAdditionalServiceUSPS[name] = []*CarrierAdditionalServiceUSPS{}
	} else {
		csu.Edges.namedCarrierAdditionalServiceUSPS[name] = append(csu.Edges.namedCarrierAdditionalServiceUSPS[name], edges...)
	}
}

// CarrierServiceUSPSs is a parsable slice of CarrierServiceUSPS.
type CarrierServiceUSPSs []*CarrierServiceUSPS
