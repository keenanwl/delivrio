// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// APIToken is the client for interacting with the APIToken builders.
	APIToken *APITokenClient
	// AccessRight is the client for interacting with the AccessRight builders.
	AccessRight *AccessRightClient
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// AddressGlobal is the client for interacting with the AddressGlobal builders.
	AddressGlobal *AddressGlobalClient
	// BusinessHoursPeriod is the client for interacting with the BusinessHoursPeriod builders.
	BusinessHoursPeriod *BusinessHoursPeriodClient
	// Carrier is the client for interacting with the Carrier builders.
	Carrier *CarrierClient
	// CarrierAdditionalServiceBring is the client for interacting with the CarrierAdditionalServiceBring builders.
	CarrierAdditionalServiceBring *CarrierAdditionalServiceBringClient
	// CarrierAdditionalServiceDAO is the client for interacting with the CarrierAdditionalServiceDAO builders.
	CarrierAdditionalServiceDAO *CarrierAdditionalServiceDAOClient
	// CarrierAdditionalServiceDF is the client for interacting with the CarrierAdditionalServiceDF builders.
	CarrierAdditionalServiceDF *CarrierAdditionalServiceDFClient
	// CarrierAdditionalServiceDSV is the client for interacting with the CarrierAdditionalServiceDSV builders.
	CarrierAdditionalServiceDSV *CarrierAdditionalServiceDSVClient
	// CarrierAdditionalServiceEasyPost is the client for interacting with the CarrierAdditionalServiceEasyPost builders.
	CarrierAdditionalServiceEasyPost *CarrierAdditionalServiceEasyPostClient
	// CarrierAdditionalServiceGLS is the client for interacting with the CarrierAdditionalServiceGLS builders.
	CarrierAdditionalServiceGLS *CarrierAdditionalServiceGLSClient
	// CarrierAdditionalServicePostNord is the client for interacting with the CarrierAdditionalServicePostNord builders.
	CarrierAdditionalServicePostNord *CarrierAdditionalServicePostNordClient
	// CarrierAdditionalServiceUSPS is the client for interacting with the CarrierAdditionalServiceUSPS builders.
	CarrierAdditionalServiceUSPS *CarrierAdditionalServiceUSPSClient
	// CarrierBrand is the client for interacting with the CarrierBrand builders.
	CarrierBrand *CarrierBrandClient
	// CarrierBring is the client for interacting with the CarrierBring builders.
	CarrierBring *CarrierBringClient
	// CarrierDAO is the client for interacting with the CarrierDAO builders.
	CarrierDAO *CarrierDAOClient
	// CarrierDF is the client for interacting with the CarrierDF builders.
	CarrierDF *CarrierDFClient
	// CarrierDSV is the client for interacting with the CarrierDSV builders.
	CarrierDSV *CarrierDSVClient
	// CarrierEasyPost is the client for interacting with the CarrierEasyPost builders.
	CarrierEasyPost *CarrierEasyPostClient
	// CarrierGLS is the client for interacting with the CarrierGLS builders.
	CarrierGLS *CarrierGLSClient
	// CarrierPostNord is the client for interacting with the CarrierPostNord builders.
	CarrierPostNord *CarrierPostNordClient
	// CarrierService is the client for interacting with the CarrierService builders.
	CarrierService *CarrierServiceClient
	// CarrierServiceBring is the client for interacting with the CarrierServiceBring builders.
	CarrierServiceBring *CarrierServiceBringClient
	// CarrierServiceDAO is the client for interacting with the CarrierServiceDAO builders.
	CarrierServiceDAO *CarrierServiceDAOClient
	// CarrierServiceDF is the client for interacting with the CarrierServiceDF builders.
	CarrierServiceDF *CarrierServiceDFClient
	// CarrierServiceDSV is the client for interacting with the CarrierServiceDSV builders.
	CarrierServiceDSV *CarrierServiceDSVClient
	// CarrierServiceEasyPost is the client for interacting with the CarrierServiceEasyPost builders.
	CarrierServiceEasyPost *CarrierServiceEasyPostClient
	// CarrierServiceGLS is the client for interacting with the CarrierServiceGLS builders.
	CarrierServiceGLS *CarrierServiceGLSClient
	// CarrierServicePostNord is the client for interacting with the CarrierServicePostNord builders.
	CarrierServicePostNord *CarrierServicePostNordClient
	// CarrierServiceUSPS is the client for interacting with the CarrierServiceUSPS builders.
	CarrierServiceUSPS *CarrierServiceUSPSClient
	// CarrierUSPS is the client for interacting with the CarrierUSPS builders.
	CarrierUSPS *CarrierUSPSClient
	// ChangeHistory is the client for interacting with the ChangeHistory builders.
	ChangeHistory *ChangeHistoryClient
	// Colli is the client for interacting with the Colli builders.
	Colli *ColliClient
	// ConnectOptionCarrier is the client for interacting with the ConnectOptionCarrier builders.
	ConnectOptionCarrier *ConnectOptionCarrierClient
	// ConnectOptionPlatform is the client for interacting with the ConnectOptionPlatform builders.
	ConnectOptionPlatform *ConnectOptionPlatformClient
	// Connection is the client for interacting with the Connection builders.
	Connection *ConnectionClient
	// ConnectionBrand is the client for interacting with the ConnectionBrand builders.
	ConnectionBrand *ConnectionBrandClient
	// ConnectionLookup is the client for interacting with the ConnectionLookup builders.
	ConnectionLookup *ConnectionLookupClient
	// ConnectionShopify is the client for interacting with the ConnectionShopify builders.
	ConnectionShopify *ConnectionShopifyClient
	// Consolidation is the client for interacting with the Consolidation builders.
	Consolidation *ConsolidationClient
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// Country is the client for interacting with the Country builders.
	Country *CountryClient
	// CountryHarmonizedCode is the client for interacting with the CountryHarmonizedCode builders.
	CountryHarmonizedCode *CountryHarmonizedCodeClient
	// Currency is the client for interacting with the Currency builders.
	Currency *CurrencyClient
	// DeliveryOption is the client for interacting with the DeliveryOption builders.
	DeliveryOption *DeliveryOptionClient
	// DeliveryOptionBring is the client for interacting with the DeliveryOptionBring builders.
	DeliveryOptionBring *DeliveryOptionBringClient
	// DeliveryOptionDAO is the client for interacting with the DeliveryOptionDAO builders.
	DeliveryOptionDAO *DeliveryOptionDAOClient
	// DeliveryOptionDF is the client for interacting with the DeliveryOptionDF builders.
	DeliveryOptionDF *DeliveryOptionDFClient
	// DeliveryOptionDSV is the client for interacting with the DeliveryOptionDSV builders.
	DeliveryOptionDSV *DeliveryOptionDSVClient
	// DeliveryOptionEasyPost is the client for interacting with the DeliveryOptionEasyPost builders.
	DeliveryOptionEasyPost *DeliveryOptionEasyPostClient
	// DeliveryOptionGLS is the client for interacting with the DeliveryOptionGLS builders.
	DeliveryOptionGLS *DeliveryOptionGLSClient
	// DeliveryOptionPostNord is the client for interacting with the DeliveryOptionPostNord builders.
	DeliveryOptionPostNord *DeliveryOptionPostNordClient
	// DeliveryOptionUSPS is the client for interacting with the DeliveryOptionUSPS builders.
	DeliveryOptionUSPS *DeliveryOptionUSPSClient
	// DeliveryRule is the client for interacting with the DeliveryRule builders.
	DeliveryRule *DeliveryRuleClient
	// DeliveryRuleConstraint is the client for interacting with the DeliveryRuleConstraint builders.
	DeliveryRuleConstraint *DeliveryRuleConstraintClient
	// DeliveryRuleConstraintGroup is the client for interacting with the DeliveryRuleConstraintGroup builders.
	DeliveryRuleConstraintGroup *DeliveryRuleConstraintGroupClient
	// Document is the client for interacting with the Document builders.
	Document *DocumentClient
	// DocumentFile is the client for interacting with the DocumentFile builders.
	DocumentFile *DocumentFileClient
	// EmailTemplate is the client for interacting with the EmailTemplate builders.
	EmailTemplate *EmailTemplateClient
	// HypothesisTest is the client for interacting with the HypothesisTest builders.
	HypothesisTest *HypothesisTestClient
	// HypothesisTestDeliveryOption is the client for interacting with the HypothesisTestDeliveryOption builders.
	HypothesisTestDeliveryOption *HypothesisTestDeliveryOptionClient
	// HypothesisTestDeliveryOptionLookup is the client for interacting with the HypothesisTestDeliveryOptionLookup builders.
	HypothesisTestDeliveryOptionLookup *HypothesisTestDeliveryOptionLookupClient
	// HypothesisTestDeliveryOptionRequest is the client for interacting with the HypothesisTestDeliveryOptionRequest builders.
	HypothesisTestDeliveryOptionRequest *HypothesisTestDeliveryOptionRequestClient
	// InventoryItem is the client for interacting with the InventoryItem builders.
	InventoryItem *InventoryItemClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// LocationTag is the client for interacting with the LocationTag builders.
	LocationTag *LocationTagClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// OTKRequests is the client for interacting with the OTKRequests builders.
	OTKRequests *OTKRequestsClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderHistory is the client for interacting with the OrderHistory builders.
	OrderHistory *OrderHistoryClient
	// OrderLine is the client for interacting with the OrderLine builders.
	OrderLine *OrderLineClient
	// OrderSender is the client for interacting with the OrderSender builders.
	OrderSender *OrderSenderClient
	// Packaging is the client for interacting with the Packaging builders.
	Packaging *PackagingClient
	// PackagingDF is the client for interacting with the PackagingDF builders.
	PackagingDF *PackagingDFClient
	// PackagingUSPS is the client for interacting with the PackagingUSPS builders.
	PackagingUSPS *PackagingUSPSClient
	// PackagingUSPSProcessingCategory is the client for interacting with the PackagingUSPSProcessingCategory builders.
	PackagingUSPSProcessingCategory *PackagingUSPSProcessingCategoryClient
	// PackagingUSPSRateIndicator is the client for interacting with the PackagingUSPSRateIndicator builders.
	PackagingUSPSRateIndicator *PackagingUSPSRateIndicatorClient
	// Pallet is the client for interacting with the Pallet builders.
	Pallet *PalletClient
	// ParcelShop is the client for interacting with the ParcelShop builders.
	ParcelShop *ParcelShopClient
	// ParcelShopBring is the client for interacting with the ParcelShopBring builders.
	ParcelShopBring *ParcelShopBringClient
	// ParcelShopDAO is the client for interacting with the ParcelShopDAO builders.
	ParcelShopDAO *ParcelShopDAOClient
	// ParcelShopGLS is the client for interacting with the ParcelShopGLS builders.
	ParcelShopGLS *ParcelShopGLSClient
	// ParcelShopPostNord is the client for interacting with the ParcelShopPostNord builders.
	ParcelShopPostNord *ParcelShopPostNordClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanHistory is the client for interacting with the PlanHistory builders.
	PlanHistory *PlanHistoryClient
	// PrintJob is the client for interacting with the PrintJob builders.
	PrintJob *PrintJobClient
	// Printer is the client for interacting with the Printer builders.
	Printer *PrinterClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductImage is the client for interacting with the ProductImage builders.
	ProductImage *ProductImageClient
	// ProductTag is the client for interacting with the ProductTag builders.
	ProductTag *ProductTagClient
	// ProductVariant is the client for interacting with the ProductVariant builders.
	ProductVariant *ProductVariantClient
	// ReturnColli is the client for interacting with the ReturnColli builders.
	ReturnColli *ReturnColliClient
	// ReturnColliHistory is the client for interacting with the ReturnColliHistory builders.
	ReturnColliHistory *ReturnColliHistoryClient
	// ReturnOrderLine is the client for interacting with the ReturnOrderLine builders.
	ReturnOrderLine *ReturnOrderLineClient
	// ReturnPortal is the client for interacting with the ReturnPortal builders.
	ReturnPortal *ReturnPortalClient
	// ReturnPortalClaim is the client for interacting with the ReturnPortalClaim builders.
	ReturnPortalClaim *ReturnPortalClaimClient
	// SeatGroup is the client for interacting with the SeatGroup builders.
	SeatGroup *SeatGroupClient
	// SeatGroupAccessRight is the client for interacting with the SeatGroupAccessRight builders.
	SeatGroupAccessRight *SeatGroupAccessRightClient
	// Shipment is the client for interacting with the Shipment builders.
	Shipment *ShipmentClient
	// ShipmentBring is the client for interacting with the ShipmentBring builders.
	ShipmentBring *ShipmentBringClient
	// ShipmentDAO is the client for interacting with the ShipmentDAO builders.
	ShipmentDAO *ShipmentDAOClient
	// ShipmentDF is the client for interacting with the ShipmentDF builders.
	ShipmentDF *ShipmentDFClient
	// ShipmentDSV is the client for interacting with the ShipmentDSV builders.
	ShipmentDSV *ShipmentDSVClient
	// ShipmentEasyPost is the client for interacting with the ShipmentEasyPost builders.
	ShipmentEasyPost *ShipmentEasyPostClient
	// ShipmentGLS is the client for interacting with the ShipmentGLS builders.
	ShipmentGLS *ShipmentGLSClient
	// ShipmentHistory is the client for interacting with the ShipmentHistory builders.
	ShipmentHistory *ShipmentHistoryClient
	// ShipmentPallet is the client for interacting with the ShipmentPallet builders.
	ShipmentPallet *ShipmentPalletClient
	// ShipmentParcel is the client for interacting with the ShipmentParcel builders.
	ShipmentParcel *ShipmentParcelClient
	// ShipmentPostNord is the client for interacting with the ShipmentPostNord builders.
	ShipmentPostNord *ShipmentPostNordClient
	// ShipmentUSPS is the client for interacting with the ShipmentUSPS builders.
	ShipmentUSPS *ShipmentUSPSClient
	// SignupOptions is the client for interacting with the SignupOptions builders.
	SignupOptions *SignupOptionsClient
	// SystemEvents is the client for interacting with the SystemEvents builders.
	SystemEvents *SystemEventsClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserSeat is the client for interacting with the UserSeat builders.
	UserSeat *UserSeatClient
	// WorkspaceRecentScan is the client for interacting with the WorkspaceRecentScan builders.
	WorkspaceRecentScan *WorkspaceRecentScanClient
	// Workstation is the client for interacting with the Workstation builders.
	Workstation *WorkstationClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.APIToken = NewAPITokenClient(tx.config)
	tx.AccessRight = NewAccessRightClient(tx.config)
	tx.Address = NewAddressClient(tx.config)
	tx.AddressGlobal = NewAddressGlobalClient(tx.config)
	tx.BusinessHoursPeriod = NewBusinessHoursPeriodClient(tx.config)
	tx.Carrier = NewCarrierClient(tx.config)
	tx.CarrierAdditionalServiceBring = NewCarrierAdditionalServiceBringClient(tx.config)
	tx.CarrierAdditionalServiceDAO = NewCarrierAdditionalServiceDAOClient(tx.config)
	tx.CarrierAdditionalServiceDF = NewCarrierAdditionalServiceDFClient(tx.config)
	tx.CarrierAdditionalServiceDSV = NewCarrierAdditionalServiceDSVClient(tx.config)
	tx.CarrierAdditionalServiceEasyPost = NewCarrierAdditionalServiceEasyPostClient(tx.config)
	tx.CarrierAdditionalServiceGLS = NewCarrierAdditionalServiceGLSClient(tx.config)
	tx.CarrierAdditionalServicePostNord = NewCarrierAdditionalServicePostNordClient(tx.config)
	tx.CarrierAdditionalServiceUSPS = NewCarrierAdditionalServiceUSPSClient(tx.config)
	tx.CarrierBrand = NewCarrierBrandClient(tx.config)
	tx.CarrierBring = NewCarrierBringClient(tx.config)
	tx.CarrierDAO = NewCarrierDAOClient(tx.config)
	tx.CarrierDF = NewCarrierDFClient(tx.config)
	tx.CarrierDSV = NewCarrierDSVClient(tx.config)
	tx.CarrierEasyPost = NewCarrierEasyPostClient(tx.config)
	tx.CarrierGLS = NewCarrierGLSClient(tx.config)
	tx.CarrierPostNord = NewCarrierPostNordClient(tx.config)
	tx.CarrierService = NewCarrierServiceClient(tx.config)
	tx.CarrierServiceBring = NewCarrierServiceBringClient(tx.config)
	tx.CarrierServiceDAO = NewCarrierServiceDAOClient(tx.config)
	tx.CarrierServiceDF = NewCarrierServiceDFClient(tx.config)
	tx.CarrierServiceDSV = NewCarrierServiceDSVClient(tx.config)
	tx.CarrierServiceEasyPost = NewCarrierServiceEasyPostClient(tx.config)
	tx.CarrierServiceGLS = NewCarrierServiceGLSClient(tx.config)
	tx.CarrierServicePostNord = NewCarrierServicePostNordClient(tx.config)
	tx.CarrierServiceUSPS = NewCarrierServiceUSPSClient(tx.config)
	tx.CarrierUSPS = NewCarrierUSPSClient(tx.config)
	tx.ChangeHistory = NewChangeHistoryClient(tx.config)
	tx.Colli = NewColliClient(tx.config)
	tx.ConnectOptionCarrier = NewConnectOptionCarrierClient(tx.config)
	tx.ConnectOptionPlatform = NewConnectOptionPlatformClient(tx.config)
	tx.Connection = NewConnectionClient(tx.config)
	tx.ConnectionBrand = NewConnectionBrandClient(tx.config)
	tx.ConnectionLookup = NewConnectionLookupClient(tx.config)
	tx.ConnectionShopify = NewConnectionShopifyClient(tx.config)
	tx.Consolidation = NewConsolidationClient(tx.config)
	tx.Contact = NewContactClient(tx.config)
	tx.Country = NewCountryClient(tx.config)
	tx.CountryHarmonizedCode = NewCountryHarmonizedCodeClient(tx.config)
	tx.Currency = NewCurrencyClient(tx.config)
	tx.DeliveryOption = NewDeliveryOptionClient(tx.config)
	tx.DeliveryOptionBring = NewDeliveryOptionBringClient(tx.config)
	tx.DeliveryOptionDAO = NewDeliveryOptionDAOClient(tx.config)
	tx.DeliveryOptionDF = NewDeliveryOptionDFClient(tx.config)
	tx.DeliveryOptionDSV = NewDeliveryOptionDSVClient(tx.config)
	tx.DeliveryOptionEasyPost = NewDeliveryOptionEasyPostClient(tx.config)
	tx.DeliveryOptionGLS = NewDeliveryOptionGLSClient(tx.config)
	tx.DeliveryOptionPostNord = NewDeliveryOptionPostNordClient(tx.config)
	tx.DeliveryOptionUSPS = NewDeliveryOptionUSPSClient(tx.config)
	tx.DeliveryRule = NewDeliveryRuleClient(tx.config)
	tx.DeliveryRuleConstraint = NewDeliveryRuleConstraintClient(tx.config)
	tx.DeliveryRuleConstraintGroup = NewDeliveryRuleConstraintGroupClient(tx.config)
	tx.Document = NewDocumentClient(tx.config)
	tx.DocumentFile = NewDocumentFileClient(tx.config)
	tx.EmailTemplate = NewEmailTemplateClient(tx.config)
	tx.HypothesisTest = NewHypothesisTestClient(tx.config)
	tx.HypothesisTestDeliveryOption = NewHypothesisTestDeliveryOptionClient(tx.config)
	tx.HypothesisTestDeliveryOptionLookup = NewHypothesisTestDeliveryOptionLookupClient(tx.config)
	tx.HypothesisTestDeliveryOptionRequest = NewHypothesisTestDeliveryOptionRequestClient(tx.config)
	tx.InventoryItem = NewInventoryItemClient(tx.config)
	tx.Language = NewLanguageClient(tx.config)
	tx.Location = NewLocationClient(tx.config)
	tx.LocationTag = NewLocationTagClient(tx.config)
	tx.Notification = NewNotificationClient(tx.config)
	tx.OTKRequests = NewOTKRequestsClient(tx.config)
	tx.Order = NewOrderClient(tx.config)
	tx.OrderHistory = NewOrderHistoryClient(tx.config)
	tx.OrderLine = NewOrderLineClient(tx.config)
	tx.OrderSender = NewOrderSenderClient(tx.config)
	tx.Packaging = NewPackagingClient(tx.config)
	tx.PackagingDF = NewPackagingDFClient(tx.config)
	tx.PackagingUSPS = NewPackagingUSPSClient(tx.config)
	tx.PackagingUSPSProcessingCategory = NewPackagingUSPSProcessingCategoryClient(tx.config)
	tx.PackagingUSPSRateIndicator = NewPackagingUSPSRateIndicatorClient(tx.config)
	tx.Pallet = NewPalletClient(tx.config)
	tx.ParcelShop = NewParcelShopClient(tx.config)
	tx.ParcelShopBring = NewParcelShopBringClient(tx.config)
	tx.ParcelShopDAO = NewParcelShopDAOClient(tx.config)
	tx.ParcelShopGLS = NewParcelShopGLSClient(tx.config)
	tx.ParcelShopPostNord = NewParcelShopPostNordClient(tx.config)
	tx.Plan = NewPlanClient(tx.config)
	tx.PlanHistory = NewPlanHistoryClient(tx.config)
	tx.PrintJob = NewPrintJobClient(tx.config)
	tx.Printer = NewPrinterClient(tx.config)
	tx.Product = NewProductClient(tx.config)
	tx.ProductImage = NewProductImageClient(tx.config)
	tx.ProductTag = NewProductTagClient(tx.config)
	tx.ProductVariant = NewProductVariantClient(tx.config)
	tx.ReturnColli = NewReturnColliClient(tx.config)
	tx.ReturnColliHistory = NewReturnColliHistoryClient(tx.config)
	tx.ReturnOrderLine = NewReturnOrderLineClient(tx.config)
	tx.ReturnPortal = NewReturnPortalClient(tx.config)
	tx.ReturnPortalClaim = NewReturnPortalClaimClient(tx.config)
	tx.SeatGroup = NewSeatGroupClient(tx.config)
	tx.SeatGroupAccessRight = NewSeatGroupAccessRightClient(tx.config)
	tx.Shipment = NewShipmentClient(tx.config)
	tx.ShipmentBring = NewShipmentBringClient(tx.config)
	tx.ShipmentDAO = NewShipmentDAOClient(tx.config)
	tx.ShipmentDF = NewShipmentDFClient(tx.config)
	tx.ShipmentDSV = NewShipmentDSVClient(tx.config)
	tx.ShipmentEasyPost = NewShipmentEasyPostClient(tx.config)
	tx.ShipmentGLS = NewShipmentGLSClient(tx.config)
	tx.ShipmentHistory = NewShipmentHistoryClient(tx.config)
	tx.ShipmentPallet = NewShipmentPalletClient(tx.config)
	tx.ShipmentParcel = NewShipmentParcelClient(tx.config)
	tx.ShipmentPostNord = NewShipmentPostNordClient(tx.config)
	tx.ShipmentUSPS = NewShipmentUSPSClient(tx.config)
	tx.SignupOptions = NewSignupOptionsClient(tx.config)
	tx.SystemEvents = NewSystemEventsClient(tx.config)
	tx.Tenant = NewTenantClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.UserSeat = NewUserSeatClient(tx.config)
	tx.WorkspaceRecentScan = NewWorkspaceRecentScanClient(tx.config)
	tx.Workstation = NewWorkstationClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: APIToken.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
