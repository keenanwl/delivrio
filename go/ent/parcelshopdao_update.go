// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopDAOUpdate is the builder for updating ParcelShopDAO entities.
type ParcelShopDAOUpdate struct {
	config
	hooks    []Hook
	mutation *ParcelShopDAOMutation
}

// Where appends a list predicates to the ParcelShopDAOUpdate builder.
func (psdu *ParcelShopDAOUpdate) Where(ps ...predicate.ParcelShopDAO) *ParcelShopDAOUpdate {
	psdu.mutation.Where(ps...)
	return psdu
}

// SetShopID sets the "shop_id" field.
func (psdu *ParcelShopDAOUpdate) SetShopID(s string) *ParcelShopDAOUpdate {
	psdu.mutation.SetShopID(s)
	return psdu
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (psdu *ParcelShopDAOUpdate) SetNillableShopID(s *string) *ParcelShopDAOUpdate {
	if s != nil {
		psdu.SetShopID(*s)
	}
	return psdu
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psdu *ParcelShopDAOUpdate) SetParcelShopID(id pulid.ID) *ParcelShopDAOUpdate {
	psdu.mutation.SetParcelShopID(id)
	return psdu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psdu *ParcelShopDAOUpdate) SetParcelShop(p *ParcelShop) *ParcelShopDAOUpdate {
	return psdu.SetParcelShopID(p.ID)
}

// Mutation returns the ParcelShopDAOMutation object of the builder.
func (psdu *ParcelShopDAOUpdate) Mutation() *ParcelShopDAOMutation {
	return psdu.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (psdu *ParcelShopDAOUpdate) ClearParcelShop() *ParcelShopDAOUpdate {
	psdu.mutation.ClearParcelShop()
	return psdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psdu *ParcelShopDAOUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psdu.sqlSave, psdu.mutation, psdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psdu *ParcelShopDAOUpdate) SaveX(ctx context.Context) int {
	affected, err := psdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psdu *ParcelShopDAOUpdate) Exec(ctx context.Context) error {
	_, err := psdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psdu *ParcelShopDAOUpdate) ExecX(ctx context.Context) {
	if err := psdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psdu *ParcelShopDAOUpdate) check() error {
	if psdu.mutation.ParcelShopCleared() && len(psdu.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopDAO.parcel_shop"`)
	}
	return nil
}

func (psdu *ParcelShopDAOUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshopdao.Table, parcelshopdao.Columns, sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString))
	if ps := psdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psdu.mutation.ShopID(); ok {
		_spec.SetField(parcelshopdao.FieldShopID, field.TypeString, value)
	}
	if psdu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopdao.ParcelShopTable,
			Columns: []string{parcelshopdao.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psdu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopdao.ParcelShopTable,
			Columns: []string{parcelshopdao.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshopdao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psdu.mutation.done = true
	return n, nil
}

// ParcelShopDAOUpdateOne is the builder for updating a single ParcelShopDAO entity.
type ParcelShopDAOUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParcelShopDAOMutation
}

// SetShopID sets the "shop_id" field.
func (psduo *ParcelShopDAOUpdateOne) SetShopID(s string) *ParcelShopDAOUpdateOne {
	psduo.mutation.SetShopID(s)
	return psduo
}

// SetNillableShopID sets the "shop_id" field if the given value is not nil.
func (psduo *ParcelShopDAOUpdateOne) SetNillableShopID(s *string) *ParcelShopDAOUpdateOne {
	if s != nil {
		psduo.SetShopID(*s)
	}
	return psduo
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psduo *ParcelShopDAOUpdateOne) SetParcelShopID(id pulid.ID) *ParcelShopDAOUpdateOne {
	psduo.mutation.SetParcelShopID(id)
	return psduo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psduo *ParcelShopDAOUpdateOne) SetParcelShop(p *ParcelShop) *ParcelShopDAOUpdateOne {
	return psduo.SetParcelShopID(p.ID)
}

// Mutation returns the ParcelShopDAOMutation object of the builder.
func (psduo *ParcelShopDAOUpdateOne) Mutation() *ParcelShopDAOMutation {
	return psduo.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (psduo *ParcelShopDAOUpdateOne) ClearParcelShop() *ParcelShopDAOUpdateOne {
	psduo.mutation.ClearParcelShop()
	return psduo
}

// Where appends a list predicates to the ParcelShopDAOUpdate builder.
func (psduo *ParcelShopDAOUpdateOne) Where(ps ...predicate.ParcelShopDAO) *ParcelShopDAOUpdateOne {
	psduo.mutation.Where(ps...)
	return psduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psduo *ParcelShopDAOUpdateOne) Select(field string, fields ...string) *ParcelShopDAOUpdateOne {
	psduo.fields = append([]string{field}, fields...)
	return psduo
}

// Save executes the query and returns the updated ParcelShopDAO entity.
func (psduo *ParcelShopDAOUpdateOne) Save(ctx context.Context) (*ParcelShopDAO, error) {
	return withHooks(ctx, psduo.sqlSave, psduo.mutation, psduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psduo *ParcelShopDAOUpdateOne) SaveX(ctx context.Context) *ParcelShopDAO {
	node, err := psduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psduo *ParcelShopDAOUpdateOne) Exec(ctx context.Context) error {
	_, err := psduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psduo *ParcelShopDAOUpdateOne) ExecX(ctx context.Context) {
	if err := psduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psduo *ParcelShopDAOUpdateOne) check() error {
	if psduo.mutation.ParcelShopCleared() && len(psduo.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopDAO.parcel_shop"`)
	}
	return nil
}

func (psduo *ParcelShopDAOUpdateOne) sqlSave(ctx context.Context) (_node *ParcelShopDAO, err error) {
	if err := psduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshopdao.Table, parcelshopdao.Columns, sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString))
	id, ok := psduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ParcelShopDAO.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshopdao.FieldID)
		for _, f := range fields {
			if !parcelshopdao.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parcelshopdao.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psduo.mutation.ShopID(); ok {
		_spec.SetField(parcelshopdao.FieldShopID, field.TypeString, value)
	}
	if psduo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopdao.ParcelShopTable,
			Columns: []string{parcelshopdao.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psduo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopdao.ParcelShopTable,
			Columns: []string{parcelshopdao.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ParcelShopDAO{config: psduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshopdao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psduo.mutation.done = true
	return _node, nil
}
