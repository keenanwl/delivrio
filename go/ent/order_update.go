// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetTenantID sets the "tenant_id" field.
func (ou *OrderUpdate) SetTenantID(pu pulid.ID) *OrderUpdate {
	ou.mutation.SetTenantID(pu)
	return ou
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTenantID(pu *pulid.ID) *OrderUpdate {
	if pu != nil {
		ou.SetTenantID(*pu)
	}
	return ou
}

// SetOrderPublicID sets the "order_public_id" field.
func (ou *OrderUpdate) SetOrderPublicID(s string) *OrderUpdate {
	ou.mutation.SetOrderPublicID(s)
	return ou
}

// SetNillableOrderPublicID sets the "order_public_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderPublicID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderPublicID(*s)
	}
	return ou
}

// SetExternalID sets the "external_id" field.
func (ou *OrderUpdate) SetExternalID(s string) *OrderUpdate {
	ou.mutation.SetExternalID(s)
	return ou
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableExternalID(s *string) *OrderUpdate {
	if s != nil {
		ou.SetExternalID(*s)
	}
	return ou
}

// ClearExternalID clears the value of the "external_id" field.
func (ou *OrderUpdate) ClearExternalID() *OrderUpdate {
	ou.mutation.ClearExternalID()
	return ou
}

// SetCommentInternal sets the "comment_internal" field.
func (ou *OrderUpdate) SetCommentInternal(s string) *OrderUpdate {
	ou.mutation.SetCommentInternal(s)
	return ou
}

// SetNillableCommentInternal sets the "comment_internal" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCommentInternal(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCommentInternal(*s)
	}
	return ou
}

// ClearCommentInternal clears the value of the "comment_internal" field.
func (ou *OrderUpdate) ClearCommentInternal() *OrderUpdate {
	ou.mutation.ClearCommentInternal()
	return ou
}

// SetCommentExternal sets the "comment_external" field.
func (ou *OrderUpdate) SetCommentExternal(s string) *OrderUpdate {
	ou.mutation.SetCommentExternal(s)
	return ou
}

// SetNillableCommentExternal sets the "comment_external" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCommentExternal(s *string) *OrderUpdate {
	if s != nil {
		ou.SetCommentExternal(*s)
	}
	return ou
}

// ClearCommentExternal clears the value of the "comment_external" field.
func (ou *OrderUpdate) ClearCommentExternal() *OrderUpdate {
	ou.mutation.ClearCommentExternal()
	return ou
}

// SetEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field.
func (ou *OrderUpdate) SetEmailSyncConfirmationAt(t time.Time) *OrderUpdate {
	ou.mutation.SetEmailSyncConfirmationAt(t)
	return ou
}

// SetNillableEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEmailSyncConfirmationAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetEmailSyncConfirmationAt(*t)
	}
	return ou
}

// ClearEmailSyncConfirmationAt clears the value of the "email_sync_confirmation_at" field.
func (ou *OrderUpdate) ClearEmailSyncConfirmationAt() *OrderUpdate {
	ou.mutation.ClearEmailSyncConfirmationAt()
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(o order.Status) *OrderUpdate {
	ou.mutation.SetStatus(o)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(o *order.Status) *OrderUpdate {
	if o != nil {
		ou.SetStatus(*o)
	}
	return ou
}

// SetNoteAttributes sets the "note_attributes" field.
func (ou *OrderUpdate) SetNoteAttributes(fa fieldjson.NoteAttributes) *OrderUpdate {
	ou.mutation.SetNoteAttributes(fa)
	return ou
}

// ClearNoteAttributes clears the value of the "note_attributes" field.
func (ou *OrderUpdate) ClearNoteAttributes() *OrderUpdate {
	ou.mutation.ClearNoteAttributes()
	return ou
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ou *OrderUpdate) SetTenant(t *Tenant) *OrderUpdate {
	return ou.SetTenantID(t.ID)
}

// AddOrderHistoryIDs adds the "order_history" edge to the OrderHistory entity by IDs.
func (ou *OrderUpdate) AddOrderHistoryIDs(ids ...pulid.ID) *OrderUpdate {
	ou.mutation.AddOrderHistoryIDs(ids...)
	return ou
}

// AddOrderHistory adds the "order_history" edges to the OrderHistory entity.
func (ou *OrderUpdate) AddOrderHistory(o ...*OrderHistory) *OrderUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderHistoryIDs(ids...)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (ou *OrderUpdate) SetConnectionID(id pulid.ID) *OrderUpdate {
	ou.mutation.SetConnectionID(id)
	return ou
}

// SetConnection sets the "connection" edge to the Connection entity.
func (ou *OrderUpdate) SetConnection(c *Connection) *OrderUpdate {
	return ou.SetConnectionID(c.ID)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (ou *OrderUpdate) AddColliIDs(ids ...pulid.ID) *OrderUpdate {
	ou.mutation.AddColliIDs(ids...)
	return ou
}

// AddColli adds the "colli" edges to the Colli entity.
func (ou *OrderUpdate) AddColli(c ...*Colli) *OrderUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (ou *OrderUpdate) AddReturnColliIDs(ids ...pulid.ID) *OrderUpdate {
	ou.mutation.AddReturnColliIDs(ids...)
	return ou
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (ou *OrderUpdate) AddReturnColli(r ...*ReturnColli) *OrderUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.AddReturnColliIDs(ids...)
}

// SetHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID.
func (ou *OrderUpdate) SetHypothesisTestDeliveryOptionRequestID(id pulid.ID) *OrderUpdate {
	ou.mutation.SetHypothesisTestDeliveryOptionRequestID(id)
	return ou
}

// SetNillableHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableHypothesisTestDeliveryOptionRequestID(id *pulid.ID) *OrderUpdate {
	if id != nil {
		ou = ou.SetHypothesisTestDeliveryOptionRequestID(*id)
	}
	return ou
}

// SetHypothesisTestDeliveryOptionRequest sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (ou *OrderUpdate) SetHypothesisTestDeliveryOptionRequest(h *HypothesisTestDeliveryOptionRequest) *OrderUpdate {
	return ou.SetHypothesisTestDeliveryOptionRequestID(h.ID)
}

// SetPalletID sets the "pallet" edge to the Pallet entity by ID.
func (ou *OrderUpdate) SetPalletID(id pulid.ID) *OrderUpdate {
	ou.mutation.SetPalletID(id)
	return ou
}

// SetNillablePalletID sets the "pallet" edge to the Pallet entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillablePalletID(id *pulid.ID) *OrderUpdate {
	if id != nil {
		ou = ou.SetPalletID(*id)
	}
	return ou
}

// SetPallet sets the "pallet" edge to the Pallet entity.
func (ou *OrderUpdate) SetPallet(p *Pallet) *OrderUpdate {
	return ou.SetPalletID(p.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (ou *OrderUpdate) SetConsolidationID(id pulid.ID) *OrderUpdate {
	ou.mutation.SetConsolidationID(id)
	return ou
}

// SetNillableConsolidationID sets the "consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableConsolidationID(id *pulid.ID) *OrderUpdate {
	if id != nil {
		ou = ou.SetConsolidationID(*id)
	}
	return ou
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (ou *OrderUpdate) SetConsolidation(c *Consolidation) *OrderUpdate {
	return ou.SetConsolidationID(c.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ou *OrderUpdate) ClearTenant() *OrderUpdate {
	ou.mutation.ClearTenant()
	return ou
}

// ClearOrderHistory clears all "order_history" edges to the OrderHistory entity.
func (ou *OrderUpdate) ClearOrderHistory() *OrderUpdate {
	ou.mutation.ClearOrderHistory()
	return ou
}

// RemoveOrderHistoryIDs removes the "order_history" edge to OrderHistory entities by IDs.
func (ou *OrderUpdate) RemoveOrderHistoryIDs(ids ...pulid.ID) *OrderUpdate {
	ou.mutation.RemoveOrderHistoryIDs(ids...)
	return ou
}

// RemoveOrderHistory removes "order_history" edges to OrderHistory entities.
func (ou *OrderUpdate) RemoveOrderHistory(o ...*OrderHistory) *OrderUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderHistoryIDs(ids...)
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (ou *OrderUpdate) ClearConnection() *OrderUpdate {
	ou.mutation.ClearConnection()
	return ou
}

// ClearColli clears all "colli" edges to the Colli entity.
func (ou *OrderUpdate) ClearColli() *OrderUpdate {
	ou.mutation.ClearColli()
	return ou
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (ou *OrderUpdate) RemoveColliIDs(ids ...pulid.ID) *OrderUpdate {
	ou.mutation.RemoveColliIDs(ids...)
	return ou
}

// RemoveColli removes "colli" edges to Colli entities.
func (ou *OrderUpdate) RemoveColli(c ...*Colli) *OrderUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveColliIDs(ids...)
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (ou *OrderUpdate) ClearReturnColli() *OrderUpdate {
	ou.mutation.ClearReturnColli()
	return ou
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (ou *OrderUpdate) RemoveReturnColliIDs(ids ...pulid.ID) *OrderUpdate {
	ou.mutation.RemoveReturnColliIDs(ids...)
	return ou
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (ou *OrderUpdate) RemoveReturnColli(r ...*ReturnColli) *OrderUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ou.RemoveReturnColliIDs(ids...)
}

// ClearHypothesisTestDeliveryOptionRequest clears the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (ou *OrderUpdate) ClearHypothesisTestDeliveryOptionRequest() *OrderUpdate {
	ou.mutation.ClearHypothesisTestDeliveryOptionRequest()
	return ou
}

// ClearPallet clears the "pallet" edge to the Pallet entity.
func (ou *OrderUpdate) ClearPallet() *OrderUpdate {
	ou.mutation.ClearPallet()
	return ou
}

// ClearConsolidation clears the "consolidation" edge to the Consolidation entity.
func (ou *OrderUpdate) ClearConsolidation() *OrderUpdate {
	ou.mutation.ClearConsolidation()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if ou.mutation.TenantCleared() && len(ou.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.tenant"`)
	}
	if ou.mutation.ConnectionCleared() && len(ou.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.connection"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderPublicID(); ok {
		_spec.SetField(order.FieldOrderPublicID, field.TypeString, value)
	}
	if value, ok := ou.mutation.ExternalID(); ok {
		_spec.SetField(order.FieldExternalID, field.TypeString, value)
	}
	if ou.mutation.ExternalIDCleared() {
		_spec.ClearField(order.FieldExternalID, field.TypeString)
	}
	if value, ok := ou.mutation.CommentInternal(); ok {
		_spec.SetField(order.FieldCommentInternal, field.TypeString, value)
	}
	if ou.mutation.CommentInternalCleared() {
		_spec.ClearField(order.FieldCommentInternal, field.TypeString)
	}
	if value, ok := ou.mutation.CommentExternal(); ok {
		_spec.SetField(order.FieldCommentExternal, field.TypeString, value)
	}
	if ou.mutation.CommentExternalCleared() {
		_spec.ClearField(order.FieldCommentExternal, field.TypeString)
	}
	if value, ok := ou.mutation.EmailSyncConfirmationAt(); ok {
		_spec.SetField(order.FieldEmailSyncConfirmationAt, field.TypeTime, value)
	}
	if ou.mutation.EmailSyncConfirmationAtCleared() {
		_spec.ClearField(order.FieldEmailSyncConfirmationAt, field.TypeTime)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.NoteAttributes(); ok {
		_spec.SetField(order.FieldNoteAttributes, field.TypeJSON, value)
	}
	if ou.mutation.NoteAttributesCleared() {
		_spec.ClearField(order.FieldNoteAttributes, field.TypeJSON)
	}
	if ou.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderHistoryIDs(); len(nodes) > 0 && !ou.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConnectionTable,
			Columns: []string{order.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConnectionTable,
			Columns: []string{order.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedColliIDs(); len(nodes) > 0 && !ou.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !ou.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{order.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{order.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PalletTable,
			Columns: []string{order.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PalletTable,
			Columns: []string{order.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConsolidationTable,
			Columns: []string{order.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConsolidationTable,
			Columns: []string{order.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetTenantID sets the "tenant_id" field.
func (ouo *OrderUpdateOne) SetTenantID(pu pulid.ID) *OrderUpdateOne {
	ouo.mutation.SetTenantID(pu)
	return ouo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTenantID(pu *pulid.ID) *OrderUpdateOne {
	if pu != nil {
		ouo.SetTenantID(*pu)
	}
	return ouo
}

// SetOrderPublicID sets the "order_public_id" field.
func (ouo *OrderUpdateOne) SetOrderPublicID(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderPublicID(s)
	return ouo
}

// SetNillableOrderPublicID sets the "order_public_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderPublicID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderPublicID(*s)
	}
	return ouo
}

// SetExternalID sets the "external_id" field.
func (ouo *OrderUpdateOne) SetExternalID(s string) *OrderUpdateOne {
	ouo.mutation.SetExternalID(s)
	return ouo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableExternalID(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetExternalID(*s)
	}
	return ouo
}

// ClearExternalID clears the value of the "external_id" field.
func (ouo *OrderUpdateOne) ClearExternalID() *OrderUpdateOne {
	ouo.mutation.ClearExternalID()
	return ouo
}

// SetCommentInternal sets the "comment_internal" field.
func (ouo *OrderUpdateOne) SetCommentInternal(s string) *OrderUpdateOne {
	ouo.mutation.SetCommentInternal(s)
	return ouo
}

// SetNillableCommentInternal sets the "comment_internal" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCommentInternal(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCommentInternal(*s)
	}
	return ouo
}

// ClearCommentInternal clears the value of the "comment_internal" field.
func (ouo *OrderUpdateOne) ClearCommentInternal() *OrderUpdateOne {
	ouo.mutation.ClearCommentInternal()
	return ouo
}

// SetCommentExternal sets the "comment_external" field.
func (ouo *OrderUpdateOne) SetCommentExternal(s string) *OrderUpdateOne {
	ouo.mutation.SetCommentExternal(s)
	return ouo
}

// SetNillableCommentExternal sets the "comment_external" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCommentExternal(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetCommentExternal(*s)
	}
	return ouo
}

// ClearCommentExternal clears the value of the "comment_external" field.
func (ouo *OrderUpdateOne) ClearCommentExternal() *OrderUpdateOne {
	ouo.mutation.ClearCommentExternal()
	return ouo
}

// SetEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field.
func (ouo *OrderUpdateOne) SetEmailSyncConfirmationAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetEmailSyncConfirmationAt(t)
	return ouo
}

// SetNillableEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEmailSyncConfirmationAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetEmailSyncConfirmationAt(*t)
	}
	return ouo
}

// ClearEmailSyncConfirmationAt clears the value of the "email_sync_confirmation_at" field.
func (ouo *OrderUpdateOne) ClearEmailSyncConfirmationAt() *OrderUpdateOne {
	ouo.mutation.ClearEmailSyncConfirmationAt()
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(o order.Status) *OrderUpdateOne {
	ouo.mutation.SetStatus(o)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(o *order.Status) *OrderUpdateOne {
	if o != nil {
		ouo.SetStatus(*o)
	}
	return ouo
}

// SetNoteAttributes sets the "note_attributes" field.
func (ouo *OrderUpdateOne) SetNoteAttributes(fa fieldjson.NoteAttributes) *OrderUpdateOne {
	ouo.mutation.SetNoteAttributes(fa)
	return ouo
}

// ClearNoteAttributes clears the value of the "note_attributes" field.
func (ouo *OrderUpdateOne) ClearNoteAttributes() *OrderUpdateOne {
	ouo.mutation.ClearNoteAttributes()
	return ouo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ouo *OrderUpdateOne) SetTenant(t *Tenant) *OrderUpdateOne {
	return ouo.SetTenantID(t.ID)
}

// AddOrderHistoryIDs adds the "order_history" edge to the OrderHistory entity by IDs.
func (ouo *OrderUpdateOne) AddOrderHistoryIDs(ids ...pulid.ID) *OrderUpdateOne {
	ouo.mutation.AddOrderHistoryIDs(ids...)
	return ouo
}

// AddOrderHistory adds the "order_history" edges to the OrderHistory entity.
func (ouo *OrderUpdateOne) AddOrderHistory(o ...*OrderHistory) *OrderUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderHistoryIDs(ids...)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (ouo *OrderUpdateOne) SetConnectionID(id pulid.ID) *OrderUpdateOne {
	ouo.mutation.SetConnectionID(id)
	return ouo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (ouo *OrderUpdateOne) SetConnection(c *Connection) *OrderUpdateOne {
	return ouo.SetConnectionID(c.ID)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (ouo *OrderUpdateOne) AddColliIDs(ids ...pulid.ID) *OrderUpdateOne {
	ouo.mutation.AddColliIDs(ids...)
	return ouo
}

// AddColli adds the "colli" edges to the Colli entity.
func (ouo *OrderUpdateOne) AddColli(c ...*Colli) *OrderUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (ouo *OrderUpdateOne) AddReturnColliIDs(ids ...pulid.ID) *OrderUpdateOne {
	ouo.mutation.AddReturnColliIDs(ids...)
	return ouo
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (ouo *OrderUpdateOne) AddReturnColli(r ...*ReturnColli) *OrderUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.AddReturnColliIDs(ids...)
}

// SetHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID.
func (ouo *OrderUpdateOne) SetHypothesisTestDeliveryOptionRequestID(id pulid.ID) *OrderUpdateOne {
	ouo.mutation.SetHypothesisTestDeliveryOptionRequestID(id)
	return ouo
}

// SetNillableHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableHypothesisTestDeliveryOptionRequestID(id *pulid.ID) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetHypothesisTestDeliveryOptionRequestID(*id)
	}
	return ouo
}

// SetHypothesisTestDeliveryOptionRequest sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (ouo *OrderUpdateOne) SetHypothesisTestDeliveryOptionRequest(h *HypothesisTestDeliveryOptionRequest) *OrderUpdateOne {
	return ouo.SetHypothesisTestDeliveryOptionRequestID(h.ID)
}

// SetPalletID sets the "pallet" edge to the Pallet entity by ID.
func (ouo *OrderUpdateOne) SetPalletID(id pulid.ID) *OrderUpdateOne {
	ouo.mutation.SetPalletID(id)
	return ouo
}

// SetNillablePalletID sets the "pallet" edge to the Pallet entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePalletID(id *pulid.ID) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetPalletID(*id)
	}
	return ouo
}

// SetPallet sets the "pallet" edge to the Pallet entity.
func (ouo *OrderUpdateOne) SetPallet(p *Pallet) *OrderUpdateOne {
	return ouo.SetPalletID(p.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (ouo *OrderUpdateOne) SetConsolidationID(id pulid.ID) *OrderUpdateOne {
	ouo.mutation.SetConsolidationID(id)
	return ouo
}

// SetNillableConsolidationID sets the "consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableConsolidationID(id *pulid.ID) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetConsolidationID(*id)
	}
	return ouo
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (ouo *OrderUpdateOne) SetConsolidation(c *Consolidation) *OrderUpdateOne {
	return ouo.SetConsolidationID(c.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ouo *OrderUpdateOne) ClearTenant() *OrderUpdateOne {
	ouo.mutation.ClearTenant()
	return ouo
}

// ClearOrderHistory clears all "order_history" edges to the OrderHistory entity.
func (ouo *OrderUpdateOne) ClearOrderHistory() *OrderUpdateOne {
	ouo.mutation.ClearOrderHistory()
	return ouo
}

// RemoveOrderHistoryIDs removes the "order_history" edge to OrderHistory entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderHistoryIDs(ids ...pulid.ID) *OrderUpdateOne {
	ouo.mutation.RemoveOrderHistoryIDs(ids...)
	return ouo
}

// RemoveOrderHistory removes "order_history" edges to OrderHistory entities.
func (ouo *OrderUpdateOne) RemoveOrderHistory(o ...*OrderHistory) *OrderUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderHistoryIDs(ids...)
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (ouo *OrderUpdateOne) ClearConnection() *OrderUpdateOne {
	ouo.mutation.ClearConnection()
	return ouo
}

// ClearColli clears all "colli" edges to the Colli entity.
func (ouo *OrderUpdateOne) ClearColli() *OrderUpdateOne {
	ouo.mutation.ClearColli()
	return ouo
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (ouo *OrderUpdateOne) RemoveColliIDs(ids ...pulid.ID) *OrderUpdateOne {
	ouo.mutation.RemoveColliIDs(ids...)
	return ouo
}

// RemoveColli removes "colli" edges to Colli entities.
func (ouo *OrderUpdateOne) RemoveColli(c ...*Colli) *OrderUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveColliIDs(ids...)
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (ouo *OrderUpdateOne) ClearReturnColli() *OrderUpdateOne {
	ouo.mutation.ClearReturnColli()
	return ouo
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (ouo *OrderUpdateOne) RemoveReturnColliIDs(ids ...pulid.ID) *OrderUpdateOne {
	ouo.mutation.RemoveReturnColliIDs(ids...)
	return ouo
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (ouo *OrderUpdateOne) RemoveReturnColli(r ...*ReturnColli) *OrderUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ouo.RemoveReturnColliIDs(ids...)
}

// ClearHypothesisTestDeliveryOptionRequest clears the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (ouo *OrderUpdateOne) ClearHypothesisTestDeliveryOptionRequest() *OrderUpdateOne {
	ouo.mutation.ClearHypothesisTestDeliveryOptionRequest()
	return ouo
}

// ClearPallet clears the "pallet" edge to the Pallet entity.
func (ouo *OrderUpdateOne) ClearPallet() *OrderUpdateOne {
	ouo.mutation.ClearPallet()
	return ouo
}

// ClearConsolidation clears the "consolidation" edge to the Consolidation entity.
func (ouo *OrderUpdateOne) ClearConsolidation() *OrderUpdateOne {
	ouo.mutation.ClearConsolidation()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if ouo.mutation.TenantCleared() && len(ouo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.tenant"`)
	}
	if ouo.mutation.ConnectionCleared() && len(ouo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.connection"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderPublicID(); ok {
		_spec.SetField(order.FieldOrderPublicID, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ExternalID(); ok {
		_spec.SetField(order.FieldExternalID, field.TypeString, value)
	}
	if ouo.mutation.ExternalIDCleared() {
		_spec.ClearField(order.FieldExternalID, field.TypeString)
	}
	if value, ok := ouo.mutation.CommentInternal(); ok {
		_spec.SetField(order.FieldCommentInternal, field.TypeString, value)
	}
	if ouo.mutation.CommentInternalCleared() {
		_spec.ClearField(order.FieldCommentInternal, field.TypeString)
	}
	if value, ok := ouo.mutation.CommentExternal(); ok {
		_spec.SetField(order.FieldCommentExternal, field.TypeString, value)
	}
	if ouo.mutation.CommentExternalCleared() {
		_spec.ClearField(order.FieldCommentExternal, field.TypeString)
	}
	if value, ok := ouo.mutation.EmailSyncConfirmationAt(); ok {
		_spec.SetField(order.FieldEmailSyncConfirmationAt, field.TypeTime, value)
	}
	if ouo.mutation.EmailSyncConfirmationAtCleared() {
		_spec.ClearField(order.FieldEmailSyncConfirmationAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.NoteAttributes(); ok {
		_spec.SetField(order.FieldNoteAttributes, field.TypeJSON, value)
	}
	if ouo.mutation.NoteAttributesCleared() {
		_spec.ClearField(order.FieldNoteAttributes, field.TypeJSON)
	}
	if ouo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderHistoryIDs(); len(nodes) > 0 && !ouo.mutation.OrderHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConnectionTable,
			Columns: []string{order.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConnectionTable,
			Columns: []string{order.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedColliIDs(); len(nodes) > 0 && !ouo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !ouo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{order.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{order.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PalletTable,
			Columns: []string{order.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PalletTable,
			Columns: []string{order.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConsolidationTable,
			Columns: []string{order.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConsolidationTable,
			Columns: []string{order.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
