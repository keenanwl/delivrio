// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceGLSCreate is the builder for creating a CarrierAdditionalServiceGLS entity.
type CarrierAdditionalServiceGLSCreate struct {
	config
	mutation *CarrierAdditionalServiceGLSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (casgc *CarrierAdditionalServiceGLSCreate) SetLabel(s string) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetLabel(s)
	return casgc
}

// SetMandatory sets the "mandatory" field.
func (casgc *CarrierAdditionalServiceGLSCreate) SetMandatory(b bool) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetMandatory(b)
	return casgc
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (casgc *CarrierAdditionalServiceGLSCreate) SetAllCountriesConsignor(b bool) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetAllCountriesConsignor(b)
	return casgc
}

// SetNillableAllCountriesConsignor sets the "all_countries_consignor" field if the given value is not nil.
func (casgc *CarrierAdditionalServiceGLSCreate) SetNillableAllCountriesConsignor(b *bool) *CarrierAdditionalServiceGLSCreate {
	if b != nil {
		casgc.SetAllCountriesConsignor(*b)
	}
	return casgc
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (casgc *CarrierAdditionalServiceGLSCreate) SetAllCountriesConsignee(b bool) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetAllCountriesConsignee(b)
	return casgc
}

// SetNillableAllCountriesConsignee sets the "all_countries_consignee" field if the given value is not nil.
func (casgc *CarrierAdditionalServiceGLSCreate) SetNillableAllCountriesConsignee(b *bool) *CarrierAdditionalServiceGLSCreate {
	if b != nil {
		casgc.SetAllCountriesConsignee(*b)
	}
	return casgc
}

// SetInternalID sets the "internal_id" field.
func (casgc *CarrierAdditionalServiceGLSCreate) SetInternalID(s string) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetInternalID(s)
	return casgc
}

// SetID sets the "id" field.
func (casgc *CarrierAdditionalServiceGLSCreate) SetID(pu pulid.ID) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetID(pu)
	return casgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (casgc *CarrierAdditionalServiceGLSCreate) SetNillableID(pu *pulid.ID) *CarrierAdditionalServiceGLSCreate {
	if pu != nil {
		casgc.SetID(*pu)
	}
	return casgc
}

// SetCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID.
func (casgc *CarrierAdditionalServiceGLSCreate) SetCarrierServiceGLSID(id pulid.ID) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.SetCarrierServiceGLSID(id)
	return casgc
}

// SetNillableCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID if the given value is not nil.
func (casgc *CarrierAdditionalServiceGLSCreate) SetNillableCarrierServiceGLSID(id *pulid.ID) *CarrierAdditionalServiceGLSCreate {
	if id != nil {
		casgc = casgc.SetCarrierServiceGLSID(*id)
	}
	return casgc
}

// SetCarrierServiceGLS sets the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (casgc *CarrierAdditionalServiceGLSCreate) SetCarrierServiceGLS(c *CarrierServiceGLS) *CarrierAdditionalServiceGLSCreate {
	return casgc.SetCarrierServiceGLSID(c.ID)
}

// AddDeliveryOptionGlIDs adds the "delivery_option_gls" edge to the DeliveryOptionGLS entity by IDs.
func (casgc *CarrierAdditionalServiceGLSCreate) AddDeliveryOptionGlIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.AddDeliveryOptionGlIDs(ids...)
	return casgc
}

// AddDeliveryOptionGLS adds the "delivery_option_gls" edges to the DeliveryOptionGLS entity.
func (casgc *CarrierAdditionalServiceGLSCreate) AddDeliveryOptionGLS(d ...*DeliveryOptionGLS) *CarrierAdditionalServiceGLSCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casgc.AddDeliveryOptionGlIDs(ids...)
}

// AddCountriesConsigneeIDs adds the "countries_consignee" edge to the Country entity by IDs.
func (casgc *CarrierAdditionalServiceGLSCreate) AddCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.AddCountriesConsigneeIDs(ids...)
	return casgc
}

// AddCountriesConsignee adds the "countries_consignee" edges to the Country entity.
func (casgc *CarrierAdditionalServiceGLSCreate) AddCountriesConsignee(c ...*Country) *CarrierAdditionalServiceGLSCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casgc.AddCountriesConsigneeIDs(ids...)
}

// AddCountriesConsignorIDs adds the "countries_consignor" edge to the Country entity by IDs.
func (casgc *CarrierAdditionalServiceGLSCreate) AddCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSCreate {
	casgc.mutation.AddCountriesConsignorIDs(ids...)
	return casgc
}

// AddCountriesConsignor adds the "countries_consignor" edges to the Country entity.
func (casgc *CarrierAdditionalServiceGLSCreate) AddCountriesConsignor(c ...*Country) *CarrierAdditionalServiceGLSCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casgc.AddCountriesConsignorIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceGLSMutation object of the builder.
func (casgc *CarrierAdditionalServiceGLSCreate) Mutation() *CarrierAdditionalServiceGLSMutation {
	return casgc.mutation
}

// Save creates the CarrierAdditionalServiceGLS in the database.
func (casgc *CarrierAdditionalServiceGLSCreate) Save(ctx context.Context) (*CarrierAdditionalServiceGLS, error) {
	if err := casgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, casgc.sqlSave, casgc.mutation, casgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (casgc *CarrierAdditionalServiceGLSCreate) SaveX(ctx context.Context) *CarrierAdditionalServiceGLS {
	v, err := casgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casgc *CarrierAdditionalServiceGLSCreate) Exec(ctx context.Context) error {
	_, err := casgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casgc *CarrierAdditionalServiceGLSCreate) ExecX(ctx context.Context) {
	if err := casgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (casgc *CarrierAdditionalServiceGLSCreate) defaults() error {
	if _, ok := casgc.mutation.AllCountriesConsignor(); !ok {
		v := carrieradditionalservicegls.DefaultAllCountriesConsignor
		casgc.mutation.SetAllCountriesConsignor(v)
	}
	if _, ok := casgc.mutation.AllCountriesConsignee(); !ok {
		v := carrieradditionalservicegls.DefaultAllCountriesConsignee
		casgc.mutation.SetAllCountriesConsignee(v)
	}
	if _, ok := casgc.mutation.ID(); !ok {
		if carrieradditionalservicegls.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrieradditionalservicegls.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrieradditionalservicegls.DefaultID()
		casgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (casgc *CarrierAdditionalServiceGLSCreate) check() error {
	if _, ok := casgc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "CarrierAdditionalServiceGLS.label"`)}
	}
	if _, ok := casgc.mutation.Mandatory(); !ok {
		return &ValidationError{Name: "mandatory", err: errors.New(`ent: missing required field "CarrierAdditionalServiceGLS.mandatory"`)}
	}
	if _, ok := casgc.mutation.AllCountriesConsignor(); !ok {
		return &ValidationError{Name: "all_countries_consignor", err: errors.New(`ent: missing required field "CarrierAdditionalServiceGLS.all_countries_consignor"`)}
	}
	if _, ok := casgc.mutation.AllCountriesConsignee(); !ok {
		return &ValidationError{Name: "all_countries_consignee", err: errors.New(`ent: missing required field "CarrierAdditionalServiceGLS.all_countries_consignee"`)}
	}
	if _, ok := casgc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "CarrierAdditionalServiceGLS.internal_id"`)}
	}
	return nil
}

func (casgc *CarrierAdditionalServiceGLSCreate) sqlSave(ctx context.Context) (*CarrierAdditionalServiceGLS, error) {
	if err := casgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := casgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, casgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	casgc.mutation.id = &_node.ID
	casgc.mutation.done = true
	return _node, nil
}

func (casgc *CarrierAdditionalServiceGLSCreate) createSpec() (*CarrierAdditionalServiceGLS, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierAdditionalServiceGLS{config: casgc.config}
		_spec = sqlgraph.NewCreateSpec(carrieradditionalservicegls.Table, sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString))
	)
	_spec.OnConflict = casgc.conflict
	if id, ok := casgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := casgc.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := casgc.mutation.Mandatory(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldMandatory, field.TypeBool, value)
		_node.Mandatory = value
	}
	if value, ok := casgc.mutation.AllCountriesConsignor(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldAllCountriesConsignor, field.TypeBool, value)
		_node.AllCountriesConsignor = value
	}
	if value, ok := casgc.mutation.AllCountriesConsignee(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldAllCountriesConsignee, field.TypeBool, value)
		_node.AllCountriesConsignee = value
	}
	if value, ok := casgc.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldInternalID, field.TypeString, value)
		_node.InternalID = value
	}
	if nodes := casgc.mutation.CarrierServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicegls.CarrierServiceGLSTable,
			Columns: []string{carrieradditionalservicegls.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_service_gls_carrier_additional_service_gls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := casgc.mutation.DeliveryOptionGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := casgc.mutation.CountriesConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := casgc.mutation.CountriesConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceGLS.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceGLSUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casgc *CarrierAdditionalServiceGLSCreate) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceGLSUpsertOne {
	casgc.conflict = opts
	return &CarrierAdditionalServiceGLSUpsertOne{
		create: casgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casgc *CarrierAdditionalServiceGLSCreate) OnConflictColumns(columns ...string) *CarrierAdditionalServiceGLSUpsertOne {
	casgc.conflict = append(casgc.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceGLSUpsertOne{
		create: casgc,
	}
}

type (
	// CarrierAdditionalServiceGLSUpsertOne is the builder for "upsert"-ing
	//  one CarrierAdditionalServiceGLS node.
	CarrierAdditionalServiceGLSUpsertOne struct {
		create *CarrierAdditionalServiceGLSCreate
	}

	// CarrierAdditionalServiceGLSUpsert is the "OnConflict" setter.
	CarrierAdditionalServiceGLSUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceGLSUpsert) SetLabel(v string) *CarrierAdditionalServiceGLSUpsert {
	u.Set(carrieradditionalservicegls.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsert) UpdateLabel() *CarrierAdditionalServiceGLSUpsert {
	u.SetExcluded(carrieradditionalservicegls.FieldLabel)
	return u
}

// SetMandatory sets the "mandatory" field.
func (u *CarrierAdditionalServiceGLSUpsert) SetMandatory(v bool) *CarrierAdditionalServiceGLSUpsert {
	u.Set(carrieradditionalservicegls.FieldMandatory, v)
	return u
}

// UpdateMandatory sets the "mandatory" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsert) UpdateMandatory() *CarrierAdditionalServiceGLSUpsert {
	u.SetExcluded(carrieradditionalservicegls.FieldMandatory)
	return u
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (u *CarrierAdditionalServiceGLSUpsert) SetAllCountriesConsignor(v bool) *CarrierAdditionalServiceGLSUpsert {
	u.Set(carrieradditionalservicegls.FieldAllCountriesConsignor, v)
	return u
}

// UpdateAllCountriesConsignor sets the "all_countries_consignor" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsert) UpdateAllCountriesConsignor() *CarrierAdditionalServiceGLSUpsert {
	u.SetExcluded(carrieradditionalservicegls.FieldAllCountriesConsignor)
	return u
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (u *CarrierAdditionalServiceGLSUpsert) SetAllCountriesConsignee(v bool) *CarrierAdditionalServiceGLSUpsert {
	u.Set(carrieradditionalservicegls.FieldAllCountriesConsignee, v)
	return u
}

// UpdateAllCountriesConsignee sets the "all_countries_consignee" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsert) UpdateAllCountriesConsignee() *CarrierAdditionalServiceGLSUpsert {
	u.SetExcluded(carrieradditionalservicegls.FieldAllCountriesConsignee)
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierAdditionalServiceGLSUpsert) SetInternalID(v string) *CarrierAdditionalServiceGLSUpsert {
	u.Set(carrieradditionalservicegls.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsert) UpdateInternalID() *CarrierAdditionalServiceGLSUpsert {
	u.SetExcluded(carrieradditionalservicegls.FieldInternalID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalservicegls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceGLSUpsertOne) UpdateNewValues() *CarrierAdditionalServiceGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrieradditionalservicegls.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceGLS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierAdditionalServiceGLSUpsertOne) Ignore() *CarrierAdditionalServiceGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceGLSUpsertOne) DoNothing() *CarrierAdditionalServiceGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceGLSCreate.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceGLSUpsertOne) Update(set func(*CarrierAdditionalServiceGLSUpsert)) *CarrierAdditionalServiceGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceGLSUpsertOne) SetLabel(v string) *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertOne) UpdateLabel() *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateLabel()
	})
}

// SetMandatory sets the "mandatory" field.
func (u *CarrierAdditionalServiceGLSUpsertOne) SetMandatory(v bool) *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetMandatory(v)
	})
}

// UpdateMandatory sets the "mandatory" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertOne) UpdateMandatory() *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateMandatory()
	})
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (u *CarrierAdditionalServiceGLSUpsertOne) SetAllCountriesConsignor(v bool) *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetAllCountriesConsignor(v)
	})
}

// UpdateAllCountriesConsignor sets the "all_countries_consignor" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertOne) UpdateAllCountriesConsignor() *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateAllCountriesConsignor()
	})
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (u *CarrierAdditionalServiceGLSUpsertOne) SetAllCountriesConsignee(v bool) *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetAllCountriesConsignee(v)
	})
}

// UpdateAllCountriesConsignee sets the "all_countries_consignee" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertOne) UpdateAllCountriesConsignee() *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateAllCountriesConsignee()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierAdditionalServiceGLSUpsertOne) SetInternalID(v string) *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertOne) UpdateInternalID() *CarrierAdditionalServiceGLSUpsertOne {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateInternalID()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceGLSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceGLSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceGLSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierAdditionalServiceGLSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierAdditionalServiceGLSUpsertOne.ID is not supported by MySQL driver. Use CarrierAdditionalServiceGLSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierAdditionalServiceGLSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierAdditionalServiceGLSCreateBulk is the builder for creating many CarrierAdditionalServiceGLS entities in bulk.
type CarrierAdditionalServiceGLSCreateBulk struct {
	config
	err      error
	builders []*CarrierAdditionalServiceGLSCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierAdditionalServiceGLS entities in the database.
func (casgcb *CarrierAdditionalServiceGLSCreateBulk) Save(ctx context.Context) ([]*CarrierAdditionalServiceGLS, error) {
	if casgcb.err != nil {
		return nil, casgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(casgcb.builders))
	nodes := make([]*CarrierAdditionalServiceGLS, len(casgcb.builders))
	mutators := make([]Mutator, len(casgcb.builders))
	for i := range casgcb.builders {
		func(i int, root context.Context) {
			builder := casgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierAdditionalServiceGLSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, casgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = casgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, casgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, casgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (casgcb *CarrierAdditionalServiceGLSCreateBulk) SaveX(ctx context.Context) []*CarrierAdditionalServiceGLS {
	v, err := casgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (casgcb *CarrierAdditionalServiceGLSCreateBulk) Exec(ctx context.Context) error {
	_, err := casgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casgcb *CarrierAdditionalServiceGLSCreateBulk) ExecX(ctx context.Context) {
	if err := casgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierAdditionalServiceGLS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierAdditionalServiceGLSUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (casgcb *CarrierAdditionalServiceGLSCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierAdditionalServiceGLSUpsertBulk {
	casgcb.conflict = opts
	return &CarrierAdditionalServiceGLSUpsertBulk{
		create: casgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (casgcb *CarrierAdditionalServiceGLSCreateBulk) OnConflictColumns(columns ...string) *CarrierAdditionalServiceGLSUpsertBulk {
	casgcb.conflict = append(casgcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierAdditionalServiceGLSUpsertBulk{
		create: casgcb,
	}
}

// CarrierAdditionalServiceGLSUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierAdditionalServiceGLS nodes.
type CarrierAdditionalServiceGLSUpsertBulk struct {
	create *CarrierAdditionalServiceGLSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrieradditionalservicegls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierAdditionalServiceGLSUpsertBulk) UpdateNewValues() *CarrierAdditionalServiceGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrieradditionalservicegls.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierAdditionalServiceGLS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierAdditionalServiceGLSUpsertBulk) Ignore() *CarrierAdditionalServiceGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierAdditionalServiceGLSUpsertBulk) DoNothing() *CarrierAdditionalServiceGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierAdditionalServiceGLSCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierAdditionalServiceGLSUpsertBulk) Update(set func(*CarrierAdditionalServiceGLSUpsert)) *CarrierAdditionalServiceGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierAdditionalServiceGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierAdditionalServiceGLSUpsertBulk) SetLabel(v string) *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertBulk) UpdateLabel() *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateLabel()
	})
}

// SetMandatory sets the "mandatory" field.
func (u *CarrierAdditionalServiceGLSUpsertBulk) SetMandatory(v bool) *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetMandatory(v)
	})
}

// UpdateMandatory sets the "mandatory" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertBulk) UpdateMandatory() *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateMandatory()
	})
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (u *CarrierAdditionalServiceGLSUpsertBulk) SetAllCountriesConsignor(v bool) *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetAllCountriesConsignor(v)
	})
}

// UpdateAllCountriesConsignor sets the "all_countries_consignor" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertBulk) UpdateAllCountriesConsignor() *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateAllCountriesConsignor()
	})
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (u *CarrierAdditionalServiceGLSUpsertBulk) SetAllCountriesConsignee(v bool) *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetAllCountriesConsignee(v)
	})
}

// UpdateAllCountriesConsignee sets the "all_countries_consignee" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertBulk) UpdateAllCountriesConsignee() *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateAllCountriesConsignee()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierAdditionalServiceGLSUpsertBulk) SetInternalID(v string) *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierAdditionalServiceGLSUpsertBulk) UpdateInternalID() *CarrierAdditionalServiceGLSUpsertBulk {
	return u.Update(func(s *CarrierAdditionalServiceGLSUpsert) {
		s.UpdateInternalID()
	})
}

// Exec executes the query.
func (u *CarrierAdditionalServiceGLSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierAdditionalServiceGLSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierAdditionalServiceGLSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierAdditionalServiceGLSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
