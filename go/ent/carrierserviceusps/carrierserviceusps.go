// Code generated by ent, DO NOT EDIT.

package carrierserviceusps

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierserviceusps type in the database.
	Label = "carrier_service_usps"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// EdgeCarrierService holds the string denoting the carrier_service edge name in mutations.
	EdgeCarrierService = "carrier_service"
	// EdgeCarrierAdditionalServiceUSPS holds the string denoting the carrier_additional_service_usps edge name in mutations.
	EdgeCarrierAdditionalServiceUSPS = "carrier_additional_service_usps"
	// Table holds the table name of the carrierserviceusps in the database.
	Table = "carrier_service_usp_ss"
	// CarrierServiceTable is the table that holds the carrier_service relation/edge.
	CarrierServiceTable = "carrier_service_usp_ss"
	// CarrierServiceInverseTable is the table name for the CarrierService entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservice" package.
	CarrierServiceInverseTable = "carrier_services"
	// CarrierServiceColumn is the table column denoting the carrier_service relation/edge.
	CarrierServiceColumn = "carrier_service_carrier_service_usps"
	// CarrierAdditionalServiceUSPSTable is the table that holds the carrier_additional_service_usps relation/edge.
	CarrierAdditionalServiceUSPSTable = "carrier_additional_service_usp_ss"
	// CarrierAdditionalServiceUSPSInverseTable is the table name for the CarrierAdditionalServiceUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalserviceusps" package.
	CarrierAdditionalServiceUSPSInverseTable = "carrier_additional_service_usp_ss"
	// CarrierAdditionalServiceUSPSColumn is the table column denoting the carrier_additional_service_usps relation/edge.
	CarrierAdditionalServiceUSPSColumn = "carrier_service_usps_carrier_additional_service_usps"
)

// Columns holds all SQL columns for carrierserviceusps fields.
var Columns = []string{
	FieldID,
	FieldAPIKey,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_service_usp_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_service_carrier_service_usps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// APIKey defines the type for the "api_key" enum field.
type APIKey string

// APIKey values.
const (
	APIKeyPARCEL_SELECT                        APIKey = "PARCEL_SELECT"
	APIKeyPARCEL_SELECT_LIGHTWEIGHT            APIKey = "PARCEL_SELECT_LIGHTWEIGHT"
	APIKeyUSPS_CONNECT_LOCAL                   APIKey = "USPS_CONNECT_LOCAL"
	APIKeyUSPS_CONNECT_REGIONAL                APIKey = "USPS_CONNECT_REGIONAL"
	APIKeyUSPS_CONNECT_MAIL                    APIKey = "USPS_CONNECT_MAIL"
	APIKeyUSPS_GROUND_ADVANTAGE                APIKey = "USPS_GROUND_ADVANTAGE"
	APIKeyPRIORITY_MAIL_EXPRESS                APIKey = "PRIORITY_MAIL_EXPRESS"
	APIKeyPRIORITY_MAIL                        APIKey = "PRIORITY_MAIL"
	APIKeyFIRSTCLASSPACKAGESERVICE             APIKey = "FIRST-CLASS_PACKAGE_SERVICE"
	APIKeyLIBRARY_MAIL                         APIKey = "LIBRARY_MAIL"
	APIKeyMEDIA_MAIL                           APIKey = "MEDIA_MAIL"
	APIKeyBOUND_PRINTED_MATTER                 APIKey = "BOUND_PRINTED_MATTER"
	APIKeyDOMESTIC_MATTER_FOR_THE_BLIND        APIKey = "DOMESTIC_MATTER_FOR_THE_BLIND"
	APIKeyFIRSTCLASSPACKAGERETURNSERVICE       APIKey = "FIRST-CLASS_PACKAGE_RETURN_SERVICE"
	APIKeyGROUND_RETURN_SERVICE                APIKey = "GROUND_RETURN_SERVICE"
	APIKeyPRIORITY_MAIL_EXPRESS_RETURN_SERVICE APIKey = "PRIORITY_MAIL_EXPRESS_RETURN_SERVICE"
	APIKeyPRIORITY_MAIL_RETURN_SERVICE         APIKey = "PRIORITY_MAIL_RETURN_SERVICE"
	APIKeyUSPS_GROUND_ADVANTAGE_RETURN_SERVICE APIKey = "USPS_GROUND_ADVANTAGE_RETURN_SERVICE"
)

func (ak APIKey) String() string {
	return string(ak)
}

// APIKeyValidator is a validator for the "api_key" field enum values. It is called by the builders before save.
func APIKeyValidator(ak APIKey) error {
	switch ak {
	case APIKeyPARCEL_SELECT, APIKeyPARCEL_SELECT_LIGHTWEIGHT, APIKeyUSPS_CONNECT_LOCAL, APIKeyUSPS_CONNECT_REGIONAL, APIKeyUSPS_CONNECT_MAIL, APIKeyUSPS_GROUND_ADVANTAGE, APIKeyPRIORITY_MAIL_EXPRESS, APIKeyPRIORITY_MAIL, APIKeyFIRSTCLASSPACKAGESERVICE, APIKeyLIBRARY_MAIL, APIKeyMEDIA_MAIL, APIKeyBOUND_PRINTED_MATTER, APIKeyDOMESTIC_MATTER_FOR_THE_BLIND, APIKeyFIRSTCLASSPACKAGERETURNSERVICE, APIKeyGROUND_RETURN_SERVICE, APIKeyPRIORITY_MAIL_EXPRESS_RETURN_SERVICE, APIKeyPRIORITY_MAIL_RETURN_SERVICE, APIKeyUSPS_GROUND_ADVANTAGE_RETURN_SERVICE:
		return nil
	default:
		return fmt.Errorf("carrierserviceusps: invalid enum value for api_key field: %q", ak)
	}
}

// OrderOption defines the ordering options for the CarrierServiceUSPS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByCarrierServiceField orders the results by carrier_service field.
func ByCarrierServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierAdditionalServiceUSPSCount orders the results by carrier_additional_service_usps count.
func ByCarrierAdditionalServiceUSPSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServiceUSPSStep(), opts...)
	}
}

// ByCarrierAdditionalServiceUSPS orders the results by carrier_additional_service_usps terms.
func ByCarrierAdditionalServiceUSPS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServiceUSPSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CarrierServiceTable, CarrierServiceColumn),
	)
}
func newCarrierAdditionalServiceUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServiceUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarrierAdditionalServiceUSPSTable, CarrierAdditionalServiceUSPSColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e APIKey) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *APIKey) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = APIKey(str)
	if err := APIKeyValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid APIKey", str)
	}
	return nil
}
