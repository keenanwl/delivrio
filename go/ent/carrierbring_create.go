// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierBringCreate is the builder for creating a CarrierBring entity.
type CarrierBringCreate struct {
	config
	mutation *CarrierBringMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cbc *CarrierBringCreate) SetTenantID(pu pulid.ID) *CarrierBringCreate {
	cbc.mutation.SetTenantID(pu)
	return cbc
}

// SetAPIKey sets the "api_key" field.
func (cbc *CarrierBringCreate) SetAPIKey(s string) *CarrierBringCreate {
	cbc.mutation.SetAPIKey(s)
	return cbc
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cbc *CarrierBringCreate) SetNillableAPIKey(s *string) *CarrierBringCreate {
	if s != nil {
		cbc.SetAPIKey(*s)
	}
	return cbc
}

// SetCustomerNumber sets the "customer_number" field.
func (cbc *CarrierBringCreate) SetCustomerNumber(s string) *CarrierBringCreate {
	cbc.mutation.SetCustomerNumber(s)
	return cbc
}

// SetNillableCustomerNumber sets the "customer_number" field if the given value is not nil.
func (cbc *CarrierBringCreate) SetNillableCustomerNumber(s *string) *CarrierBringCreate {
	if s != nil {
		cbc.SetCustomerNumber(*s)
	}
	return cbc
}

// SetTest sets the "test" field.
func (cbc *CarrierBringCreate) SetTest(b bool) *CarrierBringCreate {
	cbc.mutation.SetTest(b)
	return cbc
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cbc *CarrierBringCreate) SetNillableTest(b *bool) *CarrierBringCreate {
	if b != nil {
		cbc.SetTest(*b)
	}
	return cbc
}

// SetID sets the "id" field.
func (cbc *CarrierBringCreate) SetID(pu pulid.ID) *CarrierBringCreate {
	cbc.mutation.SetID(pu)
	return cbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cbc *CarrierBringCreate) SetNillableID(pu *pulid.ID) *CarrierBringCreate {
	if pu != nil {
		cbc.SetID(*pu)
	}
	return cbc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cbc *CarrierBringCreate) SetTenant(t *Tenant) *CarrierBringCreate {
	return cbc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cbc *CarrierBringCreate) SetCarrierID(id pulid.ID) *CarrierBringCreate {
	cbc.mutation.SetCarrierID(id)
	return cbc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cbc *CarrierBringCreate) SetCarrier(c *Carrier) *CarrierBringCreate {
	return cbc.SetCarrierID(c.ID)
}

// Mutation returns the CarrierBringMutation object of the builder.
func (cbc *CarrierBringCreate) Mutation() *CarrierBringMutation {
	return cbc.mutation
}

// Save creates the CarrierBring in the database.
func (cbc *CarrierBringCreate) Save(ctx context.Context) (*CarrierBring, error) {
	if err := cbc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cbc.sqlSave, cbc.mutation, cbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CarrierBringCreate) SaveX(ctx context.Context) *CarrierBring {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CarrierBringCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CarrierBringCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *CarrierBringCreate) defaults() error {
	if _, ok := cbc.mutation.Test(); !ok {
		v := carrierbring.DefaultTest
		cbc.mutation.SetTest(v)
	}
	if _, ok := cbc.mutation.ID(); !ok {
		if carrierbring.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierbring.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierbring.DefaultID()
		cbc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CarrierBringCreate) check() error {
	if _, ok := cbc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CarrierBring.tenant_id"`)}
	}
	if _, ok := cbc.mutation.Test(); !ok {
		return &ValidationError{Name: "test", err: errors.New(`ent: missing required field "CarrierBring.test"`)}
	}
	if len(cbc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CarrierBring.tenant"`)}
	}
	if len(cbc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "CarrierBring.carrier"`)}
	}
	return nil
}

func (cbc *CarrierBringCreate) sqlSave(ctx context.Context) (*CarrierBring, error) {
	if err := cbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cbc.mutation.id = &_node.ID
	cbc.mutation.done = true
	return _node, nil
}

func (cbc *CarrierBringCreate) createSpec() (*CarrierBring, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierBring{config: cbc.config}
		_spec = sqlgraph.NewCreateSpec(carrierbring.Table, sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString))
	)
	_spec.OnConflict = cbc.conflict
	if id, ok := cbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cbc.mutation.APIKey(); ok {
		_spec.SetField(carrierbring.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := cbc.mutation.CustomerNumber(); ok {
		_spec.SetField(carrierbring.FieldCustomerNumber, field.TypeString, value)
		_node.CustomerNumber = value
	}
	if value, ok := cbc.mutation.Test(); ok {
		_spec.SetField(carrierbring.FieldTest, field.TypeBool, value)
		_node.Test = value
	}
	if nodes := cbc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierbring.TenantTable,
			Columns: []string{carrierbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierbring.CarrierTable,
			Columns: []string{carrierbring.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_bring = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierBring.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierBringUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cbc *CarrierBringCreate) OnConflict(opts ...sql.ConflictOption) *CarrierBringUpsertOne {
	cbc.conflict = opts
	return &CarrierBringUpsertOne{
		create: cbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbc *CarrierBringCreate) OnConflictColumns(columns ...string) *CarrierBringUpsertOne {
	cbc.conflict = append(cbc.conflict, sql.ConflictColumns(columns...))
	return &CarrierBringUpsertOne{
		create: cbc,
	}
}

type (
	// CarrierBringUpsertOne is the builder for "upsert"-ing
	//  one CarrierBring node.
	CarrierBringUpsertOne struct {
		create *CarrierBringCreate
	}

	// CarrierBringUpsert is the "OnConflict" setter.
	CarrierBringUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierBringUpsert) SetTenantID(v pulid.ID) *CarrierBringUpsert {
	u.Set(carrierbring.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierBringUpsert) UpdateTenantID() *CarrierBringUpsert {
	u.SetExcluded(carrierbring.FieldTenantID)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierBringUpsert) SetAPIKey(v string) *CarrierBringUpsert {
	u.Set(carrierbring.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierBringUpsert) UpdateAPIKey() *CarrierBringUpsert {
	u.SetExcluded(carrierbring.FieldAPIKey)
	return u
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *CarrierBringUpsert) ClearAPIKey() *CarrierBringUpsert {
	u.SetNull(carrierbring.FieldAPIKey)
	return u
}

// SetCustomerNumber sets the "customer_number" field.
func (u *CarrierBringUpsert) SetCustomerNumber(v string) *CarrierBringUpsert {
	u.Set(carrierbring.FieldCustomerNumber, v)
	return u
}

// UpdateCustomerNumber sets the "customer_number" field to the value that was provided on create.
func (u *CarrierBringUpsert) UpdateCustomerNumber() *CarrierBringUpsert {
	u.SetExcluded(carrierbring.FieldCustomerNumber)
	return u
}

// ClearCustomerNumber clears the value of the "customer_number" field.
func (u *CarrierBringUpsert) ClearCustomerNumber() *CarrierBringUpsert {
	u.SetNull(carrierbring.FieldCustomerNumber)
	return u
}

// SetTest sets the "test" field.
func (u *CarrierBringUpsert) SetTest(v bool) *CarrierBringUpsert {
	u.Set(carrierbring.FieldTest, v)
	return u
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierBringUpsert) UpdateTest() *CarrierBringUpsert {
	u.SetExcluded(carrierbring.FieldTest)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierbring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierBringUpsertOne) UpdateNewValues() *CarrierBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierbring.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierBring.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierBringUpsertOne) Ignore() *CarrierBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierBringUpsertOne) DoNothing() *CarrierBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierBringCreate.OnConflict
// documentation for more info.
func (u *CarrierBringUpsertOne) Update(set func(*CarrierBringUpsert)) *CarrierBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierBringUpsertOne) SetTenantID(v pulid.ID) *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierBringUpsertOne) UpdateTenantID() *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateTenantID()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierBringUpsertOne) SetAPIKey(v string) *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierBringUpsertOne) UpdateAPIKey() *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *CarrierBringUpsertOne) ClearAPIKey() *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.ClearAPIKey()
	})
}

// SetCustomerNumber sets the "customer_number" field.
func (u *CarrierBringUpsertOne) SetCustomerNumber(v string) *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetCustomerNumber(v)
	})
}

// UpdateCustomerNumber sets the "customer_number" field to the value that was provided on create.
func (u *CarrierBringUpsertOne) UpdateCustomerNumber() *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateCustomerNumber()
	})
}

// ClearCustomerNumber clears the value of the "customer_number" field.
func (u *CarrierBringUpsertOne) ClearCustomerNumber() *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.ClearCustomerNumber()
	})
}

// SetTest sets the "test" field.
func (u *CarrierBringUpsertOne) SetTest(v bool) *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierBringUpsertOne) UpdateTest() *CarrierBringUpsertOne {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateTest()
	})
}

// Exec executes the query.
func (u *CarrierBringUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierBringCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierBringUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierBringUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierBringUpsertOne.ID is not supported by MySQL driver. Use CarrierBringUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierBringUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierBringCreateBulk is the builder for creating many CarrierBring entities in bulk.
type CarrierBringCreateBulk struct {
	config
	err      error
	builders []*CarrierBringCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierBring entities in the database.
func (cbcb *CarrierBringCreateBulk) Save(ctx context.Context) ([]*CarrierBring, error) {
	if cbcb.err != nil {
		return nil, cbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CarrierBring, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierBringMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CarrierBringCreateBulk) SaveX(ctx context.Context) []*CarrierBring {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CarrierBringCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CarrierBringCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierBring.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierBringUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cbcb *CarrierBringCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierBringUpsertBulk {
	cbcb.conflict = opts
	return &CarrierBringUpsertBulk{
		create: cbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbcb *CarrierBringCreateBulk) OnConflictColumns(columns ...string) *CarrierBringUpsertBulk {
	cbcb.conflict = append(cbcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierBringUpsertBulk{
		create: cbcb,
	}
}

// CarrierBringUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierBring nodes.
type CarrierBringUpsertBulk struct {
	create *CarrierBringCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierbring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierBringUpsertBulk) UpdateNewValues() *CarrierBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierbring.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierBring.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierBringUpsertBulk) Ignore() *CarrierBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierBringUpsertBulk) DoNothing() *CarrierBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierBringCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierBringUpsertBulk) Update(set func(*CarrierBringUpsert)) *CarrierBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierBringUpsertBulk) SetTenantID(v pulid.ID) *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierBringUpsertBulk) UpdateTenantID() *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateTenantID()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *CarrierBringUpsertBulk) SetAPIKey(v string) *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *CarrierBringUpsertBulk) UpdateAPIKey() *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *CarrierBringUpsertBulk) ClearAPIKey() *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.ClearAPIKey()
	})
}

// SetCustomerNumber sets the "customer_number" field.
func (u *CarrierBringUpsertBulk) SetCustomerNumber(v string) *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetCustomerNumber(v)
	})
}

// UpdateCustomerNumber sets the "customer_number" field to the value that was provided on create.
func (u *CarrierBringUpsertBulk) UpdateCustomerNumber() *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateCustomerNumber()
	})
}

// ClearCustomerNumber clears the value of the "customer_number" field.
func (u *CarrierBringUpsertBulk) ClearCustomerNumber() *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.ClearCustomerNumber()
	})
}

// SetTest sets the "test" field.
func (u *CarrierBringUpsertBulk) SetTest(v bool) *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.SetTest(v)
	})
}

// UpdateTest sets the "test" field to the value that was provided on create.
func (u *CarrierBringUpsertBulk) UpdateTest() *CarrierBringUpsertBulk {
	return u.Update(func(s *CarrierBringUpsert) {
		s.UpdateTest()
	})
}

// Exec executes the query.
func (u *CarrierBringUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierBringCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierBringCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierBringUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
