// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionRequestUpdate is the builder for updating HypothesisTestDeliveryOptionRequest entities.
type HypothesisTestDeliveryOptionRequestUpdate struct {
	config
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionRequestMutation
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionRequestUpdate builder.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) Where(ps ...predicate.HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.Where(ps...)
	return htdoru
}

// SetTenantID sets the "tenant_id" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetTenantID(pu)
	return htdoru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetNillableTenantID(pu *pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	if pu != nil {
		htdoru.SetTenantID(*pu)
	}
	return htdoru
}

// SetOrderHash sets the "order_hash" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetOrderHash(s string) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetOrderHash(s)
	return htdoru
}

// SetNillableOrderHash sets the "order_hash" field if the given value is not nil.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetNillableOrderHash(s *string) *HypothesisTestDeliveryOptionRequestUpdate {
	if s != nil {
		htdoru.SetOrderHash(*s)
	}
	return htdoru
}

// SetShippingAddressHash sets the "shipping_address_hash" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetShippingAddressHash(s string) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetShippingAddressHash(s)
	return htdoru
}

// SetNillableShippingAddressHash sets the "shipping_address_hash" field if the given value is not nil.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetNillableShippingAddressHash(s *string) *HypothesisTestDeliveryOptionRequestUpdate {
	if s != nil {
		htdoru.SetShippingAddressHash(*s)
	}
	return htdoru
}

// SetIsControlGroup sets the "is_control_group" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetIsControlGroup(b bool) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetIsControlGroup(b)
	return htdoru
}

// SetNillableIsControlGroup sets the "is_control_group" field if the given value is not nil.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetNillableIsControlGroup(b *bool) *HypothesisTestDeliveryOptionRequestUpdate {
	if b != nil {
		htdoru.SetIsControlGroup(*b)
	}
	return htdoru
}

// SetRequestCount sets the "request_count" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetRequestCount(u uint) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.ResetRequestCount()
	htdoru.mutation.SetRequestCount(u)
	return htdoru
}

// SetNillableRequestCount sets the "request_count" field if the given value is not nil.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetNillableRequestCount(u *uint) *HypothesisTestDeliveryOptionRequestUpdate {
	if u != nil {
		htdoru.SetRequestCount(*u)
	}
	return htdoru
}

// AddRequestCount adds u to the "request_count" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) AddRequestCount(u int) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.AddRequestCount(u)
	return htdoru
}

// SetLastRequestedAt sets the "last_requested_at" field.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetLastRequestedAt(t time.Time) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetLastRequestedAt(t)
	return htdoru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionRequestUpdate {
	return htdoru.SetTenantID(t.ID)
}

// SetHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetHypothesisTestDeliveryOptionID(id pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetHypothesisTestDeliveryOptionID(id)
	return htdoru
}

// SetHypothesisTestDeliveryOption sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetHypothesisTestDeliveryOption(h *HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionRequestUpdate {
	return htdoru.SetHypothesisTestDeliveryOptionID(h.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetOrderID(id pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.SetOrderID(id)
	return htdoru
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetNillableOrderID(id *pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	if id != nil {
		htdoru = htdoru.SetOrderID(*id)
	}
	return htdoru
}

// SetOrder sets the "order" edge to the Order entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SetOrder(o *Order) *HypothesisTestDeliveryOptionRequestUpdate {
	return htdoru.SetOrderID(o.ID)
}

// AddHypothesisTestDeliveryOptionLookupIDs adds the "hypothesis_test_delivery_option_lookup" edge to the HypothesisTestDeliveryOptionLookup entity by IDs.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) AddHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
	return htdoru
}

// AddHypothesisTestDeliveryOptionLookup adds the "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) AddHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionRequestUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdoru.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// Mutation returns the HypothesisTestDeliveryOptionRequestMutation object of the builder.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) Mutation() *HypothesisTestDeliveryOptionRequestMutation {
	return htdoru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) ClearTenant() *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.ClearTenant()
	return htdoru
}

// ClearHypothesisTestDeliveryOption clears the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) ClearHypothesisTestDeliveryOption() *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.ClearHypothesisTestDeliveryOption()
	return htdoru
}

// ClearOrder clears the "order" edge to the Order entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) ClearOrder() *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.ClearOrder()
	return htdoru
}

// ClearHypothesisTestDeliveryOptionLookup clears all "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) ClearHypothesisTestDeliveryOptionLookup() *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.ClearHypothesisTestDeliveryOptionLookup()
	return htdoru
}

// RemoveHypothesisTestDeliveryOptionLookupIDs removes the "hypothesis_test_delivery_option_lookup" edge to HypothesisTestDeliveryOptionLookup entities by IDs.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) RemoveHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionRequestUpdate {
	htdoru.mutation.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
	return htdoru
}

// RemoveHypothesisTestDeliveryOptionLookup removes "hypothesis_test_delivery_option_lookup" edges to HypothesisTestDeliveryOptionLookup entities.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) RemoveHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionRequestUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdoru.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) Save(ctx context.Context) (int, error) {
	if err := htdoru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, htdoru.sqlSave, htdoru.mutation, htdoru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := htdoru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) Exec(ctx context.Context) error {
	_, err := htdoru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) ExecX(ctx context.Context) {
	if err := htdoru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) defaults() error {
	if _, ok := htdoru.mutation.LastRequestedAt(); !ok {
		if hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt == nil {
			return fmt.Errorf("ent: uninitialized hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt (forgotten import ent/runtime?)")
		}
		v := hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt()
		htdoru.mutation.SetLastRequestedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) check() error {
	if htdoru.mutation.TenantCleared() && len(htdoru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionRequest.tenant"`)
	}
	if htdoru.mutation.HypothesisTestDeliveryOptionCleared() && len(htdoru.mutation.HypothesisTestDeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionRequest.hypothesis_test_delivery_option"`)
	}
	return nil
}

func (htdoru *HypothesisTestDeliveryOptionRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htdoru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString))
	if ps := htdoru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htdoru.mutation.OrderHash(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldOrderHash, field.TypeString, value)
	}
	if value, ok := htdoru.mutation.ShippingAddressHash(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldShippingAddressHash, field.TypeString, value)
	}
	if value, ok := htdoru.mutation.IsControlGroup(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldIsControlGroup, field.TypeBool, value)
	}
	if value, ok := htdoru.mutation.RequestCount(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldRequestCount, field.TypeUint, value)
	}
	if value, ok := htdoru.mutation.AddedRequestCount(); ok {
		_spec.AddField(hypothesistestdeliveryoptionrequest.FieldRequestCount, field.TypeUint, value)
	}
	if value, ok := htdoru.mutation.LastRequestedAt(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldLastRequestedAt, field.TypeTime, value)
	}
	if htdoru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoru.mutation.HypothesisTestDeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoru.mutation.HypothesisTestDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.OrderTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.OrderTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoru.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoru.mutation.RemovedHypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 && !htdoru.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoru.mutation.HypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htdoru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistestdeliveryoptionrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htdoru.mutation.done = true
	return n, nil
}

// HypothesisTestDeliveryOptionRequestUpdateOne is the builder for updating a single HypothesisTestDeliveryOptionRequest entity.
type HypothesisTestDeliveryOptionRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionRequestMutation
}

// SetTenantID sets the "tenant_id" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetTenantID(pu)
	return htdoruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetNillableTenantID(pu *pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	if pu != nil {
		htdoruo.SetTenantID(*pu)
	}
	return htdoruo
}

// SetOrderHash sets the "order_hash" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetOrderHash(s string) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetOrderHash(s)
	return htdoruo
}

// SetNillableOrderHash sets the "order_hash" field if the given value is not nil.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetNillableOrderHash(s *string) *HypothesisTestDeliveryOptionRequestUpdateOne {
	if s != nil {
		htdoruo.SetOrderHash(*s)
	}
	return htdoruo
}

// SetShippingAddressHash sets the "shipping_address_hash" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetShippingAddressHash(s string) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetShippingAddressHash(s)
	return htdoruo
}

// SetNillableShippingAddressHash sets the "shipping_address_hash" field if the given value is not nil.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetNillableShippingAddressHash(s *string) *HypothesisTestDeliveryOptionRequestUpdateOne {
	if s != nil {
		htdoruo.SetShippingAddressHash(*s)
	}
	return htdoruo
}

// SetIsControlGroup sets the "is_control_group" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetIsControlGroup(b bool) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetIsControlGroup(b)
	return htdoruo
}

// SetNillableIsControlGroup sets the "is_control_group" field if the given value is not nil.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetNillableIsControlGroup(b *bool) *HypothesisTestDeliveryOptionRequestUpdateOne {
	if b != nil {
		htdoruo.SetIsControlGroup(*b)
	}
	return htdoruo
}

// SetRequestCount sets the "request_count" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetRequestCount(u uint) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.ResetRequestCount()
	htdoruo.mutation.SetRequestCount(u)
	return htdoruo
}

// SetNillableRequestCount sets the "request_count" field if the given value is not nil.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetNillableRequestCount(u *uint) *HypothesisTestDeliveryOptionRequestUpdateOne {
	if u != nil {
		htdoruo.SetRequestCount(*u)
	}
	return htdoruo
}

// AddRequestCount adds u to the "request_count" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) AddRequestCount(u int) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.AddRequestCount(u)
	return htdoruo
}

// SetLastRequestedAt sets the "last_requested_at" field.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetLastRequestedAt(t time.Time) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetLastRequestedAt(t)
	return htdoruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionRequestUpdateOne {
	return htdoruo.SetTenantID(t.ID)
}

// SetHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetHypothesisTestDeliveryOptionID(id pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetHypothesisTestDeliveryOptionID(id)
	return htdoruo
}

// SetHypothesisTestDeliveryOption sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetHypothesisTestDeliveryOption(h *HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionRequestUpdateOne {
	return htdoruo.SetHypothesisTestDeliveryOptionID(h.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetOrderID(id pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.SetOrderID(id)
	return htdoruo
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetNillableOrderID(id *pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	if id != nil {
		htdoruo = htdoruo.SetOrderID(*id)
	}
	return htdoruo
}

// SetOrder sets the "order" edge to the Order entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SetOrder(o *Order) *HypothesisTestDeliveryOptionRequestUpdateOne {
	return htdoruo.SetOrderID(o.ID)
}

// AddHypothesisTestDeliveryOptionLookupIDs adds the "hypothesis_test_delivery_option_lookup" edge to the HypothesisTestDeliveryOptionLookup entity by IDs.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) AddHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
	return htdoruo
}

// AddHypothesisTestDeliveryOptionLookup adds the "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) AddHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionRequestUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdoruo.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// Mutation returns the HypothesisTestDeliveryOptionRequestMutation object of the builder.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) Mutation() *HypothesisTestDeliveryOptionRequestMutation {
	return htdoruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) ClearTenant() *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.ClearTenant()
	return htdoruo
}

// ClearHypothesisTestDeliveryOption clears the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) ClearHypothesisTestDeliveryOption() *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.ClearHypothesisTestDeliveryOption()
	return htdoruo
}

// ClearOrder clears the "order" edge to the Order entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) ClearOrder() *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.ClearOrder()
	return htdoruo
}

// ClearHypothesisTestDeliveryOptionLookup clears all "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) ClearHypothesisTestDeliveryOptionLookup() *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.ClearHypothesisTestDeliveryOptionLookup()
	return htdoruo
}

// RemoveHypothesisTestDeliveryOptionLookupIDs removes the "hypothesis_test_delivery_option_lookup" edge to HypothesisTestDeliveryOptionLookup entities by IDs.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) RemoveHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
	return htdoruo
}

// RemoveHypothesisTestDeliveryOptionLookup removes "hypothesis_test_delivery_option_lookup" edges to HypothesisTestDeliveryOptionLookup entities.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) RemoveHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionRequestUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdoruo.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionRequestUpdate builder.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) Where(ps ...predicate.HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.mutation.Where(ps...)
	return htdoruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) Select(field string, fields ...string) *HypothesisTestDeliveryOptionRequestUpdateOne {
	htdoruo.fields = append([]string{field}, fields...)
	return htdoruo
}

// Save executes the query and returns the updated HypothesisTestDeliveryOptionRequest entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) Save(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	if err := htdoruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, htdoruo.sqlSave, htdoruo.mutation, htdoruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) SaveX(ctx context.Context) *HypothesisTestDeliveryOptionRequest {
	node, err := htdoruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := htdoruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) ExecX(ctx context.Context) {
	if err := htdoruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) defaults() error {
	if _, ok := htdoruo.mutation.LastRequestedAt(); !ok {
		if hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt == nil {
			return fmt.Errorf("ent: uninitialized hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt (forgotten import ent/runtime?)")
		}
		v := hypothesistestdeliveryoptionrequest.UpdateDefaultLastRequestedAt()
		htdoruo.mutation.SetLastRequestedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) check() error {
	if htdoruo.mutation.TenantCleared() && len(htdoruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionRequest.tenant"`)
	}
	if htdoruo.mutation.HypothesisTestDeliveryOptionCleared() && len(htdoruo.mutation.HypothesisTestDeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionRequest.hypothesis_test_delivery_option"`)
	}
	return nil
}

func (htdoruo *HypothesisTestDeliveryOptionRequestUpdateOne) sqlSave(ctx context.Context) (_node *HypothesisTestDeliveryOptionRequest, err error) {
	if err := htdoruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString))
	id, ok := htdoruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HypothesisTestDeliveryOptionRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htdoruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoptionrequest.FieldID)
		for _, f := range fields {
			if !hypothesistestdeliveryoptionrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hypothesistestdeliveryoptionrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htdoruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htdoruo.mutation.OrderHash(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldOrderHash, field.TypeString, value)
	}
	if value, ok := htdoruo.mutation.ShippingAddressHash(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldShippingAddressHash, field.TypeString, value)
	}
	if value, ok := htdoruo.mutation.IsControlGroup(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldIsControlGroup, field.TypeBool, value)
	}
	if value, ok := htdoruo.mutation.RequestCount(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldRequestCount, field.TypeUint, value)
	}
	if value, ok := htdoruo.mutation.AddedRequestCount(); ok {
		_spec.AddField(hypothesistestdeliveryoptionrequest.FieldRequestCount, field.TypeUint, value)
	}
	if value, ok := htdoruo.mutation.LastRequestedAt(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldLastRequestedAt, field.TypeTime, value)
	}
	if htdoruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoruo.mutation.HypothesisTestDeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoruo.mutation.HypothesisTestDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.OrderTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.OrderTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoruo.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoruo.mutation.RemovedHypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 && !htdoruo.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoruo.mutation.HypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HypothesisTestDeliveryOptionRequest{config: htdoruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htdoruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistestdeliveryoptionrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htdoruo.mutation.done = true
	return _node, nil
}
