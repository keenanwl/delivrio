// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkstationUpdate is the builder for updating Workstation entities.
type WorkstationUpdate struct {
	config
	hooks    []Hook
	mutation *WorkstationMutation
}

// Where appends a list predicates to the WorkstationUpdate builder.
func (wu *WorkstationUpdate) Where(ps ...predicate.Workstation) *WorkstationUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetTenantID sets the "tenant_id" field.
func (wu *WorkstationUpdate) SetTenantID(pu pulid.ID) *WorkstationUpdate {
	wu.mutation.SetTenantID(pu)
	return wu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableTenantID(pu *pulid.ID) *WorkstationUpdate {
	if pu != nil {
		wu.SetTenantID(*pu)
	}
	return wu
}

// SetArchivedAt sets the "archived_at" field.
func (wu *WorkstationUpdate) SetArchivedAt(t time.Time) *WorkstationUpdate {
	wu.mutation.SetArchivedAt(t)
	return wu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableArchivedAt(t *time.Time) *WorkstationUpdate {
	if t != nil {
		wu.SetArchivedAt(*t)
	}
	return wu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (wu *WorkstationUpdate) ClearArchivedAt() *WorkstationUpdate {
	wu.mutation.ClearArchivedAt()
	return wu
}

// SetName sets the "name" field.
func (wu *WorkstationUpdate) SetName(s string) *WorkstationUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableName(s *string) *WorkstationUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetDeviceType sets the "device_type" field.
func (wu *WorkstationUpdate) SetDeviceType(wt workstation.DeviceType) *WorkstationUpdate {
	wu.mutation.SetDeviceType(wt)
	return wu
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableDeviceType(wt *workstation.DeviceType) *WorkstationUpdate {
	if wt != nil {
		wu.SetDeviceType(*wt)
	}
	return wu
}

// SetWorkstationID sets the "workstation_id" field.
func (wu *WorkstationUpdate) SetWorkstationID(pu pulid.ID) *WorkstationUpdate {
	wu.mutation.SetWorkstationID(pu)
	return wu
}

// SetNillableWorkstationID sets the "workstation_id" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableWorkstationID(pu *pulid.ID) *WorkstationUpdate {
	if pu != nil {
		wu.SetWorkstationID(*pu)
	}
	return wu
}

// SetLastPing sets the "last_ping" field.
func (wu *WorkstationUpdate) SetLastPing(t time.Time) *WorkstationUpdate {
	wu.mutation.SetLastPing(t)
	return wu
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableLastPing(t *time.Time) *WorkstationUpdate {
	if t != nil {
		wu.SetLastPing(*t)
	}
	return wu
}

// ClearLastPing clears the value of the "last_ping" field.
func (wu *WorkstationUpdate) ClearLastPing() *WorkstationUpdate {
	wu.mutation.ClearLastPing()
	return wu
}

// SetStatus sets the "status" field.
func (wu *WorkstationUpdate) SetStatus(w workstation.Status) *WorkstationUpdate {
	wu.mutation.SetStatus(w)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableStatus(w *workstation.Status) *WorkstationUpdate {
	if w != nil {
		wu.SetStatus(*w)
	}
	return wu
}

// SetAutoPrintReceiver sets the "auto_print_receiver" field.
func (wu *WorkstationUpdate) SetAutoPrintReceiver(b bool) *WorkstationUpdate {
	wu.mutation.SetAutoPrintReceiver(b)
	return wu
}

// SetNillableAutoPrintReceiver sets the "auto_print_receiver" field if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableAutoPrintReceiver(b *bool) *WorkstationUpdate {
	if b != nil {
		wu.SetAutoPrintReceiver(*b)
	}
	return wu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wu *WorkstationUpdate) SetTenant(t *Tenant) *WorkstationUpdate {
	return wu.SetTenantID(t.ID)
}

// AddPrinterIDs adds the "printer" edge to the Printer entity by IDs.
func (wu *WorkstationUpdate) AddPrinterIDs(ids ...pulid.ID) *WorkstationUpdate {
	wu.mutation.AddPrinterIDs(ids...)
	return wu
}

// AddPrinter adds the "printer" edges to the Printer entity.
func (wu *WorkstationUpdate) AddPrinter(p ...*Printer) *WorkstationUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.AddPrinterIDs(ids...)
}

// SetSelectedUserID sets the "selected_user" edge to the User entity by ID.
func (wu *WorkstationUpdate) SetSelectedUserID(id pulid.ID) *WorkstationUpdate {
	wu.mutation.SetSelectedUserID(id)
	return wu
}

// SetNillableSelectedUserID sets the "selected_user" edge to the User entity by ID if the given value is not nil.
func (wu *WorkstationUpdate) SetNillableSelectedUserID(id *pulid.ID) *WorkstationUpdate {
	if id != nil {
		wu = wu.SetSelectedUserID(*id)
	}
	return wu
}

// SetSelectedUser sets the "selected_user" edge to the User entity.
func (wu *WorkstationUpdate) SetSelectedUser(u *User) *WorkstationUpdate {
	return wu.SetSelectedUserID(u.ID)
}

// Mutation returns the WorkstationMutation object of the builder.
func (wu *WorkstationUpdate) Mutation() *WorkstationMutation {
	return wu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (wu *WorkstationUpdate) ClearTenant() *WorkstationUpdate {
	wu.mutation.ClearTenant()
	return wu
}

// ClearPrinter clears all "printer" edges to the Printer entity.
func (wu *WorkstationUpdate) ClearPrinter() *WorkstationUpdate {
	wu.mutation.ClearPrinter()
	return wu
}

// RemovePrinterIDs removes the "printer" edge to Printer entities by IDs.
func (wu *WorkstationUpdate) RemovePrinterIDs(ids ...pulid.ID) *WorkstationUpdate {
	wu.mutation.RemovePrinterIDs(ids...)
	return wu
}

// RemovePrinter removes "printer" edges to Printer entities.
func (wu *WorkstationUpdate) RemovePrinter(p ...*Printer) *WorkstationUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wu.RemovePrinterIDs(ids...)
}

// ClearSelectedUser clears the "selected_user" edge to the User entity.
func (wu *WorkstationUpdate) ClearSelectedUser() *WorkstationUpdate {
	wu.mutation.ClearSelectedUser()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkstationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkstationUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkstationUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkstationUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkstationUpdate) check() error {
	if v, ok := wu.mutation.DeviceType(); ok {
		if err := workstation.DeviceTypeValidator(v); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`ent: validator failed for field "Workstation.device_type": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Status(); ok {
		if err := workstation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Workstation.status": %w`, err)}
		}
	}
	if wu.mutation.TenantCleared() && len(wu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Workstation.tenant"`)
	}
	return nil
}

func (wu *WorkstationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workstation.Table, workstation.Columns, sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.ArchivedAt(); ok {
		_spec.SetField(workstation.FieldArchivedAt, field.TypeTime, value)
	}
	if wu.mutation.ArchivedAtCleared() {
		_spec.ClearField(workstation.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(workstation.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.DeviceType(); ok {
		_spec.SetField(workstation.FieldDeviceType, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.WorkstationID(); ok {
		_spec.SetField(workstation.FieldWorkstationID, field.TypeString, value)
	}
	if value, ok := wu.mutation.LastPing(); ok {
		_spec.SetField(workstation.FieldLastPing, field.TypeTime, value)
	}
	if wu.mutation.LastPingCleared() {
		_spec.ClearField(workstation.FieldLastPing, field.TypeTime)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(workstation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := wu.mutation.AutoPrintReceiver(); ok {
		_spec.SetField(workstation.FieldAutoPrintReceiver, field.TypeBool, value)
	}
	if wu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.TenantTable,
			Columns: []string{workstation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.TenantTable,
			Columns: []string{workstation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.PrinterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedPrinterIDs(); len(nodes) > 0 && !wu.mutation.PrinterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.PrinterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.SelectedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workstation.SelectedUserTable,
			Columns: []string{workstation.SelectedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.SelectedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workstation.SelectedUserTable,
			Columns: []string{workstation.SelectedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workstation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkstationUpdateOne is the builder for updating a single Workstation entity.
type WorkstationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkstationMutation
}

// SetTenantID sets the "tenant_id" field.
func (wuo *WorkstationUpdateOne) SetTenantID(pu pulid.ID) *WorkstationUpdateOne {
	wuo.mutation.SetTenantID(pu)
	return wuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableTenantID(pu *pulid.ID) *WorkstationUpdateOne {
	if pu != nil {
		wuo.SetTenantID(*pu)
	}
	return wuo
}

// SetArchivedAt sets the "archived_at" field.
func (wuo *WorkstationUpdateOne) SetArchivedAt(t time.Time) *WorkstationUpdateOne {
	wuo.mutation.SetArchivedAt(t)
	return wuo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableArchivedAt(t *time.Time) *WorkstationUpdateOne {
	if t != nil {
		wuo.SetArchivedAt(*t)
	}
	return wuo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (wuo *WorkstationUpdateOne) ClearArchivedAt() *WorkstationUpdateOne {
	wuo.mutation.ClearArchivedAt()
	return wuo
}

// SetName sets the "name" field.
func (wuo *WorkstationUpdateOne) SetName(s string) *WorkstationUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableName(s *string) *WorkstationUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetDeviceType sets the "device_type" field.
func (wuo *WorkstationUpdateOne) SetDeviceType(wt workstation.DeviceType) *WorkstationUpdateOne {
	wuo.mutation.SetDeviceType(wt)
	return wuo
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableDeviceType(wt *workstation.DeviceType) *WorkstationUpdateOne {
	if wt != nil {
		wuo.SetDeviceType(*wt)
	}
	return wuo
}

// SetWorkstationID sets the "workstation_id" field.
func (wuo *WorkstationUpdateOne) SetWorkstationID(pu pulid.ID) *WorkstationUpdateOne {
	wuo.mutation.SetWorkstationID(pu)
	return wuo
}

// SetNillableWorkstationID sets the "workstation_id" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableWorkstationID(pu *pulid.ID) *WorkstationUpdateOne {
	if pu != nil {
		wuo.SetWorkstationID(*pu)
	}
	return wuo
}

// SetLastPing sets the "last_ping" field.
func (wuo *WorkstationUpdateOne) SetLastPing(t time.Time) *WorkstationUpdateOne {
	wuo.mutation.SetLastPing(t)
	return wuo
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableLastPing(t *time.Time) *WorkstationUpdateOne {
	if t != nil {
		wuo.SetLastPing(*t)
	}
	return wuo
}

// ClearLastPing clears the value of the "last_ping" field.
func (wuo *WorkstationUpdateOne) ClearLastPing() *WorkstationUpdateOne {
	wuo.mutation.ClearLastPing()
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WorkstationUpdateOne) SetStatus(w workstation.Status) *WorkstationUpdateOne {
	wuo.mutation.SetStatus(w)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableStatus(w *workstation.Status) *WorkstationUpdateOne {
	if w != nil {
		wuo.SetStatus(*w)
	}
	return wuo
}

// SetAutoPrintReceiver sets the "auto_print_receiver" field.
func (wuo *WorkstationUpdateOne) SetAutoPrintReceiver(b bool) *WorkstationUpdateOne {
	wuo.mutation.SetAutoPrintReceiver(b)
	return wuo
}

// SetNillableAutoPrintReceiver sets the "auto_print_receiver" field if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableAutoPrintReceiver(b *bool) *WorkstationUpdateOne {
	if b != nil {
		wuo.SetAutoPrintReceiver(*b)
	}
	return wuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wuo *WorkstationUpdateOne) SetTenant(t *Tenant) *WorkstationUpdateOne {
	return wuo.SetTenantID(t.ID)
}

// AddPrinterIDs adds the "printer" edge to the Printer entity by IDs.
func (wuo *WorkstationUpdateOne) AddPrinterIDs(ids ...pulid.ID) *WorkstationUpdateOne {
	wuo.mutation.AddPrinterIDs(ids...)
	return wuo
}

// AddPrinter adds the "printer" edges to the Printer entity.
func (wuo *WorkstationUpdateOne) AddPrinter(p ...*Printer) *WorkstationUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.AddPrinterIDs(ids...)
}

// SetSelectedUserID sets the "selected_user" edge to the User entity by ID.
func (wuo *WorkstationUpdateOne) SetSelectedUserID(id pulid.ID) *WorkstationUpdateOne {
	wuo.mutation.SetSelectedUserID(id)
	return wuo
}

// SetNillableSelectedUserID sets the "selected_user" edge to the User entity by ID if the given value is not nil.
func (wuo *WorkstationUpdateOne) SetNillableSelectedUserID(id *pulid.ID) *WorkstationUpdateOne {
	if id != nil {
		wuo = wuo.SetSelectedUserID(*id)
	}
	return wuo
}

// SetSelectedUser sets the "selected_user" edge to the User entity.
func (wuo *WorkstationUpdateOne) SetSelectedUser(u *User) *WorkstationUpdateOne {
	return wuo.SetSelectedUserID(u.ID)
}

// Mutation returns the WorkstationMutation object of the builder.
func (wuo *WorkstationUpdateOne) Mutation() *WorkstationMutation {
	return wuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (wuo *WorkstationUpdateOne) ClearTenant() *WorkstationUpdateOne {
	wuo.mutation.ClearTenant()
	return wuo
}

// ClearPrinter clears all "printer" edges to the Printer entity.
func (wuo *WorkstationUpdateOne) ClearPrinter() *WorkstationUpdateOne {
	wuo.mutation.ClearPrinter()
	return wuo
}

// RemovePrinterIDs removes the "printer" edge to Printer entities by IDs.
func (wuo *WorkstationUpdateOne) RemovePrinterIDs(ids ...pulid.ID) *WorkstationUpdateOne {
	wuo.mutation.RemovePrinterIDs(ids...)
	return wuo
}

// RemovePrinter removes "printer" edges to Printer entities.
func (wuo *WorkstationUpdateOne) RemovePrinter(p ...*Printer) *WorkstationUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wuo.RemovePrinterIDs(ids...)
}

// ClearSelectedUser clears the "selected_user" edge to the User entity.
func (wuo *WorkstationUpdateOne) ClearSelectedUser() *WorkstationUpdateOne {
	wuo.mutation.ClearSelectedUser()
	return wuo
}

// Where appends a list predicates to the WorkstationUpdate builder.
func (wuo *WorkstationUpdateOne) Where(ps ...predicate.Workstation) *WorkstationUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkstationUpdateOne) Select(field string, fields ...string) *WorkstationUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workstation entity.
func (wuo *WorkstationUpdateOne) Save(ctx context.Context) (*Workstation, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkstationUpdateOne) SaveX(ctx context.Context) *Workstation {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkstationUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkstationUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkstationUpdateOne) check() error {
	if v, ok := wuo.mutation.DeviceType(); ok {
		if err := workstation.DeviceTypeValidator(v); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`ent: validator failed for field "Workstation.device_type": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Status(); ok {
		if err := workstation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Workstation.status": %w`, err)}
		}
	}
	if wuo.mutation.TenantCleared() && len(wuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Workstation.tenant"`)
	}
	return nil
}

func (wuo *WorkstationUpdateOne) sqlSave(ctx context.Context) (_node *Workstation, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workstation.Table, workstation.Columns, sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workstation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workstation.FieldID)
		for _, f := range fields {
			if !workstation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workstation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.ArchivedAt(); ok {
		_spec.SetField(workstation.FieldArchivedAt, field.TypeTime, value)
	}
	if wuo.mutation.ArchivedAtCleared() {
		_spec.ClearField(workstation.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(workstation.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.DeviceType(); ok {
		_spec.SetField(workstation.FieldDeviceType, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.WorkstationID(); ok {
		_spec.SetField(workstation.FieldWorkstationID, field.TypeString, value)
	}
	if value, ok := wuo.mutation.LastPing(); ok {
		_spec.SetField(workstation.FieldLastPing, field.TypeTime, value)
	}
	if wuo.mutation.LastPingCleared() {
		_spec.ClearField(workstation.FieldLastPing, field.TypeTime)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(workstation.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := wuo.mutation.AutoPrintReceiver(); ok {
		_spec.SetField(workstation.FieldAutoPrintReceiver, field.TypeBool, value)
	}
	if wuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.TenantTable,
			Columns: []string{workstation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.TenantTable,
			Columns: []string{workstation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.PrinterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedPrinterIDs(); len(nodes) > 0 && !wuo.mutation.PrinterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.PrinterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.SelectedUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workstation.SelectedUserTable,
			Columns: []string{workstation.SelectedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.SelectedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workstation.SelectedUserTable,
			Columns: []string{workstation.SelectedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workstation{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workstation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
