// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentUpdate is the builder for updating Shipment entities.
type ShipmentUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentMutation
}

// Where appends a list predicates to the ShipmentUpdate builder.
func (su *ShipmentUpdate) Where(ps ...predicate.Shipment) *ShipmentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTenantID sets the "tenant_id" field.
func (su *ShipmentUpdate) SetTenantID(pu pulid.ID) *ShipmentUpdate {
	su.mutation.SetTenantID(pu)
	return su
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentUpdate {
	if pu != nil {
		su.SetTenantID(*pu)
	}
	return su
}

// SetShipmentPublicID sets the "shipment_public_id" field.
func (su *ShipmentUpdate) SetShipmentPublicID(s string) *ShipmentUpdate {
	su.mutation.SetShipmentPublicID(s)
	return su
}

// SetNillableShipmentPublicID sets the "shipment_public_id" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentPublicID(s *string) *ShipmentUpdate {
	if s != nil {
		su.SetShipmentPublicID(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *ShipmentUpdate) SetStatus(s shipment.Status) *ShipmentUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ShipmentUpdate) SetNillableStatus(s *shipment.Status) *ShipmentUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (su *ShipmentUpdate) SetTenant(t *Tenant) *ShipmentUpdate {
	return su.SetTenantID(t.ID)
}

// AddShipmentHistoryIDs adds the "shipment_history" edge to the ShipmentHistory entity by IDs.
func (su *ShipmentUpdate) AddShipmentHistoryIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.AddShipmentHistoryIDs(ids...)
	return su
}

// AddShipmentHistory adds the "shipment_history" edges to the ShipmentHistory entity.
func (su *ShipmentUpdate) AddShipmentHistory(s ...*ShipmentHistory) *ShipmentUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddShipmentHistoryIDs(ids...)
}

// SetShipmentBringID sets the "shipment_bring" edge to the ShipmentBring entity by ID.
func (su *ShipmentUpdate) SetShipmentBringID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentBringID(id)
	return su
}

// SetNillableShipmentBringID sets the "shipment_bring" edge to the ShipmentBring entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentBringID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentBringID(*id)
	}
	return su
}

// SetShipmentBring sets the "shipment_bring" edge to the ShipmentBring entity.
func (su *ShipmentUpdate) SetShipmentBring(s *ShipmentBring) *ShipmentUpdate {
	return su.SetShipmentBringID(s.ID)
}

// SetShipmentDAOID sets the "shipment_dao" edge to the ShipmentDAO entity by ID.
func (su *ShipmentUpdate) SetShipmentDAOID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentDAOID(id)
	return su
}

// SetNillableShipmentDAOID sets the "shipment_dao" edge to the ShipmentDAO entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentDAOID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentDAOID(*id)
	}
	return su
}

// SetShipmentDAO sets the "shipment_dao" edge to the ShipmentDAO entity.
func (su *ShipmentUpdate) SetShipmentDAO(s *ShipmentDAO) *ShipmentUpdate {
	return su.SetShipmentDAOID(s.ID)
}

// SetShipmentDFID sets the "shipment_df" edge to the ShipmentDF entity by ID.
func (su *ShipmentUpdate) SetShipmentDFID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentDFID(id)
	return su
}

// SetNillableShipmentDFID sets the "shipment_df" edge to the ShipmentDF entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentDFID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentDFID(*id)
	}
	return su
}

// SetShipmentDF sets the "shipment_df" edge to the ShipmentDF entity.
func (su *ShipmentUpdate) SetShipmentDF(s *ShipmentDF) *ShipmentUpdate {
	return su.SetShipmentDFID(s.ID)
}

// SetShipmentDSVID sets the "shipment_dsv" edge to the ShipmentDSV entity by ID.
func (su *ShipmentUpdate) SetShipmentDSVID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentDSVID(id)
	return su
}

// SetNillableShipmentDSVID sets the "shipment_dsv" edge to the ShipmentDSV entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentDSVID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentDSVID(*id)
	}
	return su
}

// SetShipmentDSV sets the "shipment_dsv" edge to the ShipmentDSV entity.
func (su *ShipmentUpdate) SetShipmentDSV(s *ShipmentDSV) *ShipmentUpdate {
	return su.SetShipmentDSVID(s.ID)
}

// SetShipmentEasyPostID sets the "shipment_easy_post" edge to the ShipmentEasyPost entity by ID.
func (su *ShipmentUpdate) SetShipmentEasyPostID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentEasyPostID(id)
	return su
}

// SetNillableShipmentEasyPostID sets the "shipment_easy_post" edge to the ShipmentEasyPost entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentEasyPostID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentEasyPostID(*id)
	}
	return su
}

// SetShipmentEasyPost sets the "shipment_easy_post" edge to the ShipmentEasyPost entity.
func (su *ShipmentUpdate) SetShipmentEasyPost(s *ShipmentEasyPost) *ShipmentUpdate {
	return su.SetShipmentEasyPostID(s.ID)
}

// SetShipmentPostNordID sets the "shipment_post_nord" edge to the ShipmentPostNord entity by ID.
func (su *ShipmentUpdate) SetShipmentPostNordID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentPostNordID(id)
	return su
}

// SetNillableShipmentPostNordID sets the "shipment_post_nord" edge to the ShipmentPostNord entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentPostNordID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentPostNordID(*id)
	}
	return su
}

// SetShipmentPostNord sets the "shipment_post_nord" edge to the ShipmentPostNord entity.
func (su *ShipmentUpdate) SetShipmentPostNord(s *ShipmentPostNord) *ShipmentUpdate {
	return su.SetShipmentPostNordID(s.ID)
}

// SetShipmentGLSID sets the "shipment_gls" edge to the ShipmentGLS entity by ID.
func (su *ShipmentUpdate) SetShipmentGLSID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentGLSID(id)
	return su
}

// SetNillableShipmentGLSID sets the "shipment_gls" edge to the ShipmentGLS entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentGLSID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentGLSID(*id)
	}
	return su
}

// SetShipmentGLS sets the "shipment_gls" edge to the ShipmentGLS entity.
func (su *ShipmentUpdate) SetShipmentGLS(s *ShipmentGLS) *ShipmentUpdate {
	return su.SetShipmentGLSID(s.ID)
}

// SetShipmentUSPSID sets the "shipment_usps" edge to the ShipmentUSPS entity by ID.
func (su *ShipmentUpdate) SetShipmentUSPSID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetShipmentUSPSID(id)
	return su
}

// SetNillableShipmentUSPSID sets the "shipment_usps" edge to the ShipmentUSPS entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableShipmentUSPSID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetShipmentUSPSID(*id)
	}
	return su
}

// SetShipmentUSPS sets the "shipment_usps" edge to the ShipmentUSPS entity.
func (su *ShipmentUpdate) SetShipmentUSPS(s *ShipmentUSPS) *ShipmentUpdate {
	return su.SetShipmentUSPSID(s.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (su *ShipmentUpdate) SetConsolidationID(id pulid.ID) *ShipmentUpdate {
	su.mutation.SetConsolidationID(id)
	return su
}

// SetNillableConsolidationID sets the "consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (su *ShipmentUpdate) SetNillableConsolidationID(id *pulid.ID) *ShipmentUpdate {
	if id != nil {
		su = su.SetConsolidationID(*id)
	}
	return su
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (su *ShipmentUpdate) SetConsolidation(c *Consolidation) *ShipmentUpdate {
	return su.SetConsolidationID(c.ID)
}

// AddOldConsolidationIDs adds the "old_consolidation" edge to the Consolidation entity by IDs.
func (su *ShipmentUpdate) AddOldConsolidationIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.AddOldConsolidationIDs(ids...)
	return su
}

// AddOldConsolidation adds the "old_consolidation" edges to the Consolidation entity.
func (su *ShipmentUpdate) AddOldConsolidation(c ...*Consolidation) *ShipmentUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddOldConsolidationIDs(ids...)
}

// AddShipmentParcelIDs adds the "shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (su *ShipmentUpdate) AddShipmentParcelIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.AddShipmentParcelIDs(ids...)
	return su
}

// AddShipmentParcel adds the "shipment_parcel" edges to the ShipmentParcel entity.
func (su *ShipmentUpdate) AddShipmentParcel(s ...*ShipmentParcel) *ShipmentUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddShipmentParcelIDs(ids...)
}

// AddShipmentPalletIDs adds the "shipment_pallet" edge to the ShipmentPallet entity by IDs.
func (su *ShipmentUpdate) AddShipmentPalletIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.AddShipmentPalletIDs(ids...)
	return su
}

// AddShipmentPallet adds the "shipment_pallet" edges to the ShipmentPallet entity.
func (su *ShipmentUpdate) AddShipmentPallet(s ...*ShipmentPallet) *ShipmentUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddShipmentPalletIDs(ids...)
}

// Mutation returns the ShipmentMutation object of the builder.
func (su *ShipmentUpdate) Mutation() *ShipmentMutation {
	return su.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (su *ShipmentUpdate) ClearTenant() *ShipmentUpdate {
	su.mutation.ClearTenant()
	return su
}

// ClearShipmentHistory clears all "shipment_history" edges to the ShipmentHistory entity.
func (su *ShipmentUpdate) ClearShipmentHistory() *ShipmentUpdate {
	su.mutation.ClearShipmentHistory()
	return su
}

// RemoveShipmentHistoryIDs removes the "shipment_history" edge to ShipmentHistory entities by IDs.
func (su *ShipmentUpdate) RemoveShipmentHistoryIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.RemoveShipmentHistoryIDs(ids...)
	return su
}

// RemoveShipmentHistory removes "shipment_history" edges to ShipmentHistory entities.
func (su *ShipmentUpdate) RemoveShipmentHistory(s ...*ShipmentHistory) *ShipmentUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveShipmentHistoryIDs(ids...)
}

// ClearShipmentBring clears the "shipment_bring" edge to the ShipmentBring entity.
func (su *ShipmentUpdate) ClearShipmentBring() *ShipmentUpdate {
	su.mutation.ClearShipmentBring()
	return su
}

// ClearShipmentDAO clears the "shipment_dao" edge to the ShipmentDAO entity.
func (su *ShipmentUpdate) ClearShipmentDAO() *ShipmentUpdate {
	su.mutation.ClearShipmentDAO()
	return su
}

// ClearShipmentDF clears the "shipment_df" edge to the ShipmentDF entity.
func (su *ShipmentUpdate) ClearShipmentDF() *ShipmentUpdate {
	su.mutation.ClearShipmentDF()
	return su
}

// ClearShipmentDSV clears the "shipment_dsv" edge to the ShipmentDSV entity.
func (su *ShipmentUpdate) ClearShipmentDSV() *ShipmentUpdate {
	su.mutation.ClearShipmentDSV()
	return su
}

// ClearShipmentEasyPost clears the "shipment_easy_post" edge to the ShipmentEasyPost entity.
func (su *ShipmentUpdate) ClearShipmentEasyPost() *ShipmentUpdate {
	su.mutation.ClearShipmentEasyPost()
	return su
}

// ClearShipmentPostNord clears the "shipment_post_nord" edge to the ShipmentPostNord entity.
func (su *ShipmentUpdate) ClearShipmentPostNord() *ShipmentUpdate {
	su.mutation.ClearShipmentPostNord()
	return su
}

// ClearShipmentGLS clears the "shipment_gls" edge to the ShipmentGLS entity.
func (su *ShipmentUpdate) ClearShipmentGLS() *ShipmentUpdate {
	su.mutation.ClearShipmentGLS()
	return su
}

// ClearShipmentUSPS clears the "shipment_usps" edge to the ShipmentUSPS entity.
func (su *ShipmentUpdate) ClearShipmentUSPS() *ShipmentUpdate {
	su.mutation.ClearShipmentUSPS()
	return su
}

// ClearConsolidation clears the "consolidation" edge to the Consolidation entity.
func (su *ShipmentUpdate) ClearConsolidation() *ShipmentUpdate {
	su.mutation.ClearConsolidation()
	return su
}

// ClearOldConsolidation clears all "old_consolidation" edges to the Consolidation entity.
func (su *ShipmentUpdate) ClearOldConsolidation() *ShipmentUpdate {
	su.mutation.ClearOldConsolidation()
	return su
}

// RemoveOldConsolidationIDs removes the "old_consolidation" edge to Consolidation entities by IDs.
func (su *ShipmentUpdate) RemoveOldConsolidationIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.RemoveOldConsolidationIDs(ids...)
	return su
}

// RemoveOldConsolidation removes "old_consolidation" edges to Consolidation entities.
func (su *ShipmentUpdate) RemoveOldConsolidation(c ...*Consolidation) *ShipmentUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveOldConsolidationIDs(ids...)
}

// ClearShipmentParcel clears all "shipment_parcel" edges to the ShipmentParcel entity.
func (su *ShipmentUpdate) ClearShipmentParcel() *ShipmentUpdate {
	su.mutation.ClearShipmentParcel()
	return su
}

// RemoveShipmentParcelIDs removes the "shipment_parcel" edge to ShipmentParcel entities by IDs.
func (su *ShipmentUpdate) RemoveShipmentParcelIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.RemoveShipmentParcelIDs(ids...)
	return su
}

// RemoveShipmentParcel removes "shipment_parcel" edges to ShipmentParcel entities.
func (su *ShipmentUpdate) RemoveShipmentParcel(s ...*ShipmentParcel) *ShipmentUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveShipmentParcelIDs(ids...)
}

// ClearShipmentPallet clears all "shipment_pallet" edges to the ShipmentPallet entity.
func (su *ShipmentUpdate) ClearShipmentPallet() *ShipmentUpdate {
	su.mutation.ClearShipmentPallet()
	return su
}

// RemoveShipmentPalletIDs removes the "shipment_pallet" edge to ShipmentPallet entities by IDs.
func (su *ShipmentUpdate) RemoveShipmentPalletIDs(ids ...pulid.ID) *ShipmentUpdate {
	su.mutation.RemoveShipmentPalletIDs(ids...)
	return su
}

// RemoveShipmentPallet removes "shipment_pallet" edges to ShipmentPallet entities.
func (su *ShipmentUpdate) RemoveShipmentPallet(s ...*ShipmentPallet) *ShipmentUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveShipmentPalletIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ShipmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ShipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ShipmentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ShipmentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ShipmentUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if su.mutation.TenantCleared() && len(su.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Shipment.tenant"`)
	}
	if su.mutation.CarrierCleared() && len(su.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Shipment.carrier"`)
	}
	return nil
}

func (su *ShipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ShipmentPublicID(); ok {
		_spec.SetField(shipment.FieldShipmentPublicID, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
	}
	if su.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TenantTable,
			Columns: []string{shipment.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TenantTable,
			Columns: []string{shipment.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedShipmentHistoryIDs(); len(nodes) > 0 && !su.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentBringTable,
			Columns: []string{shipment.ShipmentBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentBringTable,
			Columns: []string{shipment.ShipmentBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDAOTable,
			Columns: []string{shipment.ShipmentDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDAOTable,
			Columns: []string{shipment.ShipmentDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDFTable,
			Columns: []string{shipment.ShipmentDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDFTable,
			Columns: []string{shipment.ShipmentDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDSVTable,
			Columns: []string{shipment.ShipmentDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDSVTable,
			Columns: []string{shipment.ShipmentDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentEasyPostTable,
			Columns: []string{shipment.ShipmentEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentEasyPostTable,
			Columns: []string{shipment.ShipmentEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentPostNordTable,
			Columns: []string{shipment.ShipmentPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentPostNordTable,
			Columns: []string{shipment.ShipmentPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentGLSTable,
			Columns: []string{shipment.ShipmentGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentGLSTable,
			Columns: []string{shipment.ShipmentGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentUSPSTable,
			Columns: []string{shipment.ShipmentUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentUSPSTable,
			Columns: []string{shipment.ShipmentUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ConsolidationTable,
			Columns: []string{shipment.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ConsolidationTable,
			Columns: []string{shipment.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OldConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedOldConsolidationIDs(); len(nodes) > 0 && !su.mutation.OldConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OldConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedShipmentParcelIDs(); len(nodes) > 0 && !su.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedShipmentPalletIDs(); len(nodes) > 0 && !su.mutation.ShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ShipmentUpdateOne is the builder for updating a single Shipment entity.
type ShipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentMutation
}

// SetTenantID sets the "tenant_id" field.
func (suo *ShipmentUpdateOne) SetTenantID(pu pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetTenantID(pu)
	return suo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentUpdateOne {
	if pu != nil {
		suo.SetTenantID(*pu)
	}
	return suo
}

// SetShipmentPublicID sets the "shipment_public_id" field.
func (suo *ShipmentUpdateOne) SetShipmentPublicID(s string) *ShipmentUpdateOne {
	suo.mutation.SetShipmentPublicID(s)
	return suo
}

// SetNillableShipmentPublicID sets the "shipment_public_id" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentPublicID(s *string) *ShipmentUpdateOne {
	if s != nil {
		suo.SetShipmentPublicID(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *ShipmentUpdateOne) SetStatus(s shipment.Status) *ShipmentUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableStatus(s *shipment.Status) *ShipmentUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suo *ShipmentUpdateOne) SetTenant(t *Tenant) *ShipmentUpdateOne {
	return suo.SetTenantID(t.ID)
}

// AddShipmentHistoryIDs adds the "shipment_history" edge to the ShipmentHistory entity by IDs.
func (suo *ShipmentUpdateOne) AddShipmentHistoryIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.AddShipmentHistoryIDs(ids...)
	return suo
}

// AddShipmentHistory adds the "shipment_history" edges to the ShipmentHistory entity.
func (suo *ShipmentUpdateOne) AddShipmentHistory(s ...*ShipmentHistory) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddShipmentHistoryIDs(ids...)
}

// SetShipmentBringID sets the "shipment_bring" edge to the ShipmentBring entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentBringID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentBringID(id)
	return suo
}

// SetNillableShipmentBringID sets the "shipment_bring" edge to the ShipmentBring entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentBringID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentBringID(*id)
	}
	return suo
}

// SetShipmentBring sets the "shipment_bring" edge to the ShipmentBring entity.
func (suo *ShipmentUpdateOne) SetShipmentBring(s *ShipmentBring) *ShipmentUpdateOne {
	return suo.SetShipmentBringID(s.ID)
}

// SetShipmentDAOID sets the "shipment_dao" edge to the ShipmentDAO entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentDAOID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentDAOID(id)
	return suo
}

// SetNillableShipmentDAOID sets the "shipment_dao" edge to the ShipmentDAO entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentDAOID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentDAOID(*id)
	}
	return suo
}

// SetShipmentDAO sets the "shipment_dao" edge to the ShipmentDAO entity.
func (suo *ShipmentUpdateOne) SetShipmentDAO(s *ShipmentDAO) *ShipmentUpdateOne {
	return suo.SetShipmentDAOID(s.ID)
}

// SetShipmentDFID sets the "shipment_df" edge to the ShipmentDF entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentDFID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentDFID(id)
	return suo
}

// SetNillableShipmentDFID sets the "shipment_df" edge to the ShipmentDF entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentDFID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentDFID(*id)
	}
	return suo
}

// SetShipmentDF sets the "shipment_df" edge to the ShipmentDF entity.
func (suo *ShipmentUpdateOne) SetShipmentDF(s *ShipmentDF) *ShipmentUpdateOne {
	return suo.SetShipmentDFID(s.ID)
}

// SetShipmentDSVID sets the "shipment_dsv" edge to the ShipmentDSV entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentDSVID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentDSVID(id)
	return suo
}

// SetNillableShipmentDSVID sets the "shipment_dsv" edge to the ShipmentDSV entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentDSVID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentDSVID(*id)
	}
	return suo
}

// SetShipmentDSV sets the "shipment_dsv" edge to the ShipmentDSV entity.
func (suo *ShipmentUpdateOne) SetShipmentDSV(s *ShipmentDSV) *ShipmentUpdateOne {
	return suo.SetShipmentDSVID(s.ID)
}

// SetShipmentEasyPostID sets the "shipment_easy_post" edge to the ShipmentEasyPost entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentEasyPostID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentEasyPostID(id)
	return suo
}

// SetNillableShipmentEasyPostID sets the "shipment_easy_post" edge to the ShipmentEasyPost entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentEasyPostID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentEasyPostID(*id)
	}
	return suo
}

// SetShipmentEasyPost sets the "shipment_easy_post" edge to the ShipmentEasyPost entity.
func (suo *ShipmentUpdateOne) SetShipmentEasyPost(s *ShipmentEasyPost) *ShipmentUpdateOne {
	return suo.SetShipmentEasyPostID(s.ID)
}

// SetShipmentPostNordID sets the "shipment_post_nord" edge to the ShipmentPostNord entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentPostNordID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentPostNordID(id)
	return suo
}

// SetNillableShipmentPostNordID sets the "shipment_post_nord" edge to the ShipmentPostNord entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentPostNordID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentPostNordID(*id)
	}
	return suo
}

// SetShipmentPostNord sets the "shipment_post_nord" edge to the ShipmentPostNord entity.
func (suo *ShipmentUpdateOne) SetShipmentPostNord(s *ShipmentPostNord) *ShipmentUpdateOne {
	return suo.SetShipmentPostNordID(s.ID)
}

// SetShipmentGLSID sets the "shipment_gls" edge to the ShipmentGLS entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentGLSID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentGLSID(id)
	return suo
}

// SetNillableShipmentGLSID sets the "shipment_gls" edge to the ShipmentGLS entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentGLSID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentGLSID(*id)
	}
	return suo
}

// SetShipmentGLS sets the "shipment_gls" edge to the ShipmentGLS entity.
func (suo *ShipmentUpdateOne) SetShipmentGLS(s *ShipmentGLS) *ShipmentUpdateOne {
	return suo.SetShipmentGLSID(s.ID)
}

// SetShipmentUSPSID sets the "shipment_usps" edge to the ShipmentUSPS entity by ID.
func (suo *ShipmentUpdateOne) SetShipmentUSPSID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetShipmentUSPSID(id)
	return suo
}

// SetNillableShipmentUSPSID sets the "shipment_usps" edge to the ShipmentUSPS entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableShipmentUSPSID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetShipmentUSPSID(*id)
	}
	return suo
}

// SetShipmentUSPS sets the "shipment_usps" edge to the ShipmentUSPS entity.
func (suo *ShipmentUpdateOne) SetShipmentUSPS(s *ShipmentUSPS) *ShipmentUpdateOne {
	return suo.SetShipmentUSPSID(s.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (suo *ShipmentUpdateOne) SetConsolidationID(id pulid.ID) *ShipmentUpdateOne {
	suo.mutation.SetConsolidationID(id)
	return suo
}

// SetNillableConsolidationID sets the "consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (suo *ShipmentUpdateOne) SetNillableConsolidationID(id *pulid.ID) *ShipmentUpdateOne {
	if id != nil {
		suo = suo.SetConsolidationID(*id)
	}
	return suo
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (suo *ShipmentUpdateOne) SetConsolidation(c *Consolidation) *ShipmentUpdateOne {
	return suo.SetConsolidationID(c.ID)
}

// AddOldConsolidationIDs adds the "old_consolidation" edge to the Consolidation entity by IDs.
func (suo *ShipmentUpdateOne) AddOldConsolidationIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.AddOldConsolidationIDs(ids...)
	return suo
}

// AddOldConsolidation adds the "old_consolidation" edges to the Consolidation entity.
func (suo *ShipmentUpdateOne) AddOldConsolidation(c ...*Consolidation) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddOldConsolidationIDs(ids...)
}

// AddShipmentParcelIDs adds the "shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (suo *ShipmentUpdateOne) AddShipmentParcelIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.AddShipmentParcelIDs(ids...)
	return suo
}

// AddShipmentParcel adds the "shipment_parcel" edges to the ShipmentParcel entity.
func (suo *ShipmentUpdateOne) AddShipmentParcel(s ...*ShipmentParcel) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddShipmentParcelIDs(ids...)
}

// AddShipmentPalletIDs adds the "shipment_pallet" edge to the ShipmentPallet entity by IDs.
func (suo *ShipmentUpdateOne) AddShipmentPalletIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.AddShipmentPalletIDs(ids...)
	return suo
}

// AddShipmentPallet adds the "shipment_pallet" edges to the ShipmentPallet entity.
func (suo *ShipmentUpdateOne) AddShipmentPallet(s ...*ShipmentPallet) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddShipmentPalletIDs(ids...)
}

// Mutation returns the ShipmentMutation object of the builder.
func (suo *ShipmentUpdateOne) Mutation() *ShipmentMutation {
	return suo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suo *ShipmentUpdateOne) ClearTenant() *ShipmentUpdateOne {
	suo.mutation.ClearTenant()
	return suo
}

// ClearShipmentHistory clears all "shipment_history" edges to the ShipmentHistory entity.
func (suo *ShipmentUpdateOne) ClearShipmentHistory() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentHistory()
	return suo
}

// RemoveShipmentHistoryIDs removes the "shipment_history" edge to ShipmentHistory entities by IDs.
func (suo *ShipmentUpdateOne) RemoveShipmentHistoryIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.RemoveShipmentHistoryIDs(ids...)
	return suo
}

// RemoveShipmentHistory removes "shipment_history" edges to ShipmentHistory entities.
func (suo *ShipmentUpdateOne) RemoveShipmentHistory(s ...*ShipmentHistory) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveShipmentHistoryIDs(ids...)
}

// ClearShipmentBring clears the "shipment_bring" edge to the ShipmentBring entity.
func (suo *ShipmentUpdateOne) ClearShipmentBring() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentBring()
	return suo
}

// ClearShipmentDAO clears the "shipment_dao" edge to the ShipmentDAO entity.
func (suo *ShipmentUpdateOne) ClearShipmentDAO() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentDAO()
	return suo
}

// ClearShipmentDF clears the "shipment_df" edge to the ShipmentDF entity.
func (suo *ShipmentUpdateOne) ClearShipmentDF() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentDF()
	return suo
}

// ClearShipmentDSV clears the "shipment_dsv" edge to the ShipmentDSV entity.
func (suo *ShipmentUpdateOne) ClearShipmentDSV() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentDSV()
	return suo
}

// ClearShipmentEasyPost clears the "shipment_easy_post" edge to the ShipmentEasyPost entity.
func (suo *ShipmentUpdateOne) ClearShipmentEasyPost() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentEasyPost()
	return suo
}

// ClearShipmentPostNord clears the "shipment_post_nord" edge to the ShipmentPostNord entity.
func (suo *ShipmentUpdateOne) ClearShipmentPostNord() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentPostNord()
	return suo
}

// ClearShipmentGLS clears the "shipment_gls" edge to the ShipmentGLS entity.
func (suo *ShipmentUpdateOne) ClearShipmentGLS() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentGLS()
	return suo
}

// ClearShipmentUSPS clears the "shipment_usps" edge to the ShipmentUSPS entity.
func (suo *ShipmentUpdateOne) ClearShipmentUSPS() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentUSPS()
	return suo
}

// ClearConsolidation clears the "consolidation" edge to the Consolidation entity.
func (suo *ShipmentUpdateOne) ClearConsolidation() *ShipmentUpdateOne {
	suo.mutation.ClearConsolidation()
	return suo
}

// ClearOldConsolidation clears all "old_consolidation" edges to the Consolidation entity.
func (suo *ShipmentUpdateOne) ClearOldConsolidation() *ShipmentUpdateOne {
	suo.mutation.ClearOldConsolidation()
	return suo
}

// RemoveOldConsolidationIDs removes the "old_consolidation" edge to Consolidation entities by IDs.
func (suo *ShipmentUpdateOne) RemoveOldConsolidationIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.RemoveOldConsolidationIDs(ids...)
	return suo
}

// RemoveOldConsolidation removes "old_consolidation" edges to Consolidation entities.
func (suo *ShipmentUpdateOne) RemoveOldConsolidation(c ...*Consolidation) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveOldConsolidationIDs(ids...)
}

// ClearShipmentParcel clears all "shipment_parcel" edges to the ShipmentParcel entity.
func (suo *ShipmentUpdateOne) ClearShipmentParcel() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentParcel()
	return suo
}

// RemoveShipmentParcelIDs removes the "shipment_parcel" edge to ShipmentParcel entities by IDs.
func (suo *ShipmentUpdateOne) RemoveShipmentParcelIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.RemoveShipmentParcelIDs(ids...)
	return suo
}

// RemoveShipmentParcel removes "shipment_parcel" edges to ShipmentParcel entities.
func (suo *ShipmentUpdateOne) RemoveShipmentParcel(s ...*ShipmentParcel) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveShipmentParcelIDs(ids...)
}

// ClearShipmentPallet clears all "shipment_pallet" edges to the ShipmentPallet entity.
func (suo *ShipmentUpdateOne) ClearShipmentPallet() *ShipmentUpdateOne {
	suo.mutation.ClearShipmentPallet()
	return suo
}

// RemoveShipmentPalletIDs removes the "shipment_pallet" edge to ShipmentPallet entities by IDs.
func (suo *ShipmentUpdateOne) RemoveShipmentPalletIDs(ids ...pulid.ID) *ShipmentUpdateOne {
	suo.mutation.RemoveShipmentPalletIDs(ids...)
	return suo
}

// RemoveShipmentPallet removes "shipment_pallet" edges to ShipmentPallet entities.
func (suo *ShipmentUpdateOne) RemoveShipmentPallet(s ...*ShipmentPallet) *ShipmentUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveShipmentPalletIDs(ids...)
}

// Where appends a list predicates to the ShipmentUpdate builder.
func (suo *ShipmentUpdateOne) Where(ps ...predicate.Shipment) *ShipmentUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ShipmentUpdateOne) Select(field string, fields ...string) *ShipmentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Shipment entity.
func (suo *ShipmentUpdateOne) Save(ctx context.Context) (*Shipment, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ShipmentUpdateOne) SaveX(ctx context.Context) *Shipment {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ShipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ShipmentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ShipmentUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := shipment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Shipment.status": %w`, err)}
		}
	}
	if suo.mutation.TenantCleared() && len(suo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Shipment.tenant"`)
	}
	if suo.mutation.CarrierCleared() && len(suo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Shipment.carrier"`)
	}
	return nil
}

func (suo *ShipmentUpdateOne) sqlSave(ctx context.Context) (_node *Shipment, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipment.Table, shipment.Columns, sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Shipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipment.FieldID)
		for _, f := range fields {
			if !shipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.ShipmentPublicID(); ok {
		_spec.SetField(shipment.FieldShipmentPublicID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(shipment.FieldStatus, field.TypeEnum, value)
	}
	if suo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TenantTable,
			Columns: []string{shipment.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TenantTable,
			Columns: []string{shipment.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedShipmentHistoryIDs(); len(nodes) > 0 && !suo.mutation.ShipmentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentBringTable,
			Columns: []string{shipment.ShipmentBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentBringTable,
			Columns: []string{shipment.ShipmentBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDAOTable,
			Columns: []string{shipment.ShipmentDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDAOTable,
			Columns: []string{shipment.ShipmentDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDFTable,
			Columns: []string{shipment.ShipmentDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDFTable,
			Columns: []string{shipment.ShipmentDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDSVTable,
			Columns: []string{shipment.ShipmentDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDSVTable,
			Columns: []string{shipment.ShipmentDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentdsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentEasyPostTable,
			Columns: []string{shipment.ShipmentEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentEasyPostTable,
			Columns: []string{shipment.ShipmentEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentPostNordTable,
			Columns: []string{shipment.ShipmentPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentPostNordTable,
			Columns: []string{shipment.ShipmentPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentGLSTable,
			Columns: []string{shipment.ShipmentGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentGLSTable,
			Columns: []string{shipment.ShipmentGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentgls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentUSPSTable,
			Columns: []string{shipment.ShipmentUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentUSPSTable,
			Columns: []string{shipment.ShipmentUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ConsolidationTable,
			Columns: []string{shipment.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ConsolidationTable,
			Columns: []string{shipment.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OldConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedOldConsolidationIDs(); len(nodes) > 0 && !suo.mutation.OldConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OldConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedShipmentParcelIDs(); len(nodes) > 0 && !suo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedShipmentPalletIDs(); len(nodes) > 0 && !suo.mutation.ShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Shipment{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
