// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionDSVCreate is the builder for creating a DeliveryOptionDSV entity.
type DeliveryOptionDSVCreate struct {
	config
	mutation *DeliveryOptionDSVMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (dodc *DeliveryOptionDSVCreate) SetTenantID(pu pulid.ID) *DeliveryOptionDSVCreate {
	dodc.mutation.SetTenantID(pu)
	return dodc
}

// SetID sets the "id" field.
func (dodc *DeliveryOptionDSVCreate) SetID(pu pulid.ID) *DeliveryOptionDSVCreate {
	dodc.mutation.SetID(pu)
	return dodc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dodc *DeliveryOptionDSVCreate) SetNillableID(pu *pulid.ID) *DeliveryOptionDSVCreate {
	if pu != nil {
		dodc.SetID(*pu)
	}
	return dodc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dodc *DeliveryOptionDSVCreate) SetTenant(t *Tenant) *DeliveryOptionDSVCreate {
	return dodc.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dodc *DeliveryOptionDSVCreate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionDSVCreate {
	dodc.mutation.SetDeliveryOptionID(id)
	return dodc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dodc *DeliveryOptionDSVCreate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionDSVCreate {
	return dodc.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceDSVIDs adds the "carrier_additional_service_dsv" edge to the CarrierAdditionalServiceDSV entity by IDs.
func (dodc *DeliveryOptionDSVCreate) AddCarrierAdditionalServiceDSVIDs(ids ...pulid.ID) *DeliveryOptionDSVCreate {
	dodc.mutation.AddCarrierAdditionalServiceDSVIDs(ids...)
	return dodc
}

// AddCarrierAdditionalServiceDSV adds the "carrier_additional_service_dsv" edges to the CarrierAdditionalServiceDSV entity.
func (dodc *DeliveryOptionDSVCreate) AddCarrierAdditionalServiceDSV(c ...*CarrierAdditionalServiceDSV) *DeliveryOptionDSVCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dodc.AddCarrierAdditionalServiceDSVIDs(ids...)
}

// Mutation returns the DeliveryOptionDSVMutation object of the builder.
func (dodc *DeliveryOptionDSVCreate) Mutation() *DeliveryOptionDSVMutation {
	return dodc.mutation
}

// Save creates the DeliveryOptionDSV in the database.
func (dodc *DeliveryOptionDSVCreate) Save(ctx context.Context) (*DeliveryOptionDSV, error) {
	if err := dodc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dodc.sqlSave, dodc.mutation, dodc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dodc *DeliveryOptionDSVCreate) SaveX(ctx context.Context) *DeliveryOptionDSV {
	v, err := dodc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dodc *DeliveryOptionDSVCreate) Exec(ctx context.Context) error {
	_, err := dodc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dodc *DeliveryOptionDSVCreate) ExecX(ctx context.Context) {
	if err := dodc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dodc *DeliveryOptionDSVCreate) defaults() error {
	if _, ok := dodc.mutation.ID(); !ok {
		if deliveryoptiondsv.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryoptiondsv.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryoptiondsv.DefaultID()
		dodc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dodc *DeliveryOptionDSVCreate) check() error {
	if _, ok := dodc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryOptionDSV.tenant_id"`)}
	}
	if len(dodc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryOptionDSV.tenant"`)}
	}
	if len(dodc.mutation.DeliveryOptionIDs()) == 0 {
		return &ValidationError{Name: "delivery_option", err: errors.New(`ent: missing required edge "DeliveryOptionDSV.delivery_option"`)}
	}
	return nil
}

func (dodc *DeliveryOptionDSVCreate) sqlSave(ctx context.Context) (*DeliveryOptionDSV, error) {
	if err := dodc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dodc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dodc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dodc.mutation.id = &_node.ID
	dodc.mutation.done = true
	return _node, nil
}

func (dodc *DeliveryOptionDSVCreate) createSpec() (*DeliveryOptionDSV, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryOptionDSV{config: dodc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryoptiondsv.Table, sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString))
	)
	_spec.OnConflict = dodc.conflict
	if id, ok := dodc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := dodc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondsv.TenantTable,
			Columns: []string{deliveryoptiondsv.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dodc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondsv.DeliveryOptionTable,
			Columns: []string{deliveryoptiondsv.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_delivery_option_dsv = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dodc.mutation.CarrierAdditionalServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondsv.CarrierAdditionalServiceDSVTable,
			Columns: deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionDSV.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionDSVUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dodc *DeliveryOptionDSVCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionDSVUpsertOne {
	dodc.conflict = opts
	return &DeliveryOptionDSVUpsertOne{
		create: dodc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionDSV.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dodc *DeliveryOptionDSVCreate) OnConflictColumns(columns ...string) *DeliveryOptionDSVUpsertOne {
	dodc.conflict = append(dodc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionDSVUpsertOne{
		create: dodc,
	}
}

type (
	// DeliveryOptionDSVUpsertOne is the builder for "upsert"-ing
	//  one DeliveryOptionDSV node.
	DeliveryOptionDSVUpsertOne struct {
		create *DeliveryOptionDSVCreate
	}

	// DeliveryOptionDSVUpsert is the "OnConflict" setter.
	DeliveryOptionDSVUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionDSVUpsert) SetTenantID(v pulid.ID) *DeliveryOptionDSVUpsert {
	u.Set(deliveryoptiondsv.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionDSVUpsert) UpdateTenantID() *DeliveryOptionDSVUpsert {
	u.SetExcluded(deliveryoptiondsv.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionDSV.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptiondsv.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionDSVUpsertOne) UpdateNewValues() *DeliveryOptionDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryoptiondsv.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionDSV.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryOptionDSVUpsertOne) Ignore() *DeliveryOptionDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionDSVUpsertOne) DoNothing() *DeliveryOptionDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionDSVCreate.OnConflict
// documentation for more info.
func (u *DeliveryOptionDSVUpsertOne) Update(set func(*DeliveryOptionDSVUpsert)) *DeliveryOptionDSVUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionDSVUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionDSVUpsertOne) SetTenantID(v pulid.ID) *DeliveryOptionDSVUpsertOne {
	return u.Update(func(s *DeliveryOptionDSVUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionDSVUpsertOne) UpdateTenantID() *DeliveryOptionDSVUpsertOne {
	return u.Update(func(s *DeliveryOptionDSVUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *DeliveryOptionDSVUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionDSVCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionDSVUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryOptionDSVUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryOptionDSVUpsertOne.ID is not supported by MySQL driver. Use DeliveryOptionDSVUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryOptionDSVUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryOptionDSVCreateBulk is the builder for creating many DeliveryOptionDSV entities in bulk.
type DeliveryOptionDSVCreateBulk struct {
	config
	err      error
	builders []*DeliveryOptionDSVCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryOptionDSV entities in the database.
func (dodcb *DeliveryOptionDSVCreateBulk) Save(ctx context.Context) ([]*DeliveryOptionDSV, error) {
	if dodcb.err != nil {
		return nil, dodcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dodcb.builders))
	nodes := make([]*DeliveryOptionDSV, len(dodcb.builders))
	mutators := make([]Mutator, len(dodcb.builders))
	for i := range dodcb.builders {
		func(i int, root context.Context) {
			builder := dodcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryOptionDSVMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dodcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dodcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dodcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dodcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dodcb *DeliveryOptionDSVCreateBulk) SaveX(ctx context.Context) []*DeliveryOptionDSV {
	v, err := dodcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dodcb *DeliveryOptionDSVCreateBulk) Exec(ctx context.Context) error {
	_, err := dodcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dodcb *DeliveryOptionDSVCreateBulk) ExecX(ctx context.Context) {
	if err := dodcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionDSV.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionDSVUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dodcb *DeliveryOptionDSVCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionDSVUpsertBulk {
	dodcb.conflict = opts
	return &DeliveryOptionDSVUpsertBulk{
		create: dodcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionDSV.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dodcb *DeliveryOptionDSVCreateBulk) OnConflictColumns(columns ...string) *DeliveryOptionDSVUpsertBulk {
	dodcb.conflict = append(dodcb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionDSVUpsertBulk{
		create: dodcb,
	}
}

// DeliveryOptionDSVUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryOptionDSV nodes.
type DeliveryOptionDSVUpsertBulk struct {
	create *DeliveryOptionDSVCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryOptionDSV.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptiondsv.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionDSVUpsertBulk) UpdateNewValues() *DeliveryOptionDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryoptiondsv.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionDSV.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryOptionDSVUpsertBulk) Ignore() *DeliveryOptionDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionDSVUpsertBulk) DoNothing() *DeliveryOptionDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionDSVCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryOptionDSVUpsertBulk) Update(set func(*DeliveryOptionDSVUpsert)) *DeliveryOptionDSVUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionDSVUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionDSVUpsertBulk) SetTenantID(v pulid.ID) *DeliveryOptionDSVUpsertBulk {
	return u.Update(func(s *DeliveryOptionDSVUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionDSVUpsertBulk) UpdateTenantID() *DeliveryOptionDSVUpsertBulk {
	return u.Update(func(s *DeliveryOptionDSVUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *DeliveryOptionDSVUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryOptionDSVCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionDSVCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionDSVUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
