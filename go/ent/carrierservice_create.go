// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceCreate is the builder for creating a CarrierService entity.
type CarrierServiceCreate struct {
	config
	mutation *CarrierServiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLabel sets the "label" field.
func (csc *CarrierServiceCreate) SetLabel(s string) *CarrierServiceCreate {
	csc.mutation.SetLabel(s)
	return csc
}

// SetInternalID sets the "internal_id" field.
func (csc *CarrierServiceCreate) SetInternalID(s string) *CarrierServiceCreate {
	csc.mutation.SetInternalID(s)
	return csc
}

// SetReturn sets the "return" field.
func (csc *CarrierServiceCreate) SetReturn(b bool) *CarrierServiceCreate {
	csc.mutation.SetReturn(b)
	return csc
}

// SetNillableReturn sets the "return" field if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableReturn(b *bool) *CarrierServiceCreate {
	if b != nil {
		csc.SetReturn(*b)
	}
	return csc
}

// SetConsolidation sets the "consolidation" field.
func (csc *CarrierServiceCreate) SetConsolidation(b bool) *CarrierServiceCreate {
	csc.mutation.SetConsolidation(b)
	return csc
}

// SetNillableConsolidation sets the "consolidation" field if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableConsolidation(b *bool) *CarrierServiceCreate {
	if b != nil {
		csc.SetConsolidation(*b)
	}
	return csc
}

// SetDeliveryPointOptional sets the "delivery_point_optional" field.
func (csc *CarrierServiceCreate) SetDeliveryPointOptional(b bool) *CarrierServiceCreate {
	csc.mutation.SetDeliveryPointOptional(b)
	return csc
}

// SetNillableDeliveryPointOptional sets the "delivery_point_optional" field if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableDeliveryPointOptional(b *bool) *CarrierServiceCreate {
	if b != nil {
		csc.SetDeliveryPointOptional(*b)
	}
	return csc
}

// SetDeliveryPointRequired sets the "delivery_point_required" field.
func (csc *CarrierServiceCreate) SetDeliveryPointRequired(b bool) *CarrierServiceCreate {
	csc.mutation.SetDeliveryPointRequired(b)
	return csc
}

// SetNillableDeliveryPointRequired sets the "delivery_point_required" field if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableDeliveryPointRequired(b *bool) *CarrierServiceCreate {
	if b != nil {
		csc.SetDeliveryPointRequired(*b)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CarrierServiceCreate) SetID(pu pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetID(pu)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableID(pu *pulid.ID) *CarrierServiceCreate {
	if pu != nil {
		csc.SetID(*pu)
	}
	return csc
}

// SetCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServicePostNordID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServicePostNordID(id)
	return csc
}

// SetNillableCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServicePostNordID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServicePostNordID(*id)
	}
	return csc
}

// SetCarrierServicePostNord sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (csc *CarrierServiceCreate) SetCarrierServicePostNord(c *CarrierServicePostNord) *CarrierServiceCreate {
	return csc.SetCarrierServicePostNordID(c.ID)
}

// SetCarrierServiceDAOID sets the "carrier_service_dao" edge to the CarrierServiceDAO entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServiceDAOID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServiceDAOID(id)
	return csc
}

// SetNillableCarrierServiceDAOID sets the "carrier_service_dao" edge to the CarrierServiceDAO entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServiceDAOID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServiceDAOID(*id)
	}
	return csc
}

// SetCarrierServiceDAO sets the "carrier_service_dao" edge to the CarrierServiceDAO entity.
func (csc *CarrierServiceCreate) SetCarrierServiceDAO(c *CarrierServiceDAO) *CarrierServiceCreate {
	return csc.SetCarrierServiceDAOID(c.ID)
}

// SetCarrierServiceDFID sets the "carrier_service_df" edge to the CarrierServiceDF entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServiceDFID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServiceDFID(id)
	return csc
}

// SetNillableCarrierServiceDFID sets the "carrier_service_df" edge to the CarrierServiceDF entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServiceDFID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServiceDFID(*id)
	}
	return csc
}

// SetCarrierServiceDF sets the "carrier_service_df" edge to the CarrierServiceDF entity.
func (csc *CarrierServiceCreate) SetCarrierServiceDF(c *CarrierServiceDF) *CarrierServiceCreate {
	return csc.SetCarrierServiceDFID(c.ID)
}

// SetCarrierServiceDSVID sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServiceDSVID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServiceDSVID(id)
	return csc
}

// SetNillableCarrierServiceDSVID sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServiceDSVID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServiceDSVID(*id)
	}
	return csc
}

// SetCarrierServiceDSV sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity.
func (csc *CarrierServiceCreate) SetCarrierServiceDSV(c *CarrierServiceDSV) *CarrierServiceCreate {
	return csc.SetCarrierServiceDSVID(c.ID)
}

// SetCarrierServEasyPostID sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServEasyPostID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServEasyPostID(id)
	return csc
}

// SetNillableCarrierServEasyPostID sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServEasyPostID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServEasyPostID(*id)
	}
	return csc
}

// SetCarrierServEasyPost sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity.
func (csc *CarrierServiceCreate) SetCarrierServEasyPost(c *CarrierServiceEasyPost) *CarrierServiceCreate {
	return csc.SetCarrierServEasyPostID(c.ID)
}

// SetCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServiceGLSID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServiceGLSID(id)
	return csc
}

// SetNillableCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServiceGLSID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServiceGLSID(*id)
	}
	return csc
}

// SetCarrierServiceGLS sets the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (csc *CarrierServiceCreate) SetCarrierServiceGLS(c *CarrierServiceGLS) *CarrierServiceCreate {
	return csc.SetCarrierServiceGLSID(c.ID)
}

// SetCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServiceUSPSID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServiceUSPSID(id)
	return csc
}

// SetNillableCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServiceUSPSID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServiceUSPSID(*id)
	}
	return csc
}

// SetCarrierServiceUSPS sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (csc *CarrierServiceCreate) SetCarrierServiceUSPS(c *CarrierServiceUSPS) *CarrierServiceCreate {
	return csc.SetCarrierServiceUSPSID(c.ID)
}

// SetCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID.
func (csc *CarrierServiceCreate) SetCarrierServiceBringID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierServiceBringID(id)
	return csc
}

// SetNillableCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID if the given value is not nil.
func (csc *CarrierServiceCreate) SetNillableCarrierServiceBringID(id *pulid.ID) *CarrierServiceCreate {
	if id != nil {
		csc = csc.SetCarrierServiceBringID(*id)
	}
	return csc
}

// SetCarrierServiceBring sets the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (csc *CarrierServiceCreate) SetCarrierServiceBring(c *CarrierServiceBring) *CarrierServiceCreate {
	return csc.SetCarrierServiceBringID(c.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (csc *CarrierServiceCreate) SetCarrierBrandID(id pulid.ID) *CarrierServiceCreate {
	csc.mutation.SetCarrierBrandID(id)
	return csc
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (csc *CarrierServiceCreate) SetCarrierBrand(c *CarrierBrand) *CarrierServiceCreate {
	return csc.SetCarrierBrandID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (csc *CarrierServiceCreate) AddDeliveryOptionIDs(ids ...pulid.ID) *CarrierServiceCreate {
	csc.mutation.AddDeliveryOptionIDs(ids...)
	return csc
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (csc *CarrierServiceCreate) AddDeliveryOption(d ...*DeliveryOption) *CarrierServiceCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return csc.AddDeliveryOptionIDs(ids...)
}

// Mutation returns the CarrierServiceMutation object of the builder.
func (csc *CarrierServiceCreate) Mutation() *CarrierServiceMutation {
	return csc.mutation
}

// Save creates the CarrierService in the database.
func (csc *CarrierServiceCreate) Save(ctx context.Context) (*CarrierService, error) {
	if err := csc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CarrierServiceCreate) SaveX(ctx context.Context) *CarrierService {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CarrierServiceCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CarrierServiceCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CarrierServiceCreate) defaults() error {
	if _, ok := csc.mutation.Return(); !ok {
		v := carrierservice.DefaultReturn
		csc.mutation.SetReturn(v)
	}
	if _, ok := csc.mutation.Consolidation(); !ok {
		v := carrierservice.DefaultConsolidation
		csc.mutation.SetConsolidation(v)
	}
	if _, ok := csc.mutation.DeliveryPointOptional(); !ok {
		v := carrierservice.DefaultDeliveryPointOptional
		csc.mutation.SetDeliveryPointOptional(v)
	}
	if _, ok := csc.mutation.DeliveryPointRequired(); !ok {
		v := carrierservice.DefaultDeliveryPointRequired
		csc.mutation.SetDeliveryPointRequired(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		if carrierservice.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrierservice.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrierservice.DefaultID()
		csc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csc *CarrierServiceCreate) check() error {
	if _, ok := csc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "CarrierService.label"`)}
	}
	if _, ok := csc.mutation.InternalID(); !ok {
		return &ValidationError{Name: "internal_id", err: errors.New(`ent: missing required field "CarrierService.internal_id"`)}
	}
	if _, ok := csc.mutation.Return(); !ok {
		return &ValidationError{Name: "return", err: errors.New(`ent: missing required field "CarrierService.return"`)}
	}
	if _, ok := csc.mutation.Consolidation(); !ok {
		return &ValidationError{Name: "consolidation", err: errors.New(`ent: missing required field "CarrierService.consolidation"`)}
	}
	if _, ok := csc.mutation.DeliveryPointOptional(); !ok {
		return &ValidationError{Name: "delivery_point_optional", err: errors.New(`ent: missing required field "CarrierService.delivery_point_optional"`)}
	}
	if _, ok := csc.mutation.DeliveryPointRequired(); !ok {
		return &ValidationError{Name: "delivery_point_required", err: errors.New(`ent: missing required field "CarrierService.delivery_point_required"`)}
	}
	if len(csc.mutation.CarrierBrandIDs()) == 0 {
		return &ValidationError{Name: "carrier_brand", err: errors.New(`ent: missing required edge "CarrierService.carrier_brand"`)}
	}
	return nil
}

func (csc *CarrierServiceCreate) sqlSave(ctx context.Context) (*CarrierService, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CarrierServiceCreate) createSpec() (*CarrierService, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierService{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(carrierservice.Table, sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString))
	)
	_spec.OnConflict = csc.conflict
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.Label(); ok {
		_spec.SetField(carrierservice.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := csc.mutation.InternalID(); ok {
		_spec.SetField(carrierservice.FieldInternalID, field.TypeString, value)
		_node.InternalID = value
	}
	if value, ok := csc.mutation.Return(); ok {
		_spec.SetField(carrierservice.FieldReturn, field.TypeBool, value)
		_node.Return = value
	}
	if value, ok := csc.mutation.Consolidation(); ok {
		_spec.SetField(carrierservice.FieldConsolidation, field.TypeBool, value)
		_node.Consolidation = value
	}
	if value, ok := csc.mutation.DeliveryPointOptional(); ok {
		_spec.SetField(carrierservice.FieldDeliveryPointOptional, field.TypeBool, value)
		_node.DeliveryPointOptional = value
	}
	if value, ok := csc.mutation.DeliveryPointRequired(); ok {
		_spec.SetField(carrierservice.FieldDeliveryPointRequired, field.TypeBool, value)
		_node.DeliveryPointRequired = value
	}
	if nodes := csc.mutation.CarrierServicePostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServicePostNordTable,
			Columns: []string{carrierservice.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDAOTable,
			Columns: []string{carrierservice.CarrierServiceDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServiceDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDFTable,
			Columns: []string{carrierservice.CarrierServiceDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDSVTable,
			Columns: []string{carrierservice.CarrierServiceDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServEasyPostTable,
			Columns: []string{carrierservice.CarrierServEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceGLSTable,
			Columns: []string{carrierservice.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceUSPSTable,
			Columns: []string{carrierservice.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceBringTable,
			Columns: []string{carrierservice.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrierservice.CarrierBrandTable,
			Columns: []string{carrierservice.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_brand_carrier_service = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierService.Create().
//		SetLabel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (csc *CarrierServiceCreate) OnConflict(opts ...sql.ConflictOption) *CarrierServiceUpsertOne {
	csc.conflict = opts
	return &CarrierServiceUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierService.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *CarrierServiceCreate) OnConflictColumns(columns ...string) *CarrierServiceUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceUpsertOne{
		create: csc,
	}
}

type (
	// CarrierServiceUpsertOne is the builder for "upsert"-ing
	//  one CarrierService node.
	CarrierServiceUpsertOne struct {
		create *CarrierServiceCreate
	}

	// CarrierServiceUpsert is the "OnConflict" setter.
	CarrierServiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetLabel sets the "label" field.
func (u *CarrierServiceUpsert) SetLabel(v string) *CarrierServiceUpsert {
	u.Set(carrierservice.FieldLabel, v)
	return u
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierServiceUpsert) UpdateLabel() *CarrierServiceUpsert {
	u.SetExcluded(carrierservice.FieldLabel)
	return u
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierServiceUpsert) SetInternalID(v string) *CarrierServiceUpsert {
	u.Set(carrierservice.FieldInternalID, v)
	return u
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierServiceUpsert) UpdateInternalID() *CarrierServiceUpsert {
	u.SetExcluded(carrierservice.FieldInternalID)
	return u
}

// SetReturn sets the "return" field.
func (u *CarrierServiceUpsert) SetReturn(v bool) *CarrierServiceUpsert {
	u.Set(carrierservice.FieldReturn, v)
	return u
}

// UpdateReturn sets the "return" field to the value that was provided on create.
func (u *CarrierServiceUpsert) UpdateReturn() *CarrierServiceUpsert {
	u.SetExcluded(carrierservice.FieldReturn)
	return u
}

// SetConsolidation sets the "consolidation" field.
func (u *CarrierServiceUpsert) SetConsolidation(v bool) *CarrierServiceUpsert {
	u.Set(carrierservice.FieldConsolidation, v)
	return u
}

// UpdateConsolidation sets the "consolidation" field to the value that was provided on create.
func (u *CarrierServiceUpsert) UpdateConsolidation() *CarrierServiceUpsert {
	u.SetExcluded(carrierservice.FieldConsolidation)
	return u
}

// SetDeliveryPointOptional sets the "delivery_point_optional" field.
func (u *CarrierServiceUpsert) SetDeliveryPointOptional(v bool) *CarrierServiceUpsert {
	u.Set(carrierservice.FieldDeliveryPointOptional, v)
	return u
}

// UpdateDeliveryPointOptional sets the "delivery_point_optional" field to the value that was provided on create.
func (u *CarrierServiceUpsert) UpdateDeliveryPointOptional() *CarrierServiceUpsert {
	u.SetExcluded(carrierservice.FieldDeliveryPointOptional)
	return u
}

// SetDeliveryPointRequired sets the "delivery_point_required" field.
func (u *CarrierServiceUpsert) SetDeliveryPointRequired(v bool) *CarrierServiceUpsert {
	u.Set(carrierservice.FieldDeliveryPointRequired, v)
	return u
}

// UpdateDeliveryPointRequired sets the "delivery_point_required" field to the value that was provided on create.
func (u *CarrierServiceUpsert) UpdateDeliveryPointRequired() *CarrierServiceUpsert {
	u.SetExcluded(carrierservice.FieldDeliveryPointRequired)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierService.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierservice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceUpsertOne) UpdateNewValues() *CarrierServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrierservice.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierService.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierServiceUpsertOne) Ignore() *CarrierServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceUpsertOne) DoNothing() *CarrierServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceCreate.OnConflict
// documentation for more info.
func (u *CarrierServiceUpsertOne) Update(set func(*CarrierServiceUpsert)) *CarrierServiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierServiceUpsertOne) SetLabel(v string) *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierServiceUpsertOne) UpdateLabel() *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateLabel()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierServiceUpsertOne) SetInternalID(v string) *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierServiceUpsertOne) UpdateInternalID() *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateInternalID()
	})
}

// SetReturn sets the "return" field.
func (u *CarrierServiceUpsertOne) SetReturn(v bool) *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetReturn(v)
	})
}

// UpdateReturn sets the "return" field to the value that was provided on create.
func (u *CarrierServiceUpsertOne) UpdateReturn() *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateReturn()
	})
}

// SetConsolidation sets the "consolidation" field.
func (u *CarrierServiceUpsertOne) SetConsolidation(v bool) *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetConsolidation(v)
	})
}

// UpdateConsolidation sets the "consolidation" field to the value that was provided on create.
func (u *CarrierServiceUpsertOne) UpdateConsolidation() *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateConsolidation()
	})
}

// SetDeliveryPointOptional sets the "delivery_point_optional" field.
func (u *CarrierServiceUpsertOne) SetDeliveryPointOptional(v bool) *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetDeliveryPointOptional(v)
	})
}

// UpdateDeliveryPointOptional sets the "delivery_point_optional" field to the value that was provided on create.
func (u *CarrierServiceUpsertOne) UpdateDeliveryPointOptional() *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateDeliveryPointOptional()
	})
}

// SetDeliveryPointRequired sets the "delivery_point_required" field.
func (u *CarrierServiceUpsertOne) SetDeliveryPointRequired(v bool) *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetDeliveryPointRequired(v)
	})
}

// UpdateDeliveryPointRequired sets the "delivery_point_required" field to the value that was provided on create.
func (u *CarrierServiceUpsertOne) UpdateDeliveryPointRequired() *CarrierServiceUpsertOne {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateDeliveryPointRequired()
	})
}

// Exec executes the query.
func (u *CarrierServiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierServiceUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierServiceUpsertOne.ID is not supported by MySQL driver. Use CarrierServiceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierServiceUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierServiceCreateBulk is the builder for creating many CarrierService entities in bulk.
type CarrierServiceCreateBulk struct {
	config
	err      error
	builders []*CarrierServiceCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierService entities in the database.
func (cscb *CarrierServiceCreateBulk) Save(ctx context.Context) ([]*CarrierService, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CarrierService, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CarrierServiceCreateBulk) SaveX(ctx context.Context) []*CarrierService {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CarrierServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CarrierServiceCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierService.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierServiceUpsert) {
//			SetLabel(v+v).
//		}).
//		Exec(ctx)
func (cscb *CarrierServiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierServiceUpsertBulk {
	cscb.conflict = opts
	return &CarrierServiceUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierService.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *CarrierServiceCreateBulk) OnConflictColumns(columns ...string) *CarrierServiceUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &CarrierServiceUpsertBulk{
		create: cscb,
	}
}

// CarrierServiceUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierService nodes.
type CarrierServiceUpsertBulk struct {
	create *CarrierServiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierService.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrierservice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierServiceUpsertBulk) UpdateNewValues() *CarrierServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrierservice.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierService.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierServiceUpsertBulk) Ignore() *CarrierServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierServiceUpsertBulk) DoNothing() *CarrierServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierServiceCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierServiceUpsertBulk) Update(set func(*CarrierServiceUpsert)) *CarrierServiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierServiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetLabel sets the "label" field.
func (u *CarrierServiceUpsertBulk) SetLabel(v string) *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetLabel(v)
	})
}

// UpdateLabel sets the "label" field to the value that was provided on create.
func (u *CarrierServiceUpsertBulk) UpdateLabel() *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateLabel()
	})
}

// SetInternalID sets the "internal_id" field.
func (u *CarrierServiceUpsertBulk) SetInternalID(v string) *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetInternalID(v)
	})
}

// UpdateInternalID sets the "internal_id" field to the value that was provided on create.
func (u *CarrierServiceUpsertBulk) UpdateInternalID() *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateInternalID()
	})
}

// SetReturn sets the "return" field.
func (u *CarrierServiceUpsertBulk) SetReturn(v bool) *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetReturn(v)
	})
}

// UpdateReturn sets the "return" field to the value that was provided on create.
func (u *CarrierServiceUpsertBulk) UpdateReturn() *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateReturn()
	})
}

// SetConsolidation sets the "consolidation" field.
func (u *CarrierServiceUpsertBulk) SetConsolidation(v bool) *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetConsolidation(v)
	})
}

// UpdateConsolidation sets the "consolidation" field to the value that was provided on create.
func (u *CarrierServiceUpsertBulk) UpdateConsolidation() *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateConsolidation()
	})
}

// SetDeliveryPointOptional sets the "delivery_point_optional" field.
func (u *CarrierServiceUpsertBulk) SetDeliveryPointOptional(v bool) *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetDeliveryPointOptional(v)
	})
}

// UpdateDeliveryPointOptional sets the "delivery_point_optional" field to the value that was provided on create.
func (u *CarrierServiceUpsertBulk) UpdateDeliveryPointOptional() *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateDeliveryPointOptional()
	})
}

// SetDeliveryPointRequired sets the "delivery_point_required" field.
func (u *CarrierServiceUpsertBulk) SetDeliveryPointRequired(v bool) *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.SetDeliveryPointRequired(v)
	})
}

// UpdateDeliveryPointRequired sets the "delivery_point_required" field to the value that was provided on create.
func (u *CarrierServiceUpsertBulk) UpdateDeliveryPointRequired() *CarrierServiceUpsertBulk {
	return u.Update(func(s *CarrierServiceUpsert) {
		s.UpdateDeliveryPointRequired()
	})
}

// Exec executes the query.
func (u *CarrierServiceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierServiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierServiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierServiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
