// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServicePostNordUpdate is the builder for updating CarrierAdditionalServicePostNord entities.
type CarrierAdditionalServicePostNordUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServicePostNordMutation
}

// Where appends a list predicates to the CarrierAdditionalServicePostNordUpdate builder.
func (caspnu *CarrierAdditionalServicePostNordUpdate) Where(ps ...predicate.CarrierAdditionalServicePostNord) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.Where(ps...)
	return caspnu
}

// SetLabel sets the "label" field.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetLabel(s string) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetLabel(s)
	return caspnu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableLabel(s *string) *CarrierAdditionalServicePostNordUpdate {
	if s != nil {
		caspnu.SetLabel(*s)
	}
	return caspnu
}

// SetMandatory sets the "mandatory" field.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetMandatory(b bool) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetMandatory(b)
	return caspnu
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableMandatory(b *bool) *CarrierAdditionalServicePostNordUpdate {
	if b != nil {
		caspnu.SetMandatory(*b)
	}
	return caspnu
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetAllCountriesConsignor(b bool) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetAllCountriesConsignor(b)
	return caspnu
}

// SetNillableAllCountriesConsignor sets the "all_countries_consignor" field if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableAllCountriesConsignor(b *bool) *CarrierAdditionalServicePostNordUpdate {
	if b != nil {
		caspnu.SetAllCountriesConsignor(*b)
	}
	return caspnu
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetAllCountriesConsignee(b bool) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetAllCountriesConsignee(b)
	return caspnu
}

// SetNillableAllCountriesConsignee sets the "all_countries_consignee" field if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableAllCountriesConsignee(b *bool) *CarrierAdditionalServicePostNordUpdate {
	if b != nil {
		caspnu.SetAllCountriesConsignee(*b)
	}
	return caspnu
}

// SetInternalID sets the "internal_id" field.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetInternalID(s string) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetInternalID(s)
	return caspnu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableInternalID(s *string) *CarrierAdditionalServicePostNordUpdate {
	if s != nil {
		caspnu.SetInternalID(*s)
	}
	return caspnu
}

// SetAPICode sets the "api_code" field.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetAPICode(s string) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetAPICode(s)
	return caspnu
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableAPICode(s *string) *CarrierAdditionalServicePostNordUpdate {
	if s != nil {
		caspnu.SetAPICode(*s)
	}
	return caspnu
}

// SetCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetCarrierServicePostNordID(id pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.SetCarrierServicePostNordID(id)
	return caspnu
}

// SetNillableCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID if the given value is not nil.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetNillableCarrierServicePostNordID(id *pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	if id != nil {
		caspnu = caspnu.SetCarrierServicePostNordID(*id)
	}
	return caspnu
}

// SetCarrierServicePostNord sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SetCarrierServicePostNord(c *CarrierServicePostNord) *CarrierAdditionalServicePostNordUpdate {
	return caspnu.SetCarrierServicePostNordID(c.ID)
}

// AddDeliveryOptionPostNordIDs adds the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by IDs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) AddDeliveryOptionPostNordIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.AddDeliveryOptionPostNordIDs(ids...)
	return caspnu
}

// AddDeliveryOptionPostNord adds the "delivery_option_post_nord" edges to the DeliveryOptionPostNord entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) AddDeliveryOptionPostNord(d ...*DeliveryOptionPostNord) *CarrierAdditionalServicePostNordUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return caspnu.AddDeliveryOptionPostNordIDs(ids...)
}

// AddCountriesConsigneeIDs adds the "countries_consignee" edge to the Country entity by IDs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) AddCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.AddCountriesConsigneeIDs(ids...)
	return caspnu
}

// AddCountriesConsignee adds the "countries_consignee" edges to the Country entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) AddCountriesConsignee(c ...*Country) *CarrierAdditionalServicePostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnu.AddCountriesConsigneeIDs(ids...)
}

// AddCountriesConsignorIDs adds the "countries_consignor" edge to the Country entity by IDs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) AddCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.AddCountriesConsignorIDs(ids...)
	return caspnu
}

// AddCountriesConsignor adds the "countries_consignor" edges to the Country entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) AddCountriesConsignor(c ...*Country) *CarrierAdditionalServicePostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnu.AddCountriesConsignorIDs(ids...)
}

// Mutation returns the CarrierAdditionalServicePostNordMutation object of the builder.
func (caspnu *CarrierAdditionalServicePostNordUpdate) Mutation() *CarrierAdditionalServicePostNordMutation {
	return caspnu.mutation
}

// ClearCarrierServicePostNord clears the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) ClearCarrierServicePostNord() *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.ClearCarrierServicePostNord()
	return caspnu
}

// ClearDeliveryOptionPostNord clears all "delivery_option_post_nord" edges to the DeliveryOptionPostNord entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) ClearDeliveryOptionPostNord() *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.ClearDeliveryOptionPostNord()
	return caspnu
}

// RemoveDeliveryOptionPostNordIDs removes the "delivery_option_post_nord" edge to DeliveryOptionPostNord entities by IDs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) RemoveDeliveryOptionPostNordIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.RemoveDeliveryOptionPostNordIDs(ids...)
	return caspnu
}

// RemoveDeliveryOptionPostNord removes "delivery_option_post_nord" edges to DeliveryOptionPostNord entities.
func (caspnu *CarrierAdditionalServicePostNordUpdate) RemoveDeliveryOptionPostNord(d ...*DeliveryOptionPostNord) *CarrierAdditionalServicePostNordUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return caspnu.RemoveDeliveryOptionPostNordIDs(ids...)
}

// ClearCountriesConsignee clears all "countries_consignee" edges to the Country entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) ClearCountriesConsignee() *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.ClearCountriesConsignee()
	return caspnu
}

// RemoveCountriesConsigneeIDs removes the "countries_consignee" edge to Country entities by IDs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) RemoveCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.RemoveCountriesConsigneeIDs(ids...)
	return caspnu
}

// RemoveCountriesConsignee removes "countries_consignee" edges to Country entities.
func (caspnu *CarrierAdditionalServicePostNordUpdate) RemoveCountriesConsignee(c ...*Country) *CarrierAdditionalServicePostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnu.RemoveCountriesConsigneeIDs(ids...)
}

// ClearCountriesConsignor clears all "countries_consignor" edges to the Country entity.
func (caspnu *CarrierAdditionalServicePostNordUpdate) ClearCountriesConsignor() *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.ClearCountriesConsignor()
	return caspnu
}

// RemoveCountriesConsignorIDs removes the "countries_consignor" edge to Country entities by IDs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) RemoveCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdate {
	caspnu.mutation.RemoveCountriesConsignorIDs(ids...)
	return caspnu
}

// RemoveCountriesConsignor removes "countries_consignor" edges to Country entities.
func (caspnu *CarrierAdditionalServicePostNordUpdate) RemoveCountriesConsignor(c ...*Country) *CarrierAdditionalServicePostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnu.RemoveCountriesConsignorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (caspnu *CarrierAdditionalServicePostNordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, caspnu.sqlSave, caspnu.mutation, caspnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) SaveX(ctx context.Context) int {
	affected, err := caspnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (caspnu *CarrierAdditionalServicePostNordUpdate) Exec(ctx context.Context) error {
	_, err := caspnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caspnu *CarrierAdditionalServicePostNordUpdate) ExecX(ctx context.Context) {
	if err := caspnu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (caspnu *CarrierAdditionalServicePostNordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString))
	if ps := caspnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caspnu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldLabel, field.TypeString, value)
	}
	if value, ok := caspnu.mutation.Mandatory(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldMandatory, field.TypeBool, value)
	}
	if value, ok := caspnu.mutation.AllCountriesConsignor(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldAllCountriesConsignor, field.TypeBool, value)
	}
	if value, ok := caspnu.mutation.AllCountriesConsignee(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldAllCountriesConsignee, field.TypeBool, value)
	}
	if value, ok := caspnu.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldInternalID, field.TypeString, value)
	}
	if value, ok := caspnu.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldAPICode, field.TypeString, value)
	}
	if caspnu.mutation.CarrierServicePostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.CarrierServicePostNordTable,
			Columns: []string{carrieradditionalservicepostnord.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.CarrierServicePostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.CarrierServicePostNordTable,
			Columns: []string{carrieradditionalservicepostnord.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caspnu.mutation.DeliveryOptionPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.RemovedDeliveryOptionPostNordIDs(); len(nodes) > 0 && !caspnu.mutation.DeliveryOptionPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.DeliveryOptionPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caspnu.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.RemovedCountriesConsigneeIDs(); len(nodes) > 0 && !caspnu.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.CountriesConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caspnu.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.RemovedCountriesConsignorIDs(); len(nodes) > 0 && !caspnu.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnu.mutation.CountriesConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, caspnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicepostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	caspnu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServicePostNordUpdateOne is the builder for updating a single CarrierAdditionalServicePostNord entity.
type CarrierAdditionalServicePostNordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServicePostNordMutation
}

// SetLabel sets the "label" field.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetLabel(s string) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetLabel(s)
	return caspnuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServicePostNordUpdateOne {
	if s != nil {
		caspnuo.SetLabel(*s)
	}
	return caspnuo
}

// SetMandatory sets the "mandatory" field.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetMandatory(b bool) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetMandatory(b)
	return caspnuo
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableMandatory(b *bool) *CarrierAdditionalServicePostNordUpdateOne {
	if b != nil {
		caspnuo.SetMandatory(*b)
	}
	return caspnuo
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetAllCountriesConsignor(b bool) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetAllCountriesConsignor(b)
	return caspnuo
}

// SetNillableAllCountriesConsignor sets the "all_countries_consignor" field if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableAllCountriesConsignor(b *bool) *CarrierAdditionalServicePostNordUpdateOne {
	if b != nil {
		caspnuo.SetAllCountriesConsignor(*b)
	}
	return caspnuo
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetAllCountriesConsignee(b bool) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetAllCountriesConsignee(b)
	return caspnuo
}

// SetNillableAllCountriesConsignee sets the "all_countries_consignee" field if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableAllCountriesConsignee(b *bool) *CarrierAdditionalServicePostNordUpdateOne {
	if b != nil {
		caspnuo.SetAllCountriesConsignee(*b)
	}
	return caspnuo
}

// SetInternalID sets the "internal_id" field.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetInternalID(s string) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetInternalID(s)
	return caspnuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableInternalID(s *string) *CarrierAdditionalServicePostNordUpdateOne {
	if s != nil {
		caspnuo.SetInternalID(*s)
	}
	return caspnuo
}

// SetAPICode sets the "api_code" field.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetAPICode(s string) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetAPICode(s)
	return caspnuo
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableAPICode(s *string) *CarrierAdditionalServicePostNordUpdateOne {
	if s != nil {
		caspnuo.SetAPICode(*s)
	}
	return caspnuo
}

// SetCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetCarrierServicePostNordID(id pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.SetCarrierServicePostNordID(id)
	return caspnuo
}

// SetNillableCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID if the given value is not nil.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetNillableCarrierServicePostNordID(id *pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	if id != nil {
		caspnuo = caspnuo.SetCarrierServicePostNordID(*id)
	}
	return caspnuo
}

// SetCarrierServicePostNord sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SetCarrierServicePostNord(c *CarrierServicePostNord) *CarrierAdditionalServicePostNordUpdateOne {
	return caspnuo.SetCarrierServicePostNordID(c.ID)
}

// AddDeliveryOptionPostNordIDs adds the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by IDs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) AddDeliveryOptionPostNordIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.AddDeliveryOptionPostNordIDs(ids...)
	return caspnuo
}

// AddDeliveryOptionPostNord adds the "delivery_option_post_nord" edges to the DeliveryOptionPostNord entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) AddDeliveryOptionPostNord(d ...*DeliveryOptionPostNord) *CarrierAdditionalServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return caspnuo.AddDeliveryOptionPostNordIDs(ids...)
}

// AddCountriesConsigneeIDs adds the "countries_consignee" edge to the Country entity by IDs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) AddCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.AddCountriesConsigneeIDs(ids...)
	return caspnuo
}

// AddCountriesConsignee adds the "countries_consignee" edges to the Country entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) AddCountriesConsignee(c ...*Country) *CarrierAdditionalServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnuo.AddCountriesConsigneeIDs(ids...)
}

// AddCountriesConsignorIDs adds the "countries_consignor" edge to the Country entity by IDs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) AddCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.AddCountriesConsignorIDs(ids...)
	return caspnuo
}

// AddCountriesConsignor adds the "countries_consignor" edges to the Country entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) AddCountriesConsignor(c ...*Country) *CarrierAdditionalServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnuo.AddCountriesConsignorIDs(ids...)
}

// Mutation returns the CarrierAdditionalServicePostNordMutation object of the builder.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) Mutation() *CarrierAdditionalServicePostNordMutation {
	return caspnuo.mutation
}

// ClearCarrierServicePostNord clears the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) ClearCarrierServicePostNord() *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.ClearCarrierServicePostNord()
	return caspnuo
}

// ClearDeliveryOptionPostNord clears all "delivery_option_post_nord" edges to the DeliveryOptionPostNord entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) ClearDeliveryOptionPostNord() *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.ClearDeliveryOptionPostNord()
	return caspnuo
}

// RemoveDeliveryOptionPostNordIDs removes the "delivery_option_post_nord" edge to DeliveryOptionPostNord entities by IDs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) RemoveDeliveryOptionPostNordIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.RemoveDeliveryOptionPostNordIDs(ids...)
	return caspnuo
}

// RemoveDeliveryOptionPostNord removes "delivery_option_post_nord" edges to DeliveryOptionPostNord entities.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) RemoveDeliveryOptionPostNord(d ...*DeliveryOptionPostNord) *CarrierAdditionalServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return caspnuo.RemoveDeliveryOptionPostNordIDs(ids...)
}

// ClearCountriesConsignee clears all "countries_consignee" edges to the Country entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) ClearCountriesConsignee() *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.ClearCountriesConsignee()
	return caspnuo
}

// RemoveCountriesConsigneeIDs removes the "countries_consignee" edge to Country entities by IDs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) RemoveCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.RemoveCountriesConsigneeIDs(ids...)
	return caspnuo
}

// RemoveCountriesConsignee removes "countries_consignee" edges to Country entities.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) RemoveCountriesConsignee(c ...*Country) *CarrierAdditionalServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnuo.RemoveCountriesConsigneeIDs(ids...)
}

// ClearCountriesConsignor clears all "countries_consignor" edges to the Country entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) ClearCountriesConsignor() *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.ClearCountriesConsignor()
	return caspnuo
}

// RemoveCountriesConsignorIDs removes the "countries_consignor" edge to Country entities by IDs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) RemoveCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.RemoveCountriesConsignorIDs(ids...)
	return caspnuo
}

// RemoveCountriesConsignor removes "countries_consignor" edges to Country entities.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) RemoveCountriesConsignor(c ...*Country) *CarrierAdditionalServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return caspnuo.RemoveCountriesConsignorIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServicePostNordUpdate builder.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) Where(ps ...predicate.CarrierAdditionalServicePostNord) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.mutation.Where(ps...)
	return caspnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServicePostNordUpdateOne {
	caspnuo.fields = append([]string{field}, fields...)
	return caspnuo
}

// Save executes the query and returns the updated CarrierAdditionalServicePostNord entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServicePostNord, error) {
	return withHooks(ctx, caspnuo.sqlSave, caspnuo.mutation, caspnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServicePostNord {
	node, err := caspnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) Exec(ctx context.Context) error {
	_, err := caspnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) ExecX(ctx context.Context) {
	if err := caspnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (caspnuo *CarrierAdditionalServicePostNordUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServicePostNord, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString))
	id, ok := caspnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServicePostNord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := caspnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicepostnord.FieldID)
		for _, f := range fields {
			if !carrieradditionalservicepostnord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalservicepostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := caspnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := caspnuo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldLabel, field.TypeString, value)
	}
	if value, ok := caspnuo.mutation.Mandatory(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldMandatory, field.TypeBool, value)
	}
	if value, ok := caspnuo.mutation.AllCountriesConsignor(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldAllCountriesConsignor, field.TypeBool, value)
	}
	if value, ok := caspnuo.mutation.AllCountriesConsignee(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldAllCountriesConsignee, field.TypeBool, value)
	}
	if value, ok := caspnuo.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldInternalID, field.TypeString, value)
	}
	if value, ok := caspnuo.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicepostnord.FieldAPICode, field.TypeString, value)
	}
	if caspnuo.mutation.CarrierServicePostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.CarrierServicePostNordTable,
			Columns: []string{carrieradditionalservicepostnord.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.CarrierServicePostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.CarrierServicePostNordTable,
			Columns: []string{carrieradditionalservicepostnord.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caspnuo.mutation.DeliveryOptionPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.RemovedDeliveryOptionPostNordIDs(); len(nodes) > 0 && !caspnuo.mutation.DeliveryOptionPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.DeliveryOptionPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caspnuo.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.RemovedCountriesConsigneeIDs(); len(nodes) > 0 && !caspnuo.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.CountriesConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if caspnuo.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.RemovedCountriesConsignorIDs(); len(nodes) > 0 && !caspnuo.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := caspnuo.mutation.CountriesConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServicePostNord{config: caspnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, caspnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicepostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	caspnuo.mutation.done = true
	return _node, nil
}
