// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestCreate is the builder for creating a HypothesisTest entity.
type HypothesisTestCreate struct {
	config
	mutation *HypothesisTestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (htc *HypothesisTestCreate) SetTenantID(pu pulid.ID) *HypothesisTestCreate {
	htc.mutation.SetTenantID(pu)
	return htc
}

// SetName sets the "name" field.
func (htc *HypothesisTestCreate) SetName(s string) *HypothesisTestCreate {
	htc.mutation.SetName(s)
	return htc
}

// SetActive sets the "active" field.
func (htc *HypothesisTestCreate) SetActive(b bool) *HypothesisTestCreate {
	htc.mutation.SetActive(b)
	return htc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (htc *HypothesisTestCreate) SetNillableActive(b *bool) *HypothesisTestCreate {
	if b != nil {
		htc.SetActive(*b)
	}
	return htc
}

// SetID sets the "id" field.
func (htc *HypothesisTestCreate) SetID(pu pulid.ID) *HypothesisTestCreate {
	htc.mutation.SetID(pu)
	return htc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (htc *HypothesisTestCreate) SetNillableID(pu *pulid.ID) *HypothesisTestCreate {
	if pu != nil {
		htc.SetID(*pu)
	}
	return htc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htc *HypothesisTestCreate) SetTenant(t *Tenant) *HypothesisTestCreate {
	return htc.SetTenantID(t.ID)
}

// SetHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID.
func (htc *HypothesisTestCreate) SetHypothesisTestDeliveryOptionID(id pulid.ID) *HypothesisTestCreate {
	htc.mutation.SetHypothesisTestDeliveryOptionID(id)
	return htc
}

// SetNillableHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID if the given value is not nil.
func (htc *HypothesisTestCreate) SetNillableHypothesisTestDeliveryOptionID(id *pulid.ID) *HypothesisTestCreate {
	if id != nil {
		htc = htc.SetHypothesisTestDeliveryOptionID(*id)
	}
	return htc
}

// SetHypothesisTestDeliveryOption sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htc *HypothesisTestCreate) SetHypothesisTestDeliveryOption(h *HypothesisTestDeliveryOption) *HypothesisTestCreate {
	return htc.SetHypothesisTestDeliveryOptionID(h.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (htc *HypothesisTestCreate) SetConnectionID(id pulid.ID) *HypothesisTestCreate {
	htc.mutation.SetConnectionID(id)
	return htc
}

// SetConnection sets the "connection" edge to the Connection entity.
func (htc *HypothesisTestCreate) SetConnection(c *Connection) *HypothesisTestCreate {
	return htc.SetConnectionID(c.ID)
}

// Mutation returns the HypothesisTestMutation object of the builder.
func (htc *HypothesisTestCreate) Mutation() *HypothesisTestMutation {
	return htc.mutation
}

// Save creates the HypothesisTest in the database.
func (htc *HypothesisTestCreate) Save(ctx context.Context) (*HypothesisTest, error) {
	if err := htc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, htc.sqlSave, htc.mutation, htc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (htc *HypothesisTestCreate) SaveX(ctx context.Context) *HypothesisTest {
	v, err := htc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htc *HypothesisTestCreate) Exec(ctx context.Context) error {
	_, err := htc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htc *HypothesisTestCreate) ExecX(ctx context.Context) {
	if err := htc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htc *HypothesisTestCreate) defaults() error {
	if _, ok := htc.mutation.Active(); !ok {
		v := hypothesistest.DefaultActive
		htc.mutation.SetActive(v)
	}
	if _, ok := htc.mutation.ID(); !ok {
		if hypothesistest.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized hypothesistest.DefaultID (forgotten import ent/runtime?)")
		}
		v := hypothesistest.DefaultID()
		htc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (htc *HypothesisTestCreate) check() error {
	if _, ok := htc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "HypothesisTest.tenant_id"`)}
	}
	if _, ok := htc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "HypothesisTest.name"`)}
	}
	if _, ok := htc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "HypothesisTest.active"`)}
	}
	if len(htc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "HypothesisTest.tenant"`)}
	}
	if len(htc.mutation.ConnectionIDs()) == 0 {
		return &ValidationError{Name: "connection", err: errors.New(`ent: missing required edge "HypothesisTest.connection"`)}
	}
	return nil
}

func (htc *HypothesisTestCreate) sqlSave(ctx context.Context) (*HypothesisTest, error) {
	if err := htc.check(); err != nil {
		return nil, err
	}
	_node, _spec := htc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	htc.mutation.id = &_node.ID
	htc.mutation.done = true
	return _node, nil
}

func (htc *HypothesisTestCreate) createSpec() (*HypothesisTest, *sqlgraph.CreateSpec) {
	var (
		_node = &HypothesisTest{config: htc.config}
		_spec = sqlgraph.NewCreateSpec(hypothesistest.Table, sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString))
	)
	_spec.OnConflict = htc.conflict
	if id, ok := htc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := htc.mutation.Name(); ok {
		_spec.SetField(hypothesistest.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := htc.mutation.Active(); ok {
		_spec.SetField(hypothesistest.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if nodes := htc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.TenantTable,
			Columns: []string{hypothesistest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htc.mutation.HypothesisTestDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htc.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.ConnectionTable,
			Columns: []string{hypothesistest.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hypothesis_test_connection = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HypothesisTest.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HypothesisTestUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (htc *HypothesisTestCreate) OnConflict(opts ...sql.ConflictOption) *HypothesisTestUpsertOne {
	htc.conflict = opts
	return &HypothesisTestUpsertOne{
		create: htc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HypothesisTest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (htc *HypothesisTestCreate) OnConflictColumns(columns ...string) *HypothesisTestUpsertOne {
	htc.conflict = append(htc.conflict, sql.ConflictColumns(columns...))
	return &HypothesisTestUpsertOne{
		create: htc,
	}
}

type (
	// HypothesisTestUpsertOne is the builder for "upsert"-ing
	//  one HypothesisTest node.
	HypothesisTestUpsertOne struct {
		create *HypothesisTestCreate
	}

	// HypothesisTestUpsert is the "OnConflict" setter.
	HypothesisTestUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestUpsert) SetTenantID(v pulid.ID) *HypothesisTestUpsert {
	u.Set(hypothesistest.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestUpsert) UpdateTenantID() *HypothesisTestUpsert {
	u.SetExcluded(hypothesistest.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *HypothesisTestUpsert) SetName(v string) *HypothesisTestUpsert {
	u.Set(hypothesistest.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HypothesisTestUpsert) UpdateName() *HypothesisTestUpsert {
	u.SetExcluded(hypothesistest.FieldName)
	return u
}

// SetActive sets the "active" field.
func (u *HypothesisTestUpsert) SetActive(v bool) *HypothesisTestUpsert {
	u.Set(hypothesistest.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *HypothesisTestUpsert) UpdateActive() *HypothesisTestUpsert {
	u.SetExcluded(hypothesistest.FieldActive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HypothesisTest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hypothesistest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HypothesisTestUpsertOne) UpdateNewValues() *HypothesisTestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hypothesistest.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HypothesisTest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HypothesisTestUpsertOne) Ignore() *HypothesisTestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HypothesisTestUpsertOne) DoNothing() *HypothesisTestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HypothesisTestCreate.OnConflict
// documentation for more info.
func (u *HypothesisTestUpsertOne) Update(set func(*HypothesisTestUpsert)) *HypothesisTestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HypothesisTestUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestUpsertOne) SetTenantID(v pulid.ID) *HypothesisTestUpsertOne {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestUpsertOne) UpdateTenantID() *HypothesisTestUpsertOne {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *HypothesisTestUpsertOne) SetName(v string) *HypothesisTestUpsertOne {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HypothesisTestUpsertOne) UpdateName() *HypothesisTestUpsertOne {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.UpdateName()
	})
}

// SetActive sets the "active" field.
func (u *HypothesisTestUpsertOne) SetActive(v bool) *HypothesisTestUpsertOne {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *HypothesisTestUpsertOne) UpdateActive() *HypothesisTestUpsertOne {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.UpdateActive()
	})
}

// Exec executes the query.
func (u *HypothesisTestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HypothesisTestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HypothesisTestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HypothesisTestUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HypothesisTestUpsertOne.ID is not supported by MySQL driver. Use HypothesisTestUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HypothesisTestUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HypothesisTestCreateBulk is the builder for creating many HypothesisTest entities in bulk.
type HypothesisTestCreateBulk struct {
	config
	err      error
	builders []*HypothesisTestCreate
	conflict []sql.ConflictOption
}

// Save creates the HypothesisTest entities in the database.
func (htcb *HypothesisTestCreateBulk) Save(ctx context.Context) ([]*HypothesisTest, error) {
	if htcb.err != nil {
		return nil, htcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(htcb.builders))
	nodes := make([]*HypothesisTest, len(htcb.builders))
	mutators := make([]Mutator, len(htcb.builders))
	for i := range htcb.builders {
		func(i int, root context.Context) {
			builder := htcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HypothesisTestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = htcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htcb *HypothesisTestCreateBulk) SaveX(ctx context.Context) []*HypothesisTest {
	v, err := htcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htcb *HypothesisTestCreateBulk) Exec(ctx context.Context) error {
	_, err := htcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htcb *HypothesisTestCreateBulk) ExecX(ctx context.Context) {
	if err := htcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HypothesisTest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HypothesisTestUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (htcb *HypothesisTestCreateBulk) OnConflict(opts ...sql.ConflictOption) *HypothesisTestUpsertBulk {
	htcb.conflict = opts
	return &HypothesisTestUpsertBulk{
		create: htcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HypothesisTest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (htcb *HypothesisTestCreateBulk) OnConflictColumns(columns ...string) *HypothesisTestUpsertBulk {
	htcb.conflict = append(htcb.conflict, sql.ConflictColumns(columns...))
	return &HypothesisTestUpsertBulk{
		create: htcb,
	}
}

// HypothesisTestUpsertBulk is the builder for "upsert"-ing
// a bulk of HypothesisTest nodes.
type HypothesisTestUpsertBulk struct {
	create *HypothesisTestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HypothesisTest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hypothesistest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HypothesisTestUpsertBulk) UpdateNewValues() *HypothesisTestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hypothesistest.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HypothesisTest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HypothesisTestUpsertBulk) Ignore() *HypothesisTestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HypothesisTestUpsertBulk) DoNothing() *HypothesisTestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HypothesisTestCreateBulk.OnConflict
// documentation for more info.
func (u *HypothesisTestUpsertBulk) Update(set func(*HypothesisTestUpsert)) *HypothesisTestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HypothesisTestUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestUpsertBulk) SetTenantID(v pulid.ID) *HypothesisTestUpsertBulk {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestUpsertBulk) UpdateTenantID() *HypothesisTestUpsertBulk {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *HypothesisTestUpsertBulk) SetName(v string) *HypothesisTestUpsertBulk {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *HypothesisTestUpsertBulk) UpdateName() *HypothesisTestUpsertBulk {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.UpdateName()
	})
}

// SetActive sets the "active" field.
func (u *HypothesisTestUpsertBulk) SetActive(v bool) *HypothesisTestUpsertBulk {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *HypothesisTestUpsertBulk) UpdateActive() *HypothesisTestUpsertBulk {
	return u.Update(func(s *HypothesisTestUpsert) {
		s.UpdateActive()
	})
}

// Exec executes the query.
func (u *HypothesisTestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HypothesisTestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HypothesisTestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HypothesisTestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
