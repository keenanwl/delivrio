// Code generated by ent, DO NOT EDIT.

package packagingusps

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the packagingusps type in the database.
	Label = "packaging_usps"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// EdgePackagingUSPSRateIndicator holds the string denoting the packaging_usps_rate_indicator edge name in mutations.
	EdgePackagingUSPSRateIndicator = "packaging_usps_rate_indicator"
	// EdgePackagingUSPSProcessingCategory holds the string denoting the packaging_usps_processing_category edge name in mutations.
	EdgePackagingUSPSProcessingCategory = "packaging_usps_processing_category"
	// Table holds the table name of the packagingusps in the database.
	Table = "packaging_usp_ss"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "packaging_usp_ss"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "packaging_usp_ss"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "packaging_packaging_usps"
	// PackagingUSPSRateIndicatorTable is the table that holds the packaging_usps_rate_indicator relation/edge.
	PackagingUSPSRateIndicatorTable = "packaging_usp_ss"
	// PackagingUSPSRateIndicatorInverseTable is the table name for the PackagingUSPSRateIndicator entity.
	// It exists in this package in order to avoid circular dependency with the "packaginguspsrateindicator" package.
	PackagingUSPSRateIndicatorInverseTable = "packaging_usps_rate_indicators"
	// PackagingUSPSRateIndicatorColumn is the table column denoting the packaging_usps_rate_indicator relation/edge.
	PackagingUSPSRateIndicatorColumn = "packaging_usps_packaging_usps_rate_indicator"
	// PackagingUSPSProcessingCategoryTable is the table that holds the packaging_usps_processing_category relation/edge.
	PackagingUSPSProcessingCategoryTable = "packaging_usp_ss"
	// PackagingUSPSProcessingCategoryInverseTable is the table name for the PackagingUSPSProcessingCategory entity.
	// It exists in this package in order to avoid circular dependency with the "packaginguspsprocessingcategory" package.
	PackagingUSPSProcessingCategoryInverseTable = "packaging_usps_processing_categories"
	// PackagingUSPSProcessingCategoryColumn is the table column denoting the packaging_usps_processing_category relation/edge.
	PackagingUSPSProcessingCategoryColumn = "packaging_usps_packaging_usps_processing_category"
)

// Columns holds all SQL columns for packagingusps fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "packaging_usp_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"packaging_packaging_usps",
	"packaging_usps_packaging_usps_rate_indicator",
	"packaging_usps_packaging_usps_processing_category",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the PackagingUSPS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingField orders the results by packaging field.
func ByPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingUSPSRateIndicatorField orders the results by packaging_usps_rate_indicator field.
func ByPackagingUSPSRateIndicatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingUSPSRateIndicatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingUSPSProcessingCategoryField orders the results by packaging_usps_processing_category field.
func ByPackagingUSPSProcessingCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingUSPSProcessingCategoryStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PackagingTable, PackagingColumn),
	)
}
func newPackagingUSPSRateIndicatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingUSPSRateIndicatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackagingUSPSRateIndicatorTable, PackagingUSPSRateIndicatorColumn),
	)
}
func newPackagingUSPSProcessingCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingUSPSProcessingCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackagingUSPSProcessingCategoryTable, PackagingUSPSProcessingCategoryColumn),
	)
}
