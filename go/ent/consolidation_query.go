// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConsolidationQuery is the builder for querying Consolidation entities.
type ConsolidationQuery struct {
	config
	ctx                         *QueryContext
	order                       []consolidation.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.Consolidation
	withTenant                  *TenantQuery
	withPallets                 *PalletQuery
	withOrders                  *OrderQuery
	withDeliveryOption          *DeliveryOptionQuery
	withRecipient               *AddressQuery
	withSender                  *AddressQuery
	withShipment                *ShipmentQuery
	withCancelledShipments      *ShipmentQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*Consolidation) error
	withNamedPallets            map[string]*PalletQuery
	withNamedOrders             map[string]*OrderQuery
	withNamedCancelledShipments map[string]*ShipmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConsolidationQuery builder.
func (cq *ConsolidationQuery) Where(ps ...predicate.Consolidation) *ConsolidationQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ConsolidationQuery) Limit(limit int) *ConsolidationQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ConsolidationQuery) Offset(offset int) *ConsolidationQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ConsolidationQuery) Unique(unique bool) *ConsolidationQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ConsolidationQuery) Order(o ...consolidation.OrderOption) *ConsolidationQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryTenant chains the current query on the "tenant" edge.
func (cq *ConsolidationQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, consolidation.TenantTable, consolidation.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPallets chains the current query on the "pallets" edge.
func (cq *ConsolidationQuery) QueryPallets() *PalletQuery {
	query := (&PalletClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, consolidation.PalletsTable, consolidation.PalletsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (cq *ConsolidationQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, consolidation.OrdersTable, consolidation.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (cq *ConsolidationQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, consolidation.DeliveryOptionTable, consolidation.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecipient chains the current query on the "recipient" edge.
func (cq *ConsolidationQuery) QueryRecipient() *AddressQuery {
	query := (&AddressClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, consolidation.RecipientTable, consolidation.RecipientColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySender chains the current query on the "sender" edge.
func (cq *ConsolidationQuery) QuerySender() *AddressQuery {
	query := (&AddressClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, consolidation.SenderTable, consolidation.SenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (cq *ConsolidationQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, consolidation.ShipmentTable, consolidation.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCancelledShipments chains the current query on the "cancelled_shipments" edge.
func (cq *ConsolidationQuery) QueryCancelledShipments() *ShipmentQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, consolidation.CancelledShipmentsTable, consolidation.CancelledShipmentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Consolidation entity from the query.
// Returns a *NotFoundError when no Consolidation was found.
func (cq *ConsolidationQuery) First(ctx context.Context) (*Consolidation, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{consolidation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ConsolidationQuery) FirstX(ctx context.Context) *Consolidation {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Consolidation ID from the query.
// Returns a *NotFoundError when no Consolidation ID was found.
func (cq *ConsolidationQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{consolidation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ConsolidationQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Consolidation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Consolidation entity is found.
// Returns a *NotFoundError when no Consolidation entities are found.
func (cq *ConsolidationQuery) Only(ctx context.Context) (*Consolidation, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{consolidation.Label}
	default:
		return nil, &NotSingularError{consolidation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ConsolidationQuery) OnlyX(ctx context.Context) *Consolidation {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Consolidation ID in the query.
// Returns a *NotSingularError when more than one Consolidation ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ConsolidationQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{consolidation.Label}
	default:
		err = &NotSingularError{consolidation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ConsolidationQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Consolidations.
func (cq *ConsolidationQuery) All(ctx context.Context) ([]*Consolidation, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Consolidation, *ConsolidationQuery]()
	return withInterceptors[[]*Consolidation](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ConsolidationQuery) AllX(ctx context.Context) []*Consolidation {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Consolidation IDs.
func (cq *ConsolidationQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(consolidation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ConsolidationQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ConsolidationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ConsolidationQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ConsolidationQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ConsolidationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ConsolidationQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConsolidationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ConsolidationQuery) Clone() *ConsolidationQuery {
	if cq == nil {
		return nil
	}
	return &ConsolidationQuery{
		config:                 cq.config,
		ctx:                    cq.ctx.Clone(),
		order:                  append([]consolidation.OrderOption{}, cq.order...),
		inters:                 append([]Interceptor{}, cq.inters...),
		predicates:             append([]predicate.Consolidation{}, cq.predicates...),
		withTenant:             cq.withTenant.Clone(),
		withPallets:            cq.withPallets.Clone(),
		withOrders:             cq.withOrders.Clone(),
		withDeliveryOption:     cq.withDeliveryOption.Clone(),
		withRecipient:          cq.withRecipient.Clone(),
		withSender:             cq.withSender.Clone(),
		withShipment:           cq.withShipment.Clone(),
		withCancelledShipments: cq.withCancelledShipments.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithTenant(opts ...func(*TenantQuery)) *ConsolidationQuery {
	query := (&TenantClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTenant = query
	return cq
}

// WithPallets tells the query-builder to eager-load the nodes that are connected to
// the "pallets" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithPallets(opts ...func(*PalletQuery)) *ConsolidationQuery {
	query := (&PalletClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPallets = query
	return cq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithOrders(opts ...func(*OrderQuery)) *ConsolidationQuery {
	query := (&OrderClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOrders = query
	return cq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *ConsolidationQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDeliveryOption = query
	return cq
}

// WithRecipient tells the query-builder to eager-load the nodes that are connected to
// the "recipient" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithRecipient(opts ...func(*AddressQuery)) *ConsolidationQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withRecipient = query
	return cq
}

// WithSender tells the query-builder to eager-load the nodes that are connected to
// the "sender" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithSender(opts ...func(*AddressQuery)) *ConsolidationQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withSender = query
	return cq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithShipment(opts ...func(*ShipmentQuery)) *ConsolidationQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withShipment = query
	return cq
}

// WithCancelledShipments tells the query-builder to eager-load the nodes that are connected to
// the "cancelled_shipments" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithCancelledShipments(opts ...func(*ShipmentQuery)) *ConsolidationQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCancelledShipments = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Consolidation.Query().
//		GroupBy(consolidation.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ConsolidationQuery) GroupBy(field string, fields ...string) *ConsolidationGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConsolidationGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = consolidation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Consolidation.Query().
//		Select(consolidation.FieldTenantID).
//		Scan(ctx, &v)
func (cq *ConsolidationQuery) Select(fields ...string) *ConsolidationSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ConsolidationSelect{ConsolidationQuery: cq}
	sbuild.label = consolidation.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConsolidationSelect configured with the given aggregations.
func (cq *ConsolidationQuery) Aggregate(fns ...AggregateFunc) *ConsolidationSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ConsolidationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !consolidation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	if consolidation.Policy == nil {
		return errors.New("ent: uninitialized consolidation.Policy (forgotten import ent/runtime?)")
	}
	if err := consolidation.Policy.EvalQuery(ctx, cq); err != nil {
		return err
	}
	return nil
}

func (cq *ConsolidationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Consolidation, error) {
	var (
		nodes       = []*Consolidation{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [8]bool{
			cq.withTenant != nil,
			cq.withPallets != nil,
			cq.withOrders != nil,
			cq.withDeliveryOption != nil,
			cq.withRecipient != nil,
			cq.withSender != nil,
			cq.withShipment != nil,
			cq.withCancelledShipments != nil,
		}
	)
	if cq.withDeliveryOption != nil || cq.withShipment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, consolidation.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Consolidation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Consolidation{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withTenant; query != nil {
		if err := cq.loadTenant(ctx, query, nodes, nil,
			func(n *Consolidation, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPallets; query != nil {
		if err := cq.loadPallets(ctx, query, nodes,
			func(n *Consolidation) { n.Edges.Pallets = []*Pallet{} },
			func(n *Consolidation, e *Pallet) { n.Edges.Pallets = append(n.Edges.Pallets, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withOrders; query != nil {
		if err := cq.loadOrders(ctx, query, nodes,
			func(n *Consolidation) { n.Edges.Orders = []*Order{} },
			func(n *Consolidation, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDeliveryOption; query != nil {
		if err := cq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *Consolidation, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withRecipient; query != nil {
		if err := cq.loadRecipient(ctx, query, nodes, nil,
			func(n *Consolidation, e *Address) { n.Edges.Recipient = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withSender; query != nil {
		if err := cq.loadSender(ctx, query, nodes, nil,
			func(n *Consolidation, e *Address) { n.Edges.Sender = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withShipment; query != nil {
		if err := cq.loadShipment(ctx, query, nodes, nil,
			func(n *Consolidation, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCancelledShipments; query != nil {
		if err := cq.loadCancelledShipments(ctx, query, nodes,
			func(n *Consolidation) { n.Edges.CancelledShipments = []*Shipment{} },
			func(n *Consolidation, e *Shipment) {
				n.Edges.CancelledShipments = append(n.Edges.CancelledShipments, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedPallets {
		if err := cq.loadPallets(ctx, query, nodes,
			func(n *Consolidation) { n.appendNamedPallets(name) },
			func(n *Consolidation, e *Pallet) { n.appendNamedPallets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedOrders {
		if err := cq.loadOrders(ctx, query, nodes,
			func(n *Consolidation) { n.appendNamedOrders(name) },
			func(n *Consolidation, e *Order) { n.appendNamedOrders(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCancelledShipments {
		if err := cq.loadCancelledShipments(ctx, query, nodes,
			func(n *Consolidation) { n.appendNamedCancelledShipments(name) },
			func(n *Consolidation, e *Shipment) { n.appendNamedCancelledShipments(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ConsolidationQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Consolidation)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConsolidationQuery) loadPallets(ctx context.Context, query *PalletQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Pallet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Consolidation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Pallet(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(consolidation.PalletsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.consolidation_pallets
		if fk == nil {
			return fmt.Errorf(`foreign-key "consolidation_pallets" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "consolidation_pallets" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConsolidationQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Consolidation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(consolidation.OrdersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.consolidation_orders
		if fk == nil {
			return fmt.Errorf(`foreign-key "consolidation_orders" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "consolidation_orders" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConsolidationQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Consolidation)
	for i := range nodes {
		if nodes[i].consolidation_delivery_option == nil {
			continue
		}
		fk := *nodes[i].consolidation_delivery_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "consolidation_delivery_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConsolidationQuery) loadRecipient(ctx context.Context, query *AddressQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Consolidation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(consolidation.RecipientColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.consolidation_recipient
		if fk == nil {
			return fmt.Errorf(`foreign-key "consolidation_recipient" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "consolidation_recipient" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConsolidationQuery) loadSender(ctx context.Context, query *AddressQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Address)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Consolidation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Address(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(consolidation.SenderColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.consolidation_sender
		if fk == nil {
			return fmt.Errorf(`foreign-key "consolidation_sender" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "consolidation_sender" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ConsolidationQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Shipment)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Consolidation)
	for i := range nodes {
		if nodes[i].shipment_consolidation == nil {
			continue
		}
		fk := *nodes[i].shipment_consolidation
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_consolidation" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ConsolidationQuery) loadCancelledShipments(ctx context.Context, query *ShipmentQuery, nodes []*Consolidation, init func(*Consolidation), assign func(*Consolidation, *Shipment)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Consolidation)
	nids := make(map[pulid.ID]map[*Consolidation]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(consolidation.CancelledShipmentsTable)
		s.Join(joinT).On(s.C(shipment.FieldID), joinT.C(consolidation.CancelledShipmentsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(consolidation.CancelledShipmentsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(consolidation.CancelledShipmentsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Consolidation]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Shipment](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cancelled_shipments" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cq *ConsolidationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ConsolidationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(consolidation.Table, consolidation.Columns, sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, consolidation.FieldID)
		for i := range fields {
			if fields[i] != consolidation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cq.withTenant != nil {
			_spec.Node.AddColumnOnce(consolidation.FieldTenantID)
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ConsolidationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(consolidation.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = consolidation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPallets tells the query-builder to eager-load the nodes that are connected to the "pallets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithNamedPallets(name string, opts ...func(*PalletQuery)) *ConsolidationQuery {
	query := (&PalletClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedPallets == nil {
		cq.withNamedPallets = make(map[string]*PalletQuery)
	}
	cq.withNamedPallets[name] = query
	return cq
}

// WithNamedOrders tells the query-builder to eager-load the nodes that are connected to the "orders"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithNamedOrders(name string, opts ...func(*OrderQuery)) *ConsolidationQuery {
	query := (&OrderClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedOrders == nil {
		cq.withNamedOrders = make(map[string]*OrderQuery)
	}
	cq.withNamedOrders[name] = query
	return cq
}

// WithNamedCancelledShipments tells the query-builder to eager-load the nodes that are connected to the "cancelled_shipments"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ConsolidationQuery) WithNamedCancelledShipments(name string, opts ...func(*ShipmentQuery)) *ConsolidationQuery {
	query := (&ShipmentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCancelledShipments == nil {
		cq.withNamedCancelledShipments = make(map[string]*ShipmentQuery)
	}
	cq.withNamedCancelledShipments[name] = query
	return cq
}

// ConsolidationGroupBy is the group-by builder for Consolidation entities.
type ConsolidationGroupBy struct {
	selector
	build *ConsolidationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ConsolidationGroupBy) Aggregate(fns ...AggregateFunc) *ConsolidationGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ConsolidationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConsolidationQuery, *ConsolidationGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ConsolidationGroupBy) sqlScan(ctx context.Context, root *ConsolidationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConsolidationSelect is the builder for selecting fields of Consolidation entities.
type ConsolidationSelect struct {
	*ConsolidationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ConsolidationSelect) Aggregate(fns ...AggregateFunc) *ConsolidationSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ConsolidationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConsolidationQuery, *ConsolidationSelect](ctx, cs.ConsolidationQuery, cs, cs.inters, v)
}

func (cs *ConsolidationSelect) sqlScan(ctx context.Context, root *ConsolidationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
