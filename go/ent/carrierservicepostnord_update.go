// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServicePostNordUpdate is the builder for updating CarrierServicePostNord entities.
type CarrierServicePostNordUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServicePostNordMutation
}

// Where appends a list predicates to the CarrierServicePostNordUpdate builder.
func (cspnu *CarrierServicePostNordUpdate) Where(ps ...predicate.CarrierServicePostNord) *CarrierServicePostNordUpdate {
	cspnu.mutation.Where(ps...)
	return cspnu
}

// SetLabel sets the "label" field.
func (cspnu *CarrierServicePostNordUpdate) SetLabel(s string) *CarrierServicePostNordUpdate {
	cspnu.mutation.SetLabel(s)
	return cspnu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cspnu *CarrierServicePostNordUpdate) SetNillableLabel(s *string) *CarrierServicePostNordUpdate {
	if s != nil {
		cspnu.SetLabel(*s)
	}
	return cspnu
}

// SetInternalID sets the "internal_id" field.
func (cspnu *CarrierServicePostNordUpdate) SetInternalID(s string) *CarrierServicePostNordUpdate {
	cspnu.mutation.SetInternalID(s)
	return cspnu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (cspnu *CarrierServicePostNordUpdate) SetNillableInternalID(s *string) *CarrierServicePostNordUpdate {
	if s != nil {
		cspnu.SetInternalID(*s)
	}
	return cspnu
}

// SetAPICode sets the "api_code" field.
func (cspnu *CarrierServicePostNordUpdate) SetAPICode(s string) *CarrierServicePostNordUpdate {
	cspnu.mutation.SetAPICode(s)
	return cspnu
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (cspnu *CarrierServicePostNordUpdate) SetNillableAPICode(s *string) *CarrierServicePostNordUpdate {
	if s != nil {
		cspnu.SetAPICode(*s)
	}
	return cspnu
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (cspnu *CarrierServicePostNordUpdate) SetCarrierServiceID(id pulid.ID) *CarrierServicePostNordUpdate {
	cspnu.mutation.SetCarrierServiceID(id)
	return cspnu
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (cspnu *CarrierServicePostNordUpdate) SetCarrierService(c *CarrierService) *CarrierServicePostNordUpdate {
	return cspnu.SetCarrierServiceID(c.ID)
}

// AddCarrierAddServPostNordIDs adds the "carrier_add_serv_post_nord" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (cspnu *CarrierServicePostNordUpdate) AddCarrierAddServPostNordIDs(ids ...pulid.ID) *CarrierServicePostNordUpdate {
	cspnu.mutation.AddCarrierAddServPostNordIDs(ids...)
	return cspnu
}

// AddCarrierAddServPostNord adds the "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (cspnu *CarrierServicePostNordUpdate) AddCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *CarrierServicePostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cspnu.AddCarrierAddServPostNordIDs(ids...)
}

// Mutation returns the CarrierServicePostNordMutation object of the builder.
func (cspnu *CarrierServicePostNordUpdate) Mutation() *CarrierServicePostNordMutation {
	return cspnu.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (cspnu *CarrierServicePostNordUpdate) ClearCarrierService() *CarrierServicePostNordUpdate {
	cspnu.mutation.ClearCarrierService()
	return cspnu
}

// ClearCarrierAddServPostNord clears all "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (cspnu *CarrierServicePostNordUpdate) ClearCarrierAddServPostNord() *CarrierServicePostNordUpdate {
	cspnu.mutation.ClearCarrierAddServPostNord()
	return cspnu
}

// RemoveCarrierAddServPostNordIDs removes the "carrier_add_serv_post_nord" edge to CarrierAdditionalServicePostNord entities by IDs.
func (cspnu *CarrierServicePostNordUpdate) RemoveCarrierAddServPostNordIDs(ids ...pulid.ID) *CarrierServicePostNordUpdate {
	cspnu.mutation.RemoveCarrierAddServPostNordIDs(ids...)
	return cspnu
}

// RemoveCarrierAddServPostNord removes "carrier_add_serv_post_nord" edges to CarrierAdditionalServicePostNord entities.
func (cspnu *CarrierServicePostNordUpdate) RemoveCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *CarrierServicePostNordUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cspnu.RemoveCarrierAddServPostNordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cspnu *CarrierServicePostNordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cspnu.sqlSave, cspnu.mutation, cspnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cspnu *CarrierServicePostNordUpdate) SaveX(ctx context.Context) int {
	affected, err := cspnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cspnu *CarrierServicePostNordUpdate) Exec(ctx context.Context) error {
	_, err := cspnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspnu *CarrierServicePostNordUpdate) ExecX(ctx context.Context) {
	if err := cspnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cspnu *CarrierServicePostNordUpdate) check() error {
	if cspnu.mutation.CarrierServiceCleared() && len(cspnu.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServicePostNord.carrier_service"`)
	}
	return nil
}

func (cspnu *CarrierServicePostNordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cspnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicepostnord.Table, carrierservicepostnord.Columns, sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString))
	if ps := cspnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cspnu.mutation.Label(); ok {
		_spec.SetField(carrierservicepostnord.FieldLabel, field.TypeString, value)
	}
	if value, ok := cspnu.mutation.InternalID(); ok {
		_spec.SetField(carrierservicepostnord.FieldInternalID, field.TypeString, value)
	}
	if value, ok := cspnu.mutation.APICode(); ok {
		_spec.SetField(carrierservicepostnord.FieldAPICode, field.TypeString, value)
	}
	if cspnu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicepostnord.CarrierServiceTable,
			Columns: []string{carrierservicepostnord.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cspnu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicepostnord.CarrierServiceTable,
			Columns: []string{carrierservicepostnord.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cspnu.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cspnu.mutation.RemovedCarrierAddServPostNordIDs(); len(nodes) > 0 && !cspnu.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cspnu.mutation.CarrierAddServPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cspnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicepostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cspnu.mutation.done = true
	return n, nil
}

// CarrierServicePostNordUpdateOne is the builder for updating a single CarrierServicePostNord entity.
type CarrierServicePostNordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServicePostNordMutation
}

// SetLabel sets the "label" field.
func (cspnuo *CarrierServicePostNordUpdateOne) SetLabel(s string) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.SetLabel(s)
	return cspnuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cspnuo *CarrierServicePostNordUpdateOne) SetNillableLabel(s *string) *CarrierServicePostNordUpdateOne {
	if s != nil {
		cspnuo.SetLabel(*s)
	}
	return cspnuo
}

// SetInternalID sets the "internal_id" field.
func (cspnuo *CarrierServicePostNordUpdateOne) SetInternalID(s string) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.SetInternalID(s)
	return cspnuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (cspnuo *CarrierServicePostNordUpdateOne) SetNillableInternalID(s *string) *CarrierServicePostNordUpdateOne {
	if s != nil {
		cspnuo.SetInternalID(*s)
	}
	return cspnuo
}

// SetAPICode sets the "api_code" field.
func (cspnuo *CarrierServicePostNordUpdateOne) SetAPICode(s string) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.SetAPICode(s)
	return cspnuo
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (cspnuo *CarrierServicePostNordUpdateOne) SetNillableAPICode(s *string) *CarrierServicePostNordUpdateOne {
	if s != nil {
		cspnuo.SetAPICode(*s)
	}
	return cspnuo
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (cspnuo *CarrierServicePostNordUpdateOne) SetCarrierServiceID(id pulid.ID) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.SetCarrierServiceID(id)
	return cspnuo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (cspnuo *CarrierServicePostNordUpdateOne) SetCarrierService(c *CarrierService) *CarrierServicePostNordUpdateOne {
	return cspnuo.SetCarrierServiceID(c.ID)
}

// AddCarrierAddServPostNordIDs adds the "carrier_add_serv_post_nord" edge to the CarrierAdditionalServicePostNord entity by IDs.
func (cspnuo *CarrierServicePostNordUpdateOne) AddCarrierAddServPostNordIDs(ids ...pulid.ID) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.AddCarrierAddServPostNordIDs(ids...)
	return cspnuo
}

// AddCarrierAddServPostNord adds the "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (cspnuo *CarrierServicePostNordUpdateOne) AddCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *CarrierServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cspnuo.AddCarrierAddServPostNordIDs(ids...)
}

// Mutation returns the CarrierServicePostNordMutation object of the builder.
func (cspnuo *CarrierServicePostNordUpdateOne) Mutation() *CarrierServicePostNordMutation {
	return cspnuo.mutation
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (cspnuo *CarrierServicePostNordUpdateOne) ClearCarrierService() *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.ClearCarrierService()
	return cspnuo
}

// ClearCarrierAddServPostNord clears all "carrier_add_serv_post_nord" edges to the CarrierAdditionalServicePostNord entity.
func (cspnuo *CarrierServicePostNordUpdateOne) ClearCarrierAddServPostNord() *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.ClearCarrierAddServPostNord()
	return cspnuo
}

// RemoveCarrierAddServPostNordIDs removes the "carrier_add_serv_post_nord" edge to CarrierAdditionalServicePostNord entities by IDs.
func (cspnuo *CarrierServicePostNordUpdateOne) RemoveCarrierAddServPostNordIDs(ids ...pulid.ID) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.RemoveCarrierAddServPostNordIDs(ids...)
	return cspnuo
}

// RemoveCarrierAddServPostNord removes "carrier_add_serv_post_nord" edges to CarrierAdditionalServicePostNord entities.
func (cspnuo *CarrierServicePostNordUpdateOne) RemoveCarrierAddServPostNord(c ...*CarrierAdditionalServicePostNord) *CarrierServicePostNordUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cspnuo.RemoveCarrierAddServPostNordIDs(ids...)
}

// Where appends a list predicates to the CarrierServicePostNordUpdate builder.
func (cspnuo *CarrierServicePostNordUpdateOne) Where(ps ...predicate.CarrierServicePostNord) *CarrierServicePostNordUpdateOne {
	cspnuo.mutation.Where(ps...)
	return cspnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cspnuo *CarrierServicePostNordUpdateOne) Select(field string, fields ...string) *CarrierServicePostNordUpdateOne {
	cspnuo.fields = append([]string{field}, fields...)
	return cspnuo
}

// Save executes the query and returns the updated CarrierServicePostNord entity.
func (cspnuo *CarrierServicePostNordUpdateOne) Save(ctx context.Context) (*CarrierServicePostNord, error) {
	return withHooks(ctx, cspnuo.sqlSave, cspnuo.mutation, cspnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cspnuo *CarrierServicePostNordUpdateOne) SaveX(ctx context.Context) *CarrierServicePostNord {
	node, err := cspnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cspnuo *CarrierServicePostNordUpdateOne) Exec(ctx context.Context) error {
	_, err := cspnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cspnuo *CarrierServicePostNordUpdateOne) ExecX(ctx context.Context) {
	if err := cspnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cspnuo *CarrierServicePostNordUpdateOne) check() error {
	if cspnuo.mutation.CarrierServiceCleared() && len(cspnuo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierServicePostNord.carrier_service"`)
	}
	return nil
}

func (cspnuo *CarrierServicePostNordUpdateOne) sqlSave(ctx context.Context) (_node *CarrierServicePostNord, err error) {
	if err := cspnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservicepostnord.Table, carrierservicepostnord.Columns, sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString))
	id, ok := cspnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierServicePostNord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cspnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservicepostnord.FieldID)
		for _, f := range fields {
			if !carrierservicepostnord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierservicepostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cspnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cspnuo.mutation.Label(); ok {
		_spec.SetField(carrierservicepostnord.FieldLabel, field.TypeString, value)
	}
	if value, ok := cspnuo.mutation.InternalID(); ok {
		_spec.SetField(carrierservicepostnord.FieldInternalID, field.TypeString, value)
	}
	if value, ok := cspnuo.mutation.APICode(); ok {
		_spec.SetField(carrierservicepostnord.FieldAPICode, field.TypeString, value)
	}
	if cspnuo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicepostnord.CarrierServiceTable,
			Columns: []string{carrierservicepostnord.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cspnuo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicepostnord.CarrierServiceTable,
			Columns: []string{carrierservicepostnord.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cspnuo.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cspnuo.mutation.RemovedCarrierAddServPostNordIDs(); len(nodes) > 0 && !cspnuo.mutation.CarrierAddServPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cspnuo.mutation.CarrierAddServPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierServicePostNord{config: cspnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cspnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservicepostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cspnuo.mutation.done = true
	return _node, nil
}
