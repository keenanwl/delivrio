// Code generated by ent, DO NOT EDIT.

package language

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the language type in the database.
	Label = "language"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// Table holds the table name of the language in the database.
	Table = "languages"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_language"
	// LanguageTable is the table that holds the language relation/edge.
	LanguageTable = "tenants"
	// LanguageInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	LanguageInverseTable = "tenants"
	// LanguageColumn is the table column denoting the language relation/edge.
	LanguageColumn = "tenant_default_language"
)

// Columns holds all SQL columns for language fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldInternalID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// LabelValidator is a validator for the "label" field. It is called by the builders before save.
	LabelValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// InternalID defines the type for the "internal_id" enum field.
type InternalID string

// InternalIDEN is the default value of the InternalID enum.
const DefaultInternalID = InternalIDEN

// InternalID values.
const (
	InternalIDEN InternalID = "EN"
	InternalIDDA InternalID = "DA"
)

func (ii InternalID) String() string {
	return string(ii)
}

// InternalIDValidator is a validator for the "internal_id" field enum values. It is called by the builders before save.
func InternalIDValidator(ii InternalID) error {
	switch ii {
	case InternalIDEN, InternalIDDA:
		return nil
	default:
		return fmt.Errorf("language: invalid enum value for internal_id field: %q", ii)
	}
}

// OrderOption defines the ordering options for the Language queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLanguageCount orders the results by language count.
func ByLanguageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLanguageStep(), opts...)
	}
}

// ByLanguage orders the results by language terms.
func ByLanguage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLanguageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UsersTable, UsersColumn),
	)
}
func newLanguageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LanguageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LanguageTable, LanguageColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e InternalID) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *InternalID) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = InternalID(str)
	if err := InternalIDValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid InternalID", str)
	}
	return nil
}
