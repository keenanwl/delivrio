// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BusinessHoursPeriod is the model entity for the BusinessHoursPeriod schema.
type BusinessHoursPeriod struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// DayOfWeek holds the value of the "day_of_week" field.
	DayOfWeek businesshoursperiod.DayOfWeek `json:"day_of_week,omitempty"`
	// Opening holds the value of the "opening" field.
	Opening time.Time `json:"opening,omitempty"`
	// Closing holds the value of the "closing" field.
	Closing time.Time `json:"closing,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessHoursPeriodQuery when eager-loading is set.
	Edges                             BusinessHoursPeriodEdges `json:"edges"`
	parcel_shop_business_hours_period *pulid.ID
	selectValues                      sql.SelectValues
}

// BusinessHoursPeriodEdges holds the relations/edges for other nodes in the graph.
type BusinessHoursPeriodEdges struct {
	// ParcelShop holds the value of the parcel_shop edge.
	ParcelShop *ParcelShop `json:"parcel_shop,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ParcelShopOrErr returns the ParcelShop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessHoursPeriodEdges) ParcelShopOrErr() (*ParcelShop, error) {
	if e.ParcelShop != nil {
		return e.ParcelShop, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: parcelshop.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessHoursPeriod) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businesshoursperiod.FieldID:
			values[i] = new(pulid.ID)
		case businesshoursperiod.FieldDayOfWeek:
			values[i] = new(sql.NullString)
		case businesshoursperiod.FieldOpening, businesshoursperiod.FieldClosing:
			values[i] = new(sql.NullTime)
		case businesshoursperiod.ForeignKeys[0]: // parcel_shop_business_hours_period
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessHoursPeriod fields.
func (bhp *BusinessHoursPeriod) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businesshoursperiod.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bhp.ID = *value
			}
		case businesshoursperiod.FieldDayOfWeek:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field day_of_week", values[i])
			} else if value.Valid {
				bhp.DayOfWeek = businesshoursperiod.DayOfWeek(value.String)
			}
		case businesshoursperiod.FieldOpening:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field opening", values[i])
			} else if value.Valid {
				bhp.Opening = value.Time
			}
		case businesshoursperiod.FieldClosing:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closing", values[i])
			} else if value.Valid {
				bhp.Closing = value.Time
			}
		case businesshoursperiod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field parcel_shop_business_hours_period", values[i])
			} else if value.Valid {
				bhp.parcel_shop_business_hours_period = new(pulid.ID)
				*bhp.parcel_shop_business_hours_period = *value.S.(*pulid.ID)
			}
		default:
			bhp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusinessHoursPeriod.
// This includes values selected through modifiers, order, etc.
func (bhp *BusinessHoursPeriod) Value(name string) (ent.Value, error) {
	return bhp.selectValues.Get(name)
}

// QueryParcelShop queries the "parcel_shop" edge of the BusinessHoursPeriod entity.
func (bhp *BusinessHoursPeriod) QueryParcelShop() *ParcelShopQuery {
	return NewBusinessHoursPeriodClient(bhp.config).QueryParcelShop(bhp)
}

// Update returns a builder for updating this BusinessHoursPeriod.
// Note that you need to call BusinessHoursPeriod.Unwrap() before calling this method if this BusinessHoursPeriod
// was returned from a transaction, and the transaction was committed or rolled back.
func (bhp *BusinessHoursPeriod) Update() *BusinessHoursPeriodUpdateOne {
	return NewBusinessHoursPeriodClient(bhp.config).UpdateOne(bhp)
}

// Unwrap unwraps the BusinessHoursPeriod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bhp *BusinessHoursPeriod) Unwrap() *BusinessHoursPeriod {
	_tx, ok := bhp.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessHoursPeriod is not a transactional entity")
	}
	bhp.config.driver = _tx.drv
	return bhp
}

// String implements the fmt.Stringer.
func (bhp *BusinessHoursPeriod) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessHoursPeriod(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bhp.ID))
	builder.WriteString("day_of_week=")
	builder.WriteString(fmt.Sprintf("%v", bhp.DayOfWeek))
	builder.WriteString(", ")
	builder.WriteString("opening=")
	builder.WriteString(bhp.Opening.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closing=")
	builder.WriteString(bhp.Closing.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessHoursPeriods is a parsable slice of BusinessHoursPeriod.
type BusinessHoursPeriods []*BusinessHoursPeriod
