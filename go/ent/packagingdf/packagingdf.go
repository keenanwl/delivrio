// Code generated by ent, DO NOT EDIT.

package packagingdf

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the packagingdf type in the database.
	Label = "packaging_df"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldAPIType holds the string denoting the api_type field in the database.
	FieldAPIType = "api_type"
	// FieldMaxWeight holds the string denoting the max_weight field in the database.
	FieldMaxWeight = "max_weight"
	// FieldMinWeight holds the string denoting the min_weight field in the database.
	FieldMinWeight = "min_weight"
	// FieldStackable holds the string denoting the stackable field in the database.
	FieldStackable = "stackable"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// Table holds the table name of the packagingdf in the database.
	Table = "packaging_dfs"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "packaging_dfs"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "packaging_dfs"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "packaging_packaging_df"
)

// Columns holds all SQL columns for packagingdf fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldAPIType,
	FieldMaxWeight,
	FieldMinWeight,
	FieldStackable,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "packaging_dfs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"packaging_packaging_df",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultStackable holds the default value on creation for the "stackable" field.
	DefaultStackable bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// APIType defines the type for the "api_type" enum field.
type APIType string

// APIType values.
const (
	APITypePKK APIType = "PKK"
	APITypePL1 APIType = "PL1"
	APITypePL2 APIType = "PL2"
	APITypePL4 APIType = "PL4"
	APITypeK10 APIType = "K10"
	APITypeK20 APIType = "K20"
	APITypeC10 APIType = "C10"
	APITypePL7 APIType = "PL7"
	APITypeCLL APIType = "CLL"
	APITypePLL APIType = "PLL"
)

func (at APIType) String() string {
	return string(at)
}

// APITypeValidator is a validator for the "api_type" field enum values. It is called by the builders before save.
func APITypeValidator(at APIType) error {
	switch at {
	case APITypePKK, APITypePL1, APITypePL2, APITypePL4, APITypeK10, APITypeK20, APITypeC10, APITypePL7, APITypeCLL, APITypePLL:
		return nil
	default:
		return fmt.Errorf("packagingdf: invalid enum value for api_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the PackagingDF queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByAPIType orders the results by the api_type field.
func ByAPIType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIType, opts...).ToFunc()
}

// ByMaxWeight orders the results by the max_weight field.
func ByMaxWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxWeight, opts...).ToFunc()
}

// ByMinWeight orders the results by the min_weight field.
func ByMinWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinWeight, opts...).ToFunc()
}

// ByStackable orders the results by the stackable field.
func ByStackable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStackable, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingField orders the results by packaging field.
func ByPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PackagingTable, PackagingColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e APIType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *APIType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = APIType(str)
	if err := APITypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid APIType", str)
	}
	return nil
}
