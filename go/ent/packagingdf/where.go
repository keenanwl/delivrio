// Code generated by ent, DO NOT EDIT.

package packagingdf

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldTenantID, v))
}

// MaxWeight applies equality check predicate on the "max_weight" field. It's identical to MaxWeightEQ.
func MaxWeight(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldMaxWeight, v))
}

// MinWeight applies equality check predicate on the "min_weight" field. It's identical to MinWeightEQ.
func MinWeight(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldMinWeight, v))
}

// Stackable applies equality check predicate on the "stackable" field. It's identical to StackableEQ.
func Stackable(v bool) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldStackable, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.PackagingDF {
	vc := string(v)
	return predicate.PackagingDF(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.PackagingDF {
	vc := string(v)
	return predicate.PackagingDF(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.PackagingDF {
	vc := string(v)
	return predicate.PackagingDF(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.PackagingDF {
	vc := string(v)
	return predicate.PackagingDF(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.PackagingDF {
	vc := string(v)
	return predicate.PackagingDF(sql.FieldContainsFold(FieldTenantID, vc))
}

// APITypeEQ applies the EQ predicate on the "api_type" field.
func APITypeEQ(v APIType) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldAPIType, v))
}

// APITypeNEQ applies the NEQ predicate on the "api_type" field.
func APITypeNEQ(v APIType) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNEQ(FieldAPIType, v))
}

// APITypeIn applies the In predicate on the "api_type" field.
func APITypeIn(vs ...APIType) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIn(FieldAPIType, vs...))
}

// APITypeNotIn applies the NotIn predicate on the "api_type" field.
func APITypeNotIn(vs ...APIType) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotIn(FieldAPIType, vs...))
}

// MaxWeightEQ applies the EQ predicate on the "max_weight" field.
func MaxWeightEQ(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldMaxWeight, v))
}

// MaxWeightNEQ applies the NEQ predicate on the "max_weight" field.
func MaxWeightNEQ(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNEQ(FieldMaxWeight, v))
}

// MaxWeightIn applies the In predicate on the "max_weight" field.
func MaxWeightIn(vs ...float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIn(FieldMaxWeight, vs...))
}

// MaxWeightNotIn applies the NotIn predicate on the "max_weight" field.
func MaxWeightNotIn(vs ...float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotIn(FieldMaxWeight, vs...))
}

// MaxWeightGT applies the GT predicate on the "max_weight" field.
func MaxWeightGT(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGT(FieldMaxWeight, v))
}

// MaxWeightGTE applies the GTE predicate on the "max_weight" field.
func MaxWeightGTE(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGTE(FieldMaxWeight, v))
}

// MaxWeightLT applies the LT predicate on the "max_weight" field.
func MaxWeightLT(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLT(FieldMaxWeight, v))
}

// MaxWeightLTE applies the LTE predicate on the "max_weight" field.
func MaxWeightLTE(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLTE(FieldMaxWeight, v))
}

// MaxWeightIsNil applies the IsNil predicate on the "max_weight" field.
func MaxWeightIsNil() predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIsNull(FieldMaxWeight))
}

// MaxWeightNotNil applies the NotNil predicate on the "max_weight" field.
func MaxWeightNotNil() predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotNull(FieldMaxWeight))
}

// MinWeightEQ applies the EQ predicate on the "min_weight" field.
func MinWeightEQ(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldMinWeight, v))
}

// MinWeightNEQ applies the NEQ predicate on the "min_weight" field.
func MinWeightNEQ(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNEQ(FieldMinWeight, v))
}

// MinWeightIn applies the In predicate on the "min_weight" field.
func MinWeightIn(vs ...float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIn(FieldMinWeight, vs...))
}

// MinWeightNotIn applies the NotIn predicate on the "min_weight" field.
func MinWeightNotIn(vs ...float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotIn(FieldMinWeight, vs...))
}

// MinWeightGT applies the GT predicate on the "min_weight" field.
func MinWeightGT(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGT(FieldMinWeight, v))
}

// MinWeightGTE applies the GTE predicate on the "min_weight" field.
func MinWeightGTE(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldGTE(FieldMinWeight, v))
}

// MinWeightLT applies the LT predicate on the "min_weight" field.
func MinWeightLT(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLT(FieldMinWeight, v))
}

// MinWeightLTE applies the LTE predicate on the "min_weight" field.
func MinWeightLTE(v float64) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldLTE(FieldMinWeight, v))
}

// MinWeightIsNil applies the IsNil predicate on the "min_weight" field.
func MinWeightIsNil() predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldIsNull(FieldMinWeight))
}

// MinWeightNotNil applies the NotNil predicate on the "min_weight" field.
func MinWeightNotNil() predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNotNull(FieldMinWeight))
}

// StackableEQ applies the EQ predicate on the "stackable" field.
func StackableEQ(v bool) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldEQ(FieldStackable, v))
}

// StackableNEQ applies the NEQ predicate on the "stackable" field.
func StackableNEQ(v bool) predicate.PackagingDF {
	return predicate.PackagingDF(sql.FieldNEQ(FieldStackable, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.PackagingDF {
	return predicate.PackagingDF(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.PackagingDF {
	return predicate.PackagingDF(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackaging applies the HasEdge predicate on the "packaging" edge.
func HasPackaging() predicate.PackagingDF {
	return predicate.PackagingDF(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, PackagingTable, PackagingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingWith applies the HasEdge predicate on the "packaging" edge with a given conditions (other predicates).
func HasPackagingWith(preds ...predicate.Packaging) predicate.PackagingDF {
	return predicate.PackagingDF(func(s *sql.Selector) {
		step := newPackagingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PackagingDF) predicate.PackagingDF {
	return predicate.PackagingDF(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PackagingDF) predicate.PackagingDF {
	return predicate.PackagingDF(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PackagingDF) predicate.PackagingDF {
	return predicate.PackagingDF(sql.NotPredicates(p))
}
