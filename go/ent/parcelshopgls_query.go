// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopGLSQuery is the builder for querying ParcelShopGLS entities.
type ParcelShopGLSQuery struct {
	config
	ctx            *QueryContext
	order          []parcelshopgls.OrderOption
	inters         []Interceptor
	predicates     []predicate.ParcelShopGLS
	withParcelShop *ParcelShopQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*ParcelShopGLS) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ParcelShopGLSQuery builder.
func (psgq *ParcelShopGLSQuery) Where(ps ...predicate.ParcelShopGLS) *ParcelShopGLSQuery {
	psgq.predicates = append(psgq.predicates, ps...)
	return psgq
}

// Limit the number of records to be returned by this query.
func (psgq *ParcelShopGLSQuery) Limit(limit int) *ParcelShopGLSQuery {
	psgq.ctx.Limit = &limit
	return psgq
}

// Offset to start from.
func (psgq *ParcelShopGLSQuery) Offset(offset int) *ParcelShopGLSQuery {
	psgq.ctx.Offset = &offset
	return psgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psgq *ParcelShopGLSQuery) Unique(unique bool) *ParcelShopGLSQuery {
	psgq.ctx.Unique = &unique
	return psgq
}

// Order specifies how the records should be ordered.
func (psgq *ParcelShopGLSQuery) Order(o ...parcelshopgls.OrderOption) *ParcelShopGLSQuery {
	psgq.order = append(psgq.order, o...)
	return psgq
}

// QueryParcelShop chains the current query on the "parcel_shop" edge.
func (psgq *ParcelShopGLSQuery) QueryParcelShop() *ParcelShopQuery {
	query := (&ParcelShopClient{config: psgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshopgls.Table, parcelshopgls.FieldID, selector),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, parcelshopgls.ParcelShopTable, parcelshopgls.ParcelShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(psgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ParcelShopGLS entity from the query.
// Returns a *NotFoundError when no ParcelShopGLS was found.
func (psgq *ParcelShopGLSQuery) First(ctx context.Context) (*ParcelShopGLS, error) {
	nodes, err := psgq.Limit(1).All(setContextOp(ctx, psgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{parcelshopgls.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) FirstX(ctx context.Context) *ParcelShopGLS {
	node, err := psgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ParcelShopGLS ID from the query.
// Returns a *NotFoundError when no ParcelShopGLS ID was found.
func (psgq *ParcelShopGLSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = psgq.Limit(1).IDs(setContextOp(ctx, psgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{parcelshopgls.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := psgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ParcelShopGLS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ParcelShopGLS entity is found.
// Returns a *NotFoundError when no ParcelShopGLS entities are found.
func (psgq *ParcelShopGLSQuery) Only(ctx context.Context) (*ParcelShopGLS, error) {
	nodes, err := psgq.Limit(2).All(setContextOp(ctx, psgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{parcelshopgls.Label}
	default:
		return nil, &NotSingularError{parcelshopgls.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) OnlyX(ctx context.Context) *ParcelShopGLS {
	node, err := psgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ParcelShopGLS ID in the query.
// Returns a *NotSingularError when more than one ParcelShopGLS ID is found.
// Returns a *NotFoundError when no entities are found.
func (psgq *ParcelShopGLSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = psgq.Limit(2).IDs(setContextOp(ctx, psgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{parcelshopgls.Label}
	default:
		err = &NotSingularError{parcelshopgls.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := psgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ParcelShopGLSs.
func (psgq *ParcelShopGLSQuery) All(ctx context.Context) ([]*ParcelShopGLS, error) {
	ctx = setContextOp(ctx, psgq.ctx, ent.OpQueryAll)
	if err := psgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ParcelShopGLS, *ParcelShopGLSQuery]()
	return withInterceptors[[]*ParcelShopGLS](ctx, psgq, qr, psgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) AllX(ctx context.Context) []*ParcelShopGLS {
	nodes, err := psgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ParcelShopGLS IDs.
func (psgq *ParcelShopGLSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if psgq.ctx.Unique == nil && psgq.path != nil {
		psgq.Unique(true)
	}
	ctx = setContextOp(ctx, psgq.ctx, ent.OpQueryIDs)
	if err = psgq.Select(parcelshopgls.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := psgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psgq *ParcelShopGLSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, psgq.ctx, ent.OpQueryCount)
	if err := psgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, psgq, querierCount[*ParcelShopGLSQuery](), psgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) CountX(ctx context.Context) int {
	count, err := psgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psgq *ParcelShopGLSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, psgq.ctx, ent.OpQueryExist)
	switch _, err := psgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (psgq *ParcelShopGLSQuery) ExistX(ctx context.Context) bool {
	exist, err := psgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ParcelShopGLSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psgq *ParcelShopGLSQuery) Clone() *ParcelShopGLSQuery {
	if psgq == nil {
		return nil
	}
	return &ParcelShopGLSQuery{
		config:         psgq.config,
		ctx:            psgq.ctx.Clone(),
		order:          append([]parcelshopgls.OrderOption{}, psgq.order...),
		inters:         append([]Interceptor{}, psgq.inters...),
		predicates:     append([]predicate.ParcelShopGLS{}, psgq.predicates...),
		withParcelShop: psgq.withParcelShop.Clone(),
		// clone intermediate query.
		sql:  psgq.sql.Clone(),
		path: psgq.path,
	}
}

// WithParcelShop tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop" edge. The optional arguments are used to configure the query builder of the edge.
func (psgq *ParcelShopGLSQuery) WithParcelShop(opts ...func(*ParcelShopQuery)) *ParcelShopGLSQuery {
	query := (&ParcelShopClient{config: psgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psgq.withParcelShop = query
	return psgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		GLSParcelShopID string `json:"gls_parcel_shop_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ParcelShopGLS.Query().
//		GroupBy(parcelshopgls.FieldGLSParcelShopID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psgq *ParcelShopGLSQuery) GroupBy(field string, fields ...string) *ParcelShopGLSGroupBy {
	psgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ParcelShopGLSGroupBy{build: psgq}
	grbuild.flds = &psgq.ctx.Fields
	grbuild.label = parcelshopgls.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		GLSParcelShopID string `json:"gls_parcel_shop_id,omitempty"`
//	}
//
//	client.ParcelShopGLS.Query().
//		Select(parcelshopgls.FieldGLSParcelShopID).
//		Scan(ctx, &v)
func (psgq *ParcelShopGLSQuery) Select(fields ...string) *ParcelShopGLSSelect {
	psgq.ctx.Fields = append(psgq.ctx.Fields, fields...)
	sbuild := &ParcelShopGLSSelect{ParcelShopGLSQuery: psgq}
	sbuild.label = parcelshopgls.Label
	sbuild.flds, sbuild.scan = &psgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ParcelShopGLSSelect configured with the given aggregations.
func (psgq *ParcelShopGLSQuery) Aggregate(fns ...AggregateFunc) *ParcelShopGLSSelect {
	return psgq.Select().Aggregate(fns...)
}

func (psgq *ParcelShopGLSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range psgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, psgq); err != nil {
				return err
			}
		}
	}
	for _, f := range psgq.ctx.Fields {
		if !parcelshopgls.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psgq.path != nil {
		prev, err := psgq.path(ctx)
		if err != nil {
			return err
		}
		psgq.sql = prev
	}
	if parcelshopgls.Policy == nil {
		return errors.New("ent: uninitialized parcelshopgls.Policy (forgotten import ent/runtime?)")
	}
	if err := parcelshopgls.Policy.EvalQuery(ctx, psgq); err != nil {
		return err
	}
	return nil
}

func (psgq *ParcelShopGLSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ParcelShopGLS, error) {
	var (
		nodes       = []*ParcelShopGLS{}
		withFKs     = psgq.withFKs
		_spec       = psgq.querySpec()
		loadedTypes = [1]bool{
			psgq.withParcelShop != nil,
		}
	)
	if psgq.withParcelShop != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshopgls.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ParcelShopGLS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ParcelShopGLS{config: psgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(psgq.modifiers) > 0 {
		_spec.Modifiers = psgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psgq.withParcelShop; query != nil {
		if err := psgq.loadParcelShop(ctx, query, nodes, nil,
			func(n *ParcelShopGLS, e *ParcelShop) { n.Edges.ParcelShop = e }); err != nil {
			return nil, err
		}
	}
	for i := range psgq.loadTotal {
		if err := psgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psgq *ParcelShopGLSQuery) loadParcelShop(ctx context.Context, query *ParcelShopQuery, nodes []*ParcelShopGLS, init func(*ParcelShopGLS), assign func(*ParcelShopGLS, *ParcelShop)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ParcelShopGLS)
	for i := range nodes {
		if nodes[i].parcel_shop_parcel_shop_gls == nil {
			continue
		}
		fk := *nodes[i].parcel_shop_parcel_shop_gls
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(parcelshop.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parcel_shop_parcel_shop_gls" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (psgq *ParcelShopGLSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psgq.querySpec()
	if len(psgq.modifiers) > 0 {
		_spec.Modifiers = psgq.modifiers
	}
	_spec.Node.Columns = psgq.ctx.Fields
	if len(psgq.ctx.Fields) > 0 {
		_spec.Unique = psgq.ctx.Unique != nil && *psgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, psgq.driver, _spec)
}

func (psgq *ParcelShopGLSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(parcelshopgls.Table, parcelshopgls.Columns, sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString))
	_spec.From = psgq.sql
	if unique := psgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if psgq.path != nil {
		_spec.Unique = true
	}
	if fields := psgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshopgls.FieldID)
		for i := range fields {
			if fields[i] != parcelshopgls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psgq *ParcelShopGLSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psgq.driver.Dialect())
	t1 := builder.Table(parcelshopgls.Table)
	columns := psgq.ctx.Fields
	if len(columns) == 0 {
		columns = parcelshopgls.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psgq.sql != nil {
		selector = psgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psgq.ctx.Unique != nil && *psgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range psgq.predicates {
		p(selector)
	}
	for _, p := range psgq.order {
		p(selector)
	}
	if offset := psgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ParcelShopGLSGroupBy is the group-by builder for ParcelShopGLS entities.
type ParcelShopGLSGroupBy struct {
	selector
	build *ParcelShopGLSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psggb *ParcelShopGLSGroupBy) Aggregate(fns ...AggregateFunc) *ParcelShopGLSGroupBy {
	psggb.fns = append(psggb.fns, fns...)
	return psggb
}

// Scan applies the selector query and scans the result into the given value.
func (psggb *ParcelShopGLSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psggb.build.ctx, ent.OpQueryGroupBy)
	if err := psggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParcelShopGLSQuery, *ParcelShopGLSGroupBy](ctx, psggb.build, psggb, psggb.build.inters, v)
}

func (psggb *ParcelShopGLSGroupBy) sqlScan(ctx context.Context, root *ParcelShopGLSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(psggb.fns))
	for _, fn := range psggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*psggb.flds)+len(psggb.fns))
		for _, f := range *psggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*psggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ParcelShopGLSSelect is the builder for selecting fields of ParcelShopGLS entities.
type ParcelShopGLSSelect struct {
	*ParcelShopGLSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (psgs *ParcelShopGLSSelect) Aggregate(fns ...AggregateFunc) *ParcelShopGLSSelect {
	psgs.fns = append(psgs.fns, fns...)
	return psgs
}

// Scan applies the selector query and scans the result into the given value.
func (psgs *ParcelShopGLSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psgs.ctx, ent.OpQuerySelect)
	if err := psgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParcelShopGLSQuery, *ParcelShopGLSSelect](ctx, psgs.ParcelShopGLSQuery, psgs, psgs.inters, v)
}

func (psgs *ParcelShopGLSSelect) sqlScan(ctx context.Context, root *ParcelShopGLSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(psgs.fns))
	for _, fn := range psgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*psgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
