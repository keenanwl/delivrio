// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupAccessRightQuery is the builder for querying SeatGroupAccessRight entities.
type SeatGroupAccessRightQuery struct {
	config
	ctx             *QueryContext
	order           []seatgroupaccessright.OrderOption
	inters          []Interceptor
	predicates      []predicate.SeatGroupAccessRight
	withTenant      *TenantQuery
	withAccessRight *AccessRightQuery
	withSeatGroup   *SeatGroupQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*SeatGroupAccessRight) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SeatGroupAccessRightQuery builder.
func (sgarq *SeatGroupAccessRightQuery) Where(ps ...predicate.SeatGroupAccessRight) *SeatGroupAccessRightQuery {
	sgarq.predicates = append(sgarq.predicates, ps...)
	return sgarq
}

// Limit the number of records to be returned by this query.
func (sgarq *SeatGroupAccessRightQuery) Limit(limit int) *SeatGroupAccessRightQuery {
	sgarq.ctx.Limit = &limit
	return sgarq
}

// Offset to start from.
func (sgarq *SeatGroupAccessRightQuery) Offset(offset int) *SeatGroupAccessRightQuery {
	sgarq.ctx.Offset = &offset
	return sgarq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sgarq *SeatGroupAccessRightQuery) Unique(unique bool) *SeatGroupAccessRightQuery {
	sgarq.ctx.Unique = &unique
	return sgarq
}

// Order specifies how the records should be ordered.
func (sgarq *SeatGroupAccessRightQuery) Order(o ...seatgroupaccessright.OrderOption) *SeatGroupAccessRightQuery {
	sgarq.order = append(sgarq.order, o...)
	return sgarq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sgarq *SeatGroupAccessRightQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: sgarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroupaccessright.Table, seatgroupaccessright.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroupaccessright.TenantTable, seatgroupaccessright.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccessRight chains the current query on the "access_right" edge.
func (sgarq *SeatGroupAccessRightQuery) QueryAccessRight() *AccessRightQuery {
	query := (&AccessRightClient{config: sgarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroupaccessright.Table, seatgroupaccessright.FieldID, selector),
			sqlgraph.To(accessright.Table, accessright.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroupaccessright.AccessRightTable, seatgroupaccessright.AccessRightColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySeatGroup chains the current query on the "seat_group" edge.
func (sgarq *SeatGroupAccessRightQuery) QuerySeatGroup() *SeatGroupQuery {
	query := (&SeatGroupClient{config: sgarq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgarq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgarq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroupaccessright.Table, seatgroupaccessright.FieldID, selector),
			sqlgraph.To(seatgroup.Table, seatgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroupaccessright.SeatGroupTable, seatgroupaccessright.SeatGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgarq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SeatGroupAccessRight entity from the query.
// Returns a *NotFoundError when no SeatGroupAccessRight was found.
func (sgarq *SeatGroupAccessRightQuery) First(ctx context.Context) (*SeatGroupAccessRight, error) {
	nodes, err := sgarq.Limit(1).All(setContextOp(ctx, sgarq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{seatgroupaccessright.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) FirstX(ctx context.Context) *SeatGroupAccessRight {
	node, err := sgarq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SeatGroupAccessRight ID from the query.
// Returns a *NotFoundError when no SeatGroupAccessRight ID was found.
func (sgarq *SeatGroupAccessRightQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sgarq.Limit(1).IDs(setContextOp(ctx, sgarq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{seatgroupaccessright.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := sgarq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SeatGroupAccessRight entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SeatGroupAccessRight entity is found.
// Returns a *NotFoundError when no SeatGroupAccessRight entities are found.
func (sgarq *SeatGroupAccessRightQuery) Only(ctx context.Context) (*SeatGroupAccessRight, error) {
	nodes, err := sgarq.Limit(2).All(setContextOp(ctx, sgarq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{seatgroupaccessright.Label}
	default:
		return nil, &NotSingularError{seatgroupaccessright.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) OnlyX(ctx context.Context) *SeatGroupAccessRight {
	node, err := sgarq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SeatGroupAccessRight ID in the query.
// Returns a *NotSingularError when more than one SeatGroupAccessRight ID is found.
// Returns a *NotFoundError when no entities are found.
func (sgarq *SeatGroupAccessRightQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sgarq.Limit(2).IDs(setContextOp(ctx, sgarq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{seatgroupaccessright.Label}
	default:
		err = &NotSingularError{seatgroupaccessright.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := sgarq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SeatGroupAccessRights.
func (sgarq *SeatGroupAccessRightQuery) All(ctx context.Context) ([]*SeatGroupAccessRight, error) {
	ctx = setContextOp(ctx, sgarq.ctx, ent.OpQueryAll)
	if err := sgarq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SeatGroupAccessRight, *SeatGroupAccessRightQuery]()
	return withInterceptors[[]*SeatGroupAccessRight](ctx, sgarq, qr, sgarq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) AllX(ctx context.Context) []*SeatGroupAccessRight {
	nodes, err := sgarq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SeatGroupAccessRight IDs.
func (sgarq *SeatGroupAccessRightQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if sgarq.ctx.Unique == nil && sgarq.path != nil {
		sgarq.Unique(true)
	}
	ctx = setContextOp(ctx, sgarq.ctx, ent.OpQueryIDs)
	if err = sgarq.Select(seatgroupaccessright.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := sgarq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sgarq *SeatGroupAccessRightQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sgarq.ctx, ent.OpQueryCount)
	if err := sgarq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sgarq, querierCount[*SeatGroupAccessRightQuery](), sgarq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) CountX(ctx context.Context) int {
	count, err := sgarq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sgarq *SeatGroupAccessRightQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sgarq.ctx, ent.OpQueryExist)
	switch _, err := sgarq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sgarq *SeatGroupAccessRightQuery) ExistX(ctx context.Context) bool {
	exist, err := sgarq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SeatGroupAccessRightQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sgarq *SeatGroupAccessRightQuery) Clone() *SeatGroupAccessRightQuery {
	if sgarq == nil {
		return nil
	}
	return &SeatGroupAccessRightQuery{
		config:          sgarq.config,
		ctx:             sgarq.ctx.Clone(),
		order:           append([]seatgroupaccessright.OrderOption{}, sgarq.order...),
		inters:          append([]Interceptor{}, sgarq.inters...),
		predicates:      append([]predicate.SeatGroupAccessRight{}, sgarq.predicates...),
		withTenant:      sgarq.withTenant.Clone(),
		withAccessRight: sgarq.withAccessRight.Clone(),
		withSeatGroup:   sgarq.withSeatGroup.Clone(),
		// clone intermediate query.
		sql:  sgarq.sql.Clone(),
		path: sgarq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sgarq *SeatGroupAccessRightQuery) WithTenant(opts ...func(*TenantQuery)) *SeatGroupAccessRightQuery {
	query := (&TenantClient{config: sgarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgarq.withTenant = query
	return sgarq
}

// WithAccessRight tells the query-builder to eager-load the nodes that are connected to
// the "access_right" edge. The optional arguments are used to configure the query builder of the edge.
func (sgarq *SeatGroupAccessRightQuery) WithAccessRight(opts ...func(*AccessRightQuery)) *SeatGroupAccessRightQuery {
	query := (&AccessRightClient{config: sgarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgarq.withAccessRight = query
	return sgarq
}

// WithSeatGroup tells the query-builder to eager-load the nodes that are connected to
// the "seat_group" edge. The optional arguments are used to configure the query builder of the edge.
func (sgarq *SeatGroupAccessRightQuery) WithSeatGroup(opts ...func(*SeatGroupQuery)) *SeatGroupAccessRightQuery {
	query := (&SeatGroupClient{config: sgarq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgarq.withSeatGroup = query
	return sgarq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SeatGroupAccessRight.Query().
//		GroupBy(seatgroupaccessright.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sgarq *SeatGroupAccessRightQuery) GroupBy(field string, fields ...string) *SeatGroupAccessRightGroupBy {
	sgarq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SeatGroupAccessRightGroupBy{build: sgarq}
	grbuild.flds = &sgarq.ctx.Fields
	grbuild.label = seatgroupaccessright.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.SeatGroupAccessRight.Query().
//		Select(seatgroupaccessright.FieldTenantID).
//		Scan(ctx, &v)
func (sgarq *SeatGroupAccessRightQuery) Select(fields ...string) *SeatGroupAccessRightSelect {
	sgarq.ctx.Fields = append(sgarq.ctx.Fields, fields...)
	sbuild := &SeatGroupAccessRightSelect{SeatGroupAccessRightQuery: sgarq}
	sbuild.label = seatgroupaccessright.Label
	sbuild.flds, sbuild.scan = &sgarq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SeatGroupAccessRightSelect configured with the given aggregations.
func (sgarq *SeatGroupAccessRightQuery) Aggregate(fns ...AggregateFunc) *SeatGroupAccessRightSelect {
	return sgarq.Select().Aggregate(fns...)
}

func (sgarq *SeatGroupAccessRightQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sgarq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sgarq); err != nil {
				return err
			}
		}
	}
	for _, f := range sgarq.ctx.Fields {
		if !seatgroupaccessright.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sgarq.path != nil {
		prev, err := sgarq.path(ctx)
		if err != nil {
			return err
		}
		sgarq.sql = prev
	}
	if seatgroupaccessright.Policy == nil {
		return errors.New("ent: uninitialized seatgroupaccessright.Policy (forgotten import ent/runtime?)")
	}
	if err := seatgroupaccessright.Policy.EvalQuery(ctx, sgarq); err != nil {
		return err
	}
	return nil
}

func (sgarq *SeatGroupAccessRightQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SeatGroupAccessRight, error) {
	var (
		nodes       = []*SeatGroupAccessRight{}
		_spec       = sgarq.querySpec()
		loadedTypes = [3]bool{
			sgarq.withTenant != nil,
			sgarq.withAccessRight != nil,
			sgarq.withSeatGroup != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SeatGroupAccessRight).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SeatGroupAccessRight{config: sgarq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sgarq.modifiers) > 0 {
		_spec.Modifiers = sgarq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sgarq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sgarq.withTenant; query != nil {
		if err := sgarq.loadTenant(ctx, query, nodes, nil,
			func(n *SeatGroupAccessRight, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sgarq.withAccessRight; query != nil {
		if err := sgarq.loadAccessRight(ctx, query, nodes, nil,
			func(n *SeatGroupAccessRight, e *AccessRight) { n.Edges.AccessRight = e }); err != nil {
			return nil, err
		}
	}
	if query := sgarq.withSeatGroup; query != nil {
		if err := sgarq.loadSeatGroup(ctx, query, nodes, nil,
			func(n *SeatGroupAccessRight, e *SeatGroup) { n.Edges.SeatGroup = e }); err != nil {
			return nil, err
		}
	}
	for i := range sgarq.loadTotal {
		if err := sgarq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sgarq *SeatGroupAccessRightQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*SeatGroupAccessRight, init func(*SeatGroupAccessRight), assign func(*SeatGroupAccessRight, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*SeatGroupAccessRight)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sgarq *SeatGroupAccessRightQuery) loadAccessRight(ctx context.Context, query *AccessRightQuery, nodes []*SeatGroupAccessRight, init func(*SeatGroupAccessRight), assign func(*SeatGroupAccessRight, *AccessRight)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*SeatGroupAccessRight)
	for i := range nodes {
		fk := nodes[i].AccessRightID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(accessright.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "access_right_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sgarq *SeatGroupAccessRightQuery) loadSeatGroup(ctx context.Context, query *SeatGroupQuery, nodes []*SeatGroupAccessRight, init func(*SeatGroupAccessRight), assign func(*SeatGroupAccessRight, *SeatGroup)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*SeatGroupAccessRight)
	for i := range nodes {
		fk := nodes[i].SeatGroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(seatgroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "seat_group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sgarq *SeatGroupAccessRightQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sgarq.querySpec()
	if len(sgarq.modifiers) > 0 {
		_spec.Modifiers = sgarq.modifiers
	}
	_spec.Node.Columns = sgarq.ctx.Fields
	if len(sgarq.ctx.Fields) > 0 {
		_spec.Unique = sgarq.ctx.Unique != nil && *sgarq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sgarq.driver, _spec)
}

func (sgarq *SeatGroupAccessRightQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(seatgroupaccessright.Table, seatgroupaccessright.Columns, sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString))
	_spec.From = sgarq.sql
	if unique := sgarq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sgarq.path != nil {
		_spec.Unique = true
	}
	if fields := sgarq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seatgroupaccessright.FieldID)
		for i := range fields {
			if fields[i] != seatgroupaccessright.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sgarq.withTenant != nil {
			_spec.Node.AddColumnOnce(seatgroupaccessright.FieldTenantID)
		}
		if sgarq.withAccessRight != nil {
			_spec.Node.AddColumnOnce(seatgroupaccessright.FieldAccessRightID)
		}
		if sgarq.withSeatGroup != nil {
			_spec.Node.AddColumnOnce(seatgroupaccessright.FieldSeatGroupID)
		}
	}
	if ps := sgarq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sgarq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sgarq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sgarq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sgarq *SeatGroupAccessRightQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sgarq.driver.Dialect())
	t1 := builder.Table(seatgroupaccessright.Table)
	columns := sgarq.ctx.Fields
	if len(columns) == 0 {
		columns = seatgroupaccessright.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sgarq.sql != nil {
		selector = sgarq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sgarq.ctx.Unique != nil && *sgarq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sgarq.predicates {
		p(selector)
	}
	for _, p := range sgarq.order {
		p(selector)
	}
	if offset := sgarq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sgarq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SeatGroupAccessRightGroupBy is the group-by builder for SeatGroupAccessRight entities.
type SeatGroupAccessRightGroupBy struct {
	selector
	build *SeatGroupAccessRightQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgargb *SeatGroupAccessRightGroupBy) Aggregate(fns ...AggregateFunc) *SeatGroupAccessRightGroupBy {
	sgargb.fns = append(sgargb.fns, fns...)
	return sgargb
}

// Scan applies the selector query and scans the result into the given value.
func (sgargb *SeatGroupAccessRightGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgargb.build.ctx, ent.OpQueryGroupBy)
	if err := sgargb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SeatGroupAccessRightQuery, *SeatGroupAccessRightGroupBy](ctx, sgargb.build, sgargb, sgargb.build.inters, v)
}

func (sgargb *SeatGroupAccessRightGroupBy) sqlScan(ctx context.Context, root *SeatGroupAccessRightQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgargb.fns))
	for _, fn := range sgargb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgargb.flds)+len(sgargb.fns))
		for _, f := range *sgargb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgargb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgargb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SeatGroupAccessRightSelect is the builder for selecting fields of SeatGroupAccessRight entities.
type SeatGroupAccessRightSelect struct {
	*SeatGroupAccessRightQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sgars *SeatGroupAccessRightSelect) Aggregate(fns ...AggregateFunc) *SeatGroupAccessRightSelect {
	sgars.fns = append(sgars.fns, fns...)
	return sgars
}

// Scan applies the selector query and scans the result into the given value.
func (sgars *SeatGroupAccessRightSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgars.ctx, ent.OpQuerySelect)
	if err := sgars.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SeatGroupAccessRightQuery, *SeatGroupAccessRightSelect](ctx, sgars.SeatGroupAccessRightQuery, sgars, sgars.inters, v)
}

func (sgars *SeatGroupAccessRightSelect) sqlScan(ctx context.Context, root *SeatGroupAccessRightQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sgars.fns))
	for _, fn := range sgars.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sgars.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
