// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentParcelQuery is the builder for querying ShipmentParcel entities.
type ShipmentParcelQuery struct {
	config
	ctx                          *QueryContext
	order                        []shipmentparcel.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.ShipmentParcel
	withTenant                   *TenantQuery
	withShipment                 *ShipmentQuery
	withColli                    *ColliQuery
	withOldColli                 *ColliQuery
	withWorkspaceRecentScan      *WorkspaceRecentScanQuery
	withPackaging                *PackagingQuery
	withPrintJob                 *PrintJobQuery
	withDocumentFile             *DocumentFileQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*ShipmentParcel) error
	withNamedOldColli            map[string]*ColliQuery
	withNamedWorkspaceRecentScan map[string]*WorkspaceRecentScanQuery
	withNamedPrintJob            map[string]*PrintJobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShipmentParcelQuery builder.
func (spq *ShipmentParcelQuery) Where(ps ...predicate.ShipmentParcel) *ShipmentParcelQuery {
	spq.predicates = append(spq.predicates, ps...)
	return spq
}

// Limit the number of records to be returned by this query.
func (spq *ShipmentParcelQuery) Limit(limit int) *ShipmentParcelQuery {
	spq.ctx.Limit = &limit
	return spq
}

// Offset to start from.
func (spq *ShipmentParcelQuery) Offset(offset int) *ShipmentParcelQuery {
	spq.ctx.Offset = &offset
	return spq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spq *ShipmentParcelQuery) Unique(unique bool) *ShipmentParcelQuery {
	spq.ctx.Unique = &unique
	return spq
}

// Order specifies how the records should be ordered.
func (spq *ShipmentParcelQuery) Order(o ...shipmentparcel.OrderOption) *ShipmentParcelQuery {
	spq.order = append(spq.order, o...)
	return spq
}

// QueryTenant chains the current query on the "tenant" edge.
func (spq *ShipmentParcelQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentparcel.TenantTable, shipmentparcel.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipment chains the current query on the "shipment" edge.
func (spq *ShipmentParcelQuery) QueryShipment() *ShipmentQuery {
	query := (&ShipmentClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentparcel.ShipmentTable, shipmentparcel.ShipmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (spq *ShipmentParcelQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentparcel.ColliTable, shipmentparcel.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOldColli chains the current query on the "old_colli" edge.
func (spq *ShipmentParcelQuery) QueryOldColli() *ColliQuery {
	query := (&ColliClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, shipmentparcel.OldColliTable, shipmentparcel.OldColliPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkspaceRecentScan chains the current query on the "workspace_recent_scan" edge.
func (spq *ShipmentParcelQuery) QueryWorkspaceRecentScan() *WorkspaceRecentScanQuery {
	query := (&WorkspaceRecentScanClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(workspacerecentscan.Table, workspacerecentscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, shipmentparcel.WorkspaceRecentScanTable, shipmentparcel.WorkspaceRecentScanColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackaging chains the current query on the "packaging" edge.
func (spq *ShipmentParcelQuery) QueryPackaging() *PackagingQuery {
	query := (&PackagingClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentparcel.PackagingTable, shipmentparcel.PackagingColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrintJob chains the current query on the "print_job" edge.
func (spq *ShipmentParcelQuery) QueryPrintJob() *PrintJobQuery {
	query := (&PrintJobClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(printjob.Table, printjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, shipmentparcel.PrintJobTable, shipmentparcel.PrintJobColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocumentFile chains the current query on the "document_file" edge.
func (spq *ShipmentParcelQuery) QueryDocumentFile() *DocumentFileQuery {
	query := (&DocumentFileClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, selector),
			sqlgraph.To(documentfile.Table, documentfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentparcel.DocumentFileTable, shipmentparcel.DocumentFileColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShipmentParcel entity from the query.
// Returns a *NotFoundError when no ShipmentParcel was found.
func (spq *ShipmentParcelQuery) First(ctx context.Context) (*ShipmentParcel, error) {
	nodes, err := spq.Limit(1).All(setContextOp(ctx, spq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shipmentparcel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spq *ShipmentParcelQuery) FirstX(ctx context.Context) *ShipmentParcel {
	node, err := spq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShipmentParcel ID from the query.
// Returns a *NotFoundError when no ShipmentParcel ID was found.
func (spq *ShipmentParcelQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = spq.Limit(1).IDs(setContextOp(ctx, spq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shipmentparcel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spq *ShipmentParcelQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := spq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShipmentParcel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShipmentParcel entity is found.
// Returns a *NotFoundError when no ShipmentParcel entities are found.
func (spq *ShipmentParcelQuery) Only(ctx context.Context) (*ShipmentParcel, error) {
	nodes, err := spq.Limit(2).All(setContextOp(ctx, spq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shipmentparcel.Label}
	default:
		return nil, &NotSingularError{shipmentparcel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spq *ShipmentParcelQuery) OnlyX(ctx context.Context) *ShipmentParcel {
	node, err := spq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShipmentParcel ID in the query.
// Returns a *NotSingularError when more than one ShipmentParcel ID is found.
// Returns a *NotFoundError when no entities are found.
func (spq *ShipmentParcelQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = spq.Limit(2).IDs(setContextOp(ctx, spq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shipmentparcel.Label}
	default:
		err = &NotSingularError{shipmentparcel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spq *ShipmentParcelQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := spq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShipmentParcels.
func (spq *ShipmentParcelQuery) All(ctx context.Context) ([]*ShipmentParcel, error) {
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryAll)
	if err := spq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ShipmentParcel, *ShipmentParcelQuery]()
	return withInterceptors[[]*ShipmentParcel](ctx, spq, qr, spq.inters)
}

// AllX is like All, but panics if an error occurs.
func (spq *ShipmentParcelQuery) AllX(ctx context.Context) []*ShipmentParcel {
	nodes, err := spq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShipmentParcel IDs.
func (spq *ShipmentParcelQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if spq.ctx.Unique == nil && spq.path != nil {
		spq.Unique(true)
	}
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryIDs)
	if err = spq.Select(shipmentparcel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spq *ShipmentParcelQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := spq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spq *ShipmentParcelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryCount)
	if err := spq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, spq, querierCount[*ShipmentParcelQuery](), spq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (spq *ShipmentParcelQuery) CountX(ctx context.Context) int {
	count, err := spq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spq *ShipmentParcelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, spq.ctx, ent.OpQueryExist)
	switch _, err := spq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (spq *ShipmentParcelQuery) ExistX(ctx context.Context) bool {
	exist, err := spq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShipmentParcelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spq *ShipmentParcelQuery) Clone() *ShipmentParcelQuery {
	if spq == nil {
		return nil
	}
	return &ShipmentParcelQuery{
		config:                  spq.config,
		ctx:                     spq.ctx.Clone(),
		order:                   append([]shipmentparcel.OrderOption{}, spq.order...),
		inters:                  append([]Interceptor{}, spq.inters...),
		predicates:              append([]predicate.ShipmentParcel{}, spq.predicates...),
		withTenant:              spq.withTenant.Clone(),
		withShipment:            spq.withShipment.Clone(),
		withColli:               spq.withColli.Clone(),
		withOldColli:            spq.withOldColli.Clone(),
		withWorkspaceRecentScan: spq.withWorkspaceRecentScan.Clone(),
		withPackaging:           spq.withPackaging.Clone(),
		withPrintJob:            spq.withPrintJob.Clone(),
		withDocumentFile:        spq.withDocumentFile.Clone(),
		// clone intermediate query.
		sql:  spq.sql.Clone(),
		path: spq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithTenant(opts ...func(*TenantQuery)) *ShipmentParcelQuery {
	query := (&TenantClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withTenant = query
	return spq
}

// WithShipment tells the query-builder to eager-load the nodes that are connected to
// the "shipment" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithShipment(opts ...func(*ShipmentQuery)) *ShipmentParcelQuery {
	query := (&ShipmentClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withShipment = query
	return spq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithColli(opts ...func(*ColliQuery)) *ShipmentParcelQuery {
	query := (&ColliClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withColli = query
	return spq
}

// WithOldColli tells the query-builder to eager-load the nodes that are connected to
// the "old_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithOldColli(opts ...func(*ColliQuery)) *ShipmentParcelQuery {
	query := (&ColliClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withOldColli = query
	return spq
}

// WithWorkspaceRecentScan tells the query-builder to eager-load the nodes that are connected to
// the "workspace_recent_scan" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithWorkspaceRecentScan(opts ...func(*WorkspaceRecentScanQuery)) *ShipmentParcelQuery {
	query := (&WorkspaceRecentScanClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withWorkspaceRecentScan = query
	return spq
}

// WithPackaging tells the query-builder to eager-load the nodes that are connected to
// the "packaging" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithPackaging(opts ...func(*PackagingQuery)) *ShipmentParcelQuery {
	query := (&PackagingClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withPackaging = query
	return spq
}

// WithPrintJob tells the query-builder to eager-load the nodes that are connected to
// the "print_job" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithPrintJob(opts ...func(*PrintJobQuery)) *ShipmentParcelQuery {
	query := (&PrintJobClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withPrintJob = query
	return spq
}

// WithDocumentFile tells the query-builder to eager-load the nodes that are connected to
// the "document_file" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithDocumentFile(opts ...func(*DocumentFileQuery)) *ShipmentParcelQuery {
	query := (&DocumentFileClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withDocumentFile = query
	return spq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShipmentParcel.Query().
//		GroupBy(shipmentparcel.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (spq *ShipmentParcelQuery) GroupBy(field string, fields ...string) *ShipmentParcelGroupBy {
	spq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShipmentParcelGroupBy{build: spq}
	grbuild.flds = &spq.ctx.Fields
	grbuild.label = shipmentparcel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ShipmentParcel.Query().
//		Select(shipmentparcel.FieldTenantID).
//		Scan(ctx, &v)
func (spq *ShipmentParcelQuery) Select(fields ...string) *ShipmentParcelSelect {
	spq.ctx.Fields = append(spq.ctx.Fields, fields...)
	sbuild := &ShipmentParcelSelect{ShipmentParcelQuery: spq}
	sbuild.label = shipmentparcel.Label
	sbuild.flds, sbuild.scan = &spq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShipmentParcelSelect configured with the given aggregations.
func (spq *ShipmentParcelQuery) Aggregate(fns ...AggregateFunc) *ShipmentParcelSelect {
	return spq.Select().Aggregate(fns...)
}

func (spq *ShipmentParcelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range spq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, spq); err != nil {
				return err
			}
		}
	}
	for _, f := range spq.ctx.Fields {
		if !shipmentparcel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spq.path != nil {
		prev, err := spq.path(ctx)
		if err != nil {
			return err
		}
		spq.sql = prev
	}
	if shipmentparcel.Policy == nil {
		return errors.New("ent: uninitialized shipmentparcel.Policy (forgotten import ent/runtime?)")
	}
	if err := shipmentparcel.Policy.EvalQuery(ctx, spq); err != nil {
		return err
	}
	return nil
}

func (spq *ShipmentParcelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShipmentParcel, error) {
	var (
		nodes       = []*ShipmentParcel{}
		withFKs     = spq.withFKs
		_spec       = spq.querySpec()
		loadedTypes = [8]bool{
			spq.withTenant != nil,
			spq.withShipment != nil,
			spq.withColli != nil,
			spq.withOldColli != nil,
			spq.withWorkspaceRecentScan != nil,
			spq.withPackaging != nil,
			spq.withPrintJob != nil,
			spq.withDocumentFile != nil,
		}
	)
	if spq.withShipment != nil || spq.withColli != nil || spq.withPackaging != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentparcel.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ShipmentParcel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ShipmentParcel{config: spq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(spq.modifiers) > 0 {
		_spec.Modifiers = spq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, spq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := spq.withTenant; query != nil {
		if err := spq.loadTenant(ctx, query, nodes, nil,
			func(n *ShipmentParcel, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withShipment; query != nil {
		if err := spq.loadShipment(ctx, query, nodes, nil,
			func(n *ShipmentParcel, e *Shipment) { n.Edges.Shipment = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withColli; query != nil {
		if err := spq.loadColli(ctx, query, nodes, nil,
			func(n *ShipmentParcel, e *Colli) { n.Edges.Colli = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withOldColli; query != nil {
		if err := spq.loadOldColli(ctx, query, nodes,
			func(n *ShipmentParcel) { n.Edges.OldColli = []*Colli{} },
			func(n *ShipmentParcel, e *Colli) { n.Edges.OldColli = append(n.Edges.OldColli, e) }); err != nil {
			return nil, err
		}
	}
	if query := spq.withWorkspaceRecentScan; query != nil {
		if err := spq.loadWorkspaceRecentScan(ctx, query, nodes,
			func(n *ShipmentParcel) { n.Edges.WorkspaceRecentScan = []*WorkspaceRecentScan{} },
			func(n *ShipmentParcel, e *WorkspaceRecentScan) {
				n.Edges.WorkspaceRecentScan = append(n.Edges.WorkspaceRecentScan, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := spq.withPackaging; query != nil {
		if err := spq.loadPackaging(ctx, query, nodes, nil,
			func(n *ShipmentParcel, e *Packaging) { n.Edges.Packaging = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withPrintJob; query != nil {
		if err := spq.loadPrintJob(ctx, query, nodes,
			func(n *ShipmentParcel) { n.Edges.PrintJob = []*PrintJob{} },
			func(n *ShipmentParcel, e *PrintJob) { n.Edges.PrintJob = append(n.Edges.PrintJob, e) }); err != nil {
			return nil, err
		}
	}
	if query := spq.withDocumentFile; query != nil {
		if err := spq.loadDocumentFile(ctx, query, nodes, nil,
			func(n *ShipmentParcel, e *DocumentFile) { n.Edges.DocumentFile = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range spq.withNamedOldColli {
		if err := spq.loadOldColli(ctx, query, nodes,
			func(n *ShipmentParcel) { n.appendNamedOldColli(name) },
			func(n *ShipmentParcel, e *Colli) { n.appendNamedOldColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range spq.withNamedWorkspaceRecentScan {
		if err := spq.loadWorkspaceRecentScan(ctx, query, nodes,
			func(n *ShipmentParcel) { n.appendNamedWorkspaceRecentScan(name) },
			func(n *ShipmentParcel, e *WorkspaceRecentScan) { n.appendNamedWorkspaceRecentScan(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range spq.withNamedPrintJob {
		if err := spq.loadPrintJob(ctx, query, nodes,
			func(n *ShipmentParcel) { n.appendNamedPrintJob(name) },
			func(n *ShipmentParcel, e *PrintJob) { n.appendNamedPrintJob(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range spq.loadTotal {
		if err := spq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (spq *ShipmentParcelQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentParcel)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadShipment(ctx context.Context, query *ShipmentQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *Shipment)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentParcel)
	for i := range nodes {
		if nodes[i].shipment_shipment_parcel == nil {
			continue
		}
		fk := *nodes[i].shipment_shipment_parcel
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_shipment_parcel" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *Colli)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentParcel)
	for i := range nodes {
		if nodes[i].colli_shipment_parcel == nil {
			continue
		}
		fk := *nodes[i].colli_shipment_parcel
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(colli.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_shipment_parcel" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadOldColli(ctx context.Context, query *ColliQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *Colli)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*ShipmentParcel)
	nids := make(map[pulid.ID]map[*ShipmentParcel]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(shipmentparcel.OldColliTable)
		s.Join(joinT).On(s.C(colli.FieldID), joinT.C(shipmentparcel.OldColliPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(shipmentparcel.OldColliPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(shipmentparcel.OldColliPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ShipmentParcel]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Colli](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "old_colli" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadWorkspaceRecentScan(ctx context.Context, query *WorkspaceRecentScanQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *WorkspaceRecentScan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ShipmentParcel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WorkspaceRecentScan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipmentparcel.WorkspaceRecentScanColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workspace_recent_scan_shipment_parcel
		if fk == nil {
			return fmt.Errorf(`foreign-key "workspace_recent_scan_shipment_parcel" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workspace_recent_scan_shipment_parcel" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadPackaging(ctx context.Context, query *PackagingQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *Packaging)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ShipmentParcel)
	for i := range nodes {
		if nodes[i].shipment_parcel_packaging == nil {
			continue
		}
		fk := *nodes[i].shipment_parcel_packaging
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packaging.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_parcel_packaging" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadPrintJob(ctx context.Context, query *PrintJobQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *PrintJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ShipmentParcel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PrintJob(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipmentparcel.PrintJobColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.print_job_shipment_parcel
		if fk == nil {
			return fmt.Errorf(`foreign-key "print_job_shipment_parcel" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "print_job_shipment_parcel" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (spq *ShipmentParcelQuery) loadDocumentFile(ctx context.Context, query *DocumentFileQuery, nodes []*ShipmentParcel, init func(*ShipmentParcel), assign func(*ShipmentParcel, *DocumentFile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ShipmentParcel)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.DocumentFile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(shipmentparcel.DocumentFileColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.shipment_parcel_document_file
		if fk == nil {
			return fmt.Errorf(`foreign-key "shipment_parcel_document_file" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "shipment_parcel_document_file" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (spq *ShipmentParcelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spq.querySpec()
	if len(spq.modifiers) > 0 {
		_spec.Modifiers = spq.modifiers
	}
	_spec.Node.Columns = spq.ctx.Fields
	if len(spq.ctx.Fields) > 0 {
		_spec.Unique = spq.ctx.Unique != nil && *spq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, spq.driver, _spec)
}

func (spq *ShipmentParcelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shipmentparcel.Table, shipmentparcel.Columns, sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString))
	_spec.From = spq.sql
	if unique := spq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if spq.path != nil {
		_spec.Unique = true
	}
	if fields := spq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentparcel.FieldID)
		for i := range fields {
			if fields[i] != shipmentparcel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if spq.withTenant != nil {
			_spec.Node.AddColumnOnce(shipmentparcel.FieldTenantID)
		}
	}
	if ps := spq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spq *ShipmentParcelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spq.driver.Dialect())
	t1 := builder.Table(shipmentparcel.Table)
	columns := spq.ctx.Fields
	if len(columns) == 0 {
		columns = shipmentparcel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spq.sql != nil {
		selector = spq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spq.ctx.Unique != nil && *spq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range spq.predicates {
		p(selector)
	}
	for _, p := range spq.order {
		p(selector)
	}
	if offset := spq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOldColli tells the query-builder to eager-load the nodes that are connected to the "old_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithNamedOldColli(name string, opts ...func(*ColliQuery)) *ShipmentParcelQuery {
	query := (&ColliClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if spq.withNamedOldColli == nil {
		spq.withNamedOldColli = make(map[string]*ColliQuery)
	}
	spq.withNamedOldColli[name] = query
	return spq
}

// WithNamedWorkspaceRecentScan tells the query-builder to eager-load the nodes that are connected to the "workspace_recent_scan"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithNamedWorkspaceRecentScan(name string, opts ...func(*WorkspaceRecentScanQuery)) *ShipmentParcelQuery {
	query := (&WorkspaceRecentScanClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if spq.withNamedWorkspaceRecentScan == nil {
		spq.withNamedWorkspaceRecentScan = make(map[string]*WorkspaceRecentScanQuery)
	}
	spq.withNamedWorkspaceRecentScan[name] = query
	return spq
}

// WithNamedPrintJob tells the query-builder to eager-load the nodes that are connected to the "print_job"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (spq *ShipmentParcelQuery) WithNamedPrintJob(name string, opts ...func(*PrintJobQuery)) *ShipmentParcelQuery {
	query := (&PrintJobClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if spq.withNamedPrintJob == nil {
		spq.withNamedPrintJob = make(map[string]*PrintJobQuery)
	}
	spq.withNamedPrintJob[name] = query
	return spq
}

// ShipmentParcelGroupBy is the group-by builder for ShipmentParcel entities.
type ShipmentParcelGroupBy struct {
	selector
	build *ShipmentParcelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spgb *ShipmentParcelGroupBy) Aggregate(fns ...AggregateFunc) *ShipmentParcelGroupBy {
	spgb.fns = append(spgb.fns, fns...)
	return spgb
}

// Scan applies the selector query and scans the result into the given value.
func (spgb *ShipmentParcelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spgb.build.ctx, ent.OpQueryGroupBy)
	if err := spgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentParcelQuery, *ShipmentParcelGroupBy](ctx, spgb.build, spgb, spgb.build.inters, v)
}

func (spgb *ShipmentParcelGroupBy) sqlScan(ctx context.Context, root *ShipmentParcelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(spgb.fns))
	for _, fn := range spgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*spgb.flds)+len(spgb.fns))
		for _, f := range *spgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*spgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShipmentParcelSelect is the builder for selecting fields of ShipmentParcel entities.
type ShipmentParcelSelect struct {
	*ShipmentParcelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sps *ShipmentParcelSelect) Aggregate(fns ...AggregateFunc) *ShipmentParcelSelect {
	sps.fns = append(sps.fns, fns...)
	return sps
}

// Scan applies the selector query and scans the result into the given value.
func (sps *ShipmentParcelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sps.ctx, ent.OpQuerySelect)
	if err := sps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShipmentParcelQuery, *ShipmentParcelSelect](ctx, sps.ShipmentParcelQuery, sps, sps.inters, v)
}

func (sps *ShipmentParcelSelect) sqlScan(ctx context.Context, root *ShipmentParcelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sps.fns))
	for _, fn := range sps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
