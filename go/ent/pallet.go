// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Pallet is the model entity for the Pallet schema.
type Pallet struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// PublicID holds the value of the "public_id" field.
	PublicID string `json:"public_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PalletQuery when eager-loading is set.
	Edges                 PalletEdges `json:"edges"`
	consolidation_pallets *pulid.ID
	pallet_packaging      *pulid.ID
	selectValues          sql.SelectValues
}

// PalletEdges holds the relations/edges for other nodes in the graph.
type PalletEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// Packaging holds the value of the packaging edge.
	Packaging *Packaging `json:"packaging,omitempty"`
	// Consolidation holds the value of the consolidation edge.
	Consolidation *Consolidation `json:"consolidation,omitempty"`
	// A pallet may only have 1 active shipment
	ShipmentPallet *ShipmentPallet `json:"shipment_pallet,omitempty"`
	// Cancelled shipments move here to maintain the ref
	CancelledShipmentPallet []*ShipmentPallet `json:"cancelled_shipment_pallet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedOrders                  map[string][]*Order
	namedCancelledShipmentPallet map[string][]*ShipmentPallet
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PalletEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e PalletEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PalletEdges) PackagingOrErr() (*Packaging, error) {
	if e.Packaging != nil {
		return e.Packaging, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// ConsolidationOrErr returns the Consolidation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PalletEdges) ConsolidationOrErr() (*Consolidation, error) {
	if e.Consolidation != nil {
		return e.Consolidation, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: consolidation.Label}
	}
	return nil, &NotLoadedError{edge: "consolidation"}
}

// ShipmentPalletOrErr returns the ShipmentPallet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PalletEdges) ShipmentPalletOrErr() (*ShipmentPallet, error) {
	if e.ShipmentPallet != nil {
		return e.ShipmentPallet, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: shipmentpallet.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_pallet"}
}

// CancelledShipmentPalletOrErr returns the CancelledShipmentPallet value or an error if the edge
// was not loaded in eager-loading.
func (e PalletEdges) CancelledShipmentPalletOrErr() ([]*ShipmentPallet, error) {
	if e.loadedTypes[5] {
		return e.CancelledShipmentPallet, nil
	}
	return nil, &NotLoadedError{edge: "cancelled_shipment_pallet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pallet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pallet.FieldID, pallet.FieldTenantID:
			values[i] = new(pulid.ID)
		case pallet.FieldPublicID, pallet.FieldDescription:
			values[i] = new(sql.NullString)
		case pallet.ForeignKeys[0]: // consolidation_pallets
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case pallet.ForeignKeys[1]: // pallet_packaging
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pallet fields.
func (pa *Pallet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pallet.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case pallet.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pa.TenantID = *value
			}
		case pallet.FieldPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_id", values[i])
			} else if value.Valid {
				pa.PublicID = value.String
			}
		case pallet.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pa.Description = value.String
			}
		case pallet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field consolidation_pallets", values[i])
			} else if value.Valid {
				pa.consolidation_pallets = new(pulid.ID)
				*pa.consolidation_pallets = *value.S.(*pulid.ID)
			}
		case pallet.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field pallet_packaging", values[i])
			} else if value.Valid {
				pa.pallet_packaging = new(pulid.ID)
				*pa.pallet_packaging = *value.S.(*pulid.ID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pallet.
// This includes values selected through modifiers, order, etc.
func (pa *Pallet) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Pallet entity.
func (pa *Pallet) QueryTenant() *TenantQuery {
	return NewPalletClient(pa.config).QueryTenant(pa)
}

// QueryOrders queries the "orders" edge of the Pallet entity.
func (pa *Pallet) QueryOrders() *OrderQuery {
	return NewPalletClient(pa.config).QueryOrders(pa)
}

// QueryPackaging queries the "packaging" edge of the Pallet entity.
func (pa *Pallet) QueryPackaging() *PackagingQuery {
	return NewPalletClient(pa.config).QueryPackaging(pa)
}

// QueryConsolidation queries the "consolidation" edge of the Pallet entity.
func (pa *Pallet) QueryConsolidation() *ConsolidationQuery {
	return NewPalletClient(pa.config).QueryConsolidation(pa)
}

// QueryShipmentPallet queries the "shipment_pallet" edge of the Pallet entity.
func (pa *Pallet) QueryShipmentPallet() *ShipmentPalletQuery {
	return NewPalletClient(pa.config).QueryShipmentPallet(pa)
}

// QueryCancelledShipmentPallet queries the "cancelled_shipment_pallet" edge of the Pallet entity.
func (pa *Pallet) QueryCancelledShipmentPallet() *ShipmentPalletQuery {
	return NewPalletClient(pa.config).QueryCancelledShipmentPallet(pa)
}

// Update returns a builder for updating this Pallet.
// Note that you need to call Pallet.Unwrap() before calling this method if this Pallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Pallet) Update() *PalletUpdateOne {
	return NewPalletClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Pallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Pallet) Unwrap() *Pallet {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pallet is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Pallet) String() string {
	var builder strings.Builder
	builder.WriteString("Pallet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.TenantID))
	builder.WriteString(", ")
	builder.WriteString("public_id=")
	builder.WriteString(pa.PublicID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pa.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrders returns the Orders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Pallet) NamedOrders(name string) ([]*Order, error) {
	if pa.Edges.namedOrders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedOrders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Pallet) appendNamedOrders(name string, edges ...*Order) {
	if pa.Edges.namedOrders == nil {
		pa.Edges.namedOrders = make(map[string][]*Order)
	}
	if len(edges) == 0 {
		pa.Edges.namedOrders[name] = []*Order{}
	} else {
		pa.Edges.namedOrders[name] = append(pa.Edges.namedOrders[name], edges...)
	}
}

// NamedCancelledShipmentPallet returns the CancelledShipmentPallet named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Pallet) NamedCancelledShipmentPallet(name string) ([]*ShipmentPallet, error) {
	if pa.Edges.namedCancelledShipmentPallet == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedCancelledShipmentPallet[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Pallet) appendNamedCancelledShipmentPallet(name string, edges ...*ShipmentPallet) {
	if pa.Edges.namedCancelledShipmentPallet == nil {
		pa.Edges.namedCancelledShipmentPallet = make(map[string][]*ShipmentPallet)
	}
	if len(edges) == 0 {
		pa.Edges.namedCancelledShipmentPallet[name] = []*ShipmentPallet{}
	} else {
		pa.Edges.namedCancelledShipmentPallet[name] = append(pa.Edges.namedCancelledShipmentPallet[name], edges...)
	}
}

// Pallets is a parsable slice of Pallet.
type Pallets []*Pallet
