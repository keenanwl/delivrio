// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceGLSUpdate is the builder for updating CarrierAdditionalServiceGLS entities.
type CarrierAdditionalServiceGLSUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceGLSMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceGLSUpdate builder.
func (casgu *CarrierAdditionalServiceGLSUpdate) Where(ps ...predicate.CarrierAdditionalServiceGLS) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.Where(ps...)
	return casgu
}

// SetLabel sets the "label" field.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetLabel(s string) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.SetLabel(s)
	return casgu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceGLSUpdate {
	if s != nil {
		casgu.SetLabel(*s)
	}
	return casgu
}

// SetMandatory sets the "mandatory" field.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetMandatory(b bool) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.SetMandatory(b)
	return casgu
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetNillableMandatory(b *bool) *CarrierAdditionalServiceGLSUpdate {
	if b != nil {
		casgu.SetMandatory(*b)
	}
	return casgu
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetAllCountriesConsignor(b bool) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.SetAllCountriesConsignor(b)
	return casgu
}

// SetNillableAllCountriesConsignor sets the "all_countries_consignor" field if the given value is not nil.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetNillableAllCountriesConsignor(b *bool) *CarrierAdditionalServiceGLSUpdate {
	if b != nil {
		casgu.SetAllCountriesConsignor(*b)
	}
	return casgu
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetAllCountriesConsignee(b bool) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.SetAllCountriesConsignee(b)
	return casgu
}

// SetNillableAllCountriesConsignee sets the "all_countries_consignee" field if the given value is not nil.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetNillableAllCountriesConsignee(b *bool) *CarrierAdditionalServiceGLSUpdate {
	if b != nil {
		casgu.SetAllCountriesConsignee(*b)
	}
	return casgu
}

// SetInternalID sets the "internal_id" field.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetInternalID(s string) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.SetInternalID(s)
	return casgu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetNillableInternalID(s *string) *CarrierAdditionalServiceGLSUpdate {
	if s != nil {
		casgu.SetInternalID(*s)
	}
	return casgu
}

// SetCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetCarrierServiceGLSID(id pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.SetCarrierServiceGLSID(id)
	return casgu
}

// SetNillableCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID if the given value is not nil.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetNillableCarrierServiceGLSID(id *pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	if id != nil {
		casgu = casgu.SetCarrierServiceGLSID(*id)
	}
	return casgu
}

// SetCarrierServiceGLS sets the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) SetCarrierServiceGLS(c *CarrierServiceGLS) *CarrierAdditionalServiceGLSUpdate {
	return casgu.SetCarrierServiceGLSID(c.ID)
}

// AddDeliveryOptionGlIDs adds the "delivery_option_gls" edge to the DeliveryOptionGLS entity by IDs.
func (casgu *CarrierAdditionalServiceGLSUpdate) AddDeliveryOptionGlIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.AddDeliveryOptionGlIDs(ids...)
	return casgu
}

// AddDeliveryOptionGLS adds the "delivery_option_gls" edges to the DeliveryOptionGLS entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) AddDeliveryOptionGLS(d ...*DeliveryOptionGLS) *CarrierAdditionalServiceGLSUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casgu.AddDeliveryOptionGlIDs(ids...)
}

// AddCountriesConsigneeIDs adds the "countries_consignee" edge to the Country entity by IDs.
func (casgu *CarrierAdditionalServiceGLSUpdate) AddCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.AddCountriesConsigneeIDs(ids...)
	return casgu
}

// AddCountriesConsignee adds the "countries_consignee" edges to the Country entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) AddCountriesConsignee(c ...*Country) *CarrierAdditionalServiceGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casgu.AddCountriesConsigneeIDs(ids...)
}

// AddCountriesConsignorIDs adds the "countries_consignor" edge to the Country entity by IDs.
func (casgu *CarrierAdditionalServiceGLSUpdate) AddCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.AddCountriesConsignorIDs(ids...)
	return casgu
}

// AddCountriesConsignor adds the "countries_consignor" edges to the Country entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) AddCountriesConsignor(c ...*Country) *CarrierAdditionalServiceGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casgu.AddCountriesConsignorIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceGLSMutation object of the builder.
func (casgu *CarrierAdditionalServiceGLSUpdate) Mutation() *CarrierAdditionalServiceGLSMutation {
	return casgu.mutation
}

// ClearCarrierServiceGLS clears the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) ClearCarrierServiceGLS() *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.ClearCarrierServiceGLS()
	return casgu
}

// ClearDeliveryOptionGLS clears all "delivery_option_gls" edges to the DeliveryOptionGLS entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) ClearDeliveryOptionGLS() *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.ClearDeliveryOptionGLS()
	return casgu
}

// RemoveDeliveryOptionGlIDs removes the "delivery_option_gls" edge to DeliveryOptionGLS entities by IDs.
func (casgu *CarrierAdditionalServiceGLSUpdate) RemoveDeliveryOptionGlIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.RemoveDeliveryOptionGlIDs(ids...)
	return casgu
}

// RemoveDeliveryOptionGLS removes "delivery_option_gls" edges to DeliveryOptionGLS entities.
func (casgu *CarrierAdditionalServiceGLSUpdate) RemoveDeliveryOptionGLS(d ...*DeliveryOptionGLS) *CarrierAdditionalServiceGLSUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casgu.RemoveDeliveryOptionGlIDs(ids...)
}

// ClearCountriesConsignee clears all "countries_consignee" edges to the Country entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) ClearCountriesConsignee() *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.ClearCountriesConsignee()
	return casgu
}

// RemoveCountriesConsigneeIDs removes the "countries_consignee" edge to Country entities by IDs.
func (casgu *CarrierAdditionalServiceGLSUpdate) RemoveCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.RemoveCountriesConsigneeIDs(ids...)
	return casgu
}

// RemoveCountriesConsignee removes "countries_consignee" edges to Country entities.
func (casgu *CarrierAdditionalServiceGLSUpdate) RemoveCountriesConsignee(c ...*Country) *CarrierAdditionalServiceGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casgu.RemoveCountriesConsigneeIDs(ids...)
}

// ClearCountriesConsignor clears all "countries_consignor" edges to the Country entity.
func (casgu *CarrierAdditionalServiceGLSUpdate) ClearCountriesConsignor() *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.ClearCountriesConsignor()
	return casgu
}

// RemoveCountriesConsignorIDs removes the "countries_consignor" edge to Country entities by IDs.
func (casgu *CarrierAdditionalServiceGLSUpdate) RemoveCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdate {
	casgu.mutation.RemoveCountriesConsignorIDs(ids...)
	return casgu
}

// RemoveCountriesConsignor removes "countries_consignor" edges to Country entities.
func (casgu *CarrierAdditionalServiceGLSUpdate) RemoveCountriesConsignor(c ...*Country) *CarrierAdditionalServiceGLSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casgu.RemoveCountriesConsignorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casgu *CarrierAdditionalServiceGLSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casgu.sqlSave, casgu.mutation, casgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casgu *CarrierAdditionalServiceGLSUpdate) SaveX(ctx context.Context) int {
	affected, err := casgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casgu *CarrierAdditionalServiceGLSUpdate) Exec(ctx context.Context) error {
	_, err := casgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casgu *CarrierAdditionalServiceGLSUpdate) ExecX(ctx context.Context) {
	if err := casgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casgu *CarrierAdditionalServiceGLSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicegls.Table, carrieradditionalservicegls.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString))
	if ps := casgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casgu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldLabel, field.TypeString, value)
	}
	if value, ok := casgu.mutation.Mandatory(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldMandatory, field.TypeBool, value)
	}
	if value, ok := casgu.mutation.AllCountriesConsignor(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldAllCountriesConsignor, field.TypeBool, value)
	}
	if value, ok := casgu.mutation.AllCountriesConsignee(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldAllCountriesConsignee, field.TypeBool, value)
	}
	if value, ok := casgu.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldInternalID, field.TypeString, value)
	}
	if casgu.mutation.CarrierServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicegls.CarrierServiceGLSTable,
			Columns: []string{carrieradditionalservicegls.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.CarrierServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicegls.CarrierServiceGLSTable,
			Columns: []string{carrieradditionalservicegls.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casgu.mutation.DeliveryOptionGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.RemovedDeliveryOptionGLSIDs(); len(nodes) > 0 && !casgu.mutation.DeliveryOptionGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.DeliveryOptionGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casgu.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.RemovedCountriesConsigneeIDs(); len(nodes) > 0 && !casgu.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.CountriesConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casgu.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.RemovedCountriesConsignorIDs(); len(nodes) > 0 && !casgu.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casgu.mutation.CountriesConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicegls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casgu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceGLSUpdateOne is the builder for updating a single CarrierAdditionalServiceGLS entity.
type CarrierAdditionalServiceGLSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceGLSMutation
}

// SetLabel sets the "label" field.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetLabel(s string) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.SetLabel(s)
	return casguo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceGLSUpdateOne {
	if s != nil {
		casguo.SetLabel(*s)
	}
	return casguo
}

// SetMandatory sets the "mandatory" field.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetMandatory(b bool) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.SetMandatory(b)
	return casguo
}

// SetNillableMandatory sets the "mandatory" field if the given value is not nil.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetNillableMandatory(b *bool) *CarrierAdditionalServiceGLSUpdateOne {
	if b != nil {
		casguo.SetMandatory(*b)
	}
	return casguo
}

// SetAllCountriesConsignor sets the "all_countries_consignor" field.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetAllCountriesConsignor(b bool) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.SetAllCountriesConsignor(b)
	return casguo
}

// SetNillableAllCountriesConsignor sets the "all_countries_consignor" field if the given value is not nil.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetNillableAllCountriesConsignor(b *bool) *CarrierAdditionalServiceGLSUpdateOne {
	if b != nil {
		casguo.SetAllCountriesConsignor(*b)
	}
	return casguo
}

// SetAllCountriesConsignee sets the "all_countries_consignee" field.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetAllCountriesConsignee(b bool) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.SetAllCountriesConsignee(b)
	return casguo
}

// SetNillableAllCountriesConsignee sets the "all_countries_consignee" field if the given value is not nil.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetNillableAllCountriesConsignee(b *bool) *CarrierAdditionalServiceGLSUpdateOne {
	if b != nil {
		casguo.SetAllCountriesConsignee(*b)
	}
	return casguo
}

// SetInternalID sets the "internal_id" field.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetInternalID(s string) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.SetInternalID(s)
	return casguo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetNillableInternalID(s *string) *CarrierAdditionalServiceGLSUpdateOne {
	if s != nil {
		casguo.SetInternalID(*s)
	}
	return casguo
}

// SetCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetCarrierServiceGLSID(id pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.SetCarrierServiceGLSID(id)
	return casguo
}

// SetNillableCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID if the given value is not nil.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetNillableCarrierServiceGLSID(id *pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	if id != nil {
		casguo = casguo.SetCarrierServiceGLSID(*id)
	}
	return casguo
}

// SetCarrierServiceGLS sets the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SetCarrierServiceGLS(c *CarrierServiceGLS) *CarrierAdditionalServiceGLSUpdateOne {
	return casguo.SetCarrierServiceGLSID(c.ID)
}

// AddDeliveryOptionGlIDs adds the "delivery_option_gls" edge to the DeliveryOptionGLS entity by IDs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) AddDeliveryOptionGlIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.AddDeliveryOptionGlIDs(ids...)
	return casguo
}

// AddDeliveryOptionGLS adds the "delivery_option_gls" edges to the DeliveryOptionGLS entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) AddDeliveryOptionGLS(d ...*DeliveryOptionGLS) *CarrierAdditionalServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casguo.AddDeliveryOptionGlIDs(ids...)
}

// AddCountriesConsigneeIDs adds the "countries_consignee" edge to the Country entity by IDs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) AddCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.AddCountriesConsigneeIDs(ids...)
	return casguo
}

// AddCountriesConsignee adds the "countries_consignee" edges to the Country entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) AddCountriesConsignee(c ...*Country) *CarrierAdditionalServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casguo.AddCountriesConsigneeIDs(ids...)
}

// AddCountriesConsignorIDs adds the "countries_consignor" edge to the Country entity by IDs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) AddCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.AddCountriesConsignorIDs(ids...)
	return casguo
}

// AddCountriesConsignor adds the "countries_consignor" edges to the Country entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) AddCountriesConsignor(c ...*Country) *CarrierAdditionalServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casguo.AddCountriesConsignorIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceGLSMutation object of the builder.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) Mutation() *CarrierAdditionalServiceGLSMutation {
	return casguo.mutation
}

// ClearCarrierServiceGLS clears the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) ClearCarrierServiceGLS() *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.ClearCarrierServiceGLS()
	return casguo
}

// ClearDeliveryOptionGLS clears all "delivery_option_gls" edges to the DeliveryOptionGLS entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) ClearDeliveryOptionGLS() *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.ClearDeliveryOptionGLS()
	return casguo
}

// RemoveDeliveryOptionGlIDs removes the "delivery_option_gls" edge to DeliveryOptionGLS entities by IDs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) RemoveDeliveryOptionGlIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.RemoveDeliveryOptionGlIDs(ids...)
	return casguo
}

// RemoveDeliveryOptionGLS removes "delivery_option_gls" edges to DeliveryOptionGLS entities.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) RemoveDeliveryOptionGLS(d ...*DeliveryOptionGLS) *CarrierAdditionalServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casguo.RemoveDeliveryOptionGlIDs(ids...)
}

// ClearCountriesConsignee clears all "countries_consignee" edges to the Country entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) ClearCountriesConsignee() *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.ClearCountriesConsignee()
	return casguo
}

// RemoveCountriesConsigneeIDs removes the "countries_consignee" edge to Country entities by IDs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) RemoveCountriesConsigneeIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.RemoveCountriesConsigneeIDs(ids...)
	return casguo
}

// RemoveCountriesConsignee removes "countries_consignee" edges to Country entities.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) RemoveCountriesConsignee(c ...*Country) *CarrierAdditionalServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casguo.RemoveCountriesConsigneeIDs(ids...)
}

// ClearCountriesConsignor clears all "countries_consignor" edges to the Country entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) ClearCountriesConsignor() *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.ClearCountriesConsignor()
	return casguo
}

// RemoveCountriesConsignorIDs removes the "countries_consignor" edge to Country entities by IDs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) RemoveCountriesConsignorIDs(ids ...pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.RemoveCountriesConsignorIDs(ids...)
	return casguo
}

// RemoveCountriesConsignor removes "countries_consignor" edges to Country entities.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) RemoveCountriesConsignor(c ...*Country) *CarrierAdditionalServiceGLSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casguo.RemoveCountriesConsignorIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceGLSUpdate builder.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceGLS) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.mutation.Where(ps...)
	return casguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceGLSUpdateOne {
	casguo.fields = append([]string{field}, fields...)
	return casguo
}

// Save executes the query and returns the updated CarrierAdditionalServiceGLS entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceGLS, error) {
	return withHooks(ctx, casguo.sqlSave, casguo.mutation, casguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceGLS {
	node, err := casguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) Exec(ctx context.Context) error {
	_, err := casguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casguo *CarrierAdditionalServiceGLSUpdateOne) ExecX(ctx context.Context) {
	if err := casguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casguo *CarrierAdditionalServiceGLSUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceGLS, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicegls.Table, carrieradditionalservicegls.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicegls.FieldID, field.TypeString))
	id, ok := casguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceGLS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicegls.FieldID)
		for _, f := range fields {
			if !carrieradditionalservicegls.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalservicegls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casguo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldLabel, field.TypeString, value)
	}
	if value, ok := casguo.mutation.Mandatory(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldMandatory, field.TypeBool, value)
	}
	if value, ok := casguo.mutation.AllCountriesConsignor(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldAllCountriesConsignor, field.TypeBool, value)
	}
	if value, ok := casguo.mutation.AllCountriesConsignee(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldAllCountriesConsignee, field.TypeBool, value)
	}
	if value, ok := casguo.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalservicegls.FieldInternalID, field.TypeString, value)
	}
	if casguo.mutation.CarrierServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicegls.CarrierServiceGLSTable,
			Columns: []string{carrieradditionalservicegls.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.CarrierServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicegls.CarrierServiceGLSTable,
			Columns: []string{carrieradditionalservicegls.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casguo.mutation.DeliveryOptionGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.RemovedDeliveryOptionGLSIDs(); len(nodes) > 0 && !casguo.mutation.DeliveryOptionGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.DeliveryOptionGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casguo.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.RemovedCountriesConsigneeIDs(); len(nodes) > 0 && !casguo.mutation.CountriesConsigneeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.CountriesConsigneeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casguo.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.RemovedCountriesConsignorIDs(); len(nodes) > 0 && !casguo.mutation.CountriesConsignorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casguo.mutation.CountriesConsignorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceGLS{config: casguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicegls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casguo.mutation.done = true
	return _node, nil
}
