// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductImageUpdate is the builder for updating ProductImage entities.
type ProductImageUpdate struct {
	config
	hooks    []Hook
	mutation *ProductImageMutation
}

// Where appends a list predicates to the ProductImageUpdate builder.
func (piu *ProductImageUpdate) Where(ps ...predicate.ProductImage) *ProductImageUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetTenantID sets the "tenant_id" field.
func (piu *ProductImageUpdate) SetTenantID(pu pulid.ID) *ProductImageUpdate {
	piu.mutation.SetTenantID(pu)
	return piu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (piu *ProductImageUpdate) SetNillableTenantID(pu *pulid.ID) *ProductImageUpdate {
	if pu != nil {
		piu.SetTenantID(*pu)
	}
	return piu
}

// SetExternalID sets the "external_id" field.
func (piu *ProductImageUpdate) SetExternalID(s string) *ProductImageUpdate {
	piu.mutation.SetExternalID(s)
	return piu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (piu *ProductImageUpdate) SetNillableExternalID(s *string) *ProductImageUpdate {
	if s != nil {
		piu.SetExternalID(*s)
	}
	return piu
}

// ClearExternalID clears the value of the "external_id" field.
func (piu *ProductImageUpdate) ClearExternalID() *ProductImageUpdate {
	piu.mutation.ClearExternalID()
	return piu
}

// SetURL sets the "url" field.
func (piu *ProductImageUpdate) SetURL(s string) *ProductImageUpdate {
	piu.mutation.SetURL(s)
	return piu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piu *ProductImageUpdate) SetNillableURL(s *string) *ProductImageUpdate {
	if s != nil {
		piu.SetURL(*s)
	}
	return piu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (piu *ProductImageUpdate) SetTenant(t *Tenant) *ProductImageUpdate {
	return piu.SetTenantID(t.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (piu *ProductImageUpdate) SetProductID(id pulid.ID) *ProductImageUpdate {
	piu.mutation.SetProductID(id)
	return piu
}

// SetProduct sets the "product" edge to the Product entity.
func (piu *ProductImageUpdate) SetProduct(p *Product) *ProductImageUpdate {
	return piu.SetProductID(p.ID)
}

// AddProductVariantIDs adds the "product_variant" edge to the ProductVariant entity by IDs.
func (piu *ProductImageUpdate) AddProductVariantIDs(ids ...pulid.ID) *ProductImageUpdate {
	piu.mutation.AddProductVariantIDs(ids...)
	return piu
}

// AddProductVariant adds the "product_variant" edges to the ProductVariant entity.
func (piu *ProductImageUpdate) AddProductVariant(p ...*ProductVariant) *ProductImageUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddProductVariantIDs(ids...)
}

// Mutation returns the ProductImageMutation object of the builder.
func (piu *ProductImageUpdate) Mutation() *ProductImageMutation {
	return piu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (piu *ProductImageUpdate) ClearTenant() *ProductImageUpdate {
	piu.mutation.ClearTenant()
	return piu
}

// ClearProduct clears the "product" edge to the Product entity.
func (piu *ProductImageUpdate) ClearProduct() *ProductImageUpdate {
	piu.mutation.ClearProduct()
	return piu
}

// ClearProductVariant clears all "product_variant" edges to the ProductVariant entity.
func (piu *ProductImageUpdate) ClearProductVariant() *ProductImageUpdate {
	piu.mutation.ClearProductVariant()
	return piu
}

// RemoveProductVariantIDs removes the "product_variant" edge to ProductVariant entities by IDs.
func (piu *ProductImageUpdate) RemoveProductVariantIDs(ids ...pulid.ID) *ProductImageUpdate {
	piu.mutation.RemoveProductVariantIDs(ids...)
	return piu
}

// RemoveProductVariant removes "product_variant" edges to ProductVariant entities.
func (piu *ProductImageUpdate) RemoveProductVariant(p ...*ProductVariant) *ProductImageUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveProductVariantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProductImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProductImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProductImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProductImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProductImageUpdate) check() error {
	if v, ok := piu.mutation.URL(); ok {
		if err := productimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "ProductImage.url": %w`, err)}
		}
	}
	if piu.mutation.TenantCleared() && len(piu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductImage.tenant"`)
	}
	if piu.mutation.ProductCleared() && len(piu.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductImage.product"`)
	}
	return nil
}

func (piu *ProductImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productimage.Table, productimage.Columns, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ExternalID(); ok {
		_spec.SetField(productimage.FieldExternalID, field.TypeString, value)
	}
	if piu.mutation.ExternalIDCleared() {
		_spec.ClearField(productimage.FieldExternalID, field.TypeString)
	}
	if value, ok := piu.mutation.URL(); ok {
		_spec.SetField(productimage.FieldURL, field.TypeString, value)
	}
	if piu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.TenantTable,
			Columns: []string{productimage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.TenantTable,
			Columns: []string{productimage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedProductVariantIDs(); len(nodes) > 0 && !piu.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProductImageUpdateOne is the builder for updating a single ProductImage entity.
type ProductImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductImageMutation
}

// SetTenantID sets the "tenant_id" field.
func (piuo *ProductImageUpdateOne) SetTenantID(pu pulid.ID) *ProductImageUpdateOne {
	piuo.mutation.SetTenantID(pu)
	return piuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (piuo *ProductImageUpdateOne) SetNillableTenantID(pu *pulid.ID) *ProductImageUpdateOne {
	if pu != nil {
		piuo.SetTenantID(*pu)
	}
	return piuo
}

// SetExternalID sets the "external_id" field.
func (piuo *ProductImageUpdateOne) SetExternalID(s string) *ProductImageUpdateOne {
	piuo.mutation.SetExternalID(s)
	return piuo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (piuo *ProductImageUpdateOne) SetNillableExternalID(s *string) *ProductImageUpdateOne {
	if s != nil {
		piuo.SetExternalID(*s)
	}
	return piuo
}

// ClearExternalID clears the value of the "external_id" field.
func (piuo *ProductImageUpdateOne) ClearExternalID() *ProductImageUpdateOne {
	piuo.mutation.ClearExternalID()
	return piuo
}

// SetURL sets the "url" field.
func (piuo *ProductImageUpdateOne) SetURL(s string) *ProductImageUpdateOne {
	piuo.mutation.SetURL(s)
	return piuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (piuo *ProductImageUpdateOne) SetNillableURL(s *string) *ProductImageUpdateOne {
	if s != nil {
		piuo.SetURL(*s)
	}
	return piuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (piuo *ProductImageUpdateOne) SetTenant(t *Tenant) *ProductImageUpdateOne {
	return piuo.SetTenantID(t.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (piuo *ProductImageUpdateOne) SetProductID(id pulid.ID) *ProductImageUpdateOne {
	piuo.mutation.SetProductID(id)
	return piuo
}

// SetProduct sets the "product" edge to the Product entity.
func (piuo *ProductImageUpdateOne) SetProduct(p *Product) *ProductImageUpdateOne {
	return piuo.SetProductID(p.ID)
}

// AddProductVariantIDs adds the "product_variant" edge to the ProductVariant entity by IDs.
func (piuo *ProductImageUpdateOne) AddProductVariantIDs(ids ...pulid.ID) *ProductImageUpdateOne {
	piuo.mutation.AddProductVariantIDs(ids...)
	return piuo
}

// AddProductVariant adds the "product_variant" edges to the ProductVariant entity.
func (piuo *ProductImageUpdateOne) AddProductVariant(p ...*ProductVariant) *ProductImageUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddProductVariantIDs(ids...)
}

// Mutation returns the ProductImageMutation object of the builder.
func (piuo *ProductImageUpdateOne) Mutation() *ProductImageMutation {
	return piuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (piuo *ProductImageUpdateOne) ClearTenant() *ProductImageUpdateOne {
	piuo.mutation.ClearTenant()
	return piuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (piuo *ProductImageUpdateOne) ClearProduct() *ProductImageUpdateOne {
	piuo.mutation.ClearProduct()
	return piuo
}

// ClearProductVariant clears all "product_variant" edges to the ProductVariant entity.
func (piuo *ProductImageUpdateOne) ClearProductVariant() *ProductImageUpdateOne {
	piuo.mutation.ClearProductVariant()
	return piuo
}

// RemoveProductVariantIDs removes the "product_variant" edge to ProductVariant entities by IDs.
func (piuo *ProductImageUpdateOne) RemoveProductVariantIDs(ids ...pulid.ID) *ProductImageUpdateOne {
	piuo.mutation.RemoveProductVariantIDs(ids...)
	return piuo
}

// RemoveProductVariant removes "product_variant" edges to ProductVariant entities.
func (piuo *ProductImageUpdateOne) RemoveProductVariant(p ...*ProductVariant) *ProductImageUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveProductVariantIDs(ids...)
}

// Where appends a list predicates to the ProductImageUpdate builder.
func (piuo *ProductImageUpdateOne) Where(ps ...predicate.ProductImage) *ProductImageUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProductImageUpdateOne) Select(field string, fields ...string) *ProductImageUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProductImage entity.
func (piuo *ProductImageUpdateOne) Save(ctx context.Context) (*ProductImage, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProductImageUpdateOne) SaveX(ctx context.Context) *ProductImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProductImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProductImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProductImageUpdateOne) check() error {
	if v, ok := piuo.mutation.URL(); ok {
		if err := productimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "ProductImage.url": %w`, err)}
		}
	}
	if piuo.mutation.TenantCleared() && len(piuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductImage.tenant"`)
	}
	if piuo.mutation.ProductCleared() && len(piuo.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductImage.product"`)
	}
	return nil
}

func (piuo *ProductImageUpdateOne) sqlSave(ctx context.Context) (_node *ProductImage, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productimage.Table, productimage.Columns, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productimage.FieldID)
		for _, f := range fields {
			if !productimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ExternalID(); ok {
		_spec.SetField(productimage.FieldExternalID, field.TypeString, value)
	}
	if piuo.mutation.ExternalIDCleared() {
		_spec.ClearField(productimage.FieldExternalID, field.TypeString)
	}
	if value, ok := piuo.mutation.URL(); ok {
		_spec.SetField(productimage.FieldURL, field.TypeString, value)
	}
	if piuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.TenantTable,
			Columns: []string{productimage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.TenantTable,
			Columns: []string{productimage.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedProductVariantIDs(); len(nodes) > 0 && !piuo.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
