// Code generated by ent, DO NOT EDIT.

package parcelshoppostnord

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parcelshoppostnord type in the database.
	Label = "parcel_shop_post_nord"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldServicePointID holds the string denoting the service_point_id field in the database.
	FieldServicePointID = "service_point_id"
	// FieldPudoid holds the string denoting the pudoid field in the database.
	FieldPudoid = "pudoid"
	// FieldTypeID holds the string denoting the type_id field in the database.
	FieldTypeID = "type_id"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// EdgeAddressDelivery holds the string denoting the address_delivery edge name in mutations.
	EdgeAddressDelivery = "address_delivery"
	// Table holds the table name of the parcelshoppostnord in the database.
	Table = "parcel_shop_post_nords"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "parcel_shop_post_nords"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "parcel_shop_parcel_shop_post_nord"
	// AddressDeliveryTable is the table that holds the address_delivery relation/edge.
	AddressDeliveryTable = "address_globals"
	// AddressDeliveryInverseTable is the table name for the AddressGlobal entity.
	// It exists in this package in order to avoid circular dependency with the "addressglobal" package.
	AddressDeliveryInverseTable = "address_globals"
	// AddressDeliveryColumn is the table column denoting the address_delivery relation/edge.
	AddressDeliveryColumn = "parcel_shop_post_nord_address_delivery"
)

// Columns holds all SQL columns for parcelshoppostnord fields.
var Columns = []string{
	FieldID,
	FieldServicePointID,
	FieldPudoid,
	FieldTypeID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parcel_shop_post_nords"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"parcel_shop_parcel_shop_post_nord",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ParcelShopPostNord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByServicePointID orders the results by the service_point_id field.
func ByServicePointID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServicePointID, opts...).ToFunc()
}

// ByPudoid orders the results by the pudoid field.
func ByPudoid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPudoid, opts...).ToFunc()
}

// ByTypeID orders the results by the type_id field.
func ByTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeID, opts...).ToFunc()
}

// ByParcelShopField orders the results by parcel_shop field.
func ByParcelShopField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressDeliveryField orders the results by address_delivery field.
func ByAddressDeliveryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressDeliveryStep(), sql.OrderByField(field, opts...))
	}
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
	)
}
func newAddressDeliveryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressDeliveryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AddressDeliveryTable, AddressDeliveryColumn),
	)
}
