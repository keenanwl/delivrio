// Code generated by ent, DO NOT EDIT.

package parcelshoppostnord

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLTE(FieldID, id))
}

// ServicePointID applies equality check predicate on the "service_point_id" field. It's identical to ServicePointIDEQ.
func ServicePointID(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldServicePointID, v))
}

// Pudoid applies equality check predicate on the "pudoid" field. It's identical to PudoidEQ.
func Pudoid(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldPudoid, v))
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldTypeID, v))
}

// ServicePointIDEQ applies the EQ predicate on the "service_point_id" field.
func ServicePointIDEQ(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldServicePointID, v))
}

// ServicePointIDNEQ applies the NEQ predicate on the "service_point_id" field.
func ServicePointIDNEQ(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNEQ(FieldServicePointID, v))
}

// ServicePointIDIn applies the In predicate on the "service_point_id" field.
func ServicePointIDIn(vs ...string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldIn(FieldServicePointID, vs...))
}

// ServicePointIDNotIn applies the NotIn predicate on the "service_point_id" field.
func ServicePointIDNotIn(vs ...string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNotIn(FieldServicePointID, vs...))
}

// ServicePointIDGT applies the GT predicate on the "service_point_id" field.
func ServicePointIDGT(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGT(FieldServicePointID, v))
}

// ServicePointIDGTE applies the GTE predicate on the "service_point_id" field.
func ServicePointIDGTE(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGTE(FieldServicePointID, v))
}

// ServicePointIDLT applies the LT predicate on the "service_point_id" field.
func ServicePointIDLT(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLT(FieldServicePointID, v))
}

// ServicePointIDLTE applies the LTE predicate on the "service_point_id" field.
func ServicePointIDLTE(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLTE(FieldServicePointID, v))
}

// ServicePointIDContains applies the Contains predicate on the "service_point_id" field.
func ServicePointIDContains(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldContains(FieldServicePointID, v))
}

// ServicePointIDHasPrefix applies the HasPrefix predicate on the "service_point_id" field.
func ServicePointIDHasPrefix(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldHasPrefix(FieldServicePointID, v))
}

// ServicePointIDHasSuffix applies the HasSuffix predicate on the "service_point_id" field.
func ServicePointIDHasSuffix(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldHasSuffix(FieldServicePointID, v))
}

// ServicePointIDEqualFold applies the EqualFold predicate on the "service_point_id" field.
func ServicePointIDEqualFold(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEqualFold(FieldServicePointID, v))
}

// ServicePointIDContainsFold applies the ContainsFold predicate on the "service_point_id" field.
func ServicePointIDContainsFold(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldContainsFold(FieldServicePointID, v))
}

// PudoidEQ applies the EQ predicate on the "pudoid" field.
func PudoidEQ(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldPudoid, v))
}

// PudoidNEQ applies the NEQ predicate on the "pudoid" field.
func PudoidNEQ(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNEQ(FieldPudoid, v))
}

// PudoidIn applies the In predicate on the "pudoid" field.
func PudoidIn(vs ...string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldIn(FieldPudoid, vs...))
}

// PudoidNotIn applies the NotIn predicate on the "pudoid" field.
func PudoidNotIn(vs ...string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNotIn(FieldPudoid, vs...))
}

// PudoidGT applies the GT predicate on the "pudoid" field.
func PudoidGT(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGT(FieldPudoid, v))
}

// PudoidGTE applies the GTE predicate on the "pudoid" field.
func PudoidGTE(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGTE(FieldPudoid, v))
}

// PudoidLT applies the LT predicate on the "pudoid" field.
func PudoidLT(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLT(FieldPudoid, v))
}

// PudoidLTE applies the LTE predicate on the "pudoid" field.
func PudoidLTE(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLTE(FieldPudoid, v))
}

// PudoidContains applies the Contains predicate on the "pudoid" field.
func PudoidContains(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldContains(FieldPudoid, v))
}

// PudoidHasPrefix applies the HasPrefix predicate on the "pudoid" field.
func PudoidHasPrefix(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldHasPrefix(FieldPudoid, v))
}

// PudoidHasSuffix applies the HasSuffix predicate on the "pudoid" field.
func PudoidHasSuffix(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldHasSuffix(FieldPudoid, v))
}

// PudoidEqualFold applies the EqualFold predicate on the "pudoid" field.
func PudoidEqualFold(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEqualFold(FieldPudoid, v))
}

// PudoidContainsFold applies the ContainsFold predicate on the "pudoid" field.
func PudoidContainsFold(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldContainsFold(FieldPudoid, v))
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEQ(FieldTypeID, v))
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNEQ(FieldTypeID, v))
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldIn(FieldTypeID, vs...))
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldNotIn(FieldTypeID, vs...))
}

// TypeIDGT applies the GT predicate on the "type_id" field.
func TypeIDGT(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGT(FieldTypeID, v))
}

// TypeIDGTE applies the GTE predicate on the "type_id" field.
func TypeIDGTE(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldGTE(FieldTypeID, v))
}

// TypeIDLT applies the LT predicate on the "type_id" field.
func TypeIDLT(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLT(FieldTypeID, v))
}

// TypeIDLTE applies the LTE predicate on the "type_id" field.
func TypeIDLTE(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldLTE(FieldTypeID, v))
}

// TypeIDContains applies the Contains predicate on the "type_id" field.
func TypeIDContains(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldContains(FieldTypeID, v))
}

// TypeIDHasPrefix applies the HasPrefix predicate on the "type_id" field.
func TypeIDHasPrefix(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldHasPrefix(FieldTypeID, v))
}

// TypeIDHasSuffix applies the HasSuffix predicate on the "type_id" field.
func TypeIDHasSuffix(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldHasSuffix(FieldTypeID, v))
}

// TypeIDEqualFold applies the EqualFold predicate on the "type_id" field.
func TypeIDEqualFold(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldEqualFold(FieldTypeID, v))
}

// TypeIDContainsFold applies the ContainsFold predicate on the "type_id" field.
func TypeIDContainsFold(v string) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.FieldContainsFold(FieldTypeID, v))
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddressDelivery applies the HasEdge predicate on the "address_delivery" edge.
func HasAddressDelivery() predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AddressDeliveryTable, AddressDeliveryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressDeliveryWith applies the HasEdge predicate on the "address_delivery" edge with a given conditions (other predicates).
func HasAddressDeliveryWith(preds ...predicate.AddressGlobal) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(func(s *sql.Selector) {
		step := newAddressDeliveryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParcelShopPostNord) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParcelShopPostNord) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParcelShopPostNord) predicate.ParcelShopPostNord {
	return predicate.ParcelShopPostNord(sql.NotPredicates(p))
}
