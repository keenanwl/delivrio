// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReturnColliHistory is the model entity for the ReturnColliHistory schema.
type ReturnColliHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type returncollihistory.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReturnColliHistoryQuery when eager-loading is set.
	Edges                               ReturnColliHistoryEdges `json:"edges"`
	change_history_return_colli_history *pulid.ID
	return_colli_return_colli_history   *pulid.ID
	selectValues                        sql.SelectValues
}

// ReturnColliHistoryEdges holds the relations/edges for other nodes in the graph.
type ReturnColliHistoryEdges struct {
	// ChangeHistory holds the value of the change_history edge.
	ChangeHistory *ChangeHistory `json:"change_history,omitempty"`
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ReturnColli holds the value of the return_colli edge.
	ReturnColli *ReturnColli `json:"return_colli,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// ChangeHistoryOrErr returns the ChangeHistory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliHistoryEdges) ChangeHistoryOrErr() (*ChangeHistory, error) {
	if e.ChangeHistory != nil {
		return e.ChangeHistory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: changehistory.Label}
	}
	return nil, &NotLoadedError{edge: "change_history"}
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliHistoryEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ReturnColliOrErr returns the ReturnColli value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnColliHistoryEdges) ReturnColliOrErr() (*ReturnColli, error) {
	if e.ReturnColli != nil {
		return e.ReturnColli, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: returncolli.Label}
	}
	return nil, &NotLoadedError{edge: "return_colli"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReturnColliHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case returncollihistory.FieldID, returncollihistory.FieldTenantID:
			values[i] = new(pulid.ID)
		case returncollihistory.FieldDescription, returncollihistory.FieldType:
			values[i] = new(sql.NullString)
		case returncollihistory.ForeignKeys[0]: // change_history_return_colli_history
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returncollihistory.ForeignKeys[1]: // return_colli_return_colli_history
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReturnColliHistory fields.
func (rch *ReturnColliHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case returncollihistory.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rch.ID = *value
			}
		case returncollihistory.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				rch.TenantID = *value
			}
		case returncollihistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rch.Description = value.String
			}
		case returncollihistory.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				rch.Type = returncollihistory.Type(value.String)
			}
		case returncollihistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field change_history_return_colli_history", values[i])
			} else if value.Valid {
				rch.change_history_return_colli_history = new(pulid.ID)
				*rch.change_history_return_colli_history = *value.S.(*pulid.ID)
			}
		case returncollihistory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_colli_return_colli_history", values[i])
			} else if value.Valid {
				rch.return_colli_return_colli_history = new(pulid.ID)
				*rch.return_colli_return_colli_history = *value.S.(*pulid.ID)
			}
		default:
			rch.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReturnColliHistory.
// This includes values selected through modifiers, order, etc.
func (rch *ReturnColliHistory) Value(name string) (ent.Value, error) {
	return rch.selectValues.Get(name)
}

// QueryChangeHistory queries the "change_history" edge of the ReturnColliHistory entity.
func (rch *ReturnColliHistory) QueryChangeHistory() *ChangeHistoryQuery {
	return NewReturnColliHistoryClient(rch.config).QueryChangeHistory(rch)
}

// QueryTenant queries the "tenant" edge of the ReturnColliHistory entity.
func (rch *ReturnColliHistory) QueryTenant() *TenantQuery {
	return NewReturnColliHistoryClient(rch.config).QueryTenant(rch)
}

// QueryReturnColli queries the "return_colli" edge of the ReturnColliHistory entity.
func (rch *ReturnColliHistory) QueryReturnColli() *ReturnColliQuery {
	return NewReturnColliHistoryClient(rch.config).QueryReturnColli(rch)
}

// Update returns a builder for updating this ReturnColliHistory.
// Note that you need to call ReturnColliHistory.Unwrap() before calling this method if this ReturnColliHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (rch *ReturnColliHistory) Update() *ReturnColliHistoryUpdateOne {
	return NewReturnColliHistoryClient(rch.config).UpdateOne(rch)
}

// Unwrap unwraps the ReturnColliHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rch *ReturnColliHistory) Unwrap() *ReturnColliHistory {
	_tx, ok := rch.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReturnColliHistory is not a transactional entity")
	}
	rch.config.driver = _tx.drv
	return rch
}

// String implements the fmt.Stringer.
func (rch *ReturnColliHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ReturnColliHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rch.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", rch.TenantID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rch.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", rch.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ReturnColliHistories is a parsable slice of ReturnColliHistory.
type ReturnColliHistories []*ReturnColliHistory
