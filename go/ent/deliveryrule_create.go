// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleCreate is the builder for creating a DeliveryRule entity.
type DeliveryRuleCreate struct {
	config
	mutation *DeliveryRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (drc *DeliveryRuleCreate) SetTenantID(pu pulid.ID) *DeliveryRuleCreate {
	drc.mutation.SetTenantID(pu)
	return drc
}

// SetName sets the "name" field.
func (drc *DeliveryRuleCreate) SetName(s string) *DeliveryRuleCreate {
	drc.mutation.SetName(s)
	return drc
}

// SetPrice sets the "price" field.
func (drc *DeliveryRuleCreate) SetPrice(f float64) *DeliveryRuleCreate {
	drc.mutation.SetPrice(f)
	return drc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (drc *DeliveryRuleCreate) SetNillablePrice(f *float64) *DeliveryRuleCreate {
	if f != nil {
		drc.SetPrice(*f)
	}
	return drc
}

// SetID sets the "id" field.
func (drc *DeliveryRuleCreate) SetID(pu pulid.ID) *DeliveryRuleCreate {
	drc.mutation.SetID(pu)
	return drc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drc *DeliveryRuleCreate) SetNillableID(pu *pulid.ID) *DeliveryRuleCreate {
	if pu != nil {
		drc.SetID(*pu)
	}
	return drc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drc *DeliveryRuleCreate) SetTenant(t *Tenant) *DeliveryRuleCreate {
	return drc.SetTenantID(t.ID)
}

// AddDeliveryRuleConstraintGroupIDs adds the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity by IDs.
func (drc *DeliveryRuleCreate) AddDeliveryRuleConstraintGroupIDs(ids ...pulid.ID) *DeliveryRuleCreate {
	drc.mutation.AddDeliveryRuleConstraintGroupIDs(ids...)
	return drc
}

// AddDeliveryRuleConstraintGroup adds the "delivery_rule_constraint_group" edges to the DeliveryRuleConstraintGroup entity.
func (drc *DeliveryRuleCreate) AddDeliveryRuleConstraintGroup(d ...*DeliveryRuleConstraintGroup) *DeliveryRuleCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drc.AddDeliveryRuleConstraintGroupIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (drc *DeliveryRuleCreate) SetDeliveryOptionID(id pulid.ID) *DeliveryRuleCreate {
	drc.mutation.SetDeliveryOptionID(id)
	return drc
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (drc *DeliveryRuleCreate) SetNillableDeliveryOptionID(id *pulid.ID) *DeliveryRuleCreate {
	if id != nil {
		drc = drc.SetDeliveryOptionID(*id)
	}
	return drc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (drc *DeliveryRuleCreate) SetDeliveryOption(d *DeliveryOption) *DeliveryRuleCreate {
	return drc.SetDeliveryOptionID(d.ID)
}

// AddCountryIDs adds the "country" edge to the Country entity by IDs.
func (drc *DeliveryRuleCreate) AddCountryIDs(ids ...pulid.ID) *DeliveryRuleCreate {
	drc.mutation.AddCountryIDs(ids...)
	return drc
}

// AddCountry adds the "country" edges to the Country entity.
func (drc *DeliveryRuleCreate) AddCountry(c ...*Country) *DeliveryRuleCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return drc.AddCountryIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (drc *DeliveryRuleCreate) SetCurrencyID(id pulid.ID) *DeliveryRuleCreate {
	drc.mutation.SetCurrencyID(id)
	return drc
}

// SetNillableCurrencyID sets the "currency" edge to the Currency entity by ID if the given value is not nil.
func (drc *DeliveryRuleCreate) SetNillableCurrencyID(id *pulid.ID) *DeliveryRuleCreate {
	if id != nil {
		drc = drc.SetCurrencyID(*id)
	}
	return drc
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (drc *DeliveryRuleCreate) SetCurrency(c *Currency) *DeliveryRuleCreate {
	return drc.SetCurrencyID(c.ID)
}

// Mutation returns the DeliveryRuleMutation object of the builder.
func (drc *DeliveryRuleCreate) Mutation() *DeliveryRuleMutation {
	return drc.mutation
}

// Save creates the DeliveryRule in the database.
func (drc *DeliveryRuleCreate) Save(ctx context.Context) (*DeliveryRule, error) {
	if err := drc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DeliveryRuleCreate) SaveX(ctx context.Context) *DeliveryRule {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DeliveryRuleCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DeliveryRuleCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DeliveryRuleCreate) defaults() error {
	if _, ok := drc.mutation.Price(); !ok {
		v := deliveryrule.DefaultPrice
		drc.mutation.SetPrice(v)
	}
	if _, ok := drc.mutation.ID(); !ok {
		if deliveryrule.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryrule.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryrule.DefaultID()
		drc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (drc *DeliveryRuleCreate) check() error {
	if _, ok := drc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryRule.tenant_id"`)}
	}
	if _, ok := drc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DeliveryRule.name"`)}
	}
	if _, ok := drc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "DeliveryRule.price"`)}
	}
	if len(drc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryRule.tenant"`)}
	}
	return nil
}

func (drc *DeliveryRuleCreate) sqlSave(ctx context.Context) (*DeliveryRule, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DeliveryRuleCreate) createSpec() (*DeliveryRule, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryRule{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryrule.Table, sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString))
	)
	_spec.OnConflict = drc.conflict
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := drc.mutation.Name(); ok {
		_spec.SetField(deliveryrule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := drc.mutation.Price(); ok {
		_spec.SetField(deliveryrule.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if nodes := drc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.TenantTable,
			Columns: []string{deliveryrule.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.DeliveryRuleConstraintGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryrule.DeliveryOptionTable,
			Columns: []string{deliveryrule.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_delivery_rule = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.CurrencyTable,
			Columns: []string{deliveryrule.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_rule_currency = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryRule.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryRuleUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (drc *DeliveryRuleCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryRuleUpsertOne {
	drc.conflict = opts
	return &DeliveryRuleUpsertOne{
		create: drc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drc *DeliveryRuleCreate) OnConflictColumns(columns ...string) *DeliveryRuleUpsertOne {
	drc.conflict = append(drc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryRuleUpsertOne{
		create: drc,
	}
}

type (
	// DeliveryRuleUpsertOne is the builder for "upsert"-ing
	//  one DeliveryRule node.
	DeliveryRuleUpsertOne struct {
		create *DeliveryRuleCreate
	}

	// DeliveryRuleUpsert is the "OnConflict" setter.
	DeliveryRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleUpsert) SetTenantID(v pulid.ID) *DeliveryRuleUpsert {
	u.Set(deliveryrule.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleUpsert) UpdateTenantID() *DeliveryRuleUpsert {
	u.SetExcluded(deliveryrule.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *DeliveryRuleUpsert) SetName(v string) *DeliveryRuleUpsert {
	u.Set(deliveryrule.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeliveryRuleUpsert) UpdateName() *DeliveryRuleUpsert {
	u.SetExcluded(deliveryrule.FieldName)
	return u
}

// SetPrice sets the "price" field.
func (u *DeliveryRuleUpsert) SetPrice(v float64) *DeliveryRuleUpsert {
	u.Set(deliveryrule.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *DeliveryRuleUpsert) UpdatePrice() *DeliveryRuleUpsert {
	u.SetExcluded(deliveryrule.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *DeliveryRuleUpsert) AddPrice(v float64) *DeliveryRuleUpsert {
	u.Add(deliveryrule.FieldPrice, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryRuleUpsertOne) UpdateNewValues() *DeliveryRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryrule.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryRule.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryRuleUpsertOne) Ignore() *DeliveryRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryRuleUpsertOne) DoNothing() *DeliveryRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryRuleCreate.OnConflict
// documentation for more info.
func (u *DeliveryRuleUpsertOne) Update(set func(*DeliveryRuleUpsert)) *DeliveryRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleUpsertOne) SetTenantID(v pulid.ID) *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleUpsertOne) UpdateTenantID() *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *DeliveryRuleUpsertOne) SetName(v string) *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeliveryRuleUpsertOne) UpdateName() *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.UpdateName()
	})
}

// SetPrice sets the "price" field.
func (u *DeliveryRuleUpsertOne) SetPrice(v float64) *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *DeliveryRuleUpsertOne) AddPrice(v float64) *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *DeliveryRuleUpsertOne) UpdatePrice() *DeliveryRuleUpsertOne {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *DeliveryRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryRuleUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryRuleUpsertOne.ID is not supported by MySQL driver. Use DeliveryRuleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryRuleUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryRuleCreateBulk is the builder for creating many DeliveryRule entities in bulk.
type DeliveryRuleCreateBulk struct {
	config
	err      error
	builders []*DeliveryRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryRule entities in the database.
func (drcb *DeliveryRuleCreateBulk) Save(ctx context.Context) ([]*DeliveryRule, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DeliveryRule, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DeliveryRuleCreateBulk) SaveX(ctx context.Context) []*DeliveryRule {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DeliveryRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DeliveryRuleCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryRuleUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (drcb *DeliveryRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryRuleUpsertBulk {
	drcb.conflict = opts
	return &DeliveryRuleUpsertBulk{
		create: drcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcb *DeliveryRuleCreateBulk) OnConflictColumns(columns ...string) *DeliveryRuleUpsertBulk {
	drcb.conflict = append(drcb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryRuleUpsertBulk{
		create: drcb,
	}
}

// DeliveryRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryRule nodes.
type DeliveryRuleUpsertBulk struct {
	create *DeliveryRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryrule.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryRuleUpsertBulk) UpdateNewValues() *DeliveryRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryrule.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryRuleUpsertBulk) Ignore() *DeliveryRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryRuleUpsertBulk) DoNothing() *DeliveryRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryRuleCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryRuleUpsertBulk) Update(set func(*DeliveryRuleUpsert)) *DeliveryRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleUpsertBulk) SetTenantID(v pulid.ID) *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleUpsertBulk) UpdateTenantID() *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *DeliveryRuleUpsertBulk) SetName(v string) *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DeliveryRuleUpsertBulk) UpdateName() *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.UpdateName()
	})
}

// SetPrice sets the "price" field.
func (u *DeliveryRuleUpsertBulk) SetPrice(v float64) *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *DeliveryRuleUpsertBulk) AddPrice(v float64) *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *DeliveryRuleUpsertBulk) UpdatePrice() *DeliveryRuleUpsertBulk {
	return u.Update(func(s *DeliveryRuleUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *DeliveryRuleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
