// Code generated by ent, DO NOT EDIT.

package carrierservice

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldLTE(FieldID, id))
}

// InternalID applies equality check predicate on the "internal_id" field. It's identical to InternalIDEQ.
func InternalID(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldInternalID, v))
}

// Return applies equality check predicate on the "return" field. It's identical to ReturnEQ.
func Return(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldReturn, v))
}

// Consolidation applies equality check predicate on the "consolidation" field. It's identical to ConsolidationEQ.
func Consolidation(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldConsolidation, v))
}

// DeliveryPointOptional applies equality check predicate on the "delivery_point_optional" field. It's identical to DeliveryPointOptionalEQ.
func DeliveryPointOptional(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldDeliveryPointOptional, v))
}

// DeliveryPointRequired applies equality check predicate on the "delivery_point_required" field. It's identical to DeliveryPointRequiredEQ.
func DeliveryPointRequired(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldDeliveryPointRequired, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldContainsFold(FieldLabel, v))
}

// InternalIDEQ applies the EQ predicate on the "internal_id" field.
func InternalIDEQ(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldInternalID, v))
}

// InternalIDNEQ applies the NEQ predicate on the "internal_id" field.
func InternalIDNEQ(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldInternalID, v))
}

// InternalIDIn applies the In predicate on the "internal_id" field.
func InternalIDIn(vs ...string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldIn(FieldInternalID, vs...))
}

// InternalIDNotIn applies the NotIn predicate on the "internal_id" field.
func InternalIDNotIn(vs ...string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNotIn(FieldInternalID, vs...))
}

// InternalIDGT applies the GT predicate on the "internal_id" field.
func InternalIDGT(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldGT(FieldInternalID, v))
}

// InternalIDGTE applies the GTE predicate on the "internal_id" field.
func InternalIDGTE(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldGTE(FieldInternalID, v))
}

// InternalIDLT applies the LT predicate on the "internal_id" field.
func InternalIDLT(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldLT(FieldInternalID, v))
}

// InternalIDLTE applies the LTE predicate on the "internal_id" field.
func InternalIDLTE(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldLTE(FieldInternalID, v))
}

// InternalIDContains applies the Contains predicate on the "internal_id" field.
func InternalIDContains(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldContains(FieldInternalID, v))
}

// InternalIDHasPrefix applies the HasPrefix predicate on the "internal_id" field.
func InternalIDHasPrefix(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldHasPrefix(FieldInternalID, v))
}

// InternalIDHasSuffix applies the HasSuffix predicate on the "internal_id" field.
func InternalIDHasSuffix(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldHasSuffix(FieldInternalID, v))
}

// InternalIDEqualFold applies the EqualFold predicate on the "internal_id" field.
func InternalIDEqualFold(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEqualFold(FieldInternalID, v))
}

// InternalIDContainsFold applies the ContainsFold predicate on the "internal_id" field.
func InternalIDContainsFold(v string) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldContainsFold(FieldInternalID, v))
}

// ReturnEQ applies the EQ predicate on the "return" field.
func ReturnEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldReturn, v))
}

// ReturnNEQ applies the NEQ predicate on the "return" field.
func ReturnNEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldReturn, v))
}

// ConsolidationEQ applies the EQ predicate on the "consolidation" field.
func ConsolidationEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldConsolidation, v))
}

// ConsolidationNEQ applies the NEQ predicate on the "consolidation" field.
func ConsolidationNEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldConsolidation, v))
}

// DeliveryPointOptionalEQ applies the EQ predicate on the "delivery_point_optional" field.
func DeliveryPointOptionalEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldDeliveryPointOptional, v))
}

// DeliveryPointOptionalNEQ applies the NEQ predicate on the "delivery_point_optional" field.
func DeliveryPointOptionalNEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldDeliveryPointOptional, v))
}

// DeliveryPointRequiredEQ applies the EQ predicate on the "delivery_point_required" field.
func DeliveryPointRequiredEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldEQ(FieldDeliveryPointRequired, v))
}

// DeliveryPointRequiredNEQ applies the NEQ predicate on the "delivery_point_required" field.
func DeliveryPointRequiredNEQ(v bool) predicate.CarrierService {
	return predicate.CarrierService(sql.FieldNEQ(FieldDeliveryPointRequired, v))
}

// HasCarrierServicePostNord applies the HasEdge predicate on the "carrier_service_post_nord" edge.
func HasCarrierServicePostNord() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServicePostNordTable, CarrierServicePostNordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServicePostNordWith applies the HasEdge predicate on the "carrier_service_post_nord" edge with a given conditions (other predicates).
func HasCarrierServicePostNordWith(preds ...predicate.CarrierServicePostNord) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServicePostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServiceDAO applies the HasEdge predicate on the "carrier_service_dao" edge.
func HasCarrierServiceDAO() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceDAOTable, CarrierServiceDAOColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceDAOWith applies the HasEdge predicate on the "carrier_service_dao" edge with a given conditions (other predicates).
func HasCarrierServiceDAOWith(preds ...predicate.CarrierServiceDAO) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServiceDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServiceDF applies the HasEdge predicate on the "carrier_service_df" edge.
func HasCarrierServiceDF() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceDFTable, CarrierServiceDFColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceDFWith applies the HasEdge predicate on the "carrier_service_df" edge with a given conditions (other predicates).
func HasCarrierServiceDFWith(preds ...predicate.CarrierServiceDF) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServiceDFStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServiceDSV applies the HasEdge predicate on the "carrier_service_dsv" edge.
func HasCarrierServiceDSV() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceDSVTable, CarrierServiceDSVColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceDSVWith applies the HasEdge predicate on the "carrier_service_dsv" edge with a given conditions (other predicates).
func HasCarrierServiceDSVWith(preds ...predicate.CarrierServiceDSV) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServiceDSVStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServEasyPost applies the HasEdge predicate on the "carrier_serv_easy_post" edge.
func HasCarrierServEasyPost() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServEasyPostTable, CarrierServEasyPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServEasyPostWith applies the HasEdge predicate on the "carrier_serv_easy_post" edge with a given conditions (other predicates).
func HasCarrierServEasyPostWith(preds ...predicate.CarrierServiceEasyPost) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServEasyPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServiceGLS applies the HasEdge predicate on the "carrier_service_gls" edge.
func HasCarrierServiceGLS() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceGLSTable, CarrierServiceGLSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceGLSWith applies the HasEdge predicate on the "carrier_service_gls" edge with a given conditions (other predicates).
func HasCarrierServiceGLSWith(preds ...predicate.CarrierServiceGLS) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServiceGLSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServiceUSPS applies the HasEdge predicate on the "carrier_service_usps" edge.
func HasCarrierServiceUSPS() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceUSPSTable, CarrierServiceUSPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceUSPSWith applies the HasEdge predicate on the "carrier_service_usps" edge with a given conditions (other predicates).
func HasCarrierServiceUSPSWith(preds ...predicate.CarrierServiceUSPS) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServiceUSPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierServiceBring applies the HasEdge predicate on the "carrier_service_bring" edge.
func HasCarrierServiceBring() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceBringTable, CarrierServiceBringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceBringWith applies the HasEdge predicate on the "carrier_service_bring" edge with a given conditions (other predicates).
func HasCarrierServiceBringWith(preds ...predicate.CarrierServiceBring) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierServiceBringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierBrand applies the HasEdge predicate on the "carrier_brand" edge.
func HasCarrierBrand() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarrierBrandTable, CarrierBrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierBrandWith applies the HasEdge predicate on the "carrier_brand" edge with a given conditions (other predicates).
func HasCarrierBrandWith(preds ...predicate.CarrierBrand) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newCarrierBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.CarrierService {
	return predicate.CarrierService(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierService) predicate.CarrierService {
	return predicate.CarrierService(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierService) predicate.CarrierService {
	return predicate.CarrierService(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierService) predicate.CarrierService {
	return predicate.CarrierService(sql.NotPredicates(p))
}
