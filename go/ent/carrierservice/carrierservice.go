// Code generated by ent, DO NOT EDIT.

package carrierservice

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierservice type in the database.
	Label = "carrier_service"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldInternalID holds the string denoting the internal_id field in the database.
	FieldInternalID = "internal_id"
	// FieldReturn holds the string denoting the return field in the database.
	FieldReturn = "return"
	// FieldConsolidation holds the string denoting the consolidation field in the database.
	FieldConsolidation = "consolidation"
	// FieldDeliveryPointOptional holds the string denoting the delivery_point_optional field in the database.
	FieldDeliveryPointOptional = "delivery_point_optional"
	// FieldDeliveryPointRequired holds the string denoting the delivery_point_required field in the database.
	FieldDeliveryPointRequired = "delivery_point_required"
	// EdgeCarrierServicePostNord holds the string denoting the carrier_service_post_nord edge name in mutations.
	EdgeCarrierServicePostNord = "carrier_service_post_nord"
	// EdgeCarrierServiceDAO holds the string denoting the carrier_service_dao edge name in mutations.
	EdgeCarrierServiceDAO = "carrier_service_dao"
	// EdgeCarrierServiceDF holds the string denoting the carrier_service_df edge name in mutations.
	EdgeCarrierServiceDF = "carrier_service_df"
	// EdgeCarrierServiceDSV holds the string denoting the carrier_service_dsv edge name in mutations.
	EdgeCarrierServiceDSV = "carrier_service_dsv"
	// EdgeCarrierServEasyPost holds the string denoting the carrier_serv_easy_post edge name in mutations.
	EdgeCarrierServEasyPost = "carrier_serv_easy_post"
	// EdgeCarrierServiceGLS holds the string denoting the carrier_service_gls edge name in mutations.
	EdgeCarrierServiceGLS = "carrier_service_gls"
	// EdgeCarrierServiceUSPS holds the string denoting the carrier_service_usps edge name in mutations.
	EdgeCarrierServiceUSPS = "carrier_service_usps"
	// EdgeCarrierServiceBring holds the string denoting the carrier_service_bring edge name in mutations.
	EdgeCarrierServiceBring = "carrier_service_bring"
	// EdgeCarrierBrand holds the string denoting the carrier_brand edge name in mutations.
	EdgeCarrierBrand = "carrier_brand"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// Table holds the table name of the carrierservice in the database.
	Table = "carrier_services"
	// CarrierServicePostNordTable is the table that holds the carrier_service_post_nord relation/edge.
	CarrierServicePostNordTable = "carrier_service_post_nords"
	// CarrierServicePostNordInverseTable is the table name for the CarrierServicePostNord entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicepostnord" package.
	CarrierServicePostNordInverseTable = "carrier_service_post_nords"
	// CarrierServicePostNordColumn is the table column denoting the carrier_service_post_nord relation/edge.
	CarrierServicePostNordColumn = "carrier_service_carrier_service_post_nord"
	// CarrierServiceDAOTable is the table that holds the carrier_service_dao relation/edge.
	CarrierServiceDAOTable = "carrier_service_da_os"
	// CarrierServiceDAOInverseTable is the table name for the CarrierServiceDAO entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicedao" package.
	CarrierServiceDAOInverseTable = "carrier_service_da_os"
	// CarrierServiceDAOColumn is the table column denoting the carrier_service_dao relation/edge.
	CarrierServiceDAOColumn = "carrier_service_carrier_service_dao"
	// CarrierServiceDFTable is the table that holds the carrier_service_df relation/edge.
	CarrierServiceDFTable = "carrier_service_dfs"
	// CarrierServiceDFInverseTable is the table name for the CarrierServiceDF entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicedf" package.
	CarrierServiceDFInverseTable = "carrier_service_dfs"
	// CarrierServiceDFColumn is the table column denoting the carrier_service_df relation/edge.
	CarrierServiceDFColumn = "carrier_service_carrier_service_df"
	// CarrierServiceDSVTable is the table that holds the carrier_service_dsv relation/edge.
	CarrierServiceDSVTable = "carrier_service_ds_vs"
	// CarrierServiceDSVInverseTable is the table name for the CarrierServiceDSV entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicedsv" package.
	CarrierServiceDSVInverseTable = "carrier_service_ds_vs"
	// CarrierServiceDSVColumn is the table column denoting the carrier_service_dsv relation/edge.
	CarrierServiceDSVColumn = "carrier_service_carrier_service_dsv"
	// CarrierServEasyPostTable is the table that holds the carrier_serv_easy_post relation/edge.
	CarrierServEasyPostTable = "carrier_service_easy_posts"
	// CarrierServEasyPostInverseTable is the table name for the CarrierServiceEasyPost entity.
	// It exists in this package in order to avoid circular dependency with the "carrierserviceeasypost" package.
	CarrierServEasyPostInverseTable = "carrier_service_easy_posts"
	// CarrierServEasyPostColumn is the table column denoting the carrier_serv_easy_post relation/edge.
	CarrierServEasyPostColumn = "carrier_service_carrier_serv_easy_post"
	// CarrierServiceGLSTable is the table that holds the carrier_service_gls relation/edge.
	CarrierServiceGLSTable = "carrier_service_gl_ss"
	// CarrierServiceGLSInverseTable is the table name for the CarrierServiceGLS entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicegls" package.
	CarrierServiceGLSInverseTable = "carrier_service_gl_ss"
	// CarrierServiceGLSColumn is the table column denoting the carrier_service_gls relation/edge.
	CarrierServiceGLSColumn = "carrier_service_carrier_service_gls"
	// CarrierServiceUSPSTable is the table that holds the carrier_service_usps relation/edge.
	CarrierServiceUSPSTable = "carrier_service_usp_ss"
	// CarrierServiceUSPSInverseTable is the table name for the CarrierServiceUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "carrierserviceusps" package.
	CarrierServiceUSPSInverseTable = "carrier_service_usp_ss"
	// CarrierServiceUSPSColumn is the table column denoting the carrier_service_usps relation/edge.
	CarrierServiceUSPSColumn = "carrier_service_carrier_service_usps"
	// CarrierServiceBringTable is the table that holds the carrier_service_bring relation/edge.
	CarrierServiceBringTable = "carrier_service_brings"
	// CarrierServiceBringInverseTable is the table name for the CarrierServiceBring entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicebring" package.
	CarrierServiceBringInverseTable = "carrier_service_brings"
	// CarrierServiceBringColumn is the table column denoting the carrier_service_bring relation/edge.
	CarrierServiceBringColumn = "carrier_service_carrier_service_bring"
	// CarrierBrandTable is the table that holds the carrier_brand relation/edge.
	CarrierBrandTable = "carrier_services"
	// CarrierBrandInverseTable is the table name for the CarrierBrand entity.
	// It exists in this package in order to avoid circular dependency with the "carrierbrand" package.
	CarrierBrandInverseTable = "carrier_brands"
	// CarrierBrandColumn is the table column denoting the carrier_brand relation/edge.
	CarrierBrandColumn = "carrier_brand_carrier_service"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "delivery_options"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "delivery_option_carrier_service"
)

// Columns holds all SQL columns for carrierservice fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldInternalID,
	FieldReturn,
	FieldConsolidation,
	FieldDeliveryPointOptional,
	FieldDeliveryPointRequired,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_services"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_brand_carrier_service",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultReturn holds the default value on creation for the "return" field.
	DefaultReturn bool
	// DefaultConsolidation holds the default value on creation for the "consolidation" field.
	DefaultConsolidation bool
	// DefaultDeliveryPointOptional holds the default value on creation for the "delivery_point_optional" field.
	DefaultDeliveryPointOptional bool
	// DefaultDeliveryPointRequired holds the default value on creation for the "delivery_point_required" field.
	DefaultDeliveryPointRequired bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierService queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByInternalID orders the results by the internal_id field.
func ByInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalID, opts...).ToFunc()
}

// ByReturn orders the results by the return field.
func ByReturn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReturn, opts...).ToFunc()
}

// ByConsolidation orders the results by the consolidation field.
func ByConsolidation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsolidation, opts...).ToFunc()
}

// ByDeliveryPointOptional orders the results by the delivery_point_optional field.
func ByDeliveryPointOptional(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryPointOptional, opts...).ToFunc()
}

// ByDeliveryPointRequired orders the results by the delivery_point_required field.
func ByDeliveryPointRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveryPointRequired, opts...).ToFunc()
}

// ByCarrierServicePostNordField orders the results by carrier_service_post_nord field.
func ByCarrierServicePostNordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServicePostNordStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServiceDAOField orders the results by carrier_service_dao field.
func ByCarrierServiceDAOField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceDAOStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServiceDFField orders the results by carrier_service_df field.
func ByCarrierServiceDFField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceDFStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServiceDSVField orders the results by carrier_service_dsv field.
func ByCarrierServiceDSVField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceDSVStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServEasyPostField orders the results by carrier_serv_easy_post field.
func ByCarrierServEasyPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServEasyPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServiceGLSField orders the results by carrier_service_gls field.
func ByCarrierServiceGLSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceGLSStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServiceUSPSField orders the results by carrier_service_usps field.
func ByCarrierServiceUSPSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceUSPSStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierServiceBringField orders the results by carrier_service_bring field.
func ByCarrierServiceBringField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceBringStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierBrandField orders the results by carrier_brand field.
func ByCarrierBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionCount orders the results by delivery_option count.
func ByDeliveryOptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionStep(), opts...)
	}
}

// ByDeliveryOption orders the results by delivery_option terms.
func ByDeliveryOption(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServicePostNordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServicePostNordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServicePostNordTable, CarrierServicePostNordColumn),
	)
}
func newCarrierServiceDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceDAOTable, CarrierServiceDAOColumn),
	)
}
func newCarrierServiceDFStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceDFInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceDFTable, CarrierServiceDFColumn),
	)
}
func newCarrierServiceDSVStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceDSVInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceDSVTable, CarrierServiceDSVColumn),
	)
}
func newCarrierServEasyPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServEasyPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServEasyPostTable, CarrierServEasyPostColumn),
	)
}
func newCarrierServiceGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceGLSTable, CarrierServiceGLSColumn),
	)
}
func newCarrierServiceUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceUSPSTable, CarrierServiceUSPSColumn),
	)
}
func newCarrierServiceBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CarrierServiceBringTable, CarrierServiceBringColumn),
	)
}
func newCarrierBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierBrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarrierBrandTable, CarrierBrandColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
