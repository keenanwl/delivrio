// Code generated by ent, DO NOT EDIT.

package shipmentpallet

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the shipmentpallet type in the database.
	Label = "shipment_pallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldBarcode holds the string denoting the barcode field in the database.
	FieldBarcode = "barcode"
	// FieldColliNumber holds the string denoting the colli_number field in the database.
	FieldColliNumber = "colli_number"
	// FieldCarrierID holds the string denoting the carrier_id field in the database.
	FieldCarrierID = "carrier_id"
	// FieldLabelPdf holds the string denoting the label_pdf field in the database.
	FieldLabelPdf = "label_pdf"
	// FieldLabelZpl holds the string denoting the label_zpl field in the database.
	FieldLabelZpl = "label_zpl"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePallet holds the string denoting the pallet edge name in mutations.
	EdgePallet = "pallet"
	// EdgeOldPallet holds the string denoting the old_pallet edge name in mutations.
	EdgeOldPallet = "old_pallet"
	// EdgeShipment holds the string denoting the shipment edge name in mutations.
	EdgeShipment = "shipment"
	// Table holds the table name of the shipmentpallet in the database.
	Table = "shipment_pallets"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "shipment_pallets"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PalletTable is the table that holds the pallet relation/edge.
	PalletTable = "shipment_pallets"
	// PalletInverseTable is the table name for the Pallet entity.
	// It exists in this package in order to avoid circular dependency with the "pallet" package.
	PalletInverseTable = "pallets"
	// PalletColumn is the table column denoting the pallet relation/edge.
	PalletColumn = "pallet_shipment_pallet"
	// OldPalletTable is the table that holds the old_pallet relation/edge. The primary key declared below.
	OldPalletTable = "pallet_cancelled_shipment_pallet"
	// OldPalletInverseTable is the table name for the Pallet entity.
	// It exists in this package in order to avoid circular dependency with the "pallet" package.
	OldPalletInverseTable = "pallets"
	// ShipmentTable is the table that holds the shipment relation/edge.
	ShipmentTable = "shipment_pallets"
	// ShipmentInverseTable is the table name for the Shipment entity.
	// It exists in this package in order to avoid circular dependency with the "shipment" package.
	ShipmentInverseTable = "shipments"
	// ShipmentColumn is the table column denoting the shipment relation/edge.
	ShipmentColumn = "shipment_shipment_pallet"
)

// Columns holds all SQL columns for shipmentpallet fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldBarcode,
	FieldColliNumber,
	FieldCarrierID,
	FieldLabelPdf,
	FieldLabelZpl,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shipment_pallets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"pallet_shipment_pallet",
	"shipment_shipment_pallet",
}

var (
	// OldPalletPrimaryKey and OldPalletColumn2 are the table columns denoting the
	// primary key for the old_pallet relation (M2M).
	OldPalletPrimaryKey = []string{"pallet_id", "shipment_pallet_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending Status = "pending"
	StatusPrinted Status = "printed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusPrinted:
		return nil
	default:
		return fmt.Errorf("shipmentpallet: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ShipmentPallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByBarcode orders the results by the barcode field.
func ByBarcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBarcode, opts...).ToFunc()
}

// ByColliNumber orders the results by the colli_number field.
func ByColliNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColliNumber, opts...).ToFunc()
}

// ByCarrierID orders the results by the carrier_id field.
func ByCarrierID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarrierID, opts...).ToFunc()
}

// ByLabelPdf orders the results by the label_pdf field.
func ByLabelPdf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelPdf, opts...).ToFunc()
}

// ByLabelZpl orders the results by the label_zpl field.
func ByLabelZpl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelZpl, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPalletField orders the results by pallet field.
func ByPalletField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPalletStep(), sql.OrderByField(field, opts...))
	}
}

// ByOldPalletCount orders the results by old_pallet count.
func ByOldPalletCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOldPalletStep(), opts...)
	}
}

// ByOldPallet orders the results by old_pallet terms.
func ByOldPallet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOldPalletStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentField orders the results by shipment field.
func ByShipmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, PalletTable, PalletColumn),
	)
}
func newOldPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OldPalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OldPalletTable, OldPalletPrimaryKey...),
	)
}
func newShipmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ShipmentTable, ShipmentColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
