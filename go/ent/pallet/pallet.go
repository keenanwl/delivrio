// Code generated by ent, DO NOT EDIT.

package pallet

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pallet type in the database.
	Label = "pallet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPublicID holds the string denoting the public_id field in the database.
	FieldPublicID = "public_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// EdgeConsolidation holds the string denoting the consolidation edge name in mutations.
	EdgeConsolidation = "consolidation"
	// EdgeShipmentPallet holds the string denoting the shipment_pallet edge name in mutations.
	EdgeShipmentPallet = "shipment_pallet"
	// EdgeCancelledShipmentPallet holds the string denoting the cancelled_shipment_pallet edge name in mutations.
	EdgeCancelledShipmentPallet = "cancelled_shipment_pallet"
	// Table holds the table name of the pallet in the database.
	Table = "pallets"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "pallets"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "pallet_orders"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "pallets"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "pallet_packaging"
	// ConsolidationTable is the table that holds the consolidation relation/edge.
	ConsolidationTable = "pallets"
	// ConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	ConsolidationInverseTable = "consolidations"
	// ConsolidationColumn is the table column denoting the consolidation relation/edge.
	ConsolidationColumn = "consolidation_pallets"
	// ShipmentPalletTable is the table that holds the shipment_pallet relation/edge.
	ShipmentPalletTable = "shipment_pallets"
	// ShipmentPalletInverseTable is the table name for the ShipmentPallet entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentpallet" package.
	ShipmentPalletInverseTable = "shipment_pallets"
	// ShipmentPalletColumn is the table column denoting the shipment_pallet relation/edge.
	ShipmentPalletColumn = "pallet_shipment_pallet"
	// CancelledShipmentPalletTable is the table that holds the cancelled_shipment_pallet relation/edge. The primary key declared below.
	CancelledShipmentPalletTable = "pallet_cancelled_shipment_pallet"
	// CancelledShipmentPalletInverseTable is the table name for the ShipmentPallet entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentpallet" package.
	CancelledShipmentPalletInverseTable = "shipment_pallets"
)

// Columns holds all SQL columns for pallet fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldPublicID,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pallets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"consolidation_pallets",
	"pallet_packaging",
}

var (
	// CancelledShipmentPalletPrimaryKey and CancelledShipmentPalletColumn2 are the table columns denoting the
	// primary key for the cancelled_shipment_pallet relation (M2M).
	CancelledShipmentPalletPrimaryKey = []string{"pallet_id", "shipment_pallet_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Pallet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPublicID orders the results by the public_id field.
func ByPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPackagingField orders the results by packaging field.
func ByPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), sql.OrderByField(field, opts...))
	}
}

// ByConsolidationField orders the results by consolidation field.
func ByConsolidationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsolidationStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentPalletField orders the results by shipment_pallet field.
func ByShipmentPalletField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentPalletStep(), sql.OrderByField(field, opts...))
	}
}

// ByCancelledShipmentPalletCount orders the results by cancelled_shipment_pallet count.
func ByCancelledShipmentPalletCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCancelledShipmentPalletStep(), opts...)
	}
}

// ByCancelledShipmentPallet orders the results by cancelled_shipment_pallet terms.
func ByCancelledShipmentPallet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCancelledShipmentPalletStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
	)
}
func newConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConsolidationTable, ConsolidationColumn),
	)
}
func newShipmentPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentPalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentPalletTable, ShipmentPalletColumn),
	)
}
func newCancelledShipmentPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CancelledShipmentPalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CancelledShipmentPalletTable, CancelledShipmentPalletPrimaryKey...),
	)
}
