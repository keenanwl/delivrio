// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionShopifyCreate is the builder for creating a ConnectionShopify entity.
type ConnectionShopifyCreate struct {
	config
	mutation *ConnectionShopifyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (csc *ConnectionShopifyCreate) SetTenantID(pu pulid.ID) *ConnectionShopifyCreate {
	csc.mutation.SetTenantID(pu)
	return csc
}

// SetRateIntegration sets the "rate_integration" field.
func (csc *ConnectionShopifyCreate) SetRateIntegration(b bool) *ConnectionShopifyCreate {
	csc.mutation.SetRateIntegration(b)
	return csc
}

// SetNillableRateIntegration sets the "rate_integration" field if the given value is not nil.
func (csc *ConnectionShopifyCreate) SetNillableRateIntegration(b *bool) *ConnectionShopifyCreate {
	if b != nil {
		csc.SetRateIntegration(*b)
	}
	return csc
}

// SetStoreURL sets the "store_url" field.
func (csc *ConnectionShopifyCreate) SetStoreURL(s string) *ConnectionShopifyCreate {
	csc.mutation.SetStoreURL(s)
	return csc
}

// SetNillableStoreURL sets the "store_url" field if the given value is not nil.
func (csc *ConnectionShopifyCreate) SetNillableStoreURL(s *string) *ConnectionShopifyCreate {
	if s != nil {
		csc.SetStoreURL(*s)
	}
	return csc
}

// SetAPIKey sets the "api_key" field.
func (csc *ConnectionShopifyCreate) SetAPIKey(s string) *ConnectionShopifyCreate {
	csc.mutation.SetAPIKey(s)
	return csc
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (csc *ConnectionShopifyCreate) SetNillableAPIKey(s *string) *ConnectionShopifyCreate {
	if s != nil {
		csc.SetAPIKey(*s)
	}
	return csc
}

// SetLookupKey sets the "lookup_key" field.
func (csc *ConnectionShopifyCreate) SetLookupKey(s string) *ConnectionShopifyCreate {
	csc.mutation.SetLookupKey(s)
	return csc
}

// SetNillableLookupKey sets the "lookup_key" field if the given value is not nil.
func (csc *ConnectionShopifyCreate) SetNillableLookupKey(s *string) *ConnectionShopifyCreate {
	if s != nil {
		csc.SetLookupKey(*s)
	}
	return csc
}

// SetSyncFrom sets the "sync_from" field.
func (csc *ConnectionShopifyCreate) SetSyncFrom(t time.Time) *ConnectionShopifyCreate {
	csc.mutation.SetSyncFrom(t)
	return csc
}

// SetNillableSyncFrom sets the "sync_from" field if the given value is not nil.
func (csc *ConnectionShopifyCreate) SetNillableSyncFrom(t *time.Time) *ConnectionShopifyCreate {
	if t != nil {
		csc.SetSyncFrom(*t)
	}
	return csc
}

// SetFilterTags sets the "filter_tags" field.
func (csc *ConnectionShopifyCreate) SetFilterTags(s []string) *ConnectionShopifyCreate {
	csc.mutation.SetFilterTags(s)
	return csc
}

// SetID sets the "id" field.
func (csc *ConnectionShopifyCreate) SetID(pu pulid.ID) *ConnectionShopifyCreate {
	csc.mutation.SetID(pu)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *ConnectionShopifyCreate) SetNillableID(pu *pulid.ID) *ConnectionShopifyCreate {
	if pu != nil {
		csc.SetID(*pu)
	}
	return csc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (csc *ConnectionShopifyCreate) SetTenant(t *Tenant) *ConnectionShopifyCreate {
	return csc.SetTenantID(t.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (csc *ConnectionShopifyCreate) SetConnectionID(id pulid.ID) *ConnectionShopifyCreate {
	csc.mutation.SetConnectionID(id)
	return csc
}

// SetConnection sets the "connection" edge to the Connection entity.
func (csc *ConnectionShopifyCreate) SetConnection(c *Connection) *ConnectionShopifyCreate {
	return csc.SetConnectionID(c.ID)
}

// Mutation returns the ConnectionShopifyMutation object of the builder.
func (csc *ConnectionShopifyCreate) Mutation() *ConnectionShopifyMutation {
	return csc.mutation
}

// Save creates the ConnectionShopify in the database.
func (csc *ConnectionShopifyCreate) Save(ctx context.Context) (*ConnectionShopify, error) {
	if err := csc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ConnectionShopifyCreate) SaveX(ctx context.Context) *ConnectionShopify {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ConnectionShopifyCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ConnectionShopifyCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ConnectionShopifyCreate) defaults() error {
	if _, ok := csc.mutation.RateIntegration(); !ok {
		v := connectionshopify.DefaultRateIntegration
		csc.mutation.SetRateIntegration(v)
	}
	if _, ok := csc.mutation.SyncFrom(); !ok {
		if connectionshopify.DefaultSyncFrom == nil {
			return fmt.Errorf("ent: uninitialized connectionshopify.DefaultSyncFrom (forgotten import ent/runtime?)")
		}
		v := connectionshopify.DefaultSyncFrom()
		csc.mutation.SetSyncFrom(v)
	}
	if _, ok := csc.mutation.FilterTags(); !ok {
		v := connectionshopify.DefaultFilterTags
		csc.mutation.SetFilterTags(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		if connectionshopify.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized connectionshopify.DefaultID (forgotten import ent/runtime?)")
		}
		v := connectionshopify.DefaultID()
		csc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (csc *ConnectionShopifyCreate) check() error {
	if _, ok := csc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ConnectionShopify.tenant_id"`)}
	}
	if _, ok := csc.mutation.RateIntegration(); !ok {
		return &ValidationError{Name: "rate_integration", err: errors.New(`ent: missing required field "ConnectionShopify.rate_integration"`)}
	}
	if len(csc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ConnectionShopify.tenant"`)}
	}
	if len(csc.mutation.ConnectionIDs()) == 0 {
		return &ValidationError{Name: "connection", err: errors.New(`ent: missing required edge "ConnectionShopify.connection"`)}
	}
	return nil
}

func (csc *ConnectionShopifyCreate) sqlSave(ctx context.Context) (*ConnectionShopify, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ConnectionShopifyCreate) createSpec() (*ConnectionShopify, *sqlgraph.CreateSpec) {
	var (
		_node = &ConnectionShopify{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(connectionshopify.Table, sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString))
	)
	_spec.OnConflict = csc.conflict
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.RateIntegration(); ok {
		_spec.SetField(connectionshopify.FieldRateIntegration, field.TypeBool, value)
		_node.RateIntegration = value
	}
	if value, ok := csc.mutation.StoreURL(); ok {
		_spec.SetField(connectionshopify.FieldStoreURL, field.TypeString, value)
		_node.StoreURL = value
	}
	if value, ok := csc.mutation.APIKey(); ok {
		_spec.SetField(connectionshopify.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := csc.mutation.LookupKey(); ok {
		_spec.SetField(connectionshopify.FieldLookupKey, field.TypeString, value)
		_node.LookupKey = value
	}
	if value, ok := csc.mutation.SyncFrom(); ok {
		_spec.SetField(connectionshopify.FieldSyncFrom, field.TypeTime, value)
		_node.SyncFrom = value
	}
	if value, ok := csc.mutation.FilterTags(); ok {
		_spec.SetField(connectionshopify.FieldFilterTags, field.TypeJSON, value)
		_node.FilterTags = value
	}
	if nodes := csc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionshopify.TenantTable,
			Columns: []string{connectionshopify.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionshopify.ConnectionTable,
			Columns: []string{connectionshopify.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_connection_shopify = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectionShopify.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionShopifyUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (csc *ConnectionShopifyCreate) OnConflict(opts ...sql.ConflictOption) *ConnectionShopifyUpsertOne {
	csc.conflict = opts
	return &ConnectionShopifyUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectionShopify.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *ConnectionShopifyCreate) OnConflictColumns(columns ...string) *ConnectionShopifyUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &ConnectionShopifyUpsertOne{
		create: csc,
	}
}

type (
	// ConnectionShopifyUpsertOne is the builder for "upsert"-ing
	//  one ConnectionShopify node.
	ConnectionShopifyUpsertOne struct {
		create *ConnectionShopifyCreate
	}

	// ConnectionShopifyUpsert is the "OnConflict" setter.
	ConnectionShopifyUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionShopifyUpsert) SetTenantID(v pulid.ID) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateTenantID() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldTenantID)
	return u
}

// SetRateIntegration sets the "rate_integration" field.
func (u *ConnectionShopifyUpsert) SetRateIntegration(v bool) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldRateIntegration, v)
	return u
}

// UpdateRateIntegration sets the "rate_integration" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateRateIntegration() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldRateIntegration)
	return u
}

// SetStoreURL sets the "store_url" field.
func (u *ConnectionShopifyUpsert) SetStoreURL(v string) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldStoreURL, v)
	return u
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateStoreURL() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldStoreURL)
	return u
}

// ClearStoreURL clears the value of the "store_url" field.
func (u *ConnectionShopifyUpsert) ClearStoreURL() *ConnectionShopifyUpsert {
	u.SetNull(connectionshopify.FieldStoreURL)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *ConnectionShopifyUpsert) SetAPIKey(v string) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateAPIKey() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldAPIKey)
	return u
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *ConnectionShopifyUpsert) ClearAPIKey() *ConnectionShopifyUpsert {
	u.SetNull(connectionshopify.FieldAPIKey)
	return u
}

// SetLookupKey sets the "lookup_key" field.
func (u *ConnectionShopifyUpsert) SetLookupKey(v string) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldLookupKey, v)
	return u
}

// UpdateLookupKey sets the "lookup_key" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateLookupKey() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldLookupKey)
	return u
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (u *ConnectionShopifyUpsert) ClearLookupKey() *ConnectionShopifyUpsert {
	u.SetNull(connectionshopify.FieldLookupKey)
	return u
}

// SetSyncFrom sets the "sync_from" field.
func (u *ConnectionShopifyUpsert) SetSyncFrom(v time.Time) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldSyncFrom, v)
	return u
}

// UpdateSyncFrom sets the "sync_from" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateSyncFrom() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldSyncFrom)
	return u
}

// ClearSyncFrom clears the value of the "sync_from" field.
func (u *ConnectionShopifyUpsert) ClearSyncFrom() *ConnectionShopifyUpsert {
	u.SetNull(connectionshopify.FieldSyncFrom)
	return u
}

// SetFilterTags sets the "filter_tags" field.
func (u *ConnectionShopifyUpsert) SetFilterTags(v []string) *ConnectionShopifyUpsert {
	u.Set(connectionshopify.FieldFilterTags, v)
	return u
}

// UpdateFilterTags sets the "filter_tags" field to the value that was provided on create.
func (u *ConnectionShopifyUpsert) UpdateFilterTags() *ConnectionShopifyUpsert {
	u.SetExcluded(connectionshopify.FieldFilterTags)
	return u
}

// ClearFilterTags clears the value of the "filter_tags" field.
func (u *ConnectionShopifyUpsert) ClearFilterTags() *ConnectionShopifyUpsert {
	u.SetNull(connectionshopify.FieldFilterTags)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ConnectionShopify.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connectionshopify.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectionShopifyUpsertOne) UpdateNewValues() *ConnectionShopifyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(connectionshopify.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectionShopify.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConnectionShopifyUpsertOne) Ignore() *ConnectionShopifyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionShopifyUpsertOne) DoNothing() *ConnectionShopifyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionShopifyCreate.OnConflict
// documentation for more info.
func (u *ConnectionShopifyUpsertOne) Update(set func(*ConnectionShopifyUpsert)) *ConnectionShopifyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionShopifyUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionShopifyUpsertOne) SetTenantID(v pulid.ID) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateTenantID() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateTenantID()
	})
}

// SetRateIntegration sets the "rate_integration" field.
func (u *ConnectionShopifyUpsertOne) SetRateIntegration(v bool) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetRateIntegration(v)
	})
}

// UpdateRateIntegration sets the "rate_integration" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateRateIntegration() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateRateIntegration()
	})
}

// SetStoreURL sets the "store_url" field.
func (u *ConnectionShopifyUpsertOne) SetStoreURL(v string) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetStoreURL(v)
	})
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateStoreURL() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateStoreURL()
	})
}

// ClearStoreURL clears the value of the "store_url" field.
func (u *ConnectionShopifyUpsertOne) ClearStoreURL() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearStoreURL()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *ConnectionShopifyUpsertOne) SetAPIKey(v string) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateAPIKey() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *ConnectionShopifyUpsertOne) ClearAPIKey() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearAPIKey()
	})
}

// SetLookupKey sets the "lookup_key" field.
func (u *ConnectionShopifyUpsertOne) SetLookupKey(v string) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetLookupKey(v)
	})
}

// UpdateLookupKey sets the "lookup_key" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateLookupKey() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateLookupKey()
	})
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (u *ConnectionShopifyUpsertOne) ClearLookupKey() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearLookupKey()
	})
}

// SetSyncFrom sets the "sync_from" field.
func (u *ConnectionShopifyUpsertOne) SetSyncFrom(v time.Time) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetSyncFrom(v)
	})
}

// UpdateSyncFrom sets the "sync_from" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateSyncFrom() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateSyncFrom()
	})
}

// ClearSyncFrom clears the value of the "sync_from" field.
func (u *ConnectionShopifyUpsertOne) ClearSyncFrom() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearSyncFrom()
	})
}

// SetFilterTags sets the "filter_tags" field.
func (u *ConnectionShopifyUpsertOne) SetFilterTags(v []string) *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetFilterTags(v)
	})
}

// UpdateFilterTags sets the "filter_tags" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertOne) UpdateFilterTags() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateFilterTags()
	})
}

// ClearFilterTags clears the value of the "filter_tags" field.
func (u *ConnectionShopifyUpsertOne) ClearFilterTags() *ConnectionShopifyUpsertOne {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearFilterTags()
	})
}

// Exec executes the query.
func (u *ConnectionShopifyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionShopifyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionShopifyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConnectionShopifyUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConnectionShopifyUpsertOne.ID is not supported by MySQL driver. Use ConnectionShopifyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConnectionShopifyUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConnectionShopifyCreateBulk is the builder for creating many ConnectionShopify entities in bulk.
type ConnectionShopifyCreateBulk struct {
	config
	err      error
	builders []*ConnectionShopifyCreate
	conflict []sql.ConflictOption
}

// Save creates the ConnectionShopify entities in the database.
func (cscb *ConnectionShopifyCreateBulk) Save(ctx context.Context) ([]*ConnectionShopify, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ConnectionShopify, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectionShopifyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ConnectionShopifyCreateBulk) SaveX(ctx context.Context) []*ConnectionShopify {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ConnectionShopifyCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ConnectionShopifyCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectionShopify.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectionShopifyUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cscb *ConnectionShopifyCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConnectionShopifyUpsertBulk {
	cscb.conflict = opts
	return &ConnectionShopifyUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectionShopify.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *ConnectionShopifyCreateBulk) OnConflictColumns(columns ...string) *ConnectionShopifyUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &ConnectionShopifyUpsertBulk{
		create: cscb,
	}
}

// ConnectionShopifyUpsertBulk is the builder for "upsert"-ing
// a bulk of ConnectionShopify nodes.
type ConnectionShopifyUpsertBulk struct {
	create *ConnectionShopifyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ConnectionShopify.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connectionshopify.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectionShopifyUpsertBulk) UpdateNewValues() *ConnectionShopifyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(connectionshopify.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectionShopify.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConnectionShopifyUpsertBulk) Ignore() *ConnectionShopifyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectionShopifyUpsertBulk) DoNothing() *ConnectionShopifyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectionShopifyCreateBulk.OnConflict
// documentation for more info.
func (u *ConnectionShopifyUpsertBulk) Update(set func(*ConnectionShopifyUpsert)) *ConnectionShopifyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectionShopifyUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConnectionShopifyUpsertBulk) SetTenantID(v pulid.ID) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateTenantID() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateTenantID()
	})
}

// SetRateIntegration sets the "rate_integration" field.
func (u *ConnectionShopifyUpsertBulk) SetRateIntegration(v bool) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetRateIntegration(v)
	})
}

// UpdateRateIntegration sets the "rate_integration" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateRateIntegration() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateRateIntegration()
	})
}

// SetStoreURL sets the "store_url" field.
func (u *ConnectionShopifyUpsertBulk) SetStoreURL(v string) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetStoreURL(v)
	})
}

// UpdateStoreURL sets the "store_url" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateStoreURL() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateStoreURL()
	})
}

// ClearStoreURL clears the value of the "store_url" field.
func (u *ConnectionShopifyUpsertBulk) ClearStoreURL() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearStoreURL()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *ConnectionShopifyUpsertBulk) SetAPIKey(v string) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateAPIKey() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *ConnectionShopifyUpsertBulk) ClearAPIKey() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearAPIKey()
	})
}

// SetLookupKey sets the "lookup_key" field.
func (u *ConnectionShopifyUpsertBulk) SetLookupKey(v string) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetLookupKey(v)
	})
}

// UpdateLookupKey sets the "lookup_key" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateLookupKey() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateLookupKey()
	})
}

// ClearLookupKey clears the value of the "lookup_key" field.
func (u *ConnectionShopifyUpsertBulk) ClearLookupKey() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearLookupKey()
	})
}

// SetSyncFrom sets the "sync_from" field.
func (u *ConnectionShopifyUpsertBulk) SetSyncFrom(v time.Time) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetSyncFrom(v)
	})
}

// UpdateSyncFrom sets the "sync_from" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateSyncFrom() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateSyncFrom()
	})
}

// ClearSyncFrom clears the value of the "sync_from" field.
func (u *ConnectionShopifyUpsertBulk) ClearSyncFrom() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearSyncFrom()
	})
}

// SetFilterTags sets the "filter_tags" field.
func (u *ConnectionShopifyUpsertBulk) SetFilterTags(v []string) *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.SetFilterTags(v)
	})
}

// UpdateFilterTags sets the "filter_tags" field to the value that was provided on create.
func (u *ConnectionShopifyUpsertBulk) UpdateFilterTags() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.UpdateFilterTags()
	})
}

// ClearFilterTags clears the value of the "filter_tags" field.
func (u *ConnectionShopifyUpsertBulk) ClearFilterTags() *ConnectionShopifyUpsertBulk {
	return u.Update(func(s *ConnectionShopifyUpsert) {
		s.ClearFilterTags()
	})
}

// Exec executes the query.
func (u *ConnectionShopifyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConnectionShopifyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectionShopifyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectionShopifyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
