// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConnectionShopify is the model entity for the ConnectionShopify schema.
type ConnectionShopify struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Since certain plans don't allow for external rates
	RateIntegration bool `json:"rate_integration,omitempty"`
	// StoreURL holds the value of the "store_url" field.
	StoreURL string `json:"store_url,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// Used for token-authenticating Shopify rate lookups
	LookupKey string `json:"lookup_key,omitempty"`
	// SyncFrom holds the value of the "sync_from" field.
	SyncFrom time.Time `json:"sync_from,omitempty"`
	// When set, only orders with these tags will be synchronized. Supports a
	FilterTags []string `json:"filter_tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionShopifyQuery when eager-loading is set.
	Edges                         ConnectionShopifyEdges `json:"edges"`
	connection_connection_shopify *pulid.ID
	selectValues                  sql.SelectValues
}

// ConnectionShopifyEdges holds the relations/edges for other nodes in the graph.
type ConnectionShopifyEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Connection holds the value of the connection edge.
	Connection *Connection `json:"connection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionShopifyEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionShopifyEdges) ConnectionOrErr() (*Connection, error) {
	if e.Connection != nil {
		return e.Connection, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConnectionShopify) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connectionshopify.FieldFilterTags:
			values[i] = new([]byte)
		case connectionshopify.FieldID, connectionshopify.FieldTenantID:
			values[i] = new(pulid.ID)
		case connectionshopify.FieldRateIntegration:
			values[i] = new(sql.NullBool)
		case connectionshopify.FieldStoreURL, connectionshopify.FieldAPIKey, connectionshopify.FieldLookupKey:
			values[i] = new(sql.NullString)
		case connectionshopify.FieldSyncFrom:
			values[i] = new(sql.NullTime)
		case connectionshopify.ForeignKeys[0]: // connection_connection_shopify
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConnectionShopify fields.
func (cs *ConnectionShopify) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connectionshopify.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case connectionshopify.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				cs.TenantID = *value
			}
		case connectionshopify.FieldRateIntegration:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rate_integration", values[i])
			} else if value.Valid {
				cs.RateIntegration = value.Bool
			}
		case connectionshopify.FieldStoreURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_url", values[i])
			} else if value.Valid {
				cs.StoreURL = value.String
			}
		case connectionshopify.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				cs.APIKey = value.String
			}
		case connectionshopify.FieldLookupKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lookup_key", values[i])
			} else if value.Valid {
				cs.LookupKey = value.String
			}
		case connectionshopify.FieldSyncFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sync_from", values[i])
			} else if value.Valid {
				cs.SyncFrom = value.Time
			}
		case connectionshopify.FieldFilterTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field filter_tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cs.FilterTags); err != nil {
					return fmt.Errorf("unmarshal field filter_tags: %w", err)
				}
			}
		case connectionshopify.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field connection_connection_shopify", values[i])
			} else if value.Valid {
				cs.connection_connection_shopify = new(pulid.ID)
				*cs.connection_connection_shopify = *value.S.(*pulid.ID)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConnectionShopify.
// This includes values selected through modifiers, order, etc.
func (cs *ConnectionShopify) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ConnectionShopify entity.
func (cs *ConnectionShopify) QueryTenant() *TenantQuery {
	return NewConnectionShopifyClient(cs.config).QueryTenant(cs)
}

// QueryConnection queries the "connection" edge of the ConnectionShopify entity.
func (cs *ConnectionShopify) QueryConnection() *ConnectionQuery {
	return NewConnectionShopifyClient(cs.config).QueryConnection(cs)
}

// Update returns a builder for updating this ConnectionShopify.
// Note that you need to call ConnectionShopify.Unwrap() before calling this method if this ConnectionShopify
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ConnectionShopify) Update() *ConnectionShopifyUpdateOne {
	return NewConnectionShopifyClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ConnectionShopify entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ConnectionShopify) Unwrap() *ConnectionShopify {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConnectionShopify is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ConnectionShopify) String() string {
	var builder strings.Builder
	builder.WriteString("ConnectionShopify(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.TenantID))
	builder.WriteString(", ")
	builder.WriteString("rate_integration=")
	builder.WriteString(fmt.Sprintf("%v", cs.RateIntegration))
	builder.WriteString(", ")
	builder.WriteString("store_url=")
	builder.WriteString(cs.StoreURL)
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(cs.APIKey)
	builder.WriteString(", ")
	builder.WriteString("lookup_key=")
	builder.WriteString(cs.LookupKey)
	builder.WriteString(", ")
	builder.WriteString("sync_from=")
	builder.WriteString(cs.SyncFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("filter_tags=")
	builder.WriteString(fmt.Sprintf("%v", cs.FilterTags))
	builder.WriteByte(')')
	return builder.String()
}

// ConnectionShopifies is a parsable slice of ConnectionShopify.
type ConnectionShopifies []*ConnectionShopify
