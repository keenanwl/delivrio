// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleConstraintGroupUpdate is the builder for updating DeliveryRuleConstraintGroup entities.
type DeliveryRuleConstraintGroupUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryRuleConstraintGroupMutation
}

// Where appends a list predicates to the DeliveryRuleConstraintGroupUpdate builder.
func (drcgu *DeliveryRuleConstraintGroupUpdate) Where(ps ...predicate.DeliveryRuleConstraintGroup) *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.Where(ps...)
	return drcgu
}

// SetTenantID sets the "tenant_id" field.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetTenantID(pu pulid.ID) *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.SetTenantID(pu)
	return drcgu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryRuleConstraintGroupUpdate {
	if pu != nil {
		drcgu.SetTenantID(*pu)
	}
	return drcgu
}

// SetConstraintLogic sets the "constraint_logic" field.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetConstraintLogic(dl deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.SetConstraintLogic(dl)
	return drcgu
}

// SetNillableConstraintLogic sets the "constraint_logic" field if the given value is not nil.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetNillableConstraintLogic(dl *deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpdate {
	if dl != nil {
		drcgu.SetConstraintLogic(*dl)
	}
	return drcgu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetTenant(t *Tenant) *DeliveryRuleConstraintGroupUpdate {
	return drcgu.SetTenantID(t.ID)
}

// AddDeliveryRuleConstraintIDs adds the "delivery_rule_constraints" edge to the DeliveryRuleConstraint entity by IDs.
func (drcgu *DeliveryRuleConstraintGroupUpdate) AddDeliveryRuleConstraintIDs(ids ...pulid.ID) *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.AddDeliveryRuleConstraintIDs(ids...)
	return drcgu
}

// AddDeliveryRuleConstraints adds the "delivery_rule_constraints" edges to the DeliveryRuleConstraint entity.
func (drcgu *DeliveryRuleConstraintGroupUpdate) AddDeliveryRuleConstraints(d ...*DeliveryRuleConstraint) *DeliveryRuleConstraintGroupUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drcgu.AddDeliveryRuleConstraintIDs(ids...)
}

// SetDeliveryRuleID sets the "delivery_rule" edge to the DeliveryRule entity by ID.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetDeliveryRuleID(id pulid.ID) *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.SetDeliveryRuleID(id)
	return drcgu
}

// SetDeliveryRule sets the "delivery_rule" edge to the DeliveryRule entity.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SetDeliveryRule(d *DeliveryRule) *DeliveryRuleConstraintGroupUpdate {
	return drcgu.SetDeliveryRuleID(d.ID)
}

// Mutation returns the DeliveryRuleConstraintGroupMutation object of the builder.
func (drcgu *DeliveryRuleConstraintGroupUpdate) Mutation() *DeliveryRuleConstraintGroupMutation {
	return drcgu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (drcgu *DeliveryRuleConstraintGroupUpdate) ClearTenant() *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.ClearTenant()
	return drcgu
}

// ClearDeliveryRuleConstraints clears all "delivery_rule_constraints" edges to the DeliveryRuleConstraint entity.
func (drcgu *DeliveryRuleConstraintGroupUpdate) ClearDeliveryRuleConstraints() *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.ClearDeliveryRuleConstraints()
	return drcgu
}

// RemoveDeliveryRuleConstraintIDs removes the "delivery_rule_constraints" edge to DeliveryRuleConstraint entities by IDs.
func (drcgu *DeliveryRuleConstraintGroupUpdate) RemoveDeliveryRuleConstraintIDs(ids ...pulid.ID) *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.RemoveDeliveryRuleConstraintIDs(ids...)
	return drcgu
}

// RemoveDeliveryRuleConstraints removes "delivery_rule_constraints" edges to DeliveryRuleConstraint entities.
func (drcgu *DeliveryRuleConstraintGroupUpdate) RemoveDeliveryRuleConstraints(d ...*DeliveryRuleConstraint) *DeliveryRuleConstraintGroupUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drcgu.RemoveDeliveryRuleConstraintIDs(ids...)
}

// ClearDeliveryRule clears the "delivery_rule" edge to the DeliveryRule entity.
func (drcgu *DeliveryRuleConstraintGroupUpdate) ClearDeliveryRule() *DeliveryRuleConstraintGroupUpdate {
	drcgu.mutation.ClearDeliveryRule()
	return drcgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (drcgu *DeliveryRuleConstraintGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, drcgu.sqlSave, drcgu.mutation, drcgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drcgu *DeliveryRuleConstraintGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := drcgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (drcgu *DeliveryRuleConstraintGroupUpdate) Exec(ctx context.Context) error {
	_, err := drcgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcgu *DeliveryRuleConstraintGroupUpdate) ExecX(ctx context.Context) {
	if err := drcgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drcgu *DeliveryRuleConstraintGroupUpdate) check() error {
	if v, ok := drcgu.mutation.ConstraintLogic(); ok {
		if err := deliveryruleconstraintgroup.ConstraintLogicValidator(v); err != nil {
			return &ValidationError{Name: "constraint_logic", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraintGroup.constraint_logic": %w`, err)}
		}
	}
	if drcgu.mutation.TenantCleared() && len(drcgu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraintGroup.tenant"`)
	}
	if drcgu.mutation.DeliveryRuleCleared() && len(drcgu.mutation.DeliveryRuleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraintGroup.delivery_rule"`)
	}
	return nil
}

func (drcgu *DeliveryRuleConstraintGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := drcgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.Columns, sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString))
	if ps := drcgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drcgu.mutation.ConstraintLogic(); ok {
		_spec.SetField(deliveryruleconstraintgroup.FieldConstraintLogic, field.TypeEnum, value)
	}
	if drcgu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.TenantTable,
			Columns: []string{deliveryruleconstraintgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcgu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.TenantTable,
			Columns: []string{deliveryruleconstraintgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if drcgu.mutation.DeliveryRuleConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcgu.mutation.RemovedDeliveryRuleConstraintsIDs(); len(nodes) > 0 && !drcgu.mutation.DeliveryRuleConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcgu.mutation.DeliveryRuleConstraintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if drcgu.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraintgroup.DeliveryRuleTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcgu.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraintgroup.DeliveryRuleTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, drcgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryruleconstraintgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	drcgu.mutation.done = true
	return n, nil
}

// DeliveryRuleConstraintGroupUpdateOne is the builder for updating a single DeliveryRuleConstraintGroup entity.
type DeliveryRuleConstraintGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryRuleConstraintGroupMutation
}

// SetTenantID sets the "tenant_id" field.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetTenantID(pu pulid.ID) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.SetTenantID(pu)
	return drcguo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryRuleConstraintGroupUpdateOne {
	if pu != nil {
		drcguo.SetTenantID(*pu)
	}
	return drcguo
}

// SetConstraintLogic sets the "constraint_logic" field.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetConstraintLogic(dl deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.SetConstraintLogic(dl)
	return drcguo
}

// SetNillableConstraintLogic sets the "constraint_logic" field if the given value is not nil.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetNillableConstraintLogic(dl *deliveryruleconstraintgroup.ConstraintLogic) *DeliveryRuleConstraintGroupUpdateOne {
	if dl != nil {
		drcguo.SetConstraintLogic(*dl)
	}
	return drcguo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetTenant(t *Tenant) *DeliveryRuleConstraintGroupUpdateOne {
	return drcguo.SetTenantID(t.ID)
}

// AddDeliveryRuleConstraintIDs adds the "delivery_rule_constraints" edge to the DeliveryRuleConstraint entity by IDs.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) AddDeliveryRuleConstraintIDs(ids ...pulid.ID) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.AddDeliveryRuleConstraintIDs(ids...)
	return drcguo
}

// AddDeliveryRuleConstraints adds the "delivery_rule_constraints" edges to the DeliveryRuleConstraint entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) AddDeliveryRuleConstraints(d ...*DeliveryRuleConstraint) *DeliveryRuleConstraintGroupUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drcguo.AddDeliveryRuleConstraintIDs(ids...)
}

// SetDeliveryRuleID sets the "delivery_rule" edge to the DeliveryRule entity by ID.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetDeliveryRuleID(id pulid.ID) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.SetDeliveryRuleID(id)
	return drcguo
}

// SetDeliveryRule sets the "delivery_rule" edge to the DeliveryRule entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SetDeliveryRule(d *DeliveryRule) *DeliveryRuleConstraintGroupUpdateOne {
	return drcguo.SetDeliveryRuleID(d.ID)
}

// Mutation returns the DeliveryRuleConstraintGroupMutation object of the builder.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) Mutation() *DeliveryRuleConstraintGroupMutation {
	return drcguo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) ClearTenant() *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.ClearTenant()
	return drcguo
}

// ClearDeliveryRuleConstraints clears all "delivery_rule_constraints" edges to the DeliveryRuleConstraint entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) ClearDeliveryRuleConstraints() *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.ClearDeliveryRuleConstraints()
	return drcguo
}

// RemoveDeliveryRuleConstraintIDs removes the "delivery_rule_constraints" edge to DeliveryRuleConstraint entities by IDs.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) RemoveDeliveryRuleConstraintIDs(ids ...pulid.ID) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.RemoveDeliveryRuleConstraintIDs(ids...)
	return drcguo
}

// RemoveDeliveryRuleConstraints removes "delivery_rule_constraints" edges to DeliveryRuleConstraint entities.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) RemoveDeliveryRuleConstraints(d ...*DeliveryRuleConstraint) *DeliveryRuleConstraintGroupUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return drcguo.RemoveDeliveryRuleConstraintIDs(ids...)
}

// ClearDeliveryRule clears the "delivery_rule" edge to the DeliveryRule entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) ClearDeliveryRule() *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.ClearDeliveryRule()
	return drcguo
}

// Where appends a list predicates to the DeliveryRuleConstraintGroupUpdate builder.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) Where(ps ...predicate.DeliveryRuleConstraintGroup) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.mutation.Where(ps...)
	return drcguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) Select(field string, fields ...string) *DeliveryRuleConstraintGroupUpdateOne {
	drcguo.fields = append([]string{field}, fields...)
	return drcguo
}

// Save executes the query and returns the updated DeliveryRuleConstraintGroup entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) Save(ctx context.Context) (*DeliveryRuleConstraintGroup, error) {
	return withHooks(ctx, drcguo.sqlSave, drcguo.mutation, drcguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) SaveX(ctx context.Context) *DeliveryRuleConstraintGroup {
	node, err := drcguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := drcguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) ExecX(ctx context.Context) {
	if err := drcguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drcguo *DeliveryRuleConstraintGroupUpdateOne) check() error {
	if v, ok := drcguo.mutation.ConstraintLogic(); ok {
		if err := deliveryruleconstraintgroup.ConstraintLogicValidator(v); err != nil {
			return &ValidationError{Name: "constraint_logic", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraintGroup.constraint_logic": %w`, err)}
		}
	}
	if drcguo.mutation.TenantCleared() && len(drcguo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraintGroup.tenant"`)
	}
	if drcguo.mutation.DeliveryRuleCleared() && len(drcguo.mutation.DeliveryRuleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRuleConstraintGroup.delivery_rule"`)
	}
	return nil
}

func (drcguo *DeliveryRuleConstraintGroupUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryRuleConstraintGroup, err error) {
	if err := drcguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.Columns, sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString))
	id, ok := drcguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryRuleConstraintGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := drcguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryruleconstraintgroup.FieldID)
		for _, f := range fields {
			if !deliveryruleconstraintgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryruleconstraintgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := drcguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := drcguo.mutation.ConstraintLogic(); ok {
		_spec.SetField(deliveryruleconstraintgroup.FieldConstraintLogic, field.TypeEnum, value)
	}
	if drcguo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.TenantTable,
			Columns: []string{deliveryruleconstraintgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcguo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.TenantTable,
			Columns: []string{deliveryruleconstraintgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if drcguo.mutation.DeliveryRuleConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcguo.mutation.RemovedDeliveryRuleConstraintsIDs(); len(nodes) > 0 && !drcguo.mutation.DeliveryRuleConstraintsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcguo.mutation.DeliveryRuleConstraintsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if drcguo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraintgroup.DeliveryRuleTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := drcguo.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraintgroup.DeliveryRuleTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryRuleConstraintGroup{config: drcguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, drcguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryruleconstraintgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	drcguo.mutation.done = true
	return _node, nil
}
