// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceBringUpdate is the builder for updating CarrierAdditionalServiceBring entities.
type CarrierAdditionalServiceBringUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceBringMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceBringUpdate builder.
func (casbu *CarrierAdditionalServiceBringUpdate) Where(ps ...predicate.CarrierAdditionalServiceBring) *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.Where(ps...)
	return casbu
}

// SetLabel sets the "label" field.
func (casbu *CarrierAdditionalServiceBringUpdate) SetLabel(s string) *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.SetLabel(s)
	return casbu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casbu *CarrierAdditionalServiceBringUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceBringUpdate {
	if s != nil {
		casbu.SetLabel(*s)
	}
	return casbu
}

// SetAPICodeBooking sets the "api_code_booking" field.
func (casbu *CarrierAdditionalServiceBringUpdate) SetAPICodeBooking(s string) *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.SetAPICodeBooking(s)
	return casbu
}

// SetNillableAPICodeBooking sets the "api_code_booking" field if the given value is not nil.
func (casbu *CarrierAdditionalServiceBringUpdate) SetNillableAPICodeBooking(s *string) *CarrierAdditionalServiceBringUpdate {
	if s != nil {
		casbu.SetAPICodeBooking(*s)
	}
	return casbu
}

// SetCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID.
func (casbu *CarrierAdditionalServiceBringUpdate) SetCarrierServiceBringID(id pulid.ID) *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.SetCarrierServiceBringID(id)
	return casbu
}

// SetNillableCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID if the given value is not nil.
func (casbu *CarrierAdditionalServiceBringUpdate) SetNillableCarrierServiceBringID(id *pulid.ID) *CarrierAdditionalServiceBringUpdate {
	if id != nil {
		casbu = casbu.SetCarrierServiceBringID(*id)
	}
	return casbu
}

// SetCarrierServiceBring sets the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (casbu *CarrierAdditionalServiceBringUpdate) SetCarrierServiceBring(c *CarrierServiceBring) *CarrierAdditionalServiceBringUpdate {
	return casbu.SetCarrierServiceBringID(c.ID)
}

// AddDeliveryOptionBringIDs adds the "delivery_option_bring" edge to the DeliveryOptionBring entity by IDs.
func (casbu *CarrierAdditionalServiceBringUpdate) AddDeliveryOptionBringIDs(ids ...pulid.ID) *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.AddDeliveryOptionBringIDs(ids...)
	return casbu
}

// AddDeliveryOptionBring adds the "delivery_option_bring" edges to the DeliveryOptionBring entity.
func (casbu *CarrierAdditionalServiceBringUpdate) AddDeliveryOptionBring(d ...*DeliveryOptionBring) *CarrierAdditionalServiceBringUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casbu.AddDeliveryOptionBringIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceBringMutation object of the builder.
func (casbu *CarrierAdditionalServiceBringUpdate) Mutation() *CarrierAdditionalServiceBringMutation {
	return casbu.mutation
}

// ClearCarrierServiceBring clears the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (casbu *CarrierAdditionalServiceBringUpdate) ClearCarrierServiceBring() *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.ClearCarrierServiceBring()
	return casbu
}

// ClearDeliveryOptionBring clears all "delivery_option_bring" edges to the DeliveryOptionBring entity.
func (casbu *CarrierAdditionalServiceBringUpdate) ClearDeliveryOptionBring() *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.ClearDeliveryOptionBring()
	return casbu
}

// RemoveDeliveryOptionBringIDs removes the "delivery_option_bring" edge to DeliveryOptionBring entities by IDs.
func (casbu *CarrierAdditionalServiceBringUpdate) RemoveDeliveryOptionBringIDs(ids ...pulid.ID) *CarrierAdditionalServiceBringUpdate {
	casbu.mutation.RemoveDeliveryOptionBringIDs(ids...)
	return casbu
}

// RemoveDeliveryOptionBring removes "delivery_option_bring" edges to DeliveryOptionBring entities.
func (casbu *CarrierAdditionalServiceBringUpdate) RemoveDeliveryOptionBring(d ...*DeliveryOptionBring) *CarrierAdditionalServiceBringUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casbu.RemoveDeliveryOptionBringIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casbu *CarrierAdditionalServiceBringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casbu.sqlSave, casbu.mutation, casbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casbu *CarrierAdditionalServiceBringUpdate) SaveX(ctx context.Context) int {
	affected, err := casbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casbu *CarrierAdditionalServiceBringUpdate) Exec(ctx context.Context) error {
	_, err := casbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casbu *CarrierAdditionalServiceBringUpdate) ExecX(ctx context.Context) {
	if err := casbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casbu *CarrierAdditionalServiceBringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicebring.Table, carrieradditionalservicebring.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString))
	if ps := casbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casbu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicebring.FieldLabel, field.TypeString, value)
	}
	if value, ok := casbu.mutation.APICodeBooking(); ok {
		_spec.SetField(carrieradditionalservicebring.FieldAPICodeBooking, field.TypeString, value)
	}
	if casbu.mutation.CarrierServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicebring.CarrierServiceBringTable,
			Columns: []string{carrieradditionalservicebring.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casbu.mutation.CarrierServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicebring.CarrierServiceBringTable,
			Columns: []string{carrieradditionalservicebring.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casbu.mutation.DeliveryOptionBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casbu.mutation.RemovedDeliveryOptionBringIDs(); len(nodes) > 0 && !casbu.mutation.DeliveryOptionBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casbu.mutation.DeliveryOptionBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicebring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casbu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceBringUpdateOne is the builder for updating a single CarrierAdditionalServiceBring entity.
type CarrierAdditionalServiceBringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceBringMutation
}

// SetLabel sets the "label" field.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetLabel(s string) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.SetLabel(s)
	return casbuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceBringUpdateOne {
	if s != nil {
		casbuo.SetLabel(*s)
	}
	return casbuo
}

// SetAPICodeBooking sets the "api_code_booking" field.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetAPICodeBooking(s string) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.SetAPICodeBooking(s)
	return casbuo
}

// SetNillableAPICodeBooking sets the "api_code_booking" field if the given value is not nil.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetNillableAPICodeBooking(s *string) *CarrierAdditionalServiceBringUpdateOne {
	if s != nil {
		casbuo.SetAPICodeBooking(*s)
	}
	return casbuo
}

// SetCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetCarrierServiceBringID(id pulid.ID) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.SetCarrierServiceBringID(id)
	return casbuo
}

// SetNillableCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID if the given value is not nil.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetNillableCarrierServiceBringID(id *pulid.ID) *CarrierAdditionalServiceBringUpdateOne {
	if id != nil {
		casbuo = casbuo.SetCarrierServiceBringID(*id)
	}
	return casbuo
}

// SetCarrierServiceBring sets the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SetCarrierServiceBring(c *CarrierServiceBring) *CarrierAdditionalServiceBringUpdateOne {
	return casbuo.SetCarrierServiceBringID(c.ID)
}

// AddDeliveryOptionBringIDs adds the "delivery_option_bring" edge to the DeliveryOptionBring entity by IDs.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) AddDeliveryOptionBringIDs(ids ...pulid.ID) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.AddDeliveryOptionBringIDs(ids...)
	return casbuo
}

// AddDeliveryOptionBring adds the "delivery_option_bring" edges to the DeliveryOptionBring entity.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) AddDeliveryOptionBring(d ...*DeliveryOptionBring) *CarrierAdditionalServiceBringUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casbuo.AddDeliveryOptionBringIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceBringMutation object of the builder.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) Mutation() *CarrierAdditionalServiceBringMutation {
	return casbuo.mutation
}

// ClearCarrierServiceBring clears the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) ClearCarrierServiceBring() *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.ClearCarrierServiceBring()
	return casbuo
}

// ClearDeliveryOptionBring clears all "delivery_option_bring" edges to the DeliveryOptionBring entity.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) ClearDeliveryOptionBring() *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.ClearDeliveryOptionBring()
	return casbuo
}

// RemoveDeliveryOptionBringIDs removes the "delivery_option_bring" edge to DeliveryOptionBring entities by IDs.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) RemoveDeliveryOptionBringIDs(ids ...pulid.ID) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.RemoveDeliveryOptionBringIDs(ids...)
	return casbuo
}

// RemoveDeliveryOptionBring removes "delivery_option_bring" edges to DeliveryOptionBring entities.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) RemoveDeliveryOptionBring(d ...*DeliveryOptionBring) *CarrierAdditionalServiceBringUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casbuo.RemoveDeliveryOptionBringIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceBringUpdate builder.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceBring) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.mutation.Where(ps...)
	return casbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceBringUpdateOne {
	casbuo.fields = append([]string{field}, fields...)
	return casbuo
}

// Save executes the query and returns the updated CarrierAdditionalServiceBring entity.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceBring, error) {
	return withHooks(ctx, casbuo.sqlSave, casbuo.mutation, casbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceBring {
	node, err := casbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) Exec(ctx context.Context) error {
	_, err := casbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casbuo *CarrierAdditionalServiceBringUpdateOne) ExecX(ctx context.Context) {
	if err := casbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casbuo *CarrierAdditionalServiceBringUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceBring, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicebring.Table, carrieradditionalservicebring.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString))
	id, ok := casbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceBring.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicebring.FieldID)
		for _, f := range fields {
			if !carrieradditionalservicebring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalservicebring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casbuo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicebring.FieldLabel, field.TypeString, value)
	}
	if value, ok := casbuo.mutation.APICodeBooking(); ok {
		_spec.SetField(carrieradditionalservicebring.FieldAPICodeBooking, field.TypeString, value)
	}
	if casbuo.mutation.CarrierServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicebring.CarrierServiceBringTable,
			Columns: []string{carrieradditionalservicebring.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casbuo.mutation.CarrierServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicebring.CarrierServiceBringTable,
			Columns: []string{carrieradditionalservicebring.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casbuo.mutation.DeliveryOptionBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casbuo.mutation.RemovedDeliveryOptionBringIDs(); len(nodes) > 0 && !casbuo.mutation.DeliveryOptionBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casbuo.mutation.DeliveryOptionBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceBring{config: casbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicebring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casbuo.mutation.done = true
	return _node, nil
}
