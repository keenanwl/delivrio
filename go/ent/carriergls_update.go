// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierGLSUpdate is the builder for updating CarrierGLS entities.
type CarrierGLSUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierGLSMutation
}

// Where appends a list predicates to the CarrierGLSUpdate builder.
func (cgu *CarrierGLSUpdate) Where(ps ...predicate.CarrierGLS) *CarrierGLSUpdate {
	cgu.mutation.Where(ps...)
	return cgu
}

// SetTenantID sets the "tenant_id" field.
func (cgu *CarrierGLSUpdate) SetTenantID(pu pulid.ID) *CarrierGLSUpdate {
	cgu.mutation.SetTenantID(pu)
	return cgu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierGLSUpdate {
	if pu != nil {
		cgu.SetTenantID(*pu)
	}
	return cgu
}

// SetContactID sets the "contact_id" field.
func (cgu *CarrierGLSUpdate) SetContactID(s string) *CarrierGLSUpdate {
	cgu.mutation.SetContactID(s)
	return cgu
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableContactID(s *string) *CarrierGLSUpdate {
	if s != nil {
		cgu.SetContactID(*s)
	}
	return cgu
}

// ClearContactID clears the value of the "contact_id" field.
func (cgu *CarrierGLSUpdate) ClearContactID() *CarrierGLSUpdate {
	cgu.mutation.ClearContactID()
	return cgu
}

// SetGLSUsername sets the "gls_username" field.
func (cgu *CarrierGLSUpdate) SetGLSUsername(s string) *CarrierGLSUpdate {
	cgu.mutation.SetGLSUsername(s)
	return cgu
}

// SetNillableGLSUsername sets the "gls_username" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableGLSUsername(s *string) *CarrierGLSUpdate {
	if s != nil {
		cgu.SetGLSUsername(*s)
	}
	return cgu
}

// ClearGLSUsername clears the value of the "gls_username" field.
func (cgu *CarrierGLSUpdate) ClearGLSUsername() *CarrierGLSUpdate {
	cgu.mutation.ClearGLSUsername()
	return cgu
}

// SetGLSPassword sets the "gls_password" field.
func (cgu *CarrierGLSUpdate) SetGLSPassword(s string) *CarrierGLSUpdate {
	cgu.mutation.SetGLSPassword(s)
	return cgu
}

// SetNillableGLSPassword sets the "gls_password" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableGLSPassword(s *string) *CarrierGLSUpdate {
	if s != nil {
		cgu.SetGLSPassword(*s)
	}
	return cgu
}

// ClearGLSPassword clears the value of the "gls_password" field.
func (cgu *CarrierGLSUpdate) ClearGLSPassword() *CarrierGLSUpdate {
	cgu.mutation.ClearGLSPassword()
	return cgu
}

// SetCustomerID sets the "customer_id" field.
func (cgu *CarrierGLSUpdate) SetCustomerID(s string) *CarrierGLSUpdate {
	cgu.mutation.SetCustomerID(s)
	return cgu
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableCustomerID(s *string) *CarrierGLSUpdate {
	if s != nil {
		cgu.SetCustomerID(*s)
	}
	return cgu
}

// ClearCustomerID clears the value of the "customer_id" field.
func (cgu *CarrierGLSUpdate) ClearCustomerID() *CarrierGLSUpdate {
	cgu.mutation.ClearCustomerID()
	return cgu
}

// SetGLSCountryCode sets the "gls_country_code" field.
func (cgu *CarrierGLSUpdate) SetGLSCountryCode(s string) *CarrierGLSUpdate {
	cgu.mutation.SetGLSCountryCode(s)
	return cgu
}

// SetNillableGLSCountryCode sets the "gls_country_code" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableGLSCountryCode(s *string) *CarrierGLSUpdate {
	if s != nil {
		cgu.SetGLSCountryCode(*s)
	}
	return cgu
}

// ClearGLSCountryCode clears the value of the "gls_country_code" field.
func (cgu *CarrierGLSUpdate) ClearGLSCountryCode() *CarrierGLSUpdate {
	cgu.mutation.ClearGLSCountryCode()
	return cgu
}

// SetSyncShipmentCancellation sets the "sync_shipment_cancellation" field.
func (cgu *CarrierGLSUpdate) SetSyncShipmentCancellation(b bool) *CarrierGLSUpdate {
	cgu.mutation.SetSyncShipmentCancellation(b)
	return cgu
}

// SetNillableSyncShipmentCancellation sets the "sync_shipment_cancellation" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillableSyncShipmentCancellation(b *bool) *CarrierGLSUpdate {
	if b != nil {
		cgu.SetSyncShipmentCancellation(*b)
	}
	return cgu
}

// ClearSyncShipmentCancellation clears the value of the "sync_shipment_cancellation" field.
func (cgu *CarrierGLSUpdate) ClearSyncShipmentCancellation() *CarrierGLSUpdate {
	cgu.mutation.ClearSyncShipmentCancellation()
	return cgu
}

// SetPrintErrorOnLabel sets the "print_error_on_label" field.
func (cgu *CarrierGLSUpdate) SetPrintErrorOnLabel(b bool) *CarrierGLSUpdate {
	cgu.mutation.SetPrintErrorOnLabel(b)
	return cgu
}

// SetNillablePrintErrorOnLabel sets the "print_error_on_label" field if the given value is not nil.
func (cgu *CarrierGLSUpdate) SetNillablePrintErrorOnLabel(b *bool) *CarrierGLSUpdate {
	if b != nil {
		cgu.SetPrintErrorOnLabel(*b)
	}
	return cgu
}

// ClearPrintErrorOnLabel clears the value of the "print_error_on_label" field.
func (cgu *CarrierGLSUpdate) ClearPrintErrorOnLabel() *CarrierGLSUpdate {
	cgu.mutation.ClearPrintErrorOnLabel()
	return cgu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cgu *CarrierGLSUpdate) SetTenant(t *Tenant) *CarrierGLSUpdate {
	return cgu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cgu *CarrierGLSUpdate) SetCarrierID(id pulid.ID) *CarrierGLSUpdate {
	cgu.mutation.SetCarrierID(id)
	return cgu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cgu *CarrierGLSUpdate) SetCarrier(c *Carrier) *CarrierGLSUpdate {
	return cgu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierGLSMutation object of the builder.
func (cgu *CarrierGLSUpdate) Mutation() *CarrierGLSMutation {
	return cgu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cgu *CarrierGLSUpdate) ClearTenant() *CarrierGLSUpdate {
	cgu.mutation.ClearTenant()
	return cgu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cgu *CarrierGLSUpdate) ClearCarrier() *CarrierGLSUpdate {
	cgu.mutation.ClearCarrier()
	return cgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cgu *CarrierGLSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cgu.sqlSave, cgu.mutation, cgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cgu *CarrierGLSUpdate) SaveX(ctx context.Context) int {
	affected, err := cgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cgu *CarrierGLSUpdate) Exec(ctx context.Context) error {
	_, err := cgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgu *CarrierGLSUpdate) ExecX(ctx context.Context) {
	if err := cgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cgu *CarrierGLSUpdate) check() error {
	if cgu.mutation.TenantCleared() && len(cgu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierGLS.tenant"`)
	}
	if cgu.mutation.CarrierCleared() && len(cgu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierGLS.carrier"`)
	}
	return nil
}

func (cgu *CarrierGLSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carriergls.Table, carriergls.Columns, sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString))
	if ps := cgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cgu.mutation.ContactID(); ok {
		_spec.SetField(carriergls.FieldContactID, field.TypeString, value)
	}
	if cgu.mutation.ContactIDCleared() {
		_spec.ClearField(carriergls.FieldContactID, field.TypeString)
	}
	if value, ok := cgu.mutation.GLSUsername(); ok {
		_spec.SetField(carriergls.FieldGLSUsername, field.TypeString, value)
	}
	if cgu.mutation.GLSUsernameCleared() {
		_spec.ClearField(carriergls.FieldGLSUsername, field.TypeString)
	}
	if value, ok := cgu.mutation.GLSPassword(); ok {
		_spec.SetField(carriergls.FieldGLSPassword, field.TypeString, value)
	}
	if cgu.mutation.GLSPasswordCleared() {
		_spec.ClearField(carriergls.FieldGLSPassword, field.TypeString)
	}
	if value, ok := cgu.mutation.CustomerID(); ok {
		_spec.SetField(carriergls.FieldCustomerID, field.TypeString, value)
	}
	if cgu.mutation.CustomerIDCleared() {
		_spec.ClearField(carriergls.FieldCustomerID, field.TypeString)
	}
	if value, ok := cgu.mutation.GLSCountryCode(); ok {
		_spec.SetField(carriergls.FieldGLSCountryCode, field.TypeString, value)
	}
	if cgu.mutation.GLSCountryCodeCleared() {
		_spec.ClearField(carriergls.FieldGLSCountryCode, field.TypeString)
	}
	if value, ok := cgu.mutation.SyncShipmentCancellation(); ok {
		_spec.SetField(carriergls.FieldSyncShipmentCancellation, field.TypeBool, value)
	}
	if cgu.mutation.SyncShipmentCancellationCleared() {
		_spec.ClearField(carriergls.FieldSyncShipmentCancellation, field.TypeBool)
	}
	if value, ok := cgu.mutation.PrintErrorOnLabel(); ok {
		_spec.SetField(carriergls.FieldPrintErrorOnLabel, field.TypeBool, value)
	}
	if cgu.mutation.PrintErrorOnLabelCleared() {
		_spec.ClearField(carriergls.FieldPrintErrorOnLabel, field.TypeBool)
	}
	if cgu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriergls.TenantTable,
			Columns: []string{carriergls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriergls.TenantTable,
			Columns: []string{carriergls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cgu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriergls.CarrierTable,
			Columns: []string{carriergls.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cgu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriergls.CarrierTable,
			Columns: []string{carriergls.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carriergls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cgu.mutation.done = true
	return n, nil
}

// CarrierGLSUpdateOne is the builder for updating a single CarrierGLS entity.
type CarrierGLSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierGLSMutation
}

// SetTenantID sets the "tenant_id" field.
func (cguo *CarrierGLSUpdateOne) SetTenantID(pu pulid.ID) *CarrierGLSUpdateOne {
	cguo.mutation.SetTenantID(pu)
	return cguo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierGLSUpdateOne {
	if pu != nil {
		cguo.SetTenantID(*pu)
	}
	return cguo
}

// SetContactID sets the "contact_id" field.
func (cguo *CarrierGLSUpdateOne) SetContactID(s string) *CarrierGLSUpdateOne {
	cguo.mutation.SetContactID(s)
	return cguo
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableContactID(s *string) *CarrierGLSUpdateOne {
	if s != nil {
		cguo.SetContactID(*s)
	}
	return cguo
}

// ClearContactID clears the value of the "contact_id" field.
func (cguo *CarrierGLSUpdateOne) ClearContactID() *CarrierGLSUpdateOne {
	cguo.mutation.ClearContactID()
	return cguo
}

// SetGLSUsername sets the "gls_username" field.
func (cguo *CarrierGLSUpdateOne) SetGLSUsername(s string) *CarrierGLSUpdateOne {
	cguo.mutation.SetGLSUsername(s)
	return cguo
}

// SetNillableGLSUsername sets the "gls_username" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableGLSUsername(s *string) *CarrierGLSUpdateOne {
	if s != nil {
		cguo.SetGLSUsername(*s)
	}
	return cguo
}

// ClearGLSUsername clears the value of the "gls_username" field.
func (cguo *CarrierGLSUpdateOne) ClearGLSUsername() *CarrierGLSUpdateOne {
	cguo.mutation.ClearGLSUsername()
	return cguo
}

// SetGLSPassword sets the "gls_password" field.
func (cguo *CarrierGLSUpdateOne) SetGLSPassword(s string) *CarrierGLSUpdateOne {
	cguo.mutation.SetGLSPassword(s)
	return cguo
}

// SetNillableGLSPassword sets the "gls_password" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableGLSPassword(s *string) *CarrierGLSUpdateOne {
	if s != nil {
		cguo.SetGLSPassword(*s)
	}
	return cguo
}

// ClearGLSPassword clears the value of the "gls_password" field.
func (cguo *CarrierGLSUpdateOne) ClearGLSPassword() *CarrierGLSUpdateOne {
	cguo.mutation.ClearGLSPassword()
	return cguo
}

// SetCustomerID sets the "customer_id" field.
func (cguo *CarrierGLSUpdateOne) SetCustomerID(s string) *CarrierGLSUpdateOne {
	cguo.mutation.SetCustomerID(s)
	return cguo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableCustomerID(s *string) *CarrierGLSUpdateOne {
	if s != nil {
		cguo.SetCustomerID(*s)
	}
	return cguo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (cguo *CarrierGLSUpdateOne) ClearCustomerID() *CarrierGLSUpdateOne {
	cguo.mutation.ClearCustomerID()
	return cguo
}

// SetGLSCountryCode sets the "gls_country_code" field.
func (cguo *CarrierGLSUpdateOne) SetGLSCountryCode(s string) *CarrierGLSUpdateOne {
	cguo.mutation.SetGLSCountryCode(s)
	return cguo
}

// SetNillableGLSCountryCode sets the "gls_country_code" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableGLSCountryCode(s *string) *CarrierGLSUpdateOne {
	if s != nil {
		cguo.SetGLSCountryCode(*s)
	}
	return cguo
}

// ClearGLSCountryCode clears the value of the "gls_country_code" field.
func (cguo *CarrierGLSUpdateOne) ClearGLSCountryCode() *CarrierGLSUpdateOne {
	cguo.mutation.ClearGLSCountryCode()
	return cguo
}

// SetSyncShipmentCancellation sets the "sync_shipment_cancellation" field.
func (cguo *CarrierGLSUpdateOne) SetSyncShipmentCancellation(b bool) *CarrierGLSUpdateOne {
	cguo.mutation.SetSyncShipmentCancellation(b)
	return cguo
}

// SetNillableSyncShipmentCancellation sets the "sync_shipment_cancellation" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillableSyncShipmentCancellation(b *bool) *CarrierGLSUpdateOne {
	if b != nil {
		cguo.SetSyncShipmentCancellation(*b)
	}
	return cguo
}

// ClearSyncShipmentCancellation clears the value of the "sync_shipment_cancellation" field.
func (cguo *CarrierGLSUpdateOne) ClearSyncShipmentCancellation() *CarrierGLSUpdateOne {
	cguo.mutation.ClearSyncShipmentCancellation()
	return cguo
}

// SetPrintErrorOnLabel sets the "print_error_on_label" field.
func (cguo *CarrierGLSUpdateOne) SetPrintErrorOnLabel(b bool) *CarrierGLSUpdateOne {
	cguo.mutation.SetPrintErrorOnLabel(b)
	return cguo
}

// SetNillablePrintErrorOnLabel sets the "print_error_on_label" field if the given value is not nil.
func (cguo *CarrierGLSUpdateOne) SetNillablePrintErrorOnLabel(b *bool) *CarrierGLSUpdateOne {
	if b != nil {
		cguo.SetPrintErrorOnLabel(*b)
	}
	return cguo
}

// ClearPrintErrorOnLabel clears the value of the "print_error_on_label" field.
func (cguo *CarrierGLSUpdateOne) ClearPrintErrorOnLabel() *CarrierGLSUpdateOne {
	cguo.mutation.ClearPrintErrorOnLabel()
	return cguo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cguo *CarrierGLSUpdateOne) SetTenant(t *Tenant) *CarrierGLSUpdateOne {
	return cguo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cguo *CarrierGLSUpdateOne) SetCarrierID(id pulid.ID) *CarrierGLSUpdateOne {
	cguo.mutation.SetCarrierID(id)
	return cguo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cguo *CarrierGLSUpdateOne) SetCarrier(c *Carrier) *CarrierGLSUpdateOne {
	return cguo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierGLSMutation object of the builder.
func (cguo *CarrierGLSUpdateOne) Mutation() *CarrierGLSMutation {
	return cguo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cguo *CarrierGLSUpdateOne) ClearTenant() *CarrierGLSUpdateOne {
	cguo.mutation.ClearTenant()
	return cguo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cguo *CarrierGLSUpdateOne) ClearCarrier() *CarrierGLSUpdateOne {
	cguo.mutation.ClearCarrier()
	return cguo
}

// Where appends a list predicates to the CarrierGLSUpdate builder.
func (cguo *CarrierGLSUpdateOne) Where(ps ...predicate.CarrierGLS) *CarrierGLSUpdateOne {
	cguo.mutation.Where(ps...)
	return cguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cguo *CarrierGLSUpdateOne) Select(field string, fields ...string) *CarrierGLSUpdateOne {
	cguo.fields = append([]string{field}, fields...)
	return cguo
}

// Save executes the query and returns the updated CarrierGLS entity.
func (cguo *CarrierGLSUpdateOne) Save(ctx context.Context) (*CarrierGLS, error) {
	return withHooks(ctx, cguo.sqlSave, cguo.mutation, cguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cguo *CarrierGLSUpdateOne) SaveX(ctx context.Context) *CarrierGLS {
	node, err := cguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cguo *CarrierGLSUpdateOne) Exec(ctx context.Context) error {
	_, err := cguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cguo *CarrierGLSUpdateOne) ExecX(ctx context.Context) {
	if err := cguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cguo *CarrierGLSUpdateOne) check() error {
	if cguo.mutation.TenantCleared() && len(cguo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierGLS.tenant"`)
	}
	if cguo.mutation.CarrierCleared() && len(cguo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierGLS.carrier"`)
	}
	return nil
}

func (cguo *CarrierGLSUpdateOne) sqlSave(ctx context.Context) (_node *CarrierGLS, err error) {
	if err := cguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carriergls.Table, carriergls.Columns, sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString))
	id, ok := cguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierGLS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carriergls.FieldID)
		for _, f := range fields {
			if !carriergls.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carriergls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cguo.mutation.ContactID(); ok {
		_spec.SetField(carriergls.FieldContactID, field.TypeString, value)
	}
	if cguo.mutation.ContactIDCleared() {
		_spec.ClearField(carriergls.FieldContactID, field.TypeString)
	}
	if value, ok := cguo.mutation.GLSUsername(); ok {
		_spec.SetField(carriergls.FieldGLSUsername, field.TypeString, value)
	}
	if cguo.mutation.GLSUsernameCleared() {
		_spec.ClearField(carriergls.FieldGLSUsername, field.TypeString)
	}
	if value, ok := cguo.mutation.GLSPassword(); ok {
		_spec.SetField(carriergls.FieldGLSPassword, field.TypeString, value)
	}
	if cguo.mutation.GLSPasswordCleared() {
		_spec.ClearField(carriergls.FieldGLSPassword, field.TypeString)
	}
	if value, ok := cguo.mutation.CustomerID(); ok {
		_spec.SetField(carriergls.FieldCustomerID, field.TypeString, value)
	}
	if cguo.mutation.CustomerIDCleared() {
		_spec.ClearField(carriergls.FieldCustomerID, field.TypeString)
	}
	if value, ok := cguo.mutation.GLSCountryCode(); ok {
		_spec.SetField(carriergls.FieldGLSCountryCode, field.TypeString, value)
	}
	if cguo.mutation.GLSCountryCodeCleared() {
		_spec.ClearField(carriergls.FieldGLSCountryCode, field.TypeString)
	}
	if value, ok := cguo.mutation.SyncShipmentCancellation(); ok {
		_spec.SetField(carriergls.FieldSyncShipmentCancellation, field.TypeBool, value)
	}
	if cguo.mutation.SyncShipmentCancellationCleared() {
		_spec.ClearField(carriergls.FieldSyncShipmentCancellation, field.TypeBool)
	}
	if value, ok := cguo.mutation.PrintErrorOnLabel(); ok {
		_spec.SetField(carriergls.FieldPrintErrorOnLabel, field.TypeBool, value)
	}
	if cguo.mutation.PrintErrorOnLabelCleared() {
		_spec.ClearField(carriergls.FieldPrintErrorOnLabel, field.TypeBool)
	}
	if cguo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriergls.TenantTable,
			Columns: []string{carriergls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriergls.TenantTable,
			Columns: []string{carriergls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cguo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriergls.CarrierTable,
			Columns: []string{carriergls.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cguo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriergls.CarrierTable,
			Columns: []string{carriergls.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierGLS{config: cguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carriergls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cguo.mutation.done = true
	return _node, nil
}
