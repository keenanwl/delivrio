// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionUSPSUpdate is the builder for updating DeliveryOptionUSPS entities.
type DeliveryOptionUSPSUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionUSPSMutation
}

// Where appends a list predicates to the DeliveryOptionUSPSUpdate builder.
func (douu *DeliveryOptionUSPSUpdate) Where(ps ...predicate.DeliveryOptionUSPS) *DeliveryOptionUSPSUpdate {
	douu.mutation.Where(ps...)
	return douu
}

// SetTenantID sets the "tenant_id" field.
func (douu *DeliveryOptionUSPSUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionUSPSUpdate {
	douu.mutation.SetTenantID(pu)
	return douu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (douu *DeliveryOptionUSPSUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionUSPSUpdate {
	if pu != nil {
		douu.SetTenantID(*pu)
	}
	return douu
}

// SetFormatZpl sets the "format_zpl" field.
func (douu *DeliveryOptionUSPSUpdate) SetFormatZpl(b bool) *DeliveryOptionUSPSUpdate {
	douu.mutation.SetFormatZpl(b)
	return douu
}

// SetNillableFormatZpl sets the "format_zpl" field if the given value is not nil.
func (douu *DeliveryOptionUSPSUpdate) SetNillableFormatZpl(b *bool) *DeliveryOptionUSPSUpdate {
	if b != nil {
		douu.SetFormatZpl(*b)
	}
	return douu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (douu *DeliveryOptionUSPSUpdate) SetTenant(t *Tenant) *DeliveryOptionUSPSUpdate {
	return douu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (douu *DeliveryOptionUSPSUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionUSPSUpdate {
	douu.mutation.SetDeliveryOptionID(id)
	return douu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (douu *DeliveryOptionUSPSUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionUSPSUpdate {
	return douu.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceUspIDs adds the "carrier_additional_service_usps" edge to the CarrierAdditionalServiceUSPS entity by IDs.
func (douu *DeliveryOptionUSPSUpdate) AddCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *DeliveryOptionUSPSUpdate {
	douu.mutation.AddCarrierAdditionalServiceUspIDs(ids...)
	return douu
}

// AddCarrierAdditionalServiceUSPS adds the "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (douu *DeliveryOptionUSPSUpdate) AddCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *DeliveryOptionUSPSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douu.AddCarrierAdditionalServiceUspIDs(ids...)
}

// Mutation returns the DeliveryOptionUSPSMutation object of the builder.
func (douu *DeliveryOptionUSPSUpdate) Mutation() *DeliveryOptionUSPSMutation {
	return douu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (douu *DeliveryOptionUSPSUpdate) ClearTenant() *DeliveryOptionUSPSUpdate {
	douu.mutation.ClearTenant()
	return douu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (douu *DeliveryOptionUSPSUpdate) ClearDeliveryOption() *DeliveryOptionUSPSUpdate {
	douu.mutation.ClearDeliveryOption()
	return douu
}

// ClearCarrierAdditionalServiceUSPS clears all "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (douu *DeliveryOptionUSPSUpdate) ClearCarrierAdditionalServiceUSPS() *DeliveryOptionUSPSUpdate {
	douu.mutation.ClearCarrierAdditionalServiceUSPS()
	return douu
}

// RemoveCarrierAdditionalServiceUspIDs removes the "carrier_additional_service_usps" edge to CarrierAdditionalServiceUSPS entities by IDs.
func (douu *DeliveryOptionUSPSUpdate) RemoveCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *DeliveryOptionUSPSUpdate {
	douu.mutation.RemoveCarrierAdditionalServiceUspIDs(ids...)
	return douu
}

// RemoveCarrierAdditionalServiceUSPS removes "carrier_additional_service_usps" edges to CarrierAdditionalServiceUSPS entities.
func (douu *DeliveryOptionUSPSUpdate) RemoveCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *DeliveryOptionUSPSUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douu.RemoveCarrierAdditionalServiceUspIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (douu *DeliveryOptionUSPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, douu.sqlSave, douu.mutation, douu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (douu *DeliveryOptionUSPSUpdate) SaveX(ctx context.Context) int {
	affected, err := douu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (douu *DeliveryOptionUSPSUpdate) Exec(ctx context.Context) error {
	_, err := douu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douu *DeliveryOptionUSPSUpdate) ExecX(ctx context.Context) {
	if err := douu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (douu *DeliveryOptionUSPSUpdate) check() error {
	if douu.mutation.TenantCleared() && len(douu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionUSPS.tenant"`)
	}
	if douu.mutation.DeliveryOptionCleared() && len(douu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionUSPS.delivery_option"`)
	}
	return nil
}

func (douu *DeliveryOptionUSPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := douu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptionusps.Table, deliveryoptionusps.Columns, sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString))
	if ps := douu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := douu.mutation.FormatZpl(); ok {
		_spec.SetField(deliveryoptionusps.FieldFormatZpl, field.TypeBool, value)
	}
	if douu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionusps.TenantTable,
			Columns: []string{deliveryoptionusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionusps.TenantTable,
			Columns: []string{deliveryoptionusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionusps.DeliveryOptionTable,
			Columns: []string{deliveryoptionusps.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionusps.DeliveryOptionTable,
			Columns: []string{deliveryoptionusps.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douu.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douu.mutation.RemovedCarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 && !douu.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douu.mutation.CarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, douu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptionusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	douu.mutation.done = true
	return n, nil
}

// DeliveryOptionUSPSUpdateOne is the builder for updating a single DeliveryOptionUSPS entity.
type DeliveryOptionUSPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionUSPSMutation
}

// SetTenantID sets the "tenant_id" field.
func (douuo *DeliveryOptionUSPSUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.SetTenantID(pu)
	return douuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (douuo *DeliveryOptionUSPSUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionUSPSUpdateOne {
	if pu != nil {
		douuo.SetTenantID(*pu)
	}
	return douuo
}

// SetFormatZpl sets the "format_zpl" field.
func (douuo *DeliveryOptionUSPSUpdateOne) SetFormatZpl(b bool) *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.SetFormatZpl(b)
	return douuo
}

// SetNillableFormatZpl sets the "format_zpl" field if the given value is not nil.
func (douuo *DeliveryOptionUSPSUpdateOne) SetNillableFormatZpl(b *bool) *DeliveryOptionUSPSUpdateOne {
	if b != nil {
		douuo.SetFormatZpl(*b)
	}
	return douuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (douuo *DeliveryOptionUSPSUpdateOne) SetTenant(t *Tenant) *DeliveryOptionUSPSUpdateOne {
	return douuo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (douuo *DeliveryOptionUSPSUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.SetDeliveryOptionID(id)
	return douuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (douuo *DeliveryOptionUSPSUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionUSPSUpdateOne {
	return douuo.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceUspIDs adds the "carrier_additional_service_usps" edge to the CarrierAdditionalServiceUSPS entity by IDs.
func (douuo *DeliveryOptionUSPSUpdateOne) AddCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.AddCarrierAdditionalServiceUspIDs(ids...)
	return douuo
}

// AddCarrierAdditionalServiceUSPS adds the "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (douuo *DeliveryOptionUSPSUpdateOne) AddCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *DeliveryOptionUSPSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douuo.AddCarrierAdditionalServiceUspIDs(ids...)
}

// Mutation returns the DeliveryOptionUSPSMutation object of the builder.
func (douuo *DeliveryOptionUSPSUpdateOne) Mutation() *DeliveryOptionUSPSMutation {
	return douuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (douuo *DeliveryOptionUSPSUpdateOne) ClearTenant() *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.ClearTenant()
	return douuo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (douuo *DeliveryOptionUSPSUpdateOne) ClearDeliveryOption() *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.ClearDeliveryOption()
	return douuo
}

// ClearCarrierAdditionalServiceUSPS clears all "carrier_additional_service_usps" edges to the CarrierAdditionalServiceUSPS entity.
func (douuo *DeliveryOptionUSPSUpdateOne) ClearCarrierAdditionalServiceUSPS() *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.ClearCarrierAdditionalServiceUSPS()
	return douuo
}

// RemoveCarrierAdditionalServiceUspIDs removes the "carrier_additional_service_usps" edge to CarrierAdditionalServiceUSPS entities by IDs.
func (douuo *DeliveryOptionUSPSUpdateOne) RemoveCarrierAdditionalServiceUspIDs(ids ...pulid.ID) *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.RemoveCarrierAdditionalServiceUspIDs(ids...)
	return douuo
}

// RemoveCarrierAdditionalServiceUSPS removes "carrier_additional_service_usps" edges to CarrierAdditionalServiceUSPS entities.
func (douuo *DeliveryOptionUSPSUpdateOne) RemoveCarrierAdditionalServiceUSPS(c ...*CarrierAdditionalServiceUSPS) *DeliveryOptionUSPSUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douuo.RemoveCarrierAdditionalServiceUspIDs(ids...)
}

// Where appends a list predicates to the DeliveryOptionUSPSUpdate builder.
func (douuo *DeliveryOptionUSPSUpdateOne) Where(ps ...predicate.DeliveryOptionUSPS) *DeliveryOptionUSPSUpdateOne {
	douuo.mutation.Where(ps...)
	return douuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (douuo *DeliveryOptionUSPSUpdateOne) Select(field string, fields ...string) *DeliveryOptionUSPSUpdateOne {
	douuo.fields = append([]string{field}, fields...)
	return douuo
}

// Save executes the query and returns the updated DeliveryOptionUSPS entity.
func (douuo *DeliveryOptionUSPSUpdateOne) Save(ctx context.Context) (*DeliveryOptionUSPS, error) {
	return withHooks(ctx, douuo.sqlSave, douuo.mutation, douuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (douuo *DeliveryOptionUSPSUpdateOne) SaveX(ctx context.Context) *DeliveryOptionUSPS {
	node, err := douuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (douuo *DeliveryOptionUSPSUpdateOne) Exec(ctx context.Context) error {
	_, err := douuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douuo *DeliveryOptionUSPSUpdateOne) ExecX(ctx context.Context) {
	if err := douuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (douuo *DeliveryOptionUSPSUpdateOne) check() error {
	if douuo.mutation.TenantCleared() && len(douuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionUSPS.tenant"`)
	}
	if douuo.mutation.DeliveryOptionCleared() && len(douuo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionUSPS.delivery_option"`)
	}
	return nil
}

func (douuo *DeliveryOptionUSPSUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOptionUSPS, err error) {
	if err := douuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptionusps.Table, deliveryoptionusps.Columns, sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString))
	id, ok := douuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOptionUSPS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := douuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptionusps.FieldID)
		for _, f := range fields {
			if !deliveryoptionusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoptionusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := douuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := douuo.mutation.FormatZpl(); ok {
		_spec.SetField(deliveryoptionusps.FieldFormatZpl, field.TypeBool, value)
	}
	if douuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionusps.TenantTable,
			Columns: []string{deliveryoptionusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionusps.TenantTable,
			Columns: []string{deliveryoptionusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionusps.DeliveryOptionTable,
			Columns: []string{deliveryoptionusps.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionusps.DeliveryOptionTable,
			Columns: []string{deliveryoptionusps.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douuo.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douuo.mutation.RemovedCarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 && !douuo.mutation.CarrierAdditionalServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douuo.mutation.CarrierAdditionalServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOptionUSPS{config: douuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, douuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptionusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	douuo.mutation.done = true
	return _node, nil
}
