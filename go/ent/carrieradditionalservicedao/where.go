// Code generated by ent, DO NOT EDIT.

package carrieradditionalservicedao

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldLTE(FieldID, id))
}

// APICode applies equality check predicate on the "api_code" field. It's identical to APICodeEQ.
func APICode(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEQ(FieldAPICode, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldContainsFold(FieldLabel, v))
}

// APICodeEQ applies the EQ predicate on the "api_code" field.
func APICodeEQ(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEQ(FieldAPICode, v))
}

// APICodeNEQ applies the NEQ predicate on the "api_code" field.
func APICodeNEQ(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldNEQ(FieldAPICode, v))
}

// APICodeIn applies the In predicate on the "api_code" field.
func APICodeIn(vs ...string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldIn(FieldAPICode, vs...))
}

// APICodeNotIn applies the NotIn predicate on the "api_code" field.
func APICodeNotIn(vs ...string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldNotIn(FieldAPICode, vs...))
}

// APICodeGT applies the GT predicate on the "api_code" field.
func APICodeGT(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldGT(FieldAPICode, v))
}

// APICodeGTE applies the GTE predicate on the "api_code" field.
func APICodeGTE(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldGTE(FieldAPICode, v))
}

// APICodeLT applies the LT predicate on the "api_code" field.
func APICodeLT(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldLT(FieldAPICode, v))
}

// APICodeLTE applies the LTE predicate on the "api_code" field.
func APICodeLTE(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldLTE(FieldAPICode, v))
}

// APICodeContains applies the Contains predicate on the "api_code" field.
func APICodeContains(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldContains(FieldAPICode, v))
}

// APICodeHasPrefix applies the HasPrefix predicate on the "api_code" field.
func APICodeHasPrefix(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldHasPrefix(FieldAPICode, v))
}

// APICodeHasSuffix applies the HasSuffix predicate on the "api_code" field.
func APICodeHasSuffix(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldHasSuffix(FieldAPICode, v))
}

// APICodeEqualFold applies the EqualFold predicate on the "api_code" field.
func APICodeEqualFold(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldEqualFold(FieldAPICode, v))
}

// APICodeContainsFold applies the ContainsFold predicate on the "api_code" field.
func APICodeContainsFold(v string) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.FieldContainsFold(FieldAPICode, v))
}

// HasCarrierServiceDAO applies the HasEdge predicate on the "carrier_service_dao" edge.
func HasCarrierServiceDAO() predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarrierServiceDAOTable, CarrierServiceDAOPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceDAOWith applies the HasEdge predicate on the "carrier_service_dao" edge with a given conditions (other predicates).
func HasCarrierServiceDAOWith(preds ...predicate.CarrierServiceDAO) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(func(s *sql.Selector) {
		step := newCarrierServiceDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionDAO applies the HasEdge predicate on the "delivery_option_dao" edge.
func HasDeliveryOptionDAO() predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionDAOTable, DeliveryOptionDAOPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionDAOWith applies the HasEdge predicate on the "delivery_option_dao" edge with a given conditions (other predicates).
func HasDeliveryOptionDAOWith(preds ...predicate.DeliveryOptionDAO) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(func(s *sql.Selector) {
		step := newDeliveryOptionDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierAdditionalServiceDAO) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierAdditionalServiceDAO) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierAdditionalServiceDAO) predicate.CarrierAdditionalServiceDAO {
	return predicate.CarrierAdditionalServiceDAO(sql.NotPredicates(p))
}
