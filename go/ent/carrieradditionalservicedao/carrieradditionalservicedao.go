// Code generated by ent, DO NOT EDIT.

package carrieradditionalservicedao

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrieradditionalservicedao type in the database.
	Label = "carrier_additional_service_dao"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldAPICode holds the string denoting the api_code field in the database.
	FieldAPICode = "api_code"
	// EdgeCarrierServiceDAO holds the string denoting the carrier_service_dao edge name in mutations.
	EdgeCarrierServiceDAO = "carrier_service_dao"
	// EdgeDeliveryOptionDAO holds the string denoting the delivery_option_dao edge name in mutations.
	EdgeDeliveryOptionDAO = "delivery_option_dao"
	// Table holds the table name of the carrieradditionalservicedao in the database.
	Table = "carrier_additional_service_da_os"
	// CarrierServiceDAOTable is the table that holds the carrier_service_dao relation/edge. The primary key declared below.
	CarrierServiceDAOTable = "carrier_service_dao_carrier_additional_service_dao"
	// CarrierServiceDAOInverseTable is the table name for the CarrierServiceDAO entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservicedao" package.
	CarrierServiceDAOInverseTable = "carrier_service_da_os"
	// DeliveryOptionDAOTable is the table that holds the delivery_option_dao relation/edge. The primary key declared below.
	DeliveryOptionDAOTable = "delivery_option_dao_carrier_additional_service_dao"
	// DeliveryOptionDAOInverseTable is the table name for the DeliveryOptionDAO entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptiondao" package.
	DeliveryOptionDAOInverseTable = "delivery_option_da_os"
)

// Columns holds all SQL columns for carrieradditionalservicedao fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldAPICode,
}

var (
	// CarrierServiceDAOPrimaryKey and CarrierServiceDAOColumn2 are the table columns denoting the
	// primary key for the carrier_service_dao relation (M2M).
	CarrierServiceDAOPrimaryKey = []string{"carrier_service_dao_id", "carrier_additional_service_dao_id"}
	// DeliveryOptionDAOPrimaryKey and DeliveryOptionDAOColumn2 are the table columns denoting the
	// primary key for the delivery_option_dao relation (M2M).
	DeliveryOptionDAOPrimaryKey = []string{"delivery_option_dao_id", "carrier_additional_service_dao_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierAdditionalServiceDAO queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByAPICode orders the results by the api_code field.
func ByAPICode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPICode, opts...).ToFunc()
}

// ByCarrierServiceDAOCount orders the results by carrier_service_dao count.
func ByCarrierServiceDAOCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierServiceDAOStep(), opts...)
	}
}

// ByCarrierServiceDAO orders the results by carrier_service_dao terms.
func ByCarrierServiceDAO(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceDAOStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionDAOCount orders the results by delivery_option_dao count.
func ByDeliveryOptionDAOCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionDAOStep(), opts...)
	}
}

// ByDeliveryOptionDAO orders the results by delivery_option_dao terms.
func ByDeliveryOptionDAO(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionDAOStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierServiceDAOTable, CarrierServiceDAOPrimaryKey...),
	)
}
func newDeliveryOptionDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionDAOTable, DeliveryOptionDAOPrimaryKey...),
	)
}
