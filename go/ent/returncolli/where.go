// Code generated by ent, DO NOT EDIT.

package returncolli

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldTenantID, v))
}

// ExpectedAt applies equality check predicate on the "expected_at" field. It's identical to ExpectedAtEQ.
func ExpectedAt(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldExpectedAt, v))
}

// LabelPdf applies equality check predicate on the "label_pdf" field. It's identical to LabelPdfEQ.
func LabelPdf(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldLabelPdf, v))
}

// LabelPng applies equality check predicate on the "label_png" field. It's identical to LabelPngEQ.
func LabelPng(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldLabelPng, v))
}

// QrCodePng applies equality check predicate on the "qr_code_png" field. It's identical to QrCodePngEQ.
func QrCodePng(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldQrCodePng, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldComment, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldCreatedAt, v))
}

// EmailReceived applies equality check predicate on the "email_received" field. It's identical to EmailReceivedEQ.
func EmailReceived(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailReceived, v))
}

// EmailAccepted applies equality check predicate on the "email_accepted" field. It's identical to EmailAcceptedEQ.
func EmailAccepted(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailAccepted, v))
}

// EmailConfirmationLabel applies equality check predicate on the "email_confirmation_label" field. It's identical to EmailConfirmationLabelEQ.
func EmailConfirmationLabel(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationQrCode applies equality check predicate on the "email_confirmation_qr_code" field. It's identical to EmailConfirmationQrCodeEQ.
func EmailConfirmationQrCode(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailConfirmationQrCode, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ReturnColli {
	vc := string(v)
	return predicate.ReturnColli(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ReturnColli {
	vc := string(v)
	return predicate.ReturnColli(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ReturnColli {
	vc := string(v)
	return predicate.ReturnColli(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ReturnColli {
	vc := string(v)
	return predicate.ReturnColli(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ReturnColli {
	vc := string(v)
	return predicate.ReturnColli(sql.FieldContainsFold(FieldTenantID, vc))
}

// ExpectedAtEQ applies the EQ predicate on the "expected_at" field.
func ExpectedAtEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldExpectedAt, v))
}

// ExpectedAtNEQ applies the NEQ predicate on the "expected_at" field.
func ExpectedAtNEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldExpectedAt, v))
}

// ExpectedAtIn applies the In predicate on the "expected_at" field.
func ExpectedAtIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldExpectedAt, vs...))
}

// ExpectedAtNotIn applies the NotIn predicate on the "expected_at" field.
func ExpectedAtNotIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldExpectedAt, vs...))
}

// ExpectedAtGT applies the GT predicate on the "expected_at" field.
func ExpectedAtGT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldExpectedAt, v))
}

// ExpectedAtGTE applies the GTE predicate on the "expected_at" field.
func ExpectedAtGTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldExpectedAt, v))
}

// ExpectedAtLT applies the LT predicate on the "expected_at" field.
func ExpectedAtLT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldExpectedAt, v))
}

// ExpectedAtLTE applies the LTE predicate on the "expected_at" field.
func ExpectedAtLTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldExpectedAt, v))
}

// ExpectedAtIsNil applies the IsNil predicate on the "expected_at" field.
func ExpectedAtIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldExpectedAt))
}

// ExpectedAtNotNil applies the NotNil predicate on the "expected_at" field.
func ExpectedAtNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldExpectedAt))
}

// LabelPdfEQ applies the EQ predicate on the "label_pdf" field.
func LabelPdfEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldLabelPdf, v))
}

// LabelPdfNEQ applies the NEQ predicate on the "label_pdf" field.
func LabelPdfNEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldLabelPdf, v))
}

// LabelPdfIn applies the In predicate on the "label_pdf" field.
func LabelPdfIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldLabelPdf, vs...))
}

// LabelPdfNotIn applies the NotIn predicate on the "label_pdf" field.
func LabelPdfNotIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldLabelPdf, vs...))
}

// LabelPdfGT applies the GT predicate on the "label_pdf" field.
func LabelPdfGT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldLabelPdf, v))
}

// LabelPdfGTE applies the GTE predicate on the "label_pdf" field.
func LabelPdfGTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldLabelPdf, v))
}

// LabelPdfLT applies the LT predicate on the "label_pdf" field.
func LabelPdfLT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldLabelPdf, v))
}

// LabelPdfLTE applies the LTE predicate on the "label_pdf" field.
func LabelPdfLTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldLabelPdf, v))
}

// LabelPdfContains applies the Contains predicate on the "label_pdf" field.
func LabelPdfContains(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContains(FieldLabelPdf, v))
}

// LabelPdfHasPrefix applies the HasPrefix predicate on the "label_pdf" field.
func LabelPdfHasPrefix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasPrefix(FieldLabelPdf, v))
}

// LabelPdfHasSuffix applies the HasSuffix predicate on the "label_pdf" field.
func LabelPdfHasSuffix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasSuffix(FieldLabelPdf, v))
}

// LabelPdfIsNil applies the IsNil predicate on the "label_pdf" field.
func LabelPdfIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldLabelPdf))
}

// LabelPdfNotNil applies the NotNil predicate on the "label_pdf" field.
func LabelPdfNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldLabelPdf))
}

// LabelPdfEqualFold applies the EqualFold predicate on the "label_pdf" field.
func LabelPdfEqualFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEqualFold(FieldLabelPdf, v))
}

// LabelPdfContainsFold applies the ContainsFold predicate on the "label_pdf" field.
func LabelPdfContainsFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContainsFold(FieldLabelPdf, v))
}

// LabelPngEQ applies the EQ predicate on the "label_png" field.
func LabelPngEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldLabelPng, v))
}

// LabelPngNEQ applies the NEQ predicate on the "label_png" field.
func LabelPngNEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldLabelPng, v))
}

// LabelPngIn applies the In predicate on the "label_png" field.
func LabelPngIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldLabelPng, vs...))
}

// LabelPngNotIn applies the NotIn predicate on the "label_png" field.
func LabelPngNotIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldLabelPng, vs...))
}

// LabelPngGT applies the GT predicate on the "label_png" field.
func LabelPngGT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldLabelPng, v))
}

// LabelPngGTE applies the GTE predicate on the "label_png" field.
func LabelPngGTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldLabelPng, v))
}

// LabelPngLT applies the LT predicate on the "label_png" field.
func LabelPngLT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldLabelPng, v))
}

// LabelPngLTE applies the LTE predicate on the "label_png" field.
func LabelPngLTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldLabelPng, v))
}

// LabelPngContains applies the Contains predicate on the "label_png" field.
func LabelPngContains(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContains(FieldLabelPng, v))
}

// LabelPngHasPrefix applies the HasPrefix predicate on the "label_png" field.
func LabelPngHasPrefix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasPrefix(FieldLabelPng, v))
}

// LabelPngHasSuffix applies the HasSuffix predicate on the "label_png" field.
func LabelPngHasSuffix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasSuffix(FieldLabelPng, v))
}

// LabelPngIsNil applies the IsNil predicate on the "label_png" field.
func LabelPngIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldLabelPng))
}

// LabelPngNotNil applies the NotNil predicate on the "label_png" field.
func LabelPngNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldLabelPng))
}

// LabelPngEqualFold applies the EqualFold predicate on the "label_png" field.
func LabelPngEqualFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEqualFold(FieldLabelPng, v))
}

// LabelPngContainsFold applies the ContainsFold predicate on the "label_png" field.
func LabelPngContainsFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContainsFold(FieldLabelPng, v))
}

// QrCodePngEQ applies the EQ predicate on the "qr_code_png" field.
func QrCodePngEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldQrCodePng, v))
}

// QrCodePngNEQ applies the NEQ predicate on the "qr_code_png" field.
func QrCodePngNEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldQrCodePng, v))
}

// QrCodePngIn applies the In predicate on the "qr_code_png" field.
func QrCodePngIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldQrCodePng, vs...))
}

// QrCodePngNotIn applies the NotIn predicate on the "qr_code_png" field.
func QrCodePngNotIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldQrCodePng, vs...))
}

// QrCodePngGT applies the GT predicate on the "qr_code_png" field.
func QrCodePngGT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldQrCodePng, v))
}

// QrCodePngGTE applies the GTE predicate on the "qr_code_png" field.
func QrCodePngGTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldQrCodePng, v))
}

// QrCodePngLT applies the LT predicate on the "qr_code_png" field.
func QrCodePngLT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldQrCodePng, v))
}

// QrCodePngLTE applies the LTE predicate on the "qr_code_png" field.
func QrCodePngLTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldQrCodePng, v))
}

// QrCodePngContains applies the Contains predicate on the "qr_code_png" field.
func QrCodePngContains(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContains(FieldQrCodePng, v))
}

// QrCodePngHasPrefix applies the HasPrefix predicate on the "qr_code_png" field.
func QrCodePngHasPrefix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasPrefix(FieldQrCodePng, v))
}

// QrCodePngHasSuffix applies the HasSuffix predicate on the "qr_code_png" field.
func QrCodePngHasSuffix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasSuffix(FieldQrCodePng, v))
}

// QrCodePngIsNil applies the IsNil predicate on the "qr_code_png" field.
func QrCodePngIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldQrCodePng))
}

// QrCodePngNotNil applies the NotNil predicate on the "qr_code_png" field.
func QrCodePngNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldQrCodePng))
}

// QrCodePngEqualFold applies the EqualFold predicate on the "qr_code_png" field.
func QrCodePngEqualFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEqualFold(FieldQrCodePng, v))
}

// QrCodePngContainsFold applies the ContainsFold predicate on the "qr_code_png" field.
func QrCodePngContainsFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContainsFold(FieldQrCodePng, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldContainsFold(FieldComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldStatus, vs...))
}

// EmailReceivedEQ applies the EQ predicate on the "email_received" field.
func EmailReceivedEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailReceived, v))
}

// EmailReceivedNEQ applies the NEQ predicate on the "email_received" field.
func EmailReceivedNEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldEmailReceived, v))
}

// EmailReceivedIn applies the In predicate on the "email_received" field.
func EmailReceivedIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldEmailReceived, vs...))
}

// EmailReceivedNotIn applies the NotIn predicate on the "email_received" field.
func EmailReceivedNotIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldEmailReceived, vs...))
}

// EmailReceivedGT applies the GT predicate on the "email_received" field.
func EmailReceivedGT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldEmailReceived, v))
}

// EmailReceivedGTE applies the GTE predicate on the "email_received" field.
func EmailReceivedGTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldEmailReceived, v))
}

// EmailReceivedLT applies the LT predicate on the "email_received" field.
func EmailReceivedLT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldEmailReceived, v))
}

// EmailReceivedLTE applies the LTE predicate on the "email_received" field.
func EmailReceivedLTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldEmailReceived, v))
}

// EmailReceivedIsNil applies the IsNil predicate on the "email_received" field.
func EmailReceivedIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldEmailReceived))
}

// EmailReceivedNotNil applies the NotNil predicate on the "email_received" field.
func EmailReceivedNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldEmailReceived))
}

// EmailAcceptedEQ applies the EQ predicate on the "email_accepted" field.
func EmailAcceptedEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailAccepted, v))
}

// EmailAcceptedNEQ applies the NEQ predicate on the "email_accepted" field.
func EmailAcceptedNEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldEmailAccepted, v))
}

// EmailAcceptedIn applies the In predicate on the "email_accepted" field.
func EmailAcceptedIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldEmailAccepted, vs...))
}

// EmailAcceptedNotIn applies the NotIn predicate on the "email_accepted" field.
func EmailAcceptedNotIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldEmailAccepted, vs...))
}

// EmailAcceptedGT applies the GT predicate on the "email_accepted" field.
func EmailAcceptedGT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldEmailAccepted, v))
}

// EmailAcceptedGTE applies the GTE predicate on the "email_accepted" field.
func EmailAcceptedGTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldEmailAccepted, v))
}

// EmailAcceptedLT applies the LT predicate on the "email_accepted" field.
func EmailAcceptedLT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldEmailAccepted, v))
}

// EmailAcceptedLTE applies the LTE predicate on the "email_accepted" field.
func EmailAcceptedLTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldEmailAccepted, v))
}

// EmailAcceptedIsNil applies the IsNil predicate on the "email_accepted" field.
func EmailAcceptedIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldEmailAccepted))
}

// EmailAcceptedNotNil applies the NotNil predicate on the "email_accepted" field.
func EmailAcceptedNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldEmailAccepted))
}

// EmailConfirmationLabelEQ applies the EQ predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationLabelNEQ applies the NEQ predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelNEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationLabelIn applies the In predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldEmailConfirmationLabel, vs...))
}

// EmailConfirmationLabelNotIn applies the NotIn predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelNotIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldEmailConfirmationLabel, vs...))
}

// EmailConfirmationLabelGT applies the GT predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelGT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationLabelGTE applies the GTE predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelGTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationLabelLT applies the LT predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelLT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationLabelLTE applies the LTE predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelLTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldEmailConfirmationLabel, v))
}

// EmailConfirmationLabelIsNil applies the IsNil predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldEmailConfirmationLabel))
}

// EmailConfirmationLabelNotNil applies the NotNil predicate on the "email_confirmation_label" field.
func EmailConfirmationLabelNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldEmailConfirmationLabel))
}

// EmailConfirmationQrCodeEQ applies the EQ predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldEQ(FieldEmailConfirmationQrCode, v))
}

// EmailConfirmationQrCodeNEQ applies the NEQ predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeNEQ(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNEQ(FieldEmailConfirmationQrCode, v))
}

// EmailConfirmationQrCodeIn applies the In predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIn(FieldEmailConfirmationQrCode, vs...))
}

// EmailConfirmationQrCodeNotIn applies the NotIn predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeNotIn(vs ...time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotIn(FieldEmailConfirmationQrCode, vs...))
}

// EmailConfirmationQrCodeGT applies the GT predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeGT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGT(FieldEmailConfirmationQrCode, v))
}

// EmailConfirmationQrCodeGTE applies the GTE predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeGTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldGTE(FieldEmailConfirmationQrCode, v))
}

// EmailConfirmationQrCodeLT applies the LT predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeLT(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLT(FieldEmailConfirmationQrCode, v))
}

// EmailConfirmationQrCodeLTE applies the LTE predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeLTE(v time.Time) predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldLTE(FieldEmailConfirmationQrCode, v))
}

// EmailConfirmationQrCodeIsNil applies the IsNil predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeIsNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldIsNull(FieldEmailConfirmationQrCode))
}

// EmailConfirmationQrCodeNotNil applies the NotNil predicate on the "email_confirmation_qr_code" field.
func EmailConfirmationQrCodeNotNil() predicate.ReturnColli {
	return predicate.ReturnColli(sql.FieldNotNull(FieldEmailConfirmationQrCode))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipient applies the HasEdge predicate on the "recipient" edge.
func HasRecipient() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RecipientTable, RecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientWith applies the HasEdge predicate on the "recipient" edge with a given conditions (other predicates).
func HasRecipientWith(preds ...predicate.Address) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newRecipientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.Address) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortal applies the HasEdge predicate on the "return_portal" edge.
func HasReturnPortal() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReturnPortalTable, ReturnPortalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalWith applies the HasEdge predicate on the "return_portal" edge with a given conditions (other predicates).
func HasReturnPortalWith(preds ...predicate.ReturnPortal) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newReturnPortalStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackaging applies the HasEdge predicate on the "packaging" edge.
func HasPackaging() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingWith applies the HasEdge predicate on the "packaging" edge with a given conditions (other predicates).
func HasPackagingWith(preds ...predicate.Packaging) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newPackagingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnOrderLine applies the HasEdge predicate on the "return_order_line" edge.
func HasReturnOrderLine() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReturnOrderLineTable, ReturnOrderLineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnOrderLineWith applies the HasEdge predicate on the "return_order_line" edge with a given conditions (other predicates).
func HasReturnOrderLineWith(preds ...predicate.ReturnOrderLine) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newReturnOrderLineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnColliHistory applies the HasEdge predicate on the "return_colli_history" edge.
func HasReturnColliHistory() predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReturnColliHistoryTable, ReturnColliHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnColliHistoryWith applies the HasEdge predicate on the "return_colli_history" edge with a given conditions (other predicates).
func HasReturnColliHistoryWith(preds ...predicate.ReturnColliHistory) predicate.ReturnColli {
	return predicate.ReturnColli(func(s *sql.Selector) {
		step := newReturnColliHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReturnColli) predicate.ReturnColli {
	return predicate.ReturnColli(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReturnColli) predicate.ReturnColli {
	return predicate.ReturnColli(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReturnColli) predicate.ReturnColli {
	return predicate.ReturnColli(sql.NotPredicates(p))
}
