// Code generated by ent, DO NOT EDIT.

package returncolli

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the returncolli type in the database.
	Label = "return_colli"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldExpectedAt holds the string denoting the expected_at field in the database.
	FieldExpectedAt = "expected_at"
	// FieldLabelPdf holds the string denoting the label_pdf field in the database.
	FieldLabelPdf = "label_pdf"
	// FieldLabelPng holds the string denoting the label_png field in the database.
	FieldLabelPng = "label_png"
	// FieldQrCodePng holds the string denoting the qr_code_png field in the database.
	FieldQrCodePng = "qr_code_png"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEmailReceived holds the string denoting the email_received field in the database.
	FieldEmailReceived = "email_received"
	// FieldEmailAccepted holds the string denoting the email_accepted field in the database.
	FieldEmailAccepted = "email_accepted"
	// FieldEmailConfirmationLabel holds the string denoting the email_confirmation_label field in the database.
	FieldEmailConfirmationLabel = "email_confirmation_label"
	// FieldEmailConfirmationQrCode holds the string denoting the email_confirmation_qr_code field in the database.
	FieldEmailConfirmationQrCode = "email_confirmation_qr_code"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRecipient holds the string denoting the recipient edge name in mutations.
	EdgeRecipient = "recipient"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeReturnPortal holds the string denoting the return_portal edge name in mutations.
	EdgeReturnPortal = "return_portal"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// EdgeReturnOrderLine holds the string denoting the return_order_line edge name in mutations.
	EdgeReturnOrderLine = "return_order_line"
	// EdgeReturnColliHistory holds the string denoting the return_colli_history edge name in mutations.
	EdgeReturnColliHistory = "return_colli_history"
	// Table holds the table name of the returncolli in the database.
	Table = "return_collis"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "return_collis"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RecipientTable is the table that holds the recipient relation/edge.
	RecipientTable = "return_collis"
	// RecipientInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	RecipientInverseTable = "addresses"
	// RecipientColumn is the table column denoting the recipient relation/edge.
	RecipientColumn = "return_colli_recipient"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "return_collis"
	// SenderInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	SenderInverseTable = "addresses"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "return_colli_sender"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "return_collis"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_return_colli"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "return_collis"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "return_colli_delivery_option"
	// ReturnPortalTable is the table that holds the return_portal relation/edge.
	ReturnPortalTable = "return_collis"
	// ReturnPortalInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalInverseTable = "return_portals"
	// ReturnPortalColumn is the table column denoting the return_portal relation/edge.
	ReturnPortalColumn = "return_colli_return_portal"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "return_collis"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "return_colli_packaging"
	// ReturnOrderLineTable is the table that holds the return_order_line relation/edge.
	ReturnOrderLineTable = "return_order_lines"
	// ReturnOrderLineInverseTable is the table name for the ReturnOrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "returnorderline" package.
	ReturnOrderLineInverseTable = "return_order_lines"
	// ReturnOrderLineColumn is the table column denoting the return_order_line relation/edge.
	ReturnOrderLineColumn = "return_colli_return_order_line"
	// ReturnColliHistoryTable is the table that holds the return_colli_history relation/edge.
	ReturnColliHistoryTable = "return_colli_histories"
	// ReturnColliHistoryInverseTable is the table name for the ReturnColliHistory entity.
	// It exists in this package in order to avoid circular dependency with the "returncollihistory" package.
	ReturnColliHistoryInverseTable = "return_colli_histories"
	// ReturnColliHistoryColumn is the table column denoting the return_colli_history relation/edge.
	ReturnColliHistoryColumn = "return_colli_return_colli_history"
)

// Columns holds all SQL columns for returncolli fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldExpectedAt,
	FieldLabelPdf,
	FieldLabelPng,
	FieldQrCodePng,
	FieldComment,
	FieldCreatedAt,
	FieldStatus,
	FieldEmailReceived,
	FieldEmailAccepted,
	FieldEmailConfirmationLabel,
	FieldEmailConfirmationQrCode,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "return_collis"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_return_colli",
	"return_colli_recipient",
	"return_colli_sender",
	"return_colli_delivery_option",
	"return_colli_return_portal",
	"return_colli_packaging",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [4]ent.Hook
	Policy ent.Policy
	// DefaultExpectedAt holds the default value on creation for the "expected_at" field.
	DefaultExpectedAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusOpened is the default value of the Status enum.
const DefaultStatus = StatusOpened

// Status values.
const (
	StatusOpened   Status = "Opened"
	StatusPending  Status = "Pending"
	StatusInbound  Status = "Inbound"
	StatusReceived Status = "Received"
	StatusAccepted Status = "Accepted"
	StatusDeclined Status = "Declined"
	StatusDeleted  Status = "Deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOpened, StatusPending, StatusInbound, StatusReceived, StatusAccepted, StatusDeclined, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("returncolli: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ReturnColli queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByExpectedAt orders the results by the expected_at field.
func ByExpectedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedAt, opts...).ToFunc()
}

// ByLabelPdf orders the results by the label_pdf field.
func ByLabelPdf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelPdf, opts...).ToFunc()
}

// ByLabelPng orders the results by the label_png field.
func ByLabelPng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabelPng, opts...).ToFunc()
}

// ByQrCodePng orders the results by the qr_code_png field.
func ByQrCodePng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQrCodePng, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEmailReceived orders the results by the email_received field.
func ByEmailReceived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailReceived, opts...).ToFunc()
}

// ByEmailAccepted orders the results by the email_accepted field.
func ByEmailAccepted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailAccepted, opts...).ToFunc()
}

// ByEmailConfirmationLabel orders the results by the email_confirmation_label field.
func ByEmailConfirmationLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailConfirmationLabel, opts...).ToFunc()
}

// ByEmailConfirmationQrCode orders the results by the email_confirmation_qr_code field.
func ByEmailConfirmationQrCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailConfirmationQrCode, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecipientField orders the results by recipient field.
func ByRecipientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipientStep(), sql.OrderByField(field, opts...))
	}
}

// BySenderField orders the results by sender field.
func BySenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionField orders the results by delivery_option field.
func ByDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnPortalField orders the results by return_portal field.
func ByReturnPortalField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingField orders the results by packaging field.
func ByPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnOrderLineCount orders the results by return_order_line count.
func ByReturnOrderLineCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnOrderLineStep(), opts...)
	}
}

// ByReturnOrderLine orders the results by return_order_line terms.
func ByReturnOrderLine(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnOrderLineStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnColliHistoryCount orders the results by return_colli_history count.
func ByReturnColliHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnColliHistoryStep(), opts...)
	}
}

// ByReturnColliHistory orders the results by return_colli_history terms.
func ByReturnColliHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newRecipientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RecipientTable, RecipientColumn),
	)
}
func newSenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
func newReturnPortalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ReturnPortalTable, ReturnPortalColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
	)
}
func newReturnOrderLineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnOrderLineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReturnOrderLineTable, ReturnOrderLineColumn),
	)
}
func newReturnColliHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReturnColliHistoryTable, ReturnColliHistoryColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
