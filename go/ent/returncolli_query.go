// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnColliQuery is the builder for querying ReturnColli entities.
type ReturnColliQuery struct {
	config
	ctx                         *QueryContext
	order                       []returncolli.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.ReturnColli
	withTenant                  *TenantQuery
	withRecipient               *AddressQuery
	withSender                  *AddressQuery
	withOrder                   *OrderQuery
	withDeliveryOption          *DeliveryOptionQuery
	withReturnPortal            *ReturnPortalQuery
	withPackaging               *PackagingQuery
	withReturnOrderLine         *ReturnOrderLineQuery
	withReturnColliHistory      *ReturnColliHistoryQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*ReturnColli) error
	withNamedReturnOrderLine    map[string]*ReturnOrderLineQuery
	withNamedReturnColliHistory map[string]*ReturnColliHistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReturnColliQuery builder.
func (rcq *ReturnColliQuery) Where(ps ...predicate.ReturnColli) *ReturnColliQuery {
	rcq.predicates = append(rcq.predicates, ps...)
	return rcq
}

// Limit the number of records to be returned by this query.
func (rcq *ReturnColliQuery) Limit(limit int) *ReturnColliQuery {
	rcq.ctx.Limit = &limit
	return rcq
}

// Offset to start from.
func (rcq *ReturnColliQuery) Offset(offset int) *ReturnColliQuery {
	rcq.ctx.Offset = &offset
	return rcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcq *ReturnColliQuery) Unique(unique bool) *ReturnColliQuery {
	rcq.ctx.Unique = &unique
	return rcq
}

// Order specifies how the records should be ordered.
func (rcq *ReturnColliQuery) Order(o ...returncolli.OrderOption) *ReturnColliQuery {
	rcq.order = append(rcq.order, o...)
	return rcq
}

// QueryTenant chains the current query on the "tenant" edge.
func (rcq *ReturnColliQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.TenantTable, returncolli.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecipient chains the current query on the "recipient" edge.
func (rcq *ReturnColliQuery) QueryRecipient() *AddressQuery {
	query := (&AddressClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.RecipientTable, returncolli.RecipientColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySender chains the current query on the "sender" edge.
func (rcq *ReturnColliQuery) QuerySender() *AddressQuery {
	query := (&AddressClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.SenderTable, returncolli.SenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the "order" edge.
func (rcq *ReturnColliQuery) QueryOrder() *OrderQuery {
	query := (&OrderClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returncolli.OrderTable, returncolli.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (rcq *ReturnColliQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.DeliveryOptionTable, returncolli.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnPortal chains the current query on the "return_portal" edge.
func (rcq *ReturnColliQuery) QueryReturnPortal() *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.ReturnPortalTable, returncolli.ReturnPortalColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackaging chains the current query on the "packaging" edge.
func (rcq *ReturnColliQuery) QueryPackaging() *PackagingQuery {
	query := (&PackagingClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.PackagingTable, returncolli.PackagingColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnOrderLine chains the current query on the "return_order_line" edge.
func (rcq *ReturnColliQuery) QueryReturnOrderLine() *ReturnOrderLineQuery {
	query := (&ReturnOrderLineClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(returnorderline.Table, returnorderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, returncolli.ReturnOrderLineTable, returncolli.ReturnOrderLineColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnColliHistory chains the current query on the "return_colli_history" edge.
func (rcq *ReturnColliQuery) QueryReturnColliHistory() *ReturnColliHistoryQuery {
	query := (&ReturnColliHistoryClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, selector),
			sqlgraph.To(returncollihistory.Table, returncollihistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, returncolli.ReturnColliHistoryTable, returncolli.ReturnColliHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReturnColli entity from the query.
// Returns a *NotFoundError when no ReturnColli was found.
func (rcq *ReturnColliQuery) First(ctx context.Context) (*ReturnColli, error) {
	nodes, err := rcq.Limit(1).All(setContextOp(ctx, rcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{returncolli.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcq *ReturnColliQuery) FirstX(ctx context.Context) *ReturnColli {
	node, err := rcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReturnColli ID from the query.
// Returns a *NotFoundError when no ReturnColli ID was found.
func (rcq *ReturnColliQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = rcq.Limit(1).IDs(setContextOp(ctx, rcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{returncolli.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcq *ReturnColliQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := rcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReturnColli entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ReturnColli entity is found.
// Returns a *NotFoundError when no ReturnColli entities are found.
func (rcq *ReturnColliQuery) Only(ctx context.Context) (*ReturnColli, error) {
	nodes, err := rcq.Limit(2).All(setContextOp(ctx, rcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{returncolli.Label}
	default:
		return nil, &NotSingularError{returncolli.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcq *ReturnColliQuery) OnlyX(ctx context.Context) *ReturnColli {
	node, err := rcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReturnColli ID in the query.
// Returns a *NotSingularError when more than one ReturnColli ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcq *ReturnColliQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = rcq.Limit(2).IDs(setContextOp(ctx, rcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{returncolli.Label}
	default:
		err = &NotSingularError{returncolli.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcq *ReturnColliQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := rcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReturnCollis.
func (rcq *ReturnColliQuery) All(ctx context.Context) ([]*ReturnColli, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryAll)
	if err := rcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ReturnColli, *ReturnColliQuery]()
	return withInterceptors[[]*ReturnColli](ctx, rcq, qr, rcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcq *ReturnColliQuery) AllX(ctx context.Context) []*ReturnColli {
	nodes, err := rcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReturnColli IDs.
func (rcq *ReturnColliQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if rcq.ctx.Unique == nil && rcq.path != nil {
		rcq.Unique(true)
	}
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryIDs)
	if err = rcq.Select(returncolli.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcq *ReturnColliQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := rcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcq *ReturnColliQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryCount)
	if err := rcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcq, querierCount[*ReturnColliQuery](), rcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcq *ReturnColliQuery) CountX(ctx context.Context) int {
	count, err := rcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcq *ReturnColliQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcq.ctx, ent.OpQueryExist)
	switch _, err := rcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcq *ReturnColliQuery) ExistX(ctx context.Context) bool {
	exist, err := rcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReturnColliQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcq *ReturnColliQuery) Clone() *ReturnColliQuery {
	if rcq == nil {
		return nil
	}
	return &ReturnColliQuery{
		config:                 rcq.config,
		ctx:                    rcq.ctx.Clone(),
		order:                  append([]returncolli.OrderOption{}, rcq.order...),
		inters:                 append([]Interceptor{}, rcq.inters...),
		predicates:             append([]predicate.ReturnColli{}, rcq.predicates...),
		withTenant:             rcq.withTenant.Clone(),
		withRecipient:          rcq.withRecipient.Clone(),
		withSender:             rcq.withSender.Clone(),
		withOrder:              rcq.withOrder.Clone(),
		withDeliveryOption:     rcq.withDeliveryOption.Clone(),
		withReturnPortal:       rcq.withReturnPortal.Clone(),
		withPackaging:          rcq.withPackaging.Clone(),
		withReturnOrderLine:    rcq.withReturnOrderLine.Clone(),
		withReturnColliHistory: rcq.withReturnColliHistory.Clone(),
		// clone intermediate query.
		sql:  rcq.sql.Clone(),
		path: rcq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithTenant(opts ...func(*TenantQuery)) *ReturnColliQuery {
	query := (&TenantClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withTenant = query
	return rcq
}

// WithRecipient tells the query-builder to eager-load the nodes that are connected to
// the "recipient" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithRecipient(opts ...func(*AddressQuery)) *ReturnColliQuery {
	query := (&AddressClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withRecipient = query
	return rcq
}

// WithSender tells the query-builder to eager-load the nodes that are connected to
// the "sender" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithSender(opts ...func(*AddressQuery)) *ReturnColliQuery {
	query := (&AddressClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withSender = query
	return rcq
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithOrder(opts ...func(*OrderQuery)) *ReturnColliQuery {
	query := (&OrderClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withOrder = query
	return rcq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *ReturnColliQuery {
	query := (&DeliveryOptionClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withDeliveryOption = query
	return rcq
}

// WithReturnPortal tells the query-builder to eager-load the nodes that are connected to
// the "return_portal" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithReturnPortal(opts ...func(*ReturnPortalQuery)) *ReturnColliQuery {
	query := (&ReturnPortalClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withReturnPortal = query
	return rcq
}

// WithPackaging tells the query-builder to eager-load the nodes that are connected to
// the "packaging" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithPackaging(opts ...func(*PackagingQuery)) *ReturnColliQuery {
	query := (&PackagingClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withPackaging = query
	return rcq
}

// WithReturnOrderLine tells the query-builder to eager-load the nodes that are connected to
// the "return_order_line" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithReturnOrderLine(opts ...func(*ReturnOrderLineQuery)) *ReturnColliQuery {
	query := (&ReturnOrderLineClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withReturnOrderLine = query
	return rcq
}

// WithReturnColliHistory tells the query-builder to eager-load the nodes that are connected to
// the "return_colli_history" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithReturnColliHistory(opts ...func(*ReturnColliHistoryQuery)) *ReturnColliQuery {
	query := (&ReturnColliHistoryClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withReturnColliHistory = query
	return rcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReturnColli.Query().
//		GroupBy(returncolli.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rcq *ReturnColliQuery) GroupBy(field string, fields ...string) *ReturnColliGroupBy {
	rcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ReturnColliGroupBy{build: rcq}
	grbuild.flds = &rcq.ctx.Fields
	grbuild.label = returncolli.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ReturnColli.Query().
//		Select(returncolli.FieldTenantID).
//		Scan(ctx, &v)
func (rcq *ReturnColliQuery) Select(fields ...string) *ReturnColliSelect {
	rcq.ctx.Fields = append(rcq.ctx.Fields, fields...)
	sbuild := &ReturnColliSelect{ReturnColliQuery: rcq}
	sbuild.label = returncolli.Label
	sbuild.flds, sbuild.scan = &rcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ReturnColliSelect configured with the given aggregations.
func (rcq *ReturnColliQuery) Aggregate(fns ...AggregateFunc) *ReturnColliSelect {
	return rcq.Select().Aggregate(fns...)
}

func (rcq *ReturnColliQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcq.ctx.Fields {
		if !returncolli.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rcq.path != nil {
		prev, err := rcq.path(ctx)
		if err != nil {
			return err
		}
		rcq.sql = prev
	}
	if returncolli.Policy == nil {
		return errors.New("ent: uninitialized returncolli.Policy (forgotten import ent/runtime?)")
	}
	if err := returncolli.Policy.EvalQuery(ctx, rcq); err != nil {
		return err
	}
	return nil
}

func (rcq *ReturnColliQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ReturnColli, error) {
	var (
		nodes       = []*ReturnColli{}
		withFKs     = rcq.withFKs
		_spec       = rcq.querySpec()
		loadedTypes = [9]bool{
			rcq.withTenant != nil,
			rcq.withRecipient != nil,
			rcq.withSender != nil,
			rcq.withOrder != nil,
			rcq.withDeliveryOption != nil,
			rcq.withReturnPortal != nil,
			rcq.withPackaging != nil,
			rcq.withReturnOrderLine != nil,
			rcq.withReturnColliHistory != nil,
		}
	)
	if rcq.withRecipient != nil || rcq.withSender != nil || rcq.withOrder != nil || rcq.withDeliveryOption != nil || rcq.withReturnPortal != nil || rcq.withPackaging != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, returncolli.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ReturnColli).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ReturnColli{config: rcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rcq.withTenant; query != nil {
		if err := rcq.loadTenant(ctx, query, nodes, nil,
			func(n *ReturnColli, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withRecipient; query != nil {
		if err := rcq.loadRecipient(ctx, query, nodes, nil,
			func(n *ReturnColli, e *Address) { n.Edges.Recipient = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withSender; query != nil {
		if err := rcq.loadSender(ctx, query, nodes, nil,
			func(n *ReturnColli, e *Address) { n.Edges.Sender = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withOrder; query != nil {
		if err := rcq.loadOrder(ctx, query, nodes, nil,
			func(n *ReturnColli, e *Order) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withDeliveryOption; query != nil {
		if err := rcq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *ReturnColli, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withReturnPortal; query != nil {
		if err := rcq.loadReturnPortal(ctx, query, nodes, nil,
			func(n *ReturnColli, e *ReturnPortal) { n.Edges.ReturnPortal = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withPackaging; query != nil {
		if err := rcq.loadPackaging(ctx, query, nodes, nil,
			func(n *ReturnColli, e *Packaging) { n.Edges.Packaging = e }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withReturnOrderLine; query != nil {
		if err := rcq.loadReturnOrderLine(ctx, query, nodes,
			func(n *ReturnColli) { n.Edges.ReturnOrderLine = []*ReturnOrderLine{} },
			func(n *ReturnColli, e *ReturnOrderLine) { n.Edges.ReturnOrderLine = append(n.Edges.ReturnOrderLine, e) }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withReturnColliHistory; query != nil {
		if err := rcq.loadReturnColliHistory(ctx, query, nodes,
			func(n *ReturnColli) { n.Edges.ReturnColliHistory = []*ReturnColliHistory{} },
			func(n *ReturnColli, e *ReturnColliHistory) {
				n.Edges.ReturnColliHistory = append(n.Edges.ReturnColliHistory, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range rcq.withNamedReturnOrderLine {
		if err := rcq.loadReturnOrderLine(ctx, query, nodes,
			func(n *ReturnColli) { n.appendNamedReturnOrderLine(name) },
			func(n *ReturnColli, e *ReturnOrderLine) { n.appendNamedReturnOrderLine(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rcq.withNamedReturnColliHistory {
		if err := rcq.loadReturnColliHistory(ctx, query, nodes,
			func(n *ReturnColli) { n.appendNamedReturnColliHistory(name) },
			func(n *ReturnColli, e *ReturnColliHistory) { n.appendNamedReturnColliHistory(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rcq.loadTotal {
		if err := rcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rcq *ReturnColliQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadRecipient(ctx context.Context, query *AddressQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *Address)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		if nodes[i].return_colli_recipient == nil {
			continue
		}
		fk := *nodes[i].return_colli_recipient
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_colli_recipient" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadSender(ctx context.Context, query *AddressQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *Address)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		if nodes[i].return_colli_sender == nil {
			continue
		}
		fk := *nodes[i].return_colli_sender
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_colli_sender" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadOrder(ctx context.Context, query *OrderQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *Order)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		if nodes[i].order_return_colli == nil {
			continue
		}
		fk := *nodes[i].order_return_colli
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_return_colli" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		if nodes[i].return_colli_delivery_option == nil {
			continue
		}
		fk := *nodes[i].return_colli_delivery_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_colli_delivery_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadReturnPortal(ctx context.Context, query *ReturnPortalQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *ReturnPortal)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		if nodes[i].return_colli_return_portal == nil {
			continue
		}
		fk := *nodes[i].return_colli_return_portal
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(returnportal.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_colli_return_portal" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadPackaging(ctx context.Context, query *PackagingQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *Packaging)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnColli)
	for i := range nodes {
		if nodes[i].return_colli_packaging == nil {
			continue
		}
		fk := *nodes[i].return_colli_packaging
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packaging.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_colli_packaging" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rcq *ReturnColliQuery) loadReturnOrderLine(ctx context.Context, query *ReturnOrderLineQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *ReturnOrderLine)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ReturnColli)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnOrderLine(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(returncolli.ReturnOrderLineColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_colli_return_order_line
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_colli_return_order_line" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_colli_return_order_line" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rcq *ReturnColliQuery) loadReturnColliHistory(ctx context.Context, query *ReturnColliHistoryQuery, nodes []*ReturnColli, init func(*ReturnColli), assign func(*ReturnColli, *ReturnColliHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ReturnColli)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColliHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(returncolli.ReturnColliHistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_colli_return_colli_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_colli_return_colli_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_colli_return_colli_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rcq *ReturnColliQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcq.querySpec()
	if len(rcq.modifiers) > 0 {
		_spec.Modifiers = rcq.modifiers
	}
	_spec.Node.Columns = rcq.ctx.Fields
	if len(rcq.ctx.Fields) > 0 {
		_spec.Unique = rcq.ctx.Unique != nil && *rcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcq.driver, _spec)
}

func (rcq *ReturnColliQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(returncolli.Table, returncolli.Columns, sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString))
	_spec.From = rcq.sql
	if unique := rcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcq.path != nil {
		_spec.Unique = true
	}
	if fields := rcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returncolli.FieldID)
		for i := range fields {
			if fields[i] != returncolli.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rcq.withTenant != nil {
			_spec.Node.AddColumnOnce(returncolli.FieldTenantID)
		}
	}
	if ps := rcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcq *ReturnColliQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcq.driver.Dialect())
	t1 := builder.Table(returncolli.Table)
	columns := rcq.ctx.Fields
	if len(columns) == 0 {
		columns = returncolli.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcq.sql != nil {
		selector = rcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcq.ctx.Unique != nil && *rcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rcq.predicates {
		p(selector)
	}
	for _, p := range rcq.order {
		p(selector)
	}
	if offset := rcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedReturnOrderLine tells the query-builder to eager-load the nodes that are connected to the "return_order_line"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithNamedReturnOrderLine(name string, opts ...func(*ReturnOrderLineQuery)) *ReturnColliQuery {
	query := (&ReturnOrderLineClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rcq.withNamedReturnOrderLine == nil {
		rcq.withNamedReturnOrderLine = make(map[string]*ReturnOrderLineQuery)
	}
	rcq.withNamedReturnOrderLine[name] = query
	return rcq
}

// WithNamedReturnColliHistory tells the query-builder to eager-load the nodes that are connected to the "return_colli_history"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rcq *ReturnColliQuery) WithNamedReturnColliHistory(name string, opts ...func(*ReturnColliHistoryQuery)) *ReturnColliQuery {
	query := (&ReturnColliHistoryClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rcq.withNamedReturnColliHistory == nil {
		rcq.withNamedReturnColliHistory = make(map[string]*ReturnColliHistoryQuery)
	}
	rcq.withNamedReturnColliHistory[name] = query
	return rcq
}

// ReturnColliGroupBy is the group-by builder for ReturnColli entities.
type ReturnColliGroupBy struct {
	selector
	build *ReturnColliQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcgb *ReturnColliGroupBy) Aggregate(fns ...AggregateFunc) *ReturnColliGroupBy {
	rcgb.fns = append(rcgb.fns, fns...)
	return rcgb
}

// Scan applies the selector query and scans the result into the given value.
func (rcgb *ReturnColliGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcgb.build.ctx, ent.OpQueryGroupBy)
	if err := rcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReturnColliQuery, *ReturnColliGroupBy](ctx, rcgb.build, rcgb, rcgb.build.inters, v)
}

func (rcgb *ReturnColliGroupBy) sqlScan(ctx context.Context, root *ReturnColliQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcgb.fns))
	for _, fn := range rcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcgb.flds)+len(rcgb.fns))
		for _, f := range *rcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ReturnColliSelect is the builder for selecting fields of ReturnColli entities.
type ReturnColliSelect struct {
	*ReturnColliQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcs *ReturnColliSelect) Aggregate(fns ...AggregateFunc) *ReturnColliSelect {
	rcs.fns = append(rcs.fns, fns...)
	return rcs
}

// Scan applies the selector query and scans the result into the given value.
func (rcs *ReturnColliSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcs.ctx, ent.OpQuerySelect)
	if err := rcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReturnColliQuery, *ReturnColliSelect](ctx, rcs.ReturnColliQuery, rcs, rcs.inters, v)
}

func (rcs *ReturnColliSelect) sqlScan(ctx context.Context, root *ReturnColliQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcs.fns))
	for _, fn := range rcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
