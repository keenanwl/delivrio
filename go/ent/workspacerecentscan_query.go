// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceRecentScanQuery is the builder for querying WorkspaceRecentScan entities.
type WorkspaceRecentScanQuery struct {
	config
	ctx                *QueryContext
	order              []workspacerecentscan.OrderOption
	inters             []Interceptor
	predicates         []predicate.WorkspaceRecentScan
	withTenant         *TenantQuery
	withShipmentParcel *ShipmentParcelQuery
	withUser           *UserQuery
	withFKs            bool
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*WorkspaceRecentScan) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkspaceRecentScanQuery builder.
func (wrsq *WorkspaceRecentScanQuery) Where(ps ...predicate.WorkspaceRecentScan) *WorkspaceRecentScanQuery {
	wrsq.predicates = append(wrsq.predicates, ps...)
	return wrsq
}

// Limit the number of records to be returned by this query.
func (wrsq *WorkspaceRecentScanQuery) Limit(limit int) *WorkspaceRecentScanQuery {
	wrsq.ctx.Limit = &limit
	return wrsq
}

// Offset to start from.
func (wrsq *WorkspaceRecentScanQuery) Offset(offset int) *WorkspaceRecentScanQuery {
	wrsq.ctx.Offset = &offset
	return wrsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wrsq *WorkspaceRecentScanQuery) Unique(unique bool) *WorkspaceRecentScanQuery {
	wrsq.ctx.Unique = &unique
	return wrsq
}

// Order specifies how the records should be ordered.
func (wrsq *WorkspaceRecentScanQuery) Order(o ...workspacerecentscan.OrderOption) *WorkspaceRecentScanQuery {
	wrsq.order = append(wrsq.order, o...)
	return wrsq
}

// QueryTenant chains the current query on the "tenant" edge.
func (wrsq *WorkspaceRecentScanQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: wrsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspacerecentscan.Table, workspacerecentscan.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workspacerecentscan.TenantTable, workspacerecentscan.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentParcel chains the current query on the "shipment_parcel" edge.
func (wrsq *WorkspaceRecentScanQuery) QueryShipmentParcel() *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: wrsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspacerecentscan.Table, workspacerecentscan.FieldID, selector),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workspacerecentscan.ShipmentParcelTable, workspacerecentscan.ShipmentParcelColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (wrsq *WorkspaceRecentScanQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: wrsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wrsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wrsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workspacerecentscan.Table, workspacerecentscan.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workspacerecentscan.UserTable, workspacerecentscan.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(wrsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkspaceRecentScan entity from the query.
// Returns a *NotFoundError when no WorkspaceRecentScan was found.
func (wrsq *WorkspaceRecentScanQuery) First(ctx context.Context) (*WorkspaceRecentScan, error) {
	nodes, err := wrsq.Limit(1).All(setContextOp(ctx, wrsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workspacerecentscan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) FirstX(ctx context.Context) *WorkspaceRecentScan {
	node, err := wrsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkspaceRecentScan ID from the query.
// Returns a *NotFoundError when no WorkspaceRecentScan ID was found.
func (wrsq *WorkspaceRecentScanQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = wrsq.Limit(1).IDs(setContextOp(ctx, wrsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workspacerecentscan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := wrsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkspaceRecentScan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkspaceRecentScan entity is found.
// Returns a *NotFoundError when no WorkspaceRecentScan entities are found.
func (wrsq *WorkspaceRecentScanQuery) Only(ctx context.Context) (*WorkspaceRecentScan, error) {
	nodes, err := wrsq.Limit(2).All(setContextOp(ctx, wrsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workspacerecentscan.Label}
	default:
		return nil, &NotSingularError{workspacerecentscan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) OnlyX(ctx context.Context) *WorkspaceRecentScan {
	node, err := wrsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkspaceRecentScan ID in the query.
// Returns a *NotSingularError when more than one WorkspaceRecentScan ID is found.
// Returns a *NotFoundError when no entities are found.
func (wrsq *WorkspaceRecentScanQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = wrsq.Limit(2).IDs(setContextOp(ctx, wrsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workspacerecentscan.Label}
	default:
		err = &NotSingularError{workspacerecentscan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := wrsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkspaceRecentScans.
func (wrsq *WorkspaceRecentScanQuery) All(ctx context.Context) ([]*WorkspaceRecentScan, error) {
	ctx = setContextOp(ctx, wrsq.ctx, ent.OpQueryAll)
	if err := wrsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkspaceRecentScan, *WorkspaceRecentScanQuery]()
	return withInterceptors[[]*WorkspaceRecentScan](ctx, wrsq, qr, wrsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) AllX(ctx context.Context) []*WorkspaceRecentScan {
	nodes, err := wrsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkspaceRecentScan IDs.
func (wrsq *WorkspaceRecentScanQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if wrsq.ctx.Unique == nil && wrsq.path != nil {
		wrsq.Unique(true)
	}
	ctx = setContextOp(ctx, wrsq.ctx, ent.OpQueryIDs)
	if err = wrsq.Select(workspacerecentscan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := wrsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wrsq *WorkspaceRecentScanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wrsq.ctx, ent.OpQueryCount)
	if err := wrsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wrsq, querierCount[*WorkspaceRecentScanQuery](), wrsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) CountX(ctx context.Context) int {
	count, err := wrsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wrsq *WorkspaceRecentScanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wrsq.ctx, ent.OpQueryExist)
	switch _, err := wrsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wrsq *WorkspaceRecentScanQuery) ExistX(ctx context.Context) bool {
	exist, err := wrsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkspaceRecentScanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wrsq *WorkspaceRecentScanQuery) Clone() *WorkspaceRecentScanQuery {
	if wrsq == nil {
		return nil
	}
	return &WorkspaceRecentScanQuery{
		config:             wrsq.config,
		ctx:                wrsq.ctx.Clone(),
		order:              append([]workspacerecentscan.OrderOption{}, wrsq.order...),
		inters:             append([]Interceptor{}, wrsq.inters...),
		predicates:         append([]predicate.WorkspaceRecentScan{}, wrsq.predicates...),
		withTenant:         wrsq.withTenant.Clone(),
		withShipmentParcel: wrsq.withShipmentParcel.Clone(),
		withUser:           wrsq.withUser.Clone(),
		// clone intermediate query.
		sql:  wrsq.sql.Clone(),
		path: wrsq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (wrsq *WorkspaceRecentScanQuery) WithTenant(opts ...func(*TenantQuery)) *WorkspaceRecentScanQuery {
	query := (&TenantClient{config: wrsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrsq.withTenant = query
	return wrsq
}

// WithShipmentParcel tells the query-builder to eager-load the nodes that are connected to
// the "shipment_parcel" edge. The optional arguments are used to configure the query builder of the edge.
func (wrsq *WorkspaceRecentScanQuery) WithShipmentParcel(opts ...func(*ShipmentParcelQuery)) *WorkspaceRecentScanQuery {
	query := (&ShipmentParcelClient{config: wrsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrsq.withShipmentParcel = query
	return wrsq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (wrsq *WorkspaceRecentScanQuery) WithUser(opts ...func(*UserQuery)) *WorkspaceRecentScanQuery {
	query := (&UserClient{config: wrsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wrsq.withUser = query
	return wrsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkspaceRecentScan.Query().
//		GroupBy(workspacerecentscan.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wrsq *WorkspaceRecentScanQuery) GroupBy(field string, fields ...string) *WorkspaceRecentScanGroupBy {
	wrsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkspaceRecentScanGroupBy{build: wrsq}
	grbuild.flds = &wrsq.ctx.Fields
	grbuild.label = workspacerecentscan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.WorkspaceRecentScan.Query().
//		Select(workspacerecentscan.FieldTenantID).
//		Scan(ctx, &v)
func (wrsq *WorkspaceRecentScanQuery) Select(fields ...string) *WorkspaceRecentScanSelect {
	wrsq.ctx.Fields = append(wrsq.ctx.Fields, fields...)
	sbuild := &WorkspaceRecentScanSelect{WorkspaceRecentScanQuery: wrsq}
	sbuild.label = workspacerecentscan.Label
	sbuild.flds, sbuild.scan = &wrsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkspaceRecentScanSelect configured with the given aggregations.
func (wrsq *WorkspaceRecentScanQuery) Aggregate(fns ...AggregateFunc) *WorkspaceRecentScanSelect {
	return wrsq.Select().Aggregate(fns...)
}

func (wrsq *WorkspaceRecentScanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wrsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wrsq); err != nil {
				return err
			}
		}
	}
	for _, f := range wrsq.ctx.Fields {
		if !workspacerecentscan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wrsq.path != nil {
		prev, err := wrsq.path(ctx)
		if err != nil {
			return err
		}
		wrsq.sql = prev
	}
	if workspacerecentscan.Policy == nil {
		return errors.New("ent: uninitialized workspacerecentscan.Policy (forgotten import ent/runtime?)")
	}
	if err := workspacerecentscan.Policy.EvalQuery(ctx, wrsq); err != nil {
		return err
	}
	return nil
}

func (wrsq *WorkspaceRecentScanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkspaceRecentScan, error) {
	var (
		nodes       = []*WorkspaceRecentScan{}
		withFKs     = wrsq.withFKs
		_spec       = wrsq.querySpec()
		loadedTypes = [3]bool{
			wrsq.withTenant != nil,
			wrsq.withShipmentParcel != nil,
			wrsq.withUser != nil,
		}
	)
	if wrsq.withShipmentParcel != nil || wrsq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workspacerecentscan.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkspaceRecentScan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkspaceRecentScan{config: wrsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wrsq.modifiers) > 0 {
		_spec.Modifiers = wrsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wrsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wrsq.withTenant; query != nil {
		if err := wrsq.loadTenant(ctx, query, nodes, nil,
			func(n *WorkspaceRecentScan, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := wrsq.withShipmentParcel; query != nil {
		if err := wrsq.loadShipmentParcel(ctx, query, nodes, nil,
			func(n *WorkspaceRecentScan, e *ShipmentParcel) { n.Edges.ShipmentParcel = e }); err != nil {
			return nil, err
		}
	}
	if query := wrsq.withUser; query != nil {
		if err := wrsq.loadUser(ctx, query, nodes, nil,
			func(n *WorkspaceRecentScan, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	for i := range wrsq.loadTotal {
		if err := wrsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wrsq *WorkspaceRecentScanQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*WorkspaceRecentScan, init func(*WorkspaceRecentScan), assign func(*WorkspaceRecentScan, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*WorkspaceRecentScan)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wrsq *WorkspaceRecentScanQuery) loadShipmentParcel(ctx context.Context, query *ShipmentParcelQuery, nodes []*WorkspaceRecentScan, init func(*WorkspaceRecentScan), assign func(*WorkspaceRecentScan, *ShipmentParcel)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*WorkspaceRecentScan)
	for i := range nodes {
		if nodes[i].workspace_recent_scan_shipment_parcel == nil {
			continue
		}
		fk := *nodes[i].workspace_recent_scan_shipment_parcel
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipmentparcel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workspace_recent_scan_shipment_parcel" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wrsq *WorkspaceRecentScanQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*WorkspaceRecentScan, init func(*WorkspaceRecentScan), assign func(*WorkspaceRecentScan, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*WorkspaceRecentScan)
	for i := range nodes {
		if nodes[i].workspace_recent_scan_user == nil {
			continue
		}
		fk := *nodes[i].workspace_recent_scan_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workspace_recent_scan_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wrsq *WorkspaceRecentScanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wrsq.querySpec()
	if len(wrsq.modifiers) > 0 {
		_spec.Modifiers = wrsq.modifiers
	}
	_spec.Node.Columns = wrsq.ctx.Fields
	if len(wrsq.ctx.Fields) > 0 {
		_spec.Unique = wrsq.ctx.Unique != nil && *wrsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wrsq.driver, _spec)
}

func (wrsq *WorkspaceRecentScanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workspacerecentscan.Table, workspacerecentscan.Columns, sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString))
	_spec.From = wrsq.sql
	if unique := wrsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wrsq.path != nil {
		_spec.Unique = true
	}
	if fields := wrsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workspacerecentscan.FieldID)
		for i := range fields {
			if fields[i] != workspacerecentscan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wrsq.withTenant != nil {
			_spec.Node.AddColumnOnce(workspacerecentscan.FieldTenantID)
		}
	}
	if ps := wrsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wrsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wrsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wrsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wrsq *WorkspaceRecentScanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wrsq.driver.Dialect())
	t1 := builder.Table(workspacerecentscan.Table)
	columns := wrsq.ctx.Fields
	if len(columns) == 0 {
		columns = workspacerecentscan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wrsq.sql != nil {
		selector = wrsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wrsq.ctx.Unique != nil && *wrsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wrsq.predicates {
		p(selector)
	}
	for _, p := range wrsq.order {
		p(selector)
	}
	if offset := wrsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wrsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkspaceRecentScanGroupBy is the group-by builder for WorkspaceRecentScan entities.
type WorkspaceRecentScanGroupBy struct {
	selector
	build *WorkspaceRecentScanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wrsgb *WorkspaceRecentScanGroupBy) Aggregate(fns ...AggregateFunc) *WorkspaceRecentScanGroupBy {
	wrsgb.fns = append(wrsgb.fns, fns...)
	return wrsgb
}

// Scan applies the selector query and scans the result into the given value.
func (wrsgb *WorkspaceRecentScanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrsgb.build.ctx, ent.OpQueryGroupBy)
	if err := wrsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkspaceRecentScanQuery, *WorkspaceRecentScanGroupBy](ctx, wrsgb.build, wrsgb, wrsgb.build.inters, v)
}

func (wrsgb *WorkspaceRecentScanGroupBy) sqlScan(ctx context.Context, root *WorkspaceRecentScanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wrsgb.fns))
	for _, fn := range wrsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wrsgb.flds)+len(wrsgb.fns))
		for _, f := range *wrsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wrsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkspaceRecentScanSelect is the builder for selecting fields of WorkspaceRecentScan entities.
type WorkspaceRecentScanSelect struct {
	*WorkspaceRecentScanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wrss *WorkspaceRecentScanSelect) Aggregate(fns ...AggregateFunc) *WorkspaceRecentScanSelect {
	wrss.fns = append(wrss.fns, fns...)
	return wrss
}

// Scan applies the selector query and scans the result into the given value.
func (wrss *WorkspaceRecentScanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wrss.ctx, ent.OpQuerySelect)
	if err := wrss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkspaceRecentScanQuery, *WorkspaceRecentScanSelect](ctx, wrss.WorkspaceRecentScanQuery, wrss, wrss.inters, v)
}

func (wrss *WorkspaceRecentScanSelect) sqlScan(ctx context.Context, root *WorkspaceRecentScanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wrss.fns))
	for _, fn := range wrss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wrss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wrss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
