// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ColliQuery is the builder for querying Colli entities.
type ColliQuery struct {
	config
	ctx                              *QueryContext
	order                            []colli.OrderOption
	inters                           []Interceptor
	predicates                       []predicate.Colli
	withTenant                       *TenantQuery
	withRecipient                    *AddressQuery
	withSender                       *AddressQuery
	withParcelShop                   *ParcelShopQuery
	withClickCollectLocation         *LocationQuery
	withOrderLines                   *OrderLineQuery
	withDeliveryOption               *DeliveryOptionQuery
	withDocumentFile                 *DocumentFileQuery
	withShipmentParcel               *ShipmentParcelQuery
	withCancelledShipmentParcel      *ShipmentParcelQuery
	withOrder                        *OrderQuery
	withPackaging                    *PackagingQuery
	withPrintJob                     *PrintJobQuery
	withFKs                          bool
	modifiers                        []func(*sql.Selector)
	loadTotal                        []func(context.Context, []*Colli) error
	withNamedOrderLines              map[string]*OrderLineQuery
	withNamedDocumentFile            map[string]*DocumentFileQuery
	withNamedCancelledShipmentParcel map[string]*ShipmentParcelQuery
	withNamedPrintJob                map[string]*PrintJobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ColliQuery builder.
func (cq *ColliQuery) Where(ps ...predicate.Colli) *ColliQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *ColliQuery) Limit(limit int) *ColliQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *ColliQuery) Offset(offset int) *ColliQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *ColliQuery) Unique(unique bool) *ColliQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *ColliQuery) Order(o ...colli.OrderOption) *ColliQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryTenant chains the current query on the "tenant" edge.
func (cq *ColliQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.TenantTable, colli.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecipient chains the current query on the "recipient" edge.
func (cq *ColliQuery) QueryRecipient() *AddressQuery {
	query := (&AddressClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.RecipientTable, colli.RecipientColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySender chains the current query on the "sender" edge.
func (cq *ColliQuery) QuerySender() *AddressQuery {
	query := (&AddressClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.SenderTable, colli.SenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParcelShop chains the current query on the "parcel_shop" edge.
func (cq *ColliQuery) QueryParcelShop() *ParcelShopQuery {
	query := (&ParcelShopClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.ParcelShopTable, colli.ParcelShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryClickCollectLocation chains the current query on the "click_collect_location" edge.
func (cq *ColliQuery) QueryClickCollectLocation() *LocationQuery {
	query := (&LocationClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.ClickCollectLocationTable, colli.ClickCollectLocationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrderLines chains the current query on the "order_lines" edge.
func (cq *ColliQuery) QueryOrderLines() *OrderLineQuery {
	query := (&OrderLineClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(orderline.Table, orderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, colli.OrderLinesTable, colli.OrderLinesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (cq *ColliQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.DeliveryOptionTable, colli.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocumentFile chains the current query on the "document_file" edge.
func (cq *ColliQuery) QueryDocumentFile() *DocumentFileQuery {
	query := (&DocumentFileClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(documentfile.Table, documentfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, colli.DocumentFileTable, colli.DocumentFileColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentParcel chains the current query on the "shipment_parcel" edge.
func (cq *ColliQuery) QueryShipmentParcel() *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, colli.ShipmentParcelTable, colli.ShipmentParcelColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCancelledShipmentParcel chains the current query on the "cancelled_shipment_parcel" edge.
func (cq *ColliQuery) QueryCancelledShipmentParcel() *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, colli.CancelledShipmentParcelTable, colli.CancelledShipmentParcelPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the "order" edge.
func (cq *ColliQuery) QueryOrder() *OrderQuery {
	query := (&OrderClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, colli.OrderTable, colli.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackaging chains the current query on the "packaging" edge.
func (cq *ColliQuery) QueryPackaging() *PackagingQuery {
	query := (&PackagingClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.PackagingTable, colli.PackagingColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrintJob chains the current query on the "print_job" edge.
func (cq *ColliQuery) QueryPrintJob() *PrintJobQuery {
	query := (&PrintJobClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, selector),
			sqlgraph.To(printjob.Table, printjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, colli.PrintJobTable, colli.PrintJobColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Colli entity from the query.
// Returns a *NotFoundError when no Colli was found.
func (cq *ColliQuery) First(ctx context.Context) (*Colli, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{colli.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *ColliQuery) FirstX(ctx context.Context) *Colli {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Colli ID from the query.
// Returns a *NotFoundError when no Colli ID was found.
func (cq *ColliQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{colli.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *ColliQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Colli entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Colli entity is found.
// Returns a *NotFoundError when no Colli entities are found.
func (cq *ColliQuery) Only(ctx context.Context) (*Colli, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{colli.Label}
	default:
		return nil, &NotSingularError{colli.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *ColliQuery) OnlyX(ctx context.Context) *Colli {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Colli ID in the query.
// Returns a *NotSingularError when more than one Colli ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *ColliQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{colli.Label}
	default:
		err = &NotSingularError{colli.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *ColliQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Collis.
func (cq *ColliQuery) All(ctx context.Context) ([]*Colli, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Colli, *ColliQuery]()
	return withInterceptors[[]*Colli](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *ColliQuery) AllX(ctx context.Context) []*Colli {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Colli IDs.
func (cq *ColliQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(colli.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *ColliQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *ColliQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*ColliQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *ColliQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *ColliQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *ColliQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ColliQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *ColliQuery) Clone() *ColliQuery {
	if cq == nil {
		return nil
	}
	return &ColliQuery{
		config:                      cq.config,
		ctx:                         cq.ctx.Clone(),
		order:                       append([]colli.OrderOption{}, cq.order...),
		inters:                      append([]Interceptor{}, cq.inters...),
		predicates:                  append([]predicate.Colli{}, cq.predicates...),
		withTenant:                  cq.withTenant.Clone(),
		withRecipient:               cq.withRecipient.Clone(),
		withSender:                  cq.withSender.Clone(),
		withParcelShop:              cq.withParcelShop.Clone(),
		withClickCollectLocation:    cq.withClickCollectLocation.Clone(),
		withOrderLines:              cq.withOrderLines.Clone(),
		withDeliveryOption:          cq.withDeliveryOption.Clone(),
		withDocumentFile:            cq.withDocumentFile.Clone(),
		withShipmentParcel:          cq.withShipmentParcel.Clone(),
		withCancelledShipmentParcel: cq.withCancelledShipmentParcel.Clone(),
		withOrder:                   cq.withOrder.Clone(),
		withPackaging:               cq.withPackaging.Clone(),
		withPrintJob:                cq.withPrintJob.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithTenant(opts ...func(*TenantQuery)) *ColliQuery {
	query := (&TenantClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTenant = query
	return cq
}

// WithRecipient tells the query-builder to eager-load the nodes that are connected to
// the "recipient" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithRecipient(opts ...func(*AddressQuery)) *ColliQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withRecipient = query
	return cq
}

// WithSender tells the query-builder to eager-load the nodes that are connected to
// the "sender" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithSender(opts ...func(*AddressQuery)) *ColliQuery {
	query := (&AddressClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withSender = query
	return cq
}

// WithParcelShop tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithParcelShop(opts ...func(*ParcelShopQuery)) *ColliQuery {
	query := (&ParcelShopClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withParcelShop = query
	return cq
}

// WithClickCollectLocation tells the query-builder to eager-load the nodes that are connected to
// the "click_collect_location" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithClickCollectLocation(opts ...func(*LocationQuery)) *ColliQuery {
	query := (&LocationClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withClickCollectLocation = query
	return cq
}

// WithOrderLines tells the query-builder to eager-load the nodes that are connected to
// the "order_lines" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithOrderLines(opts ...func(*OrderLineQuery)) *ColliQuery {
	query := (&OrderLineClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOrderLines = query
	return cq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *ColliQuery {
	query := (&DeliveryOptionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDeliveryOption = query
	return cq
}

// WithDocumentFile tells the query-builder to eager-load the nodes that are connected to
// the "document_file" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithDocumentFile(opts ...func(*DocumentFileQuery)) *ColliQuery {
	query := (&DocumentFileClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDocumentFile = query
	return cq
}

// WithShipmentParcel tells the query-builder to eager-load the nodes that are connected to
// the "shipment_parcel" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithShipmentParcel(opts ...func(*ShipmentParcelQuery)) *ColliQuery {
	query := (&ShipmentParcelClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withShipmentParcel = query
	return cq
}

// WithCancelledShipmentParcel tells the query-builder to eager-load the nodes that are connected to
// the "cancelled_shipment_parcel" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithCancelledShipmentParcel(opts ...func(*ShipmentParcelQuery)) *ColliQuery {
	query := (&ShipmentParcelClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withCancelledShipmentParcel = query
	return cq
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithOrder(opts ...func(*OrderQuery)) *ColliQuery {
	query := (&OrderClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOrder = query
	return cq
}

// WithPackaging tells the query-builder to eager-load the nodes that are connected to
// the "packaging" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithPackaging(opts ...func(*PackagingQuery)) *ColliQuery {
	query := (&PackagingClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPackaging = query
	return cq
}

// WithPrintJob tells the query-builder to eager-load the nodes that are connected to
// the "print_job" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithPrintJob(opts ...func(*PrintJobQuery)) *ColliQuery {
	query := (&PrintJobClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withPrintJob = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Colli.Query().
//		GroupBy(colli.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *ColliQuery) GroupBy(field string, fields ...string) *ColliGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ColliGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = colli.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Colli.Query().
//		Select(colli.FieldTenantID).
//		Scan(ctx, &v)
func (cq *ColliQuery) Select(fields ...string) *ColliSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &ColliSelect{ColliQuery: cq}
	sbuild.label = colli.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ColliSelect configured with the given aggregations.
func (cq *ColliQuery) Aggregate(fns ...AggregateFunc) *ColliSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *ColliQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !colli.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	if colli.Policy == nil {
		return errors.New("ent: uninitialized colli.Policy (forgotten import ent/runtime?)")
	}
	if err := colli.Policy.EvalQuery(ctx, cq); err != nil {
		return err
	}
	return nil
}

func (cq *ColliQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Colli, error) {
	var (
		nodes       = []*Colli{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [13]bool{
			cq.withTenant != nil,
			cq.withRecipient != nil,
			cq.withSender != nil,
			cq.withParcelShop != nil,
			cq.withClickCollectLocation != nil,
			cq.withOrderLines != nil,
			cq.withDeliveryOption != nil,
			cq.withDocumentFile != nil,
			cq.withShipmentParcel != nil,
			cq.withCancelledShipmentParcel != nil,
			cq.withOrder != nil,
			cq.withPackaging != nil,
			cq.withPrintJob != nil,
		}
	)
	if cq.withRecipient != nil || cq.withSender != nil || cq.withParcelShop != nil || cq.withClickCollectLocation != nil || cq.withDeliveryOption != nil || cq.withOrder != nil || cq.withPackaging != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, colli.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Colli).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Colli{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withTenant; query != nil {
		if err := cq.loadTenant(ctx, query, nodes, nil,
			func(n *Colli, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withRecipient; query != nil {
		if err := cq.loadRecipient(ctx, query, nodes, nil,
			func(n *Colli, e *Address) { n.Edges.Recipient = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withSender; query != nil {
		if err := cq.loadSender(ctx, query, nodes, nil,
			func(n *Colli, e *Address) { n.Edges.Sender = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withParcelShop; query != nil {
		if err := cq.loadParcelShop(ctx, query, nodes, nil,
			func(n *Colli, e *ParcelShop) { n.Edges.ParcelShop = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withClickCollectLocation; query != nil {
		if err := cq.loadClickCollectLocation(ctx, query, nodes, nil,
			func(n *Colli, e *Location) { n.Edges.ClickCollectLocation = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withOrderLines; query != nil {
		if err := cq.loadOrderLines(ctx, query, nodes,
			func(n *Colli) { n.Edges.OrderLines = []*OrderLine{} },
			func(n *Colli, e *OrderLine) { n.Edges.OrderLines = append(n.Edges.OrderLines, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDeliveryOption; query != nil {
		if err := cq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *Colli, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDocumentFile; query != nil {
		if err := cq.loadDocumentFile(ctx, query, nodes,
			func(n *Colli) { n.Edges.DocumentFile = []*DocumentFile{} },
			func(n *Colli, e *DocumentFile) { n.Edges.DocumentFile = append(n.Edges.DocumentFile, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withShipmentParcel; query != nil {
		if err := cq.loadShipmentParcel(ctx, query, nodes, nil,
			func(n *Colli, e *ShipmentParcel) { n.Edges.ShipmentParcel = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCancelledShipmentParcel; query != nil {
		if err := cq.loadCancelledShipmentParcel(ctx, query, nodes,
			func(n *Colli) { n.Edges.CancelledShipmentParcel = []*ShipmentParcel{} },
			func(n *Colli, e *ShipmentParcel) {
				n.Edges.CancelledShipmentParcel = append(n.Edges.CancelledShipmentParcel, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := cq.withOrder; query != nil {
		if err := cq.loadOrder(ctx, query, nodes, nil,
			func(n *Colli, e *Order) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPackaging; query != nil {
		if err := cq.loadPackaging(ctx, query, nodes, nil,
			func(n *Colli, e *Packaging) { n.Edges.Packaging = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPrintJob; query != nil {
		if err := cq.loadPrintJob(ctx, query, nodes,
			func(n *Colli) { n.Edges.PrintJob = []*PrintJob{} },
			func(n *Colli, e *PrintJob) { n.Edges.PrintJob = append(n.Edges.PrintJob, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedOrderLines {
		if err := cq.loadOrderLines(ctx, query, nodes,
			func(n *Colli) { n.appendNamedOrderLines(name) },
			func(n *Colli, e *OrderLine) { n.appendNamedOrderLines(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDocumentFile {
		if err := cq.loadDocumentFile(ctx, query, nodes,
			func(n *Colli) { n.appendNamedDocumentFile(name) },
			func(n *Colli, e *DocumentFile) { n.appendNamedDocumentFile(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedCancelledShipmentParcel {
		if err := cq.loadCancelledShipmentParcel(ctx, query, nodes,
			func(n *Colli) { n.appendNamedCancelledShipmentParcel(name) },
			func(n *Colli, e *ShipmentParcel) { n.appendNamedCancelledShipmentParcel(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedPrintJob {
		if err := cq.loadPrintJob(ctx, query, nodes,
			func(n *Colli) { n.appendNamedPrintJob(name) },
			func(n *Colli, e *PrintJob) { n.appendNamedPrintJob(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *ColliQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadRecipient(ctx context.Context, query *AddressQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *Address)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].colli_recipient == nil {
			continue
		}
		fk := *nodes[i].colli_recipient
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_recipient" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadSender(ctx context.Context, query *AddressQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *Address)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].colli_sender == nil {
			continue
		}
		fk := *nodes[i].colli_sender
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_sender" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadParcelShop(ctx context.Context, query *ParcelShopQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *ParcelShop)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].colli_parcel_shop == nil {
			continue
		}
		fk := *nodes[i].colli_parcel_shop
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(parcelshop.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_parcel_shop" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadClickCollectLocation(ctx context.Context, query *LocationQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *Location)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].colli_click_collect_location == nil {
			continue
		}
		fk := *nodes[i].colli_click_collect_location
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(location.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_click_collect_location" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadOrderLines(ctx context.Context, query *OrderLineQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *OrderLine)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Colli)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orderline.FieldColliID)
	}
	query.Where(predicate.OrderLine(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(colli.OrderLinesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ColliID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ColliQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].colli_delivery_option == nil {
			continue
		}
		fk := *nodes[i].colli_delivery_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_delivery_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadDocumentFile(ctx context.Context, query *DocumentFileQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *DocumentFile)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Colli)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DocumentFile(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(colli.DocumentFileColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_document_file
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_document_file" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_document_file" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ColliQuery) loadShipmentParcel(ctx context.Context, query *ShipmentParcelQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *ShipmentParcel)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Colli)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ShipmentParcel(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(colli.ShipmentParcelColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_shipment_parcel
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_shipment_parcel" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_shipment_parcel" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *ColliQuery) loadCancelledShipmentParcel(ctx context.Context, query *ShipmentParcelQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *ShipmentParcel)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Colli)
	nids := make(map[pulid.ID]map[*Colli]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(colli.CancelledShipmentParcelTable)
		s.Join(joinT).On(s.C(shipmentparcel.FieldID), joinT.C(colli.CancelledShipmentParcelPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(colli.CancelledShipmentParcelPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(colli.CancelledShipmentParcelPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Colli]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ShipmentParcel](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cancelled_shipment_parcel" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadOrder(ctx context.Context, query *OrderQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *Order)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].order_colli == nil {
			continue
		}
		fk := *nodes[i].order_colli
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_colli" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadPackaging(ctx context.Context, query *PackagingQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *Packaging)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Colli)
	for i := range nodes {
		if nodes[i].colli_packaging == nil {
			continue
		}
		fk := *nodes[i].colli_packaging
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packaging.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_packaging" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *ColliQuery) loadPrintJob(ctx context.Context, query *PrintJobQuery, nodes []*Colli, init func(*Colli), assign func(*Colli, *PrintJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Colli)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PrintJob(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(colli.PrintJobColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.print_job_colli
		if fk == nil {
			return fmt.Errorf(`foreign-key "print_job_colli" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "print_job_colli" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *ColliQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *ColliQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(colli.Table, colli.Columns, sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, colli.FieldID)
		for i := range fields {
			if fields[i] != colli.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if cq.withTenant != nil {
			_spec.Node.AddColumnOnce(colli.FieldTenantID)
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *ColliQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(colli.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = colli.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedOrderLines tells the query-builder to eager-load the nodes that are connected to the "order_lines"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithNamedOrderLines(name string, opts ...func(*OrderLineQuery)) *ColliQuery {
	query := (&OrderLineClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedOrderLines == nil {
		cq.withNamedOrderLines = make(map[string]*OrderLineQuery)
	}
	cq.withNamedOrderLines[name] = query
	return cq
}

// WithNamedDocumentFile tells the query-builder to eager-load the nodes that are connected to the "document_file"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithNamedDocumentFile(name string, opts ...func(*DocumentFileQuery)) *ColliQuery {
	query := (&DocumentFileClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDocumentFile == nil {
		cq.withNamedDocumentFile = make(map[string]*DocumentFileQuery)
	}
	cq.withNamedDocumentFile[name] = query
	return cq
}

// WithNamedCancelledShipmentParcel tells the query-builder to eager-load the nodes that are connected to the "cancelled_shipment_parcel"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithNamedCancelledShipmentParcel(name string, opts ...func(*ShipmentParcelQuery)) *ColliQuery {
	query := (&ShipmentParcelClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedCancelledShipmentParcel == nil {
		cq.withNamedCancelledShipmentParcel = make(map[string]*ShipmentParcelQuery)
	}
	cq.withNamedCancelledShipmentParcel[name] = query
	return cq
}

// WithNamedPrintJob tells the query-builder to eager-load the nodes that are connected to the "print_job"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *ColliQuery) WithNamedPrintJob(name string, opts ...func(*PrintJobQuery)) *ColliQuery {
	query := (&PrintJobClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedPrintJob == nil {
		cq.withNamedPrintJob = make(map[string]*PrintJobQuery)
	}
	cq.withNamedPrintJob[name] = query
	return cq
}

// ColliGroupBy is the group-by builder for Colli entities.
type ColliGroupBy struct {
	selector
	build *ColliQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *ColliGroupBy) Aggregate(fns ...AggregateFunc) *ColliGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *ColliGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ColliQuery, *ColliGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *ColliGroupBy) sqlScan(ctx context.Context, root *ColliQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ColliSelect is the builder for selecting fields of Colli entities.
type ColliSelect struct {
	*ColliQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *ColliSelect) Aggregate(fns ...AggregateFunc) *ColliSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *ColliSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ColliQuery, *ColliSelect](ctx, cs.ColliQuery, cs, cs.inters, v)
}

func (cs *ColliSelect) sqlScan(ctx context.Context, root *ColliQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
