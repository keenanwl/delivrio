// Code generated by ent, DO NOT EDIT.

package planhistory

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the planhistory type in the database.
	Label = "plan_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeChangeHistory holds the string denoting the change_history edge name in mutations.
	EdgeChangeHistory = "change_history"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeChangedBy holds the string denoting the changed_by edge name in mutations.
	EdgeChangedBy = "changed_by"
	// EdgeChangedFrom holds the string denoting the changed_from edge name in mutations.
	EdgeChangedFrom = "changed_from"
	// Table holds the table name of the planhistory in the database.
	Table = "plan_histories"
	// ChangeHistoryTable is the table that holds the change_history relation/edge.
	ChangeHistoryTable = "plan_histories"
	// ChangeHistoryInverseTable is the table name for the ChangeHistory entity.
	// It exists in this package in order to avoid circular dependency with the "changehistory" package.
	ChangeHistoryInverseTable = "change_histories"
	// ChangeHistoryColumn is the table column denoting the change_history relation/edge.
	ChangeHistoryColumn = "change_history_plan_history"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "plan_histories"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ChangedByTable is the table that holds the changed_by relation/edge.
	ChangedByTable = "plan_histories"
	// ChangedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ChangedByInverseTable = "users"
	// ChangedByColumn is the table column denoting the changed_by relation/edge.
	ChangedByColumn = "user_plan_history_user"
	// ChangedFromTable is the table that holds the changed_from relation/edge.
	ChangedFromTable = "plan_histories"
	// ChangedFromInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	ChangedFromInverseTable = "plans"
	// ChangedFromColumn is the table column denoting the changed_from relation/edge.
	ChangedFromColumn = "plan_plan_history_plan"
)

// Columns holds all SQL columns for planhistory fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "plan_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"change_history_plan_history",
	"plan_plan_history_plan",
	"user_plan_history_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the PlanHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByChangeHistoryField orders the results by change_history field.
func ByChangeHistoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangeHistoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByChangedByField orders the results by changed_by field.
func ByChangedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByChangedFromField orders the results by changed_from field.
func ByChangedFromField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChangedFromStep(), sql.OrderByField(field, opts...))
	}
}
func newChangeHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangeHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChangeHistoryTable, ChangeHistoryColumn),
	)
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newChangedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChangedByTable, ChangedByColumn),
	)
}
func newChangedFromStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChangedFromInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ChangedFromTable, ChangedFromColumn),
	)
}
