// Code generated by ent, DO NOT EDIT.

package address

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldTenantID, v))
}

// UniquenessID applies equality check predicate on the "uniqueness_id" field. It's identical to UniquenessIDEQ.
func UniquenessID(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUniquenessID, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLastName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEmail, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumber2 applies equality check predicate on the "phone_number_2" field. It's identical to PhoneNumber2EQ.
func PhoneNumber2(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPhoneNumber2, v))
}

// VatNumber applies equality check predicate on the "vat_number" field. It's identical to VatNumberEQ.
func VatNumber(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldVatNumber, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCompany, v))
}

// AddressOne applies equality check predicate on the "address_one" field. It's identical to AddressOneEQ.
func AddressOne(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressOne, v))
}

// AddressTwo applies equality check predicate on the "address_two" field. It's identical to AddressTwoEQ.
func AddressTwo(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressTwo, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldState, v))
}

// Zip applies equality check predicate on the "zip" field. It's identical to ZipEQ.
func Zip(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldZip, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Address {
	vc := string(v)
	return predicate.Address(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Address {
	vc := string(v)
	return predicate.Address(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Address {
	vc := string(v)
	return predicate.Address(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Address {
	vc := string(v)
	return predicate.Address(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Address {
	vc := string(v)
	return predicate.Address(sql.FieldContainsFold(FieldTenantID, vc))
}

// UniquenessIDEQ applies the EQ predicate on the "uniqueness_id" field.
func UniquenessIDEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldUniquenessID, v))
}

// UniquenessIDNEQ applies the NEQ predicate on the "uniqueness_id" field.
func UniquenessIDNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldUniquenessID, v))
}

// UniquenessIDIn applies the In predicate on the "uniqueness_id" field.
func UniquenessIDIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldUniquenessID, vs...))
}

// UniquenessIDNotIn applies the NotIn predicate on the "uniqueness_id" field.
func UniquenessIDNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldUniquenessID, vs...))
}

// UniquenessIDGT applies the GT predicate on the "uniqueness_id" field.
func UniquenessIDGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldUniquenessID, v))
}

// UniquenessIDGTE applies the GTE predicate on the "uniqueness_id" field.
func UniquenessIDGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldUniquenessID, v))
}

// UniquenessIDLT applies the LT predicate on the "uniqueness_id" field.
func UniquenessIDLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldUniquenessID, v))
}

// UniquenessIDLTE applies the LTE predicate on the "uniqueness_id" field.
func UniquenessIDLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldUniquenessID, v))
}

// UniquenessIDContains applies the Contains predicate on the "uniqueness_id" field.
func UniquenessIDContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldUniquenessID, v))
}

// UniquenessIDHasPrefix applies the HasPrefix predicate on the "uniqueness_id" field.
func UniquenessIDHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldUniquenessID, v))
}

// UniquenessIDHasSuffix applies the HasSuffix predicate on the "uniqueness_id" field.
func UniquenessIDHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldUniquenessID, v))
}

// UniquenessIDIsNil applies the IsNil predicate on the "uniqueness_id" field.
func UniquenessIDIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldUniquenessID))
}

// UniquenessIDNotNil applies the NotNil predicate on the "uniqueness_id" field.
func UniquenessIDNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldUniquenessID))
}

// UniquenessIDEqualFold applies the EqualFold predicate on the "uniqueness_id" field.
func UniquenessIDEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldUniquenessID, v))
}

// UniquenessIDContainsFold applies the ContainsFold predicate on the "uniqueness_id" field.
func UniquenessIDContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldUniquenessID, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldLastName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// PhoneNumber2EQ applies the EQ predicate on the "phone_number_2" field.
func PhoneNumber2EQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldPhoneNumber2, v))
}

// PhoneNumber2NEQ applies the NEQ predicate on the "phone_number_2" field.
func PhoneNumber2NEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldPhoneNumber2, v))
}

// PhoneNumber2In applies the In predicate on the "phone_number_2" field.
func PhoneNumber2In(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldPhoneNumber2, vs...))
}

// PhoneNumber2NotIn applies the NotIn predicate on the "phone_number_2" field.
func PhoneNumber2NotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldPhoneNumber2, vs...))
}

// PhoneNumber2GT applies the GT predicate on the "phone_number_2" field.
func PhoneNumber2GT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldPhoneNumber2, v))
}

// PhoneNumber2GTE applies the GTE predicate on the "phone_number_2" field.
func PhoneNumber2GTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldPhoneNumber2, v))
}

// PhoneNumber2LT applies the LT predicate on the "phone_number_2" field.
func PhoneNumber2LT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldPhoneNumber2, v))
}

// PhoneNumber2LTE applies the LTE predicate on the "phone_number_2" field.
func PhoneNumber2LTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldPhoneNumber2, v))
}

// PhoneNumber2Contains applies the Contains predicate on the "phone_number_2" field.
func PhoneNumber2Contains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldPhoneNumber2, v))
}

// PhoneNumber2HasPrefix applies the HasPrefix predicate on the "phone_number_2" field.
func PhoneNumber2HasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldPhoneNumber2, v))
}

// PhoneNumber2HasSuffix applies the HasSuffix predicate on the "phone_number_2" field.
func PhoneNumber2HasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldPhoneNumber2, v))
}

// PhoneNumber2IsNil applies the IsNil predicate on the "phone_number_2" field.
func PhoneNumber2IsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldPhoneNumber2))
}

// PhoneNumber2NotNil applies the NotNil predicate on the "phone_number_2" field.
func PhoneNumber2NotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldPhoneNumber2))
}

// PhoneNumber2EqualFold applies the EqualFold predicate on the "phone_number_2" field.
func PhoneNumber2EqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldPhoneNumber2, v))
}

// PhoneNumber2ContainsFold applies the ContainsFold predicate on the "phone_number_2" field.
func PhoneNumber2ContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldPhoneNumber2, v))
}

// VatNumberEQ applies the EQ predicate on the "vat_number" field.
func VatNumberEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldVatNumber, v))
}

// VatNumberNEQ applies the NEQ predicate on the "vat_number" field.
func VatNumberNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldVatNumber, v))
}

// VatNumberIn applies the In predicate on the "vat_number" field.
func VatNumberIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldVatNumber, vs...))
}

// VatNumberNotIn applies the NotIn predicate on the "vat_number" field.
func VatNumberNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldVatNumber, vs...))
}

// VatNumberGT applies the GT predicate on the "vat_number" field.
func VatNumberGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldVatNumber, v))
}

// VatNumberGTE applies the GTE predicate on the "vat_number" field.
func VatNumberGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldVatNumber, v))
}

// VatNumberLT applies the LT predicate on the "vat_number" field.
func VatNumberLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldVatNumber, v))
}

// VatNumberLTE applies the LTE predicate on the "vat_number" field.
func VatNumberLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldVatNumber, v))
}

// VatNumberContains applies the Contains predicate on the "vat_number" field.
func VatNumberContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldVatNumber, v))
}

// VatNumberHasPrefix applies the HasPrefix predicate on the "vat_number" field.
func VatNumberHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldVatNumber, v))
}

// VatNumberHasSuffix applies the HasSuffix predicate on the "vat_number" field.
func VatNumberHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldVatNumber, v))
}

// VatNumberIsNil applies the IsNil predicate on the "vat_number" field.
func VatNumberIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldVatNumber))
}

// VatNumberNotNil applies the NotNil predicate on the "vat_number" field.
func VatNumberNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldVatNumber))
}

// VatNumberEqualFold applies the EqualFold predicate on the "vat_number" field.
func VatNumberEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldVatNumber, v))
}

// VatNumberContainsFold applies the ContainsFold predicate on the "vat_number" field.
func VatNumberContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldVatNumber, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCompany, v))
}

// AddressOneEQ applies the EQ predicate on the "address_one" field.
func AddressOneEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressOne, v))
}

// AddressOneNEQ applies the NEQ predicate on the "address_one" field.
func AddressOneNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressOne, v))
}

// AddressOneIn applies the In predicate on the "address_one" field.
func AddressOneIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAddressOne, vs...))
}

// AddressOneNotIn applies the NotIn predicate on the "address_one" field.
func AddressOneNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAddressOne, vs...))
}

// AddressOneGT applies the GT predicate on the "address_one" field.
func AddressOneGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAddressOne, v))
}

// AddressOneGTE applies the GTE predicate on the "address_one" field.
func AddressOneGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAddressOne, v))
}

// AddressOneLT applies the LT predicate on the "address_one" field.
func AddressOneLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAddressOne, v))
}

// AddressOneLTE applies the LTE predicate on the "address_one" field.
func AddressOneLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAddressOne, v))
}

// AddressOneContains applies the Contains predicate on the "address_one" field.
func AddressOneContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldAddressOne, v))
}

// AddressOneHasPrefix applies the HasPrefix predicate on the "address_one" field.
func AddressOneHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldAddressOne, v))
}

// AddressOneHasSuffix applies the HasSuffix predicate on the "address_one" field.
func AddressOneHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldAddressOne, v))
}

// AddressOneEqualFold applies the EqualFold predicate on the "address_one" field.
func AddressOneEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldAddressOne, v))
}

// AddressOneContainsFold applies the ContainsFold predicate on the "address_one" field.
func AddressOneContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldAddressOne, v))
}

// AddressTwoEQ applies the EQ predicate on the "address_two" field.
func AddressTwoEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldAddressTwo, v))
}

// AddressTwoNEQ applies the NEQ predicate on the "address_two" field.
func AddressTwoNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldAddressTwo, v))
}

// AddressTwoIn applies the In predicate on the "address_two" field.
func AddressTwoIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldAddressTwo, vs...))
}

// AddressTwoNotIn applies the NotIn predicate on the "address_two" field.
func AddressTwoNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldAddressTwo, vs...))
}

// AddressTwoGT applies the GT predicate on the "address_two" field.
func AddressTwoGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldAddressTwo, v))
}

// AddressTwoGTE applies the GTE predicate on the "address_two" field.
func AddressTwoGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldAddressTwo, v))
}

// AddressTwoLT applies the LT predicate on the "address_two" field.
func AddressTwoLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldAddressTwo, v))
}

// AddressTwoLTE applies the LTE predicate on the "address_two" field.
func AddressTwoLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldAddressTwo, v))
}

// AddressTwoContains applies the Contains predicate on the "address_two" field.
func AddressTwoContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldAddressTwo, v))
}

// AddressTwoHasPrefix applies the HasPrefix predicate on the "address_two" field.
func AddressTwoHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldAddressTwo, v))
}

// AddressTwoHasSuffix applies the HasSuffix predicate on the "address_two" field.
func AddressTwoHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldAddressTwo, v))
}

// AddressTwoEqualFold applies the EqualFold predicate on the "address_two" field.
func AddressTwoEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldAddressTwo, v))
}

// AddressTwoContainsFold applies the ContainsFold predicate on the "address_two" field.
func AddressTwoContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldAddressTwo, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldState))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldState, v))
}

// ZipEQ applies the EQ predicate on the "zip" field.
func ZipEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldZip, v))
}

// ZipNEQ applies the NEQ predicate on the "zip" field.
func ZipNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldZip, v))
}

// ZipIn applies the In predicate on the "zip" field.
func ZipIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldZip, vs...))
}

// ZipNotIn applies the NotIn predicate on the "zip" field.
func ZipNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldZip, vs...))
}

// ZipGT applies the GT predicate on the "zip" field.
func ZipGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldZip, v))
}

// ZipGTE applies the GTE predicate on the "zip" field.
func ZipGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldZip, v))
}

// ZipLT applies the LT predicate on the "zip" field.
func ZipLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldZip, v))
}

// ZipLTE applies the LTE predicate on the "zip" field.
func ZipLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldZip, v))
}

// ZipContains applies the Contains predicate on the "zip" field.
func ZipContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldZip, v))
}

// ZipHasPrefix applies the HasPrefix predicate on the "zip" field.
func ZipHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldZip, v))
}

// ZipHasSuffix applies the HasSuffix predicate on the "zip" field.
func ZipHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldZip, v))
}

// ZipEqualFold applies the EqualFold predicate on the "zip" field.
func ZipEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldZip, v))
}

// ZipContainsFold applies the ContainsFold predicate on the "zip" field.
func ZipContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldZip, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipientColli applies the HasEdge predicate on the "recipient_colli" edge.
func HasRecipientColli() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, RecipientColliTable, RecipientColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientColliWith applies the HasEdge predicate on the "recipient_colli" edge with a given conditions (other predicates).
func HasRecipientColliWith(preds ...predicate.Colli) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newRecipientColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipientConsolidation applies the HasEdge predicate on the "recipient_consolidation" edge.
func HasRecipientConsolidation() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, RecipientConsolidationTable, RecipientConsolidationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientConsolidationWith applies the HasEdge predicate on the "recipient_consolidation" edge with a given conditions (other predicates).
func HasRecipientConsolidationWith(preds ...predicate.Consolidation) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newRecipientConsolidationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompanyAddress applies the HasEdge predicate on the "company_address" edge.
func HasCompanyAddress() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, CompanyAddressTable, CompanyAddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompanyAddressWith applies the HasEdge predicate on the "company_address" edge with a given conditions (other predicates).
func HasCompanyAddressWith(preds ...predicate.Tenant) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newCompanyAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSenderColli applies the HasEdge predicate on the "sender_colli" edge.
func HasSenderColli() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, SenderColliTable, SenderColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderColliWith applies the HasEdge predicate on the "sender_colli" edge with a given conditions (other predicates).
func HasSenderColliWith(preds ...predicate.Colli) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newSenderColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSenderConsolidation applies the HasEdge predicate on the "sender_consolidation" edge.
func HasSenderConsolidation() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SenderConsolidationTable, SenderConsolidationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderConsolidationWith applies the HasEdge predicate on the "sender_consolidation" edge with a given conditions (other predicates).
func HasSenderConsolidationWith(preds ...predicate.Consolidation) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newSenderConsolidationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnSenderColli applies the HasEdge predicate on the "return_sender_colli" edge.
func HasReturnSenderColli() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnSenderColliTable, ReturnSenderColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnSenderColliWith applies the HasEdge predicate on the "return_sender_colli" edge with a given conditions (other predicates).
func HasReturnSenderColliWith(preds ...predicate.ReturnColli) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newReturnSenderColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnRecipientColli applies the HasEdge predicate on the "return_recipient_colli" edge.
func HasReturnRecipientColli() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnRecipientColliTable, ReturnRecipientColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnRecipientColliWith applies the HasEdge predicate on the "return_recipient_colli" edge with a given conditions (other predicates).
func HasReturnRecipientColliWith(preds ...predicate.ReturnColli) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newReturnRecipientColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountry applies the HasEdge predicate on the "country" edge.
func HasCountry() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CountryTable, CountryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountryWith applies the HasEdge predicate on the "country" edge with a given conditions (other predicates).
func HasCountryWith(preds ...predicate.Country) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newCountryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
