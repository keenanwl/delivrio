// Code generated by ent, DO NOT EDIT.

package address

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUniquenessID holds the string denoting the uniqueness_id field in the database.
	FieldUniquenessID = "uniqueness_id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldPhoneNumber2 holds the string denoting the phone_number_2 field in the database.
	FieldPhoneNumber2 = "phone_number_2"
	// FieldVatNumber holds the string denoting the vat_number field in the database.
	FieldVatNumber = "vat_number"
	// FieldCompany holds the string denoting the company field in the database.
	FieldCompany = "company"
	// FieldAddressOne holds the string denoting the address_one field in the database.
	FieldAddressOne = "address_one"
	// FieldAddressTwo holds the string denoting the address_two field in the database.
	FieldAddressTwo = "address_two"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRecipientColli holds the string denoting the recipient_colli edge name in mutations.
	EdgeRecipientColli = "recipient_colli"
	// EdgeRecipientConsolidation holds the string denoting the recipient_consolidation edge name in mutations.
	EdgeRecipientConsolidation = "recipient_consolidation"
	// EdgeCompanyAddress holds the string denoting the company_address edge name in mutations.
	EdgeCompanyAddress = "company_address"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// EdgeSenderColli holds the string denoting the sender_colli edge name in mutations.
	EdgeSenderColli = "sender_colli"
	// EdgeSenderConsolidation holds the string denoting the sender_consolidation edge name in mutations.
	EdgeSenderConsolidation = "sender_consolidation"
	// EdgeReturnSenderColli holds the string denoting the return_sender_colli edge name in mutations.
	EdgeReturnSenderColli = "return_sender_colli"
	// EdgeReturnRecipientColli holds the string denoting the return_recipient_colli edge name in mutations.
	EdgeReturnRecipientColli = "return_recipient_colli"
	// EdgeCountry holds the string denoting the country edge name in mutations.
	EdgeCountry = "country"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "addresses"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RecipientColliTable is the table that holds the recipient_colli relation/edge.
	RecipientColliTable = "collis"
	// RecipientColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	RecipientColliInverseTable = "collis"
	// RecipientColliColumn is the table column denoting the recipient_colli relation/edge.
	RecipientColliColumn = "colli_recipient"
	// RecipientConsolidationTable is the table that holds the recipient_consolidation relation/edge.
	RecipientConsolidationTable = "addresses"
	// RecipientConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	RecipientConsolidationInverseTable = "consolidations"
	// RecipientConsolidationColumn is the table column denoting the recipient_consolidation relation/edge.
	RecipientConsolidationColumn = "consolidation_recipient"
	// CompanyAddressTable is the table that holds the company_address relation/edge.
	CompanyAddressTable = "tenants"
	// CompanyAddressInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	CompanyAddressInverseTable = "tenants"
	// CompanyAddressColumn is the table column denoting the company_address relation/edge.
	CompanyAddressColumn = "tenant_company_address"
	// LocationTable is the table that holds the location relation/edge.
	LocationTable = "locations"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "locations"
	// LocationColumn is the table column denoting the location relation/edge.
	LocationColumn = "location_address"
	// SenderColliTable is the table that holds the sender_colli relation/edge.
	SenderColliTable = "collis"
	// SenderColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	SenderColliInverseTable = "collis"
	// SenderColliColumn is the table column denoting the sender_colli relation/edge.
	SenderColliColumn = "colli_sender"
	// SenderConsolidationTable is the table that holds the sender_consolidation relation/edge.
	SenderConsolidationTable = "addresses"
	// SenderConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	SenderConsolidationInverseTable = "consolidations"
	// SenderConsolidationColumn is the table column denoting the sender_consolidation relation/edge.
	SenderConsolidationColumn = "consolidation_sender"
	// ReturnSenderColliTable is the table that holds the return_sender_colli relation/edge.
	ReturnSenderColliTable = "return_collis"
	// ReturnSenderColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnSenderColliInverseTable = "return_collis"
	// ReturnSenderColliColumn is the table column denoting the return_sender_colli relation/edge.
	ReturnSenderColliColumn = "return_colli_sender"
	// ReturnRecipientColliTable is the table that holds the return_recipient_colli relation/edge.
	ReturnRecipientColliTable = "return_collis"
	// ReturnRecipientColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnRecipientColliInverseTable = "return_collis"
	// ReturnRecipientColliColumn is the table column denoting the return_recipient_colli relation/edge.
	ReturnRecipientColliColumn = "return_colli_recipient"
	// CountryTable is the table that holds the country relation/edge.
	CountryTable = "addresses"
	// CountryInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountryInverseTable = "countries"
	// CountryColumn is the table column denoting the country relation/edge.
	CountryColumn = "address_country"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldUniquenessID,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldPhoneNumber,
	FieldPhoneNumber2,
	FieldVatNumber,
	FieldCompany,
	FieldAddressOne,
	FieldAddressTwo,
	FieldCity,
	FieldState,
	FieldZip,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "addresses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"address_country",
	"consolidation_recipient",
	"consolidation_sender",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Address queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUniquenessID orders the results by the uniqueness_id field.
func ByUniquenessID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniquenessID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByPhoneNumber2 orders the results by the phone_number_2 field.
func ByPhoneNumber2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber2, opts...).ToFunc()
}

// ByVatNumber orders the results by the vat_number field.
func ByVatNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVatNumber, opts...).ToFunc()
}

// ByCompany orders the results by the company field.
func ByCompany(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompany, opts...).ToFunc()
}

// ByAddressOne orders the results by the address_one field.
func ByAddressOne(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressOne, opts...).ToFunc()
}

// ByAddressTwo orders the results by the address_two field.
func ByAddressTwo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressTwo, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByZip orders the results by the zip field.
func ByZip(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZip, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecipientColliCount orders the results by recipient_colli count.
func ByRecipientColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecipientColliStep(), opts...)
	}
}

// ByRecipientColli orders the results by recipient_colli terms.
func ByRecipientColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipientColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRecipientConsolidationField orders the results by recipient_consolidation field.
func ByRecipientConsolidationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipientConsolidationStep(), sql.OrderByField(field, opts...))
	}
}

// ByCompanyAddressCount orders the results by company_address count.
func ByCompanyAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompanyAddressStep(), opts...)
	}
}

// ByCompanyAddress orders the results by company_address terms.
func ByCompanyAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLocationCount orders the results by location count.
func ByLocationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLocationStep(), opts...)
	}
}

// ByLocation orders the results by location terms.
func ByLocation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySenderColliCount orders the results by sender_colli count.
func BySenderColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSenderColliStep(), opts...)
	}
}

// BySenderColli orders the results by sender_colli terms.
func BySenderColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySenderConsolidationField orders the results by sender_consolidation field.
func BySenderConsolidationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderConsolidationStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnSenderColliCount orders the results by return_sender_colli count.
func ByReturnSenderColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnSenderColliStep(), opts...)
	}
}

// ByReturnSenderColli orders the results by return_sender_colli terms.
func ByReturnSenderColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnSenderColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnRecipientColliCount orders the results by return_recipient_colli count.
func ByReturnRecipientColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnRecipientColliStep(), opts...)
	}
}

// ByReturnRecipientColli orders the results by return_recipient_colli terms.
func ByReturnRecipientColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnRecipientColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountryField orders the results by country field.
func ByCountryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountryStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newRecipientColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipientColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RecipientColliTable, RecipientColliColumn),
	)
}
func newRecipientConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipientConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, RecipientConsolidationTable, RecipientConsolidationColumn),
	)
}
func newCompanyAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CompanyAddressTable, CompanyAddressColumn),
	)
}
func newLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LocationTable, LocationColumn),
	)
}
func newSenderColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SenderColliTable, SenderColliColumn),
	)
}
func newSenderConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SenderConsolidationTable, SenderConsolidationColumn),
	)
}
func newReturnSenderColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnSenderColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnSenderColliTable, ReturnSenderColliColumn),
	)
}
func newReturnRecipientColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnRecipientColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnRecipientColliTable, ReturnRecipientColliColumn),
	)
}
func newCountryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CountryTable, CountryColumn),
	)
}
