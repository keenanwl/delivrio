// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryOptionUSPS is the model entity for the DeliveryOptionUSPS schema.
type DeliveryOptionUSPS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// FormatZpl holds the value of the "format_zpl" field.
	FormatZpl bool `json:"format_zpl,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryOptionUSPSQuery when eager-loading is set.
	Edges                                DeliveryOptionUSPSEdges `json:"edges"`
	delivery_option_delivery_option_usps *pulid.ID
	selectValues                         sql.SelectValues
}

// DeliveryOptionUSPSEdges holds the relations/edges for other nodes in the graph.
type DeliveryOptionUSPSEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// CarrierAdditionalServiceUSPS holds the value of the carrier_additional_service_usps edge.
	CarrierAdditionalServiceUSPS []*CarrierAdditionalServiceUSPS `json:"carrier_additional_service_usps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedCarrierAdditionalServiceUSPS map[string][]*CarrierAdditionalServiceUSPS
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionUSPSEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryOptionUSPSEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// CarrierAdditionalServiceUSPSOrErr returns the CarrierAdditionalServiceUSPS value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryOptionUSPSEdges) CarrierAdditionalServiceUSPSOrErr() ([]*CarrierAdditionalServiceUSPS, error) {
	if e.loadedTypes[2] {
		return e.CarrierAdditionalServiceUSPS, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_usps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryOptionUSPS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryoptionusps.FieldID, deliveryoptionusps.FieldTenantID:
			values[i] = new(pulid.ID)
		case deliveryoptionusps.FieldFormatZpl:
			values[i] = new(sql.NullBool)
		case deliveryoptionusps.ForeignKeys[0]: // delivery_option_delivery_option_usps
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryOptionUSPS fields.
func (dou *DeliveryOptionUSPS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryoptionusps.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dou.ID = *value
			}
		case deliveryoptionusps.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				dou.TenantID = *value
			}
		case deliveryoptionusps.FieldFormatZpl:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field format_zpl", values[i])
			} else if value.Valid {
				dou.FormatZpl = value.Bool
			}
		case deliveryoptionusps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_delivery_option_usps", values[i])
			} else if value.Valid {
				dou.delivery_option_delivery_option_usps = new(pulid.ID)
				*dou.delivery_option_delivery_option_usps = *value.S.(*pulid.ID)
			}
		default:
			dou.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryOptionUSPS.
// This includes values selected through modifiers, order, etc.
func (dou *DeliveryOptionUSPS) Value(name string) (ent.Value, error) {
	return dou.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DeliveryOptionUSPS entity.
func (dou *DeliveryOptionUSPS) QueryTenant() *TenantQuery {
	return NewDeliveryOptionUSPSClient(dou.config).QueryTenant(dou)
}

// QueryDeliveryOption queries the "delivery_option" edge of the DeliveryOptionUSPS entity.
func (dou *DeliveryOptionUSPS) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewDeliveryOptionUSPSClient(dou.config).QueryDeliveryOption(dou)
}

// QueryCarrierAdditionalServiceUSPS queries the "carrier_additional_service_usps" edge of the DeliveryOptionUSPS entity.
func (dou *DeliveryOptionUSPS) QueryCarrierAdditionalServiceUSPS() *CarrierAdditionalServiceUSPSQuery {
	return NewDeliveryOptionUSPSClient(dou.config).QueryCarrierAdditionalServiceUSPS(dou)
}

// Update returns a builder for updating this DeliveryOptionUSPS.
// Note that you need to call DeliveryOptionUSPS.Unwrap() before calling this method if this DeliveryOptionUSPS
// was returned from a transaction, and the transaction was committed or rolled back.
func (dou *DeliveryOptionUSPS) Update() *DeliveryOptionUSPSUpdateOne {
	return NewDeliveryOptionUSPSClient(dou.config).UpdateOne(dou)
}

// Unwrap unwraps the DeliveryOptionUSPS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dou *DeliveryOptionUSPS) Unwrap() *DeliveryOptionUSPS {
	_tx, ok := dou.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryOptionUSPS is not a transactional entity")
	}
	dou.config.driver = _tx.drv
	return dou
}

// String implements the fmt.Stringer.
func (dou *DeliveryOptionUSPS) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryOptionUSPS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dou.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dou.TenantID))
	builder.WriteString(", ")
	builder.WriteString("format_zpl=")
	builder.WriteString(fmt.Sprintf("%v", dou.FormatZpl))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAdditionalServiceUSPS returns the CarrierAdditionalServiceUSPS named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dou *DeliveryOptionUSPS) NamedCarrierAdditionalServiceUSPS(name string) ([]*CarrierAdditionalServiceUSPS, error) {
	if dou.Edges.namedCarrierAdditionalServiceUSPS == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dou.Edges.namedCarrierAdditionalServiceUSPS[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dou *DeliveryOptionUSPS) appendNamedCarrierAdditionalServiceUSPS(name string, edges ...*CarrierAdditionalServiceUSPS) {
	if dou.Edges.namedCarrierAdditionalServiceUSPS == nil {
		dou.Edges.namedCarrierAdditionalServiceUSPS = make(map[string][]*CarrierAdditionalServiceUSPS)
	}
	if len(edges) == 0 {
		dou.Edges.namedCarrierAdditionalServiceUSPS[name] = []*CarrierAdditionalServiceUSPS{}
	} else {
		dou.Edges.namedCarrierAdditionalServiceUSPS[name] = append(dou.Edges.namedCarrierAdditionalServiceUSPS[name], edges...)
	}
}

// DeliveryOptionUSPSs is a parsable slice of DeliveryOptionUSPS.
type DeliveryOptionUSPSs []*DeliveryOptionUSPS
