// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalUpdate is the builder for updating ReturnPortal entities.
type ReturnPortalUpdate struct {
	config
	hooks    []Hook
	mutation *ReturnPortalMutation
}

// Where appends a list predicates to the ReturnPortalUpdate builder.
func (rpu *ReturnPortalUpdate) Where(ps ...predicate.ReturnPortal) *ReturnPortalUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetTenantID sets the "tenant_id" field.
func (rpu *ReturnPortalUpdate) SetTenantID(pu pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.SetTenantID(pu)
	return rpu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableTenantID(pu *pulid.ID) *ReturnPortalUpdate {
	if pu != nil {
		rpu.SetTenantID(*pu)
	}
	return rpu
}

// SetName sets the "name" field.
func (rpu *ReturnPortalUpdate) SetName(s string) *ReturnPortalUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableName(s *string) *ReturnPortalUpdate {
	if s != nil {
		rpu.SetName(*s)
	}
	return rpu
}

// SetReturnOpenHours sets the "return_open_hours" field.
func (rpu *ReturnPortalUpdate) SetReturnOpenHours(i int) *ReturnPortalUpdate {
	rpu.mutation.ResetReturnOpenHours()
	rpu.mutation.SetReturnOpenHours(i)
	return rpu
}

// SetNillableReturnOpenHours sets the "return_open_hours" field if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableReturnOpenHours(i *int) *ReturnPortalUpdate {
	if i != nil {
		rpu.SetReturnOpenHours(*i)
	}
	return rpu
}

// AddReturnOpenHours adds i to the "return_open_hours" field.
func (rpu *ReturnPortalUpdate) AddReturnOpenHours(i int) *ReturnPortalUpdate {
	rpu.mutation.AddReturnOpenHours(i)
	return rpu
}

// SetAutomaticallyAccept sets the "automatically_accept" field.
func (rpu *ReturnPortalUpdate) SetAutomaticallyAccept(b bool) *ReturnPortalUpdate {
	rpu.mutation.SetAutomaticallyAccept(b)
	return rpu
}

// SetNillableAutomaticallyAccept sets the "automatically_accept" field if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableAutomaticallyAccept(b *bool) *ReturnPortalUpdate {
	if b != nil {
		rpu.SetAutomaticallyAccept(*b)
	}
	return rpu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rpu *ReturnPortalUpdate) SetTenant(t *Tenant) *ReturnPortalUpdate {
	return rpu.SetTenantID(t.ID)
}

// AddReturnPortalClaimIDs adds the "return_portal_claim" edge to the ReturnPortalClaim entity by IDs.
func (rpu *ReturnPortalUpdate) AddReturnPortalClaimIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.AddReturnPortalClaimIDs(ids...)
	return rpu
}

// AddReturnPortalClaim adds the "return_portal_claim" edges to the ReturnPortalClaim entity.
func (rpu *ReturnPortalUpdate) AddReturnPortalClaim(r ...*ReturnPortalClaim) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddReturnPortalClaimIDs(ids...)
}

// AddReturnLocationIDs adds the "return_location" edge to the Location entity by IDs.
func (rpu *ReturnPortalUpdate) AddReturnLocationIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.AddReturnLocationIDs(ids...)
	return rpu
}

// AddReturnLocation adds the "return_location" edges to the Location entity.
func (rpu *ReturnPortalUpdate) AddReturnLocation(l ...*Location) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rpu.AddReturnLocationIDs(ids...)
}

// AddDeliveryOptionIDs adds the "delivery_options" edge to the DeliveryOption entity by IDs.
func (rpu *ReturnPortalUpdate) AddDeliveryOptionIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.AddDeliveryOptionIDs(ids...)
	return rpu
}

// AddDeliveryOptions adds the "delivery_options" edges to the DeliveryOption entity.
func (rpu *ReturnPortalUpdate) AddDeliveryOptions(d ...*DeliveryOption) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rpu.AddDeliveryOptionIDs(ids...)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (rpu *ReturnPortalUpdate) SetConnectionID(id pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.SetConnectionID(id)
	return rpu
}

// SetNillableConnectionID sets the "connection" edge to the Connection entity by ID if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableConnectionID(id *pulid.ID) *ReturnPortalUpdate {
	if id != nil {
		rpu = rpu.SetConnectionID(*id)
	}
	return rpu
}

// SetConnection sets the "connection" edge to the Connection entity.
func (rpu *ReturnPortalUpdate) SetConnection(c *Connection) *ReturnPortalUpdate {
	return rpu.SetConnectionID(c.ID)
}

// SetEmailConfirmationLabelID sets the "email_confirmation_label" edge to the EmailTemplate entity by ID.
func (rpu *ReturnPortalUpdate) SetEmailConfirmationLabelID(id pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.SetEmailConfirmationLabelID(id)
	return rpu
}

// SetNillableEmailConfirmationLabelID sets the "email_confirmation_label" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableEmailConfirmationLabelID(id *pulid.ID) *ReturnPortalUpdate {
	if id != nil {
		rpu = rpu.SetEmailConfirmationLabelID(*id)
	}
	return rpu
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) SetEmailConfirmationLabel(e *EmailTemplate) *ReturnPortalUpdate {
	return rpu.SetEmailConfirmationLabelID(e.ID)
}

// SetEmailConfirmationQrCodeID sets the "email_confirmation_qr_code" edge to the EmailTemplate entity by ID.
func (rpu *ReturnPortalUpdate) SetEmailConfirmationQrCodeID(id pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.SetEmailConfirmationQrCodeID(id)
	return rpu
}

// SetNillableEmailConfirmationQrCodeID sets the "email_confirmation_qr_code" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableEmailConfirmationQrCodeID(id *pulid.ID) *ReturnPortalUpdate {
	if id != nil {
		rpu = rpu.SetEmailConfirmationQrCodeID(*id)
	}
	return rpu
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) SetEmailConfirmationQrCode(e *EmailTemplate) *ReturnPortalUpdate {
	return rpu.SetEmailConfirmationQrCodeID(e.ID)
}

// SetEmailReceivedID sets the "email_received" edge to the EmailTemplate entity by ID.
func (rpu *ReturnPortalUpdate) SetEmailReceivedID(id pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.SetEmailReceivedID(id)
	return rpu
}

// SetNillableEmailReceivedID sets the "email_received" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableEmailReceivedID(id *pulid.ID) *ReturnPortalUpdate {
	if id != nil {
		rpu = rpu.SetEmailReceivedID(*id)
	}
	return rpu
}

// SetEmailReceived sets the "email_received" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) SetEmailReceived(e *EmailTemplate) *ReturnPortalUpdate {
	return rpu.SetEmailReceivedID(e.ID)
}

// SetEmailAcceptedID sets the "email_accepted" edge to the EmailTemplate entity by ID.
func (rpu *ReturnPortalUpdate) SetEmailAcceptedID(id pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.SetEmailAcceptedID(id)
	return rpu
}

// SetNillableEmailAcceptedID sets the "email_accepted" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpu *ReturnPortalUpdate) SetNillableEmailAcceptedID(id *pulid.ID) *ReturnPortalUpdate {
	if id != nil {
		rpu = rpu.SetEmailAcceptedID(*id)
	}
	return rpu
}

// SetEmailAccepted sets the "email_accepted" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) SetEmailAccepted(e *EmailTemplate) *ReturnPortalUpdate {
	return rpu.SetEmailAcceptedID(e.ID)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (rpu *ReturnPortalUpdate) AddReturnColliIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.AddReturnColliIDs(ids...)
	return rpu
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (rpu *ReturnPortalUpdate) AddReturnColli(r ...*ReturnColli) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddReturnColliIDs(ids...)
}

// Mutation returns the ReturnPortalMutation object of the builder.
func (rpu *ReturnPortalUpdate) Mutation() *ReturnPortalMutation {
	return rpu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rpu *ReturnPortalUpdate) ClearTenant() *ReturnPortalUpdate {
	rpu.mutation.ClearTenant()
	return rpu
}

// ClearReturnPortalClaim clears all "return_portal_claim" edges to the ReturnPortalClaim entity.
func (rpu *ReturnPortalUpdate) ClearReturnPortalClaim() *ReturnPortalUpdate {
	rpu.mutation.ClearReturnPortalClaim()
	return rpu
}

// RemoveReturnPortalClaimIDs removes the "return_portal_claim" edge to ReturnPortalClaim entities by IDs.
func (rpu *ReturnPortalUpdate) RemoveReturnPortalClaimIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.RemoveReturnPortalClaimIDs(ids...)
	return rpu
}

// RemoveReturnPortalClaim removes "return_portal_claim" edges to ReturnPortalClaim entities.
func (rpu *ReturnPortalUpdate) RemoveReturnPortalClaim(r ...*ReturnPortalClaim) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveReturnPortalClaimIDs(ids...)
}

// ClearReturnLocation clears all "return_location" edges to the Location entity.
func (rpu *ReturnPortalUpdate) ClearReturnLocation() *ReturnPortalUpdate {
	rpu.mutation.ClearReturnLocation()
	return rpu
}

// RemoveReturnLocationIDs removes the "return_location" edge to Location entities by IDs.
func (rpu *ReturnPortalUpdate) RemoveReturnLocationIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.RemoveReturnLocationIDs(ids...)
	return rpu
}

// RemoveReturnLocation removes "return_location" edges to Location entities.
func (rpu *ReturnPortalUpdate) RemoveReturnLocation(l ...*Location) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rpu.RemoveReturnLocationIDs(ids...)
}

// ClearDeliveryOptions clears all "delivery_options" edges to the DeliveryOption entity.
func (rpu *ReturnPortalUpdate) ClearDeliveryOptions() *ReturnPortalUpdate {
	rpu.mutation.ClearDeliveryOptions()
	return rpu
}

// RemoveDeliveryOptionIDs removes the "delivery_options" edge to DeliveryOption entities by IDs.
func (rpu *ReturnPortalUpdate) RemoveDeliveryOptionIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.RemoveDeliveryOptionIDs(ids...)
	return rpu
}

// RemoveDeliveryOptions removes "delivery_options" edges to DeliveryOption entities.
func (rpu *ReturnPortalUpdate) RemoveDeliveryOptions(d ...*DeliveryOption) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rpu.RemoveDeliveryOptionIDs(ids...)
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (rpu *ReturnPortalUpdate) ClearConnection() *ReturnPortalUpdate {
	rpu.mutation.ClearConnection()
	return rpu
}

// ClearEmailConfirmationLabel clears the "email_confirmation_label" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) ClearEmailConfirmationLabel() *ReturnPortalUpdate {
	rpu.mutation.ClearEmailConfirmationLabel()
	return rpu
}

// ClearEmailConfirmationQrCode clears the "email_confirmation_qr_code" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) ClearEmailConfirmationQrCode() *ReturnPortalUpdate {
	rpu.mutation.ClearEmailConfirmationQrCode()
	return rpu
}

// ClearEmailReceived clears the "email_received" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) ClearEmailReceived() *ReturnPortalUpdate {
	rpu.mutation.ClearEmailReceived()
	return rpu
}

// ClearEmailAccepted clears the "email_accepted" edge to the EmailTemplate entity.
func (rpu *ReturnPortalUpdate) ClearEmailAccepted() *ReturnPortalUpdate {
	rpu.mutation.ClearEmailAccepted()
	return rpu
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (rpu *ReturnPortalUpdate) ClearReturnColli() *ReturnPortalUpdate {
	rpu.mutation.ClearReturnColli()
	return rpu
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (rpu *ReturnPortalUpdate) RemoveReturnColliIDs(ids ...pulid.ID) *ReturnPortalUpdate {
	rpu.mutation.RemoveReturnColliIDs(ids...)
	return rpu
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (rpu *ReturnPortalUpdate) RemoveReturnColli(r ...*ReturnColli) *ReturnPortalUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemoveReturnColliIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *ReturnPortalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *ReturnPortalUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *ReturnPortalUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *ReturnPortalUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *ReturnPortalUpdate) check() error {
	if rpu.mutation.TenantCleared() && len(rpu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnPortal.tenant"`)
	}
	return nil
}

func (rpu *ReturnPortalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(returnportal.Table, returnportal.Columns, sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.SetField(returnportal.FieldName, field.TypeString, value)
	}
	if value, ok := rpu.mutation.ReturnOpenHours(); ok {
		_spec.SetField(returnportal.FieldReturnOpenHours, field.TypeInt, value)
	}
	if value, ok := rpu.mutation.AddedReturnOpenHours(); ok {
		_spec.AddField(returnportal.FieldReturnOpenHours, field.TypeInt, value)
	}
	if value, ok := rpu.mutation.AutomaticallyAccept(); ok {
		_spec.SetField(returnportal.FieldAutomaticallyAccept, field.TypeBool, value)
	}
	if rpu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.TenantTable,
			Columns: []string{returnportal.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.TenantTable,
			Columns: []string{returnportal.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ReturnPortalClaimCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedReturnPortalClaimIDs(); len(nodes) > 0 && !rpu.mutation.ReturnPortalClaimCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ReturnPortalClaimIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedReturnLocationIDs(); len(nodes) > 0 && !rpu.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.DeliveryOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedDeliveryOptionsIDs(); len(nodes) > 0 && !rpu.mutation.DeliveryOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.DeliveryOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   returnportal.ConnectionTable,
			Columns: []string{returnportal.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   returnportal.ConnectionTable,
			Columns: []string{returnportal.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.EmailConfirmationLabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationLabelTable,
			Columns: []string{returnportal.EmailConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.EmailConfirmationLabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationLabelTable,
			Columns: []string{returnportal.EmailConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.EmailConfirmationQrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationQrCodeTable,
			Columns: []string{returnportal.EmailConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.EmailConfirmationQrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationQrCodeTable,
			Columns: []string{returnportal.EmailConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.EmailReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailReceivedTable,
			Columns: []string{returnportal.EmailReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.EmailReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailReceivedTable,
			Columns: []string{returnportal.EmailReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.EmailAcceptedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailAcceptedTable,
			Columns: []string{returnportal.EmailAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.EmailAcceptedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailAcceptedTable,
			Columns: []string{returnportal.EmailAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !rpu.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returnportal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// ReturnPortalUpdateOne is the builder for updating a single ReturnPortal entity.
type ReturnPortalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReturnPortalMutation
}

// SetTenantID sets the "tenant_id" field.
func (rpuo *ReturnPortalUpdateOne) SetTenantID(pu pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.SetTenantID(pu)
	return rpuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableTenantID(pu *pulid.ID) *ReturnPortalUpdateOne {
	if pu != nil {
		rpuo.SetTenantID(*pu)
	}
	return rpuo
}

// SetName sets the "name" field.
func (rpuo *ReturnPortalUpdateOne) SetName(s string) *ReturnPortalUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableName(s *string) *ReturnPortalUpdateOne {
	if s != nil {
		rpuo.SetName(*s)
	}
	return rpuo
}

// SetReturnOpenHours sets the "return_open_hours" field.
func (rpuo *ReturnPortalUpdateOne) SetReturnOpenHours(i int) *ReturnPortalUpdateOne {
	rpuo.mutation.ResetReturnOpenHours()
	rpuo.mutation.SetReturnOpenHours(i)
	return rpuo
}

// SetNillableReturnOpenHours sets the "return_open_hours" field if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableReturnOpenHours(i *int) *ReturnPortalUpdateOne {
	if i != nil {
		rpuo.SetReturnOpenHours(*i)
	}
	return rpuo
}

// AddReturnOpenHours adds i to the "return_open_hours" field.
func (rpuo *ReturnPortalUpdateOne) AddReturnOpenHours(i int) *ReturnPortalUpdateOne {
	rpuo.mutation.AddReturnOpenHours(i)
	return rpuo
}

// SetAutomaticallyAccept sets the "automatically_accept" field.
func (rpuo *ReturnPortalUpdateOne) SetAutomaticallyAccept(b bool) *ReturnPortalUpdateOne {
	rpuo.mutation.SetAutomaticallyAccept(b)
	return rpuo
}

// SetNillableAutomaticallyAccept sets the "automatically_accept" field if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableAutomaticallyAccept(b *bool) *ReturnPortalUpdateOne {
	if b != nil {
		rpuo.SetAutomaticallyAccept(*b)
	}
	return rpuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rpuo *ReturnPortalUpdateOne) SetTenant(t *Tenant) *ReturnPortalUpdateOne {
	return rpuo.SetTenantID(t.ID)
}

// AddReturnPortalClaimIDs adds the "return_portal_claim" edge to the ReturnPortalClaim entity by IDs.
func (rpuo *ReturnPortalUpdateOne) AddReturnPortalClaimIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.AddReturnPortalClaimIDs(ids...)
	return rpuo
}

// AddReturnPortalClaim adds the "return_portal_claim" edges to the ReturnPortalClaim entity.
func (rpuo *ReturnPortalUpdateOne) AddReturnPortalClaim(r ...*ReturnPortalClaim) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddReturnPortalClaimIDs(ids...)
}

// AddReturnLocationIDs adds the "return_location" edge to the Location entity by IDs.
func (rpuo *ReturnPortalUpdateOne) AddReturnLocationIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.AddReturnLocationIDs(ids...)
	return rpuo
}

// AddReturnLocation adds the "return_location" edges to the Location entity.
func (rpuo *ReturnPortalUpdateOne) AddReturnLocation(l ...*Location) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rpuo.AddReturnLocationIDs(ids...)
}

// AddDeliveryOptionIDs adds the "delivery_options" edge to the DeliveryOption entity by IDs.
func (rpuo *ReturnPortalUpdateOne) AddDeliveryOptionIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.AddDeliveryOptionIDs(ids...)
	return rpuo
}

// AddDeliveryOptions adds the "delivery_options" edges to the DeliveryOption entity.
func (rpuo *ReturnPortalUpdateOne) AddDeliveryOptions(d ...*DeliveryOption) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rpuo.AddDeliveryOptionIDs(ids...)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (rpuo *ReturnPortalUpdateOne) SetConnectionID(id pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.SetConnectionID(id)
	return rpuo
}

// SetNillableConnectionID sets the "connection" edge to the Connection entity by ID if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableConnectionID(id *pulid.ID) *ReturnPortalUpdateOne {
	if id != nil {
		rpuo = rpuo.SetConnectionID(*id)
	}
	return rpuo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (rpuo *ReturnPortalUpdateOne) SetConnection(c *Connection) *ReturnPortalUpdateOne {
	return rpuo.SetConnectionID(c.ID)
}

// SetEmailConfirmationLabelID sets the "email_confirmation_label" edge to the EmailTemplate entity by ID.
func (rpuo *ReturnPortalUpdateOne) SetEmailConfirmationLabelID(id pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.SetEmailConfirmationLabelID(id)
	return rpuo
}

// SetNillableEmailConfirmationLabelID sets the "email_confirmation_label" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableEmailConfirmationLabelID(id *pulid.ID) *ReturnPortalUpdateOne {
	if id != nil {
		rpuo = rpuo.SetEmailConfirmationLabelID(*id)
	}
	return rpuo
}

// SetEmailConfirmationLabel sets the "email_confirmation_label" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) SetEmailConfirmationLabel(e *EmailTemplate) *ReturnPortalUpdateOne {
	return rpuo.SetEmailConfirmationLabelID(e.ID)
}

// SetEmailConfirmationQrCodeID sets the "email_confirmation_qr_code" edge to the EmailTemplate entity by ID.
func (rpuo *ReturnPortalUpdateOne) SetEmailConfirmationQrCodeID(id pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.SetEmailConfirmationQrCodeID(id)
	return rpuo
}

// SetNillableEmailConfirmationQrCodeID sets the "email_confirmation_qr_code" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableEmailConfirmationQrCodeID(id *pulid.ID) *ReturnPortalUpdateOne {
	if id != nil {
		rpuo = rpuo.SetEmailConfirmationQrCodeID(*id)
	}
	return rpuo
}

// SetEmailConfirmationQrCode sets the "email_confirmation_qr_code" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) SetEmailConfirmationQrCode(e *EmailTemplate) *ReturnPortalUpdateOne {
	return rpuo.SetEmailConfirmationQrCodeID(e.ID)
}

// SetEmailReceivedID sets the "email_received" edge to the EmailTemplate entity by ID.
func (rpuo *ReturnPortalUpdateOne) SetEmailReceivedID(id pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.SetEmailReceivedID(id)
	return rpuo
}

// SetNillableEmailReceivedID sets the "email_received" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableEmailReceivedID(id *pulid.ID) *ReturnPortalUpdateOne {
	if id != nil {
		rpuo = rpuo.SetEmailReceivedID(*id)
	}
	return rpuo
}

// SetEmailReceived sets the "email_received" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) SetEmailReceived(e *EmailTemplate) *ReturnPortalUpdateOne {
	return rpuo.SetEmailReceivedID(e.ID)
}

// SetEmailAcceptedID sets the "email_accepted" edge to the EmailTemplate entity by ID.
func (rpuo *ReturnPortalUpdateOne) SetEmailAcceptedID(id pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.SetEmailAcceptedID(id)
	return rpuo
}

// SetNillableEmailAcceptedID sets the "email_accepted" edge to the EmailTemplate entity by ID if the given value is not nil.
func (rpuo *ReturnPortalUpdateOne) SetNillableEmailAcceptedID(id *pulid.ID) *ReturnPortalUpdateOne {
	if id != nil {
		rpuo = rpuo.SetEmailAcceptedID(*id)
	}
	return rpuo
}

// SetEmailAccepted sets the "email_accepted" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) SetEmailAccepted(e *EmailTemplate) *ReturnPortalUpdateOne {
	return rpuo.SetEmailAcceptedID(e.ID)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (rpuo *ReturnPortalUpdateOne) AddReturnColliIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.AddReturnColliIDs(ids...)
	return rpuo
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (rpuo *ReturnPortalUpdateOne) AddReturnColli(r ...*ReturnColli) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddReturnColliIDs(ids...)
}

// Mutation returns the ReturnPortalMutation object of the builder.
func (rpuo *ReturnPortalUpdateOne) Mutation() *ReturnPortalMutation {
	return rpuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rpuo *ReturnPortalUpdateOne) ClearTenant() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearTenant()
	return rpuo
}

// ClearReturnPortalClaim clears all "return_portal_claim" edges to the ReturnPortalClaim entity.
func (rpuo *ReturnPortalUpdateOne) ClearReturnPortalClaim() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearReturnPortalClaim()
	return rpuo
}

// RemoveReturnPortalClaimIDs removes the "return_portal_claim" edge to ReturnPortalClaim entities by IDs.
func (rpuo *ReturnPortalUpdateOne) RemoveReturnPortalClaimIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.RemoveReturnPortalClaimIDs(ids...)
	return rpuo
}

// RemoveReturnPortalClaim removes "return_portal_claim" edges to ReturnPortalClaim entities.
func (rpuo *ReturnPortalUpdateOne) RemoveReturnPortalClaim(r ...*ReturnPortalClaim) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveReturnPortalClaimIDs(ids...)
}

// ClearReturnLocation clears all "return_location" edges to the Location entity.
func (rpuo *ReturnPortalUpdateOne) ClearReturnLocation() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearReturnLocation()
	return rpuo
}

// RemoveReturnLocationIDs removes the "return_location" edge to Location entities by IDs.
func (rpuo *ReturnPortalUpdateOne) RemoveReturnLocationIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.RemoveReturnLocationIDs(ids...)
	return rpuo
}

// RemoveReturnLocation removes "return_location" edges to Location entities.
func (rpuo *ReturnPortalUpdateOne) RemoveReturnLocation(l ...*Location) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return rpuo.RemoveReturnLocationIDs(ids...)
}

// ClearDeliveryOptions clears all "delivery_options" edges to the DeliveryOption entity.
func (rpuo *ReturnPortalUpdateOne) ClearDeliveryOptions() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearDeliveryOptions()
	return rpuo
}

// RemoveDeliveryOptionIDs removes the "delivery_options" edge to DeliveryOption entities by IDs.
func (rpuo *ReturnPortalUpdateOne) RemoveDeliveryOptionIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.RemoveDeliveryOptionIDs(ids...)
	return rpuo
}

// RemoveDeliveryOptions removes "delivery_options" edges to DeliveryOption entities.
func (rpuo *ReturnPortalUpdateOne) RemoveDeliveryOptions(d ...*DeliveryOption) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rpuo.RemoveDeliveryOptionIDs(ids...)
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (rpuo *ReturnPortalUpdateOne) ClearConnection() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearConnection()
	return rpuo
}

// ClearEmailConfirmationLabel clears the "email_confirmation_label" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) ClearEmailConfirmationLabel() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearEmailConfirmationLabel()
	return rpuo
}

// ClearEmailConfirmationQrCode clears the "email_confirmation_qr_code" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) ClearEmailConfirmationQrCode() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearEmailConfirmationQrCode()
	return rpuo
}

// ClearEmailReceived clears the "email_received" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) ClearEmailReceived() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearEmailReceived()
	return rpuo
}

// ClearEmailAccepted clears the "email_accepted" edge to the EmailTemplate entity.
func (rpuo *ReturnPortalUpdateOne) ClearEmailAccepted() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearEmailAccepted()
	return rpuo
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (rpuo *ReturnPortalUpdateOne) ClearReturnColli() *ReturnPortalUpdateOne {
	rpuo.mutation.ClearReturnColli()
	return rpuo
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (rpuo *ReturnPortalUpdateOne) RemoveReturnColliIDs(ids ...pulid.ID) *ReturnPortalUpdateOne {
	rpuo.mutation.RemoveReturnColliIDs(ids...)
	return rpuo
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (rpuo *ReturnPortalUpdateOne) RemoveReturnColli(r ...*ReturnColli) *ReturnPortalUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemoveReturnColliIDs(ids...)
}

// Where appends a list predicates to the ReturnPortalUpdate builder.
func (rpuo *ReturnPortalUpdateOne) Where(ps ...predicate.ReturnPortal) *ReturnPortalUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *ReturnPortalUpdateOne) Select(field string, fields ...string) *ReturnPortalUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated ReturnPortal entity.
func (rpuo *ReturnPortalUpdateOne) Save(ctx context.Context) (*ReturnPortal, error) {
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *ReturnPortalUpdateOne) SaveX(ctx context.Context) *ReturnPortal {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *ReturnPortalUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *ReturnPortalUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *ReturnPortalUpdateOne) check() error {
	if rpuo.mutation.TenantCleared() && len(rpuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnPortal.tenant"`)
	}
	return nil
}

func (rpuo *ReturnPortalUpdateOne) sqlSave(ctx context.Context) (_node *ReturnPortal, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(returnportal.Table, returnportal.Columns, sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReturnPortal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returnportal.FieldID)
		for _, f := range fields {
			if !returnportal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != returnportal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.SetField(returnportal.FieldName, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.ReturnOpenHours(); ok {
		_spec.SetField(returnportal.FieldReturnOpenHours, field.TypeInt, value)
	}
	if value, ok := rpuo.mutation.AddedReturnOpenHours(); ok {
		_spec.AddField(returnportal.FieldReturnOpenHours, field.TypeInt, value)
	}
	if value, ok := rpuo.mutation.AutomaticallyAccept(); ok {
		_spec.SetField(returnportal.FieldAutomaticallyAccept, field.TypeBool, value)
	}
	if rpuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.TenantTable,
			Columns: []string{returnportal.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.TenantTable,
			Columns: []string{returnportal.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ReturnPortalClaimCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedReturnPortalClaimIDs(); len(nodes) > 0 && !rpuo.mutation.ReturnPortalClaimCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ReturnPortalClaimIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedReturnLocationIDs(); len(nodes) > 0 && !rpuo.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.DeliveryOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedDeliveryOptionsIDs(); len(nodes) > 0 && !rpuo.mutation.DeliveryOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.DeliveryOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   returnportal.ConnectionTable,
			Columns: []string{returnportal.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   returnportal.ConnectionTable,
			Columns: []string{returnportal.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.EmailConfirmationLabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationLabelTable,
			Columns: []string{returnportal.EmailConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.EmailConfirmationLabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationLabelTable,
			Columns: []string{returnportal.EmailConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.EmailConfirmationQrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationQrCodeTable,
			Columns: []string{returnportal.EmailConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.EmailConfirmationQrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationQrCodeTable,
			Columns: []string{returnportal.EmailConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.EmailReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailReceivedTable,
			Columns: []string{returnportal.EmailReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.EmailReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailReceivedTable,
			Columns: []string{returnportal.EmailReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.EmailAcceptedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailAcceptedTable,
			Columns: []string{returnportal.EmailAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.EmailAcceptedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailAcceptedTable,
			Columns: []string{returnportal.EmailAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !rpuo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReturnPortal{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returnportal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
