// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ColliUpdate is the builder for updating Colli entities.
type ColliUpdate struct {
	config
	hooks    []Hook
	mutation *ColliMutation
}

// Where appends a list predicates to the ColliUpdate builder.
func (cu *ColliUpdate) Where(ps ...predicate.Colli) *ColliUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *ColliUpdate) SetTenantID(pu pulid.ID) *ColliUpdate {
	cu.mutation.SetTenantID(pu)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *ColliUpdate) SetNillableTenantID(pu *pulid.ID) *ColliUpdate {
	if pu != nil {
		cu.SetTenantID(*pu)
	}
	return cu
}

// SetInternalBarcode sets the "internal_barcode" field.
func (cu *ColliUpdate) SetInternalBarcode(i int64) *ColliUpdate {
	cu.mutation.ResetInternalBarcode()
	cu.mutation.SetInternalBarcode(i)
	return cu
}

// SetNillableInternalBarcode sets the "internal_barcode" field if the given value is not nil.
func (cu *ColliUpdate) SetNillableInternalBarcode(i *int64) *ColliUpdate {
	if i != nil {
		cu.SetInternalBarcode(*i)
	}
	return cu
}

// AddInternalBarcode adds i to the "internal_barcode" field.
func (cu *ColliUpdate) AddInternalBarcode(i int64) *ColliUpdate {
	cu.mutation.AddInternalBarcode(i)
	return cu
}

// ClearInternalBarcode clears the value of the "internal_barcode" field.
func (cu *ColliUpdate) ClearInternalBarcode() *ColliUpdate {
	cu.mutation.ClearInternalBarcode()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ColliUpdate) SetStatus(c colli.Status) *ColliUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ColliUpdate) SetNillableStatus(c *colli.Status) *ColliUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetSlipPrintStatus sets the "slip_print_status" field.
func (cu *ColliUpdate) SetSlipPrintStatus(cps colli.SlipPrintStatus) *ColliUpdate {
	cu.mutation.SetSlipPrintStatus(cps)
	return cu
}

// SetNillableSlipPrintStatus sets the "slip_print_status" field if the given value is not nil.
func (cu *ColliUpdate) SetNillableSlipPrintStatus(cps *colli.SlipPrintStatus) *ColliUpdate {
	if cps != nil {
		cu.SetSlipPrintStatus(*cps)
	}
	return cu
}

// SetEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field.
func (cu *ColliUpdate) SetEmailPackingSlipPrintedAt(t time.Time) *ColliUpdate {
	cu.mutation.SetEmailPackingSlipPrintedAt(t)
	return cu
}

// SetNillableEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field if the given value is not nil.
func (cu *ColliUpdate) SetNillableEmailPackingSlipPrintedAt(t *time.Time) *ColliUpdate {
	if t != nil {
		cu.SetEmailPackingSlipPrintedAt(*t)
	}
	return cu
}

// ClearEmailPackingSlipPrintedAt clears the value of the "email_packing_slip_printed_at" field.
func (cu *ColliUpdate) ClearEmailPackingSlipPrintedAt() *ColliUpdate {
	cu.mutation.ClearEmailPackingSlipPrintedAt()
	return cu
}

// SetEmailLabelPrintedAt sets the "email_label_printed_at" field.
func (cu *ColliUpdate) SetEmailLabelPrintedAt(t time.Time) *ColliUpdate {
	cu.mutation.SetEmailLabelPrintedAt(t)
	return cu
}

// SetNillableEmailLabelPrintedAt sets the "email_label_printed_at" field if the given value is not nil.
func (cu *ColliUpdate) SetNillableEmailLabelPrintedAt(t *time.Time) *ColliUpdate {
	if t != nil {
		cu.SetEmailLabelPrintedAt(*t)
	}
	return cu
}

// ClearEmailLabelPrintedAt clears the value of the "email_label_printed_at" field.
func (cu *ColliUpdate) ClearEmailLabelPrintedAt() *ColliUpdate {
	cu.mutation.ClearEmailLabelPrintedAt()
	return cu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cu *ColliUpdate) SetTenant(t *Tenant) *ColliUpdate {
	return cu.SetTenantID(t.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (cu *ColliUpdate) SetRecipientID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetRecipientID(id)
	return cu
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (cu *ColliUpdate) SetRecipient(a *Address) *ColliUpdate {
	return cu.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (cu *ColliUpdate) SetSenderID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetSenderID(id)
	return cu
}

// SetSender sets the "sender" edge to the Address entity.
func (cu *ColliUpdate) SetSender(a *Address) *ColliUpdate {
	return cu.SetSenderID(a.ID)
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (cu *ColliUpdate) SetParcelShopID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetParcelShopID(id)
	return cu
}

// SetNillableParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID if the given value is not nil.
func (cu *ColliUpdate) SetNillableParcelShopID(id *pulid.ID) *ColliUpdate {
	if id != nil {
		cu = cu.SetParcelShopID(*id)
	}
	return cu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (cu *ColliUpdate) SetParcelShop(p *ParcelShop) *ColliUpdate {
	return cu.SetParcelShopID(p.ID)
}

// SetClickCollectLocationID sets the "click_collect_location" edge to the Location entity by ID.
func (cu *ColliUpdate) SetClickCollectLocationID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetClickCollectLocationID(id)
	return cu
}

// SetNillableClickCollectLocationID sets the "click_collect_location" edge to the Location entity by ID if the given value is not nil.
func (cu *ColliUpdate) SetNillableClickCollectLocationID(id *pulid.ID) *ColliUpdate {
	if id != nil {
		cu = cu.SetClickCollectLocationID(*id)
	}
	return cu
}

// SetClickCollectLocation sets the "click_collect_location" edge to the Location entity.
func (cu *ColliUpdate) SetClickCollectLocation(l *Location) *ColliUpdate {
	return cu.SetClickCollectLocationID(l.ID)
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (cu *ColliUpdate) AddOrderLineIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.AddOrderLineIDs(ids...)
	return cu
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (cu *ColliUpdate) AddOrderLines(o ...*OrderLine) *ColliUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderLineIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (cu *ColliUpdate) SetDeliveryOptionID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetDeliveryOptionID(id)
	return cu
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cu *ColliUpdate) SetNillableDeliveryOptionID(id *pulid.ID) *ColliUpdate {
	if id != nil {
		cu = cu.SetDeliveryOptionID(*id)
	}
	return cu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (cu *ColliUpdate) SetDeliveryOption(d *DeliveryOption) *ColliUpdate {
	return cu.SetDeliveryOptionID(d.ID)
}

// AddDocumentFileIDs adds the "document_file" edge to the DocumentFile entity by IDs.
func (cu *ColliUpdate) AddDocumentFileIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.AddDocumentFileIDs(ids...)
	return cu
}

// AddDocumentFile adds the "document_file" edges to the DocumentFile entity.
func (cu *ColliUpdate) AddDocumentFile(d ...*DocumentFile) *ColliUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDocumentFileIDs(ids...)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (cu *ColliUpdate) SetShipmentParcelID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetShipmentParcelID(id)
	return cu
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (cu *ColliUpdate) SetNillableShipmentParcelID(id *pulid.ID) *ColliUpdate {
	if id != nil {
		cu = cu.SetShipmentParcelID(*id)
	}
	return cu
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (cu *ColliUpdate) SetShipmentParcel(s *ShipmentParcel) *ColliUpdate {
	return cu.SetShipmentParcelID(s.ID)
}

// AddCancelledShipmentParcelIDs adds the "cancelled_shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (cu *ColliUpdate) AddCancelledShipmentParcelIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.AddCancelledShipmentParcelIDs(ids...)
	return cu
}

// AddCancelledShipmentParcel adds the "cancelled_shipment_parcel" edges to the ShipmentParcel entity.
func (cu *ColliUpdate) AddCancelledShipmentParcel(s ...*ShipmentParcel) *ColliUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddCancelledShipmentParcelIDs(ids...)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (cu *ColliUpdate) SetOrderID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetOrderID(id)
	return cu
}

// SetOrder sets the "order" edge to the Order entity.
func (cu *ColliUpdate) SetOrder(o *Order) *ColliUpdate {
	return cu.SetOrderID(o.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (cu *ColliUpdate) SetPackagingID(id pulid.ID) *ColliUpdate {
	cu.mutation.SetPackagingID(id)
	return cu
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (cu *ColliUpdate) SetNillablePackagingID(id *pulid.ID) *ColliUpdate {
	if id != nil {
		cu = cu.SetPackagingID(*id)
	}
	return cu
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (cu *ColliUpdate) SetPackaging(p *Packaging) *ColliUpdate {
	return cu.SetPackagingID(p.ID)
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (cu *ColliUpdate) AddPrintJobIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.AddPrintJobIDs(ids...)
	return cu
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (cu *ColliUpdate) AddPrintJob(p ...*PrintJob) *ColliUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPrintJobIDs(ids...)
}

// Mutation returns the ColliMutation object of the builder.
func (cu *ColliUpdate) Mutation() *ColliMutation {
	return cu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cu *ColliUpdate) ClearTenant() *ColliUpdate {
	cu.mutation.ClearTenant()
	return cu
}

// ClearRecipient clears the "recipient" edge to the Address entity.
func (cu *ColliUpdate) ClearRecipient() *ColliUpdate {
	cu.mutation.ClearRecipient()
	return cu
}

// ClearSender clears the "sender" edge to the Address entity.
func (cu *ColliUpdate) ClearSender() *ColliUpdate {
	cu.mutation.ClearSender()
	return cu
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (cu *ColliUpdate) ClearParcelShop() *ColliUpdate {
	cu.mutation.ClearParcelShop()
	return cu
}

// ClearClickCollectLocation clears the "click_collect_location" edge to the Location entity.
func (cu *ColliUpdate) ClearClickCollectLocation() *ColliUpdate {
	cu.mutation.ClearClickCollectLocation()
	return cu
}

// ClearOrderLines clears all "order_lines" edges to the OrderLine entity.
func (cu *ColliUpdate) ClearOrderLines() *ColliUpdate {
	cu.mutation.ClearOrderLines()
	return cu
}

// RemoveOrderLineIDs removes the "order_lines" edge to OrderLine entities by IDs.
func (cu *ColliUpdate) RemoveOrderLineIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.RemoveOrderLineIDs(ids...)
	return cu
}

// RemoveOrderLines removes "order_lines" edges to OrderLine entities.
func (cu *ColliUpdate) RemoveOrderLines(o ...*OrderLine) *ColliUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderLineIDs(ids...)
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (cu *ColliUpdate) ClearDeliveryOption() *ColliUpdate {
	cu.mutation.ClearDeliveryOption()
	return cu
}

// ClearDocumentFile clears all "document_file" edges to the DocumentFile entity.
func (cu *ColliUpdate) ClearDocumentFile() *ColliUpdate {
	cu.mutation.ClearDocumentFile()
	return cu
}

// RemoveDocumentFileIDs removes the "document_file" edge to DocumentFile entities by IDs.
func (cu *ColliUpdate) RemoveDocumentFileIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.RemoveDocumentFileIDs(ids...)
	return cu
}

// RemoveDocumentFile removes "document_file" edges to DocumentFile entities.
func (cu *ColliUpdate) RemoveDocumentFile(d ...*DocumentFile) *ColliUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDocumentFileIDs(ids...)
}

// ClearShipmentParcel clears the "shipment_parcel" edge to the ShipmentParcel entity.
func (cu *ColliUpdate) ClearShipmentParcel() *ColliUpdate {
	cu.mutation.ClearShipmentParcel()
	return cu
}

// ClearCancelledShipmentParcel clears all "cancelled_shipment_parcel" edges to the ShipmentParcel entity.
func (cu *ColliUpdate) ClearCancelledShipmentParcel() *ColliUpdate {
	cu.mutation.ClearCancelledShipmentParcel()
	return cu
}

// RemoveCancelledShipmentParcelIDs removes the "cancelled_shipment_parcel" edge to ShipmentParcel entities by IDs.
func (cu *ColliUpdate) RemoveCancelledShipmentParcelIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.RemoveCancelledShipmentParcelIDs(ids...)
	return cu
}

// RemoveCancelledShipmentParcel removes "cancelled_shipment_parcel" edges to ShipmentParcel entities.
func (cu *ColliUpdate) RemoveCancelledShipmentParcel(s ...*ShipmentParcel) *ColliUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveCancelledShipmentParcelIDs(ids...)
}

// ClearOrder clears the "order" edge to the Order entity.
func (cu *ColliUpdate) ClearOrder() *ColliUpdate {
	cu.mutation.ClearOrder()
	return cu
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (cu *ColliUpdate) ClearPackaging() *ColliUpdate {
	cu.mutation.ClearPackaging()
	return cu
}

// ClearPrintJob clears all "print_job" edges to the PrintJob entity.
func (cu *ColliUpdate) ClearPrintJob() *ColliUpdate {
	cu.mutation.ClearPrintJob()
	return cu
}

// RemovePrintJobIDs removes the "print_job" edge to PrintJob entities by IDs.
func (cu *ColliUpdate) RemovePrintJobIDs(ids ...pulid.ID) *ColliUpdate {
	cu.mutation.RemovePrintJobIDs(ids...)
	return cu
}

// RemovePrintJob removes "print_job" edges to PrintJob entities.
func (cu *ColliUpdate) RemovePrintJob(p ...*PrintJob) *ColliUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePrintJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ColliUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ColliUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ColliUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ColliUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ColliUpdate) check() error {
	if v, ok := cu.mutation.InternalBarcode(); ok {
		if err := colli.InternalBarcodeValidator(v); err != nil {
			return &ValidationError{Name: "internal_barcode", err: fmt.Errorf(`ent: validator failed for field "Colli.internal_barcode": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := colli.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Colli.status": %w`, err)}
		}
	}
	if v, ok := cu.mutation.SlipPrintStatus(); ok {
		if err := colli.SlipPrintStatusValidator(v); err != nil {
			return &ValidationError{Name: "slip_print_status", err: fmt.Errorf(`ent: validator failed for field "Colli.slip_print_status": %w`, err)}
		}
	}
	if cu.mutation.TenantCleared() && len(cu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.tenant"`)
	}
	if cu.mutation.RecipientCleared() && len(cu.mutation.RecipientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.recipient"`)
	}
	if cu.mutation.SenderCleared() && len(cu.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.sender"`)
	}
	if cu.mutation.OrderCleared() && len(cu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.order"`)
	}
	return nil
}

func (cu *ColliUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(colli.Table, colli.Columns, sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.InternalBarcode(); ok {
		_spec.SetField(colli.FieldInternalBarcode, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedInternalBarcode(); ok {
		_spec.AddField(colli.FieldInternalBarcode, field.TypeInt64, value)
	}
	if cu.mutation.InternalBarcodeCleared() {
		_spec.ClearField(colli.FieldInternalBarcode, field.TypeInt64)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(colli.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.SlipPrintStatus(); ok {
		_spec.SetField(colli.FieldSlipPrintStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.EmailPackingSlipPrintedAt(); ok {
		_spec.SetField(colli.FieldEmailPackingSlipPrintedAt, field.TypeTime, value)
	}
	if cu.mutation.EmailPackingSlipPrintedAtCleared() {
		_spec.ClearField(colli.FieldEmailPackingSlipPrintedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.EmailLabelPrintedAt(); ok {
		_spec.SetField(colli.FieldEmailLabelPrintedAt, field.TypeTime, value)
	}
	if cu.mutation.EmailLabelPrintedAtCleared() {
		_spec.ClearField(colli.FieldEmailLabelPrintedAt, field.TypeTime)
	}
	if cu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.TenantTable,
			Columns: []string{colli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.TenantTable,
			Columns: []string{colli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.RecipientTable,
			Columns: []string{colli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.RecipientTable,
			Columns: []string{colli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.SenderTable,
			Columns: []string{colli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.SenderTable,
			Columns: []string{colli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ParcelShopTable,
			Columns: []string{colli.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ParcelShopTable,
			Columns: []string{colli.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClickCollectLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ClickCollectLocationTable,
			Columns: []string{colli.ClickCollectLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClickCollectLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ClickCollectLocationTable,
			Columns: []string{colli.ClickCollectLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrderLinesIDs(); len(nodes) > 0 && !cu.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.DeliveryOptionTable,
			Columns: []string{colli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.DeliveryOptionTable,
			Columns: []string{colli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DocumentFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDocumentFileIDs(); len(nodes) > 0 && !cu.mutation.DocumentFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DocumentFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   colli.ShipmentParcelTable,
			Columns: []string{colli.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   colli.ShipmentParcelTable,
			Columns: []string{colli.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CancelledShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCancelledShipmentParcelIDs(); len(nodes) > 0 && !cu.mutation.CancelledShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CancelledShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   colli.OrderTable,
			Columns: []string{colli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   colli.OrderTable,
			Columns: []string{colli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.PackagingTable,
			Columns: []string{colli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.PackagingTable,
			Columns: []string{colli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPrintJobIDs(); len(nodes) > 0 && !cu.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{colli.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ColliUpdateOne is the builder for updating a single Colli entity.
type ColliUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ColliMutation
}

// SetTenantID sets the "tenant_id" field.
func (cuo *ColliUpdateOne) SetTenantID(pu pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetTenantID(pu)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableTenantID(pu *pulid.ID) *ColliUpdateOne {
	if pu != nil {
		cuo.SetTenantID(*pu)
	}
	return cuo
}

// SetInternalBarcode sets the "internal_barcode" field.
func (cuo *ColliUpdateOne) SetInternalBarcode(i int64) *ColliUpdateOne {
	cuo.mutation.ResetInternalBarcode()
	cuo.mutation.SetInternalBarcode(i)
	return cuo
}

// SetNillableInternalBarcode sets the "internal_barcode" field if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableInternalBarcode(i *int64) *ColliUpdateOne {
	if i != nil {
		cuo.SetInternalBarcode(*i)
	}
	return cuo
}

// AddInternalBarcode adds i to the "internal_barcode" field.
func (cuo *ColliUpdateOne) AddInternalBarcode(i int64) *ColliUpdateOne {
	cuo.mutation.AddInternalBarcode(i)
	return cuo
}

// ClearInternalBarcode clears the value of the "internal_barcode" field.
func (cuo *ColliUpdateOne) ClearInternalBarcode() *ColliUpdateOne {
	cuo.mutation.ClearInternalBarcode()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ColliUpdateOne) SetStatus(c colli.Status) *ColliUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableStatus(c *colli.Status) *ColliUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetSlipPrintStatus sets the "slip_print_status" field.
func (cuo *ColliUpdateOne) SetSlipPrintStatus(cps colli.SlipPrintStatus) *ColliUpdateOne {
	cuo.mutation.SetSlipPrintStatus(cps)
	return cuo
}

// SetNillableSlipPrintStatus sets the "slip_print_status" field if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableSlipPrintStatus(cps *colli.SlipPrintStatus) *ColliUpdateOne {
	if cps != nil {
		cuo.SetSlipPrintStatus(*cps)
	}
	return cuo
}

// SetEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field.
func (cuo *ColliUpdateOne) SetEmailPackingSlipPrintedAt(t time.Time) *ColliUpdateOne {
	cuo.mutation.SetEmailPackingSlipPrintedAt(t)
	return cuo
}

// SetNillableEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableEmailPackingSlipPrintedAt(t *time.Time) *ColliUpdateOne {
	if t != nil {
		cuo.SetEmailPackingSlipPrintedAt(*t)
	}
	return cuo
}

// ClearEmailPackingSlipPrintedAt clears the value of the "email_packing_slip_printed_at" field.
func (cuo *ColliUpdateOne) ClearEmailPackingSlipPrintedAt() *ColliUpdateOne {
	cuo.mutation.ClearEmailPackingSlipPrintedAt()
	return cuo
}

// SetEmailLabelPrintedAt sets the "email_label_printed_at" field.
func (cuo *ColliUpdateOne) SetEmailLabelPrintedAt(t time.Time) *ColliUpdateOne {
	cuo.mutation.SetEmailLabelPrintedAt(t)
	return cuo
}

// SetNillableEmailLabelPrintedAt sets the "email_label_printed_at" field if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableEmailLabelPrintedAt(t *time.Time) *ColliUpdateOne {
	if t != nil {
		cuo.SetEmailLabelPrintedAt(*t)
	}
	return cuo
}

// ClearEmailLabelPrintedAt clears the value of the "email_label_printed_at" field.
func (cuo *ColliUpdateOne) ClearEmailLabelPrintedAt() *ColliUpdateOne {
	cuo.mutation.ClearEmailLabelPrintedAt()
	return cuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuo *ColliUpdateOne) SetTenant(t *Tenant) *ColliUpdateOne {
	return cuo.SetTenantID(t.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (cuo *ColliUpdateOne) SetRecipientID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetRecipientID(id)
	return cuo
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (cuo *ColliUpdateOne) SetRecipient(a *Address) *ColliUpdateOne {
	return cuo.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (cuo *ColliUpdateOne) SetSenderID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetSenderID(id)
	return cuo
}

// SetSender sets the "sender" edge to the Address entity.
func (cuo *ColliUpdateOne) SetSender(a *Address) *ColliUpdateOne {
	return cuo.SetSenderID(a.ID)
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (cuo *ColliUpdateOne) SetParcelShopID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetParcelShopID(id)
	return cuo
}

// SetNillableParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableParcelShopID(id *pulid.ID) *ColliUpdateOne {
	if id != nil {
		cuo = cuo.SetParcelShopID(*id)
	}
	return cuo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (cuo *ColliUpdateOne) SetParcelShop(p *ParcelShop) *ColliUpdateOne {
	return cuo.SetParcelShopID(p.ID)
}

// SetClickCollectLocationID sets the "click_collect_location" edge to the Location entity by ID.
func (cuo *ColliUpdateOne) SetClickCollectLocationID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetClickCollectLocationID(id)
	return cuo
}

// SetNillableClickCollectLocationID sets the "click_collect_location" edge to the Location entity by ID if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableClickCollectLocationID(id *pulid.ID) *ColliUpdateOne {
	if id != nil {
		cuo = cuo.SetClickCollectLocationID(*id)
	}
	return cuo
}

// SetClickCollectLocation sets the "click_collect_location" edge to the Location entity.
func (cuo *ColliUpdateOne) SetClickCollectLocation(l *Location) *ColliUpdateOne {
	return cuo.SetClickCollectLocationID(l.ID)
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (cuo *ColliUpdateOne) AddOrderLineIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.AddOrderLineIDs(ids...)
	return cuo
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (cuo *ColliUpdateOne) AddOrderLines(o ...*OrderLine) *ColliUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderLineIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (cuo *ColliUpdateOne) SetDeliveryOptionID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetDeliveryOptionID(id)
	return cuo
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableDeliveryOptionID(id *pulid.ID) *ColliUpdateOne {
	if id != nil {
		cuo = cuo.SetDeliveryOptionID(*id)
	}
	return cuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (cuo *ColliUpdateOne) SetDeliveryOption(d *DeliveryOption) *ColliUpdateOne {
	return cuo.SetDeliveryOptionID(d.ID)
}

// AddDocumentFileIDs adds the "document_file" edge to the DocumentFile entity by IDs.
func (cuo *ColliUpdateOne) AddDocumentFileIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.AddDocumentFileIDs(ids...)
	return cuo
}

// AddDocumentFile adds the "document_file" edges to the DocumentFile entity.
func (cuo *ColliUpdateOne) AddDocumentFile(d ...*DocumentFile) *ColliUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDocumentFileIDs(ids...)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (cuo *ColliUpdateOne) SetShipmentParcelID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetShipmentParcelID(id)
	return cuo
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillableShipmentParcelID(id *pulid.ID) *ColliUpdateOne {
	if id != nil {
		cuo = cuo.SetShipmentParcelID(*id)
	}
	return cuo
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (cuo *ColliUpdateOne) SetShipmentParcel(s *ShipmentParcel) *ColliUpdateOne {
	return cuo.SetShipmentParcelID(s.ID)
}

// AddCancelledShipmentParcelIDs adds the "cancelled_shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (cuo *ColliUpdateOne) AddCancelledShipmentParcelIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.AddCancelledShipmentParcelIDs(ids...)
	return cuo
}

// AddCancelledShipmentParcel adds the "cancelled_shipment_parcel" edges to the ShipmentParcel entity.
func (cuo *ColliUpdateOne) AddCancelledShipmentParcel(s ...*ShipmentParcel) *ColliUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddCancelledShipmentParcelIDs(ids...)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (cuo *ColliUpdateOne) SetOrderID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetOrderID(id)
	return cuo
}

// SetOrder sets the "order" edge to the Order entity.
func (cuo *ColliUpdateOne) SetOrder(o *Order) *ColliUpdateOne {
	return cuo.SetOrderID(o.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (cuo *ColliUpdateOne) SetPackagingID(id pulid.ID) *ColliUpdateOne {
	cuo.mutation.SetPackagingID(id)
	return cuo
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (cuo *ColliUpdateOne) SetNillablePackagingID(id *pulid.ID) *ColliUpdateOne {
	if id != nil {
		cuo = cuo.SetPackagingID(*id)
	}
	return cuo
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (cuo *ColliUpdateOne) SetPackaging(p *Packaging) *ColliUpdateOne {
	return cuo.SetPackagingID(p.ID)
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (cuo *ColliUpdateOne) AddPrintJobIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.AddPrintJobIDs(ids...)
	return cuo
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (cuo *ColliUpdateOne) AddPrintJob(p ...*PrintJob) *ColliUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPrintJobIDs(ids...)
}

// Mutation returns the ColliMutation object of the builder.
func (cuo *ColliUpdateOne) Mutation() *ColliMutation {
	return cuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuo *ColliUpdateOne) ClearTenant() *ColliUpdateOne {
	cuo.mutation.ClearTenant()
	return cuo
}

// ClearRecipient clears the "recipient" edge to the Address entity.
func (cuo *ColliUpdateOne) ClearRecipient() *ColliUpdateOne {
	cuo.mutation.ClearRecipient()
	return cuo
}

// ClearSender clears the "sender" edge to the Address entity.
func (cuo *ColliUpdateOne) ClearSender() *ColliUpdateOne {
	cuo.mutation.ClearSender()
	return cuo
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (cuo *ColliUpdateOne) ClearParcelShop() *ColliUpdateOne {
	cuo.mutation.ClearParcelShop()
	return cuo
}

// ClearClickCollectLocation clears the "click_collect_location" edge to the Location entity.
func (cuo *ColliUpdateOne) ClearClickCollectLocation() *ColliUpdateOne {
	cuo.mutation.ClearClickCollectLocation()
	return cuo
}

// ClearOrderLines clears all "order_lines" edges to the OrderLine entity.
func (cuo *ColliUpdateOne) ClearOrderLines() *ColliUpdateOne {
	cuo.mutation.ClearOrderLines()
	return cuo
}

// RemoveOrderLineIDs removes the "order_lines" edge to OrderLine entities by IDs.
func (cuo *ColliUpdateOne) RemoveOrderLineIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.RemoveOrderLineIDs(ids...)
	return cuo
}

// RemoveOrderLines removes "order_lines" edges to OrderLine entities.
func (cuo *ColliUpdateOne) RemoveOrderLines(o ...*OrderLine) *ColliUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderLineIDs(ids...)
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (cuo *ColliUpdateOne) ClearDeliveryOption() *ColliUpdateOne {
	cuo.mutation.ClearDeliveryOption()
	return cuo
}

// ClearDocumentFile clears all "document_file" edges to the DocumentFile entity.
func (cuo *ColliUpdateOne) ClearDocumentFile() *ColliUpdateOne {
	cuo.mutation.ClearDocumentFile()
	return cuo
}

// RemoveDocumentFileIDs removes the "document_file" edge to DocumentFile entities by IDs.
func (cuo *ColliUpdateOne) RemoveDocumentFileIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.RemoveDocumentFileIDs(ids...)
	return cuo
}

// RemoveDocumentFile removes "document_file" edges to DocumentFile entities.
func (cuo *ColliUpdateOne) RemoveDocumentFile(d ...*DocumentFile) *ColliUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDocumentFileIDs(ids...)
}

// ClearShipmentParcel clears the "shipment_parcel" edge to the ShipmentParcel entity.
func (cuo *ColliUpdateOne) ClearShipmentParcel() *ColliUpdateOne {
	cuo.mutation.ClearShipmentParcel()
	return cuo
}

// ClearCancelledShipmentParcel clears all "cancelled_shipment_parcel" edges to the ShipmentParcel entity.
func (cuo *ColliUpdateOne) ClearCancelledShipmentParcel() *ColliUpdateOne {
	cuo.mutation.ClearCancelledShipmentParcel()
	return cuo
}

// RemoveCancelledShipmentParcelIDs removes the "cancelled_shipment_parcel" edge to ShipmentParcel entities by IDs.
func (cuo *ColliUpdateOne) RemoveCancelledShipmentParcelIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.RemoveCancelledShipmentParcelIDs(ids...)
	return cuo
}

// RemoveCancelledShipmentParcel removes "cancelled_shipment_parcel" edges to ShipmentParcel entities.
func (cuo *ColliUpdateOne) RemoveCancelledShipmentParcel(s ...*ShipmentParcel) *ColliUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveCancelledShipmentParcelIDs(ids...)
}

// ClearOrder clears the "order" edge to the Order entity.
func (cuo *ColliUpdateOne) ClearOrder() *ColliUpdateOne {
	cuo.mutation.ClearOrder()
	return cuo
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (cuo *ColliUpdateOne) ClearPackaging() *ColliUpdateOne {
	cuo.mutation.ClearPackaging()
	return cuo
}

// ClearPrintJob clears all "print_job" edges to the PrintJob entity.
func (cuo *ColliUpdateOne) ClearPrintJob() *ColliUpdateOne {
	cuo.mutation.ClearPrintJob()
	return cuo
}

// RemovePrintJobIDs removes the "print_job" edge to PrintJob entities by IDs.
func (cuo *ColliUpdateOne) RemovePrintJobIDs(ids ...pulid.ID) *ColliUpdateOne {
	cuo.mutation.RemovePrintJobIDs(ids...)
	return cuo
}

// RemovePrintJob removes "print_job" edges to PrintJob entities.
func (cuo *ColliUpdateOne) RemovePrintJob(p ...*PrintJob) *ColliUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePrintJobIDs(ids...)
}

// Where appends a list predicates to the ColliUpdate builder.
func (cuo *ColliUpdateOne) Where(ps ...predicate.Colli) *ColliUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ColliUpdateOne) Select(field string, fields ...string) *ColliUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Colli entity.
func (cuo *ColliUpdateOne) Save(ctx context.Context) (*Colli, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ColliUpdateOne) SaveX(ctx context.Context) *Colli {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ColliUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ColliUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ColliUpdateOne) check() error {
	if v, ok := cuo.mutation.InternalBarcode(); ok {
		if err := colli.InternalBarcodeValidator(v); err != nil {
			return &ValidationError{Name: "internal_barcode", err: fmt.Errorf(`ent: validator failed for field "Colli.internal_barcode": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := colli.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Colli.status": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.SlipPrintStatus(); ok {
		if err := colli.SlipPrintStatusValidator(v); err != nil {
			return &ValidationError{Name: "slip_print_status", err: fmt.Errorf(`ent: validator failed for field "Colli.slip_print_status": %w`, err)}
		}
	}
	if cuo.mutation.TenantCleared() && len(cuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.tenant"`)
	}
	if cuo.mutation.RecipientCleared() && len(cuo.mutation.RecipientIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.recipient"`)
	}
	if cuo.mutation.SenderCleared() && len(cuo.mutation.SenderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.sender"`)
	}
	if cuo.mutation.OrderCleared() && len(cuo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Colli.order"`)
	}
	return nil
}

func (cuo *ColliUpdateOne) sqlSave(ctx context.Context) (_node *Colli, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(colli.Table, colli.Columns, sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Colli.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, colli.FieldID)
		for _, f := range fields {
			if !colli.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != colli.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.InternalBarcode(); ok {
		_spec.SetField(colli.FieldInternalBarcode, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedInternalBarcode(); ok {
		_spec.AddField(colli.FieldInternalBarcode, field.TypeInt64, value)
	}
	if cuo.mutation.InternalBarcodeCleared() {
		_spec.ClearField(colli.FieldInternalBarcode, field.TypeInt64)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(colli.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.SlipPrintStatus(); ok {
		_spec.SetField(colli.FieldSlipPrintStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.EmailPackingSlipPrintedAt(); ok {
		_spec.SetField(colli.FieldEmailPackingSlipPrintedAt, field.TypeTime, value)
	}
	if cuo.mutation.EmailPackingSlipPrintedAtCleared() {
		_spec.ClearField(colli.FieldEmailPackingSlipPrintedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.EmailLabelPrintedAt(); ok {
		_spec.SetField(colli.FieldEmailLabelPrintedAt, field.TypeTime, value)
	}
	if cuo.mutation.EmailLabelPrintedAtCleared() {
		_spec.ClearField(colli.FieldEmailLabelPrintedAt, field.TypeTime)
	}
	if cuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.TenantTable,
			Columns: []string{colli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.TenantTable,
			Columns: []string{colli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.RecipientTable,
			Columns: []string{colli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.RecipientTable,
			Columns: []string{colli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.SenderTable,
			Columns: []string{colli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.SenderTable,
			Columns: []string{colli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ParcelShopTable,
			Columns: []string{colli.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ParcelShopTable,
			Columns: []string{colli.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClickCollectLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ClickCollectLocationTable,
			Columns: []string{colli.ClickCollectLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClickCollectLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ClickCollectLocationTable,
			Columns: []string{colli.ClickCollectLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrderLinesIDs(); len(nodes) > 0 && !cuo.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.DeliveryOptionTable,
			Columns: []string{colli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.DeliveryOptionTable,
			Columns: []string{colli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DocumentFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDocumentFileIDs(); len(nodes) > 0 && !cuo.mutation.DocumentFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DocumentFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   colli.ShipmentParcelTable,
			Columns: []string{colli.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   colli.ShipmentParcelTable,
			Columns: []string{colli.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CancelledShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCancelledShipmentParcelIDs(); len(nodes) > 0 && !cuo.mutation.CancelledShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CancelledShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   colli.OrderTable,
			Columns: []string{colli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   colli.OrderTable,
			Columns: []string{colli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.PackagingTable,
			Columns: []string{colli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.PackagingTable,
			Columns: []string{colli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPrintJobIDs(); len(nodes) > 0 && !cuo.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Colli{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{colli.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
