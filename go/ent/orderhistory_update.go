// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderHistoryUpdate is the builder for updating OrderHistory entities.
type OrderHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *OrderHistoryMutation
}

// Where appends a list predicates to the OrderHistoryUpdate builder.
func (ohu *OrderHistoryUpdate) Where(ps ...predicate.OrderHistory) *OrderHistoryUpdate {
	ohu.mutation.Where(ps...)
	return ohu
}

// SetTenantID sets the "tenant_id" field.
func (ohu *OrderHistoryUpdate) SetTenantID(pu pulid.ID) *OrderHistoryUpdate {
	ohu.mutation.SetTenantID(pu)
	return ohu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ohu *OrderHistoryUpdate) SetNillableTenantID(pu *pulid.ID) *OrderHistoryUpdate {
	if pu != nil {
		ohu.SetTenantID(*pu)
	}
	return ohu
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (ohu *OrderHistoryUpdate) SetChangeHistoryID(id pulid.ID) *OrderHistoryUpdate {
	ohu.mutation.SetChangeHistoryID(id)
	return ohu
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (ohu *OrderHistoryUpdate) SetChangeHistory(c *ChangeHistory) *OrderHistoryUpdate {
	return ohu.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ohu *OrderHistoryUpdate) SetTenant(t *Tenant) *OrderHistoryUpdate {
	return ohu.SetTenantID(t.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ohu *OrderHistoryUpdate) SetOrderID(id pulid.ID) *OrderHistoryUpdate {
	ohu.mutation.SetOrderID(id)
	return ohu
}

// SetOrder sets the "order" edge to the Order entity.
func (ohu *OrderHistoryUpdate) SetOrder(o *Order) *OrderHistoryUpdate {
	return ohu.SetOrderID(o.ID)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohu *OrderHistoryUpdate) Mutation() *OrderHistoryMutation {
	return ohu.mutation
}

// ClearChangeHistory clears the "change_history" edge to the ChangeHistory entity.
func (ohu *OrderHistoryUpdate) ClearChangeHistory() *OrderHistoryUpdate {
	ohu.mutation.ClearChangeHistory()
	return ohu
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ohu *OrderHistoryUpdate) ClearTenant() *OrderHistoryUpdate {
	ohu.mutation.ClearTenant()
	return ohu
}

// ClearOrder clears the "order" edge to the Order entity.
func (ohu *OrderHistoryUpdate) ClearOrder() *OrderHistoryUpdate {
	ohu.mutation.ClearOrder()
	return ohu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ohu *OrderHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ohu.sqlSave, ohu.mutation, ohu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohu *OrderHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ohu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ohu *OrderHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ohu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohu *OrderHistoryUpdate) ExecX(ctx context.Context) {
	if err := ohu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohu *OrderHistoryUpdate) check() error {
	if ohu.mutation.ChangeHistoryCleared() && len(ohu.mutation.ChangeHistoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.change_history"`)
	}
	if ohu.mutation.TenantCleared() && len(ohu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.tenant"`)
	}
	if ohu.mutation.OrderCleared() && len(ohu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.order"`)
	}
	return nil
}

func (ohu *OrderHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ohu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	if ps := ohu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ohu.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.ChangeHistoryTable,
			Columns: []string{orderhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.ChangeHistoryTable,
			Columns: []string{orderhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.TenantTable,
			Columns: []string{orderhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.TenantTable,
			Columns: []string{orderhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.OrderTable,
			Columns: []string{orderhistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.OrderTable,
			Columns: []string{orderhistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ohu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ohu.mutation.done = true
	return n, nil
}

// OrderHistoryUpdateOne is the builder for updating a single OrderHistory entity.
type OrderHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderHistoryMutation
}

// SetTenantID sets the "tenant_id" field.
func (ohuo *OrderHistoryUpdateOne) SetTenantID(pu pulid.ID) *OrderHistoryUpdateOne {
	ohuo.mutation.SetTenantID(pu)
	return ohuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (ohuo *OrderHistoryUpdateOne) SetNillableTenantID(pu *pulid.ID) *OrderHistoryUpdateOne {
	if pu != nil {
		ohuo.SetTenantID(*pu)
	}
	return ohuo
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (ohuo *OrderHistoryUpdateOne) SetChangeHistoryID(id pulid.ID) *OrderHistoryUpdateOne {
	ohuo.mutation.SetChangeHistoryID(id)
	return ohuo
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (ohuo *OrderHistoryUpdateOne) SetChangeHistory(c *ChangeHistory) *OrderHistoryUpdateOne {
	return ohuo.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ohuo *OrderHistoryUpdateOne) SetTenant(t *Tenant) *OrderHistoryUpdateOne {
	return ohuo.SetTenantID(t.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (ohuo *OrderHistoryUpdateOne) SetOrderID(id pulid.ID) *OrderHistoryUpdateOne {
	ohuo.mutation.SetOrderID(id)
	return ohuo
}

// SetOrder sets the "order" edge to the Order entity.
func (ohuo *OrderHistoryUpdateOne) SetOrder(o *Order) *OrderHistoryUpdateOne {
	return ohuo.SetOrderID(o.ID)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohuo *OrderHistoryUpdateOne) Mutation() *OrderHistoryMutation {
	return ohuo.mutation
}

// ClearChangeHistory clears the "change_history" edge to the ChangeHistory entity.
func (ohuo *OrderHistoryUpdateOne) ClearChangeHistory() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearChangeHistory()
	return ohuo
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (ohuo *OrderHistoryUpdateOne) ClearTenant() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearTenant()
	return ohuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (ohuo *OrderHistoryUpdateOne) ClearOrder() *OrderHistoryUpdateOne {
	ohuo.mutation.ClearOrder()
	return ohuo
}

// Where appends a list predicates to the OrderHistoryUpdate builder.
func (ohuo *OrderHistoryUpdateOne) Where(ps ...predicate.OrderHistory) *OrderHistoryUpdateOne {
	ohuo.mutation.Where(ps...)
	return ohuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ohuo *OrderHistoryUpdateOne) Select(field string, fields ...string) *OrderHistoryUpdateOne {
	ohuo.fields = append([]string{field}, fields...)
	return ohuo
}

// Save executes the query and returns the updated OrderHistory entity.
func (ohuo *OrderHistoryUpdateOne) Save(ctx context.Context) (*OrderHistory, error) {
	return withHooks(ctx, ohuo.sqlSave, ohuo.mutation, ohuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ohuo *OrderHistoryUpdateOne) SaveX(ctx context.Context) *OrderHistory {
	node, err := ohuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ohuo *OrderHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ohuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohuo *OrderHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ohuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohuo *OrderHistoryUpdateOne) check() error {
	if ohuo.mutation.ChangeHistoryCleared() && len(ohuo.mutation.ChangeHistoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.change_history"`)
	}
	if ohuo.mutation.TenantCleared() && len(ohuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.tenant"`)
	}
	if ohuo.mutation.OrderCleared() && len(ohuo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OrderHistory.order"`)
	}
	return nil
}

func (ohuo *OrderHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OrderHistory, err error) {
	if err := ohuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderhistory.Table, orderhistory.Columns, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	id, ok := ohuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ohuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderhistory.FieldID)
		for _, f := range fields {
			if !orderhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ohuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ohuo.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.ChangeHistoryTable,
			Columns: []string{orderhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.ChangeHistoryTable,
			Columns: []string{orderhistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.TenantTable,
			Columns: []string{orderhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.TenantTable,
			Columns: []string{orderhistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ohuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.OrderTable,
			Columns: []string{orderhistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ohuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.OrderTable,
			Columns: []string{orderhistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderHistory{config: ohuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ohuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ohuo.mutation.done = true
	return _node, nil
}
