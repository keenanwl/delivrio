// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopBringCreate is the builder for creating a ParcelShopBring entity.
type ParcelShopBringCreate struct {
	config
	mutation *ParcelShopBringMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPointType sets the "point_type" field.
func (psbc *ParcelShopBringCreate) SetPointType(pt parcelshopbring.PointType) *ParcelShopBringCreate {
	psbc.mutation.SetPointType(pt)
	return psbc
}

// SetBringID sets the "bring_id" field.
func (psbc *ParcelShopBringCreate) SetBringID(s string) *ParcelShopBringCreate {
	psbc.mutation.SetBringID(s)
	return psbc
}

// SetID sets the "id" field.
func (psbc *ParcelShopBringCreate) SetID(pu pulid.ID) *ParcelShopBringCreate {
	psbc.mutation.SetID(pu)
	return psbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psbc *ParcelShopBringCreate) SetNillableID(pu *pulid.ID) *ParcelShopBringCreate {
	if pu != nil {
		psbc.SetID(*pu)
	}
	return psbc
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psbc *ParcelShopBringCreate) SetParcelShopID(id pulid.ID) *ParcelShopBringCreate {
	psbc.mutation.SetParcelShopID(id)
	return psbc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psbc *ParcelShopBringCreate) SetParcelShop(p *ParcelShop) *ParcelShopBringCreate {
	return psbc.SetParcelShopID(p.ID)
}

// SetAddressDeliveryID sets the "address_delivery" edge to the AddressGlobal entity by ID.
func (psbc *ParcelShopBringCreate) SetAddressDeliveryID(id pulid.ID) *ParcelShopBringCreate {
	psbc.mutation.SetAddressDeliveryID(id)
	return psbc
}

// SetAddressDelivery sets the "address_delivery" edge to the AddressGlobal entity.
func (psbc *ParcelShopBringCreate) SetAddressDelivery(a *AddressGlobal) *ParcelShopBringCreate {
	return psbc.SetAddressDeliveryID(a.ID)
}

// Mutation returns the ParcelShopBringMutation object of the builder.
func (psbc *ParcelShopBringCreate) Mutation() *ParcelShopBringMutation {
	return psbc.mutation
}

// Save creates the ParcelShopBring in the database.
func (psbc *ParcelShopBringCreate) Save(ctx context.Context) (*ParcelShopBring, error) {
	if err := psbc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, psbc.sqlSave, psbc.mutation, psbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psbc *ParcelShopBringCreate) SaveX(ctx context.Context) *ParcelShopBring {
	v, err := psbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psbc *ParcelShopBringCreate) Exec(ctx context.Context) error {
	_, err := psbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psbc *ParcelShopBringCreate) ExecX(ctx context.Context) {
	if err := psbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psbc *ParcelShopBringCreate) defaults() error {
	if _, ok := psbc.mutation.ID(); !ok {
		if parcelshopbring.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized parcelshopbring.DefaultID (forgotten import ent/runtime?)")
		}
		v := parcelshopbring.DefaultID()
		psbc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (psbc *ParcelShopBringCreate) check() error {
	if _, ok := psbc.mutation.PointType(); !ok {
		return &ValidationError{Name: "point_type", err: errors.New(`ent: missing required field "ParcelShopBring.point_type"`)}
	}
	if v, ok := psbc.mutation.PointType(); ok {
		if err := parcelshopbring.PointTypeValidator(v); err != nil {
			return &ValidationError{Name: "point_type", err: fmt.Errorf(`ent: validator failed for field "ParcelShopBring.point_type": %w`, err)}
		}
	}
	if _, ok := psbc.mutation.BringID(); !ok {
		return &ValidationError{Name: "bring_id", err: errors.New(`ent: missing required field "ParcelShopBring.bring_id"`)}
	}
	if len(psbc.mutation.ParcelShopIDs()) == 0 {
		return &ValidationError{Name: "parcel_shop", err: errors.New(`ent: missing required edge "ParcelShopBring.parcel_shop"`)}
	}
	if len(psbc.mutation.AddressDeliveryIDs()) == 0 {
		return &ValidationError{Name: "address_delivery", err: errors.New(`ent: missing required edge "ParcelShopBring.address_delivery"`)}
	}
	return nil
}

func (psbc *ParcelShopBringCreate) sqlSave(ctx context.Context) (*ParcelShopBring, error) {
	if err := psbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	psbc.mutation.id = &_node.ID
	psbc.mutation.done = true
	return _node, nil
}

func (psbc *ParcelShopBringCreate) createSpec() (*ParcelShopBring, *sqlgraph.CreateSpec) {
	var (
		_node = &ParcelShopBring{config: psbc.config}
		_spec = sqlgraph.NewCreateSpec(parcelshopbring.Table, sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString))
	)
	_spec.OnConflict = psbc.conflict
	if id, ok := psbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := psbc.mutation.PointType(); ok {
		_spec.SetField(parcelshopbring.FieldPointType, field.TypeEnum, value)
		_node.PointType = value
	}
	if value, ok := psbc.mutation.BringID(); ok {
		_spec.SetField(parcelshopbring.FieldBringID, field.TypeString, value)
		_node.BringID = value
	}
	if nodes := psbc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopbring.ParcelShopTable,
			Columns: []string{parcelshopbring.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_parcel_shop_bring = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psbc.mutation.AddressDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshopbring.AddressDeliveryTable,
			Columns: []string{parcelshopbring.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopBring.Create().
//		SetPointType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopBringUpsert) {
//			SetPointType(v+v).
//		}).
//		Exec(ctx)
func (psbc *ParcelShopBringCreate) OnConflict(opts ...sql.ConflictOption) *ParcelShopBringUpsertOne {
	psbc.conflict = opts
	return &ParcelShopBringUpsertOne{
		create: psbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psbc *ParcelShopBringCreate) OnConflictColumns(columns ...string) *ParcelShopBringUpsertOne {
	psbc.conflict = append(psbc.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopBringUpsertOne{
		create: psbc,
	}
}

type (
	// ParcelShopBringUpsertOne is the builder for "upsert"-ing
	//  one ParcelShopBring node.
	ParcelShopBringUpsertOne struct {
		create *ParcelShopBringCreate
	}

	// ParcelShopBringUpsert is the "OnConflict" setter.
	ParcelShopBringUpsert struct {
		*sql.UpdateSet
	}
)

// SetPointType sets the "point_type" field.
func (u *ParcelShopBringUpsert) SetPointType(v parcelshopbring.PointType) *ParcelShopBringUpsert {
	u.Set(parcelshopbring.FieldPointType, v)
	return u
}

// UpdatePointType sets the "point_type" field to the value that was provided on create.
func (u *ParcelShopBringUpsert) UpdatePointType() *ParcelShopBringUpsert {
	u.SetExcluded(parcelshopbring.FieldPointType)
	return u
}

// SetBringID sets the "bring_id" field.
func (u *ParcelShopBringUpsert) SetBringID(v string) *ParcelShopBringUpsert {
	u.Set(parcelshopbring.FieldBringID, v)
	return u
}

// UpdateBringID sets the "bring_id" field to the value that was provided on create.
func (u *ParcelShopBringUpsert) UpdateBringID() *ParcelShopBringUpsert {
	u.SetExcluded(parcelshopbring.FieldBringID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ParcelShopBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshopbring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopBringUpsertOne) UpdateNewValues() *ParcelShopBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(parcelshopbring.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopBring.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ParcelShopBringUpsertOne) Ignore() *ParcelShopBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopBringUpsertOne) DoNothing() *ParcelShopBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopBringCreate.OnConflict
// documentation for more info.
func (u *ParcelShopBringUpsertOne) Update(set func(*ParcelShopBringUpsert)) *ParcelShopBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetPointType sets the "point_type" field.
func (u *ParcelShopBringUpsertOne) SetPointType(v parcelshopbring.PointType) *ParcelShopBringUpsertOne {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.SetPointType(v)
	})
}

// UpdatePointType sets the "point_type" field to the value that was provided on create.
func (u *ParcelShopBringUpsertOne) UpdatePointType() *ParcelShopBringUpsertOne {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.UpdatePointType()
	})
}

// SetBringID sets the "bring_id" field.
func (u *ParcelShopBringUpsertOne) SetBringID(v string) *ParcelShopBringUpsertOne {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.SetBringID(v)
	})
}

// UpdateBringID sets the "bring_id" field to the value that was provided on create.
func (u *ParcelShopBringUpsertOne) UpdateBringID() *ParcelShopBringUpsertOne {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.UpdateBringID()
	})
}

// Exec executes the query.
func (u *ParcelShopBringUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopBringCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopBringUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ParcelShopBringUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ParcelShopBringUpsertOne.ID is not supported by MySQL driver. Use ParcelShopBringUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ParcelShopBringUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ParcelShopBringCreateBulk is the builder for creating many ParcelShopBring entities in bulk.
type ParcelShopBringCreateBulk struct {
	config
	err      error
	builders []*ParcelShopBringCreate
	conflict []sql.ConflictOption
}

// Save creates the ParcelShopBring entities in the database.
func (psbcb *ParcelShopBringCreateBulk) Save(ctx context.Context) ([]*ParcelShopBring, error) {
	if psbcb.err != nil {
		return nil, psbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(psbcb.builders))
	nodes := make([]*ParcelShopBring, len(psbcb.builders))
	mutators := make([]Mutator, len(psbcb.builders))
	for i := range psbcb.builders {
		func(i int, root context.Context) {
			builder := psbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParcelShopBringMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, psbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = psbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, psbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, psbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (psbcb *ParcelShopBringCreateBulk) SaveX(ctx context.Context) []*ParcelShopBring {
	v, err := psbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psbcb *ParcelShopBringCreateBulk) Exec(ctx context.Context) error {
	_, err := psbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psbcb *ParcelShopBringCreateBulk) ExecX(ctx context.Context) {
	if err := psbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopBring.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopBringUpsert) {
//			SetPointType(v+v).
//		}).
//		Exec(ctx)
func (psbcb *ParcelShopBringCreateBulk) OnConflict(opts ...sql.ConflictOption) *ParcelShopBringUpsertBulk {
	psbcb.conflict = opts
	return &ParcelShopBringUpsertBulk{
		create: psbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psbcb *ParcelShopBringCreateBulk) OnConflictColumns(columns ...string) *ParcelShopBringUpsertBulk {
	psbcb.conflict = append(psbcb.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopBringUpsertBulk{
		create: psbcb,
	}
}

// ParcelShopBringUpsertBulk is the builder for "upsert"-ing
// a bulk of ParcelShopBring nodes.
type ParcelShopBringUpsertBulk struct {
	create *ParcelShopBringCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ParcelShopBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshopbring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopBringUpsertBulk) UpdateNewValues() *ParcelShopBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(parcelshopbring.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopBring.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ParcelShopBringUpsertBulk) Ignore() *ParcelShopBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopBringUpsertBulk) DoNothing() *ParcelShopBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopBringCreateBulk.OnConflict
// documentation for more info.
func (u *ParcelShopBringUpsertBulk) Update(set func(*ParcelShopBringUpsert)) *ParcelShopBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetPointType sets the "point_type" field.
func (u *ParcelShopBringUpsertBulk) SetPointType(v parcelshopbring.PointType) *ParcelShopBringUpsertBulk {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.SetPointType(v)
	})
}

// UpdatePointType sets the "point_type" field to the value that was provided on create.
func (u *ParcelShopBringUpsertBulk) UpdatePointType() *ParcelShopBringUpsertBulk {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.UpdatePointType()
	})
}

// SetBringID sets the "bring_id" field.
func (u *ParcelShopBringUpsertBulk) SetBringID(v string) *ParcelShopBringUpsertBulk {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.SetBringID(v)
	})
}

// UpdateBringID sets the "bring_id" field to the value that was provided on create.
func (u *ParcelShopBringUpsertBulk) UpdateBringID() *ParcelShopBringUpsertBulk {
	return u.Update(func(s *ParcelShopBringUpsert) {
		s.UpdateBringID()
	})
}

// Exec executes the query.
func (u *ParcelShopBringUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ParcelShopBringCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopBringCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopBringUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
