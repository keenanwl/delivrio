// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierDF is the model entity for the CarrierDF schema.
type CarrierDF struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// AgreementNumber holds the value of the "agreement_number" field.
	AgreementNumber string `json:"agreement_number,omitempty"`
	// WhoPays holds the value of the "who_pays" field.
	WhoPays carrierdf.WhoPays `json:"who_pays,omitempty"`
	// Test holds the value of the "test" field.
	Test bool `json:"test,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierDFQuery when eager-loading is set.
	Edges              CarrierDFEdges `json:"edges"`
	carrier_carrier_df *pulid.ID
	selectValues       sql.SelectValues
}

// CarrierDFEdges holds the relations/edges for other nodes in the graph.
type CarrierDFEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Carrier holds the value of the carrier edge.
	Carrier *Carrier `json:"carrier,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierDFEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierDFEdges) CarrierOrErr() (*Carrier, error) {
	if e.Carrier != nil {
		return e.Carrier, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrier.Label}
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierDF) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierdf.FieldID, carrierdf.FieldTenantID:
			values[i] = new(pulid.ID)
		case carrierdf.FieldTest:
			values[i] = new(sql.NullBool)
		case carrierdf.FieldCustomerID, carrierdf.FieldAgreementNumber, carrierdf.FieldWhoPays:
			values[i] = new(sql.NullString)
		case carrierdf.ForeignKeys[0]: // carrier_carrier_df
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierDF fields.
func (cd *CarrierDF) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierdf.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cd.ID = *value
			}
		case carrierdf.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				cd.TenantID = *value
			}
		case carrierdf.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				cd.CustomerID = value.String
			}
		case carrierdf.FieldAgreementNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agreement_number", values[i])
			} else if value.Valid {
				cd.AgreementNumber = value.String
			}
		case carrierdf.FieldWhoPays:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field who_pays", values[i])
			} else if value.Valid {
				cd.WhoPays = carrierdf.WhoPays(value.String)
			}
		case carrierdf.FieldTest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field test", values[i])
			} else if value.Valid {
				cd.Test = value.Bool
			}
		case carrierdf.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_carrier_df", values[i])
			} else if value.Valid {
				cd.carrier_carrier_df = new(pulid.ID)
				*cd.carrier_carrier_df = *value.S.(*pulid.ID)
			}
		default:
			cd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierDF.
// This includes values selected through modifiers, order, etc.
func (cd *CarrierDF) Value(name string) (ent.Value, error) {
	return cd.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CarrierDF entity.
func (cd *CarrierDF) QueryTenant() *TenantQuery {
	return NewCarrierDFClient(cd.config).QueryTenant(cd)
}

// QueryCarrier queries the "carrier" edge of the CarrierDF entity.
func (cd *CarrierDF) QueryCarrier() *CarrierQuery {
	return NewCarrierDFClient(cd.config).QueryCarrier(cd)
}

// Update returns a builder for updating this CarrierDF.
// Note that you need to call CarrierDF.Unwrap() before calling this method if this CarrierDF
// was returned from a transaction, and the transaction was committed or rolled back.
func (cd *CarrierDF) Update() *CarrierDFUpdateOne {
	return NewCarrierDFClient(cd.config).UpdateOne(cd)
}

// Unwrap unwraps the CarrierDF entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cd *CarrierDF) Unwrap() *CarrierDF {
	_tx, ok := cd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierDF is not a transactional entity")
	}
	cd.config.driver = _tx.drv
	return cd
}

// String implements the fmt.Stringer.
func (cd *CarrierDF) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierDF(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cd.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(cd.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("agreement_number=")
	builder.WriteString(cd.AgreementNumber)
	builder.WriteString(", ")
	builder.WriteString("who_pays=")
	builder.WriteString(fmt.Sprintf("%v", cd.WhoPays))
	builder.WriteString(", ")
	builder.WriteString("test=")
	builder.WriteString(fmt.Sprintf("%v", cd.Test))
	builder.WriteByte(')')
	return builder.String()
}

// CarrierDFs is a parsable slice of CarrierDF.
type CarrierDFs []*CarrierDF
