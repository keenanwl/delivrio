// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocationUpdate is the builder for updating Location entities.
type LocationUpdate struct {
	config
	hooks    []Hook
	mutation *LocationMutation
}

// Where appends a list predicates to the LocationUpdate builder.
func (lu *LocationUpdate) Where(ps ...predicate.Location) *LocationUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetTenantID sets the "tenant_id" field.
func (lu *LocationUpdate) SetTenantID(pu pulid.ID) *LocationUpdate {
	lu.mutation.SetTenantID(pu)
	return lu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableTenantID(pu *pulid.ID) *LocationUpdate {
	if pu != nil {
		lu.SetTenantID(*pu)
	}
	return lu
}

// SetName sets the "name" field.
func (lu *LocationUpdate) SetName(s string) *LocationUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (lu *LocationUpdate) SetNillableName(s *string) *LocationUpdate {
	if s != nil {
		lu.SetName(*s)
	}
	return lu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (lu *LocationUpdate) SetTenant(t *Tenant) *LocationUpdate {
	return lu.SetTenantID(t.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (lu *LocationUpdate) SetAddressID(id pulid.ID) *LocationUpdate {
	lu.mutation.SetAddressID(id)
	return lu
}

// SetAddress sets the "address" edge to the Address entity.
func (lu *LocationUpdate) SetAddress(a *Address) *LocationUpdate {
	return lu.SetAddressID(a.ID)
}

// AddLocationTagIDs adds the "location_tags" edge to the LocationTag entity by IDs.
func (lu *LocationUpdate) AddLocationTagIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddLocationTagIDs(ids...)
	return lu
}

// AddLocationTags adds the "location_tags" edges to the LocationTag entity.
func (lu *LocationUpdate) AddLocationTags(l ...*LocationTag) *LocationUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.AddLocationTagIDs(ids...)
}

// AddSenderConnectionIDs adds the "sender_connection" edge to the Connection entity by IDs.
func (lu *LocationUpdate) AddSenderConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddSenderConnectionIDs(ids...)
	return lu
}

// AddSenderConnection adds the "sender_connection" edges to the Connection entity.
func (lu *LocationUpdate) AddSenderConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddSenderConnectionIDs(ids...)
}

// AddPickupConnectionIDs adds the "pickup_connection" edge to the Connection entity by IDs.
func (lu *LocationUpdate) AddPickupConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddPickupConnectionIDs(ids...)
	return lu
}

// AddPickupConnection adds the "pickup_connection" edges to the Connection entity.
func (lu *LocationUpdate) AddPickupConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddPickupConnectionIDs(ids...)
}

// AddReturnConnectionIDs adds the "return_connection" edge to the Connection entity by IDs.
func (lu *LocationUpdate) AddReturnConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddReturnConnectionIDs(ids...)
	return lu
}

// AddReturnConnection adds the "return_connection" edges to the Connection entity.
func (lu *LocationUpdate) AddReturnConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddReturnConnectionIDs(ids...)
}

// AddSellerConnectionIDs adds the "seller_connection" edge to the Connection entity by IDs.
func (lu *LocationUpdate) AddSellerConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddSellerConnectionIDs(ids...)
	return lu
}

// AddSellerConnection adds the "seller_connection" edges to the Connection entity.
func (lu *LocationUpdate) AddSellerConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddSellerConnectionIDs(ids...)
}

// AddReturnPortalIDs adds the "return_portal" edge to the ReturnPortal entity by IDs.
func (lu *LocationUpdate) AddReturnPortalIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddReturnPortalIDs(ids...)
	return lu
}

// AddReturnPortal adds the "return_portal" edges to the ReturnPortal entity.
func (lu *LocationUpdate) AddReturnPortal(r ...*ReturnPortal) *LocationUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.AddReturnPortalIDs(ids...)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (lu *LocationUpdate) AddDeliveryOptionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddDeliveryOptionIDs(ids...)
	return lu
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (lu *LocationUpdate) AddDeliveryOption(d ...*DeliveryOption) *LocationUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lu.AddDeliveryOptionIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (lu *LocationUpdate) AddColliIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.AddColliIDs(ids...)
	return lu
}

// AddColli adds the "colli" edges to the Colli entity.
func (lu *LocationUpdate) AddColli(c ...*Colli) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddColliIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (lu *LocationUpdate) Mutation() *LocationMutation {
	return lu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (lu *LocationUpdate) ClearTenant() *LocationUpdate {
	lu.mutation.ClearTenant()
	return lu
}

// ClearAddress clears the "address" edge to the Address entity.
func (lu *LocationUpdate) ClearAddress() *LocationUpdate {
	lu.mutation.ClearAddress()
	return lu
}

// ClearLocationTags clears all "location_tags" edges to the LocationTag entity.
func (lu *LocationUpdate) ClearLocationTags() *LocationUpdate {
	lu.mutation.ClearLocationTags()
	return lu
}

// RemoveLocationTagIDs removes the "location_tags" edge to LocationTag entities by IDs.
func (lu *LocationUpdate) RemoveLocationTagIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveLocationTagIDs(ids...)
	return lu
}

// RemoveLocationTags removes "location_tags" edges to LocationTag entities.
func (lu *LocationUpdate) RemoveLocationTags(l ...*LocationTag) *LocationUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lu.RemoveLocationTagIDs(ids...)
}

// ClearSenderConnection clears all "sender_connection" edges to the Connection entity.
func (lu *LocationUpdate) ClearSenderConnection() *LocationUpdate {
	lu.mutation.ClearSenderConnection()
	return lu
}

// RemoveSenderConnectionIDs removes the "sender_connection" edge to Connection entities by IDs.
func (lu *LocationUpdate) RemoveSenderConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveSenderConnectionIDs(ids...)
	return lu
}

// RemoveSenderConnection removes "sender_connection" edges to Connection entities.
func (lu *LocationUpdate) RemoveSenderConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveSenderConnectionIDs(ids...)
}

// ClearPickupConnection clears all "pickup_connection" edges to the Connection entity.
func (lu *LocationUpdate) ClearPickupConnection() *LocationUpdate {
	lu.mutation.ClearPickupConnection()
	return lu
}

// RemovePickupConnectionIDs removes the "pickup_connection" edge to Connection entities by IDs.
func (lu *LocationUpdate) RemovePickupConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemovePickupConnectionIDs(ids...)
	return lu
}

// RemovePickupConnection removes "pickup_connection" edges to Connection entities.
func (lu *LocationUpdate) RemovePickupConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemovePickupConnectionIDs(ids...)
}

// ClearReturnConnection clears all "return_connection" edges to the Connection entity.
func (lu *LocationUpdate) ClearReturnConnection() *LocationUpdate {
	lu.mutation.ClearReturnConnection()
	return lu
}

// RemoveReturnConnectionIDs removes the "return_connection" edge to Connection entities by IDs.
func (lu *LocationUpdate) RemoveReturnConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveReturnConnectionIDs(ids...)
	return lu
}

// RemoveReturnConnection removes "return_connection" edges to Connection entities.
func (lu *LocationUpdate) RemoveReturnConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveReturnConnectionIDs(ids...)
}

// ClearSellerConnection clears all "seller_connection" edges to the Connection entity.
func (lu *LocationUpdate) ClearSellerConnection() *LocationUpdate {
	lu.mutation.ClearSellerConnection()
	return lu
}

// RemoveSellerConnectionIDs removes the "seller_connection" edge to Connection entities by IDs.
func (lu *LocationUpdate) RemoveSellerConnectionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveSellerConnectionIDs(ids...)
	return lu
}

// RemoveSellerConnection removes "seller_connection" edges to Connection entities.
func (lu *LocationUpdate) RemoveSellerConnection(c ...*Connection) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveSellerConnectionIDs(ids...)
}

// ClearReturnPortal clears all "return_portal" edges to the ReturnPortal entity.
func (lu *LocationUpdate) ClearReturnPortal() *LocationUpdate {
	lu.mutation.ClearReturnPortal()
	return lu
}

// RemoveReturnPortalIDs removes the "return_portal" edge to ReturnPortal entities by IDs.
func (lu *LocationUpdate) RemoveReturnPortalIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveReturnPortalIDs(ids...)
	return lu
}

// RemoveReturnPortal removes "return_portal" edges to ReturnPortal entities.
func (lu *LocationUpdate) RemoveReturnPortal(r ...*ReturnPortal) *LocationUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return lu.RemoveReturnPortalIDs(ids...)
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (lu *LocationUpdate) ClearDeliveryOption() *LocationUpdate {
	lu.mutation.ClearDeliveryOption()
	return lu
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (lu *LocationUpdate) RemoveDeliveryOptionIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveDeliveryOptionIDs(ids...)
	return lu
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (lu *LocationUpdate) RemoveDeliveryOption(d ...*DeliveryOption) *LocationUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return lu.RemoveDeliveryOptionIDs(ids...)
}

// ClearColli clears all "colli" edges to the Colli entity.
func (lu *LocationUpdate) ClearColli() *LocationUpdate {
	lu.mutation.ClearColli()
	return lu
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (lu *LocationUpdate) RemoveColliIDs(ids ...pulid.ID) *LocationUpdate {
	lu.mutation.RemoveColliIDs(ids...)
	return lu
}

// RemoveColli removes "colli" edges to Colli entities.
func (lu *LocationUpdate) RemoveColli(c ...*Colli) *LocationUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveColliIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LocationUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LocationUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LocationUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lu *LocationUpdate) check() error {
	if lu.mutation.TenantCleared() && len(lu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Location.tenant"`)
	}
	if lu.mutation.AddressCleared() && len(lu.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Location.address"`)
	}
	return nil
}

func (lu *LocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if lu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.TenantTable,
			Columns: []string{location.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.TenantTable,
			Columns: []string{location.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.AddressTable,
			Columns: []string{location.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.AddressTable,
			Columns: []string{location.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.LocationTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedLocationTagsIDs(); len(nodes) > 0 && !lu.mutation.LocationTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.LocationTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.SenderConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedSenderConnectionIDs(); len(nodes) > 0 && !lu.mutation.SenderConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.SenderConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.PickupConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedPickupConnectionIDs(); len(nodes) > 0 && !lu.mutation.PickupConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.PickupConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ReturnConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedReturnConnectionIDs(); len(nodes) > 0 && !lu.mutation.ReturnConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ReturnConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.SellerConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedSellerConnectionIDs(); len(nodes) > 0 && !lu.mutation.SellerConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.SellerConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedReturnPortalIDs(); len(nodes) > 0 && !lu.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !lu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedColliIDs(); len(nodes) > 0 && !lu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LocationUpdateOne is the builder for updating a single Location entity.
type LocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LocationMutation
}

// SetTenantID sets the "tenant_id" field.
func (luo *LocationUpdateOne) SetTenantID(pu pulid.ID) *LocationUpdateOne {
	luo.mutation.SetTenantID(pu)
	return luo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableTenantID(pu *pulid.ID) *LocationUpdateOne {
	if pu != nil {
		luo.SetTenantID(*pu)
	}
	return luo
}

// SetName sets the "name" field.
func (luo *LocationUpdateOne) SetName(s string) *LocationUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (luo *LocationUpdateOne) SetNillableName(s *string) *LocationUpdateOne {
	if s != nil {
		luo.SetName(*s)
	}
	return luo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (luo *LocationUpdateOne) SetTenant(t *Tenant) *LocationUpdateOne {
	return luo.SetTenantID(t.ID)
}

// SetAddressID sets the "address" edge to the Address entity by ID.
func (luo *LocationUpdateOne) SetAddressID(id pulid.ID) *LocationUpdateOne {
	luo.mutation.SetAddressID(id)
	return luo
}

// SetAddress sets the "address" edge to the Address entity.
func (luo *LocationUpdateOne) SetAddress(a *Address) *LocationUpdateOne {
	return luo.SetAddressID(a.ID)
}

// AddLocationTagIDs adds the "location_tags" edge to the LocationTag entity by IDs.
func (luo *LocationUpdateOne) AddLocationTagIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddLocationTagIDs(ids...)
	return luo
}

// AddLocationTags adds the "location_tags" edges to the LocationTag entity.
func (luo *LocationUpdateOne) AddLocationTags(l ...*LocationTag) *LocationUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.AddLocationTagIDs(ids...)
}

// AddSenderConnectionIDs adds the "sender_connection" edge to the Connection entity by IDs.
func (luo *LocationUpdateOne) AddSenderConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddSenderConnectionIDs(ids...)
	return luo
}

// AddSenderConnection adds the "sender_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) AddSenderConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddSenderConnectionIDs(ids...)
}

// AddPickupConnectionIDs adds the "pickup_connection" edge to the Connection entity by IDs.
func (luo *LocationUpdateOne) AddPickupConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddPickupConnectionIDs(ids...)
	return luo
}

// AddPickupConnection adds the "pickup_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) AddPickupConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddPickupConnectionIDs(ids...)
}

// AddReturnConnectionIDs adds the "return_connection" edge to the Connection entity by IDs.
func (luo *LocationUpdateOne) AddReturnConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddReturnConnectionIDs(ids...)
	return luo
}

// AddReturnConnection adds the "return_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) AddReturnConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddReturnConnectionIDs(ids...)
}

// AddSellerConnectionIDs adds the "seller_connection" edge to the Connection entity by IDs.
func (luo *LocationUpdateOne) AddSellerConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddSellerConnectionIDs(ids...)
	return luo
}

// AddSellerConnection adds the "seller_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) AddSellerConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddSellerConnectionIDs(ids...)
}

// AddReturnPortalIDs adds the "return_portal" edge to the ReturnPortal entity by IDs.
func (luo *LocationUpdateOne) AddReturnPortalIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddReturnPortalIDs(ids...)
	return luo
}

// AddReturnPortal adds the "return_portal" edges to the ReturnPortal entity.
func (luo *LocationUpdateOne) AddReturnPortal(r ...*ReturnPortal) *LocationUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.AddReturnPortalIDs(ids...)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (luo *LocationUpdateOne) AddDeliveryOptionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddDeliveryOptionIDs(ids...)
	return luo
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (luo *LocationUpdateOne) AddDeliveryOption(d ...*DeliveryOption) *LocationUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return luo.AddDeliveryOptionIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (luo *LocationUpdateOne) AddColliIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.AddColliIDs(ids...)
	return luo
}

// AddColli adds the "colli" edges to the Colli entity.
func (luo *LocationUpdateOne) AddColli(c ...*Colli) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddColliIDs(ids...)
}

// Mutation returns the LocationMutation object of the builder.
func (luo *LocationUpdateOne) Mutation() *LocationMutation {
	return luo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (luo *LocationUpdateOne) ClearTenant() *LocationUpdateOne {
	luo.mutation.ClearTenant()
	return luo
}

// ClearAddress clears the "address" edge to the Address entity.
func (luo *LocationUpdateOne) ClearAddress() *LocationUpdateOne {
	luo.mutation.ClearAddress()
	return luo
}

// ClearLocationTags clears all "location_tags" edges to the LocationTag entity.
func (luo *LocationUpdateOne) ClearLocationTags() *LocationUpdateOne {
	luo.mutation.ClearLocationTags()
	return luo
}

// RemoveLocationTagIDs removes the "location_tags" edge to LocationTag entities by IDs.
func (luo *LocationUpdateOne) RemoveLocationTagIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveLocationTagIDs(ids...)
	return luo
}

// RemoveLocationTags removes "location_tags" edges to LocationTag entities.
func (luo *LocationUpdateOne) RemoveLocationTags(l ...*LocationTag) *LocationUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return luo.RemoveLocationTagIDs(ids...)
}

// ClearSenderConnection clears all "sender_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) ClearSenderConnection() *LocationUpdateOne {
	luo.mutation.ClearSenderConnection()
	return luo
}

// RemoveSenderConnectionIDs removes the "sender_connection" edge to Connection entities by IDs.
func (luo *LocationUpdateOne) RemoveSenderConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveSenderConnectionIDs(ids...)
	return luo
}

// RemoveSenderConnection removes "sender_connection" edges to Connection entities.
func (luo *LocationUpdateOne) RemoveSenderConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveSenderConnectionIDs(ids...)
}

// ClearPickupConnection clears all "pickup_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) ClearPickupConnection() *LocationUpdateOne {
	luo.mutation.ClearPickupConnection()
	return luo
}

// RemovePickupConnectionIDs removes the "pickup_connection" edge to Connection entities by IDs.
func (luo *LocationUpdateOne) RemovePickupConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemovePickupConnectionIDs(ids...)
	return luo
}

// RemovePickupConnection removes "pickup_connection" edges to Connection entities.
func (luo *LocationUpdateOne) RemovePickupConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemovePickupConnectionIDs(ids...)
}

// ClearReturnConnection clears all "return_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) ClearReturnConnection() *LocationUpdateOne {
	luo.mutation.ClearReturnConnection()
	return luo
}

// RemoveReturnConnectionIDs removes the "return_connection" edge to Connection entities by IDs.
func (luo *LocationUpdateOne) RemoveReturnConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveReturnConnectionIDs(ids...)
	return luo
}

// RemoveReturnConnection removes "return_connection" edges to Connection entities.
func (luo *LocationUpdateOne) RemoveReturnConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveReturnConnectionIDs(ids...)
}

// ClearSellerConnection clears all "seller_connection" edges to the Connection entity.
func (luo *LocationUpdateOne) ClearSellerConnection() *LocationUpdateOne {
	luo.mutation.ClearSellerConnection()
	return luo
}

// RemoveSellerConnectionIDs removes the "seller_connection" edge to Connection entities by IDs.
func (luo *LocationUpdateOne) RemoveSellerConnectionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveSellerConnectionIDs(ids...)
	return luo
}

// RemoveSellerConnection removes "seller_connection" edges to Connection entities.
func (luo *LocationUpdateOne) RemoveSellerConnection(c ...*Connection) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveSellerConnectionIDs(ids...)
}

// ClearReturnPortal clears all "return_portal" edges to the ReturnPortal entity.
func (luo *LocationUpdateOne) ClearReturnPortal() *LocationUpdateOne {
	luo.mutation.ClearReturnPortal()
	return luo
}

// RemoveReturnPortalIDs removes the "return_portal" edge to ReturnPortal entities by IDs.
func (luo *LocationUpdateOne) RemoveReturnPortalIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveReturnPortalIDs(ids...)
	return luo
}

// RemoveReturnPortal removes "return_portal" edges to ReturnPortal entities.
func (luo *LocationUpdateOne) RemoveReturnPortal(r ...*ReturnPortal) *LocationUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return luo.RemoveReturnPortalIDs(ids...)
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (luo *LocationUpdateOne) ClearDeliveryOption() *LocationUpdateOne {
	luo.mutation.ClearDeliveryOption()
	return luo
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (luo *LocationUpdateOne) RemoveDeliveryOptionIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveDeliveryOptionIDs(ids...)
	return luo
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (luo *LocationUpdateOne) RemoveDeliveryOption(d ...*DeliveryOption) *LocationUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return luo.RemoveDeliveryOptionIDs(ids...)
}

// ClearColli clears all "colli" edges to the Colli entity.
func (luo *LocationUpdateOne) ClearColli() *LocationUpdateOne {
	luo.mutation.ClearColli()
	return luo
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (luo *LocationUpdateOne) RemoveColliIDs(ids ...pulid.ID) *LocationUpdateOne {
	luo.mutation.RemoveColliIDs(ids...)
	return luo
}

// RemoveColli removes "colli" edges to Colli entities.
func (luo *LocationUpdateOne) RemoveColli(c ...*Colli) *LocationUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveColliIDs(ids...)
}

// Where appends a list predicates to the LocationUpdate builder.
func (luo *LocationUpdateOne) Where(ps ...predicate.Location) *LocationUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LocationUpdateOne) Select(field string, fields ...string) *LocationUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Location entity.
func (luo *LocationUpdateOne) Save(ctx context.Context) (*Location, error) {
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LocationUpdateOne) SaveX(ctx context.Context) *Location {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LocationUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LocationUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (luo *LocationUpdateOne) check() error {
	if luo.mutation.TenantCleared() && len(luo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Location.tenant"`)
	}
	if luo.mutation.AddressCleared() && len(luo.mutation.AddressIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Location.address"`)
	}
	return nil
}

func (luo *LocationUpdateOne) sqlSave(ctx context.Context) (_node *Location, err error) {
	if err := luo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Location.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, location.FieldID)
		for _, f := range fields {
			if !location.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != location.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.SetField(location.FieldName, field.TypeString, value)
	}
	if luo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.TenantTable,
			Columns: []string{location.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.TenantTable,
			Columns: []string{location.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.AddressTable,
			Columns: []string{location.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.AddressTable,
			Columns: []string{location.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.LocationTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedLocationTagsIDs(); len(nodes) > 0 && !luo.mutation.LocationTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.LocationTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.SenderConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedSenderConnectionIDs(); len(nodes) > 0 && !luo.mutation.SenderConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.SenderConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.PickupConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedPickupConnectionIDs(); len(nodes) > 0 && !luo.mutation.PickupConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.PickupConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ReturnConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedReturnConnectionIDs(); len(nodes) > 0 && !luo.mutation.ReturnConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ReturnConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.SellerConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedSellerConnectionIDs(); len(nodes) > 0 && !luo.mutation.SellerConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.SellerConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedReturnPortalIDs(); len(nodes) > 0 && !luo.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !luo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedColliIDs(); len(nodes) > 0 && !luo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Location{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{location.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
