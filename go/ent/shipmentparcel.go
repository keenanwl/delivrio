// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShipmentParcel is the model entity for the ShipmentParcel schema.
type ShipmentParcel struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID string `json:"item_id,omitempty"`
	// Status holds the value of the "status" field.
	Status shipmentparcel.Status `json:"status,omitempty"`
	// CcPickupSignatureUrls holds the value of the "cc_pickup_signature_urls" field.
	CcPickupSignatureUrls []string `json:"cc_pickup_signature_urls,omitempty"`
	// ExpectedAt holds the value of the "expected_at" field.
	ExpectedAt time.Time `json:"expected_at,omitempty"`
	// FulfillmentSyncedAt holds the value of the "fulfillment_synced_at" field.
	FulfillmentSyncedAt time.Time `json:"fulfillment_synced_at,omitempty"`
	// For supported carriers will attempt to cancel shipment via the API
	CancelSyncedAt *time.Time `json:"cancel_synced_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentParcelQuery when eager-loading is set.
	Edges                     ShipmentParcelEdges `json:"edges"`
	colli_shipment_parcel     *pulid.ID
	shipment_shipment_parcel  *pulid.ID
	shipment_parcel_packaging *pulid.ID
	selectValues              sql.SelectValues
}

// ShipmentParcelEdges holds the relations/edges for other nodes in the graph.
type ShipmentParcelEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// Colli holds the value of the colli edge.
	Colli *Colli `json:"colli,omitempty"`
	// After shipment cancelled, ref moved here.
	OldColli []*Colli `json:"old_colli,omitempty"`
	// WorkspaceRecentScan holds the value of the workspace_recent_scan edge.
	WorkspaceRecentScan []*WorkspaceRecentScan `json:"workspace_recent_scan,omitempty"`
	// Packaging holds the value of the packaging edge.
	Packaging *Packaging `json:"packaging,omitempty"`
	// PrintJob holds the value of the print_job edge.
	PrintJob []*PrintJob `json:"print_job,omitempty"`
	// DocumentFile holds the value of the document_file edge.
	DocumentFile *DocumentFile `json:"document_file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedOldColli            map[string][]*Colli
	namedWorkspaceRecentScan map[string][]*WorkspaceRecentScan
	namedPrintJob            map[string][]*PrintJob
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentParcelEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentParcelEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// ColliOrErr returns the Colli value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentParcelEdges) ColliOrErr() (*Colli, error) {
	if e.Colli != nil {
		return e.Colli, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: colli.Label}
	}
	return nil, &NotLoadedError{edge: "colli"}
}

// OldColliOrErr returns the OldColli value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentParcelEdges) OldColliOrErr() ([]*Colli, error) {
	if e.loadedTypes[3] {
		return e.OldColli, nil
	}
	return nil, &NotLoadedError{edge: "old_colli"}
}

// WorkspaceRecentScanOrErr returns the WorkspaceRecentScan value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentParcelEdges) WorkspaceRecentScanOrErr() ([]*WorkspaceRecentScan, error) {
	if e.loadedTypes[4] {
		return e.WorkspaceRecentScan, nil
	}
	return nil, &NotLoadedError{edge: "workspace_recent_scan"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentParcelEdges) PackagingOrErr() (*Packaging, error) {
	if e.Packaging != nil {
		return e.Packaging, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// PrintJobOrErr returns the PrintJob value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentParcelEdges) PrintJobOrErr() ([]*PrintJob, error) {
	if e.loadedTypes[6] {
		return e.PrintJob, nil
	}
	return nil, &NotLoadedError{edge: "print_job"}
}

// DocumentFileOrErr returns the DocumentFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentParcelEdges) DocumentFileOrErr() (*DocumentFile, error) {
	if e.DocumentFile != nil {
		return e.DocumentFile, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: documentfile.Label}
	}
	return nil, &NotLoadedError{edge: "document_file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentParcel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentparcel.FieldCcPickupSignatureUrls:
			values[i] = new([]byte)
		case shipmentparcel.FieldID, shipmentparcel.FieldTenantID:
			values[i] = new(pulid.ID)
		case shipmentparcel.FieldItemID, shipmentparcel.FieldStatus:
			values[i] = new(sql.NullString)
		case shipmentparcel.FieldExpectedAt, shipmentparcel.FieldFulfillmentSyncedAt, shipmentparcel.FieldCancelSyncedAt:
			values[i] = new(sql.NullTime)
		case shipmentparcel.ForeignKeys[0]: // colli_shipment_parcel
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case shipmentparcel.ForeignKeys[1]: // shipment_shipment_parcel
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case shipmentparcel.ForeignKeys[2]: // shipment_parcel_packaging
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentParcel fields.
func (sp *ShipmentParcel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentparcel.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sp.ID = *value
			}
		case shipmentparcel.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				sp.TenantID = *value
			}
		case shipmentparcel.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				sp.ItemID = value.String
			}
		case shipmentparcel.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = shipmentparcel.Status(value.String)
			}
		case shipmentparcel.FieldCcPickupSignatureUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cc_pickup_signature_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.CcPickupSignatureUrls); err != nil {
					return fmt.Errorf("unmarshal field cc_pickup_signature_urls: %w", err)
				}
			}
		case shipmentparcel.FieldExpectedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expected_at", values[i])
			} else if value.Valid {
				sp.ExpectedAt = value.Time
			}
		case shipmentparcel.FieldFulfillmentSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field fulfillment_synced_at", values[i])
			} else if value.Valid {
				sp.FulfillmentSyncedAt = value.Time
			}
		case shipmentparcel.FieldCancelSyncedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_synced_at", values[i])
			} else if value.Valid {
				sp.CancelSyncedAt = new(time.Time)
				*sp.CancelSyncedAt = value.Time
			}
		case shipmentparcel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_shipment_parcel", values[i])
			} else if value.Valid {
				sp.colli_shipment_parcel = new(pulid.ID)
				*sp.colli_shipment_parcel = *value.S.(*pulid.ID)
			}
		case shipmentparcel.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_shipment_parcel", values[i])
			} else if value.Valid {
				sp.shipment_shipment_parcel = new(pulid.ID)
				*sp.shipment_shipment_parcel = *value.S.(*pulid.ID)
			}
		case shipmentparcel.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_parcel_packaging", values[i])
			} else if value.Valid {
				sp.shipment_parcel_packaging = new(pulid.ID)
				*sp.shipment_parcel_packaging = *value.S.(*pulid.ID)
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentParcel.
// This includes values selected through modifiers, order, etc.
func (sp *ShipmentParcel) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryTenant() *TenantQuery {
	return NewShipmentParcelClient(sp.config).QueryTenant(sp)
}

// QueryShipment queries the "shipment" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryShipment() *ShipmentQuery {
	return NewShipmentParcelClient(sp.config).QueryShipment(sp)
}

// QueryColli queries the "colli" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryColli() *ColliQuery {
	return NewShipmentParcelClient(sp.config).QueryColli(sp)
}

// QueryOldColli queries the "old_colli" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryOldColli() *ColliQuery {
	return NewShipmentParcelClient(sp.config).QueryOldColli(sp)
}

// QueryWorkspaceRecentScan queries the "workspace_recent_scan" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryWorkspaceRecentScan() *WorkspaceRecentScanQuery {
	return NewShipmentParcelClient(sp.config).QueryWorkspaceRecentScan(sp)
}

// QueryPackaging queries the "packaging" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryPackaging() *PackagingQuery {
	return NewShipmentParcelClient(sp.config).QueryPackaging(sp)
}

// QueryPrintJob queries the "print_job" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryPrintJob() *PrintJobQuery {
	return NewShipmentParcelClient(sp.config).QueryPrintJob(sp)
}

// QueryDocumentFile queries the "document_file" edge of the ShipmentParcel entity.
func (sp *ShipmentParcel) QueryDocumentFile() *DocumentFileQuery {
	return NewShipmentParcelClient(sp.config).QueryDocumentFile(sp)
}

// Update returns a builder for updating this ShipmentParcel.
// Note that you need to call ShipmentParcel.Unwrap() before calling this method if this ShipmentParcel
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *ShipmentParcel) Update() *ShipmentParcelUpdateOne {
	return NewShipmentParcelClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the ShipmentParcel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *ShipmentParcel) Unwrap() *ShipmentParcel {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentParcel is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *ShipmentParcel) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentParcel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.TenantID))
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(sp.ItemID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", ")
	builder.WriteString("cc_pickup_signature_urls=")
	builder.WriteString(fmt.Sprintf("%v", sp.CcPickupSignatureUrls))
	builder.WriteString(", ")
	builder.WriteString("expected_at=")
	builder.WriteString(sp.ExpectedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("fulfillment_synced_at=")
	builder.WriteString(sp.FulfillmentSyncedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sp.CancelSyncedAt; v != nil {
		builder.WriteString("cancel_synced_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedOldColli returns the OldColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sp *ShipmentParcel) NamedOldColli(name string) ([]*Colli, error) {
	if sp.Edges.namedOldColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sp.Edges.namedOldColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sp *ShipmentParcel) appendNamedOldColli(name string, edges ...*Colli) {
	if sp.Edges.namedOldColli == nil {
		sp.Edges.namedOldColli = make(map[string][]*Colli)
	}
	if len(edges) == 0 {
		sp.Edges.namedOldColli[name] = []*Colli{}
	} else {
		sp.Edges.namedOldColli[name] = append(sp.Edges.namedOldColli[name], edges...)
	}
}

// NamedWorkspaceRecentScan returns the WorkspaceRecentScan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sp *ShipmentParcel) NamedWorkspaceRecentScan(name string) ([]*WorkspaceRecentScan, error) {
	if sp.Edges.namedWorkspaceRecentScan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sp.Edges.namedWorkspaceRecentScan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sp *ShipmentParcel) appendNamedWorkspaceRecentScan(name string, edges ...*WorkspaceRecentScan) {
	if sp.Edges.namedWorkspaceRecentScan == nil {
		sp.Edges.namedWorkspaceRecentScan = make(map[string][]*WorkspaceRecentScan)
	}
	if len(edges) == 0 {
		sp.Edges.namedWorkspaceRecentScan[name] = []*WorkspaceRecentScan{}
	} else {
		sp.Edges.namedWorkspaceRecentScan[name] = append(sp.Edges.namedWorkspaceRecentScan[name], edges...)
	}
}

// NamedPrintJob returns the PrintJob named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sp *ShipmentParcel) NamedPrintJob(name string) ([]*PrintJob, error) {
	if sp.Edges.namedPrintJob == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sp.Edges.namedPrintJob[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sp *ShipmentParcel) appendNamedPrintJob(name string, edges ...*PrintJob) {
	if sp.Edges.namedPrintJob == nil {
		sp.Edges.namedPrintJob = make(map[string][]*PrintJob)
	}
	if len(edges) == 0 {
		sp.Edges.namedPrintJob[name] = []*PrintJob{}
	} else {
		sp.Edges.namedPrintJob[name] = append(sp.Edges.namedPrintJob[name], edges...)
	}
}

// ShipmentParcels is a parsable slice of ShipmentParcel.
type ShipmentParcels []*ShipmentParcel
