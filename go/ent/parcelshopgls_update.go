// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopGLSUpdate is the builder for updating ParcelShopGLS entities.
type ParcelShopGLSUpdate struct {
	config
	hooks    []Hook
	mutation *ParcelShopGLSMutation
}

// Where appends a list predicates to the ParcelShopGLSUpdate builder.
func (psgu *ParcelShopGLSUpdate) Where(ps ...predicate.ParcelShopGLS) *ParcelShopGLSUpdate {
	psgu.mutation.Where(ps...)
	return psgu
}

// SetGLSParcelShopID sets the "gls_parcel_shop_id" field.
func (psgu *ParcelShopGLSUpdate) SetGLSParcelShopID(s string) *ParcelShopGLSUpdate {
	psgu.mutation.SetGLSParcelShopID(s)
	return psgu
}

// SetNillableGLSParcelShopID sets the "gls_parcel_shop_id" field if the given value is not nil.
func (psgu *ParcelShopGLSUpdate) SetNillableGLSParcelShopID(s *string) *ParcelShopGLSUpdate {
	if s != nil {
		psgu.SetGLSParcelShopID(*s)
	}
	return psgu
}

// SetPartnerID sets the "partner_id" field.
func (psgu *ParcelShopGLSUpdate) SetPartnerID(s string) *ParcelShopGLSUpdate {
	psgu.mutation.SetPartnerID(s)
	return psgu
}

// SetNillablePartnerID sets the "partner_id" field if the given value is not nil.
func (psgu *ParcelShopGLSUpdate) SetNillablePartnerID(s *string) *ParcelShopGLSUpdate {
	if s != nil {
		psgu.SetPartnerID(*s)
	}
	return psgu
}

// ClearPartnerID clears the value of the "partner_id" field.
func (psgu *ParcelShopGLSUpdate) ClearPartnerID() *ParcelShopGLSUpdate {
	psgu.mutation.ClearPartnerID()
	return psgu
}

// SetType sets the "type" field.
func (psgu *ParcelShopGLSUpdate) SetType(s string) *ParcelShopGLSUpdate {
	psgu.mutation.SetType(s)
	return psgu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (psgu *ParcelShopGLSUpdate) SetNillableType(s *string) *ParcelShopGLSUpdate {
	if s != nil {
		psgu.SetType(*s)
	}
	return psgu
}

// ClearType clears the value of the "type" field.
func (psgu *ParcelShopGLSUpdate) ClearType() *ParcelShopGLSUpdate {
	psgu.mutation.ClearType()
	return psgu
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psgu *ParcelShopGLSUpdate) SetParcelShopID(id pulid.ID) *ParcelShopGLSUpdate {
	psgu.mutation.SetParcelShopID(id)
	return psgu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psgu *ParcelShopGLSUpdate) SetParcelShop(p *ParcelShop) *ParcelShopGLSUpdate {
	return psgu.SetParcelShopID(p.ID)
}

// Mutation returns the ParcelShopGLSMutation object of the builder.
func (psgu *ParcelShopGLSUpdate) Mutation() *ParcelShopGLSMutation {
	return psgu.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (psgu *ParcelShopGLSUpdate) ClearParcelShop() *ParcelShopGLSUpdate {
	psgu.mutation.ClearParcelShop()
	return psgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psgu *ParcelShopGLSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psgu.sqlSave, psgu.mutation, psgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psgu *ParcelShopGLSUpdate) SaveX(ctx context.Context) int {
	affected, err := psgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psgu *ParcelShopGLSUpdate) Exec(ctx context.Context) error {
	_, err := psgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psgu *ParcelShopGLSUpdate) ExecX(ctx context.Context) {
	if err := psgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psgu *ParcelShopGLSUpdate) check() error {
	if psgu.mutation.ParcelShopCleared() && len(psgu.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopGLS.parcel_shop"`)
	}
	return nil
}

func (psgu *ParcelShopGLSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshopgls.Table, parcelshopgls.Columns, sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString))
	if ps := psgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psgu.mutation.GLSParcelShopID(); ok {
		_spec.SetField(parcelshopgls.FieldGLSParcelShopID, field.TypeString, value)
	}
	if value, ok := psgu.mutation.PartnerID(); ok {
		_spec.SetField(parcelshopgls.FieldPartnerID, field.TypeString, value)
	}
	if psgu.mutation.PartnerIDCleared() {
		_spec.ClearField(parcelshopgls.FieldPartnerID, field.TypeString)
	}
	if value, ok := psgu.mutation.GetType(); ok {
		_spec.SetField(parcelshopgls.FieldType, field.TypeString, value)
	}
	if psgu.mutation.TypeCleared() {
		_spec.ClearField(parcelshopgls.FieldType, field.TypeString)
	}
	if psgu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopgls.ParcelShopTable,
			Columns: []string{parcelshopgls.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psgu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopgls.ParcelShopTable,
			Columns: []string{parcelshopgls.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshopgls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psgu.mutation.done = true
	return n, nil
}

// ParcelShopGLSUpdateOne is the builder for updating a single ParcelShopGLS entity.
type ParcelShopGLSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParcelShopGLSMutation
}

// SetGLSParcelShopID sets the "gls_parcel_shop_id" field.
func (psguo *ParcelShopGLSUpdateOne) SetGLSParcelShopID(s string) *ParcelShopGLSUpdateOne {
	psguo.mutation.SetGLSParcelShopID(s)
	return psguo
}

// SetNillableGLSParcelShopID sets the "gls_parcel_shop_id" field if the given value is not nil.
func (psguo *ParcelShopGLSUpdateOne) SetNillableGLSParcelShopID(s *string) *ParcelShopGLSUpdateOne {
	if s != nil {
		psguo.SetGLSParcelShopID(*s)
	}
	return psguo
}

// SetPartnerID sets the "partner_id" field.
func (psguo *ParcelShopGLSUpdateOne) SetPartnerID(s string) *ParcelShopGLSUpdateOne {
	psguo.mutation.SetPartnerID(s)
	return psguo
}

// SetNillablePartnerID sets the "partner_id" field if the given value is not nil.
func (psguo *ParcelShopGLSUpdateOne) SetNillablePartnerID(s *string) *ParcelShopGLSUpdateOne {
	if s != nil {
		psguo.SetPartnerID(*s)
	}
	return psguo
}

// ClearPartnerID clears the value of the "partner_id" field.
func (psguo *ParcelShopGLSUpdateOne) ClearPartnerID() *ParcelShopGLSUpdateOne {
	psguo.mutation.ClearPartnerID()
	return psguo
}

// SetType sets the "type" field.
func (psguo *ParcelShopGLSUpdateOne) SetType(s string) *ParcelShopGLSUpdateOne {
	psguo.mutation.SetType(s)
	return psguo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (psguo *ParcelShopGLSUpdateOne) SetNillableType(s *string) *ParcelShopGLSUpdateOne {
	if s != nil {
		psguo.SetType(*s)
	}
	return psguo
}

// ClearType clears the value of the "type" field.
func (psguo *ParcelShopGLSUpdateOne) ClearType() *ParcelShopGLSUpdateOne {
	psguo.mutation.ClearType()
	return psguo
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (psguo *ParcelShopGLSUpdateOne) SetParcelShopID(id pulid.ID) *ParcelShopGLSUpdateOne {
	psguo.mutation.SetParcelShopID(id)
	return psguo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (psguo *ParcelShopGLSUpdateOne) SetParcelShop(p *ParcelShop) *ParcelShopGLSUpdateOne {
	return psguo.SetParcelShopID(p.ID)
}

// Mutation returns the ParcelShopGLSMutation object of the builder.
func (psguo *ParcelShopGLSUpdateOne) Mutation() *ParcelShopGLSMutation {
	return psguo.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (psguo *ParcelShopGLSUpdateOne) ClearParcelShop() *ParcelShopGLSUpdateOne {
	psguo.mutation.ClearParcelShop()
	return psguo
}

// Where appends a list predicates to the ParcelShopGLSUpdate builder.
func (psguo *ParcelShopGLSUpdateOne) Where(ps ...predicate.ParcelShopGLS) *ParcelShopGLSUpdateOne {
	psguo.mutation.Where(ps...)
	return psguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psguo *ParcelShopGLSUpdateOne) Select(field string, fields ...string) *ParcelShopGLSUpdateOne {
	psguo.fields = append([]string{field}, fields...)
	return psguo
}

// Save executes the query and returns the updated ParcelShopGLS entity.
func (psguo *ParcelShopGLSUpdateOne) Save(ctx context.Context) (*ParcelShopGLS, error) {
	return withHooks(ctx, psguo.sqlSave, psguo.mutation, psguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psguo *ParcelShopGLSUpdateOne) SaveX(ctx context.Context) *ParcelShopGLS {
	node, err := psguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psguo *ParcelShopGLSUpdateOne) Exec(ctx context.Context) error {
	_, err := psguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psguo *ParcelShopGLSUpdateOne) ExecX(ctx context.Context) {
	if err := psguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psguo *ParcelShopGLSUpdateOne) check() error {
	if psguo.mutation.ParcelShopCleared() && len(psguo.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopGLS.parcel_shop"`)
	}
	return nil
}

func (psguo *ParcelShopGLSUpdateOne) sqlSave(ctx context.Context) (_node *ParcelShopGLS, err error) {
	if err := psguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshopgls.Table, parcelshopgls.Columns, sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString))
	id, ok := psguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ParcelShopGLS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshopgls.FieldID)
		for _, f := range fields {
			if !parcelshopgls.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parcelshopgls.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psguo.mutation.GLSParcelShopID(); ok {
		_spec.SetField(parcelshopgls.FieldGLSParcelShopID, field.TypeString, value)
	}
	if value, ok := psguo.mutation.PartnerID(); ok {
		_spec.SetField(parcelshopgls.FieldPartnerID, field.TypeString, value)
	}
	if psguo.mutation.PartnerIDCleared() {
		_spec.ClearField(parcelshopgls.FieldPartnerID, field.TypeString)
	}
	if value, ok := psguo.mutation.GetType(); ok {
		_spec.SetField(parcelshopgls.FieldType, field.TypeString, value)
	}
	if psguo.mutation.TypeCleared() {
		_spec.ClearField(parcelshopgls.FieldType, field.TypeString)
	}
	if psguo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopgls.ParcelShopTable,
			Columns: []string{parcelshopgls.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psguo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopgls.ParcelShopTable,
			Columns: []string{parcelshopgls.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ParcelShopGLS{config: psguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshopgls.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psguo.mutation.done = true
	return _node, nil
}
