// Code generated by ent, DO NOT EDIT.

package hypothesistest

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hypothesistest type in the database.
	Label = "hypothesis_test"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeHypothesisTestDeliveryOption holds the string denoting the hypothesis_test_delivery_option edge name in mutations.
	EdgeHypothesisTestDeliveryOption = "hypothesis_test_delivery_option"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// Table holds the table name of the hypothesistest in the database.
	Table = "hypothesis_tests"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "hypothesis_tests"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// HypothesisTestDeliveryOptionTable is the table that holds the hypothesis_test_delivery_option relation/edge.
	HypothesisTestDeliveryOptionTable = "hypothesis_test_delivery_options"
	// HypothesisTestDeliveryOptionInverseTable is the table name for the HypothesisTestDeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoption" package.
	HypothesisTestDeliveryOptionInverseTable = "hypothesis_test_delivery_options"
	// HypothesisTestDeliveryOptionColumn is the table column denoting the hypothesis_test_delivery_option relation/edge.
	HypothesisTestDeliveryOptionColumn = "hypothesis_test_hypothesis_test_delivery_option"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "hypothesis_tests"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "hypothesis_test_connection"
)

// Columns holds all SQL columns for hypothesistest fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hypothesis_tests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hypothesis_test_connection",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the HypothesisTest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByHypothesisTestDeliveryOptionField orders the results by hypothesis_test_delivery_option field.
func ByHypothesisTestDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByConnectionField orders the results by connection field.
func ByConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newHypothesisTestDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HypothesisTestDeliveryOptionTable, HypothesisTestDeliveryOptionColumn),
	)
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ConnectionTable, ConnectionColumn),
	)
}
