// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTenantID, v))
}

// OrderPublicID applies equality check predicate on the "order_public_id" field. It's identical to OrderPublicIDEQ.
func OrderPublicID(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderPublicID, v))
}

// ExternalID applies equality check predicate on the "external_id" field. It's identical to ExternalIDEQ.
func ExternalID(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldExternalID, v))
}

// CommentInternal applies equality check predicate on the "comment_internal" field. It's identical to CommentInternalEQ.
func CommentInternal(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCommentInternal, v))
}

// CommentExternal applies equality check predicate on the "comment_external" field. It's identical to CommentExternalEQ.
func CommentExternal(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCommentExternal, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// EmailSyncConfirmationAt applies equality check predicate on the "email_sync_confirmation_at" field. It's identical to EmailSyncConfirmationAtEQ.
func EmailSyncConfirmationAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldEmailSyncConfirmationAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Order {
	vc := string(v)
	return predicate.Order(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Order {
	vc := string(v)
	return predicate.Order(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Order {
	vc := string(v)
	return predicate.Order(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Order {
	vc := string(v)
	return predicate.Order(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Order {
	vc := string(v)
	return predicate.Order(sql.FieldContainsFold(FieldTenantID, vc))
}

// OrderPublicIDEQ applies the EQ predicate on the "order_public_id" field.
func OrderPublicIDEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderPublicID, v))
}

// OrderPublicIDNEQ applies the NEQ predicate on the "order_public_id" field.
func OrderPublicIDNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderPublicID, v))
}

// OrderPublicIDIn applies the In predicate on the "order_public_id" field.
func OrderPublicIDIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderPublicID, vs...))
}

// OrderPublicIDNotIn applies the NotIn predicate on the "order_public_id" field.
func OrderPublicIDNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderPublicID, vs...))
}

// OrderPublicIDGT applies the GT predicate on the "order_public_id" field.
func OrderPublicIDGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderPublicID, v))
}

// OrderPublicIDGTE applies the GTE predicate on the "order_public_id" field.
func OrderPublicIDGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderPublicID, v))
}

// OrderPublicIDLT applies the LT predicate on the "order_public_id" field.
func OrderPublicIDLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderPublicID, v))
}

// OrderPublicIDLTE applies the LTE predicate on the "order_public_id" field.
func OrderPublicIDLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderPublicID, v))
}

// OrderPublicIDContains applies the Contains predicate on the "order_public_id" field.
func OrderPublicIDContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldOrderPublicID, v))
}

// OrderPublicIDHasPrefix applies the HasPrefix predicate on the "order_public_id" field.
func OrderPublicIDHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldOrderPublicID, v))
}

// OrderPublicIDHasSuffix applies the HasSuffix predicate on the "order_public_id" field.
func OrderPublicIDHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldOrderPublicID, v))
}

// OrderPublicIDEqualFold applies the EqualFold predicate on the "order_public_id" field.
func OrderPublicIDEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldOrderPublicID, v))
}

// OrderPublicIDContainsFold applies the ContainsFold predicate on the "order_public_id" field.
func OrderPublicIDContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldOrderPublicID, v))
}

// ExternalIDEQ applies the EQ predicate on the "external_id" field.
func ExternalIDEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldExternalID, v))
}

// ExternalIDNEQ applies the NEQ predicate on the "external_id" field.
func ExternalIDNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldExternalID, v))
}

// ExternalIDIn applies the In predicate on the "external_id" field.
func ExternalIDIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldExternalID, vs...))
}

// ExternalIDNotIn applies the NotIn predicate on the "external_id" field.
func ExternalIDNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldExternalID, vs...))
}

// ExternalIDGT applies the GT predicate on the "external_id" field.
func ExternalIDGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldExternalID, v))
}

// ExternalIDGTE applies the GTE predicate on the "external_id" field.
func ExternalIDGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldExternalID, v))
}

// ExternalIDLT applies the LT predicate on the "external_id" field.
func ExternalIDLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldExternalID, v))
}

// ExternalIDLTE applies the LTE predicate on the "external_id" field.
func ExternalIDLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldExternalID, v))
}

// ExternalIDContains applies the Contains predicate on the "external_id" field.
func ExternalIDContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldExternalID, v))
}

// ExternalIDHasPrefix applies the HasPrefix predicate on the "external_id" field.
func ExternalIDHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldExternalID, v))
}

// ExternalIDHasSuffix applies the HasSuffix predicate on the "external_id" field.
func ExternalIDHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldExternalID, v))
}

// ExternalIDIsNil applies the IsNil predicate on the "external_id" field.
func ExternalIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldExternalID))
}

// ExternalIDNotNil applies the NotNil predicate on the "external_id" field.
func ExternalIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldExternalID))
}

// ExternalIDEqualFold applies the EqualFold predicate on the "external_id" field.
func ExternalIDEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldExternalID, v))
}

// ExternalIDContainsFold applies the ContainsFold predicate on the "external_id" field.
func ExternalIDContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldExternalID, v))
}

// CommentInternalEQ applies the EQ predicate on the "comment_internal" field.
func CommentInternalEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCommentInternal, v))
}

// CommentInternalNEQ applies the NEQ predicate on the "comment_internal" field.
func CommentInternalNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCommentInternal, v))
}

// CommentInternalIn applies the In predicate on the "comment_internal" field.
func CommentInternalIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCommentInternal, vs...))
}

// CommentInternalNotIn applies the NotIn predicate on the "comment_internal" field.
func CommentInternalNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCommentInternal, vs...))
}

// CommentInternalGT applies the GT predicate on the "comment_internal" field.
func CommentInternalGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCommentInternal, v))
}

// CommentInternalGTE applies the GTE predicate on the "comment_internal" field.
func CommentInternalGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCommentInternal, v))
}

// CommentInternalLT applies the LT predicate on the "comment_internal" field.
func CommentInternalLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCommentInternal, v))
}

// CommentInternalLTE applies the LTE predicate on the "comment_internal" field.
func CommentInternalLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCommentInternal, v))
}

// CommentInternalContains applies the Contains predicate on the "comment_internal" field.
func CommentInternalContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldCommentInternal, v))
}

// CommentInternalHasPrefix applies the HasPrefix predicate on the "comment_internal" field.
func CommentInternalHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldCommentInternal, v))
}

// CommentInternalHasSuffix applies the HasSuffix predicate on the "comment_internal" field.
func CommentInternalHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldCommentInternal, v))
}

// CommentInternalIsNil applies the IsNil predicate on the "comment_internal" field.
func CommentInternalIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCommentInternal))
}

// CommentInternalNotNil applies the NotNil predicate on the "comment_internal" field.
func CommentInternalNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCommentInternal))
}

// CommentInternalEqualFold applies the EqualFold predicate on the "comment_internal" field.
func CommentInternalEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldCommentInternal, v))
}

// CommentInternalContainsFold applies the ContainsFold predicate on the "comment_internal" field.
func CommentInternalContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldCommentInternal, v))
}

// CommentExternalEQ applies the EQ predicate on the "comment_external" field.
func CommentExternalEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCommentExternal, v))
}

// CommentExternalNEQ applies the NEQ predicate on the "comment_external" field.
func CommentExternalNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCommentExternal, v))
}

// CommentExternalIn applies the In predicate on the "comment_external" field.
func CommentExternalIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCommentExternal, vs...))
}

// CommentExternalNotIn applies the NotIn predicate on the "comment_external" field.
func CommentExternalNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCommentExternal, vs...))
}

// CommentExternalGT applies the GT predicate on the "comment_external" field.
func CommentExternalGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCommentExternal, v))
}

// CommentExternalGTE applies the GTE predicate on the "comment_external" field.
func CommentExternalGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCommentExternal, v))
}

// CommentExternalLT applies the LT predicate on the "comment_external" field.
func CommentExternalLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCommentExternal, v))
}

// CommentExternalLTE applies the LTE predicate on the "comment_external" field.
func CommentExternalLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCommentExternal, v))
}

// CommentExternalContains applies the Contains predicate on the "comment_external" field.
func CommentExternalContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldCommentExternal, v))
}

// CommentExternalHasPrefix applies the HasPrefix predicate on the "comment_external" field.
func CommentExternalHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldCommentExternal, v))
}

// CommentExternalHasSuffix applies the HasSuffix predicate on the "comment_external" field.
func CommentExternalHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldCommentExternal, v))
}

// CommentExternalIsNil applies the IsNil predicate on the "comment_external" field.
func CommentExternalIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldCommentExternal))
}

// CommentExternalNotNil applies the NotNil predicate on the "comment_external" field.
func CommentExternalNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldCommentExternal))
}

// CommentExternalEqualFold applies the EqualFold predicate on the "comment_external" field.
func CommentExternalEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldCommentExternal, v))
}

// CommentExternalContainsFold applies the ContainsFold predicate on the "comment_external" field.
func CommentExternalContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldCommentExternal, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// EmailSyncConfirmationAtEQ applies the EQ predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldEmailSyncConfirmationAt, v))
}

// EmailSyncConfirmationAtNEQ applies the NEQ predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldEmailSyncConfirmationAt, v))
}

// EmailSyncConfirmationAtIn applies the In predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldEmailSyncConfirmationAt, vs...))
}

// EmailSyncConfirmationAtNotIn applies the NotIn predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldEmailSyncConfirmationAt, vs...))
}

// EmailSyncConfirmationAtGT applies the GT predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldEmailSyncConfirmationAt, v))
}

// EmailSyncConfirmationAtGTE applies the GTE predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldEmailSyncConfirmationAt, v))
}

// EmailSyncConfirmationAtLT applies the LT predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldEmailSyncConfirmationAt, v))
}

// EmailSyncConfirmationAtLTE applies the LTE predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldEmailSyncConfirmationAt, v))
}

// EmailSyncConfirmationAtIsNil applies the IsNil predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldEmailSyncConfirmationAt))
}

// EmailSyncConfirmationAtNotNil applies the NotNil predicate on the "email_sync_confirmation_at" field.
func EmailSyncConfirmationAtNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldEmailSyncConfirmationAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// NoteAttributesIsNil applies the IsNil predicate on the "note_attributes" field.
func NoteAttributesIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldNoteAttributes))
}

// NoteAttributesNotNil applies the NotNil predicate on the "note_attributes" field.
func NoteAttributesNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldNoteAttributes))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHistory applies the HasEdge predicate on the "order_history" edge.
func HasOrderHistory() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoryTable, OrderHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHistoryWith applies the HasEdge predicate on the "order_history" edge with a given conditions (other predicates).
func HasOrderHistoryWith(preds ...predicate.OrderHistory) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnection applies the HasEdge predicate on the "connection" edge.
func HasConnection() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConnectionTable, ConnectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionWith applies the HasEdge predicate on the "connection" edge with a given conditions (other predicates).
func HasConnectionWith(preds ...predicate.Connection) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newConnectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnColli applies the HasEdge predicate on the "return_colli" edge.
func HasReturnColli() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReturnColliTable, ReturnColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnColliWith applies the HasEdge predicate on the "return_colli" edge with a given conditions (other predicates).
func HasReturnColliWith(preds ...predicate.ReturnColli) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newReturnColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHypothesisTestDeliveryOptionRequest applies the HasEdge predicate on the "hypothesis_test_delivery_option_request" edge.
func HasHypothesisTestDeliveryOptionRequest() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, HypothesisTestDeliveryOptionRequestTable, HypothesisTestDeliveryOptionRequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHypothesisTestDeliveryOptionRequestWith applies the HasEdge predicate on the "hypothesis_test_delivery_option_request" edge with a given conditions (other predicates).
func HasHypothesisTestDeliveryOptionRequestWith(preds ...predicate.HypothesisTestDeliveryOptionRequest) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newHypothesisTestDeliveryOptionRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPallet applies the HasEdge predicate on the "pallet" edge.
func HasPallet() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PalletTable, PalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPalletWith applies the HasEdge predicate on the "pallet" edge with a given conditions (other predicates).
func HasPalletWith(preds ...predicate.Pallet) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newPalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsolidation applies the HasEdge predicate on the "consolidation" edge.
func HasConsolidation() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConsolidationTable, ConsolidationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsolidationWith applies the HasEdge predicate on the "consolidation" edge with a given conditions (other predicates).
func HasConsolidationWith(preds ...predicate.Consolidation) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newConsolidationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
