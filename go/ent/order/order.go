// Code generated by ent, DO NOT EDIT.

package order

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldOrderPublicID holds the string denoting the order_public_id field in the database.
	FieldOrderPublicID = "order_public_id"
	// FieldExternalID holds the string denoting the external_id field in the database.
	FieldExternalID = "external_id"
	// FieldCommentInternal holds the string denoting the comment_internal field in the database.
	FieldCommentInternal = "comment_internal"
	// FieldCommentExternal holds the string denoting the comment_external field in the database.
	FieldCommentExternal = "comment_external"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEmailSyncConfirmationAt holds the string denoting the email_sync_confirmation_at field in the database.
	FieldEmailSyncConfirmationAt = "email_sync_confirmation_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNoteAttributes holds the string denoting the note_attributes field in the database.
	FieldNoteAttributes = "note_attributes"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeOrderHistory holds the string denoting the order_history edge name in mutations.
	EdgeOrderHistory = "order_history"
	// EdgeConnection holds the string denoting the connection edge name in mutations.
	EdgeConnection = "connection"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeReturnColli holds the string denoting the return_colli edge name in mutations.
	EdgeReturnColli = "return_colli"
	// EdgeHypothesisTestDeliveryOptionRequest holds the string denoting the hypothesis_test_delivery_option_request edge name in mutations.
	EdgeHypothesisTestDeliveryOptionRequest = "hypothesis_test_delivery_option_request"
	// EdgePallet holds the string denoting the pallet edge name in mutations.
	EdgePallet = "pallet"
	// EdgeConsolidation holds the string denoting the consolidation edge name in mutations.
	EdgeConsolidation = "consolidation"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "orders"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// OrderHistoryTable is the table that holds the order_history relation/edge.
	OrderHistoryTable = "order_histories"
	// OrderHistoryInverseTable is the table name for the OrderHistory entity.
	// It exists in this package in order to avoid circular dependency with the "orderhistory" package.
	OrderHistoryInverseTable = "order_histories"
	// OrderHistoryColumn is the table column denoting the order_history relation/edge.
	OrderHistoryColumn = "order_order_history"
	// ConnectionTable is the table that holds the connection relation/edge.
	ConnectionTable = "orders"
	// ConnectionInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionInverseTable = "connections"
	// ConnectionColumn is the table column denoting the connection relation/edge.
	ConnectionColumn = "connection_orders"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "collis"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "order_colli"
	// ReturnColliTable is the table that holds the return_colli relation/edge.
	ReturnColliTable = "return_collis"
	// ReturnColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnColliInverseTable = "return_collis"
	// ReturnColliColumn is the table column denoting the return_colli relation/edge.
	ReturnColliColumn = "order_return_colli"
	// HypothesisTestDeliveryOptionRequestTable is the table that holds the hypothesis_test_delivery_option_request relation/edge.
	HypothesisTestDeliveryOptionRequestTable = "orders"
	// HypothesisTestDeliveryOptionRequestInverseTable is the table name for the HypothesisTestDeliveryOptionRequest entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoptionrequest" package.
	HypothesisTestDeliveryOptionRequestInverseTable = "hypothesis_test_delivery_option_requests"
	// HypothesisTestDeliveryOptionRequestColumn is the table column denoting the hypothesis_test_delivery_option_request relation/edge.
	HypothesisTestDeliveryOptionRequestColumn = "hypothesis_test_delivery_option_request_order"
	// PalletTable is the table that holds the pallet relation/edge.
	PalletTable = "orders"
	// PalletInverseTable is the table name for the Pallet entity.
	// It exists in this package in order to avoid circular dependency with the "pallet" package.
	PalletInverseTable = "pallets"
	// PalletColumn is the table column denoting the pallet relation/edge.
	PalletColumn = "pallet_orders"
	// ConsolidationTable is the table that holds the consolidation relation/edge.
	ConsolidationTable = "orders"
	// ConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	ConsolidationInverseTable = "consolidations"
	// ConsolidationColumn is the table column denoting the consolidation relation/edge.
	ConsolidationColumn = "consolidation_orders"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldOrderPublicID,
	FieldExternalID,
	FieldCommentInternal,
	FieldCommentExternal,
	FieldCreatedAt,
	FieldEmailSyncConfirmationAt,
	FieldStatus,
	FieldNoteAttributes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"connection_orders",
	"consolidation_orders",
	"hypothesis_test_delivery_option_request_order",
	"pallet_orders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks        [3]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultNoteAttributes holds the default value on creation for the "note_attributes" field.
	DefaultNoteAttributes fieldjson.NoteAttributes
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending              Status = "Pending"
	StatusPartially_dispatched Status = "Partially_dispatched"
	StatusDispatched           Status = "Dispatched"
	StatusCancelled            Status = "Cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusPartially_dispatched, StatusDispatched, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("order: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByOrderPublicID orders the results by the order_public_id field.
func ByOrderPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderPublicID, opts...).ToFunc()
}

// ByExternalID orders the results by the external_id field.
func ByExternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalID, opts...).ToFunc()
}

// ByCommentInternal orders the results by the comment_internal field.
func ByCommentInternal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentInternal, opts...).ToFunc()
}

// ByCommentExternal orders the results by the comment_external field.
func ByCommentExternal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentExternal, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEmailSyncConfirmationAt orders the results by the email_sync_confirmation_at field.
func ByEmailSyncConfirmationAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailSyncConfirmationAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderHistoryCount orders the results by order_history count.
func ByOrderHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderHistoryStep(), opts...)
	}
}

// ByOrderHistory orders the results by order_history terms.
func ByOrderHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConnectionField orders the results by connection field.
func ByConnectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionStep(), sql.OrderByField(field, opts...))
	}
}

// ByColliCount orders the results by colli count.
func ByColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newColliStep(), opts...)
	}
}

// ByColli orders the results by colli terms.
func ByColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnColliCount orders the results by return_colli count.
func ByReturnColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnColliStep(), opts...)
	}
}

// ByReturnColli orders the results by return_colli terms.
func ByReturnColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByHypothesisTestDeliveryOptionRequestField orders the results by hypothesis_test_delivery_option_request field.
func ByHypothesisTestDeliveryOptionRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByPalletField orders the results by pallet field.
func ByPalletField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPalletStep(), sql.OrderByField(field, opts...))
	}
}

// ByConsolidationField orders the results by consolidation field.
func ByConsolidationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsolidationStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newOrderHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoryTable, OrderHistoryColumn),
	)
}
func newConnectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConnectionTable, ConnectionColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ColliTable, ColliColumn),
	)
}
func newReturnColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReturnColliTable, ReturnColliColumn),
	)
}
func newHypothesisTestDeliveryOptionRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, HypothesisTestDeliveryOptionRequestTable, HypothesisTestDeliveryOptionRequestColumn),
	)
}
func newPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PalletTable, PalletColumn),
	)
}
func newConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ConsolidationTable, ConsolidationColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
