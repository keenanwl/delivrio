// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SignupOptionsUpdate is the builder for updating SignupOptions entities.
type SignupOptionsUpdate struct {
	config
	hooks    []Hook
	mutation *SignupOptionsMutation
}

// Where appends a list predicates to the SignupOptionsUpdate builder.
func (sou *SignupOptionsUpdate) Where(ps ...predicate.SignupOptions) *SignupOptionsUpdate {
	sou.mutation.Where(ps...)
	return sou
}

// SetBetterDeliveryOptions sets the "better_delivery_options" field.
func (sou *SignupOptionsUpdate) SetBetterDeliveryOptions(b bool) *SignupOptionsUpdate {
	sou.mutation.SetBetterDeliveryOptions(b)
	return sou
}

// SetNillableBetterDeliveryOptions sets the "better_delivery_options" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableBetterDeliveryOptions(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetBetterDeliveryOptions(*b)
	}
	return sou
}

// SetImprovePickPack sets the "improve_pick_pack" field.
func (sou *SignupOptionsUpdate) SetImprovePickPack(b bool) *SignupOptionsUpdate {
	sou.mutation.SetImprovePickPack(b)
	return sou
}

// SetNillableImprovePickPack sets the "improve_pick_pack" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableImprovePickPack(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetImprovePickPack(*b)
	}
	return sou
}

// SetShippingLabel sets the "shipping_label" field.
func (sou *SignupOptionsUpdate) SetShippingLabel(b bool) *SignupOptionsUpdate {
	sou.mutation.SetShippingLabel(b)
	return sou
}

// SetNillableShippingLabel sets the "shipping_label" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableShippingLabel(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetShippingLabel(*b)
	}
	return sou
}

// SetCustomDocs sets the "custom_docs" field.
func (sou *SignupOptionsUpdate) SetCustomDocs(b bool) *SignupOptionsUpdate {
	sou.mutation.SetCustomDocs(b)
	return sou
}

// SetNillableCustomDocs sets the "custom_docs" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableCustomDocs(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetCustomDocs(*b)
	}
	return sou
}

// SetReducedCosts sets the "reduced_costs" field.
func (sou *SignupOptionsUpdate) SetReducedCosts(b bool) *SignupOptionsUpdate {
	sou.mutation.SetReducedCosts(b)
	return sou
}

// SetNillableReducedCosts sets the "reduced_costs" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableReducedCosts(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetReducedCosts(*b)
	}
	return sou
}

// SetEasyReturns sets the "easy_returns" field.
func (sou *SignupOptionsUpdate) SetEasyReturns(b bool) *SignupOptionsUpdate {
	sou.mutation.SetEasyReturns(b)
	return sou
}

// SetNillableEasyReturns sets the "easy_returns" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableEasyReturns(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetEasyReturns(*b)
	}
	return sou
}

// SetClickCollect sets the "click_collect" field.
func (sou *SignupOptionsUpdate) SetClickCollect(b bool) *SignupOptionsUpdate {
	sou.mutation.SetClickCollect(b)
	return sou
}

// SetNillableClickCollect sets the "click_collect" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableClickCollect(b *bool) *SignupOptionsUpdate {
	if b != nil {
		sou.SetClickCollect(*b)
	}
	return sou
}

// SetNumShipments sets the "num_shipments" field.
func (sou *SignupOptionsUpdate) SetNumShipments(i int) *SignupOptionsUpdate {
	sou.mutation.ResetNumShipments()
	sou.mutation.SetNumShipments(i)
	return sou
}

// SetNillableNumShipments sets the "num_shipments" field if the given value is not nil.
func (sou *SignupOptionsUpdate) SetNillableNumShipments(i *int) *SignupOptionsUpdate {
	if i != nil {
		sou.SetNumShipments(*i)
	}
	return sou
}

// AddNumShipments adds i to the "num_shipments" field.
func (sou *SignupOptionsUpdate) AddNumShipments(i int) *SignupOptionsUpdate {
	sou.mutation.AddNumShipments(i)
	return sou
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (sou *SignupOptionsUpdate) SetUsersID(id pulid.ID) *SignupOptionsUpdate {
	sou.mutation.SetUsersID(id)
	return sou
}

// SetUsers sets the "users" edge to the User entity.
func (sou *SignupOptionsUpdate) SetUsers(u *User) *SignupOptionsUpdate {
	return sou.SetUsersID(u.ID)
}

// Mutation returns the SignupOptionsMutation object of the builder.
func (sou *SignupOptionsUpdate) Mutation() *SignupOptionsMutation {
	return sou.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (sou *SignupOptionsUpdate) ClearUsers() *SignupOptionsUpdate {
	sou.mutation.ClearUsers()
	return sou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sou *SignupOptionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sou.sqlSave, sou.mutation, sou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SignupOptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SignupOptionsUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SignupOptionsUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sou *SignupOptionsUpdate) check() error {
	if sou.mutation.UsersCleared() && len(sou.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignupOptions.users"`)
	}
	return nil
}

func (sou *SignupOptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(signupoptions.Table, signupoptions.Columns, sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString))
	if ps := sou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sou.mutation.BetterDeliveryOptions(); ok {
		_spec.SetField(signupoptions.FieldBetterDeliveryOptions, field.TypeBool, value)
	}
	if value, ok := sou.mutation.ImprovePickPack(); ok {
		_spec.SetField(signupoptions.FieldImprovePickPack, field.TypeBool, value)
	}
	if value, ok := sou.mutation.ShippingLabel(); ok {
		_spec.SetField(signupoptions.FieldShippingLabel, field.TypeBool, value)
	}
	if value, ok := sou.mutation.CustomDocs(); ok {
		_spec.SetField(signupoptions.FieldCustomDocs, field.TypeBool, value)
	}
	if value, ok := sou.mutation.ReducedCosts(); ok {
		_spec.SetField(signupoptions.FieldReducedCosts, field.TypeBool, value)
	}
	if value, ok := sou.mutation.EasyReturns(); ok {
		_spec.SetField(signupoptions.FieldEasyReturns, field.TypeBool, value)
	}
	if value, ok := sou.mutation.ClickCollect(); ok {
		_spec.SetField(signupoptions.FieldClickCollect, field.TypeBool, value)
	}
	if value, ok := sou.mutation.NumShipments(); ok {
		_spec.SetField(signupoptions.FieldNumShipments, field.TypeInt, value)
	}
	if value, ok := sou.mutation.AddedNumShipments(); ok {
		_spec.AddField(signupoptions.FieldNumShipments, field.TypeInt, value)
	}
	if sou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signupoptions.UsersTable,
			Columns: []string{signupoptions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signupoptions.UsersTable,
			Columns: []string{signupoptions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signupoptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sou.mutation.done = true
	return n, nil
}

// SignupOptionsUpdateOne is the builder for updating a single SignupOptions entity.
type SignupOptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SignupOptionsMutation
}

// SetBetterDeliveryOptions sets the "better_delivery_options" field.
func (souo *SignupOptionsUpdateOne) SetBetterDeliveryOptions(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetBetterDeliveryOptions(b)
	return souo
}

// SetNillableBetterDeliveryOptions sets the "better_delivery_options" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableBetterDeliveryOptions(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetBetterDeliveryOptions(*b)
	}
	return souo
}

// SetImprovePickPack sets the "improve_pick_pack" field.
func (souo *SignupOptionsUpdateOne) SetImprovePickPack(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetImprovePickPack(b)
	return souo
}

// SetNillableImprovePickPack sets the "improve_pick_pack" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableImprovePickPack(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetImprovePickPack(*b)
	}
	return souo
}

// SetShippingLabel sets the "shipping_label" field.
func (souo *SignupOptionsUpdateOne) SetShippingLabel(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetShippingLabel(b)
	return souo
}

// SetNillableShippingLabel sets the "shipping_label" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableShippingLabel(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetShippingLabel(*b)
	}
	return souo
}

// SetCustomDocs sets the "custom_docs" field.
func (souo *SignupOptionsUpdateOne) SetCustomDocs(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetCustomDocs(b)
	return souo
}

// SetNillableCustomDocs sets the "custom_docs" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableCustomDocs(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetCustomDocs(*b)
	}
	return souo
}

// SetReducedCosts sets the "reduced_costs" field.
func (souo *SignupOptionsUpdateOne) SetReducedCosts(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetReducedCosts(b)
	return souo
}

// SetNillableReducedCosts sets the "reduced_costs" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableReducedCosts(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetReducedCosts(*b)
	}
	return souo
}

// SetEasyReturns sets the "easy_returns" field.
func (souo *SignupOptionsUpdateOne) SetEasyReturns(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetEasyReturns(b)
	return souo
}

// SetNillableEasyReturns sets the "easy_returns" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableEasyReturns(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetEasyReturns(*b)
	}
	return souo
}

// SetClickCollect sets the "click_collect" field.
func (souo *SignupOptionsUpdateOne) SetClickCollect(b bool) *SignupOptionsUpdateOne {
	souo.mutation.SetClickCollect(b)
	return souo
}

// SetNillableClickCollect sets the "click_collect" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableClickCollect(b *bool) *SignupOptionsUpdateOne {
	if b != nil {
		souo.SetClickCollect(*b)
	}
	return souo
}

// SetNumShipments sets the "num_shipments" field.
func (souo *SignupOptionsUpdateOne) SetNumShipments(i int) *SignupOptionsUpdateOne {
	souo.mutation.ResetNumShipments()
	souo.mutation.SetNumShipments(i)
	return souo
}

// SetNillableNumShipments sets the "num_shipments" field if the given value is not nil.
func (souo *SignupOptionsUpdateOne) SetNillableNumShipments(i *int) *SignupOptionsUpdateOne {
	if i != nil {
		souo.SetNumShipments(*i)
	}
	return souo
}

// AddNumShipments adds i to the "num_shipments" field.
func (souo *SignupOptionsUpdateOne) AddNumShipments(i int) *SignupOptionsUpdateOne {
	souo.mutation.AddNumShipments(i)
	return souo
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (souo *SignupOptionsUpdateOne) SetUsersID(id pulid.ID) *SignupOptionsUpdateOne {
	souo.mutation.SetUsersID(id)
	return souo
}

// SetUsers sets the "users" edge to the User entity.
func (souo *SignupOptionsUpdateOne) SetUsers(u *User) *SignupOptionsUpdateOne {
	return souo.SetUsersID(u.ID)
}

// Mutation returns the SignupOptionsMutation object of the builder.
func (souo *SignupOptionsUpdateOne) Mutation() *SignupOptionsMutation {
	return souo.mutation
}

// ClearUsers clears the "users" edge to the User entity.
func (souo *SignupOptionsUpdateOne) ClearUsers() *SignupOptionsUpdateOne {
	souo.mutation.ClearUsers()
	return souo
}

// Where appends a list predicates to the SignupOptionsUpdate builder.
func (souo *SignupOptionsUpdateOne) Where(ps ...predicate.SignupOptions) *SignupOptionsUpdateOne {
	souo.mutation.Where(ps...)
	return souo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (souo *SignupOptionsUpdateOne) Select(field string, fields ...string) *SignupOptionsUpdateOne {
	souo.fields = append([]string{field}, fields...)
	return souo
}

// Save executes the query and returns the updated SignupOptions entity.
func (souo *SignupOptionsUpdateOne) Save(ctx context.Context) (*SignupOptions, error) {
	return withHooks(ctx, souo.sqlSave, souo.mutation, souo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SignupOptionsUpdateOne) SaveX(ctx context.Context) *SignupOptions {
	node, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (souo *SignupOptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SignupOptionsUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (souo *SignupOptionsUpdateOne) check() error {
	if souo.mutation.UsersCleared() && len(souo.mutation.UsersIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SignupOptions.users"`)
	}
	return nil
}

func (souo *SignupOptionsUpdateOne) sqlSave(ctx context.Context) (_node *SignupOptions, err error) {
	if err := souo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(signupoptions.Table, signupoptions.Columns, sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString))
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SignupOptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := souo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, signupoptions.FieldID)
		for _, f := range fields {
			if !signupoptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != signupoptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := souo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := souo.mutation.BetterDeliveryOptions(); ok {
		_spec.SetField(signupoptions.FieldBetterDeliveryOptions, field.TypeBool, value)
	}
	if value, ok := souo.mutation.ImprovePickPack(); ok {
		_spec.SetField(signupoptions.FieldImprovePickPack, field.TypeBool, value)
	}
	if value, ok := souo.mutation.ShippingLabel(); ok {
		_spec.SetField(signupoptions.FieldShippingLabel, field.TypeBool, value)
	}
	if value, ok := souo.mutation.CustomDocs(); ok {
		_spec.SetField(signupoptions.FieldCustomDocs, field.TypeBool, value)
	}
	if value, ok := souo.mutation.ReducedCosts(); ok {
		_spec.SetField(signupoptions.FieldReducedCosts, field.TypeBool, value)
	}
	if value, ok := souo.mutation.EasyReturns(); ok {
		_spec.SetField(signupoptions.FieldEasyReturns, field.TypeBool, value)
	}
	if value, ok := souo.mutation.ClickCollect(); ok {
		_spec.SetField(signupoptions.FieldClickCollect, field.TypeBool, value)
	}
	if value, ok := souo.mutation.NumShipments(); ok {
		_spec.SetField(signupoptions.FieldNumShipments, field.TypeInt, value)
	}
	if value, ok := souo.mutation.AddedNumShipments(); ok {
		_spec.AddField(signupoptions.FieldNumShipments, field.TypeInt, value)
	}
	if souo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signupoptions.UsersTable,
			Columns: []string{signupoptions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signupoptions.UsersTable,
			Columns: []string{signupoptions.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SignupOptions{config: souo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signupoptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	souo.mutation.done = true
	return _node, nil
}
