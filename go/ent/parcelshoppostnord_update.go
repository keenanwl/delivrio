// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopPostNordUpdate is the builder for updating ParcelShopPostNord entities.
type ParcelShopPostNordUpdate struct {
	config
	hooks    []Hook
	mutation *ParcelShopPostNordMutation
}

// Where appends a list predicates to the ParcelShopPostNordUpdate builder.
func (pspnu *ParcelShopPostNordUpdate) Where(ps ...predicate.ParcelShopPostNord) *ParcelShopPostNordUpdate {
	pspnu.mutation.Where(ps...)
	return pspnu
}

// SetServicePointID sets the "service_point_id" field.
func (pspnu *ParcelShopPostNordUpdate) SetServicePointID(s string) *ParcelShopPostNordUpdate {
	pspnu.mutation.SetServicePointID(s)
	return pspnu
}

// SetNillableServicePointID sets the "service_point_id" field if the given value is not nil.
func (pspnu *ParcelShopPostNordUpdate) SetNillableServicePointID(s *string) *ParcelShopPostNordUpdate {
	if s != nil {
		pspnu.SetServicePointID(*s)
	}
	return pspnu
}

// SetPudoid sets the "pudoid" field.
func (pspnu *ParcelShopPostNordUpdate) SetPudoid(s string) *ParcelShopPostNordUpdate {
	pspnu.mutation.SetPudoid(s)
	return pspnu
}

// SetNillablePudoid sets the "pudoid" field if the given value is not nil.
func (pspnu *ParcelShopPostNordUpdate) SetNillablePudoid(s *string) *ParcelShopPostNordUpdate {
	if s != nil {
		pspnu.SetPudoid(*s)
	}
	return pspnu
}

// SetTypeID sets the "type_id" field.
func (pspnu *ParcelShopPostNordUpdate) SetTypeID(s string) *ParcelShopPostNordUpdate {
	pspnu.mutation.SetTypeID(s)
	return pspnu
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (pspnu *ParcelShopPostNordUpdate) SetNillableTypeID(s *string) *ParcelShopPostNordUpdate {
	if s != nil {
		pspnu.SetTypeID(*s)
	}
	return pspnu
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (pspnu *ParcelShopPostNordUpdate) SetParcelShopID(id pulid.ID) *ParcelShopPostNordUpdate {
	pspnu.mutation.SetParcelShopID(id)
	return pspnu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (pspnu *ParcelShopPostNordUpdate) SetParcelShop(p *ParcelShop) *ParcelShopPostNordUpdate {
	return pspnu.SetParcelShopID(p.ID)
}

// SetAddressDeliveryID sets the "address_delivery" edge to the AddressGlobal entity by ID.
func (pspnu *ParcelShopPostNordUpdate) SetAddressDeliveryID(id pulid.ID) *ParcelShopPostNordUpdate {
	pspnu.mutation.SetAddressDeliveryID(id)
	return pspnu
}

// SetAddressDelivery sets the "address_delivery" edge to the AddressGlobal entity.
func (pspnu *ParcelShopPostNordUpdate) SetAddressDelivery(a *AddressGlobal) *ParcelShopPostNordUpdate {
	return pspnu.SetAddressDeliveryID(a.ID)
}

// Mutation returns the ParcelShopPostNordMutation object of the builder.
func (pspnu *ParcelShopPostNordUpdate) Mutation() *ParcelShopPostNordMutation {
	return pspnu.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (pspnu *ParcelShopPostNordUpdate) ClearParcelShop() *ParcelShopPostNordUpdate {
	pspnu.mutation.ClearParcelShop()
	return pspnu
}

// ClearAddressDelivery clears the "address_delivery" edge to the AddressGlobal entity.
func (pspnu *ParcelShopPostNordUpdate) ClearAddressDelivery() *ParcelShopPostNordUpdate {
	pspnu.mutation.ClearAddressDelivery()
	return pspnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pspnu *ParcelShopPostNordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pspnu.sqlSave, pspnu.mutation, pspnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pspnu *ParcelShopPostNordUpdate) SaveX(ctx context.Context) int {
	affected, err := pspnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pspnu *ParcelShopPostNordUpdate) Exec(ctx context.Context) error {
	_, err := pspnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspnu *ParcelShopPostNordUpdate) ExecX(ctx context.Context) {
	if err := pspnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pspnu *ParcelShopPostNordUpdate) check() error {
	if pspnu.mutation.ParcelShopCleared() && len(pspnu.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopPostNord.parcel_shop"`)
	}
	if pspnu.mutation.AddressDeliveryCleared() && len(pspnu.mutation.AddressDeliveryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopPostNord.address_delivery"`)
	}
	return nil
}

func (pspnu *ParcelShopPostNordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pspnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshoppostnord.Table, parcelshoppostnord.Columns, sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString))
	if ps := pspnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pspnu.mutation.ServicePointID(); ok {
		_spec.SetField(parcelshoppostnord.FieldServicePointID, field.TypeString, value)
	}
	if value, ok := pspnu.mutation.Pudoid(); ok {
		_spec.SetField(parcelshoppostnord.FieldPudoid, field.TypeString, value)
	}
	if value, ok := pspnu.mutation.TypeID(); ok {
		_spec.SetField(parcelshoppostnord.FieldTypeID, field.TypeString, value)
	}
	if pspnu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshoppostnord.ParcelShopTable,
			Columns: []string{parcelshoppostnord.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspnu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshoppostnord.ParcelShopTable,
			Columns: []string{parcelshoppostnord.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pspnu.mutation.AddressDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshoppostnord.AddressDeliveryTable,
			Columns: []string{parcelshoppostnord.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspnu.mutation.AddressDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshoppostnord.AddressDeliveryTable,
			Columns: []string{parcelshoppostnord.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pspnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshoppostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pspnu.mutation.done = true
	return n, nil
}

// ParcelShopPostNordUpdateOne is the builder for updating a single ParcelShopPostNord entity.
type ParcelShopPostNordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ParcelShopPostNordMutation
}

// SetServicePointID sets the "service_point_id" field.
func (pspnuo *ParcelShopPostNordUpdateOne) SetServicePointID(s string) *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.SetServicePointID(s)
	return pspnuo
}

// SetNillableServicePointID sets the "service_point_id" field if the given value is not nil.
func (pspnuo *ParcelShopPostNordUpdateOne) SetNillableServicePointID(s *string) *ParcelShopPostNordUpdateOne {
	if s != nil {
		pspnuo.SetServicePointID(*s)
	}
	return pspnuo
}

// SetPudoid sets the "pudoid" field.
func (pspnuo *ParcelShopPostNordUpdateOne) SetPudoid(s string) *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.SetPudoid(s)
	return pspnuo
}

// SetNillablePudoid sets the "pudoid" field if the given value is not nil.
func (pspnuo *ParcelShopPostNordUpdateOne) SetNillablePudoid(s *string) *ParcelShopPostNordUpdateOne {
	if s != nil {
		pspnuo.SetPudoid(*s)
	}
	return pspnuo
}

// SetTypeID sets the "type_id" field.
func (pspnuo *ParcelShopPostNordUpdateOne) SetTypeID(s string) *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.SetTypeID(s)
	return pspnuo
}

// SetNillableTypeID sets the "type_id" field if the given value is not nil.
func (pspnuo *ParcelShopPostNordUpdateOne) SetNillableTypeID(s *string) *ParcelShopPostNordUpdateOne {
	if s != nil {
		pspnuo.SetTypeID(*s)
	}
	return pspnuo
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (pspnuo *ParcelShopPostNordUpdateOne) SetParcelShopID(id pulid.ID) *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.SetParcelShopID(id)
	return pspnuo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (pspnuo *ParcelShopPostNordUpdateOne) SetParcelShop(p *ParcelShop) *ParcelShopPostNordUpdateOne {
	return pspnuo.SetParcelShopID(p.ID)
}

// SetAddressDeliveryID sets the "address_delivery" edge to the AddressGlobal entity by ID.
func (pspnuo *ParcelShopPostNordUpdateOne) SetAddressDeliveryID(id pulid.ID) *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.SetAddressDeliveryID(id)
	return pspnuo
}

// SetAddressDelivery sets the "address_delivery" edge to the AddressGlobal entity.
func (pspnuo *ParcelShopPostNordUpdateOne) SetAddressDelivery(a *AddressGlobal) *ParcelShopPostNordUpdateOne {
	return pspnuo.SetAddressDeliveryID(a.ID)
}

// Mutation returns the ParcelShopPostNordMutation object of the builder.
func (pspnuo *ParcelShopPostNordUpdateOne) Mutation() *ParcelShopPostNordMutation {
	return pspnuo.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (pspnuo *ParcelShopPostNordUpdateOne) ClearParcelShop() *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.ClearParcelShop()
	return pspnuo
}

// ClearAddressDelivery clears the "address_delivery" edge to the AddressGlobal entity.
func (pspnuo *ParcelShopPostNordUpdateOne) ClearAddressDelivery() *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.ClearAddressDelivery()
	return pspnuo
}

// Where appends a list predicates to the ParcelShopPostNordUpdate builder.
func (pspnuo *ParcelShopPostNordUpdateOne) Where(ps ...predicate.ParcelShopPostNord) *ParcelShopPostNordUpdateOne {
	pspnuo.mutation.Where(ps...)
	return pspnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pspnuo *ParcelShopPostNordUpdateOne) Select(field string, fields ...string) *ParcelShopPostNordUpdateOne {
	pspnuo.fields = append([]string{field}, fields...)
	return pspnuo
}

// Save executes the query and returns the updated ParcelShopPostNord entity.
func (pspnuo *ParcelShopPostNordUpdateOne) Save(ctx context.Context) (*ParcelShopPostNord, error) {
	return withHooks(ctx, pspnuo.sqlSave, pspnuo.mutation, pspnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pspnuo *ParcelShopPostNordUpdateOne) SaveX(ctx context.Context) *ParcelShopPostNord {
	node, err := pspnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pspnuo *ParcelShopPostNordUpdateOne) Exec(ctx context.Context) error {
	_, err := pspnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspnuo *ParcelShopPostNordUpdateOne) ExecX(ctx context.Context) {
	if err := pspnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pspnuo *ParcelShopPostNordUpdateOne) check() error {
	if pspnuo.mutation.ParcelShopCleared() && len(pspnuo.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopPostNord.parcel_shop"`)
	}
	if pspnuo.mutation.AddressDeliveryCleared() && len(pspnuo.mutation.AddressDeliveryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ParcelShopPostNord.address_delivery"`)
	}
	return nil
}

func (pspnuo *ParcelShopPostNordUpdateOne) sqlSave(ctx context.Context) (_node *ParcelShopPostNord, err error) {
	if err := pspnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(parcelshoppostnord.Table, parcelshoppostnord.Columns, sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString))
	id, ok := pspnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ParcelShopPostNord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pspnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshoppostnord.FieldID)
		for _, f := range fields {
			if !parcelshoppostnord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != parcelshoppostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pspnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pspnuo.mutation.ServicePointID(); ok {
		_spec.SetField(parcelshoppostnord.FieldServicePointID, field.TypeString, value)
	}
	if value, ok := pspnuo.mutation.Pudoid(); ok {
		_spec.SetField(parcelshoppostnord.FieldPudoid, field.TypeString, value)
	}
	if value, ok := pspnuo.mutation.TypeID(); ok {
		_spec.SetField(parcelshoppostnord.FieldTypeID, field.TypeString, value)
	}
	if pspnuo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshoppostnord.ParcelShopTable,
			Columns: []string{parcelshoppostnord.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspnuo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshoppostnord.ParcelShopTable,
			Columns: []string{parcelshoppostnord.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pspnuo.mutation.AddressDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshoppostnord.AddressDeliveryTable,
			Columns: []string{parcelshoppostnord.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pspnuo.mutation.AddressDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshoppostnord.AddressDeliveryTable,
			Columns: []string{parcelshoppostnord.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ParcelShopPostNord{config: pspnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pspnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{parcelshoppostnord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pspnuo.mutation.done = true
	return _node, nil
}
