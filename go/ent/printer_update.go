// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrinterUpdate is the builder for updating Printer entities.
type PrinterUpdate struct {
	config
	hooks    []Hook
	mutation *PrinterMutation
}

// Where appends a list predicates to the PrinterUpdate builder.
func (pu *PrinterUpdate) Where(ps ...predicate.Printer) *PrinterUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *PrinterUpdate) SetTenantID(value pulid.ID) *PrinterUpdate {
	pu.mutation.SetTenantID(value)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableTenantID(value *pulid.ID) *PrinterUpdate {
	if value != nil {
		pu.SetTenantID(*value)
	}
	return pu
}

// SetDeviceID sets the "device_id" field.
func (pu *PrinterUpdate) SetDeviceID(value pulid.ID) *PrinterUpdate {
	pu.mutation.SetDeviceID(value)
	return pu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableDeviceID(value *pulid.ID) *PrinterUpdate {
	if value != nil {
		pu.SetDeviceID(*value)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PrinterUpdate) SetName(s string) *PrinterUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableName(s *string) *PrinterUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetLabelZpl sets the "label_zpl" field.
func (pu *PrinterUpdate) SetLabelZpl(b bool) *PrinterUpdate {
	pu.mutation.SetLabelZpl(b)
	return pu
}

// SetNillableLabelZpl sets the "label_zpl" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableLabelZpl(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetLabelZpl(*b)
	}
	return pu
}

// SetLabelPdf sets the "label_pdf" field.
func (pu *PrinterUpdate) SetLabelPdf(b bool) *PrinterUpdate {
	pu.mutation.SetLabelPdf(b)
	return pu
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableLabelPdf(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetLabelPdf(*b)
	}
	return pu
}

// SetLabelPng sets the "label_png" field.
func (pu *PrinterUpdate) SetLabelPng(b bool) *PrinterUpdate {
	pu.mutation.SetLabelPng(b)
	return pu
}

// SetNillableLabelPng sets the "label_png" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableLabelPng(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetLabelPng(*b)
	}
	return pu
}

// SetDocument sets the "document" field.
func (pu *PrinterUpdate) SetDocument(b bool) *PrinterUpdate {
	pu.mutation.SetDocument(b)
	return pu
}

// SetNillableDocument sets the "document" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableDocument(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetDocument(*b)
	}
	return pu
}

// SetRotate180 sets the "rotate_180" field.
func (pu *PrinterUpdate) SetRotate180(b bool) *PrinterUpdate {
	pu.mutation.SetRotate180(b)
	return pu
}

// SetNillableRotate180 sets the "rotate_180" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableRotate180(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetRotate180(*b)
	}
	return pu
}

// SetUseShell sets the "use_shell" field.
func (pu *PrinterUpdate) SetUseShell(b bool) *PrinterUpdate {
	pu.mutation.SetUseShell(b)
	return pu
}

// SetNillableUseShell sets the "use_shell" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableUseShell(b *bool) *PrinterUpdate {
	if b != nil {
		pu.SetUseShell(*b)
	}
	return pu
}

// SetPrintSize sets the "print_size" field.
func (pu *PrinterUpdate) SetPrintSize(ps printer.PrintSize) *PrinterUpdate {
	pu.mutation.SetPrintSize(ps)
	return pu
}

// SetNillablePrintSize sets the "print_size" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillablePrintSize(ps *printer.PrintSize) *PrinterUpdate {
	if ps != nil {
		pu.SetPrintSize(*ps)
	}
	return pu
}

// SetLastPing sets the "last_ping" field.
func (pu *PrinterUpdate) SetLastPing(t time.Time) *PrinterUpdate {
	pu.mutation.SetLastPing(t)
	return pu
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (pu *PrinterUpdate) SetNillableLastPing(t *time.Time) *PrinterUpdate {
	if t != nil {
		pu.SetLastPing(*t)
	}
	return pu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pu *PrinterUpdate) SetTenant(t *Tenant) *PrinterUpdate {
	return pu.SetTenantID(t.ID)
}

// SetWorkstationID sets the "workstation" edge to the Workstation entity by ID.
func (pu *PrinterUpdate) SetWorkstationID(id pulid.ID) *PrinterUpdate {
	pu.mutation.SetWorkstationID(id)
	return pu
}

// SetWorkstation sets the "workstation" edge to the Workstation entity.
func (pu *PrinterUpdate) SetWorkstation(w *Workstation) *PrinterUpdate {
	return pu.SetWorkstationID(w.ID)
}

// AddPrintJobIDs adds the "print_jobs" edge to the PrintJob entity by IDs.
func (pu *PrinterUpdate) AddPrintJobIDs(ids ...pulid.ID) *PrinterUpdate {
	pu.mutation.AddPrintJobIDs(ids...)
	return pu
}

// AddPrintJobs adds the "print_jobs" edges to the PrintJob entity.
func (pu *PrinterUpdate) AddPrintJobs(p ...*PrintJob) *PrinterUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPrintJobIDs(ids...)
}

// Mutation returns the PrinterMutation object of the builder.
func (pu *PrinterUpdate) Mutation() *PrinterMutation {
	return pu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pu *PrinterUpdate) ClearTenant() *PrinterUpdate {
	pu.mutation.ClearTenant()
	return pu
}

// ClearWorkstation clears the "workstation" edge to the Workstation entity.
func (pu *PrinterUpdate) ClearWorkstation() *PrinterUpdate {
	pu.mutation.ClearWorkstation()
	return pu
}

// ClearPrintJobs clears all "print_jobs" edges to the PrintJob entity.
func (pu *PrinterUpdate) ClearPrintJobs() *PrinterUpdate {
	pu.mutation.ClearPrintJobs()
	return pu
}

// RemovePrintJobIDs removes the "print_jobs" edge to PrintJob entities by IDs.
func (pu *PrinterUpdate) RemovePrintJobIDs(ids ...pulid.ID) *PrinterUpdate {
	pu.mutation.RemovePrintJobIDs(ids...)
	return pu
}

// RemovePrintJobs removes "print_jobs" edges to PrintJob entities.
func (pu *PrinterUpdate) RemovePrintJobs(p ...*PrintJob) *PrinterUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePrintJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrinterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrinterUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrinterUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrinterUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PrinterUpdate) check() error {
	if v, ok := pu.mutation.PrintSize(); ok {
		if err := printer.PrintSizeValidator(v); err != nil {
			return &ValidationError{Name: "print_size", err: fmt.Errorf(`ent: validator failed for field "Printer.print_size": %w`, err)}
		}
	}
	if pu.mutation.TenantCleared() && len(pu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Printer.tenant"`)
	}
	if pu.mutation.WorkstationCleared() && len(pu.mutation.WorkstationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Printer.workstation"`)
	}
	return nil
}

func (pu *PrinterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(printer.Table, printer.Columns, sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DeviceID(); ok {
		_spec.SetField(printer.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(printer.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.LabelZpl(); ok {
		_spec.SetField(printer.FieldLabelZpl, field.TypeBool, value)
	}
	if value, ok := pu.mutation.LabelPdf(); ok {
		_spec.SetField(printer.FieldLabelPdf, field.TypeBool, value)
	}
	if value, ok := pu.mutation.LabelPng(); ok {
		_spec.SetField(printer.FieldLabelPng, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Document(); ok {
		_spec.SetField(printer.FieldDocument, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Rotate180(); ok {
		_spec.SetField(printer.FieldRotate180, field.TypeBool, value)
	}
	if value, ok := pu.mutation.UseShell(); ok {
		_spec.SetField(printer.FieldUseShell, field.TypeBool, value)
	}
	if value, ok := pu.mutation.PrintSize(); ok {
		_spec.SetField(printer.FieldPrintSize, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.LastPing(); ok {
		_spec.SetField(printer.FieldLastPing, field.TypeTime, value)
	}
	if pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printer.TenantTable,
			Columns: []string{printer.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printer.TenantTable,
			Columns: []string{printer.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WorkstationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.WorkstationTable,
			Columns: []string{printer.WorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WorkstationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.WorkstationTable,
			Columns: []string{printer.WorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PrintJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPrintJobsIDs(); len(nodes) > 0 && !pu.mutation.PrintJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PrintJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrinterUpdateOne is the builder for updating a single Printer entity.
type PrinterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrinterMutation
}

// SetTenantID sets the "tenant_id" field.
func (puo *PrinterUpdateOne) SetTenantID(pu pulid.ID) *PrinterUpdateOne {
	puo.mutation.SetTenantID(pu)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableTenantID(pu *pulid.ID) *PrinterUpdateOne {
	if pu != nil {
		puo.SetTenantID(*pu)
	}
	return puo
}

// SetDeviceID sets the "device_id" field.
func (puo *PrinterUpdateOne) SetDeviceID(pu pulid.ID) *PrinterUpdateOne {
	puo.mutation.SetDeviceID(pu)
	return puo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableDeviceID(pu *pulid.ID) *PrinterUpdateOne {
	if pu != nil {
		puo.SetDeviceID(*pu)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PrinterUpdateOne) SetName(s string) *PrinterUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableName(s *string) *PrinterUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetLabelZpl sets the "label_zpl" field.
func (puo *PrinterUpdateOne) SetLabelZpl(b bool) *PrinterUpdateOne {
	puo.mutation.SetLabelZpl(b)
	return puo
}

// SetNillableLabelZpl sets the "label_zpl" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableLabelZpl(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetLabelZpl(*b)
	}
	return puo
}

// SetLabelPdf sets the "label_pdf" field.
func (puo *PrinterUpdateOne) SetLabelPdf(b bool) *PrinterUpdateOne {
	puo.mutation.SetLabelPdf(b)
	return puo
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableLabelPdf(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetLabelPdf(*b)
	}
	return puo
}

// SetLabelPng sets the "label_png" field.
func (puo *PrinterUpdateOne) SetLabelPng(b bool) *PrinterUpdateOne {
	puo.mutation.SetLabelPng(b)
	return puo
}

// SetNillableLabelPng sets the "label_png" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableLabelPng(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetLabelPng(*b)
	}
	return puo
}

// SetDocument sets the "document" field.
func (puo *PrinterUpdateOne) SetDocument(b bool) *PrinterUpdateOne {
	puo.mutation.SetDocument(b)
	return puo
}

// SetNillableDocument sets the "document" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableDocument(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetDocument(*b)
	}
	return puo
}

// SetRotate180 sets the "rotate_180" field.
func (puo *PrinterUpdateOne) SetRotate180(b bool) *PrinterUpdateOne {
	puo.mutation.SetRotate180(b)
	return puo
}

// SetNillableRotate180 sets the "rotate_180" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableRotate180(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetRotate180(*b)
	}
	return puo
}

// SetUseShell sets the "use_shell" field.
func (puo *PrinterUpdateOne) SetUseShell(b bool) *PrinterUpdateOne {
	puo.mutation.SetUseShell(b)
	return puo
}

// SetNillableUseShell sets the "use_shell" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableUseShell(b *bool) *PrinterUpdateOne {
	if b != nil {
		puo.SetUseShell(*b)
	}
	return puo
}

// SetPrintSize sets the "print_size" field.
func (puo *PrinterUpdateOne) SetPrintSize(ps printer.PrintSize) *PrinterUpdateOne {
	puo.mutation.SetPrintSize(ps)
	return puo
}

// SetNillablePrintSize sets the "print_size" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillablePrintSize(ps *printer.PrintSize) *PrinterUpdateOne {
	if ps != nil {
		puo.SetPrintSize(*ps)
	}
	return puo
}

// SetLastPing sets the "last_ping" field.
func (puo *PrinterUpdateOne) SetLastPing(t time.Time) *PrinterUpdateOne {
	puo.mutation.SetLastPing(t)
	return puo
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (puo *PrinterUpdateOne) SetNillableLastPing(t *time.Time) *PrinterUpdateOne {
	if t != nil {
		puo.SetLastPing(*t)
	}
	return puo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puo *PrinterUpdateOne) SetTenant(t *Tenant) *PrinterUpdateOne {
	return puo.SetTenantID(t.ID)
}

// SetWorkstationID sets the "workstation" edge to the Workstation entity by ID.
func (puo *PrinterUpdateOne) SetWorkstationID(id pulid.ID) *PrinterUpdateOne {
	puo.mutation.SetWorkstationID(id)
	return puo
}

// SetWorkstation sets the "workstation" edge to the Workstation entity.
func (puo *PrinterUpdateOne) SetWorkstation(w *Workstation) *PrinterUpdateOne {
	return puo.SetWorkstationID(w.ID)
}

// AddPrintJobIDs adds the "print_jobs" edge to the PrintJob entity by IDs.
func (puo *PrinterUpdateOne) AddPrintJobIDs(ids ...pulid.ID) *PrinterUpdateOne {
	puo.mutation.AddPrintJobIDs(ids...)
	return puo
}

// AddPrintJobs adds the "print_jobs" edges to the PrintJob entity.
func (puo *PrinterUpdateOne) AddPrintJobs(p ...*PrintJob) *PrinterUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPrintJobIDs(ids...)
}

// Mutation returns the PrinterMutation object of the builder.
func (puo *PrinterUpdateOne) Mutation() *PrinterMutation {
	return puo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puo *PrinterUpdateOne) ClearTenant() *PrinterUpdateOne {
	puo.mutation.ClearTenant()
	return puo
}

// ClearWorkstation clears the "workstation" edge to the Workstation entity.
func (puo *PrinterUpdateOne) ClearWorkstation() *PrinterUpdateOne {
	puo.mutation.ClearWorkstation()
	return puo
}

// ClearPrintJobs clears all "print_jobs" edges to the PrintJob entity.
func (puo *PrinterUpdateOne) ClearPrintJobs() *PrinterUpdateOne {
	puo.mutation.ClearPrintJobs()
	return puo
}

// RemovePrintJobIDs removes the "print_jobs" edge to PrintJob entities by IDs.
func (puo *PrinterUpdateOne) RemovePrintJobIDs(ids ...pulid.ID) *PrinterUpdateOne {
	puo.mutation.RemovePrintJobIDs(ids...)
	return puo
}

// RemovePrintJobs removes "print_jobs" edges to PrintJob entities.
func (puo *PrinterUpdateOne) RemovePrintJobs(p ...*PrintJob) *PrinterUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePrintJobIDs(ids...)
}

// Where appends a list predicates to the PrinterUpdate builder.
func (puo *PrinterUpdateOne) Where(ps ...predicate.Printer) *PrinterUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrinterUpdateOne) Select(field string, fields ...string) *PrinterUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Printer entity.
func (puo *PrinterUpdateOne) Save(ctx context.Context) (*Printer, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrinterUpdateOne) SaveX(ctx context.Context) *Printer {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrinterUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrinterUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PrinterUpdateOne) check() error {
	if v, ok := puo.mutation.PrintSize(); ok {
		if err := printer.PrintSizeValidator(v); err != nil {
			return &ValidationError{Name: "print_size", err: fmt.Errorf(`ent: validator failed for field "Printer.print_size": %w`, err)}
		}
	}
	if puo.mutation.TenantCleared() && len(puo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Printer.tenant"`)
	}
	if puo.mutation.WorkstationCleared() && len(puo.mutation.WorkstationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Printer.workstation"`)
	}
	return nil
}

func (puo *PrinterUpdateOne) sqlSave(ctx context.Context) (_node *Printer, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(printer.Table, printer.Columns, sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Printer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, printer.FieldID)
		for _, f := range fields {
			if !printer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != printer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DeviceID(); ok {
		_spec.SetField(printer.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(printer.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.LabelZpl(); ok {
		_spec.SetField(printer.FieldLabelZpl, field.TypeBool, value)
	}
	if value, ok := puo.mutation.LabelPdf(); ok {
		_spec.SetField(printer.FieldLabelPdf, field.TypeBool, value)
	}
	if value, ok := puo.mutation.LabelPng(); ok {
		_spec.SetField(printer.FieldLabelPng, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Document(); ok {
		_spec.SetField(printer.FieldDocument, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Rotate180(); ok {
		_spec.SetField(printer.FieldRotate180, field.TypeBool, value)
	}
	if value, ok := puo.mutation.UseShell(); ok {
		_spec.SetField(printer.FieldUseShell, field.TypeBool, value)
	}
	if value, ok := puo.mutation.PrintSize(); ok {
		_spec.SetField(printer.FieldPrintSize, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.LastPing(); ok {
		_spec.SetField(printer.FieldLastPing, field.TypeTime, value)
	}
	if puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printer.TenantTable,
			Columns: []string{printer.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printer.TenantTable,
			Columns: []string{printer.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WorkstationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.WorkstationTable,
			Columns: []string{printer.WorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WorkstationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.WorkstationTable,
			Columns: []string{printer.WorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PrintJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPrintJobsIDs(); len(nodes) > 0 && !puo.mutation.PrintJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PrintJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Printer{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{printer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
