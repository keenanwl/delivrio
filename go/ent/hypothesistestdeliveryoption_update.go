// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionUpdate is the builder for updating HypothesisTestDeliveryOption entities.
type HypothesisTestDeliveryOptionUpdate struct {
	config
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionMutation
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionUpdate builder.
func (htdou *HypothesisTestDeliveryOptionUpdate) Where(ps ...predicate.HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.Where(ps...)
	return htdou
}

// SetTenantID sets the "tenant_id" field.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.SetTenantID(pu)
	return htdou
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetNillableTenantID(pu *pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	if pu != nil {
		htdou.SetTenantID(*pu)
	}
	return htdou
}

// SetRandomizeWithinGroupSort sets the "randomize_within_group_sort" field.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetRandomizeWithinGroupSort(b bool) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.SetRandomizeWithinGroupSort(b)
	return htdou
}

// SetNillableRandomizeWithinGroupSort sets the "randomize_within_group_sort" field if the given value is not nil.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetNillableRandomizeWithinGroupSort(b *bool) *HypothesisTestDeliveryOptionUpdate {
	if b != nil {
		htdou.SetRandomizeWithinGroupSort(*b)
	}
	return htdou
}

// SetByIntervalRotation sets the "by_interval_rotation" field.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetByIntervalRotation(b bool) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.SetByIntervalRotation(b)
	return htdou
}

// SetNillableByIntervalRotation sets the "by_interval_rotation" field if the given value is not nil.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetNillableByIntervalRotation(b *bool) *HypothesisTestDeliveryOptionUpdate {
	if b != nil {
		htdou.SetByIntervalRotation(*b)
	}
	return htdou
}

// SetRotationIntervalHours sets the "rotation_interval_hours" field.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetRotationIntervalHours(i int) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.ResetRotationIntervalHours()
	htdou.mutation.SetRotationIntervalHours(i)
	return htdou
}

// SetNillableRotationIntervalHours sets the "rotation_interval_hours" field if the given value is not nil.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetNillableRotationIntervalHours(i *int) *HypothesisTestDeliveryOptionUpdate {
	if i != nil {
		htdou.SetRotationIntervalHours(*i)
	}
	return htdou
}

// AddRotationIntervalHours adds i to the "rotation_interval_hours" field.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddRotationIntervalHours(i int) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.AddRotationIntervalHours(i)
	return htdou
}

// SetByOrder sets the "by_order" field.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetByOrder(b bool) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.SetByOrder(b)
	return htdou
}

// SetNillableByOrder sets the "by_order" field if the given value is not nil.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetNillableByOrder(b *bool) *HypothesisTestDeliveryOptionUpdate {
	if b != nil {
		htdou.SetByOrder(*b)
	}
	return htdou
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionUpdate {
	return htdou.SetTenantID(t.ID)
}

// SetHypothesisTestID sets the "hypothesis_test" edge to the HypothesisTest entity by ID.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetHypothesisTestID(id pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.SetHypothesisTestID(id)
	return htdou
}

// SetHypothesisTest sets the "hypothesis_test" edge to the HypothesisTest entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) SetHypothesisTest(h *HypothesisTest) *HypothesisTestDeliveryOptionUpdate {
	return htdou.SetHypothesisTestID(h.ID)
}

// AddHypothesisTestDeliveryOptionRequestIDs adds the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by IDs.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddHypothesisTestDeliveryOptionRequestIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.AddHypothesisTestDeliveryOptionRequestIDs(ids...)
	return htdou
}

// AddHypothesisTestDeliveryOptionRequest adds the "hypothesis_test_delivery_option_request" edges to the HypothesisTestDeliveryOptionRequest entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddHypothesisTestDeliveryOptionRequest(h ...*HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdou.AddHypothesisTestDeliveryOptionRequestIDs(ids...)
}

// AddDeliveryOptionGroupOneIDs adds the "delivery_option_group_one" edge to the DeliveryOption entity by IDs.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddDeliveryOptionGroupOneIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.AddDeliveryOptionGroupOneIDs(ids...)
	return htdou
}

// AddDeliveryOptionGroupOne adds the "delivery_option_group_one" edges to the DeliveryOption entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddDeliveryOptionGroupOne(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdou.AddDeliveryOptionGroupOneIDs(ids...)
}

// AddDeliveryOptionGroupTwoIDs adds the "delivery_option_group_two" edge to the DeliveryOption entity by IDs.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.AddDeliveryOptionGroupTwoIDs(ids...)
	return htdou
}

// AddDeliveryOptionGroupTwo adds the "delivery_option_group_two" edges to the DeliveryOption entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) AddDeliveryOptionGroupTwo(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdou.AddDeliveryOptionGroupTwoIDs(ids...)
}

// Mutation returns the HypothesisTestDeliveryOptionMutation object of the builder.
func (htdou *HypothesisTestDeliveryOptionUpdate) Mutation() *HypothesisTestDeliveryOptionMutation {
	return htdou.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) ClearTenant() *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.ClearTenant()
	return htdou
}

// ClearHypothesisTest clears the "hypothesis_test" edge to the HypothesisTest entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) ClearHypothesisTest() *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.ClearHypothesisTest()
	return htdou
}

// ClearHypothesisTestDeliveryOptionRequest clears all "hypothesis_test_delivery_option_request" edges to the HypothesisTestDeliveryOptionRequest entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) ClearHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.ClearHypothesisTestDeliveryOptionRequest()
	return htdou
}

// RemoveHypothesisTestDeliveryOptionRequestIDs removes the "hypothesis_test_delivery_option_request" edge to HypothesisTestDeliveryOptionRequest entities by IDs.
func (htdou *HypothesisTestDeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionRequestIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.RemoveHypothesisTestDeliveryOptionRequestIDs(ids...)
	return htdou
}

// RemoveHypothesisTestDeliveryOptionRequest removes "hypothesis_test_delivery_option_request" edges to HypothesisTestDeliveryOptionRequest entities.
func (htdou *HypothesisTestDeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionRequest(h ...*HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdou.RemoveHypothesisTestDeliveryOptionRequestIDs(ids...)
}

// ClearDeliveryOptionGroupOne clears all "delivery_option_group_one" edges to the DeliveryOption entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) ClearDeliveryOptionGroupOne() *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.ClearDeliveryOptionGroupOne()
	return htdou
}

// RemoveDeliveryOptionGroupOneIDs removes the "delivery_option_group_one" edge to DeliveryOption entities by IDs.
func (htdou *HypothesisTestDeliveryOptionUpdate) RemoveDeliveryOptionGroupOneIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.RemoveDeliveryOptionGroupOneIDs(ids...)
	return htdou
}

// RemoveDeliveryOptionGroupOne removes "delivery_option_group_one" edges to DeliveryOption entities.
func (htdou *HypothesisTestDeliveryOptionUpdate) RemoveDeliveryOptionGroupOne(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdou.RemoveDeliveryOptionGroupOneIDs(ids...)
}

// ClearDeliveryOptionGroupTwo clears all "delivery_option_group_two" edges to the DeliveryOption entity.
func (htdou *HypothesisTestDeliveryOptionUpdate) ClearDeliveryOptionGroupTwo() *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.ClearDeliveryOptionGroupTwo()
	return htdou
}

// RemoveDeliveryOptionGroupTwoIDs removes the "delivery_option_group_two" edge to DeliveryOption entities by IDs.
func (htdou *HypothesisTestDeliveryOptionUpdate) RemoveDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdate {
	htdou.mutation.RemoveDeliveryOptionGroupTwoIDs(ids...)
	return htdou
}

// RemoveDeliveryOptionGroupTwo removes "delivery_option_group_two" edges to DeliveryOption entities.
func (htdou *HypothesisTestDeliveryOptionUpdate) RemoveDeliveryOptionGroupTwo(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdou.RemoveDeliveryOptionGroupTwoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htdou *HypothesisTestDeliveryOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, htdou.sqlSave, htdou.mutation, htdou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htdou *HypothesisTestDeliveryOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := htdou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htdou *HypothesisTestDeliveryOptionUpdate) Exec(ctx context.Context) error {
	_, err := htdou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdou *HypothesisTestDeliveryOptionUpdate) ExecX(ctx context.Context) {
	if err := htdou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htdou *HypothesisTestDeliveryOptionUpdate) check() error {
	if htdou.mutation.TenantCleared() && len(htdou.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOption.tenant"`)
	}
	if htdou.mutation.HypothesisTestCleared() && len(htdou.mutation.HypothesisTestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOption.hypothesis_test"`)
	}
	return nil
}

func (htdou *HypothesisTestDeliveryOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htdou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString))
	if ps := htdou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htdou.mutation.RandomizeWithinGroupSort(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort, field.TypeBool, value)
	}
	if value, ok := htdou.mutation.ByIntervalRotation(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldByIntervalRotation, field.TypeBool, value)
	}
	if value, ok := htdou.mutation.RotationIntervalHours(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldRotationIntervalHours, field.TypeInt, value)
	}
	if value, ok := htdou.mutation.AddedRotationIntervalHours(); ok {
		_spec.AddField(hypothesistestdeliveryoption.FieldRotationIntervalHours, field.TypeInt, value)
	}
	if value, ok := htdou.mutation.ByOrder(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldByOrder, field.TypeBool, value)
	}
	if htdou.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.TenantTable,
			Columns: []string{hypothesistestdeliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.TenantTable,
			Columns: []string{hypothesistestdeliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdou.mutation.HypothesisTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.HypothesisTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdou.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.RemovedHypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 && !htdou.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdou.mutation.DeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.RemovedDeliveryOptionGroupOneIDs(); len(nodes) > 0 && !htdou.mutation.DeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.DeliveryOptionGroupOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdou.mutation.DeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.RemovedDeliveryOptionGroupTwoIDs(); len(nodes) > 0 && !htdou.mutation.DeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdou.mutation.DeliveryOptionGroupTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htdou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistestdeliveryoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htdou.mutation.done = true
	return n, nil
}

// HypothesisTestDeliveryOptionUpdateOne is the builder for updating a single HypothesisTestDeliveryOption entity.
type HypothesisTestDeliveryOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionMutation
}

// SetTenantID sets the "tenant_id" field.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.SetTenantID(pu)
	return htdouo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetNillableTenantID(pu *pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	if pu != nil {
		htdouo.SetTenantID(*pu)
	}
	return htdouo
}

// SetRandomizeWithinGroupSort sets the "randomize_within_group_sort" field.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetRandomizeWithinGroupSort(b bool) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.SetRandomizeWithinGroupSort(b)
	return htdouo
}

// SetNillableRandomizeWithinGroupSort sets the "randomize_within_group_sort" field if the given value is not nil.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetNillableRandomizeWithinGroupSort(b *bool) *HypothesisTestDeliveryOptionUpdateOne {
	if b != nil {
		htdouo.SetRandomizeWithinGroupSort(*b)
	}
	return htdouo
}

// SetByIntervalRotation sets the "by_interval_rotation" field.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetByIntervalRotation(b bool) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.SetByIntervalRotation(b)
	return htdouo
}

// SetNillableByIntervalRotation sets the "by_interval_rotation" field if the given value is not nil.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetNillableByIntervalRotation(b *bool) *HypothesisTestDeliveryOptionUpdateOne {
	if b != nil {
		htdouo.SetByIntervalRotation(*b)
	}
	return htdouo
}

// SetRotationIntervalHours sets the "rotation_interval_hours" field.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetRotationIntervalHours(i int) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.ResetRotationIntervalHours()
	htdouo.mutation.SetRotationIntervalHours(i)
	return htdouo
}

// SetNillableRotationIntervalHours sets the "rotation_interval_hours" field if the given value is not nil.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetNillableRotationIntervalHours(i *int) *HypothesisTestDeliveryOptionUpdateOne {
	if i != nil {
		htdouo.SetRotationIntervalHours(*i)
	}
	return htdouo
}

// AddRotationIntervalHours adds i to the "rotation_interval_hours" field.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddRotationIntervalHours(i int) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.AddRotationIntervalHours(i)
	return htdouo
}

// SetByOrder sets the "by_order" field.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetByOrder(b bool) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.SetByOrder(b)
	return htdouo
}

// SetNillableByOrder sets the "by_order" field if the given value is not nil.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetNillableByOrder(b *bool) *HypothesisTestDeliveryOptionUpdateOne {
	if b != nil {
		htdouo.SetByOrder(*b)
	}
	return htdouo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionUpdateOne {
	return htdouo.SetTenantID(t.ID)
}

// SetHypothesisTestID sets the "hypothesis_test" edge to the HypothesisTest entity by ID.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetHypothesisTestID(id pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.SetHypothesisTestID(id)
	return htdouo
}

// SetHypothesisTest sets the "hypothesis_test" edge to the HypothesisTest entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SetHypothesisTest(h *HypothesisTest) *HypothesisTestDeliveryOptionUpdateOne {
	return htdouo.SetHypothesisTestID(h.ID)
}

// AddHypothesisTestDeliveryOptionRequestIDs adds the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by IDs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionRequestIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.AddHypothesisTestDeliveryOptionRequestIDs(ids...)
	return htdouo
}

// AddHypothesisTestDeliveryOptionRequest adds the "hypothesis_test_delivery_option_request" edges to the HypothesisTestDeliveryOptionRequest entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionRequest(h ...*HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdouo.AddHypothesisTestDeliveryOptionRequestIDs(ids...)
}

// AddDeliveryOptionGroupOneIDs adds the "delivery_option_group_one" edge to the DeliveryOption entity by IDs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddDeliveryOptionGroupOneIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.AddDeliveryOptionGroupOneIDs(ids...)
	return htdouo
}

// AddDeliveryOptionGroupOne adds the "delivery_option_group_one" edges to the DeliveryOption entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddDeliveryOptionGroupOne(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdouo.AddDeliveryOptionGroupOneIDs(ids...)
}

// AddDeliveryOptionGroupTwoIDs adds the "delivery_option_group_two" edge to the DeliveryOption entity by IDs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.AddDeliveryOptionGroupTwoIDs(ids...)
	return htdouo
}

// AddDeliveryOptionGroupTwo adds the "delivery_option_group_two" edges to the DeliveryOption entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) AddDeliveryOptionGroupTwo(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdouo.AddDeliveryOptionGroupTwoIDs(ids...)
}

// Mutation returns the HypothesisTestDeliveryOptionMutation object of the builder.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) Mutation() *HypothesisTestDeliveryOptionMutation {
	return htdouo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) ClearTenant() *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.ClearTenant()
	return htdouo
}

// ClearHypothesisTest clears the "hypothesis_test" edge to the HypothesisTest entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) ClearHypothesisTest() *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.ClearHypothesisTest()
	return htdouo
}

// ClearHypothesisTestDeliveryOptionRequest clears all "hypothesis_test_delivery_option_request" edges to the HypothesisTestDeliveryOptionRequest entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) ClearHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.ClearHypothesisTestDeliveryOptionRequest()
	return htdouo
}

// RemoveHypothesisTestDeliveryOptionRequestIDs removes the "hypothesis_test_delivery_option_request" edge to HypothesisTestDeliveryOptionRequest entities by IDs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionRequestIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.RemoveHypothesisTestDeliveryOptionRequestIDs(ids...)
	return htdouo
}

// RemoveHypothesisTestDeliveryOptionRequest removes "hypothesis_test_delivery_option_request" edges to HypothesisTestDeliveryOptionRequest entities.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionRequest(h ...*HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdouo.RemoveHypothesisTestDeliveryOptionRequestIDs(ids...)
}

// ClearDeliveryOptionGroupOne clears all "delivery_option_group_one" edges to the DeliveryOption entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) ClearDeliveryOptionGroupOne() *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.ClearDeliveryOptionGroupOne()
	return htdouo
}

// RemoveDeliveryOptionGroupOneIDs removes the "delivery_option_group_one" edge to DeliveryOption entities by IDs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) RemoveDeliveryOptionGroupOneIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.RemoveDeliveryOptionGroupOneIDs(ids...)
	return htdouo
}

// RemoveDeliveryOptionGroupOne removes "delivery_option_group_one" edges to DeliveryOption entities.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) RemoveDeliveryOptionGroupOne(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdouo.RemoveDeliveryOptionGroupOneIDs(ids...)
}

// ClearDeliveryOptionGroupTwo clears all "delivery_option_group_two" edges to the DeliveryOption entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) ClearDeliveryOptionGroupTwo() *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.ClearDeliveryOptionGroupTwo()
	return htdouo
}

// RemoveDeliveryOptionGroupTwoIDs removes the "delivery_option_group_two" edge to DeliveryOption entities by IDs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) RemoveDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.RemoveDeliveryOptionGroupTwoIDs(ids...)
	return htdouo
}

// RemoveDeliveryOptionGroupTwo removes "delivery_option_group_two" edges to DeliveryOption entities.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) RemoveDeliveryOptionGroupTwo(d ...*DeliveryOption) *HypothesisTestDeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return htdouo.RemoveDeliveryOptionGroupTwoIDs(ids...)
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionUpdate builder.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) Where(ps ...predicate.HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.mutation.Where(ps...)
	return htdouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) Select(field string, fields ...string) *HypothesisTestDeliveryOptionUpdateOne {
	htdouo.fields = append([]string{field}, fields...)
	return htdouo
}

// Save executes the query and returns the updated HypothesisTestDeliveryOption entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) Save(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	return withHooks(ctx, htdouo.sqlSave, htdouo.mutation, htdouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) SaveX(ctx context.Context) *HypothesisTestDeliveryOption {
	node, err := htdouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := htdouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) ExecX(ctx context.Context) {
	if err := htdouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htdouo *HypothesisTestDeliveryOptionUpdateOne) check() error {
	if htdouo.mutation.TenantCleared() && len(htdouo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOption.tenant"`)
	}
	if htdouo.mutation.HypothesisTestCleared() && len(htdouo.mutation.HypothesisTestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOption.hypothesis_test"`)
	}
	return nil
}

func (htdouo *HypothesisTestDeliveryOptionUpdateOne) sqlSave(ctx context.Context) (_node *HypothesisTestDeliveryOption, err error) {
	if err := htdouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString))
	id, ok := htdouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HypothesisTestDeliveryOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htdouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoption.FieldID)
		for _, f := range fields {
			if !hypothesistestdeliveryoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hypothesistestdeliveryoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htdouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htdouo.mutation.RandomizeWithinGroupSort(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort, field.TypeBool, value)
	}
	if value, ok := htdouo.mutation.ByIntervalRotation(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldByIntervalRotation, field.TypeBool, value)
	}
	if value, ok := htdouo.mutation.RotationIntervalHours(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldRotationIntervalHours, field.TypeInt, value)
	}
	if value, ok := htdouo.mutation.AddedRotationIntervalHours(); ok {
		_spec.AddField(hypothesistestdeliveryoption.FieldRotationIntervalHours, field.TypeInt, value)
	}
	if value, ok := htdouo.mutation.ByOrder(); ok {
		_spec.SetField(hypothesistestdeliveryoption.FieldByOrder, field.TypeBool, value)
	}
	if htdouo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.TenantTable,
			Columns: []string{hypothesistestdeliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.TenantTable,
			Columns: []string{hypothesistestdeliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdouo.mutation.HypothesisTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.HypothesisTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdouo.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.RemovedHypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 && !htdouo.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdouo.mutation.DeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.RemovedDeliveryOptionGroupOneIDs(); len(nodes) > 0 && !htdouo.mutation.DeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.DeliveryOptionGroupOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdouo.mutation.DeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.RemovedDeliveryOptionGroupTwoIDs(); len(nodes) > 0 && !htdouo.mutation.DeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdouo.mutation.DeliveryOptionGroupTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HypothesisTestDeliveryOption{config: htdouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htdouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistestdeliveryoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htdouo.mutation.done = true
	return _node, nil
}
