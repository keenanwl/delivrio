// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressGlobalUpdate is the builder for updating AddressGlobal entities.
type AddressGlobalUpdate struct {
	config
	hooks    []Hook
	mutation *AddressGlobalMutation
}

// Where appends a list predicates to the AddressGlobalUpdate builder.
func (agu *AddressGlobalUpdate) Where(ps ...predicate.AddressGlobal) *AddressGlobalUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetUniquenessID sets the "uniqueness_id" field.
func (agu *AddressGlobalUpdate) SetUniquenessID(s string) *AddressGlobalUpdate {
	agu.mutation.SetUniquenessID(s)
	return agu
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableUniquenessID(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetUniquenessID(*s)
	}
	return agu
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (agu *AddressGlobalUpdate) ClearUniquenessID() *AddressGlobalUpdate {
	agu.mutation.ClearUniquenessID()
	return agu
}

// SetCompany sets the "company" field.
func (agu *AddressGlobalUpdate) SetCompany(s string) *AddressGlobalUpdate {
	agu.mutation.SetCompany(s)
	return agu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableCompany(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetCompany(*s)
	}
	return agu
}

// ClearCompany clears the value of the "company" field.
func (agu *AddressGlobalUpdate) ClearCompany() *AddressGlobalUpdate {
	agu.mutation.ClearCompany()
	return agu
}

// SetAddressOne sets the "address_one" field.
func (agu *AddressGlobalUpdate) SetAddressOne(s string) *AddressGlobalUpdate {
	agu.mutation.SetAddressOne(s)
	return agu
}

// SetNillableAddressOne sets the "address_one" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableAddressOne(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetAddressOne(*s)
	}
	return agu
}

// SetAddressTwo sets the "address_two" field.
func (agu *AddressGlobalUpdate) SetAddressTwo(s string) *AddressGlobalUpdate {
	agu.mutation.SetAddressTwo(s)
	return agu
}

// SetNillableAddressTwo sets the "address_two" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableAddressTwo(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetAddressTwo(*s)
	}
	return agu
}

// ClearAddressTwo clears the value of the "address_two" field.
func (agu *AddressGlobalUpdate) ClearAddressTwo() *AddressGlobalUpdate {
	agu.mutation.ClearAddressTwo()
	return agu
}

// SetCity sets the "city" field.
func (agu *AddressGlobalUpdate) SetCity(s string) *AddressGlobalUpdate {
	agu.mutation.SetCity(s)
	return agu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableCity(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetCity(*s)
	}
	return agu
}

// SetState sets the "state" field.
func (agu *AddressGlobalUpdate) SetState(s string) *AddressGlobalUpdate {
	agu.mutation.SetState(s)
	return agu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableState(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetState(*s)
	}
	return agu
}

// ClearState clears the value of the "state" field.
func (agu *AddressGlobalUpdate) ClearState() *AddressGlobalUpdate {
	agu.mutation.ClearState()
	return agu
}

// SetZip sets the "zip" field.
func (agu *AddressGlobalUpdate) SetZip(s string) *AddressGlobalUpdate {
	agu.mutation.SetZip(s)
	return agu
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableZip(s *string) *AddressGlobalUpdate {
	if s != nil {
		agu.SetZip(*s)
	}
	return agu
}

// SetLatitude sets the "latitude" field.
func (agu *AddressGlobalUpdate) SetLatitude(f float64) *AddressGlobalUpdate {
	agu.mutation.ResetLatitude()
	agu.mutation.SetLatitude(f)
	return agu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableLatitude(f *float64) *AddressGlobalUpdate {
	if f != nil {
		agu.SetLatitude(*f)
	}
	return agu
}

// AddLatitude adds f to the "latitude" field.
func (agu *AddressGlobalUpdate) AddLatitude(f float64) *AddressGlobalUpdate {
	agu.mutation.AddLatitude(f)
	return agu
}

// SetLongitude sets the "longitude" field.
func (agu *AddressGlobalUpdate) SetLongitude(f float64) *AddressGlobalUpdate {
	agu.mutation.ResetLongitude()
	agu.mutation.SetLongitude(f)
	return agu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableLongitude(f *float64) *AddressGlobalUpdate {
	if f != nil {
		agu.SetLongitude(*f)
	}
	return agu
}

// AddLongitude adds f to the "longitude" field.
func (agu *AddressGlobalUpdate) AddLongitude(f float64) *AddressGlobalUpdate {
	agu.mutation.AddLongitude(f)
	return agu
}

// SetParcelShopPostNordDeliveryID sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity by ID.
func (agu *AddressGlobalUpdate) SetParcelShopPostNordDeliveryID(id pulid.ID) *AddressGlobalUpdate {
	agu.mutation.SetParcelShopPostNordDeliveryID(id)
	return agu
}

// SetNillableParcelShopPostNordDeliveryID sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity by ID if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableParcelShopPostNordDeliveryID(id *pulid.ID) *AddressGlobalUpdate {
	if id != nil {
		agu = agu.SetParcelShopPostNordDeliveryID(*id)
	}
	return agu
}

// SetParcelShopPostNordDelivery sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity.
func (agu *AddressGlobalUpdate) SetParcelShopPostNordDelivery(p *ParcelShopPostNord) *AddressGlobalUpdate {
	return agu.SetParcelShopPostNordDeliveryID(p.ID)
}

// SetParcelShopBringDeliveryID sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity by ID.
func (agu *AddressGlobalUpdate) SetParcelShopBringDeliveryID(id pulid.ID) *AddressGlobalUpdate {
	agu.mutation.SetParcelShopBringDeliveryID(id)
	return agu
}

// SetNillableParcelShopBringDeliveryID sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity by ID if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableParcelShopBringDeliveryID(id *pulid.ID) *AddressGlobalUpdate {
	if id != nil {
		agu = agu.SetParcelShopBringDeliveryID(*id)
	}
	return agu
}

// SetParcelShopBringDelivery sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity.
func (agu *AddressGlobalUpdate) SetParcelShopBringDelivery(p *ParcelShopBring) *AddressGlobalUpdate {
	return agu.SetParcelShopBringDeliveryID(p.ID)
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (agu *AddressGlobalUpdate) SetParcelShopID(id pulid.ID) *AddressGlobalUpdate {
	agu.mutation.SetParcelShopID(id)
	return agu
}

// SetNillableParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID if the given value is not nil.
func (agu *AddressGlobalUpdate) SetNillableParcelShopID(id *pulid.ID) *AddressGlobalUpdate {
	if id != nil {
		agu = agu.SetParcelShopID(*id)
	}
	return agu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (agu *AddressGlobalUpdate) SetParcelShop(p *ParcelShop) *AddressGlobalUpdate {
	return agu.SetParcelShopID(p.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (agu *AddressGlobalUpdate) SetCountryID(id pulid.ID) *AddressGlobalUpdate {
	agu.mutation.SetCountryID(id)
	return agu
}

// SetCountry sets the "country" edge to the Country entity.
func (agu *AddressGlobalUpdate) SetCountry(c *Country) *AddressGlobalUpdate {
	return agu.SetCountryID(c.ID)
}

// Mutation returns the AddressGlobalMutation object of the builder.
func (agu *AddressGlobalUpdate) Mutation() *AddressGlobalMutation {
	return agu.mutation
}

// ClearParcelShopPostNordDelivery clears the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity.
func (agu *AddressGlobalUpdate) ClearParcelShopPostNordDelivery() *AddressGlobalUpdate {
	agu.mutation.ClearParcelShopPostNordDelivery()
	return agu
}

// ClearParcelShopBringDelivery clears the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity.
func (agu *AddressGlobalUpdate) ClearParcelShopBringDelivery() *AddressGlobalUpdate {
	agu.mutation.ClearParcelShopBringDelivery()
	return agu
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (agu *AddressGlobalUpdate) ClearParcelShop() *AddressGlobalUpdate {
	agu.mutation.ClearParcelShop()
	return agu
}

// ClearCountry clears the "country" edge to the Country entity.
func (agu *AddressGlobalUpdate) ClearCountry() *AddressGlobalUpdate {
	agu.mutation.ClearCountry()
	return agu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AddressGlobalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agu.sqlSave, agu.mutation, agu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AddressGlobalUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AddressGlobalUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AddressGlobalUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (agu *AddressGlobalUpdate) check() error {
	if agu.mutation.CountryCleared() && len(agu.mutation.CountryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AddressGlobal.country"`)
	}
	return nil
}

func (agu *AddressGlobalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := agu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(addressglobal.Table, addressglobal.Columns, sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString))
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.UniquenessID(); ok {
		_spec.SetField(addressglobal.FieldUniquenessID, field.TypeString, value)
	}
	if agu.mutation.UniquenessIDCleared() {
		_spec.ClearField(addressglobal.FieldUniquenessID, field.TypeString)
	}
	if value, ok := agu.mutation.Company(); ok {
		_spec.SetField(addressglobal.FieldCompany, field.TypeString, value)
	}
	if agu.mutation.CompanyCleared() {
		_spec.ClearField(addressglobal.FieldCompany, field.TypeString)
	}
	if value, ok := agu.mutation.AddressOne(); ok {
		_spec.SetField(addressglobal.FieldAddressOne, field.TypeString, value)
	}
	if value, ok := agu.mutation.AddressTwo(); ok {
		_spec.SetField(addressglobal.FieldAddressTwo, field.TypeString, value)
	}
	if agu.mutation.AddressTwoCleared() {
		_spec.ClearField(addressglobal.FieldAddressTwo, field.TypeString)
	}
	if value, ok := agu.mutation.City(); ok {
		_spec.SetField(addressglobal.FieldCity, field.TypeString, value)
	}
	if value, ok := agu.mutation.State(); ok {
		_spec.SetField(addressglobal.FieldState, field.TypeString, value)
	}
	if agu.mutation.StateCleared() {
		_spec.ClearField(addressglobal.FieldState, field.TypeString)
	}
	if value, ok := agu.mutation.Zip(); ok {
		_spec.SetField(addressglobal.FieldZip, field.TypeString, value)
	}
	if value, ok := agu.mutation.Latitude(); ok {
		_spec.SetField(addressglobal.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := agu.mutation.AddedLatitude(); ok {
		_spec.AddField(addressglobal.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := agu.mutation.Longitude(); ok {
		_spec.SetField(addressglobal.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := agu.mutation.AddedLongitude(); ok {
		_spec.AddField(addressglobal.FieldLongitude, field.TypeFloat64, value)
	}
	if agu.mutation.ParcelShopPostNordDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopPostNordDeliveryTable,
			Columns: []string{addressglobal.ParcelShopPostNordDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.ParcelShopPostNordDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopPostNordDeliveryTable,
			Columns: []string{addressglobal.ParcelShopPostNordDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if agu.mutation.ParcelShopBringDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopBringDeliveryTable,
			Columns: []string{addressglobal.ParcelShopBringDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.ParcelShopBringDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopBringDeliveryTable,
			Columns: []string{addressglobal.ParcelShopBringDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if agu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopTable,
			Columns: []string{addressglobal.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopTable,
			Columns: []string{addressglobal.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if agu.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   addressglobal.CountryTable,
			Columns: []string{addressglobal.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   addressglobal.CountryTable,
			Columns: []string{addressglobal.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addressglobal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agu.mutation.done = true
	return n, nil
}

// AddressGlobalUpdateOne is the builder for updating a single AddressGlobal entity.
type AddressGlobalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressGlobalMutation
}

// SetUniquenessID sets the "uniqueness_id" field.
func (aguo *AddressGlobalUpdateOne) SetUniquenessID(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetUniquenessID(s)
	return aguo
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableUniquenessID(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetUniquenessID(*s)
	}
	return aguo
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (aguo *AddressGlobalUpdateOne) ClearUniquenessID() *AddressGlobalUpdateOne {
	aguo.mutation.ClearUniquenessID()
	return aguo
}

// SetCompany sets the "company" field.
func (aguo *AddressGlobalUpdateOne) SetCompany(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetCompany(s)
	return aguo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableCompany(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetCompany(*s)
	}
	return aguo
}

// ClearCompany clears the value of the "company" field.
func (aguo *AddressGlobalUpdateOne) ClearCompany() *AddressGlobalUpdateOne {
	aguo.mutation.ClearCompany()
	return aguo
}

// SetAddressOne sets the "address_one" field.
func (aguo *AddressGlobalUpdateOne) SetAddressOne(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetAddressOne(s)
	return aguo
}

// SetNillableAddressOne sets the "address_one" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableAddressOne(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetAddressOne(*s)
	}
	return aguo
}

// SetAddressTwo sets the "address_two" field.
func (aguo *AddressGlobalUpdateOne) SetAddressTwo(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetAddressTwo(s)
	return aguo
}

// SetNillableAddressTwo sets the "address_two" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableAddressTwo(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetAddressTwo(*s)
	}
	return aguo
}

// ClearAddressTwo clears the value of the "address_two" field.
func (aguo *AddressGlobalUpdateOne) ClearAddressTwo() *AddressGlobalUpdateOne {
	aguo.mutation.ClearAddressTwo()
	return aguo
}

// SetCity sets the "city" field.
func (aguo *AddressGlobalUpdateOne) SetCity(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetCity(s)
	return aguo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableCity(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetCity(*s)
	}
	return aguo
}

// SetState sets the "state" field.
func (aguo *AddressGlobalUpdateOne) SetState(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetState(s)
	return aguo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableState(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetState(*s)
	}
	return aguo
}

// ClearState clears the value of the "state" field.
func (aguo *AddressGlobalUpdateOne) ClearState() *AddressGlobalUpdateOne {
	aguo.mutation.ClearState()
	return aguo
}

// SetZip sets the "zip" field.
func (aguo *AddressGlobalUpdateOne) SetZip(s string) *AddressGlobalUpdateOne {
	aguo.mutation.SetZip(s)
	return aguo
}

// SetNillableZip sets the "zip" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableZip(s *string) *AddressGlobalUpdateOne {
	if s != nil {
		aguo.SetZip(*s)
	}
	return aguo
}

// SetLatitude sets the "latitude" field.
func (aguo *AddressGlobalUpdateOne) SetLatitude(f float64) *AddressGlobalUpdateOne {
	aguo.mutation.ResetLatitude()
	aguo.mutation.SetLatitude(f)
	return aguo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableLatitude(f *float64) *AddressGlobalUpdateOne {
	if f != nil {
		aguo.SetLatitude(*f)
	}
	return aguo
}

// AddLatitude adds f to the "latitude" field.
func (aguo *AddressGlobalUpdateOne) AddLatitude(f float64) *AddressGlobalUpdateOne {
	aguo.mutation.AddLatitude(f)
	return aguo
}

// SetLongitude sets the "longitude" field.
func (aguo *AddressGlobalUpdateOne) SetLongitude(f float64) *AddressGlobalUpdateOne {
	aguo.mutation.ResetLongitude()
	aguo.mutation.SetLongitude(f)
	return aguo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableLongitude(f *float64) *AddressGlobalUpdateOne {
	if f != nil {
		aguo.SetLongitude(*f)
	}
	return aguo
}

// AddLongitude adds f to the "longitude" field.
func (aguo *AddressGlobalUpdateOne) AddLongitude(f float64) *AddressGlobalUpdateOne {
	aguo.mutation.AddLongitude(f)
	return aguo
}

// SetParcelShopPostNordDeliveryID sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity by ID.
func (aguo *AddressGlobalUpdateOne) SetParcelShopPostNordDeliveryID(id pulid.ID) *AddressGlobalUpdateOne {
	aguo.mutation.SetParcelShopPostNordDeliveryID(id)
	return aguo
}

// SetNillableParcelShopPostNordDeliveryID sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity by ID if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableParcelShopPostNordDeliveryID(id *pulid.ID) *AddressGlobalUpdateOne {
	if id != nil {
		aguo = aguo.SetParcelShopPostNordDeliveryID(*id)
	}
	return aguo
}

// SetParcelShopPostNordDelivery sets the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity.
func (aguo *AddressGlobalUpdateOne) SetParcelShopPostNordDelivery(p *ParcelShopPostNord) *AddressGlobalUpdateOne {
	return aguo.SetParcelShopPostNordDeliveryID(p.ID)
}

// SetParcelShopBringDeliveryID sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity by ID.
func (aguo *AddressGlobalUpdateOne) SetParcelShopBringDeliveryID(id pulid.ID) *AddressGlobalUpdateOne {
	aguo.mutation.SetParcelShopBringDeliveryID(id)
	return aguo
}

// SetNillableParcelShopBringDeliveryID sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity by ID if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableParcelShopBringDeliveryID(id *pulid.ID) *AddressGlobalUpdateOne {
	if id != nil {
		aguo = aguo.SetParcelShopBringDeliveryID(*id)
	}
	return aguo
}

// SetParcelShopBringDelivery sets the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity.
func (aguo *AddressGlobalUpdateOne) SetParcelShopBringDelivery(p *ParcelShopBring) *AddressGlobalUpdateOne {
	return aguo.SetParcelShopBringDeliveryID(p.ID)
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (aguo *AddressGlobalUpdateOne) SetParcelShopID(id pulid.ID) *AddressGlobalUpdateOne {
	aguo.mutation.SetParcelShopID(id)
	return aguo
}

// SetNillableParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID if the given value is not nil.
func (aguo *AddressGlobalUpdateOne) SetNillableParcelShopID(id *pulid.ID) *AddressGlobalUpdateOne {
	if id != nil {
		aguo = aguo.SetParcelShopID(*id)
	}
	return aguo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (aguo *AddressGlobalUpdateOne) SetParcelShop(p *ParcelShop) *AddressGlobalUpdateOne {
	return aguo.SetParcelShopID(p.ID)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (aguo *AddressGlobalUpdateOne) SetCountryID(id pulid.ID) *AddressGlobalUpdateOne {
	aguo.mutation.SetCountryID(id)
	return aguo
}

// SetCountry sets the "country" edge to the Country entity.
func (aguo *AddressGlobalUpdateOne) SetCountry(c *Country) *AddressGlobalUpdateOne {
	return aguo.SetCountryID(c.ID)
}

// Mutation returns the AddressGlobalMutation object of the builder.
func (aguo *AddressGlobalUpdateOne) Mutation() *AddressGlobalMutation {
	return aguo.mutation
}

// ClearParcelShopPostNordDelivery clears the "parcel_shop_post_nord_delivery" edge to the ParcelShopPostNord entity.
func (aguo *AddressGlobalUpdateOne) ClearParcelShopPostNordDelivery() *AddressGlobalUpdateOne {
	aguo.mutation.ClearParcelShopPostNordDelivery()
	return aguo
}

// ClearParcelShopBringDelivery clears the "parcel_shop_bring_delivery" edge to the ParcelShopBring entity.
func (aguo *AddressGlobalUpdateOne) ClearParcelShopBringDelivery() *AddressGlobalUpdateOne {
	aguo.mutation.ClearParcelShopBringDelivery()
	return aguo
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (aguo *AddressGlobalUpdateOne) ClearParcelShop() *AddressGlobalUpdateOne {
	aguo.mutation.ClearParcelShop()
	return aguo
}

// ClearCountry clears the "country" edge to the Country entity.
func (aguo *AddressGlobalUpdateOne) ClearCountry() *AddressGlobalUpdateOne {
	aguo.mutation.ClearCountry()
	return aguo
}

// Where appends a list predicates to the AddressGlobalUpdate builder.
func (aguo *AddressGlobalUpdateOne) Where(ps ...predicate.AddressGlobal) *AddressGlobalUpdateOne {
	aguo.mutation.Where(ps...)
	return aguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AddressGlobalUpdateOne) Select(field string, fields ...string) *AddressGlobalUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AddressGlobal entity.
func (aguo *AddressGlobalUpdateOne) Save(ctx context.Context) (*AddressGlobal, error) {
	return withHooks(ctx, aguo.sqlSave, aguo.mutation, aguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AddressGlobalUpdateOne) SaveX(ctx context.Context) *AddressGlobal {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AddressGlobalUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AddressGlobalUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aguo *AddressGlobalUpdateOne) check() error {
	if aguo.mutation.CountryCleared() && len(aguo.mutation.CountryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AddressGlobal.country"`)
	}
	return nil
}

func (aguo *AddressGlobalUpdateOne) sqlSave(ctx context.Context) (_node *AddressGlobal, err error) {
	if err := aguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(addressglobal.Table, addressglobal.Columns, sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString))
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AddressGlobal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, addressglobal.FieldID)
		for _, f := range fields {
			if !addressglobal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != addressglobal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.UniquenessID(); ok {
		_spec.SetField(addressglobal.FieldUniquenessID, field.TypeString, value)
	}
	if aguo.mutation.UniquenessIDCleared() {
		_spec.ClearField(addressglobal.FieldUniquenessID, field.TypeString)
	}
	if value, ok := aguo.mutation.Company(); ok {
		_spec.SetField(addressglobal.FieldCompany, field.TypeString, value)
	}
	if aguo.mutation.CompanyCleared() {
		_spec.ClearField(addressglobal.FieldCompany, field.TypeString)
	}
	if value, ok := aguo.mutation.AddressOne(); ok {
		_spec.SetField(addressglobal.FieldAddressOne, field.TypeString, value)
	}
	if value, ok := aguo.mutation.AddressTwo(); ok {
		_spec.SetField(addressglobal.FieldAddressTwo, field.TypeString, value)
	}
	if aguo.mutation.AddressTwoCleared() {
		_spec.ClearField(addressglobal.FieldAddressTwo, field.TypeString)
	}
	if value, ok := aguo.mutation.City(); ok {
		_spec.SetField(addressglobal.FieldCity, field.TypeString, value)
	}
	if value, ok := aguo.mutation.State(); ok {
		_spec.SetField(addressglobal.FieldState, field.TypeString, value)
	}
	if aguo.mutation.StateCleared() {
		_spec.ClearField(addressglobal.FieldState, field.TypeString)
	}
	if value, ok := aguo.mutation.Zip(); ok {
		_spec.SetField(addressglobal.FieldZip, field.TypeString, value)
	}
	if value, ok := aguo.mutation.Latitude(); ok {
		_spec.SetField(addressglobal.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := aguo.mutation.AddedLatitude(); ok {
		_spec.AddField(addressglobal.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := aguo.mutation.Longitude(); ok {
		_spec.SetField(addressglobal.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := aguo.mutation.AddedLongitude(); ok {
		_spec.AddField(addressglobal.FieldLongitude, field.TypeFloat64, value)
	}
	if aguo.mutation.ParcelShopPostNordDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopPostNordDeliveryTable,
			Columns: []string{addressglobal.ParcelShopPostNordDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.ParcelShopPostNordDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopPostNordDeliveryTable,
			Columns: []string{addressglobal.ParcelShopPostNordDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aguo.mutation.ParcelShopBringDeliveryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopBringDeliveryTable,
			Columns: []string{addressglobal.ParcelShopBringDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.ParcelShopBringDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopBringDeliveryTable,
			Columns: []string{addressglobal.ParcelShopBringDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aguo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopTable,
			Columns: []string{addressglobal.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopTable,
			Columns: []string{addressglobal.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aguo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   addressglobal.CountryTable,
			Columns: []string{addressglobal.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   addressglobal.CountryTable,
			Columns: []string{addressglobal.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AddressGlobal{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{addressglobal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aguo.mutation.done = true
	return _node, nil
}
