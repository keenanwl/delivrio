// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDelete is the builder for deleting a HypothesisTest entity.
type HypothesisTestDelete struct {
	config
	hooks    []Hook
	mutation *HypothesisTestMutation
}

// Where appends a list predicates to the HypothesisTestDelete builder.
func (htd *HypothesisTestDelete) Where(ps ...predicate.HypothesisTest) *HypothesisTestDelete {
	htd.mutation.Where(ps...)
	return htd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (htd *HypothesisTestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, htd.sqlExec, htd.mutation, htd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (htd *HypothesisTestDelete) ExecX(ctx context.Context) int {
	n, err := htd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (htd *HypothesisTestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hypothesistest.Table, sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString))
	if ps := htd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, htd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	htd.mutation.done = true
	return affected, err
}

// HypothesisTestDeleteOne is the builder for deleting a single HypothesisTest entity.
type HypothesisTestDeleteOne struct {
	htd *HypothesisTestDelete
}

// Where appends a list predicates to the HypothesisTestDelete builder.
func (htdo *HypothesisTestDeleteOne) Where(ps ...predicate.HypothesisTest) *HypothesisTestDeleteOne {
	htdo.htd.mutation.Where(ps...)
	return htdo
}

// Exec executes the deletion query.
func (htdo *HypothesisTestDeleteOne) Exec(ctx context.Context) error {
	n, err := htdo.htd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hypothesistest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (htdo *HypothesisTestDeleteOne) ExecX(ctx context.Context) {
	if err := htdo.Exec(ctx); err != nil {
		panic(err)
	}
}
