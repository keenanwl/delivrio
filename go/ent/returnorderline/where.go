// Code generated by ent, DO NOT EDIT.

package returnorderline

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldEQ(FieldTenantID, v))
}

// Units applies equality check predicate on the "units" field. It's identical to UnitsEQ.
func Units(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldEQ(FieldUnits, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.ReturnOrderLine {
	vc := string(v)
	return predicate.ReturnOrderLine(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.ReturnOrderLine {
	vc := string(v)
	return predicate.ReturnOrderLine(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.ReturnOrderLine {
	vc := string(v)
	return predicate.ReturnOrderLine(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.ReturnOrderLine {
	vc := string(v)
	return predicate.ReturnOrderLine(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.ReturnOrderLine {
	vc := string(v)
	return predicate.ReturnOrderLine(sql.FieldContainsFold(FieldTenantID, vc))
}

// UnitsEQ applies the EQ predicate on the "units" field.
func UnitsEQ(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldEQ(FieldUnits, v))
}

// UnitsNEQ applies the NEQ predicate on the "units" field.
func UnitsNEQ(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldNEQ(FieldUnits, v))
}

// UnitsIn applies the In predicate on the "units" field.
func UnitsIn(vs ...int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldIn(FieldUnits, vs...))
}

// UnitsNotIn applies the NotIn predicate on the "units" field.
func UnitsNotIn(vs ...int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldNotIn(FieldUnits, vs...))
}

// UnitsGT applies the GT predicate on the "units" field.
func UnitsGT(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldGT(FieldUnits, v))
}

// UnitsGTE applies the GTE predicate on the "units" field.
func UnitsGTE(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldGTE(FieldUnits, v))
}

// UnitsLT applies the LT predicate on the "units" field.
func UnitsLT(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldLT(FieldUnits, v))
}

// UnitsLTE applies the LTE predicate on the "units" field.
func UnitsLTE(v int) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.FieldLTE(FieldUnits, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnColli applies the HasEdge predicate on the "return_colli" edge.
func HasReturnColli() predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReturnColliTable, ReturnColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnColliWith applies the HasEdge predicate on the "return_colli" edge with a given conditions (other predicates).
func HasReturnColliWith(preds ...predicate.ReturnColli) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := newReturnColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderLine applies the HasEdge predicate on the "order_line" edge.
func HasOrderLine() predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrderLineTable, OrderLineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderLineWith applies the HasEdge predicate on the "order_line" edge with a given conditions (other predicates).
func HasOrderLineWith(preds ...predicate.OrderLine) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := newOrderLineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortalClaim applies the HasEdge predicate on the "return_portal_claim" edge.
func HasReturnPortalClaim() predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ReturnPortalClaimTable, ReturnPortalClaimColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalClaimWith applies the HasEdge predicate on the "return_portal_claim" edge with a given conditions (other predicates).
func HasReturnPortalClaimWith(preds ...predicate.ReturnPortalClaim) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(func(s *sql.Selector) {
		step := newReturnPortalClaimStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ReturnOrderLine) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ReturnOrderLine) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ReturnOrderLine) predicate.ReturnOrderLine {
	return predicate.ReturnOrderLine(sql.NotPredicates(p))
}
