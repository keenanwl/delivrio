// Code generated by ent, DO NOT EDIT.

package returnorderline

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the returnorderline type in the database.
	Label = "return_order_line"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldUnits holds the string denoting the units field in the database.
	FieldUnits = "units"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeReturnColli holds the string denoting the return_colli edge name in mutations.
	EdgeReturnColli = "return_colli"
	// EdgeOrderLine holds the string denoting the order_line edge name in mutations.
	EdgeOrderLine = "order_line"
	// EdgeReturnPortalClaim holds the string denoting the return_portal_claim edge name in mutations.
	EdgeReturnPortalClaim = "return_portal_claim"
	// Table holds the table name of the returnorderline in the database.
	Table = "return_order_lines"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "return_order_lines"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ReturnColliTable is the table that holds the return_colli relation/edge.
	ReturnColliTable = "return_order_lines"
	// ReturnColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnColliInverseTable = "return_collis"
	// ReturnColliColumn is the table column denoting the return_colli relation/edge.
	ReturnColliColumn = "return_colli_return_order_line"
	// OrderLineTable is the table that holds the order_line relation/edge.
	OrderLineTable = "return_order_lines"
	// OrderLineInverseTable is the table name for the OrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "orderline" package.
	OrderLineInverseTable = "order_lines"
	// OrderLineColumn is the table column denoting the order_line relation/edge.
	OrderLineColumn = "return_order_line_order_line"
	// ReturnPortalClaimTable is the table that holds the return_portal_claim relation/edge.
	ReturnPortalClaimTable = "return_order_lines"
	// ReturnPortalClaimInverseTable is the table name for the ReturnPortalClaim entity.
	// It exists in this package in order to avoid circular dependency with the "returnportalclaim" package.
	ReturnPortalClaimInverseTable = "return_portal_claims"
	// ReturnPortalClaimColumn is the table column denoting the return_portal_claim relation/edge.
	ReturnPortalClaimColumn = "return_order_line_return_portal_claim"
)

// Columns holds all SQL columns for returnorderline fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldUnits,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "return_order_lines"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"return_colli_return_order_line",
	"return_order_line_order_line",
	"return_order_line_return_portal_claim",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// UnitsValidator is a validator for the "units" field. It is called by the builders before save.
	UnitsValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ReturnOrderLine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByUnits orders the results by the units field.
func ByUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnits, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnColliField orders the results by return_colli field.
func ByReturnColliField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderLineField orders the results by order_line field.
func ByOrderLineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderLineStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnPortalClaimField orders the results by return_portal_claim field.
func ByReturnPortalClaimField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalClaimStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newReturnColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReturnColliTable, ReturnColliColumn),
	)
}
func newOrderLineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderLineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrderLineTable, OrderLineColumn),
	)
}
func newReturnPortalClaimStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalClaimInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ReturnPortalClaimTable, ReturnPortalClaimColumn),
	)
}
