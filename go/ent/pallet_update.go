// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PalletUpdate is the builder for updating Pallet entities.
type PalletUpdate struct {
	config
	hooks    []Hook
	mutation *PalletMutation
}

// Where appends a list predicates to the PalletUpdate builder.
func (pu *PalletUpdate) Where(ps ...predicate.Pallet) *PalletUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *PalletUpdate) SetTenantID(value pulid.ID) *PalletUpdate {
	pu.mutation.SetTenantID(value)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *PalletUpdate) SetNillableTenantID(value *pulid.ID) *PalletUpdate {
	if value != nil {
		pu.SetTenantID(*value)
	}
	return pu
}

// SetPublicID sets the "public_id" field.
func (pu *PalletUpdate) SetPublicID(s string) *PalletUpdate {
	pu.mutation.SetPublicID(s)
	return pu
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (pu *PalletUpdate) SetNillablePublicID(s *string) *PalletUpdate {
	if s != nil {
		pu.SetPublicID(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PalletUpdate) SetDescription(s string) *PalletUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PalletUpdate) SetNillableDescription(s *string) *PalletUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pu *PalletUpdate) SetTenant(t *Tenant) *PalletUpdate {
	return pu.SetTenantID(t.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pu *PalletUpdate) AddOrderIDs(ids ...pulid.ID) *PalletUpdate {
	pu.mutation.AddOrderIDs(ids...)
	return pu
}

// AddOrders adds the "orders" edges to the Order entity.
func (pu *PalletUpdate) AddOrders(o ...*Order) *PalletUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderIDs(ids...)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (pu *PalletUpdate) SetPackagingID(id pulid.ID) *PalletUpdate {
	pu.mutation.SetPackagingID(id)
	return pu
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (pu *PalletUpdate) SetNillablePackagingID(id *pulid.ID) *PalletUpdate {
	if id != nil {
		pu = pu.SetPackagingID(*id)
	}
	return pu
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (pu *PalletUpdate) SetPackaging(p *Packaging) *PalletUpdate {
	return pu.SetPackagingID(p.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (pu *PalletUpdate) SetConsolidationID(id pulid.ID) *PalletUpdate {
	pu.mutation.SetConsolidationID(id)
	return pu
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (pu *PalletUpdate) SetConsolidation(c *Consolidation) *PalletUpdate {
	return pu.SetConsolidationID(c.ID)
}

// SetShipmentPalletID sets the "shipment_pallet" edge to the ShipmentPallet entity by ID.
func (pu *PalletUpdate) SetShipmentPalletID(id pulid.ID) *PalletUpdate {
	pu.mutation.SetShipmentPalletID(id)
	return pu
}

// SetNillableShipmentPalletID sets the "shipment_pallet" edge to the ShipmentPallet entity by ID if the given value is not nil.
func (pu *PalletUpdate) SetNillableShipmentPalletID(id *pulid.ID) *PalletUpdate {
	if id != nil {
		pu = pu.SetShipmentPalletID(*id)
	}
	return pu
}

// SetShipmentPallet sets the "shipment_pallet" edge to the ShipmentPallet entity.
func (pu *PalletUpdate) SetShipmentPallet(s *ShipmentPallet) *PalletUpdate {
	return pu.SetShipmentPalletID(s.ID)
}

// AddCancelledShipmentPalletIDs adds the "cancelled_shipment_pallet" edge to the ShipmentPallet entity by IDs.
func (pu *PalletUpdate) AddCancelledShipmentPalletIDs(ids ...pulid.ID) *PalletUpdate {
	pu.mutation.AddCancelledShipmentPalletIDs(ids...)
	return pu
}

// AddCancelledShipmentPallet adds the "cancelled_shipment_pallet" edges to the ShipmentPallet entity.
func (pu *PalletUpdate) AddCancelledShipmentPallet(s ...*ShipmentPallet) *PalletUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddCancelledShipmentPalletIDs(ids...)
}

// Mutation returns the PalletMutation object of the builder.
func (pu *PalletUpdate) Mutation() *PalletMutation {
	return pu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pu *PalletUpdate) ClearTenant() *PalletUpdate {
	pu.mutation.ClearTenant()
	return pu
}

// ClearOrders clears all "orders" edges to the Order entity.
func (pu *PalletUpdate) ClearOrders() *PalletUpdate {
	pu.mutation.ClearOrders()
	return pu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (pu *PalletUpdate) RemoveOrderIDs(ids ...pulid.ID) *PalletUpdate {
	pu.mutation.RemoveOrderIDs(ids...)
	return pu
}

// RemoveOrders removes "orders" edges to Order entities.
func (pu *PalletUpdate) RemoveOrders(o ...*Order) *PalletUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderIDs(ids...)
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (pu *PalletUpdate) ClearPackaging() *PalletUpdate {
	pu.mutation.ClearPackaging()
	return pu
}

// ClearConsolidation clears the "consolidation" edge to the Consolidation entity.
func (pu *PalletUpdate) ClearConsolidation() *PalletUpdate {
	pu.mutation.ClearConsolidation()
	return pu
}

// ClearShipmentPallet clears the "shipment_pallet" edge to the ShipmentPallet entity.
func (pu *PalletUpdate) ClearShipmentPallet() *PalletUpdate {
	pu.mutation.ClearShipmentPallet()
	return pu
}

// ClearCancelledShipmentPallet clears all "cancelled_shipment_pallet" edges to the ShipmentPallet entity.
func (pu *PalletUpdate) ClearCancelledShipmentPallet() *PalletUpdate {
	pu.mutation.ClearCancelledShipmentPallet()
	return pu
}

// RemoveCancelledShipmentPalletIDs removes the "cancelled_shipment_pallet" edge to ShipmentPallet entities by IDs.
func (pu *PalletUpdate) RemoveCancelledShipmentPalletIDs(ids ...pulid.ID) *PalletUpdate {
	pu.mutation.RemoveCancelledShipmentPalletIDs(ids...)
	return pu
}

// RemoveCancelledShipmentPallet removes "cancelled_shipment_pallet" edges to ShipmentPallet entities.
func (pu *PalletUpdate) RemoveCancelledShipmentPallet(s ...*ShipmentPallet) *PalletUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveCancelledShipmentPalletIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PalletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PalletUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PalletUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PalletUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PalletUpdate) check() error {
	if pu.mutation.TenantCleared() && len(pu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pallet.tenant"`)
	}
	if pu.mutation.ConsolidationCleared() && len(pu.mutation.ConsolidationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pallet.consolidation"`)
	}
	return nil
}

func (pu *PalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pallet.Table, pallet.Columns, sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PublicID(); ok {
		_spec.SetField(pallet.FieldPublicID, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(pallet.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.TenantTable,
			Columns: []string{pallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.TenantTable,
			Columns: []string{pallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.PackagingTable,
			Columns: []string{pallet.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.PackagingTable,
			Columns: []string{pallet.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pallet.ConsolidationTable,
			Columns: []string{pallet.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pallet.ConsolidationTable,
			Columns: []string{pallet.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pallet.ShipmentPalletTable,
			Columns: []string{pallet.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pallet.ShipmentPalletTable,
			Columns: []string{pallet.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CancelledShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCancelledShipmentPalletIDs(); len(nodes) > 0 && !pu.mutation.CancelledShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CancelledShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PalletUpdateOne is the builder for updating a single Pallet entity.
type PalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PalletMutation
}

// SetTenantID sets the "tenant_id" field.
func (puo *PalletUpdateOne) SetTenantID(pu pulid.ID) *PalletUpdateOne {
	puo.mutation.SetTenantID(pu)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *PalletUpdateOne) SetNillableTenantID(pu *pulid.ID) *PalletUpdateOne {
	if pu != nil {
		puo.SetTenantID(*pu)
	}
	return puo
}

// SetPublicID sets the "public_id" field.
func (puo *PalletUpdateOne) SetPublicID(s string) *PalletUpdateOne {
	puo.mutation.SetPublicID(s)
	return puo
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (puo *PalletUpdateOne) SetNillablePublicID(s *string) *PalletUpdateOne {
	if s != nil {
		puo.SetPublicID(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PalletUpdateOne) SetDescription(s string) *PalletUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PalletUpdateOne) SetNillableDescription(s *string) *PalletUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puo *PalletUpdateOne) SetTenant(t *Tenant) *PalletUpdateOne {
	return puo.SetTenantID(t.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (puo *PalletUpdateOne) AddOrderIDs(ids ...pulid.ID) *PalletUpdateOne {
	puo.mutation.AddOrderIDs(ids...)
	return puo
}

// AddOrders adds the "orders" edges to the Order entity.
func (puo *PalletUpdateOne) AddOrders(o ...*Order) *PalletUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderIDs(ids...)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (puo *PalletUpdateOne) SetPackagingID(id pulid.ID) *PalletUpdateOne {
	puo.mutation.SetPackagingID(id)
	return puo
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (puo *PalletUpdateOne) SetNillablePackagingID(id *pulid.ID) *PalletUpdateOne {
	if id != nil {
		puo = puo.SetPackagingID(*id)
	}
	return puo
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (puo *PalletUpdateOne) SetPackaging(p *Packaging) *PalletUpdateOne {
	return puo.SetPackagingID(p.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (puo *PalletUpdateOne) SetConsolidationID(id pulid.ID) *PalletUpdateOne {
	puo.mutation.SetConsolidationID(id)
	return puo
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (puo *PalletUpdateOne) SetConsolidation(c *Consolidation) *PalletUpdateOne {
	return puo.SetConsolidationID(c.ID)
}

// SetShipmentPalletID sets the "shipment_pallet" edge to the ShipmentPallet entity by ID.
func (puo *PalletUpdateOne) SetShipmentPalletID(id pulid.ID) *PalletUpdateOne {
	puo.mutation.SetShipmentPalletID(id)
	return puo
}

// SetNillableShipmentPalletID sets the "shipment_pallet" edge to the ShipmentPallet entity by ID if the given value is not nil.
func (puo *PalletUpdateOne) SetNillableShipmentPalletID(id *pulid.ID) *PalletUpdateOne {
	if id != nil {
		puo = puo.SetShipmentPalletID(*id)
	}
	return puo
}

// SetShipmentPallet sets the "shipment_pallet" edge to the ShipmentPallet entity.
func (puo *PalletUpdateOne) SetShipmentPallet(s *ShipmentPallet) *PalletUpdateOne {
	return puo.SetShipmentPalletID(s.ID)
}

// AddCancelledShipmentPalletIDs adds the "cancelled_shipment_pallet" edge to the ShipmentPallet entity by IDs.
func (puo *PalletUpdateOne) AddCancelledShipmentPalletIDs(ids ...pulid.ID) *PalletUpdateOne {
	puo.mutation.AddCancelledShipmentPalletIDs(ids...)
	return puo
}

// AddCancelledShipmentPallet adds the "cancelled_shipment_pallet" edges to the ShipmentPallet entity.
func (puo *PalletUpdateOne) AddCancelledShipmentPallet(s ...*ShipmentPallet) *PalletUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddCancelledShipmentPalletIDs(ids...)
}

// Mutation returns the PalletMutation object of the builder.
func (puo *PalletUpdateOne) Mutation() *PalletMutation {
	return puo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puo *PalletUpdateOne) ClearTenant() *PalletUpdateOne {
	puo.mutation.ClearTenant()
	return puo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (puo *PalletUpdateOne) ClearOrders() *PalletUpdateOne {
	puo.mutation.ClearOrders()
	return puo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (puo *PalletUpdateOne) RemoveOrderIDs(ids ...pulid.ID) *PalletUpdateOne {
	puo.mutation.RemoveOrderIDs(ids...)
	return puo
}

// RemoveOrders removes "orders" edges to Order entities.
func (puo *PalletUpdateOne) RemoveOrders(o ...*Order) *PalletUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderIDs(ids...)
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (puo *PalletUpdateOne) ClearPackaging() *PalletUpdateOne {
	puo.mutation.ClearPackaging()
	return puo
}

// ClearConsolidation clears the "consolidation" edge to the Consolidation entity.
func (puo *PalletUpdateOne) ClearConsolidation() *PalletUpdateOne {
	puo.mutation.ClearConsolidation()
	return puo
}

// ClearShipmentPallet clears the "shipment_pallet" edge to the ShipmentPallet entity.
func (puo *PalletUpdateOne) ClearShipmentPallet() *PalletUpdateOne {
	puo.mutation.ClearShipmentPallet()
	return puo
}

// ClearCancelledShipmentPallet clears all "cancelled_shipment_pallet" edges to the ShipmentPallet entity.
func (puo *PalletUpdateOne) ClearCancelledShipmentPallet() *PalletUpdateOne {
	puo.mutation.ClearCancelledShipmentPallet()
	return puo
}

// RemoveCancelledShipmentPalletIDs removes the "cancelled_shipment_pallet" edge to ShipmentPallet entities by IDs.
func (puo *PalletUpdateOne) RemoveCancelledShipmentPalletIDs(ids ...pulid.ID) *PalletUpdateOne {
	puo.mutation.RemoveCancelledShipmentPalletIDs(ids...)
	return puo
}

// RemoveCancelledShipmentPallet removes "cancelled_shipment_pallet" edges to ShipmentPallet entities.
func (puo *PalletUpdateOne) RemoveCancelledShipmentPallet(s ...*ShipmentPallet) *PalletUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveCancelledShipmentPalletIDs(ids...)
}

// Where appends a list predicates to the PalletUpdate builder.
func (puo *PalletUpdateOne) Where(ps ...predicate.Pallet) *PalletUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PalletUpdateOne) Select(field string, fields ...string) *PalletUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pallet entity.
func (puo *PalletUpdateOne) Save(ctx context.Context) (*Pallet, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PalletUpdateOne) SaveX(ctx context.Context) *Pallet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PalletUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PalletUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PalletUpdateOne) check() error {
	if puo.mutation.TenantCleared() && len(puo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pallet.tenant"`)
	}
	if puo.mutation.ConsolidationCleared() && len(puo.mutation.ConsolidationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Pallet.consolidation"`)
	}
	return nil
}

func (puo *PalletUpdateOne) sqlSave(ctx context.Context) (_node *Pallet, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pallet.Table, pallet.Columns, sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pallet.FieldID)
		for _, f := range fields {
			if !pallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PublicID(); ok {
		_spec.SetField(pallet.FieldPublicID, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(pallet.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.TenantTable,
			Columns: []string{pallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.TenantTable,
			Columns: []string{pallet.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.PackagingTable,
			Columns: []string{pallet.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.PackagingTable,
			Columns: []string{pallet.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pallet.ConsolidationTable,
			Columns: []string{pallet.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pallet.ConsolidationTable,
			Columns: []string{pallet.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pallet.ShipmentPalletTable,
			Columns: []string{pallet.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pallet.ShipmentPalletTable,
			Columns: []string{pallet.ShipmentPalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CancelledShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCancelledShipmentPalletIDs(); len(nodes) > 0 && !puo.mutation.CancelledShipmentPalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CancelledShipmentPalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentpallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Pallet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
