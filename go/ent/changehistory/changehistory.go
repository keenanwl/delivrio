// Code generated by ent, DO NOT EDIT.

package changehistory

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the changehistory type in the database.
	Label = "change_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldOrigin holds the string denoting the origin field in the database.
	FieldOrigin = "origin"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePlanHistory holds the string denoting the plan_history edge name in mutations.
	EdgePlanHistory = "plan_history"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeOrderHistory holds the string denoting the order_history edge name in mutations.
	EdgeOrderHistory = "order_history"
	// EdgeShipmentHistory holds the string denoting the shipment_history edge name in mutations.
	EdgeShipmentHistory = "shipment_history"
	// EdgeReturnColliHistory holds the string denoting the return_colli_history edge name in mutations.
	EdgeReturnColliHistory = "return_colli_history"
	// Table holds the table name of the changehistory in the database.
	Table = "change_histories"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "change_histories"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PlanHistoryTable is the table that holds the plan_history relation/edge.
	PlanHistoryTable = "plan_histories"
	// PlanHistoryInverseTable is the table name for the PlanHistory entity.
	// It exists in this package in order to avoid circular dependency with the "planhistory" package.
	PlanHistoryInverseTable = "plan_histories"
	// PlanHistoryColumn is the table column denoting the plan_history relation/edge.
	PlanHistoryColumn = "change_history_plan_history"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "change_histories"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "change_history_user"
	// OrderHistoryTable is the table that holds the order_history relation/edge.
	OrderHistoryTable = "order_histories"
	// OrderHistoryInverseTable is the table name for the OrderHistory entity.
	// It exists in this package in order to avoid circular dependency with the "orderhistory" package.
	OrderHistoryInverseTable = "order_histories"
	// OrderHistoryColumn is the table column denoting the order_history relation/edge.
	OrderHistoryColumn = "change_history_order_history"
	// ShipmentHistoryTable is the table that holds the shipment_history relation/edge.
	ShipmentHistoryTable = "shipment_histories"
	// ShipmentHistoryInverseTable is the table name for the ShipmentHistory entity.
	// It exists in this package in order to avoid circular dependency with the "shipmenthistory" package.
	ShipmentHistoryInverseTable = "shipment_histories"
	// ShipmentHistoryColumn is the table column denoting the shipment_history relation/edge.
	ShipmentHistoryColumn = "change_history_shipment_history"
	// ReturnColliHistoryTable is the table that holds the return_colli_history relation/edge.
	ReturnColliHistoryTable = "return_colli_histories"
	// ReturnColliHistoryInverseTable is the table name for the ReturnColliHistory entity.
	// It exists in this package in order to avoid circular dependency with the "returncollihistory" package.
	ReturnColliHistoryInverseTable = "return_colli_histories"
	// ReturnColliHistoryColumn is the table column denoting the return_colli_history relation/edge.
	ReturnColliHistoryColumn = "change_history_return_colli_history"
)

// Columns holds all SQL columns for changehistory fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCreatedAt,
	FieldOrigin,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "change_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"change_history_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Origin defines the type for the "origin" enum field.
type Origin string

// OriginUnknown is the default value of the Origin enum.
const DefaultOrigin = OriginUnknown

// Origin values.
const (
	OriginUnknown     Origin = "unknown"
	OriginBackground  Origin = "background"
	OriginRestAPI     Origin = "rest_api"
	OriginWebClient   Origin = "web_client"
	OriginPrintClient Origin = "print_client"
	OriginSeed        Origin = "seed"
)

func (o Origin) String() string {
	return string(o)
}

// OriginValidator is a validator for the "origin" field enum values. It is called by the builders before save.
func OriginValidator(o Origin) error {
	switch o {
	case OriginUnknown, OriginBackground, OriginRestAPI, OriginWebClient, OriginPrintClient, OriginSeed:
		return nil
	default:
		return fmt.Errorf("changehistory: invalid enum value for origin field: %q", o)
	}
}

// OrderOption defines the ordering options for the ChangeHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOrigin orders the results by the origin field.
func ByOrigin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrigin, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanHistoryCount orders the results by plan_history count.
func ByPlanHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlanHistoryStep(), opts...)
	}
}

// ByPlanHistory orders the results by plan_history terms.
func ByPlanHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderHistoryCount orders the results by order_history count.
func ByOrderHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderHistoryStep(), opts...)
	}
}

// ByOrderHistory orders the results by order_history terms.
func ByOrderHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentHistoryCount orders the results by shipment_history count.
func ByShipmentHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentHistoryStep(), opts...)
	}
}

// ByShipmentHistory orders the results by shipment_history terms.
func ByShipmentHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnColliHistoryCount orders the results by return_colli_history count.
func ByReturnColliHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnColliHistoryStep(), opts...)
	}
}

// ByReturnColliHistory orders the results by return_colli_history terms.
func ByReturnColliHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPlanHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlanHistoryTable, PlanHistoryColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newOrderHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoryTable, OrderHistoryColumn),
	)
}
func newShipmentHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentHistoryTable, ShipmentHistoryColumn),
	)
}
func newReturnColliHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReturnColliHistoryTable, ReturnColliHistoryColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Origin) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Origin) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Origin(str)
	if err := OriginValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Origin", str)
	}
	return nil
}
