// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierCreate is the builder for creating a Carrier entity.
type CarrierCreate struct {
	config
	mutation *CarrierMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cc *CarrierCreate) SetTenantID(pu pulid.ID) *CarrierCreate {
	cc.mutation.SetTenantID(pu)
	return cc
}

// SetName sets the "name" field.
func (cc *CarrierCreate) SetName(s string) *CarrierCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetSyncCancelation sets the "sync_cancelation" field.
func (cc *CarrierCreate) SetSyncCancelation(b bool) *CarrierCreate {
	cc.mutation.SetSyncCancelation(b)
	return cc
}

// SetNillableSyncCancelation sets the "sync_cancelation" field if the given value is not nil.
func (cc *CarrierCreate) SetNillableSyncCancelation(b *bool) *CarrierCreate {
	if b != nil {
		cc.SetSyncCancelation(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CarrierCreate) SetID(pu pulid.ID) *CarrierCreate {
	cc.mutation.SetID(pu)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CarrierCreate) SetNillableID(pu *pulid.ID) *CarrierCreate {
	if pu != nil {
		cc.SetID(*pu)
	}
	return cc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cc *CarrierCreate) SetTenant(t *Tenant) *CarrierCreate {
	return cc.SetTenantID(t.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (cc *CarrierCreate) SetCarrierBrandID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierBrandID(id)
	return cc
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (cc *CarrierCreate) SetCarrierBrand(c *CarrierBrand) *CarrierCreate {
	return cc.SetCarrierBrandID(c.ID)
}

// SetCarrierDAOID sets the "carrier_dao" edge to the CarrierDAO entity by ID.
func (cc *CarrierCreate) SetCarrierDAOID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierDAOID(id)
	return cc
}

// SetNillableCarrierDAOID sets the "carrier_dao" edge to the CarrierDAO entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierDAOID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierDAOID(*id)
	}
	return cc
}

// SetCarrierDAO sets the "carrier_dao" edge to the CarrierDAO entity.
func (cc *CarrierCreate) SetCarrierDAO(c *CarrierDAO) *CarrierCreate {
	return cc.SetCarrierDAOID(c.ID)
}

// SetCarrierDFID sets the "carrier_df" edge to the CarrierDF entity by ID.
func (cc *CarrierCreate) SetCarrierDFID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierDFID(id)
	return cc
}

// SetNillableCarrierDFID sets the "carrier_df" edge to the CarrierDF entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierDFID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierDFID(*id)
	}
	return cc
}

// SetCarrierDF sets the "carrier_df" edge to the CarrierDF entity.
func (cc *CarrierCreate) SetCarrierDF(c *CarrierDF) *CarrierCreate {
	return cc.SetCarrierDFID(c.ID)
}

// SetCarrierDSVID sets the "carrier_dsv" edge to the CarrierDSV entity by ID.
func (cc *CarrierCreate) SetCarrierDSVID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierDSVID(id)
	return cc
}

// SetNillableCarrierDSVID sets the "carrier_dsv" edge to the CarrierDSV entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierDSVID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierDSVID(*id)
	}
	return cc
}

// SetCarrierDSV sets the "carrier_dsv" edge to the CarrierDSV entity.
func (cc *CarrierCreate) SetCarrierDSV(c *CarrierDSV) *CarrierCreate {
	return cc.SetCarrierDSVID(c.ID)
}

// SetCarrierEasyPostID sets the "carrier_easy_post" edge to the CarrierEasyPost entity by ID.
func (cc *CarrierCreate) SetCarrierEasyPostID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierEasyPostID(id)
	return cc
}

// SetNillableCarrierEasyPostID sets the "carrier_easy_post" edge to the CarrierEasyPost entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierEasyPostID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierEasyPostID(*id)
	}
	return cc
}

// SetCarrierEasyPost sets the "carrier_easy_post" edge to the CarrierEasyPost entity.
func (cc *CarrierCreate) SetCarrierEasyPost(c *CarrierEasyPost) *CarrierCreate {
	return cc.SetCarrierEasyPostID(c.ID)
}

// SetCarrierGLSID sets the "carrier_gls" edge to the CarrierGLS entity by ID.
func (cc *CarrierCreate) SetCarrierGLSID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierGLSID(id)
	return cc
}

// SetNillableCarrierGLSID sets the "carrier_gls" edge to the CarrierGLS entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierGLSID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierGLSID(*id)
	}
	return cc
}

// SetCarrierGLS sets the "carrier_gls" edge to the CarrierGLS entity.
func (cc *CarrierCreate) SetCarrierGLS(c *CarrierGLS) *CarrierCreate {
	return cc.SetCarrierGLSID(c.ID)
}

// SetCarrierPostNordID sets the "carrier_post_nord" edge to the CarrierPostNord entity by ID.
func (cc *CarrierCreate) SetCarrierPostNordID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierPostNordID(id)
	return cc
}

// SetNillableCarrierPostNordID sets the "carrier_post_nord" edge to the CarrierPostNord entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierPostNordID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierPostNordID(*id)
	}
	return cc
}

// SetCarrierPostNord sets the "carrier_post_nord" edge to the CarrierPostNord entity.
func (cc *CarrierCreate) SetCarrierPostNord(c *CarrierPostNord) *CarrierCreate {
	return cc.SetCarrierPostNordID(c.ID)
}

// SetCarrierUSPSID sets the "carrier_usps" edge to the CarrierUSPS entity by ID.
func (cc *CarrierCreate) SetCarrierUSPSID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierUSPSID(id)
	return cc
}

// SetNillableCarrierUSPSID sets the "carrier_usps" edge to the CarrierUSPS entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierUSPSID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierUSPSID(*id)
	}
	return cc
}

// SetCarrierUSPS sets the "carrier_usps" edge to the CarrierUSPS entity.
func (cc *CarrierCreate) SetCarrierUSPS(c *CarrierUSPS) *CarrierCreate {
	return cc.SetCarrierUSPSID(c.ID)
}

// SetCarrierBringID sets the "carrier_bring" edge to the CarrierBring entity by ID.
func (cc *CarrierCreate) SetCarrierBringID(id pulid.ID) *CarrierCreate {
	cc.mutation.SetCarrierBringID(id)
	return cc
}

// SetNillableCarrierBringID sets the "carrier_bring" edge to the CarrierBring entity by ID if the given value is not nil.
func (cc *CarrierCreate) SetNillableCarrierBringID(id *pulid.ID) *CarrierCreate {
	if id != nil {
		cc = cc.SetCarrierBringID(*id)
	}
	return cc
}

// SetCarrierBring sets the "carrier_bring" edge to the CarrierBring entity.
func (cc *CarrierCreate) SetCarrierBring(c *CarrierBring) *CarrierCreate {
	return cc.SetCarrierBringID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (cc *CarrierCreate) AddDeliveryOptionIDs(ids ...pulid.ID) *CarrierCreate {
	cc.mutation.AddDeliveryOptionIDs(ids...)
	return cc
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (cc *CarrierCreate) AddDeliveryOption(d ...*DeliveryOption) *CarrierCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDeliveryOptionIDs(ids...)
}

// AddShipmentIDs adds the "shipment" edge to the Shipment entity by IDs.
func (cc *CarrierCreate) AddShipmentIDs(ids ...pulid.ID) *CarrierCreate {
	cc.mutation.AddShipmentIDs(ids...)
	return cc
}

// AddShipment adds the "shipment" edges to the Shipment entity.
func (cc *CarrierCreate) AddShipment(s ...*Shipment) *CarrierCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddShipmentIDs(ids...)
}

// Mutation returns the CarrierMutation object of the builder.
func (cc *CarrierCreate) Mutation() *CarrierMutation {
	return cc.mutation
}

// Save creates the Carrier in the database.
func (cc *CarrierCreate) Save(ctx context.Context) (*Carrier, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CarrierCreate) SaveX(ctx context.Context) *Carrier {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CarrierCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CarrierCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CarrierCreate) defaults() error {
	if _, ok := cc.mutation.SyncCancelation(); !ok {
		v := carrier.DefaultSyncCancelation
		cc.mutation.SetSyncCancelation(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if carrier.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carrier.DefaultID (forgotten import ent/runtime?)")
		}
		v := carrier.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CarrierCreate) check() error {
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Carrier.tenant_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Carrier.name"`)}
	}
	if _, ok := cc.mutation.SyncCancelation(); !ok {
		return &ValidationError{Name: "sync_cancelation", err: errors.New(`ent: missing required field "Carrier.sync_cancelation"`)}
	}
	if len(cc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Carrier.tenant"`)}
	}
	if len(cc.mutation.CarrierBrandIDs()) == 0 {
		return &ValidationError{Name: "carrier_brand", err: errors.New(`ent: missing required edge "Carrier.carrier_brand"`)}
	}
	return nil
}

func (cc *CarrierCreate) sqlSave(ctx context.Context) (*Carrier, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CarrierCreate) createSpec() (*Carrier, *sqlgraph.CreateSpec) {
	var (
		_node = &Carrier{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(carrier.Table, sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(carrier.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.SyncCancelation(); ok {
		_spec.SetField(carrier.FieldSyncCancelation, field.TypeBool, value)
		_node.SyncCancelation = value
	}
	if nodes := cc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.TenantTable,
			Columns: []string{carrier.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.CarrierBrandTable,
			Columns: []string{carrier.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_brand = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDAOTable,
			Columns: []string{carrier.CarrierDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDFTable,
			Columns: []string{carrier.CarrierDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDSVTable,
			Columns: []string{carrier.CarrierDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierdsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierEasyPostTable,
			Columns: []string{carrier.CarrierEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriereasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierGLSTable,
			Columns: []string{carrier.CarrierGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierPostNordTable,
			Columns: []string{carrier.CarrierPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierUSPSTable,
			Columns: []string{carrier.CarrierUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CarrierBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierBringTable,
			Columns: []string{carrier.CarrierBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Carrier.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cc *CarrierCreate) OnConflict(opts ...sql.ConflictOption) *CarrierUpsertOne {
	cc.conflict = opts
	return &CarrierUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Carrier.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CarrierCreate) OnConflictColumns(columns ...string) *CarrierUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CarrierUpsertOne{
		create: cc,
	}
}

type (
	// CarrierUpsertOne is the builder for "upsert"-ing
	//  one Carrier node.
	CarrierUpsertOne struct {
		create *CarrierCreate
	}

	// CarrierUpsert is the "OnConflict" setter.
	CarrierUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierUpsert) SetTenantID(v pulid.ID) *CarrierUpsert {
	u.Set(carrier.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierUpsert) UpdateTenantID() *CarrierUpsert {
	u.SetExcluded(carrier.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *CarrierUpsert) SetName(v string) *CarrierUpsert {
	u.Set(carrier.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CarrierUpsert) UpdateName() *CarrierUpsert {
	u.SetExcluded(carrier.FieldName)
	return u
}

// SetSyncCancelation sets the "sync_cancelation" field.
func (u *CarrierUpsert) SetSyncCancelation(v bool) *CarrierUpsert {
	u.Set(carrier.FieldSyncCancelation, v)
	return u
}

// UpdateSyncCancelation sets the "sync_cancelation" field to the value that was provided on create.
func (u *CarrierUpsert) UpdateSyncCancelation() *CarrierUpsert {
	u.SetExcluded(carrier.FieldSyncCancelation)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Carrier.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrier.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierUpsertOne) UpdateNewValues() *CarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carrier.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Carrier.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierUpsertOne) Ignore() *CarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierUpsertOne) DoNothing() *CarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierCreate.OnConflict
// documentation for more info.
func (u *CarrierUpsertOne) Update(set func(*CarrierUpsert)) *CarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierUpsertOne) SetTenantID(v pulid.ID) *CarrierUpsertOne {
	return u.Update(func(s *CarrierUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierUpsertOne) UpdateTenantID() *CarrierUpsertOne {
	return u.Update(func(s *CarrierUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *CarrierUpsertOne) SetName(v string) *CarrierUpsertOne {
	return u.Update(func(s *CarrierUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CarrierUpsertOne) UpdateName() *CarrierUpsertOne {
	return u.Update(func(s *CarrierUpsert) {
		s.UpdateName()
	})
}

// SetSyncCancelation sets the "sync_cancelation" field.
func (u *CarrierUpsertOne) SetSyncCancelation(v bool) *CarrierUpsertOne {
	return u.Update(func(s *CarrierUpsert) {
		s.SetSyncCancelation(v)
	})
}

// UpdateSyncCancelation sets the "sync_cancelation" field to the value that was provided on create.
func (u *CarrierUpsertOne) UpdateSyncCancelation() *CarrierUpsertOne {
	return u.Update(func(s *CarrierUpsert) {
		s.UpdateSyncCancelation()
	})
}

// Exec executes the query.
func (u *CarrierUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierUpsertOne.ID is not supported by MySQL driver. Use CarrierUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierCreateBulk is the builder for creating many Carrier entities in bulk.
type CarrierCreateBulk struct {
	config
	err      error
	builders []*CarrierCreate
	conflict []sql.ConflictOption
}

// Save creates the Carrier entities in the database.
func (ccb *CarrierCreateBulk) Save(ctx context.Context) ([]*Carrier, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Carrier, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CarrierCreateBulk) SaveX(ctx context.Context) []*Carrier {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CarrierCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CarrierCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Carrier.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CarrierCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierUpsertBulk {
	ccb.conflict = opts
	return &CarrierUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Carrier.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CarrierCreateBulk) OnConflictColumns(columns ...string) *CarrierUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CarrierUpsertBulk{
		create: ccb,
	}
}

// CarrierUpsertBulk is the builder for "upsert"-ing
// a bulk of Carrier nodes.
type CarrierUpsertBulk struct {
	create *CarrierCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Carrier.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carrier.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierUpsertBulk) UpdateNewValues() *CarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carrier.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Carrier.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierUpsertBulk) Ignore() *CarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierUpsertBulk) DoNothing() *CarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierUpsertBulk) Update(set func(*CarrierUpsert)) *CarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierUpsertBulk) SetTenantID(v pulid.ID) *CarrierUpsertBulk {
	return u.Update(func(s *CarrierUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierUpsertBulk) UpdateTenantID() *CarrierUpsertBulk {
	return u.Update(func(s *CarrierUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *CarrierUpsertBulk) SetName(v string) *CarrierUpsertBulk {
	return u.Update(func(s *CarrierUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CarrierUpsertBulk) UpdateName() *CarrierUpsertBulk {
	return u.Update(func(s *CarrierUpsert) {
		s.UpdateName()
	})
}

// SetSyncCancelation sets the "sync_cancelation" field.
func (u *CarrierUpsertBulk) SetSyncCancelation(v bool) *CarrierUpsertBulk {
	return u.Update(func(s *CarrierUpsert) {
		s.SetSyncCancelation(v)
	})
}

// UpdateSyncCancelation sets the "sync_cancelation" field to the value that was provided on create.
func (u *CarrierUpsertBulk) UpdateSyncCancelation() *CarrierUpsertBulk {
	return u.Update(func(s *CarrierUpsert) {
		s.UpdateSyncCancelation()
	})
}

// Exec executes the query.
func (u *CarrierUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
