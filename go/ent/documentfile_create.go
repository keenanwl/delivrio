// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentFileCreate is the builder for creating a DocumentFile entity.
type DocumentFileCreate struct {
	config
	mutation *DocumentFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (dfc *DocumentFileCreate) SetTenantID(pu pulid.ID) *DocumentFileCreate {
	dfc.mutation.SetTenantID(pu)
	return dfc
}

// SetCreatedAt sets the "created_at" field.
func (dfc *DocumentFileCreate) SetCreatedAt(t time.Time) *DocumentFileCreate {
	dfc.mutation.SetCreatedAt(t)
	return dfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableCreatedAt(t *time.Time) *DocumentFileCreate {
	if t != nil {
		dfc.SetCreatedAt(*t)
	}
	return dfc
}

// SetStorageType sets the "storage_type" field.
func (dfc *DocumentFileCreate) SetStorageType(dt documentfile.StorageType) *DocumentFileCreate {
	dfc.mutation.SetStorageType(dt)
	return dfc
}

// SetStoragePath sets the "storage_path" field.
func (dfc *DocumentFileCreate) SetStoragePath(s string) *DocumentFileCreate {
	dfc.mutation.SetStoragePath(s)
	return dfc
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableStoragePath(s *string) *DocumentFileCreate {
	if s != nil {
		dfc.SetStoragePath(*s)
	}
	return dfc
}

// SetStoragePathZpl sets the "storage_path_zpl" field.
func (dfc *DocumentFileCreate) SetStoragePathZpl(s string) *DocumentFileCreate {
	dfc.mutation.SetStoragePathZpl(s)
	return dfc
}

// SetNillableStoragePathZpl sets the "storage_path_zpl" field if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableStoragePathZpl(s *string) *DocumentFileCreate {
	if s != nil {
		dfc.SetStoragePathZpl(*s)
	}
	return dfc
}

// SetDocType sets the "doc_type" field.
func (dfc *DocumentFileCreate) SetDocType(dt documentfile.DocType) *DocumentFileCreate {
	dfc.mutation.SetDocType(dt)
	return dfc
}

// SetDataPdfBase64 sets the "data_pdf_base64" field.
func (dfc *DocumentFileCreate) SetDataPdfBase64(s string) *DocumentFileCreate {
	dfc.mutation.SetDataPdfBase64(s)
	return dfc
}

// SetNillableDataPdfBase64 sets the "data_pdf_base64" field if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableDataPdfBase64(s *string) *DocumentFileCreate {
	if s != nil {
		dfc.SetDataPdfBase64(*s)
	}
	return dfc
}

// SetDataZplBase64 sets the "data_zpl_base64" field.
func (dfc *DocumentFileCreate) SetDataZplBase64(s string) *DocumentFileCreate {
	dfc.mutation.SetDataZplBase64(s)
	return dfc
}

// SetNillableDataZplBase64 sets the "data_zpl_base64" field if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableDataZplBase64(s *string) *DocumentFileCreate {
	if s != nil {
		dfc.SetDataZplBase64(*s)
	}
	return dfc
}

// SetID sets the "id" field.
func (dfc *DocumentFileCreate) SetID(pu pulid.ID) *DocumentFileCreate {
	dfc.mutation.SetID(pu)
	return dfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableID(pu *pulid.ID) *DocumentFileCreate {
	if pu != nil {
		dfc.SetID(*pu)
	}
	return dfc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dfc *DocumentFileCreate) SetTenant(t *Tenant) *DocumentFileCreate {
	return dfc.SetTenantID(t.ID)
}

// SetColliID sets the "colli" edge to the Colli entity by ID.
func (dfc *DocumentFileCreate) SetColliID(id pulid.ID) *DocumentFileCreate {
	dfc.mutation.SetColliID(id)
	return dfc
}

// SetNillableColliID sets the "colli" edge to the Colli entity by ID if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableColliID(id *pulid.ID) *DocumentFileCreate {
	if id != nil {
		dfc = dfc.SetColliID(*id)
	}
	return dfc
}

// SetColli sets the "colli" edge to the Colli entity.
func (dfc *DocumentFileCreate) SetColli(c *Colli) *DocumentFileCreate {
	return dfc.SetColliID(c.ID)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (dfc *DocumentFileCreate) SetShipmentParcelID(id pulid.ID) *DocumentFileCreate {
	dfc.mutation.SetShipmentParcelID(id)
	return dfc
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (dfc *DocumentFileCreate) SetNillableShipmentParcelID(id *pulid.ID) *DocumentFileCreate {
	if id != nil {
		dfc = dfc.SetShipmentParcelID(*id)
	}
	return dfc
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (dfc *DocumentFileCreate) SetShipmentParcel(s *ShipmentParcel) *DocumentFileCreate {
	return dfc.SetShipmentParcelID(s.ID)
}

// Mutation returns the DocumentFileMutation object of the builder.
func (dfc *DocumentFileCreate) Mutation() *DocumentFileMutation {
	return dfc.mutation
}

// Save creates the DocumentFile in the database.
func (dfc *DocumentFileCreate) Save(ctx context.Context) (*DocumentFile, error) {
	if err := dfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dfc.sqlSave, dfc.mutation, dfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dfc *DocumentFileCreate) SaveX(ctx context.Context) *DocumentFile {
	v, err := dfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dfc *DocumentFileCreate) Exec(ctx context.Context) error {
	_, err := dfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfc *DocumentFileCreate) ExecX(ctx context.Context) {
	if err := dfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dfc *DocumentFileCreate) defaults() error {
	if _, ok := dfc.mutation.CreatedAt(); !ok {
		if documentfile.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized documentfile.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := documentfile.DefaultCreatedAt()
		dfc.mutation.SetCreatedAt(v)
	}
	if _, ok := dfc.mutation.StoragePathZpl(); !ok {
		v := documentfile.DefaultStoragePathZpl
		dfc.mutation.SetStoragePathZpl(v)
	}
	if _, ok := dfc.mutation.ID(); !ok {
		if documentfile.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized documentfile.DefaultID (forgotten import ent/runtime?)")
		}
		v := documentfile.DefaultID()
		dfc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dfc *DocumentFileCreate) check() error {
	if _, ok := dfc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DocumentFile.tenant_id"`)}
	}
	if _, ok := dfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DocumentFile.created_at"`)}
	}
	if _, ok := dfc.mutation.StorageType(); !ok {
		return &ValidationError{Name: "storage_type", err: errors.New(`ent: missing required field "DocumentFile.storage_type"`)}
	}
	if v, ok := dfc.mutation.StorageType(); ok {
		if err := documentfile.StorageTypeValidator(v); err != nil {
			return &ValidationError{Name: "storage_type", err: fmt.Errorf(`ent: validator failed for field "DocumentFile.storage_type": %w`, err)}
		}
	}
	if _, ok := dfc.mutation.DocType(); !ok {
		return &ValidationError{Name: "doc_type", err: errors.New(`ent: missing required field "DocumentFile.doc_type"`)}
	}
	if v, ok := dfc.mutation.DocType(); ok {
		if err := documentfile.DocTypeValidator(v); err != nil {
			return &ValidationError{Name: "doc_type", err: fmt.Errorf(`ent: validator failed for field "DocumentFile.doc_type": %w`, err)}
		}
	}
	if len(dfc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DocumentFile.tenant"`)}
	}
	return nil
}

func (dfc *DocumentFileCreate) sqlSave(ctx context.Context) (*DocumentFile, error) {
	if err := dfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dfc.mutation.id = &_node.ID
	dfc.mutation.done = true
	return _node, nil
}

func (dfc *DocumentFileCreate) createSpec() (*DocumentFile, *sqlgraph.CreateSpec) {
	var (
		_node = &DocumentFile{config: dfc.config}
		_spec = sqlgraph.NewCreateSpec(documentfile.Table, sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString))
	)
	_spec.OnConflict = dfc.conflict
	if id, ok := dfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dfc.mutation.CreatedAt(); ok {
		_spec.SetField(documentfile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dfc.mutation.StorageType(); ok {
		_spec.SetField(documentfile.FieldStorageType, field.TypeEnum, value)
		_node.StorageType = value
	}
	if value, ok := dfc.mutation.StoragePath(); ok {
		_spec.SetField(documentfile.FieldStoragePath, field.TypeString, value)
		_node.StoragePath = value
	}
	if value, ok := dfc.mutation.StoragePathZpl(); ok {
		_spec.SetField(documentfile.FieldStoragePathZpl, field.TypeString, value)
		_node.StoragePathZpl = value
	}
	if value, ok := dfc.mutation.DocType(); ok {
		_spec.SetField(documentfile.FieldDocType, field.TypeEnum, value)
		_node.DocType = value
	}
	if value, ok := dfc.mutation.DataPdfBase64(); ok {
		_spec.SetField(documentfile.FieldDataPdfBase64, field.TypeString, value)
		_node.DataPdfBase64 = value
	}
	if value, ok := dfc.mutation.DataZplBase64(); ok {
		_spec.SetField(documentfile.FieldDataZplBase64, field.TypeString, value)
		_node.DataZplBase64 = value
	}
	if nodes := dfc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentfile.TenantTable,
			Columns: []string{documentfile.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dfc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentfile.ColliTable,
			Columns: []string{documentfile.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_document_file = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dfc.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   documentfile.ShipmentParcelTable,
			Columns: []string{documentfile.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_parcel_document_file = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DocumentFile.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentFileUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dfc *DocumentFileCreate) OnConflict(opts ...sql.ConflictOption) *DocumentFileUpsertOne {
	dfc.conflict = opts
	return &DocumentFileUpsertOne{
		create: dfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DocumentFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dfc *DocumentFileCreate) OnConflictColumns(columns ...string) *DocumentFileUpsertOne {
	dfc.conflict = append(dfc.conflict, sql.ConflictColumns(columns...))
	return &DocumentFileUpsertOne{
		create: dfc,
	}
}

type (
	// DocumentFileUpsertOne is the builder for "upsert"-ing
	//  one DocumentFile node.
	DocumentFileUpsertOne struct {
		create *DocumentFileCreate
	}

	// DocumentFileUpsert is the "OnConflict" setter.
	DocumentFileUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DocumentFileUpsert) SetTenantID(v pulid.ID) *DocumentFileUpsert {
	u.Set(documentfile.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DocumentFileUpsert) UpdateTenantID() *DocumentFileUpsert {
	u.SetExcluded(documentfile.FieldTenantID)
	return u
}

// SetStoragePath sets the "storage_path" field.
func (u *DocumentFileUpsert) SetStoragePath(v string) *DocumentFileUpsert {
	u.Set(documentfile.FieldStoragePath, v)
	return u
}

// UpdateStoragePath sets the "storage_path" field to the value that was provided on create.
func (u *DocumentFileUpsert) UpdateStoragePath() *DocumentFileUpsert {
	u.SetExcluded(documentfile.FieldStoragePath)
	return u
}

// ClearStoragePath clears the value of the "storage_path" field.
func (u *DocumentFileUpsert) ClearStoragePath() *DocumentFileUpsert {
	u.SetNull(documentfile.FieldStoragePath)
	return u
}

// SetStoragePathZpl sets the "storage_path_zpl" field.
func (u *DocumentFileUpsert) SetStoragePathZpl(v string) *DocumentFileUpsert {
	u.Set(documentfile.FieldStoragePathZpl, v)
	return u
}

// UpdateStoragePathZpl sets the "storage_path_zpl" field to the value that was provided on create.
func (u *DocumentFileUpsert) UpdateStoragePathZpl() *DocumentFileUpsert {
	u.SetExcluded(documentfile.FieldStoragePathZpl)
	return u
}

// ClearStoragePathZpl clears the value of the "storage_path_zpl" field.
func (u *DocumentFileUpsert) ClearStoragePathZpl() *DocumentFileUpsert {
	u.SetNull(documentfile.FieldStoragePathZpl)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DocumentFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(documentfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentFileUpsertOne) UpdateNewValues() *DocumentFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(documentfile.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(documentfile.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.StorageType(); exists {
			s.SetIgnore(documentfile.FieldStorageType)
		}
		if _, exists := u.create.mutation.DocType(); exists {
			s.SetIgnore(documentfile.FieldDocType)
		}
		if _, exists := u.create.mutation.DataPdfBase64(); exists {
			s.SetIgnore(documentfile.FieldDataPdfBase64)
		}
		if _, exists := u.create.mutation.DataZplBase64(); exists {
			s.SetIgnore(documentfile.FieldDataZplBase64)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DocumentFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentFileUpsertOne) Ignore() *DocumentFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentFileUpsertOne) DoNothing() *DocumentFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentFileCreate.OnConflict
// documentation for more info.
func (u *DocumentFileUpsertOne) Update(set func(*DocumentFileUpsert)) *DocumentFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DocumentFileUpsertOne) SetTenantID(v pulid.ID) *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DocumentFileUpsertOne) UpdateTenantID() *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.UpdateTenantID()
	})
}

// SetStoragePath sets the "storage_path" field.
func (u *DocumentFileUpsertOne) SetStoragePath(v string) *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.SetStoragePath(v)
	})
}

// UpdateStoragePath sets the "storage_path" field to the value that was provided on create.
func (u *DocumentFileUpsertOne) UpdateStoragePath() *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.UpdateStoragePath()
	})
}

// ClearStoragePath clears the value of the "storage_path" field.
func (u *DocumentFileUpsertOne) ClearStoragePath() *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.ClearStoragePath()
	})
}

// SetStoragePathZpl sets the "storage_path_zpl" field.
func (u *DocumentFileUpsertOne) SetStoragePathZpl(v string) *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.SetStoragePathZpl(v)
	})
}

// UpdateStoragePathZpl sets the "storage_path_zpl" field to the value that was provided on create.
func (u *DocumentFileUpsertOne) UpdateStoragePathZpl() *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.UpdateStoragePathZpl()
	})
}

// ClearStoragePathZpl clears the value of the "storage_path_zpl" field.
func (u *DocumentFileUpsertOne) ClearStoragePathZpl() *DocumentFileUpsertOne {
	return u.Update(func(s *DocumentFileUpsert) {
		s.ClearStoragePathZpl()
	})
}

// Exec executes the query.
func (u *DocumentFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentFileUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DocumentFileUpsertOne.ID is not supported by MySQL driver. Use DocumentFileUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentFileUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DocumentFileCreateBulk is the builder for creating many DocumentFile entities in bulk.
type DocumentFileCreateBulk struct {
	config
	err      error
	builders []*DocumentFileCreate
	conflict []sql.ConflictOption
}

// Save creates the DocumentFile entities in the database.
func (dfcb *DocumentFileCreateBulk) Save(ctx context.Context) ([]*DocumentFile, error) {
	if dfcb.err != nil {
		return nil, dfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dfcb.builders))
	nodes := make([]*DocumentFile, len(dfcb.builders))
	mutators := make([]Mutator, len(dfcb.builders))
	for i := range dfcb.builders {
		func(i int, root context.Context) {
			builder := dfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dfcb *DocumentFileCreateBulk) SaveX(ctx context.Context) []*DocumentFile {
	v, err := dfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dfcb *DocumentFileCreateBulk) Exec(ctx context.Context) error {
	_, err := dfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dfcb *DocumentFileCreateBulk) ExecX(ctx context.Context) {
	if err := dfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DocumentFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentFileUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dfcb *DocumentFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentFileUpsertBulk {
	dfcb.conflict = opts
	return &DocumentFileUpsertBulk{
		create: dfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DocumentFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dfcb *DocumentFileCreateBulk) OnConflictColumns(columns ...string) *DocumentFileUpsertBulk {
	dfcb.conflict = append(dfcb.conflict, sql.ConflictColumns(columns...))
	return &DocumentFileUpsertBulk{
		create: dfcb,
	}
}

// DocumentFileUpsertBulk is the builder for "upsert"-ing
// a bulk of DocumentFile nodes.
type DocumentFileUpsertBulk struct {
	create *DocumentFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DocumentFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(documentfile.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentFileUpsertBulk) UpdateNewValues() *DocumentFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(documentfile.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(documentfile.FieldCreatedAt)
			}
			if _, exists := b.mutation.StorageType(); exists {
				s.SetIgnore(documentfile.FieldStorageType)
			}
			if _, exists := b.mutation.DocType(); exists {
				s.SetIgnore(documentfile.FieldDocType)
			}
			if _, exists := b.mutation.DataPdfBase64(); exists {
				s.SetIgnore(documentfile.FieldDataPdfBase64)
			}
			if _, exists := b.mutation.DataZplBase64(); exists {
				s.SetIgnore(documentfile.FieldDataZplBase64)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DocumentFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentFileUpsertBulk) Ignore() *DocumentFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentFileUpsertBulk) DoNothing() *DocumentFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentFileCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentFileUpsertBulk) Update(set func(*DocumentFileUpsert)) *DocumentFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DocumentFileUpsertBulk) SetTenantID(v pulid.ID) *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DocumentFileUpsertBulk) UpdateTenantID() *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.UpdateTenantID()
	})
}

// SetStoragePath sets the "storage_path" field.
func (u *DocumentFileUpsertBulk) SetStoragePath(v string) *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.SetStoragePath(v)
	})
}

// UpdateStoragePath sets the "storage_path" field to the value that was provided on create.
func (u *DocumentFileUpsertBulk) UpdateStoragePath() *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.UpdateStoragePath()
	})
}

// ClearStoragePath clears the value of the "storage_path" field.
func (u *DocumentFileUpsertBulk) ClearStoragePath() *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.ClearStoragePath()
	})
}

// SetStoragePathZpl sets the "storage_path_zpl" field.
func (u *DocumentFileUpsertBulk) SetStoragePathZpl(v string) *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.SetStoragePathZpl(v)
	})
}

// UpdateStoragePathZpl sets the "storage_path_zpl" field to the value that was provided on create.
func (u *DocumentFileUpsertBulk) UpdateStoragePathZpl() *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.UpdateStoragePathZpl()
	})
}

// ClearStoragePathZpl clears the value of the "storage_path_zpl" field.
func (u *DocumentFileUpsertBulk) ClearStoragePathZpl() *DocumentFileUpsertBulk {
	return u.Update(func(s *DocumentFileUpsert) {
		s.ClearStoragePathZpl()
	})
}

// Exec executes the query.
func (u *DocumentFileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
