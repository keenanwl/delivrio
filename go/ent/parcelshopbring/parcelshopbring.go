// Code generated by ent, DO NOT EDIT.

package parcelshopbring

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the parcelshopbring type in the database.
	Label = "parcel_shop_bring"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPointType holds the string denoting the point_type field in the database.
	FieldPointType = "point_type"
	// FieldBringID holds the string denoting the bring_id field in the database.
	FieldBringID = "bring_id"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// EdgeAddressDelivery holds the string denoting the address_delivery edge name in mutations.
	EdgeAddressDelivery = "address_delivery"
	// Table holds the table name of the parcelshopbring in the database.
	Table = "parcel_shop_brings"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "parcel_shop_brings"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "parcel_shop_parcel_shop_bring"
	// AddressDeliveryTable is the table that holds the address_delivery relation/edge.
	AddressDeliveryTable = "address_globals"
	// AddressDeliveryInverseTable is the table name for the AddressGlobal entity.
	// It exists in this package in order to avoid circular dependency with the "addressglobal" package.
	AddressDeliveryInverseTable = "address_globals"
	// AddressDeliveryColumn is the table column denoting the address_delivery relation/edge.
	AddressDeliveryColumn = "parcel_shop_bring_address_delivery"
)

// Columns holds all SQL columns for parcelshopbring fields.
var Columns = []string{
	FieldID,
	FieldPointType,
	FieldBringID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "parcel_shop_brings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"parcel_shop_parcel_shop_bring",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// PointType defines the type for the "point_type" enum field.
type PointType string

// PointType values.
const (
	PointTypeOne         PointType = "one"
	PointTypeFour        PointType = "four"
	PointTypeNineteen    PointType = "nineteen"
	PointTypeTwentyOne   PointType = "twenty_one"
	PointTypeThirtyTwo   PointType = "thirty_two"
	PointTypeThirtyFour  PointType = "thirty_four"
	PointTypeThirtySeven PointType = "thirty_seven"
	PointTypeThirtyEight PointType = "thirty_eight"
	PointTypeThirtyNine  PointType = "thirty_nine"
	PointTypeEightyFive  PointType = "eighty_five"
	PointTypeEightySix   PointType = "eighty_six"
	PointTypeSmartPOST   PointType = "SmartPOST"
	PointTypePosti       PointType = "Posti"
	PointTypeNoutopiste  PointType = "Noutopiste"
	PointTypeLOCKER      PointType = "LOCKER"
	PointTypeUnknown     PointType = "Unknown"
)

func (pt PointType) String() string {
	return string(pt)
}

// PointTypeValidator is a validator for the "point_type" field enum values. It is called by the builders before save.
func PointTypeValidator(pt PointType) error {
	switch pt {
	case PointTypeOne, PointTypeFour, PointTypeNineteen, PointTypeTwentyOne, PointTypeThirtyTwo, PointTypeThirtyFour, PointTypeThirtySeven, PointTypeThirtyEight, PointTypeThirtyNine, PointTypeEightyFive, PointTypeEightySix, PointTypeSmartPOST, PointTypePosti, PointTypeNoutopiste, PointTypeLOCKER, PointTypeUnknown:
		return nil
	default:
		return fmt.Errorf("parcelshopbring: invalid enum value for point_type field: %q", pt)
	}
}

// OrderOption defines the ordering options for the ParcelShopBring queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPointType orders the results by the point_type field.
func ByPointType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointType, opts...).ToFunc()
}

// ByBringID orders the results by the bring_id field.
func ByBringID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBringID, opts...).ToFunc()
}

// ByParcelShopField orders the results by parcel_shop field.
func ByParcelShopField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddressDeliveryField orders the results by address_delivery field.
func ByAddressDeliveryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressDeliveryStep(), sql.OrderByField(field, opts...))
	}
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
	)
}
func newAddressDeliveryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressDeliveryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AddressDeliveryTable, AddressDeliveryColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PointType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PointType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PointType(str)
	if err := PointTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PointType", str)
	}
	return nil
}
