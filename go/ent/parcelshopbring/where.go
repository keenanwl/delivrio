// Code generated by ent, DO NOT EDIT.

package parcelshopbring

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldLTE(FieldID, id))
}

// BringID applies equality check predicate on the "bring_id" field. It's identical to BringIDEQ.
func BringID(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldEQ(FieldBringID, v))
}

// PointTypeEQ applies the EQ predicate on the "point_type" field.
func PointTypeEQ(v PointType) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldEQ(FieldPointType, v))
}

// PointTypeNEQ applies the NEQ predicate on the "point_type" field.
func PointTypeNEQ(v PointType) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldNEQ(FieldPointType, v))
}

// PointTypeIn applies the In predicate on the "point_type" field.
func PointTypeIn(vs ...PointType) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldIn(FieldPointType, vs...))
}

// PointTypeNotIn applies the NotIn predicate on the "point_type" field.
func PointTypeNotIn(vs ...PointType) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldNotIn(FieldPointType, vs...))
}

// BringIDEQ applies the EQ predicate on the "bring_id" field.
func BringIDEQ(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldEQ(FieldBringID, v))
}

// BringIDNEQ applies the NEQ predicate on the "bring_id" field.
func BringIDNEQ(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldNEQ(FieldBringID, v))
}

// BringIDIn applies the In predicate on the "bring_id" field.
func BringIDIn(vs ...string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldIn(FieldBringID, vs...))
}

// BringIDNotIn applies the NotIn predicate on the "bring_id" field.
func BringIDNotIn(vs ...string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldNotIn(FieldBringID, vs...))
}

// BringIDGT applies the GT predicate on the "bring_id" field.
func BringIDGT(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldGT(FieldBringID, v))
}

// BringIDGTE applies the GTE predicate on the "bring_id" field.
func BringIDGTE(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldGTE(FieldBringID, v))
}

// BringIDLT applies the LT predicate on the "bring_id" field.
func BringIDLT(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldLT(FieldBringID, v))
}

// BringIDLTE applies the LTE predicate on the "bring_id" field.
func BringIDLTE(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldLTE(FieldBringID, v))
}

// BringIDContains applies the Contains predicate on the "bring_id" field.
func BringIDContains(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldContains(FieldBringID, v))
}

// BringIDHasPrefix applies the HasPrefix predicate on the "bring_id" field.
func BringIDHasPrefix(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldHasPrefix(FieldBringID, v))
}

// BringIDHasSuffix applies the HasSuffix predicate on the "bring_id" field.
func BringIDHasSuffix(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldHasSuffix(FieldBringID, v))
}

// BringIDEqualFold applies the EqualFold predicate on the "bring_id" field.
func BringIDEqualFold(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldEqualFold(FieldBringID, v))
}

// BringIDContainsFold applies the ContainsFold predicate on the "bring_id" field.
func BringIDContainsFold(v string) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.FieldContainsFold(FieldBringID, v))
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.ParcelShopBring {
	return predicate.ParcelShopBring(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddressDelivery applies the HasEdge predicate on the "address_delivery" edge.
func HasAddressDelivery() predicate.ParcelShopBring {
	return predicate.ParcelShopBring(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AddressDeliveryTable, AddressDeliveryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressDeliveryWith applies the HasEdge predicate on the "address_delivery" edge with a given conditions (other predicates).
func HasAddressDeliveryWith(preds ...predicate.AddressGlobal) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(func(s *sql.Selector) {
		step := newAddressDeliveryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParcelShopBring) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParcelShopBring) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParcelShopBring) predicate.ParcelShopBring {
	return predicate.ParcelShopBring(sql.NotPredicates(p))
}
