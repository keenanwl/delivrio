// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceRecentScanUpdate is the builder for updating WorkspaceRecentScan entities.
type WorkspaceRecentScanUpdate struct {
	config
	hooks    []Hook
	mutation *WorkspaceRecentScanMutation
}

// Where appends a list predicates to the WorkspaceRecentScanUpdate builder.
func (wrsu *WorkspaceRecentScanUpdate) Where(ps ...predicate.WorkspaceRecentScan) *WorkspaceRecentScanUpdate {
	wrsu.mutation.Where(ps...)
	return wrsu
}

// SetTenantID sets the "tenant_id" field.
func (wrsu *WorkspaceRecentScanUpdate) SetTenantID(pu pulid.ID) *WorkspaceRecentScanUpdate {
	wrsu.mutation.SetTenantID(pu)
	return wrsu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wrsu *WorkspaceRecentScanUpdate) SetNillableTenantID(pu *pulid.ID) *WorkspaceRecentScanUpdate {
	if pu != nil {
		wrsu.SetTenantID(*pu)
	}
	return wrsu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wrsu *WorkspaceRecentScanUpdate) SetTenant(t *Tenant) *WorkspaceRecentScanUpdate {
	return wrsu.SetTenantID(t.ID)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (wrsu *WorkspaceRecentScanUpdate) SetShipmentParcelID(id pulid.ID) *WorkspaceRecentScanUpdate {
	wrsu.mutation.SetShipmentParcelID(id)
	return wrsu
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (wrsu *WorkspaceRecentScanUpdate) SetNillableShipmentParcelID(id *pulid.ID) *WorkspaceRecentScanUpdate {
	if id != nil {
		wrsu = wrsu.SetShipmentParcelID(*id)
	}
	return wrsu
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (wrsu *WorkspaceRecentScanUpdate) SetShipmentParcel(s *ShipmentParcel) *WorkspaceRecentScanUpdate {
	return wrsu.SetShipmentParcelID(s.ID)
}

// Mutation returns the WorkspaceRecentScanMutation object of the builder.
func (wrsu *WorkspaceRecentScanUpdate) Mutation() *WorkspaceRecentScanMutation {
	return wrsu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (wrsu *WorkspaceRecentScanUpdate) ClearTenant() *WorkspaceRecentScanUpdate {
	wrsu.mutation.ClearTenant()
	return wrsu
}

// ClearShipmentParcel clears the "shipment_parcel" edge to the ShipmentParcel entity.
func (wrsu *WorkspaceRecentScanUpdate) ClearShipmentParcel() *WorkspaceRecentScanUpdate {
	wrsu.mutation.ClearShipmentParcel()
	return wrsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wrsu *WorkspaceRecentScanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wrsu.sqlSave, wrsu.mutation, wrsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wrsu *WorkspaceRecentScanUpdate) SaveX(ctx context.Context) int {
	affected, err := wrsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wrsu *WorkspaceRecentScanUpdate) Exec(ctx context.Context) error {
	_, err := wrsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrsu *WorkspaceRecentScanUpdate) ExecX(ctx context.Context) {
	if err := wrsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wrsu *WorkspaceRecentScanUpdate) check() error {
	if wrsu.mutation.TenantCleared() && len(wrsu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkspaceRecentScan.tenant"`)
	}
	if wrsu.mutation.UserCleared() && len(wrsu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkspaceRecentScan.user"`)
	}
	return nil
}

func (wrsu *WorkspaceRecentScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wrsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workspacerecentscan.Table, workspacerecentscan.Columns, sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString))
	if ps := wrsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wrsu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.TenantTable,
			Columns: []string{workspacerecentscan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wrsu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.TenantTable,
			Columns: []string{workspacerecentscan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wrsu.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.ShipmentParcelTable,
			Columns: []string{workspacerecentscan.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wrsu.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.ShipmentParcelTable,
			Columns: []string{workspacerecentscan.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wrsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workspacerecentscan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wrsu.mutation.done = true
	return n, nil
}

// WorkspaceRecentScanUpdateOne is the builder for updating a single WorkspaceRecentScan entity.
type WorkspaceRecentScanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkspaceRecentScanMutation
}

// SetTenantID sets the "tenant_id" field.
func (wrsuo *WorkspaceRecentScanUpdateOne) SetTenantID(pu pulid.ID) *WorkspaceRecentScanUpdateOne {
	wrsuo.mutation.SetTenantID(pu)
	return wrsuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (wrsuo *WorkspaceRecentScanUpdateOne) SetNillableTenantID(pu *pulid.ID) *WorkspaceRecentScanUpdateOne {
	if pu != nil {
		wrsuo.SetTenantID(*pu)
	}
	return wrsuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wrsuo *WorkspaceRecentScanUpdateOne) SetTenant(t *Tenant) *WorkspaceRecentScanUpdateOne {
	return wrsuo.SetTenantID(t.ID)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (wrsuo *WorkspaceRecentScanUpdateOne) SetShipmentParcelID(id pulid.ID) *WorkspaceRecentScanUpdateOne {
	wrsuo.mutation.SetShipmentParcelID(id)
	return wrsuo
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (wrsuo *WorkspaceRecentScanUpdateOne) SetNillableShipmentParcelID(id *pulid.ID) *WorkspaceRecentScanUpdateOne {
	if id != nil {
		wrsuo = wrsuo.SetShipmentParcelID(*id)
	}
	return wrsuo
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (wrsuo *WorkspaceRecentScanUpdateOne) SetShipmentParcel(s *ShipmentParcel) *WorkspaceRecentScanUpdateOne {
	return wrsuo.SetShipmentParcelID(s.ID)
}

// Mutation returns the WorkspaceRecentScanMutation object of the builder.
func (wrsuo *WorkspaceRecentScanUpdateOne) Mutation() *WorkspaceRecentScanMutation {
	return wrsuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (wrsuo *WorkspaceRecentScanUpdateOne) ClearTenant() *WorkspaceRecentScanUpdateOne {
	wrsuo.mutation.ClearTenant()
	return wrsuo
}

// ClearShipmentParcel clears the "shipment_parcel" edge to the ShipmentParcel entity.
func (wrsuo *WorkspaceRecentScanUpdateOne) ClearShipmentParcel() *WorkspaceRecentScanUpdateOne {
	wrsuo.mutation.ClearShipmentParcel()
	return wrsuo
}

// Where appends a list predicates to the WorkspaceRecentScanUpdate builder.
func (wrsuo *WorkspaceRecentScanUpdateOne) Where(ps ...predicate.WorkspaceRecentScan) *WorkspaceRecentScanUpdateOne {
	wrsuo.mutation.Where(ps...)
	return wrsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wrsuo *WorkspaceRecentScanUpdateOne) Select(field string, fields ...string) *WorkspaceRecentScanUpdateOne {
	wrsuo.fields = append([]string{field}, fields...)
	return wrsuo
}

// Save executes the query and returns the updated WorkspaceRecentScan entity.
func (wrsuo *WorkspaceRecentScanUpdateOne) Save(ctx context.Context) (*WorkspaceRecentScan, error) {
	return withHooks(ctx, wrsuo.sqlSave, wrsuo.mutation, wrsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wrsuo *WorkspaceRecentScanUpdateOne) SaveX(ctx context.Context) *WorkspaceRecentScan {
	node, err := wrsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wrsuo *WorkspaceRecentScanUpdateOne) Exec(ctx context.Context) error {
	_, err := wrsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrsuo *WorkspaceRecentScanUpdateOne) ExecX(ctx context.Context) {
	if err := wrsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wrsuo *WorkspaceRecentScanUpdateOne) check() error {
	if wrsuo.mutation.TenantCleared() && len(wrsuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkspaceRecentScan.tenant"`)
	}
	if wrsuo.mutation.UserCleared() && len(wrsuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkspaceRecentScan.user"`)
	}
	return nil
}

func (wrsuo *WorkspaceRecentScanUpdateOne) sqlSave(ctx context.Context) (_node *WorkspaceRecentScan, err error) {
	if err := wrsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workspacerecentscan.Table, workspacerecentscan.Columns, sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString))
	id, ok := wrsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkspaceRecentScan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wrsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workspacerecentscan.FieldID)
		for _, f := range fields {
			if !workspacerecentscan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workspacerecentscan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wrsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wrsuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.TenantTable,
			Columns: []string{workspacerecentscan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wrsuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.TenantTable,
			Columns: []string{workspacerecentscan.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wrsuo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.ShipmentParcelTable,
			Columns: []string{workspacerecentscan.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wrsuo.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.ShipmentParcelTable,
			Columns: []string{workspacerecentscan.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkspaceRecentScan{config: wrsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wrsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workspacerecentscan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wrsuo.mutation.done = true
	return _node, nil
}
