// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingDFCreate is the builder for creating a PackagingDF entity.
type PackagingDFCreate struct {
	config
	mutation *PackagingDFMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pdc *PackagingDFCreate) SetTenantID(pu pulid.ID) *PackagingDFCreate {
	pdc.mutation.SetTenantID(pu)
	return pdc
}

// SetAPIType sets the "api_type" field.
func (pdc *PackagingDFCreate) SetAPIType(pt packagingdf.APIType) *PackagingDFCreate {
	pdc.mutation.SetAPIType(pt)
	return pdc
}

// SetMaxWeight sets the "max_weight" field.
func (pdc *PackagingDFCreate) SetMaxWeight(f float64) *PackagingDFCreate {
	pdc.mutation.SetMaxWeight(f)
	return pdc
}

// SetNillableMaxWeight sets the "max_weight" field if the given value is not nil.
func (pdc *PackagingDFCreate) SetNillableMaxWeight(f *float64) *PackagingDFCreate {
	if f != nil {
		pdc.SetMaxWeight(*f)
	}
	return pdc
}

// SetMinWeight sets the "min_weight" field.
func (pdc *PackagingDFCreate) SetMinWeight(f float64) *PackagingDFCreate {
	pdc.mutation.SetMinWeight(f)
	return pdc
}

// SetNillableMinWeight sets the "min_weight" field if the given value is not nil.
func (pdc *PackagingDFCreate) SetNillableMinWeight(f *float64) *PackagingDFCreate {
	if f != nil {
		pdc.SetMinWeight(*f)
	}
	return pdc
}

// SetStackable sets the "stackable" field.
func (pdc *PackagingDFCreate) SetStackable(b bool) *PackagingDFCreate {
	pdc.mutation.SetStackable(b)
	return pdc
}

// SetNillableStackable sets the "stackable" field if the given value is not nil.
func (pdc *PackagingDFCreate) SetNillableStackable(b *bool) *PackagingDFCreate {
	if b != nil {
		pdc.SetStackable(*b)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *PackagingDFCreate) SetID(pu pulid.ID) *PackagingDFCreate {
	pdc.mutation.SetID(pu)
	return pdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pdc *PackagingDFCreate) SetNillableID(pu *pulid.ID) *PackagingDFCreate {
	if pu != nil {
		pdc.SetID(*pu)
	}
	return pdc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pdc *PackagingDFCreate) SetTenant(t *Tenant) *PackagingDFCreate {
	return pdc.SetTenantID(t.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (pdc *PackagingDFCreate) SetPackagingID(id pulid.ID) *PackagingDFCreate {
	pdc.mutation.SetPackagingID(id)
	return pdc
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (pdc *PackagingDFCreate) SetPackaging(p *Packaging) *PackagingDFCreate {
	return pdc.SetPackagingID(p.ID)
}

// Mutation returns the PackagingDFMutation object of the builder.
func (pdc *PackagingDFCreate) Mutation() *PackagingDFMutation {
	return pdc.mutation
}

// Save creates the PackagingDF in the database.
func (pdc *PackagingDFCreate) Save(ctx context.Context) (*PackagingDF, error) {
	if err := pdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PackagingDFCreate) SaveX(ctx context.Context) *PackagingDF {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *PackagingDFCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *PackagingDFCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *PackagingDFCreate) defaults() error {
	if _, ok := pdc.mutation.Stackable(); !ok {
		v := packagingdf.DefaultStackable
		pdc.mutation.SetStackable(v)
	}
	if _, ok := pdc.mutation.ID(); !ok {
		if packagingdf.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized packagingdf.DefaultID (forgotten import ent/runtime?)")
		}
		v := packagingdf.DefaultID()
		pdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PackagingDFCreate) check() error {
	if _, ok := pdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "PackagingDF.tenant_id"`)}
	}
	if _, ok := pdc.mutation.APIType(); !ok {
		return &ValidationError{Name: "api_type", err: errors.New(`ent: missing required field "PackagingDF.api_type"`)}
	}
	if v, ok := pdc.mutation.APIType(); ok {
		if err := packagingdf.APITypeValidator(v); err != nil {
			return &ValidationError{Name: "api_type", err: fmt.Errorf(`ent: validator failed for field "PackagingDF.api_type": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Stackable(); !ok {
		return &ValidationError{Name: "stackable", err: errors.New(`ent: missing required field "PackagingDF.stackable"`)}
	}
	if len(pdc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "PackagingDF.tenant"`)}
	}
	if len(pdc.mutation.PackagingIDs()) == 0 {
		return &ValidationError{Name: "packaging", err: errors.New(`ent: missing required edge "PackagingDF.packaging"`)}
	}
	return nil
}

func (pdc *PackagingDFCreate) sqlSave(ctx context.Context) (*PackagingDF, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *PackagingDFCreate) createSpec() (*PackagingDF, *sqlgraph.CreateSpec) {
	var (
		_node = &PackagingDF{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(packagingdf.Table, sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString))
	)
	_spec.OnConflict = pdc.conflict
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pdc.mutation.APIType(); ok {
		_spec.SetField(packagingdf.FieldAPIType, field.TypeEnum, value)
		_node.APIType = value
	}
	if value, ok := pdc.mutation.MaxWeight(); ok {
		_spec.SetField(packagingdf.FieldMaxWeight, field.TypeFloat64, value)
		_node.MaxWeight = value
	}
	if value, ok := pdc.mutation.MinWeight(); ok {
		_spec.SetField(packagingdf.FieldMinWeight, field.TypeFloat64, value)
		_node.MinWeight = value
	}
	if value, ok := pdc.mutation.Stackable(); ok {
		_spec.SetField(packagingdf.FieldStackable, field.TypeBool, value)
		_node.Stackable = value
	}
	if nodes := pdc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingdf.TenantTable,
			Columns: []string{packagingdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pdc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingdf.PackagingTable,
			Columns: []string{packagingdf.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.packaging_packaging_df = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingDF.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingDFUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pdc *PackagingDFCreate) OnConflict(opts ...sql.ConflictOption) *PackagingDFUpsertOne {
	pdc.conflict = opts
	return &PackagingDFUpsertOne{
		create: pdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingDF.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdc *PackagingDFCreate) OnConflictColumns(columns ...string) *PackagingDFUpsertOne {
	pdc.conflict = append(pdc.conflict, sql.ConflictColumns(columns...))
	return &PackagingDFUpsertOne{
		create: pdc,
	}
}

type (
	// PackagingDFUpsertOne is the builder for "upsert"-ing
	//  one PackagingDF node.
	PackagingDFUpsertOne struct {
		create *PackagingDFCreate
	}

	// PackagingDFUpsert is the "OnConflict" setter.
	PackagingDFUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *PackagingDFUpsert) SetTenantID(v pulid.ID) *PackagingDFUpsert {
	u.Set(packagingdf.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingDFUpsert) UpdateTenantID() *PackagingDFUpsert {
	u.SetExcluded(packagingdf.FieldTenantID)
	return u
}

// SetAPIType sets the "api_type" field.
func (u *PackagingDFUpsert) SetAPIType(v packagingdf.APIType) *PackagingDFUpsert {
	u.Set(packagingdf.FieldAPIType, v)
	return u
}

// UpdateAPIType sets the "api_type" field to the value that was provided on create.
func (u *PackagingDFUpsert) UpdateAPIType() *PackagingDFUpsert {
	u.SetExcluded(packagingdf.FieldAPIType)
	return u
}

// SetMaxWeight sets the "max_weight" field.
func (u *PackagingDFUpsert) SetMaxWeight(v float64) *PackagingDFUpsert {
	u.Set(packagingdf.FieldMaxWeight, v)
	return u
}

// UpdateMaxWeight sets the "max_weight" field to the value that was provided on create.
func (u *PackagingDFUpsert) UpdateMaxWeight() *PackagingDFUpsert {
	u.SetExcluded(packagingdf.FieldMaxWeight)
	return u
}

// AddMaxWeight adds v to the "max_weight" field.
func (u *PackagingDFUpsert) AddMaxWeight(v float64) *PackagingDFUpsert {
	u.Add(packagingdf.FieldMaxWeight, v)
	return u
}

// ClearMaxWeight clears the value of the "max_weight" field.
func (u *PackagingDFUpsert) ClearMaxWeight() *PackagingDFUpsert {
	u.SetNull(packagingdf.FieldMaxWeight)
	return u
}

// SetMinWeight sets the "min_weight" field.
func (u *PackagingDFUpsert) SetMinWeight(v float64) *PackagingDFUpsert {
	u.Set(packagingdf.FieldMinWeight, v)
	return u
}

// UpdateMinWeight sets the "min_weight" field to the value that was provided on create.
func (u *PackagingDFUpsert) UpdateMinWeight() *PackagingDFUpsert {
	u.SetExcluded(packagingdf.FieldMinWeight)
	return u
}

// AddMinWeight adds v to the "min_weight" field.
func (u *PackagingDFUpsert) AddMinWeight(v float64) *PackagingDFUpsert {
	u.Add(packagingdf.FieldMinWeight, v)
	return u
}

// ClearMinWeight clears the value of the "min_weight" field.
func (u *PackagingDFUpsert) ClearMinWeight() *PackagingDFUpsert {
	u.SetNull(packagingdf.FieldMinWeight)
	return u
}

// SetStackable sets the "stackable" field.
func (u *PackagingDFUpsert) SetStackable(v bool) *PackagingDFUpsert {
	u.Set(packagingdf.FieldStackable, v)
	return u
}

// UpdateStackable sets the "stackable" field to the value that was provided on create.
func (u *PackagingDFUpsert) UpdateStackable() *PackagingDFUpsert {
	u.SetExcluded(packagingdf.FieldStackable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PackagingDF.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packagingdf.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingDFUpsertOne) UpdateNewValues() *PackagingDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(packagingdf.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingDF.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackagingDFUpsertOne) Ignore() *PackagingDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingDFUpsertOne) DoNothing() *PackagingDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingDFCreate.OnConflict
// documentation for more info.
func (u *PackagingDFUpsertOne) Update(set func(*PackagingDFUpsert)) *PackagingDFUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingDFUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PackagingDFUpsertOne) SetTenantID(v pulid.ID) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingDFUpsertOne) UpdateTenantID() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateTenantID()
	})
}

// SetAPIType sets the "api_type" field.
func (u *PackagingDFUpsertOne) SetAPIType(v packagingdf.APIType) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetAPIType(v)
	})
}

// UpdateAPIType sets the "api_type" field to the value that was provided on create.
func (u *PackagingDFUpsertOne) UpdateAPIType() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateAPIType()
	})
}

// SetMaxWeight sets the "max_weight" field.
func (u *PackagingDFUpsertOne) SetMaxWeight(v float64) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetMaxWeight(v)
	})
}

// AddMaxWeight adds v to the "max_weight" field.
func (u *PackagingDFUpsertOne) AddMaxWeight(v float64) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.AddMaxWeight(v)
	})
}

// UpdateMaxWeight sets the "max_weight" field to the value that was provided on create.
func (u *PackagingDFUpsertOne) UpdateMaxWeight() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateMaxWeight()
	})
}

// ClearMaxWeight clears the value of the "max_weight" field.
func (u *PackagingDFUpsertOne) ClearMaxWeight() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.ClearMaxWeight()
	})
}

// SetMinWeight sets the "min_weight" field.
func (u *PackagingDFUpsertOne) SetMinWeight(v float64) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetMinWeight(v)
	})
}

// AddMinWeight adds v to the "min_weight" field.
func (u *PackagingDFUpsertOne) AddMinWeight(v float64) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.AddMinWeight(v)
	})
}

// UpdateMinWeight sets the "min_weight" field to the value that was provided on create.
func (u *PackagingDFUpsertOne) UpdateMinWeight() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateMinWeight()
	})
}

// ClearMinWeight clears the value of the "min_weight" field.
func (u *PackagingDFUpsertOne) ClearMinWeight() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.ClearMinWeight()
	})
}

// SetStackable sets the "stackable" field.
func (u *PackagingDFUpsertOne) SetStackable(v bool) *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetStackable(v)
	})
}

// UpdateStackable sets the "stackable" field to the value that was provided on create.
func (u *PackagingDFUpsertOne) UpdateStackable() *PackagingDFUpsertOne {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateStackable()
	})
}

// Exec executes the query.
func (u *PackagingDFUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingDFCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingDFUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackagingDFUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PackagingDFUpsertOne.ID is not supported by MySQL driver. Use PackagingDFUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackagingDFUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackagingDFCreateBulk is the builder for creating many PackagingDF entities in bulk.
type PackagingDFCreateBulk struct {
	config
	err      error
	builders []*PackagingDFCreate
	conflict []sql.ConflictOption
}

// Save creates the PackagingDF entities in the database.
func (pdcb *PackagingDFCreateBulk) Save(ctx context.Context) ([]*PackagingDF, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PackagingDF, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackagingDFMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PackagingDFCreateBulk) SaveX(ctx context.Context) []*PackagingDF {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *PackagingDFCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *PackagingDFCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingDF.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingDFUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pdcb *PackagingDFCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackagingDFUpsertBulk {
	pdcb.conflict = opts
	return &PackagingDFUpsertBulk{
		create: pdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingDF.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdcb *PackagingDFCreateBulk) OnConflictColumns(columns ...string) *PackagingDFUpsertBulk {
	pdcb.conflict = append(pdcb.conflict, sql.ConflictColumns(columns...))
	return &PackagingDFUpsertBulk{
		create: pdcb,
	}
}

// PackagingDFUpsertBulk is the builder for "upsert"-ing
// a bulk of PackagingDF nodes.
type PackagingDFUpsertBulk struct {
	create *PackagingDFCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackagingDF.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packagingdf.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingDFUpsertBulk) UpdateNewValues() *PackagingDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(packagingdf.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingDF.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackagingDFUpsertBulk) Ignore() *PackagingDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingDFUpsertBulk) DoNothing() *PackagingDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingDFCreateBulk.OnConflict
// documentation for more info.
func (u *PackagingDFUpsertBulk) Update(set func(*PackagingDFUpsert)) *PackagingDFUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingDFUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PackagingDFUpsertBulk) SetTenantID(v pulid.ID) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingDFUpsertBulk) UpdateTenantID() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateTenantID()
	})
}

// SetAPIType sets the "api_type" field.
func (u *PackagingDFUpsertBulk) SetAPIType(v packagingdf.APIType) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetAPIType(v)
	})
}

// UpdateAPIType sets the "api_type" field to the value that was provided on create.
func (u *PackagingDFUpsertBulk) UpdateAPIType() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateAPIType()
	})
}

// SetMaxWeight sets the "max_weight" field.
func (u *PackagingDFUpsertBulk) SetMaxWeight(v float64) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetMaxWeight(v)
	})
}

// AddMaxWeight adds v to the "max_weight" field.
func (u *PackagingDFUpsertBulk) AddMaxWeight(v float64) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.AddMaxWeight(v)
	})
}

// UpdateMaxWeight sets the "max_weight" field to the value that was provided on create.
func (u *PackagingDFUpsertBulk) UpdateMaxWeight() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateMaxWeight()
	})
}

// ClearMaxWeight clears the value of the "max_weight" field.
func (u *PackagingDFUpsertBulk) ClearMaxWeight() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.ClearMaxWeight()
	})
}

// SetMinWeight sets the "min_weight" field.
func (u *PackagingDFUpsertBulk) SetMinWeight(v float64) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetMinWeight(v)
	})
}

// AddMinWeight adds v to the "min_weight" field.
func (u *PackagingDFUpsertBulk) AddMinWeight(v float64) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.AddMinWeight(v)
	})
}

// UpdateMinWeight sets the "min_weight" field to the value that was provided on create.
func (u *PackagingDFUpsertBulk) UpdateMinWeight() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateMinWeight()
	})
}

// ClearMinWeight clears the value of the "min_weight" field.
func (u *PackagingDFUpsertBulk) ClearMinWeight() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.ClearMinWeight()
	})
}

// SetStackable sets the "stackable" field.
func (u *PackagingDFUpsertBulk) SetStackable(v bool) *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.SetStackable(v)
	})
}

// UpdateStackable sets the "stackable" field to the value that was provided on create.
func (u *PackagingDFUpsertBulk) UpdateStackable() *PackagingDFUpsertBulk {
	return u.Update(func(s *PackagingDFUpsert) {
		s.UpdateStackable()
	})
}

// Exec executes the query.
func (u *PackagingDFUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackagingDFCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingDFCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingDFUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
