// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShipmentPostNord is the model entity for the ShipmentPostNord schema.
type ShipmentPostNord struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Multiple labels. May contain unrelated shipments.
	BookingID string `json:"booking_id,omitempty"`
	// Individual label. Can be grouped to same address. Probably should not be on this ent?
	ItemID string `json:"item_id,omitempty"`
	// Shipment can contain multiple parcels to same address.
	ShipmentReferenceNo string `json:"shipment_reference_no,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentPostNordQuery when eager-loading is set.
	Edges                       ShipmentPostNordEdges `json:"edges"`
	shipment_shipment_post_nord *pulid.ID
	selectValues                sql.SelectValues
}

// ShipmentPostNordEdges holds the relations/edges for other nodes in the graph.
type ShipmentPostNordEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentPostNordEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentPostNordEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShipmentPostNord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipmentpostnord.FieldID, shipmentpostnord.FieldTenantID:
			values[i] = new(pulid.ID)
		case shipmentpostnord.FieldBookingID, shipmentpostnord.FieldItemID, shipmentpostnord.FieldShipmentReferenceNo:
			values[i] = new(sql.NullString)
		case shipmentpostnord.ForeignKeys[0]: // shipment_shipment_post_nord
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShipmentPostNord fields.
func (spn *ShipmentPostNord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipmentpostnord.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				spn.ID = *value
			}
		case shipmentpostnord.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				spn.TenantID = *value
			}
		case shipmentpostnord.FieldBookingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field booking_id", values[i])
			} else if value.Valid {
				spn.BookingID = value.String
			}
		case shipmentpostnord.FieldItemID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[i])
			} else if value.Valid {
				spn.ItemID = value.String
			}
		case shipmentpostnord.FieldShipmentReferenceNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_reference_no", values[i])
			} else if value.Valid {
				spn.ShipmentReferenceNo = value.String
			}
		case shipmentpostnord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_shipment_post_nord", values[i])
			} else if value.Valid {
				spn.shipment_shipment_post_nord = new(pulid.ID)
				*spn.shipment_shipment_post_nord = *value.S.(*pulid.ID)
			}
		default:
			spn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShipmentPostNord.
// This includes values selected through modifiers, order, etc.
func (spn *ShipmentPostNord) Value(name string) (ent.Value, error) {
	return spn.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ShipmentPostNord entity.
func (spn *ShipmentPostNord) QueryTenant() *TenantQuery {
	return NewShipmentPostNordClient(spn.config).QueryTenant(spn)
}

// QueryShipment queries the "shipment" edge of the ShipmentPostNord entity.
func (spn *ShipmentPostNord) QueryShipment() *ShipmentQuery {
	return NewShipmentPostNordClient(spn.config).QueryShipment(spn)
}

// Update returns a builder for updating this ShipmentPostNord.
// Note that you need to call ShipmentPostNord.Unwrap() before calling this method if this ShipmentPostNord
// was returned from a transaction, and the transaction was committed or rolled back.
func (spn *ShipmentPostNord) Update() *ShipmentPostNordUpdateOne {
	return NewShipmentPostNordClient(spn.config).UpdateOne(spn)
}

// Unwrap unwraps the ShipmentPostNord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spn *ShipmentPostNord) Unwrap() *ShipmentPostNord {
	_tx, ok := spn.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShipmentPostNord is not a transactional entity")
	}
	spn.config.driver = _tx.drv
	return spn
}

// String implements the fmt.Stringer.
func (spn *ShipmentPostNord) String() string {
	var builder strings.Builder
	builder.WriteString("ShipmentPostNord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", spn.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", spn.TenantID))
	builder.WriteString(", ")
	builder.WriteString("booking_id=")
	builder.WriteString(spn.BookingID)
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(spn.ItemID)
	builder.WriteString(", ")
	builder.WriteString("shipment_reference_no=")
	builder.WriteString(spn.ShipmentReferenceNo)
	builder.WriteByte(')')
	return builder.String()
}

// ShipmentPostNords is a parsable slice of ShipmentPostNord.
type ShipmentPostNords []*ShipmentPostNord
