// Code generated by ent, DO NOT EDIT.

package carrierdf

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierdf type in the database.
	Label = "carrier_df"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldAgreementNumber holds the string denoting the agreement_number field in the database.
	FieldAgreementNumber = "agreement_number"
	// FieldWhoPays holds the string denoting the who_pays field in the database.
	FieldWhoPays = "who_pays"
	// FieldTest holds the string denoting the test field in the database.
	FieldTest = "test"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrier holds the string denoting the carrier edge name in mutations.
	EdgeCarrier = "carrier"
	// Table holds the table name of the carrierdf in the database.
	Table = "carrier_dfs"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "carrier_dfs"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierTable is the table that holds the carrier relation/edge.
	CarrierTable = "carrier_dfs"
	// CarrierInverseTable is the table name for the Carrier entity.
	// It exists in this package in order to avoid circular dependency with the "carrier" package.
	CarrierInverseTable = "carriers"
	// CarrierColumn is the table column denoting the carrier relation/edge.
	CarrierColumn = "carrier_carrier_df"
)

// Columns holds all SQL columns for carrierdf fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCustomerID,
	FieldAgreementNumber,
	FieldWhoPays,
	FieldTest,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_dfs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_carrier_df",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultTest holds the default value on creation for the "test" field.
	DefaultTest bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// WhoPays defines the type for the "who_pays" enum field.
type WhoPays string

// WhoPaysPrepaid is the default value of the WhoPays enum.
const DefaultWhoPays = WhoPaysPrepaid

// WhoPays values.
const (
	WhoPaysPrepaid WhoPays = "Prepaid"
	WhoPaysCollect WhoPays = "Collect"
)

func (wp WhoPays) String() string {
	return string(wp)
}

// WhoPaysValidator is a validator for the "who_pays" field enum values. It is called by the builders before save.
func WhoPaysValidator(wp WhoPays) error {
	switch wp {
	case WhoPaysPrepaid, WhoPaysCollect:
		return nil
	default:
		return fmt.Errorf("carrierdf: invalid enum value for who_pays field: %q", wp)
	}
}

// OrderOption defines the ordering options for the CarrierDF queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByAgreementNumber orders the results by the agreement_number field.
func ByAgreementNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgreementNumber, opts...).ToFunc()
}

// ByWhoPays orders the results by the who_pays field.
func ByWhoPays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhoPays, opts...).ToFunc()
}

// ByTest orders the results by the test field.
func ByTest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTest, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierField orders the results by carrier field.
func ByCarrierField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CarrierTable, CarrierColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e WhoPays) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *WhoPays) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = WhoPays(str)
	if err := WhoPaysValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid WhoPays", str)
	}
	return nil
}
