// Code generated by ent, DO NOT EDIT.

package carrieradditionalservicepostnord

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLTE(FieldID, id))
}

// Mandatory applies equality check predicate on the "mandatory" field. It's identical to MandatoryEQ.
func Mandatory(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldMandatory, v))
}

// AllCountriesConsignor applies equality check predicate on the "all_countries_consignor" field. It's identical to AllCountriesConsignorEQ.
func AllCountriesConsignor(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldAllCountriesConsignor, v))
}

// AllCountriesConsignee applies equality check predicate on the "all_countries_consignee" field. It's identical to AllCountriesConsigneeEQ.
func AllCountriesConsignee(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldAllCountriesConsignee, v))
}

// InternalID applies equality check predicate on the "internal_id" field. It's identical to InternalIDEQ.
func InternalID(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldInternalID, v))
}

// APICode applies equality check predicate on the "api_code" field. It's identical to APICodeEQ.
func APICode(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldAPICode, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldContainsFold(FieldLabel, v))
}

// MandatoryEQ applies the EQ predicate on the "mandatory" field.
func MandatoryEQ(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldMandatory, v))
}

// MandatoryNEQ applies the NEQ predicate on the "mandatory" field.
func MandatoryNEQ(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldMandatory, v))
}

// AllCountriesConsignorEQ applies the EQ predicate on the "all_countries_consignor" field.
func AllCountriesConsignorEQ(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldAllCountriesConsignor, v))
}

// AllCountriesConsignorNEQ applies the NEQ predicate on the "all_countries_consignor" field.
func AllCountriesConsignorNEQ(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldAllCountriesConsignor, v))
}

// AllCountriesConsigneeEQ applies the EQ predicate on the "all_countries_consignee" field.
func AllCountriesConsigneeEQ(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldAllCountriesConsignee, v))
}

// AllCountriesConsigneeNEQ applies the NEQ predicate on the "all_countries_consignee" field.
func AllCountriesConsigneeNEQ(v bool) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldAllCountriesConsignee, v))
}

// InternalIDEQ applies the EQ predicate on the "internal_id" field.
func InternalIDEQ(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldInternalID, v))
}

// InternalIDNEQ applies the NEQ predicate on the "internal_id" field.
func InternalIDNEQ(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldInternalID, v))
}

// InternalIDIn applies the In predicate on the "internal_id" field.
func InternalIDIn(vs ...string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldIn(FieldInternalID, vs...))
}

// InternalIDNotIn applies the NotIn predicate on the "internal_id" field.
func InternalIDNotIn(vs ...string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNotIn(FieldInternalID, vs...))
}

// InternalIDGT applies the GT predicate on the "internal_id" field.
func InternalIDGT(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGT(FieldInternalID, v))
}

// InternalIDGTE applies the GTE predicate on the "internal_id" field.
func InternalIDGTE(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGTE(FieldInternalID, v))
}

// InternalIDLT applies the LT predicate on the "internal_id" field.
func InternalIDLT(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLT(FieldInternalID, v))
}

// InternalIDLTE applies the LTE predicate on the "internal_id" field.
func InternalIDLTE(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLTE(FieldInternalID, v))
}

// InternalIDContains applies the Contains predicate on the "internal_id" field.
func InternalIDContains(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldContains(FieldInternalID, v))
}

// InternalIDHasPrefix applies the HasPrefix predicate on the "internal_id" field.
func InternalIDHasPrefix(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldHasPrefix(FieldInternalID, v))
}

// InternalIDHasSuffix applies the HasSuffix predicate on the "internal_id" field.
func InternalIDHasSuffix(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldHasSuffix(FieldInternalID, v))
}

// InternalIDEqualFold applies the EqualFold predicate on the "internal_id" field.
func InternalIDEqualFold(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEqualFold(FieldInternalID, v))
}

// InternalIDContainsFold applies the ContainsFold predicate on the "internal_id" field.
func InternalIDContainsFold(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldContainsFold(FieldInternalID, v))
}

// APICodeEQ applies the EQ predicate on the "api_code" field.
func APICodeEQ(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEQ(FieldAPICode, v))
}

// APICodeNEQ applies the NEQ predicate on the "api_code" field.
func APICodeNEQ(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNEQ(FieldAPICode, v))
}

// APICodeIn applies the In predicate on the "api_code" field.
func APICodeIn(vs ...string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldIn(FieldAPICode, vs...))
}

// APICodeNotIn applies the NotIn predicate on the "api_code" field.
func APICodeNotIn(vs ...string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldNotIn(FieldAPICode, vs...))
}

// APICodeGT applies the GT predicate on the "api_code" field.
func APICodeGT(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGT(FieldAPICode, v))
}

// APICodeGTE applies the GTE predicate on the "api_code" field.
func APICodeGTE(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldGTE(FieldAPICode, v))
}

// APICodeLT applies the LT predicate on the "api_code" field.
func APICodeLT(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLT(FieldAPICode, v))
}

// APICodeLTE applies the LTE predicate on the "api_code" field.
func APICodeLTE(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldLTE(FieldAPICode, v))
}

// APICodeContains applies the Contains predicate on the "api_code" field.
func APICodeContains(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldContains(FieldAPICode, v))
}

// APICodeHasPrefix applies the HasPrefix predicate on the "api_code" field.
func APICodeHasPrefix(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldHasPrefix(FieldAPICode, v))
}

// APICodeHasSuffix applies the HasSuffix predicate on the "api_code" field.
func APICodeHasSuffix(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldHasSuffix(FieldAPICode, v))
}

// APICodeEqualFold applies the EqualFold predicate on the "api_code" field.
func APICodeEqualFold(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldEqualFold(FieldAPICode, v))
}

// APICodeContainsFold applies the ContainsFold predicate on the "api_code" field.
func APICodeContainsFold(v string) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.FieldContainsFold(FieldAPICode, v))
}

// HasCarrierServicePostNord applies the HasEdge predicate on the "carrier_service_post_nord" edge.
func HasCarrierServicePostNord() predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarrierServicePostNordTable, CarrierServicePostNordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServicePostNordWith applies the HasEdge predicate on the "carrier_service_post_nord" edge with a given conditions (other predicates).
func HasCarrierServicePostNordWith(preds ...predicate.CarrierServicePostNord) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := newCarrierServicePostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionPostNord applies the HasEdge predicate on the "delivery_option_post_nord" edge.
func HasDeliveryOptionPostNord() predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionPostNordTable, DeliveryOptionPostNordPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionPostNordWith applies the HasEdge predicate on the "delivery_option_post_nord" edge with a given conditions (other predicates).
func HasDeliveryOptionPostNordWith(preds ...predicate.DeliveryOptionPostNord) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := newDeliveryOptionPostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountriesConsignee applies the HasEdge predicate on the "countries_consignee" edge.
func HasCountriesConsignee() predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CountriesConsigneeTable, CountriesConsigneePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountriesConsigneeWith applies the HasEdge predicate on the "countries_consignee" edge with a given conditions (other predicates).
func HasCountriesConsigneeWith(preds ...predicate.Country) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := newCountriesConsigneeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountriesConsignor applies the HasEdge predicate on the "countries_consignor" edge.
func HasCountriesConsignor() predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CountriesConsignorTable, CountriesConsignorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountriesConsignorWith applies the HasEdge predicate on the "countries_consignor" edge with a given conditions (other predicates).
func HasCountriesConsignorWith(preds ...predicate.Country) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(func(s *sql.Selector) {
		step := newCountriesConsignorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierAdditionalServicePostNord) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierAdditionalServicePostNord) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierAdditionalServicePostNord) predicate.CarrierAdditionalServicePostNord {
	return predicate.CarrierAdditionalServicePostNord(sql.NotPredicates(p))
}
