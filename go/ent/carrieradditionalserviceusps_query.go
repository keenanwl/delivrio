// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceUSPSQuery is the builder for querying CarrierAdditionalServiceUSPS entities.
type CarrierAdditionalServiceUSPSQuery struct {
	config
	ctx                         *QueryContext
	order                       []carrieradditionalserviceusps.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.CarrierAdditionalServiceUSPS
	withCarrierServiceUSPS      *CarrierServiceUSPSQuery
	withDeliveryOptionUSPS      *DeliveryOptionUSPSQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*CarrierAdditionalServiceUSPS) error
	withNamedDeliveryOptionUSPS map[string]*DeliveryOptionUSPSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierAdditionalServiceUSPSQuery builder.
func (casuq *CarrierAdditionalServiceUSPSQuery) Where(ps ...predicate.CarrierAdditionalServiceUSPS) *CarrierAdditionalServiceUSPSQuery {
	casuq.predicates = append(casuq.predicates, ps...)
	return casuq
}

// Limit the number of records to be returned by this query.
func (casuq *CarrierAdditionalServiceUSPSQuery) Limit(limit int) *CarrierAdditionalServiceUSPSQuery {
	casuq.ctx.Limit = &limit
	return casuq
}

// Offset to start from.
func (casuq *CarrierAdditionalServiceUSPSQuery) Offset(offset int) *CarrierAdditionalServiceUSPSQuery {
	casuq.ctx.Offset = &offset
	return casuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (casuq *CarrierAdditionalServiceUSPSQuery) Unique(unique bool) *CarrierAdditionalServiceUSPSQuery {
	casuq.ctx.Unique = &unique
	return casuq
}

// Order specifies how the records should be ordered.
func (casuq *CarrierAdditionalServiceUSPSQuery) Order(o ...carrieradditionalserviceusps.OrderOption) *CarrierAdditionalServiceUSPSQuery {
	casuq.order = append(casuq.order, o...)
	return casuq
}

// QueryCarrierServiceUSPS chains the current query on the "carrier_service_usps" edge.
func (casuq *CarrierAdditionalServiceUSPSQuery) QueryCarrierServiceUSPS() *CarrierServiceUSPSQuery {
	query := (&CarrierServiceUSPSClient{config: casuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID, selector),
			sqlgraph.To(carrierserviceusps.Table, carrierserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalserviceusps.CarrierServiceUSPSTable, carrieradditionalserviceusps.CarrierServiceUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(casuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionUSPS chains the current query on the "delivery_option_usps" edge.
func (casuq *CarrierAdditionalServiceUSPSQuery) QueryDeliveryOptionUSPS() *DeliveryOptionUSPSQuery {
	query := (&DeliveryOptionUSPSClient{config: casuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID, selector),
			sqlgraph.To(deliveryoptionusps.Table, deliveryoptionusps.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalserviceusps.DeliveryOptionUSPSTable, carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierAdditionalServiceUSPS entity from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceUSPS was found.
func (casuq *CarrierAdditionalServiceUSPSQuery) First(ctx context.Context) (*CarrierAdditionalServiceUSPS, error) {
	nodes, err := casuq.Limit(1).All(setContextOp(ctx, casuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrieradditionalserviceusps.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) FirstX(ctx context.Context) *CarrierAdditionalServiceUSPS {
	node, err := casuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierAdditionalServiceUSPS ID from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceUSPS ID was found.
func (casuq *CarrierAdditionalServiceUSPSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casuq.Limit(1).IDs(setContextOp(ctx, casuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrieradditionalserviceusps.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := casuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierAdditionalServiceUSPS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceUSPS entity is found.
// Returns a *NotFoundError when no CarrierAdditionalServiceUSPS entities are found.
func (casuq *CarrierAdditionalServiceUSPSQuery) Only(ctx context.Context) (*CarrierAdditionalServiceUSPS, error) {
	nodes, err := casuq.Limit(2).All(setContextOp(ctx, casuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrieradditionalserviceusps.Label}
	default:
		return nil, &NotSingularError{carrieradditionalserviceusps.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) OnlyX(ctx context.Context) *CarrierAdditionalServiceUSPS {
	node, err := casuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierAdditionalServiceUSPS ID in the query.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceUSPS ID is found.
// Returns a *NotFoundError when no entities are found.
func (casuq *CarrierAdditionalServiceUSPSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casuq.Limit(2).IDs(setContextOp(ctx, casuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrieradditionalserviceusps.Label}
	default:
		err = &NotSingularError{carrieradditionalserviceusps.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := casuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierAdditionalServiceUSPSs.
func (casuq *CarrierAdditionalServiceUSPSQuery) All(ctx context.Context) ([]*CarrierAdditionalServiceUSPS, error) {
	ctx = setContextOp(ctx, casuq.ctx, ent.OpQueryAll)
	if err := casuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierAdditionalServiceUSPS, *CarrierAdditionalServiceUSPSQuery]()
	return withInterceptors[[]*CarrierAdditionalServiceUSPS](ctx, casuq, qr, casuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) AllX(ctx context.Context) []*CarrierAdditionalServiceUSPS {
	nodes, err := casuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierAdditionalServiceUSPS IDs.
func (casuq *CarrierAdditionalServiceUSPSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if casuq.ctx.Unique == nil && casuq.path != nil {
		casuq.Unique(true)
	}
	ctx = setContextOp(ctx, casuq.ctx, ent.OpQueryIDs)
	if err = casuq.Select(carrieradditionalserviceusps.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := casuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (casuq *CarrierAdditionalServiceUSPSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, casuq.ctx, ent.OpQueryCount)
	if err := casuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, casuq, querierCount[*CarrierAdditionalServiceUSPSQuery](), casuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) CountX(ctx context.Context) int {
	count, err := casuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (casuq *CarrierAdditionalServiceUSPSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, casuq.ctx, ent.OpQueryExist)
	switch _, err := casuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (casuq *CarrierAdditionalServiceUSPSQuery) ExistX(ctx context.Context) bool {
	exist, err := casuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierAdditionalServiceUSPSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (casuq *CarrierAdditionalServiceUSPSQuery) Clone() *CarrierAdditionalServiceUSPSQuery {
	if casuq == nil {
		return nil
	}
	return &CarrierAdditionalServiceUSPSQuery{
		config:                 casuq.config,
		ctx:                    casuq.ctx.Clone(),
		order:                  append([]carrieradditionalserviceusps.OrderOption{}, casuq.order...),
		inters:                 append([]Interceptor{}, casuq.inters...),
		predicates:             append([]predicate.CarrierAdditionalServiceUSPS{}, casuq.predicates...),
		withCarrierServiceUSPS: casuq.withCarrierServiceUSPS.Clone(),
		withDeliveryOptionUSPS: casuq.withDeliveryOptionUSPS.Clone(),
		// clone intermediate query.
		sql:  casuq.sql.Clone(),
		path: casuq.path,
	}
}

// WithCarrierServiceUSPS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (casuq *CarrierAdditionalServiceUSPSQuery) WithCarrierServiceUSPS(opts ...func(*CarrierServiceUSPSQuery)) *CarrierAdditionalServiceUSPSQuery {
	query := (&CarrierServiceUSPSClient{config: casuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casuq.withCarrierServiceUSPS = query
	return casuq
}

// WithDeliveryOptionUSPS tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (casuq *CarrierAdditionalServiceUSPSQuery) WithDeliveryOptionUSPS(opts ...func(*DeliveryOptionUSPSQuery)) *CarrierAdditionalServiceUSPSQuery {
	query := (&DeliveryOptionUSPSClient{config: casuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casuq.withDeliveryOptionUSPS = query
	return casuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceUSPS.Query().
//		GroupBy(carrieradditionalserviceusps.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (casuq *CarrierAdditionalServiceUSPSQuery) GroupBy(field string, fields ...string) *CarrierAdditionalServiceUSPSGroupBy {
	casuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierAdditionalServiceUSPSGroupBy{build: casuq}
	grbuild.flds = &casuq.ctx.Fields
	grbuild.label = carrieradditionalserviceusps.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceUSPS.Query().
//		Select(carrieradditionalserviceusps.FieldLabel).
//		Scan(ctx, &v)
func (casuq *CarrierAdditionalServiceUSPSQuery) Select(fields ...string) *CarrierAdditionalServiceUSPSSelect {
	casuq.ctx.Fields = append(casuq.ctx.Fields, fields...)
	sbuild := &CarrierAdditionalServiceUSPSSelect{CarrierAdditionalServiceUSPSQuery: casuq}
	sbuild.label = carrieradditionalserviceusps.Label
	sbuild.flds, sbuild.scan = &casuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierAdditionalServiceUSPSSelect configured with the given aggregations.
func (casuq *CarrierAdditionalServiceUSPSQuery) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceUSPSSelect {
	return casuq.Select().Aggregate(fns...)
}

func (casuq *CarrierAdditionalServiceUSPSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range casuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, casuq); err != nil {
				return err
			}
		}
	}
	for _, f := range casuq.ctx.Fields {
		if !carrieradditionalserviceusps.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if casuq.path != nil {
		prev, err := casuq.path(ctx)
		if err != nil {
			return err
		}
		casuq.sql = prev
	}
	if carrieradditionalserviceusps.Policy == nil {
		return errors.New("ent: uninitialized carrieradditionalserviceusps.Policy (forgotten import ent/runtime?)")
	}
	if err := carrieradditionalserviceusps.Policy.EvalQuery(ctx, casuq); err != nil {
		return err
	}
	return nil
}

func (casuq *CarrierAdditionalServiceUSPSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierAdditionalServiceUSPS, error) {
	var (
		nodes       = []*CarrierAdditionalServiceUSPS{}
		withFKs     = casuq.withFKs
		_spec       = casuq.querySpec()
		loadedTypes = [2]bool{
			casuq.withCarrierServiceUSPS != nil,
			casuq.withDeliveryOptionUSPS != nil,
		}
	)
	if casuq.withCarrierServiceUSPS != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalserviceusps.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierAdditionalServiceUSPS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierAdditionalServiceUSPS{config: casuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(casuq.modifiers) > 0 {
		_spec.Modifiers = casuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, casuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := casuq.withCarrierServiceUSPS; query != nil {
		if err := casuq.loadCarrierServiceUSPS(ctx, query, nodes, nil,
			func(n *CarrierAdditionalServiceUSPS, e *CarrierServiceUSPS) { n.Edges.CarrierServiceUSPS = e }); err != nil {
			return nil, err
		}
	}
	if query := casuq.withDeliveryOptionUSPS; query != nil {
		if err := casuq.loadDeliveryOptionUSPS(ctx, query, nodes,
			func(n *CarrierAdditionalServiceUSPS) { n.Edges.DeliveryOptionUSPS = []*DeliveryOptionUSPS{} },
			func(n *CarrierAdditionalServiceUSPS, e *DeliveryOptionUSPS) {
				n.Edges.DeliveryOptionUSPS = append(n.Edges.DeliveryOptionUSPS, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range casuq.withNamedDeliveryOptionUSPS {
		if err := casuq.loadDeliveryOptionUSPS(ctx, query, nodes,
			func(n *CarrierAdditionalServiceUSPS) { n.appendNamedDeliveryOptionUSPS(name) },
			func(n *CarrierAdditionalServiceUSPS, e *DeliveryOptionUSPS) { n.appendNamedDeliveryOptionUSPS(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range casuq.loadTotal {
		if err := casuq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (casuq *CarrierAdditionalServiceUSPSQuery) loadCarrierServiceUSPS(ctx context.Context, query *CarrierServiceUSPSQuery, nodes []*CarrierAdditionalServiceUSPS, init func(*CarrierAdditionalServiceUSPS), assign func(*CarrierAdditionalServiceUSPS, *CarrierServiceUSPS)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierAdditionalServiceUSPS)
	for i := range nodes {
		if nodes[i].carrier_service_usps_carrier_additional_service_usps == nil {
			continue
		}
		fk := *nodes[i].carrier_service_usps_carrier_additional_service_usps
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierserviceusps.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_usps_carrier_additional_service_usps" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (casuq *CarrierAdditionalServiceUSPSQuery) loadDeliveryOptionUSPS(ctx context.Context, query *DeliveryOptionUSPSQuery, nodes []*CarrierAdditionalServiceUSPS, init func(*CarrierAdditionalServiceUSPS), assign func(*CarrierAdditionalServiceUSPS, *DeliveryOptionUSPS)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceUSPS)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceUSPS]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalserviceusps.DeliveryOptionUSPSTable)
		s.Join(joinT).On(s.C(deliveryoptionusps.FieldID), joinT.C(carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceUSPS]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOptionUSPS](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_usps" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (casuq *CarrierAdditionalServiceUSPSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := casuq.querySpec()
	if len(casuq.modifiers) > 0 {
		_spec.Modifiers = casuq.modifiers
	}
	_spec.Node.Columns = casuq.ctx.Fields
	if len(casuq.ctx.Fields) > 0 {
		_spec.Unique = casuq.ctx.Unique != nil && *casuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, casuq.driver, _spec)
}

func (casuq *CarrierAdditionalServiceUSPSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.Columns, sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString))
	_spec.From = casuq.sql
	if unique := casuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if casuq.path != nil {
		_spec.Unique = true
	}
	if fields := casuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalserviceusps.FieldID)
		for i := range fields {
			if fields[i] != carrieradditionalserviceusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := casuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := casuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := casuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := casuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (casuq *CarrierAdditionalServiceUSPSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(casuq.driver.Dialect())
	t1 := builder.Table(carrieradditionalserviceusps.Table)
	columns := casuq.ctx.Fields
	if len(columns) == 0 {
		columns = carrieradditionalserviceusps.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if casuq.sql != nil {
		selector = casuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if casuq.ctx.Unique != nil && *casuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range casuq.predicates {
		p(selector)
	}
	for _, p := range casuq.order {
		p(selector)
	}
	if offset := casuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := casuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryOptionUSPS tells the query-builder to eager-load the nodes that are connected to the "delivery_option_usps"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casuq *CarrierAdditionalServiceUSPSQuery) WithNamedDeliveryOptionUSPS(name string, opts ...func(*DeliveryOptionUSPSQuery)) *CarrierAdditionalServiceUSPSQuery {
	query := (&DeliveryOptionUSPSClient{config: casuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casuq.withNamedDeliveryOptionUSPS == nil {
		casuq.withNamedDeliveryOptionUSPS = make(map[string]*DeliveryOptionUSPSQuery)
	}
	casuq.withNamedDeliveryOptionUSPS[name] = query
	return casuq
}

// CarrierAdditionalServiceUSPSGroupBy is the group-by builder for CarrierAdditionalServiceUSPS entities.
type CarrierAdditionalServiceUSPSGroupBy struct {
	selector
	build *CarrierAdditionalServiceUSPSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (casugb *CarrierAdditionalServiceUSPSGroupBy) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceUSPSGroupBy {
	casugb.fns = append(casugb.fns, fns...)
	return casugb
}

// Scan applies the selector query and scans the result into the given value.
func (casugb *CarrierAdditionalServiceUSPSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casugb.build.ctx, ent.OpQueryGroupBy)
	if err := casugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceUSPSQuery, *CarrierAdditionalServiceUSPSGroupBy](ctx, casugb.build, casugb, casugb.build.inters, v)
}

func (casugb *CarrierAdditionalServiceUSPSGroupBy) sqlScan(ctx context.Context, root *CarrierAdditionalServiceUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(casugb.fns))
	for _, fn := range casugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*casugb.flds)+len(casugb.fns))
		for _, f := range *casugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*casugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierAdditionalServiceUSPSSelect is the builder for selecting fields of CarrierAdditionalServiceUSPS entities.
type CarrierAdditionalServiceUSPSSelect struct {
	*CarrierAdditionalServiceUSPSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (casus *CarrierAdditionalServiceUSPSSelect) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceUSPSSelect {
	casus.fns = append(casus.fns, fns...)
	return casus
}

// Scan applies the selector query and scans the result into the given value.
func (casus *CarrierAdditionalServiceUSPSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casus.ctx, ent.OpQuerySelect)
	if err := casus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceUSPSQuery, *CarrierAdditionalServiceUSPSSelect](ctx, casus.CarrierAdditionalServiceUSPSQuery, casus, casus.inters, v)
}

func (casus *CarrierAdditionalServiceUSPSSelect) sqlScan(ctx context.Context, root *CarrierAdditionalServiceUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(casus.fns))
	for _, fn := range casus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*casus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
