// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrinterCreate is the builder for creating a Printer entity.
type PrinterCreate struct {
	config
	mutation *PrinterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pc *PrinterCreate) SetTenantID(pu pulid.ID) *PrinterCreate {
	pc.mutation.SetTenantID(pu)
	return pc
}

// SetDeviceID sets the "device_id" field.
func (pc *PrinterCreate) SetDeviceID(pu pulid.ID) *PrinterCreate {
	pc.mutation.SetDeviceID(pu)
	return pc
}

// SetName sets the "name" field.
func (pc *PrinterCreate) SetName(s string) *PrinterCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetLabelZpl sets the "label_zpl" field.
func (pc *PrinterCreate) SetLabelZpl(b bool) *PrinterCreate {
	pc.mutation.SetLabelZpl(b)
	return pc
}

// SetNillableLabelZpl sets the "label_zpl" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableLabelZpl(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetLabelZpl(*b)
	}
	return pc
}

// SetLabelPdf sets the "label_pdf" field.
func (pc *PrinterCreate) SetLabelPdf(b bool) *PrinterCreate {
	pc.mutation.SetLabelPdf(b)
	return pc
}

// SetNillableLabelPdf sets the "label_pdf" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableLabelPdf(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetLabelPdf(*b)
	}
	return pc
}

// SetLabelPng sets the "label_png" field.
func (pc *PrinterCreate) SetLabelPng(b bool) *PrinterCreate {
	pc.mutation.SetLabelPng(b)
	return pc
}

// SetNillableLabelPng sets the "label_png" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableLabelPng(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetLabelPng(*b)
	}
	return pc
}

// SetDocument sets the "document" field.
func (pc *PrinterCreate) SetDocument(b bool) *PrinterCreate {
	pc.mutation.SetDocument(b)
	return pc
}

// SetNillableDocument sets the "document" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableDocument(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetDocument(*b)
	}
	return pc
}

// SetRotate180 sets the "rotate_180" field.
func (pc *PrinterCreate) SetRotate180(b bool) *PrinterCreate {
	pc.mutation.SetRotate180(b)
	return pc
}

// SetNillableRotate180 sets the "rotate_180" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableRotate180(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetRotate180(*b)
	}
	return pc
}

// SetUseShell sets the "use_shell" field.
func (pc *PrinterCreate) SetUseShell(b bool) *PrinterCreate {
	pc.mutation.SetUseShell(b)
	return pc
}

// SetNillableUseShell sets the "use_shell" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableUseShell(b *bool) *PrinterCreate {
	if b != nil {
		pc.SetUseShell(*b)
	}
	return pc
}

// SetPrintSize sets the "print_size" field.
func (pc *PrinterCreate) SetPrintSize(ps printer.PrintSize) *PrinterCreate {
	pc.mutation.SetPrintSize(ps)
	return pc
}

// SetNillablePrintSize sets the "print_size" field if the given value is not nil.
func (pc *PrinterCreate) SetNillablePrintSize(ps *printer.PrintSize) *PrinterCreate {
	if ps != nil {
		pc.SetPrintSize(*ps)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PrinterCreate) SetCreatedAt(t time.Time) *PrinterCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableCreatedAt(t *time.Time) *PrinterCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetLastPing sets the "last_ping" field.
func (pc *PrinterCreate) SetLastPing(t time.Time) *PrinterCreate {
	pc.mutation.SetLastPing(t)
	return pc
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableLastPing(t *time.Time) *PrinterCreate {
	if t != nil {
		pc.SetLastPing(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PrinterCreate) SetID(pu pulid.ID) *PrinterCreate {
	pc.mutation.SetID(pu)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PrinterCreate) SetNillableID(pu *pulid.ID) *PrinterCreate {
	if pu != nil {
		pc.SetID(*pu)
	}
	return pc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pc *PrinterCreate) SetTenant(t *Tenant) *PrinterCreate {
	return pc.SetTenantID(t.ID)
}

// SetWorkstationID sets the "workstation" edge to the Workstation entity by ID.
func (pc *PrinterCreate) SetWorkstationID(id pulid.ID) *PrinterCreate {
	pc.mutation.SetWorkstationID(id)
	return pc
}

// SetWorkstation sets the "workstation" edge to the Workstation entity.
func (pc *PrinterCreate) SetWorkstation(w *Workstation) *PrinterCreate {
	return pc.SetWorkstationID(w.ID)
}

// AddPrintJobIDs adds the "print_jobs" edge to the PrintJob entity by IDs.
func (pc *PrinterCreate) AddPrintJobIDs(ids ...pulid.ID) *PrinterCreate {
	pc.mutation.AddPrintJobIDs(ids...)
	return pc
}

// AddPrintJobs adds the "print_jobs" edges to the PrintJob entity.
func (pc *PrinterCreate) AddPrintJobs(p ...*PrintJob) *PrinterCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPrintJobIDs(ids...)
}

// Mutation returns the PrinterMutation object of the builder.
func (pc *PrinterCreate) Mutation() *PrinterMutation {
	return pc.mutation
}

// Save creates the Printer in the database.
func (pc *PrinterCreate) Save(ctx context.Context) (*Printer, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PrinterCreate) SaveX(ctx context.Context) *Printer {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PrinterCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PrinterCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PrinterCreate) defaults() error {
	if _, ok := pc.mutation.LabelZpl(); !ok {
		v := printer.DefaultLabelZpl
		pc.mutation.SetLabelZpl(v)
	}
	if _, ok := pc.mutation.LabelPdf(); !ok {
		v := printer.DefaultLabelPdf
		pc.mutation.SetLabelPdf(v)
	}
	if _, ok := pc.mutation.LabelPng(); !ok {
		v := printer.DefaultLabelPng
		pc.mutation.SetLabelPng(v)
	}
	if _, ok := pc.mutation.Document(); !ok {
		v := printer.DefaultDocument
		pc.mutation.SetDocument(v)
	}
	if _, ok := pc.mutation.Rotate180(); !ok {
		v := printer.DefaultRotate180
		pc.mutation.SetRotate180(v)
	}
	if _, ok := pc.mutation.UseShell(); !ok {
		v := printer.DefaultUseShell
		pc.mutation.SetUseShell(v)
	}
	if _, ok := pc.mutation.PrintSize(); !ok {
		v := printer.DefaultPrintSize
		pc.mutation.SetPrintSize(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if printer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized printer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := printer.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.LastPing(); !ok {
		if printer.DefaultLastPing == nil {
			return fmt.Errorf("ent: uninitialized printer.DefaultLastPing (forgotten import ent/runtime?)")
		}
		v := printer.DefaultLastPing()
		pc.mutation.SetLastPing(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		if printer.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized printer.DefaultID (forgotten import ent/runtime?)")
		}
		v := printer.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PrinterCreate) check() error {
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Printer.tenant_id"`)}
	}
	if _, ok := pc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "Printer.device_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Printer.name"`)}
	}
	if _, ok := pc.mutation.LabelZpl(); !ok {
		return &ValidationError{Name: "label_zpl", err: errors.New(`ent: missing required field "Printer.label_zpl"`)}
	}
	if _, ok := pc.mutation.LabelPdf(); !ok {
		return &ValidationError{Name: "label_pdf", err: errors.New(`ent: missing required field "Printer.label_pdf"`)}
	}
	if _, ok := pc.mutation.LabelPng(); !ok {
		return &ValidationError{Name: "label_png", err: errors.New(`ent: missing required field "Printer.label_png"`)}
	}
	if _, ok := pc.mutation.Document(); !ok {
		return &ValidationError{Name: "document", err: errors.New(`ent: missing required field "Printer.document"`)}
	}
	if _, ok := pc.mutation.Rotate180(); !ok {
		return &ValidationError{Name: "rotate_180", err: errors.New(`ent: missing required field "Printer.rotate_180"`)}
	}
	if _, ok := pc.mutation.UseShell(); !ok {
		return &ValidationError{Name: "use_shell", err: errors.New(`ent: missing required field "Printer.use_shell"`)}
	}
	if _, ok := pc.mutation.PrintSize(); !ok {
		return &ValidationError{Name: "print_size", err: errors.New(`ent: missing required field "Printer.print_size"`)}
	}
	if v, ok := pc.mutation.PrintSize(); ok {
		if err := printer.PrintSizeValidator(v); err != nil {
			return &ValidationError{Name: "print_size", err: fmt.Errorf(`ent: validator failed for field "Printer.print_size": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Printer.created_at"`)}
	}
	if _, ok := pc.mutation.LastPing(); !ok {
		return &ValidationError{Name: "last_ping", err: errors.New(`ent: missing required field "Printer.last_ping"`)}
	}
	if len(pc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Printer.tenant"`)}
	}
	if len(pc.mutation.WorkstationIDs()) == 0 {
		return &ValidationError{Name: "workstation", err: errors.New(`ent: missing required edge "Printer.workstation"`)}
	}
	return nil
}

func (pc *PrinterCreate) sqlSave(ctx context.Context) (*Printer, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PrinterCreate) createSpec() (*Printer, *sqlgraph.CreateSpec) {
	var (
		_node = &Printer{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(printer.Table, sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.DeviceID(); ok {
		_spec.SetField(printer.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(printer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.LabelZpl(); ok {
		_spec.SetField(printer.FieldLabelZpl, field.TypeBool, value)
		_node.LabelZpl = value
	}
	if value, ok := pc.mutation.LabelPdf(); ok {
		_spec.SetField(printer.FieldLabelPdf, field.TypeBool, value)
		_node.LabelPdf = value
	}
	if value, ok := pc.mutation.LabelPng(); ok {
		_spec.SetField(printer.FieldLabelPng, field.TypeBool, value)
		_node.LabelPng = value
	}
	if value, ok := pc.mutation.Document(); ok {
		_spec.SetField(printer.FieldDocument, field.TypeBool, value)
		_node.Document = value
	}
	if value, ok := pc.mutation.Rotate180(); ok {
		_spec.SetField(printer.FieldRotate180, field.TypeBool, value)
		_node.Rotate180 = value
	}
	if value, ok := pc.mutation.UseShell(); ok {
		_spec.SetField(printer.FieldUseShell, field.TypeBool, value)
		_node.UseShell = value
	}
	if value, ok := pc.mutation.PrintSize(); ok {
		_spec.SetField(printer.FieldPrintSize, field.TypeEnum, value)
		_node.PrintSize = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(printer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.LastPing(); ok {
		_spec.SetField(printer.FieldLastPing, field.TypeTime, value)
		_node.LastPing = value
	}
	if nodes := pc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printer.TenantTable,
			Columns: []string{printer.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WorkstationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.WorkstationTable,
			Columns: []string{printer.WorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workstation_printer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PrintJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Printer.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrinterUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pc *PrinterCreate) OnConflict(opts ...sql.ConflictOption) *PrinterUpsertOne {
	pc.conflict = opts
	return &PrinterUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PrinterCreate) OnConflictColumns(columns ...string) *PrinterUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PrinterUpsertOne{
		create: pc,
	}
}

type (
	// PrinterUpsertOne is the builder for "upsert"-ing
	//  one Printer node.
	PrinterUpsertOne struct {
		create *PrinterCreate
	}

	// PrinterUpsert is the "OnConflict" setter.
	PrinterUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *PrinterUpsert) SetTenantID(v pulid.ID) *PrinterUpsert {
	u.Set(printer.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateTenantID() *PrinterUpsert {
	u.SetExcluded(printer.FieldTenantID)
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *PrinterUpsert) SetDeviceID(v pulid.ID) *PrinterUpsert {
	u.Set(printer.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateDeviceID() *PrinterUpsert {
	u.SetExcluded(printer.FieldDeviceID)
	return u
}

// SetName sets the "name" field.
func (u *PrinterUpsert) SetName(v string) *PrinterUpsert {
	u.Set(printer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateName() *PrinterUpsert {
	u.SetExcluded(printer.FieldName)
	return u
}

// SetLabelZpl sets the "label_zpl" field.
func (u *PrinterUpsert) SetLabelZpl(v bool) *PrinterUpsert {
	u.Set(printer.FieldLabelZpl, v)
	return u
}

// UpdateLabelZpl sets the "label_zpl" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateLabelZpl() *PrinterUpsert {
	u.SetExcluded(printer.FieldLabelZpl)
	return u
}

// SetLabelPdf sets the "label_pdf" field.
func (u *PrinterUpsert) SetLabelPdf(v bool) *PrinterUpsert {
	u.Set(printer.FieldLabelPdf, v)
	return u
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateLabelPdf() *PrinterUpsert {
	u.SetExcluded(printer.FieldLabelPdf)
	return u
}

// SetLabelPng sets the "label_png" field.
func (u *PrinterUpsert) SetLabelPng(v bool) *PrinterUpsert {
	u.Set(printer.FieldLabelPng, v)
	return u
}

// UpdateLabelPng sets the "label_png" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateLabelPng() *PrinterUpsert {
	u.SetExcluded(printer.FieldLabelPng)
	return u
}

// SetDocument sets the "document" field.
func (u *PrinterUpsert) SetDocument(v bool) *PrinterUpsert {
	u.Set(printer.FieldDocument, v)
	return u
}

// UpdateDocument sets the "document" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateDocument() *PrinterUpsert {
	u.SetExcluded(printer.FieldDocument)
	return u
}

// SetRotate180 sets the "rotate_180" field.
func (u *PrinterUpsert) SetRotate180(v bool) *PrinterUpsert {
	u.Set(printer.FieldRotate180, v)
	return u
}

// UpdateRotate180 sets the "rotate_180" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateRotate180() *PrinterUpsert {
	u.SetExcluded(printer.FieldRotate180)
	return u
}

// SetUseShell sets the "use_shell" field.
func (u *PrinterUpsert) SetUseShell(v bool) *PrinterUpsert {
	u.Set(printer.FieldUseShell, v)
	return u
}

// UpdateUseShell sets the "use_shell" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateUseShell() *PrinterUpsert {
	u.SetExcluded(printer.FieldUseShell)
	return u
}

// SetPrintSize sets the "print_size" field.
func (u *PrinterUpsert) SetPrintSize(v printer.PrintSize) *PrinterUpsert {
	u.Set(printer.FieldPrintSize, v)
	return u
}

// UpdatePrintSize sets the "print_size" field to the value that was provided on create.
func (u *PrinterUpsert) UpdatePrintSize() *PrinterUpsert {
	u.SetExcluded(printer.FieldPrintSize)
	return u
}

// SetLastPing sets the "last_ping" field.
func (u *PrinterUpsert) SetLastPing(v time.Time) *PrinterUpsert {
	u.Set(printer.FieldLastPing, v)
	return u
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *PrinterUpsert) UpdateLastPing() *PrinterUpsert {
	u.SetExcluded(printer.FieldLastPing)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(printer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PrinterUpsertOne) UpdateNewValues() *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(printer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(printer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Printer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PrinterUpsertOne) Ignore() *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrinterUpsertOne) DoNothing() *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrinterCreate.OnConflict
// documentation for more info.
func (u *PrinterUpsertOne) Update(set func(*PrinterUpsert)) *PrinterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrinterUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PrinterUpsertOne) SetTenantID(v pulid.ID) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateTenantID() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateTenantID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *PrinterUpsertOne) SetDeviceID(v pulid.ID) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateDeviceID() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateDeviceID()
	})
}

// SetName sets the "name" field.
func (u *PrinterUpsertOne) SetName(v string) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateName() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateName()
	})
}

// SetLabelZpl sets the "label_zpl" field.
func (u *PrinterUpsertOne) SetLabelZpl(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLabelZpl(v)
	})
}

// UpdateLabelZpl sets the "label_zpl" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateLabelZpl() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLabelZpl()
	})
}

// SetLabelPdf sets the "label_pdf" field.
func (u *PrinterUpsertOne) SetLabelPdf(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLabelPdf(v)
	})
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateLabelPdf() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLabelPdf()
	})
}

// SetLabelPng sets the "label_png" field.
func (u *PrinterUpsertOne) SetLabelPng(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLabelPng(v)
	})
}

// UpdateLabelPng sets the "label_png" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateLabelPng() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLabelPng()
	})
}

// SetDocument sets the "document" field.
func (u *PrinterUpsertOne) SetDocument(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetDocument(v)
	})
}

// UpdateDocument sets the "document" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateDocument() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateDocument()
	})
}

// SetRotate180 sets the "rotate_180" field.
func (u *PrinterUpsertOne) SetRotate180(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetRotate180(v)
	})
}

// UpdateRotate180 sets the "rotate_180" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateRotate180() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateRotate180()
	})
}

// SetUseShell sets the "use_shell" field.
func (u *PrinterUpsertOne) SetUseShell(v bool) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetUseShell(v)
	})
}

// UpdateUseShell sets the "use_shell" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateUseShell() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateUseShell()
	})
}

// SetPrintSize sets the "print_size" field.
func (u *PrinterUpsertOne) SetPrintSize(v printer.PrintSize) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetPrintSize(v)
	})
}

// UpdatePrintSize sets the "print_size" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdatePrintSize() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdatePrintSize()
	})
}

// SetLastPing sets the "last_ping" field.
func (u *PrinterUpsertOne) SetLastPing(v time.Time) *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLastPing(v)
	})
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *PrinterUpsertOne) UpdateLastPing() *PrinterUpsertOne {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLastPing()
	})
}

// Exec executes the query.
func (u *PrinterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PrinterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrinterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PrinterUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PrinterUpsertOne.ID is not supported by MySQL driver. Use PrinterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PrinterUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PrinterCreateBulk is the builder for creating many Printer entities in bulk.
type PrinterCreateBulk struct {
	config
	err      error
	builders []*PrinterCreate
	conflict []sql.ConflictOption
}

// Save creates the Printer entities in the database.
func (pcb *PrinterCreateBulk) Save(ctx context.Context) ([]*Printer, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Printer, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrinterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PrinterCreateBulk) SaveX(ctx context.Context) []*Printer {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PrinterCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PrinterCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Printer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PrinterUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PrinterCreateBulk) OnConflict(opts ...sql.ConflictOption) *PrinterUpsertBulk {
	pcb.conflict = opts
	return &PrinterUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PrinterCreateBulk) OnConflictColumns(columns ...string) *PrinterUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PrinterUpsertBulk{
		create: pcb,
	}
}

// PrinterUpsertBulk is the builder for "upsert"-ing
// a bulk of Printer nodes.
type PrinterUpsertBulk struct {
	create *PrinterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(printer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PrinterUpsertBulk) UpdateNewValues() *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(printer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(printer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Printer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PrinterUpsertBulk) Ignore() *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PrinterUpsertBulk) DoNothing() *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PrinterCreateBulk.OnConflict
// documentation for more info.
func (u *PrinterUpsertBulk) Update(set func(*PrinterUpsert)) *PrinterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PrinterUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PrinterUpsertBulk) SetTenantID(v pulid.ID) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateTenantID() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateTenantID()
	})
}

// SetDeviceID sets the "device_id" field.
func (u *PrinterUpsertBulk) SetDeviceID(v pulid.ID) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateDeviceID() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateDeviceID()
	})
}

// SetName sets the "name" field.
func (u *PrinterUpsertBulk) SetName(v string) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateName() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateName()
	})
}

// SetLabelZpl sets the "label_zpl" field.
func (u *PrinterUpsertBulk) SetLabelZpl(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLabelZpl(v)
	})
}

// UpdateLabelZpl sets the "label_zpl" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateLabelZpl() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLabelZpl()
	})
}

// SetLabelPdf sets the "label_pdf" field.
func (u *PrinterUpsertBulk) SetLabelPdf(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLabelPdf(v)
	})
}

// UpdateLabelPdf sets the "label_pdf" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateLabelPdf() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLabelPdf()
	})
}

// SetLabelPng sets the "label_png" field.
func (u *PrinterUpsertBulk) SetLabelPng(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLabelPng(v)
	})
}

// UpdateLabelPng sets the "label_png" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateLabelPng() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLabelPng()
	})
}

// SetDocument sets the "document" field.
func (u *PrinterUpsertBulk) SetDocument(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetDocument(v)
	})
}

// UpdateDocument sets the "document" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateDocument() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateDocument()
	})
}

// SetRotate180 sets the "rotate_180" field.
func (u *PrinterUpsertBulk) SetRotate180(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetRotate180(v)
	})
}

// UpdateRotate180 sets the "rotate_180" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateRotate180() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateRotate180()
	})
}

// SetUseShell sets the "use_shell" field.
func (u *PrinterUpsertBulk) SetUseShell(v bool) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetUseShell(v)
	})
}

// UpdateUseShell sets the "use_shell" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateUseShell() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateUseShell()
	})
}

// SetPrintSize sets the "print_size" field.
func (u *PrinterUpsertBulk) SetPrintSize(v printer.PrintSize) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetPrintSize(v)
	})
}

// UpdatePrintSize sets the "print_size" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdatePrintSize() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdatePrintSize()
	})
}

// SetLastPing sets the "last_ping" field.
func (u *PrinterUpsertBulk) SetLastPing(v time.Time) *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.SetLastPing(v)
	})
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *PrinterUpsertBulk) UpdateLastPing() *PrinterUpsertBulk {
	return u.Update(func(s *PrinterUpsert) {
		s.UpdateLastPing()
	})
}

// Exec executes the query.
func (u *PrinterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PrinterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PrinterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PrinterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
