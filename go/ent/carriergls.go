// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierGLS is the model entity for the CarrierGLS schema.
type CarrierGLS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ContactID holds the value of the "contact_id" field.
	ContactID string `json:"contact_id,omitempty"`
	// GLSUsername holds the value of the "gls_username" field.
	GLSUsername string `json:"gls_username,omitempty"`
	// GLSPassword holds the value of the "gls_password" field.
	GLSPassword string `json:"gls_password,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID string `json:"customer_id,omitempty"`
	// GLSCountryCode holds the value of the "gls_country_code" field.
	GLSCountryCode string `json:"gls_country_code,omitempty"`
	// SyncShipmentCancellation holds the value of the "sync_shipment_cancellation" field.
	SyncShipmentCancellation bool `json:"sync_shipment_cancellation,omitempty"`
	// PrintErrorOnLabel holds the value of the "print_error_on_label" field.
	PrintErrorOnLabel bool `json:"print_error_on_label,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierGLSQuery when eager-loading is set.
	Edges               CarrierGLSEdges `json:"edges"`
	carrier_carrier_gls *pulid.ID
	selectValues        sql.SelectValues
}

// CarrierGLSEdges holds the relations/edges for other nodes in the graph.
type CarrierGLSEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Carrier holds the value of the carrier edge.
	Carrier *Carrier `json:"carrier,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierGLSEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierGLSEdges) CarrierOrErr() (*Carrier, error) {
	if e.Carrier != nil {
		return e.Carrier, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrier.Label}
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierGLS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carriergls.FieldID, carriergls.FieldTenantID:
			values[i] = new(pulid.ID)
		case carriergls.FieldSyncShipmentCancellation, carriergls.FieldPrintErrorOnLabel:
			values[i] = new(sql.NullBool)
		case carriergls.FieldContactID, carriergls.FieldGLSUsername, carriergls.FieldGLSPassword, carriergls.FieldCustomerID, carriergls.FieldGLSCountryCode:
			values[i] = new(sql.NullString)
		case carriergls.ForeignKeys[0]: // carrier_carrier_gls
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierGLS fields.
func (cg *CarrierGLS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carriergls.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cg.ID = *value
			}
		case carriergls.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				cg.TenantID = *value
			}
		case carriergls.FieldContactID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_id", values[i])
			} else if value.Valid {
				cg.ContactID = value.String
			}
		case carriergls.FieldGLSUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gls_username", values[i])
			} else if value.Valid {
				cg.GLSUsername = value.String
			}
		case carriergls.FieldGLSPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gls_password", values[i])
			} else if value.Valid {
				cg.GLSPassword = value.String
			}
		case carriergls.FieldCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				cg.CustomerID = value.String
			}
		case carriergls.FieldGLSCountryCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gls_country_code", values[i])
			} else if value.Valid {
				cg.GLSCountryCode = value.String
			}
		case carriergls.FieldSyncShipmentCancellation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sync_shipment_cancellation", values[i])
			} else if value.Valid {
				cg.SyncShipmentCancellation = value.Bool
			}
		case carriergls.FieldPrintErrorOnLabel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field print_error_on_label", values[i])
			} else if value.Valid {
				cg.PrintErrorOnLabel = value.Bool
			}
		case carriergls.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_carrier_gls", values[i])
			} else if value.Valid {
				cg.carrier_carrier_gls = new(pulid.ID)
				*cg.carrier_carrier_gls = *value.S.(*pulid.ID)
			}
		default:
			cg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierGLS.
// This includes values selected through modifiers, order, etc.
func (cg *CarrierGLS) Value(name string) (ent.Value, error) {
	return cg.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CarrierGLS entity.
func (cg *CarrierGLS) QueryTenant() *TenantQuery {
	return NewCarrierGLSClient(cg.config).QueryTenant(cg)
}

// QueryCarrier queries the "carrier" edge of the CarrierGLS entity.
func (cg *CarrierGLS) QueryCarrier() *CarrierQuery {
	return NewCarrierGLSClient(cg.config).QueryCarrier(cg)
}

// Update returns a builder for updating this CarrierGLS.
// Note that you need to call CarrierGLS.Unwrap() before calling this method if this CarrierGLS
// was returned from a transaction, and the transaction was committed or rolled back.
func (cg *CarrierGLS) Update() *CarrierGLSUpdateOne {
	return NewCarrierGLSClient(cg.config).UpdateOne(cg)
}

// Unwrap unwraps the CarrierGLS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cg *CarrierGLS) Unwrap() *CarrierGLS {
	_tx, ok := cg.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierGLS is not a transactional entity")
	}
	cg.config.driver = _tx.drv
	return cg
}

// String implements the fmt.Stringer.
func (cg *CarrierGLS) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierGLS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cg.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cg.TenantID))
	builder.WriteString(", ")
	builder.WriteString("contact_id=")
	builder.WriteString(cg.ContactID)
	builder.WriteString(", ")
	builder.WriteString("gls_username=")
	builder.WriteString(cg.GLSUsername)
	builder.WriteString(", ")
	builder.WriteString("gls_password=")
	builder.WriteString(cg.GLSPassword)
	builder.WriteString(", ")
	builder.WriteString("customer_id=")
	builder.WriteString(cg.CustomerID)
	builder.WriteString(", ")
	builder.WriteString("gls_country_code=")
	builder.WriteString(cg.GLSCountryCode)
	builder.WriteString(", ")
	builder.WriteString("sync_shipment_cancellation=")
	builder.WriteString(fmt.Sprintf("%v", cg.SyncShipmentCancellation))
	builder.WriteString(", ")
	builder.WriteString("print_error_on_label=")
	builder.WriteString(fmt.Sprintf("%v", cg.PrintErrorOnLabel))
	builder.WriteByte(')')
	return builder.String()
}

// CarrierGLSs is a parsable slice of CarrierGLS.
type CarrierGLSs []*CarrierGLS
