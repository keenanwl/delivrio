// Code generated by ent, DO NOT EDIT.

package deliveryruleconstraintgroup

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deliveryruleconstraintgroup type in the database.
	Label = "delivery_rule_constraint_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldConstraintLogic holds the string denoting the constraint_logic field in the database.
	FieldConstraintLogic = "constraint_logic"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeDeliveryRuleConstraints holds the string denoting the delivery_rule_constraints edge name in mutations.
	EdgeDeliveryRuleConstraints = "delivery_rule_constraints"
	// EdgeDeliveryRule holds the string denoting the delivery_rule edge name in mutations.
	EdgeDeliveryRule = "delivery_rule"
	// Table holds the table name of the deliveryruleconstraintgroup in the database.
	Table = "delivery_rule_constraint_groups"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "delivery_rule_constraint_groups"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// DeliveryRuleConstraintsTable is the table that holds the delivery_rule_constraints relation/edge.
	DeliveryRuleConstraintsTable = "delivery_rule_constraints"
	// DeliveryRuleConstraintsInverseTable is the table name for the DeliveryRuleConstraint entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryruleconstraint" package.
	DeliveryRuleConstraintsInverseTable = "delivery_rule_constraints"
	// DeliveryRuleConstraintsColumn is the table column denoting the delivery_rule_constraints relation/edge.
	DeliveryRuleConstraintsColumn = "delivery_rule_constraint_group_delivery_rule_constraints"
	// DeliveryRuleTable is the table that holds the delivery_rule relation/edge.
	DeliveryRuleTable = "delivery_rule_constraint_groups"
	// DeliveryRuleInverseTable is the table name for the DeliveryRule entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryrule" package.
	DeliveryRuleInverseTable = "delivery_rules"
	// DeliveryRuleColumn is the table column denoting the delivery_rule relation/edge.
	DeliveryRuleColumn = "delivery_rule_delivery_rule_constraint_group"
)

// Columns holds all SQL columns for deliveryruleconstraintgroup fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldConstraintLogic,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "delivery_rule_constraint_groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"delivery_rule_delivery_rule_constraint_group",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// ConstraintLogic defines the type for the "constraint_logic" enum field.
type ConstraintLogic string

// ConstraintLogicAnd is the default value of the ConstraintLogic enum.
const DefaultConstraintLogic = ConstraintLogicAnd

// ConstraintLogic values.
const (
	ConstraintLogicAnd ConstraintLogic = "and"
	ConstraintLogicOr  ConstraintLogic = "or"
)

func (cl ConstraintLogic) String() string {
	return string(cl)
}

// ConstraintLogicValidator is a validator for the "constraint_logic" field enum values. It is called by the builders before save.
func ConstraintLogicValidator(cl ConstraintLogic) error {
	switch cl {
	case ConstraintLogicAnd, ConstraintLogicOr:
		return nil
	default:
		return fmt.Errorf("deliveryruleconstraintgroup: invalid enum value for constraint_logic field: %q", cl)
	}
}

// OrderOption defines the ordering options for the DeliveryRuleConstraintGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByConstraintLogic orders the results by the constraint_logic field.
func ByConstraintLogic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConstraintLogic, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryRuleConstraintsCount orders the results by delivery_rule_constraints count.
func ByDeliveryRuleConstraintsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryRuleConstraintsStep(), opts...)
	}
}

// ByDeliveryRuleConstraints orders the results by delivery_rule_constraints terms.
func ByDeliveryRuleConstraints(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleConstraintsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryRuleField orders the results by delivery_rule field.
func ByDeliveryRuleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newDeliveryRuleConstraintsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleConstraintsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DeliveryRuleConstraintsTable, DeliveryRuleConstraintsColumn),
	)
}
func newDeliveryRuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeliveryRuleTable, DeliveryRuleColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ConstraintLogic) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ConstraintLogic) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ConstraintLogic(str)
	if err := ConstraintLogicValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ConstraintLogic", str)
	}
	return nil
}
