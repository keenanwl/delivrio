// Code generated by ent, DO NOT EDIT.

package businesshoursperiod

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldLTE(FieldID, id))
}

// Opening applies equality check predicate on the "opening" field. It's identical to OpeningEQ.
func Opening(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldOpening, v))
}

// Closing applies equality check predicate on the "closing" field. It's identical to ClosingEQ.
func Closing(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldClosing, v))
}

// DayOfWeekEQ applies the EQ predicate on the "day_of_week" field.
func DayOfWeekEQ(v DayOfWeek) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldDayOfWeek, v))
}

// DayOfWeekNEQ applies the NEQ predicate on the "day_of_week" field.
func DayOfWeekNEQ(v DayOfWeek) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNEQ(FieldDayOfWeek, v))
}

// DayOfWeekIn applies the In predicate on the "day_of_week" field.
func DayOfWeekIn(vs ...DayOfWeek) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldIn(FieldDayOfWeek, vs...))
}

// DayOfWeekNotIn applies the NotIn predicate on the "day_of_week" field.
func DayOfWeekNotIn(vs ...DayOfWeek) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNotIn(FieldDayOfWeek, vs...))
}

// OpeningEQ applies the EQ predicate on the "opening" field.
func OpeningEQ(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldOpening, v))
}

// OpeningNEQ applies the NEQ predicate on the "opening" field.
func OpeningNEQ(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNEQ(FieldOpening, v))
}

// OpeningIn applies the In predicate on the "opening" field.
func OpeningIn(vs ...time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldIn(FieldOpening, vs...))
}

// OpeningNotIn applies the NotIn predicate on the "opening" field.
func OpeningNotIn(vs ...time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNotIn(FieldOpening, vs...))
}

// OpeningGT applies the GT predicate on the "opening" field.
func OpeningGT(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldGT(FieldOpening, v))
}

// OpeningGTE applies the GTE predicate on the "opening" field.
func OpeningGTE(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldGTE(FieldOpening, v))
}

// OpeningLT applies the LT predicate on the "opening" field.
func OpeningLT(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldLT(FieldOpening, v))
}

// OpeningLTE applies the LTE predicate on the "opening" field.
func OpeningLTE(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldLTE(FieldOpening, v))
}

// ClosingEQ applies the EQ predicate on the "closing" field.
func ClosingEQ(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldEQ(FieldClosing, v))
}

// ClosingNEQ applies the NEQ predicate on the "closing" field.
func ClosingNEQ(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNEQ(FieldClosing, v))
}

// ClosingIn applies the In predicate on the "closing" field.
func ClosingIn(vs ...time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldIn(FieldClosing, vs...))
}

// ClosingNotIn applies the NotIn predicate on the "closing" field.
func ClosingNotIn(vs ...time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldNotIn(FieldClosing, vs...))
}

// ClosingGT applies the GT predicate on the "closing" field.
func ClosingGT(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldGT(FieldClosing, v))
}

// ClosingGTE applies the GTE predicate on the "closing" field.
func ClosingGTE(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldGTE(FieldClosing, v))
}

// ClosingLT applies the LT predicate on the "closing" field.
func ClosingLT(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldLT(FieldClosing, v))
}

// ClosingLTE applies the LTE predicate on the "closing" field.
func ClosingLTE(v time.Time) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.FieldLTE(FieldClosing, v))
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BusinessHoursPeriod) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BusinessHoursPeriod) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BusinessHoursPeriod) predicate.BusinessHoursPeriod {
	return predicate.BusinessHoursPeriod(sql.NotPredicates(p))
}
