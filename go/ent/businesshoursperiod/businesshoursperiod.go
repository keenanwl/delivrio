// Code generated by ent, DO NOT EDIT.

package businesshoursperiod

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the businesshoursperiod type in the database.
	Label = "business_hours_period"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDayOfWeek holds the string denoting the day_of_week field in the database.
	FieldDayOfWeek = "day_of_week"
	// FieldOpening holds the string denoting the opening field in the database.
	FieldOpening = "opening"
	// FieldClosing holds the string denoting the closing field in the database.
	FieldClosing = "closing"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// Table holds the table name of the businesshoursperiod in the database.
	Table = "business_hours_periods"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "business_hours_periods"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "parcel_shop_business_hours_period"
)

// Columns holds all SQL columns for businesshoursperiod fields.
var Columns = []string{
	FieldID,
	FieldDayOfWeek,
	FieldOpening,
	FieldClosing,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "business_hours_periods"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"parcel_shop_business_hours_period",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// DayOfWeek defines the type for the "day_of_week" enum field.
type DayOfWeek string

// DayOfWeek values.
const (
	DayOfWeekMONDAY    DayOfWeek = "MONDAY"
	DayOfWeekTUESDAY   DayOfWeek = "TUESDAY"
	DayOfWeekWEDNESDAY DayOfWeek = "WEDNESDAY"
	DayOfWeekTHURSDAY  DayOfWeek = "THURSDAY"
	DayOfWeekFRIDAY    DayOfWeek = "FRIDAY"
	DayOfWeekSATURDAY  DayOfWeek = "SATURDAY"
	DayOfWeekSUNDAY    DayOfWeek = "SUNDAY"
)

func (dow DayOfWeek) String() string {
	return string(dow)
}

// DayOfWeekValidator is a validator for the "day_of_week" field enum values. It is called by the builders before save.
func DayOfWeekValidator(dow DayOfWeek) error {
	switch dow {
	case DayOfWeekMONDAY, DayOfWeekTUESDAY, DayOfWeekWEDNESDAY, DayOfWeekTHURSDAY, DayOfWeekFRIDAY, DayOfWeekSATURDAY, DayOfWeekSUNDAY:
		return nil
	default:
		return fmt.Errorf("businesshoursperiod: invalid enum value for day_of_week field: %q", dow)
	}
}

// OrderOption defines the ordering options for the BusinessHoursPeriod queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDayOfWeek orders the results by the day_of_week field.
func ByDayOfWeek(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDayOfWeek, opts...).ToFunc()
}

// ByOpening orders the results by the opening field.
func ByOpening(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpening, opts...).ToFunc()
}

// ByClosing orders the results by the closing field.
func ByClosing(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClosing, opts...).ToFunc()
}

// ByParcelShopField orders the results by parcel_shop field.
func ByParcelShopField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), sql.OrderByField(field, opts...))
	}
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParcelShopTable, ParcelShopColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DayOfWeek) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DayOfWeek) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DayOfWeek(str)
	if err := DayOfWeekValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DayOfWeek", str)
	}
	return nil
}
