// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderSenderCreate is the builder for creating a OrderSender entity.
type OrderSenderCreate struct {
	config
	mutation *OrderSenderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (osc *OrderSenderCreate) SetTenantID(pu pulid.ID) *OrderSenderCreate {
	osc.mutation.SetTenantID(pu)
	return osc
}

// SetUniquenessID sets the "uniqueness_id" field.
func (osc *OrderSenderCreate) SetUniquenessID(s string) *OrderSenderCreate {
	osc.mutation.SetUniquenessID(s)
	return osc
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (osc *OrderSenderCreate) SetNillableUniquenessID(s *string) *OrderSenderCreate {
	if s != nil {
		osc.SetUniquenessID(*s)
	}
	return osc
}

// SetFirstName sets the "first_name" field.
func (osc *OrderSenderCreate) SetFirstName(s string) *OrderSenderCreate {
	osc.mutation.SetFirstName(s)
	return osc
}

// SetLastName sets the "last_name" field.
func (osc *OrderSenderCreate) SetLastName(s string) *OrderSenderCreate {
	osc.mutation.SetLastName(s)
	return osc
}

// SetEmail sets the "email" field.
func (osc *OrderSenderCreate) SetEmail(s string) *OrderSenderCreate {
	osc.mutation.SetEmail(s)
	return osc
}

// SetPhoneNumber sets the "phone_number" field.
func (osc *OrderSenderCreate) SetPhoneNumber(s string) *OrderSenderCreate {
	osc.mutation.SetPhoneNumber(s)
	return osc
}

// SetVatNumber sets the "vat_number" field.
func (osc *OrderSenderCreate) SetVatNumber(s string) *OrderSenderCreate {
	osc.mutation.SetVatNumber(s)
	return osc
}

// SetID sets the "id" field.
func (osc *OrderSenderCreate) SetID(pu pulid.ID) *OrderSenderCreate {
	osc.mutation.SetID(pu)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OrderSenderCreate) SetNillableID(pu *pulid.ID) *OrderSenderCreate {
	if pu != nil {
		osc.SetID(*pu)
	}
	return osc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (osc *OrderSenderCreate) SetTenant(t *Tenant) *OrderSenderCreate {
	return osc.SetTenantID(t.ID)
}

// Mutation returns the OrderSenderMutation object of the builder.
func (osc *OrderSenderCreate) Mutation() *OrderSenderMutation {
	return osc.mutation
}

// Save creates the OrderSender in the database.
func (osc *OrderSenderCreate) Save(ctx context.Context) (*OrderSender, error) {
	if err := osc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrderSenderCreate) SaveX(ctx context.Context) *OrderSender {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrderSenderCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrderSenderCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrderSenderCreate) defaults() error {
	if _, ok := osc.mutation.ID(); !ok {
		if ordersender.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized ordersender.DefaultID (forgotten import ent/runtime?)")
		}
		v := ordersender.DefaultID()
		osc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrderSenderCreate) check() error {
	if _, ok := osc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OrderSender.tenant_id"`)}
	}
	if _, ok := osc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "OrderSender.first_name"`)}
	}
	if _, ok := osc.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "OrderSender.last_name"`)}
	}
	if _, ok := osc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "OrderSender.email"`)}
	}
	if _, ok := osc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "OrderSender.phone_number"`)}
	}
	if _, ok := osc.mutation.VatNumber(); !ok {
		return &ValidationError{Name: "vat_number", err: errors.New(`ent: missing required field "OrderSender.vat_number"`)}
	}
	if len(osc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "OrderSender.tenant"`)}
	}
	return nil
}

func (osc *OrderSenderCreate) sqlSave(ctx context.Context) (*OrderSender, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OrderSenderCreate) createSpec() (*OrderSender, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderSender{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(ordersender.Table, sqlgraph.NewFieldSpec(ordersender.FieldID, field.TypeString))
	)
	_spec.OnConflict = osc.conflict
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := osc.mutation.UniquenessID(); ok {
		_spec.SetField(ordersender.FieldUniquenessID, field.TypeString, value)
		_node.UniquenessID = value
	}
	if value, ok := osc.mutation.FirstName(); ok {
		_spec.SetField(ordersender.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := osc.mutation.LastName(); ok {
		_spec.SetField(ordersender.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := osc.mutation.Email(); ok {
		_spec.SetField(ordersender.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := osc.mutation.PhoneNumber(); ok {
		_spec.SetField(ordersender.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := osc.mutation.VatNumber(); ok {
		_spec.SetField(ordersender.FieldVatNumber, field.TypeString, value)
		_node.VatNumber = value
	}
	if nodes := osc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordersender.TenantTable,
			Columns: []string{ordersender.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderSender.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderSenderUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (osc *OrderSenderCreate) OnConflict(opts ...sql.ConflictOption) *OrderSenderUpsertOne {
	osc.conflict = opts
	return &OrderSenderUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderSender.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osc *OrderSenderCreate) OnConflictColumns(columns ...string) *OrderSenderUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OrderSenderUpsertOne{
		create: osc,
	}
}

type (
	// OrderSenderUpsertOne is the builder for "upsert"-ing
	//  one OrderSender node.
	OrderSenderUpsertOne struct {
		create *OrderSenderCreate
	}

	// OrderSenderUpsert is the "OnConflict" setter.
	OrderSenderUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *OrderSenderUpsert) SetTenantID(v pulid.ID) *OrderSenderUpsert {
	u.Set(ordersender.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdateTenantID() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldTenantID)
	return u
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *OrderSenderUpsert) SetUniquenessID(v string) *OrderSenderUpsert {
	u.Set(ordersender.FieldUniquenessID, v)
	return u
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdateUniquenessID() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldUniquenessID)
	return u
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *OrderSenderUpsert) ClearUniquenessID() *OrderSenderUpsert {
	u.SetNull(ordersender.FieldUniquenessID)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *OrderSenderUpsert) SetFirstName(v string) *OrderSenderUpsert {
	u.Set(ordersender.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdateFirstName() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *OrderSenderUpsert) SetLastName(v string) *OrderSenderUpsert {
	u.Set(ordersender.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdateLastName() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldLastName)
	return u
}

// SetEmail sets the "email" field.
func (u *OrderSenderUpsert) SetEmail(v string) *OrderSenderUpsert {
	u.Set(ordersender.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdateEmail() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldEmail)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *OrderSenderUpsert) SetPhoneNumber(v string) *OrderSenderUpsert {
	u.Set(ordersender.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdatePhoneNumber() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldPhoneNumber)
	return u
}

// SetVatNumber sets the "vat_number" field.
func (u *OrderSenderUpsert) SetVatNumber(v string) *OrderSenderUpsert {
	u.Set(ordersender.FieldVatNumber, v)
	return u
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *OrderSenderUpsert) UpdateVatNumber() *OrderSenderUpsert {
	u.SetExcluded(ordersender.FieldVatNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderSender.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordersender.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderSenderUpsertOne) UpdateNewValues() *OrderSenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ordersender.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderSender.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderSenderUpsertOne) Ignore() *OrderSenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderSenderUpsertOne) DoNothing() *OrderSenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderSenderCreate.OnConflict
// documentation for more info.
func (u *OrderSenderUpsertOne) Update(set func(*OrderSenderUpsert)) *OrderSenderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderSenderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OrderSenderUpsertOne) SetTenantID(v pulid.ID) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdateTenantID() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateTenantID()
	})
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *OrderSenderUpsertOne) SetUniquenessID(v string) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetUniquenessID(v)
	})
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdateUniquenessID() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateUniquenessID()
	})
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *OrderSenderUpsertOne) ClearUniquenessID() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.ClearUniquenessID()
	})
}

// SetFirstName sets the "first_name" field.
func (u *OrderSenderUpsertOne) SetFirstName(v string) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdateFirstName() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *OrderSenderUpsertOne) SetLastName(v string) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdateLastName() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateLastName()
	})
}

// SetEmail sets the "email" field.
func (u *OrderSenderUpsertOne) SetEmail(v string) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdateEmail() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateEmail()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *OrderSenderUpsertOne) SetPhoneNumber(v string) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdatePhoneNumber() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetVatNumber sets the "vat_number" field.
func (u *OrderSenderUpsertOne) SetVatNumber(v string) *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetVatNumber(v)
	})
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *OrderSenderUpsertOne) UpdateVatNumber() *OrderSenderUpsertOne {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateVatNumber()
	})
}

// Exec executes the query.
func (u *OrderSenderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderSenderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderSenderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderSenderUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderSenderUpsertOne.ID is not supported by MySQL driver. Use OrderSenderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderSenderUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderSenderCreateBulk is the builder for creating many OrderSender entities in bulk.
type OrderSenderCreateBulk struct {
	config
	err      error
	builders []*OrderSenderCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderSender entities in the database.
func (oscb *OrderSenderCreateBulk) Save(ctx context.Context) ([]*OrderSender, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrderSender, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderSenderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrderSenderCreateBulk) SaveX(ctx context.Context) []*OrderSender {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrderSenderCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrderSenderCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderSender.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderSenderUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (oscb *OrderSenderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderSenderUpsertBulk {
	oscb.conflict = opts
	return &OrderSenderUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderSender.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oscb *OrderSenderCreateBulk) OnConflictColumns(columns ...string) *OrderSenderUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OrderSenderUpsertBulk{
		create: oscb,
	}
}

// OrderSenderUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderSender nodes.
type OrderSenderUpsertBulk struct {
	create *OrderSenderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderSender.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ordersender.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderSenderUpsertBulk) UpdateNewValues() *OrderSenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ordersender.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderSender.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderSenderUpsertBulk) Ignore() *OrderSenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderSenderUpsertBulk) DoNothing() *OrderSenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderSenderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderSenderUpsertBulk) Update(set func(*OrderSenderUpsert)) *OrderSenderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderSenderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OrderSenderUpsertBulk) SetTenantID(v pulid.ID) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdateTenantID() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateTenantID()
	})
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *OrderSenderUpsertBulk) SetUniquenessID(v string) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetUniquenessID(v)
	})
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdateUniquenessID() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateUniquenessID()
	})
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *OrderSenderUpsertBulk) ClearUniquenessID() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.ClearUniquenessID()
	})
}

// SetFirstName sets the "first_name" field.
func (u *OrderSenderUpsertBulk) SetFirstName(v string) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdateFirstName() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *OrderSenderUpsertBulk) SetLastName(v string) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdateLastName() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateLastName()
	})
}

// SetEmail sets the "email" field.
func (u *OrderSenderUpsertBulk) SetEmail(v string) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdateEmail() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateEmail()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *OrderSenderUpsertBulk) SetPhoneNumber(v string) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdatePhoneNumber() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetVatNumber sets the "vat_number" field.
func (u *OrderSenderUpsertBulk) SetVatNumber(v string) *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.SetVatNumber(v)
	})
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *OrderSenderUpsertBulk) UpdateVatNumber() *OrderSenderUpsertBulk {
	return u.Update(func(s *OrderSenderUpsert) {
		s.UpdateVatNumber()
	})
}

// Exec executes the query.
func (u *OrderSenderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderSenderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderSenderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderSenderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
