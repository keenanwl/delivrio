// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentEasyPostCreate is the builder for creating a ShipmentEasyPost entity.
type ShipmentEasyPostCreate struct {
	config
	mutation *ShipmentEasyPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sepc *ShipmentEasyPostCreate) SetTenantID(pu pulid.ID) *ShipmentEasyPostCreate {
	sepc.mutation.SetTenantID(pu)
	return sepc
}

// SetTrackingNumber sets the "tracking_number" field.
func (sepc *ShipmentEasyPostCreate) SetTrackingNumber(s string) *ShipmentEasyPostCreate {
	sepc.mutation.SetTrackingNumber(s)
	return sepc
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (sepc *ShipmentEasyPostCreate) SetNillableTrackingNumber(s *string) *ShipmentEasyPostCreate {
	if s != nil {
		sepc.SetTrackingNumber(*s)
	}
	return sepc
}

// SetEpShipmentID sets the "ep_shipment_id" field.
func (sepc *ShipmentEasyPostCreate) SetEpShipmentID(s string) *ShipmentEasyPostCreate {
	sepc.mutation.SetEpShipmentID(s)
	return sepc
}

// SetNillableEpShipmentID sets the "ep_shipment_id" field if the given value is not nil.
func (sepc *ShipmentEasyPostCreate) SetNillableEpShipmentID(s *string) *ShipmentEasyPostCreate {
	if s != nil {
		sepc.SetEpShipmentID(*s)
	}
	return sepc
}

// SetRate sets the "rate" field.
func (sepc *ShipmentEasyPostCreate) SetRate(f float64) *ShipmentEasyPostCreate {
	sepc.mutation.SetRate(f)
	return sepc
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (sepc *ShipmentEasyPostCreate) SetNillableRate(f *float64) *ShipmentEasyPostCreate {
	if f != nil {
		sepc.SetRate(*f)
	}
	return sepc
}

// SetEstDeliveryDate sets the "est_delivery_date" field.
func (sepc *ShipmentEasyPostCreate) SetEstDeliveryDate(t time.Time) *ShipmentEasyPostCreate {
	sepc.mutation.SetEstDeliveryDate(t)
	return sepc
}

// SetNillableEstDeliveryDate sets the "est_delivery_date" field if the given value is not nil.
func (sepc *ShipmentEasyPostCreate) SetNillableEstDeliveryDate(t *time.Time) *ShipmentEasyPostCreate {
	if t != nil {
		sepc.SetEstDeliveryDate(*t)
	}
	return sepc
}

// SetID sets the "id" field.
func (sepc *ShipmentEasyPostCreate) SetID(pu pulid.ID) *ShipmentEasyPostCreate {
	sepc.mutation.SetID(pu)
	return sepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sepc *ShipmentEasyPostCreate) SetNillableID(pu *pulid.ID) *ShipmentEasyPostCreate {
	if pu != nil {
		sepc.SetID(*pu)
	}
	return sepc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sepc *ShipmentEasyPostCreate) SetTenant(t *Tenant) *ShipmentEasyPostCreate {
	return sepc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sepc *ShipmentEasyPostCreate) SetShipmentID(id pulid.ID) *ShipmentEasyPostCreate {
	sepc.mutation.SetShipmentID(id)
	return sepc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sepc *ShipmentEasyPostCreate) SetShipment(s *Shipment) *ShipmentEasyPostCreate {
	return sepc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentEasyPostMutation object of the builder.
func (sepc *ShipmentEasyPostCreate) Mutation() *ShipmentEasyPostMutation {
	return sepc.mutation
}

// Save creates the ShipmentEasyPost in the database.
func (sepc *ShipmentEasyPostCreate) Save(ctx context.Context) (*ShipmentEasyPost, error) {
	if err := sepc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sepc.sqlSave, sepc.mutation, sepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sepc *ShipmentEasyPostCreate) SaveX(ctx context.Context) *ShipmentEasyPost {
	v, err := sepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sepc *ShipmentEasyPostCreate) Exec(ctx context.Context) error {
	_, err := sepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sepc *ShipmentEasyPostCreate) ExecX(ctx context.Context) {
	if err := sepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sepc *ShipmentEasyPostCreate) defaults() error {
	if _, ok := sepc.mutation.ID(); !ok {
		if shipmenteasypost.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmenteasypost.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmenteasypost.DefaultID()
		sepc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sepc *ShipmentEasyPostCreate) check() error {
	if _, ok := sepc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentEasyPost.tenant_id"`)}
	}
	if len(sepc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentEasyPost.tenant"`)}
	}
	if len(sepc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentEasyPost.shipment"`)}
	}
	return nil
}

func (sepc *ShipmentEasyPostCreate) sqlSave(ctx context.Context) (*ShipmentEasyPost, error) {
	if err := sepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sepc.mutation.id = &_node.ID
	sepc.mutation.done = true
	return _node, nil
}

func (sepc *ShipmentEasyPostCreate) createSpec() (*ShipmentEasyPost, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentEasyPost{config: sepc.config}
		_spec = sqlgraph.NewCreateSpec(shipmenteasypost.Table, sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString))
	)
	_spec.OnConflict = sepc.conflict
	if id, ok := sepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sepc.mutation.TrackingNumber(); ok {
		_spec.SetField(shipmenteasypost.FieldTrackingNumber, field.TypeString, value)
		_node.TrackingNumber = value
	}
	if value, ok := sepc.mutation.EpShipmentID(); ok {
		_spec.SetField(shipmenteasypost.FieldEpShipmentID, field.TypeString, value)
		_node.EpShipmentID = value
	}
	if value, ok := sepc.mutation.Rate(); ok {
		_spec.SetField(shipmenteasypost.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := sepc.mutation.EstDeliveryDate(); ok {
		_spec.SetField(shipmenteasypost.FieldEstDeliveryDate, field.TypeTime, value)
		_node.EstDeliveryDate = value
	}
	if nodes := sepc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenteasypost.TenantTable,
			Columns: []string{shipmenteasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sepc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmenteasypost.ShipmentTable,
			Columns: []string{shipmenteasypost.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_easy_post = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentEasyPost.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentEasyPostUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sepc *ShipmentEasyPostCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentEasyPostUpsertOne {
	sepc.conflict = opts
	return &ShipmentEasyPostUpsertOne{
		create: sepc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sepc *ShipmentEasyPostCreate) OnConflictColumns(columns ...string) *ShipmentEasyPostUpsertOne {
	sepc.conflict = append(sepc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentEasyPostUpsertOne{
		create: sepc,
	}
}

type (
	// ShipmentEasyPostUpsertOne is the builder for "upsert"-ing
	//  one ShipmentEasyPost node.
	ShipmentEasyPostUpsertOne struct {
		create *ShipmentEasyPostCreate
	}

	// ShipmentEasyPostUpsert is the "OnConflict" setter.
	ShipmentEasyPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentEasyPostUpsert) SetTenantID(v pulid.ID) *ShipmentEasyPostUpsert {
	u.Set(shipmenteasypost.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsert) UpdateTenantID() *ShipmentEasyPostUpsert {
	u.SetExcluded(shipmenteasypost.FieldTenantID)
	return u
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *ShipmentEasyPostUpsert) SetTrackingNumber(v string) *ShipmentEasyPostUpsert {
	u.Set(shipmenteasypost.FieldTrackingNumber, v)
	return u
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsert) UpdateTrackingNumber() *ShipmentEasyPostUpsert {
	u.SetExcluded(shipmenteasypost.FieldTrackingNumber)
	return u
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (u *ShipmentEasyPostUpsert) ClearTrackingNumber() *ShipmentEasyPostUpsert {
	u.SetNull(shipmenteasypost.FieldTrackingNumber)
	return u
}

// SetEpShipmentID sets the "ep_shipment_id" field.
func (u *ShipmentEasyPostUpsert) SetEpShipmentID(v string) *ShipmentEasyPostUpsert {
	u.Set(shipmenteasypost.FieldEpShipmentID, v)
	return u
}

// UpdateEpShipmentID sets the "ep_shipment_id" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsert) UpdateEpShipmentID() *ShipmentEasyPostUpsert {
	u.SetExcluded(shipmenteasypost.FieldEpShipmentID)
	return u
}

// ClearEpShipmentID clears the value of the "ep_shipment_id" field.
func (u *ShipmentEasyPostUpsert) ClearEpShipmentID() *ShipmentEasyPostUpsert {
	u.SetNull(shipmenteasypost.FieldEpShipmentID)
	return u
}

// SetRate sets the "rate" field.
func (u *ShipmentEasyPostUpsert) SetRate(v float64) *ShipmentEasyPostUpsert {
	u.Set(shipmenteasypost.FieldRate, v)
	return u
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsert) UpdateRate() *ShipmentEasyPostUpsert {
	u.SetExcluded(shipmenteasypost.FieldRate)
	return u
}

// AddRate adds v to the "rate" field.
func (u *ShipmentEasyPostUpsert) AddRate(v float64) *ShipmentEasyPostUpsert {
	u.Add(shipmenteasypost.FieldRate, v)
	return u
}

// ClearRate clears the value of the "rate" field.
func (u *ShipmentEasyPostUpsert) ClearRate() *ShipmentEasyPostUpsert {
	u.SetNull(shipmenteasypost.FieldRate)
	return u
}

// SetEstDeliveryDate sets the "est_delivery_date" field.
func (u *ShipmentEasyPostUpsert) SetEstDeliveryDate(v time.Time) *ShipmentEasyPostUpsert {
	u.Set(shipmenteasypost.FieldEstDeliveryDate, v)
	return u
}

// UpdateEstDeliveryDate sets the "est_delivery_date" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsert) UpdateEstDeliveryDate() *ShipmentEasyPostUpsert {
	u.SetExcluded(shipmenteasypost.FieldEstDeliveryDate)
	return u
}

// ClearEstDeliveryDate clears the value of the "est_delivery_date" field.
func (u *ShipmentEasyPostUpsert) ClearEstDeliveryDate() *ShipmentEasyPostUpsert {
	u.SetNull(shipmenteasypost.FieldEstDeliveryDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmenteasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentEasyPostUpsertOne) UpdateNewValues() *ShipmentEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmenteasypost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentEasyPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentEasyPostUpsertOne) Ignore() *ShipmentEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentEasyPostUpsertOne) DoNothing() *ShipmentEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentEasyPostCreate.OnConflict
// documentation for more info.
func (u *ShipmentEasyPostUpsertOne) Update(set func(*ShipmentEasyPostUpsert)) *ShipmentEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentEasyPostUpsertOne) SetTenantID(v pulid.ID) *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertOne) UpdateTenantID() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateTenantID()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *ShipmentEasyPostUpsertOne) SetTrackingNumber(v string) *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertOne) UpdateTrackingNumber() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateTrackingNumber()
	})
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (u *ShipmentEasyPostUpsertOne) ClearTrackingNumber() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearTrackingNumber()
	})
}

// SetEpShipmentID sets the "ep_shipment_id" field.
func (u *ShipmentEasyPostUpsertOne) SetEpShipmentID(v string) *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetEpShipmentID(v)
	})
}

// UpdateEpShipmentID sets the "ep_shipment_id" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertOne) UpdateEpShipmentID() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateEpShipmentID()
	})
}

// ClearEpShipmentID clears the value of the "ep_shipment_id" field.
func (u *ShipmentEasyPostUpsertOne) ClearEpShipmentID() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearEpShipmentID()
	})
}

// SetRate sets the "rate" field.
func (u *ShipmentEasyPostUpsertOne) SetRate(v float64) *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *ShipmentEasyPostUpsertOne) AddRate(v float64) *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertOne) UpdateRate() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateRate()
	})
}

// ClearRate clears the value of the "rate" field.
func (u *ShipmentEasyPostUpsertOne) ClearRate() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearRate()
	})
}

// SetEstDeliveryDate sets the "est_delivery_date" field.
func (u *ShipmentEasyPostUpsertOne) SetEstDeliveryDate(v time.Time) *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetEstDeliveryDate(v)
	})
}

// UpdateEstDeliveryDate sets the "est_delivery_date" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertOne) UpdateEstDeliveryDate() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateEstDeliveryDate()
	})
}

// ClearEstDeliveryDate clears the value of the "est_delivery_date" field.
func (u *ShipmentEasyPostUpsertOne) ClearEstDeliveryDate() *ShipmentEasyPostUpsertOne {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearEstDeliveryDate()
	})
}

// Exec executes the query.
func (u *ShipmentEasyPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentEasyPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentEasyPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentEasyPostUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentEasyPostUpsertOne.ID is not supported by MySQL driver. Use ShipmentEasyPostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentEasyPostUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentEasyPostCreateBulk is the builder for creating many ShipmentEasyPost entities in bulk.
type ShipmentEasyPostCreateBulk struct {
	config
	err      error
	builders []*ShipmentEasyPostCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentEasyPost entities in the database.
func (sepcb *ShipmentEasyPostCreateBulk) Save(ctx context.Context) ([]*ShipmentEasyPost, error) {
	if sepcb.err != nil {
		return nil, sepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sepcb.builders))
	nodes := make([]*ShipmentEasyPost, len(sepcb.builders))
	mutators := make([]Mutator, len(sepcb.builders))
	for i := range sepcb.builders {
		func(i int, root context.Context) {
			builder := sepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentEasyPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sepcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sepcb *ShipmentEasyPostCreateBulk) SaveX(ctx context.Context) []*ShipmentEasyPost {
	v, err := sepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sepcb *ShipmentEasyPostCreateBulk) Exec(ctx context.Context) error {
	_, err := sepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sepcb *ShipmentEasyPostCreateBulk) ExecX(ctx context.Context) {
	if err := sepcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentEasyPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentEasyPostUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sepcb *ShipmentEasyPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentEasyPostUpsertBulk {
	sepcb.conflict = opts
	return &ShipmentEasyPostUpsertBulk{
		create: sepcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sepcb *ShipmentEasyPostCreateBulk) OnConflictColumns(columns ...string) *ShipmentEasyPostUpsertBulk {
	sepcb.conflict = append(sepcb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentEasyPostUpsertBulk{
		create: sepcb,
	}
}

// ShipmentEasyPostUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentEasyPost nodes.
type ShipmentEasyPostUpsertBulk struct {
	create *ShipmentEasyPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmenteasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentEasyPostUpsertBulk) UpdateNewValues() *ShipmentEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmenteasypost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentEasyPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentEasyPostUpsertBulk) Ignore() *ShipmentEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentEasyPostUpsertBulk) DoNothing() *ShipmentEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentEasyPostCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentEasyPostUpsertBulk) Update(set func(*ShipmentEasyPostUpsert)) *ShipmentEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentEasyPostUpsertBulk) SetTenantID(v pulid.ID) *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertBulk) UpdateTenantID() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateTenantID()
	})
}

// SetTrackingNumber sets the "tracking_number" field.
func (u *ShipmentEasyPostUpsertBulk) SetTrackingNumber(v string) *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetTrackingNumber(v)
	})
}

// UpdateTrackingNumber sets the "tracking_number" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertBulk) UpdateTrackingNumber() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateTrackingNumber()
	})
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (u *ShipmentEasyPostUpsertBulk) ClearTrackingNumber() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearTrackingNumber()
	})
}

// SetEpShipmentID sets the "ep_shipment_id" field.
func (u *ShipmentEasyPostUpsertBulk) SetEpShipmentID(v string) *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetEpShipmentID(v)
	})
}

// UpdateEpShipmentID sets the "ep_shipment_id" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertBulk) UpdateEpShipmentID() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateEpShipmentID()
	})
}

// ClearEpShipmentID clears the value of the "ep_shipment_id" field.
func (u *ShipmentEasyPostUpsertBulk) ClearEpShipmentID() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearEpShipmentID()
	})
}

// SetRate sets the "rate" field.
func (u *ShipmentEasyPostUpsertBulk) SetRate(v float64) *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetRate(v)
	})
}

// AddRate adds v to the "rate" field.
func (u *ShipmentEasyPostUpsertBulk) AddRate(v float64) *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.AddRate(v)
	})
}

// UpdateRate sets the "rate" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertBulk) UpdateRate() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateRate()
	})
}

// ClearRate clears the value of the "rate" field.
func (u *ShipmentEasyPostUpsertBulk) ClearRate() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearRate()
	})
}

// SetEstDeliveryDate sets the "est_delivery_date" field.
func (u *ShipmentEasyPostUpsertBulk) SetEstDeliveryDate(v time.Time) *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.SetEstDeliveryDate(v)
	})
}

// UpdateEstDeliveryDate sets the "est_delivery_date" field to the value that was provided on create.
func (u *ShipmentEasyPostUpsertBulk) UpdateEstDeliveryDate() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.UpdateEstDeliveryDate()
	})
}

// ClearEstDeliveryDate clears the value of the "est_delivery_date" field.
func (u *ShipmentEasyPostUpsertBulk) ClearEstDeliveryDate() *ShipmentEasyPostUpsertBulk {
	return u.Update(func(s *ShipmentEasyPostUpsert) {
		s.ClearEstDeliveryDate()
	})
}

// Exec executes the query.
func (u *ShipmentEasyPostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentEasyPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentEasyPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentEasyPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
