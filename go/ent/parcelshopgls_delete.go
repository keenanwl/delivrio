// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopGLSDelete is the builder for deleting a ParcelShopGLS entity.
type ParcelShopGLSDelete struct {
	config
	hooks    []Hook
	mutation *ParcelShopGLSMutation
}

// Where appends a list predicates to the ParcelShopGLSDelete builder.
func (psgd *ParcelShopGLSDelete) Where(ps ...predicate.ParcelShopGLS) *ParcelShopGLSDelete {
	psgd.mutation.Where(ps...)
	return psgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (psgd *ParcelShopGLSDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, psgd.sqlExec, psgd.mutation, psgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (psgd *ParcelShopGLSDelete) ExecX(ctx context.Context) int {
	n, err := psgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (psgd *ParcelShopGLSDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(parcelshopgls.Table, sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString))
	if ps := psgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, psgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	psgd.mutation.done = true
	return affected, err
}

// ParcelShopGLSDeleteOne is the builder for deleting a single ParcelShopGLS entity.
type ParcelShopGLSDeleteOne struct {
	psgd *ParcelShopGLSDelete
}

// Where appends a list predicates to the ParcelShopGLSDelete builder.
func (psgdo *ParcelShopGLSDeleteOne) Where(ps ...predicate.ParcelShopGLS) *ParcelShopGLSDeleteOne {
	psgdo.psgd.mutation.Where(ps...)
	return psgdo
}

// Exec executes the deletion query.
func (psgdo *ParcelShopGLSDeleteOne) Exec(ctx context.Context) error {
	n, err := psgdo.psgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{parcelshopgls.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (psgdo *ParcelShopGLSDeleteOne) ExecX(ctx context.Context) {
	if err := psgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
