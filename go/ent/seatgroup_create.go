// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupCreate is the builder for creating a SeatGroup entity.
type SeatGroupCreate struct {
	config
	mutation *SeatGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sgc *SeatGroupCreate) SetTenantID(pu pulid.ID) *SeatGroupCreate {
	sgc.mutation.SetTenantID(pu)
	return sgc
}

// SetName sets the "name" field.
func (sgc *SeatGroupCreate) SetName(s string) *SeatGroupCreate {
	sgc.mutation.SetName(s)
	return sgc
}

// SetCreatedAt sets the "created_at" field.
func (sgc *SeatGroupCreate) SetCreatedAt(t time.Time) *SeatGroupCreate {
	sgc.mutation.SetCreatedAt(t)
	return sgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgc *SeatGroupCreate) SetNillableCreatedAt(t *time.Time) *SeatGroupCreate {
	if t != nil {
		sgc.SetCreatedAt(*t)
	}
	return sgc
}

// SetID sets the "id" field.
func (sgc *SeatGroupCreate) SetID(pu pulid.ID) *SeatGroupCreate {
	sgc.mutation.SetID(pu)
	return sgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sgc *SeatGroupCreate) SetNillableID(pu *pulid.ID) *SeatGroupCreate {
	if pu != nil {
		sgc.SetID(*pu)
	}
	return sgc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sgc *SeatGroupCreate) SetTenant(t *Tenant) *SeatGroupCreate {
	return sgc.SetTenantID(t.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (sgc *SeatGroupCreate) AddUserIDs(ids ...pulid.ID) *SeatGroupCreate {
	sgc.mutation.AddUserIDs(ids...)
	return sgc
}

// AddUser adds the "user" edges to the User entity.
func (sgc *SeatGroupCreate) AddUser(u ...*User) *SeatGroupCreate {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sgc.AddUserIDs(ids...)
}

// AddAssignedAccessRightIDs adds the "assigned_access_right" edge to the AccessRight entity by IDs.
func (sgc *SeatGroupCreate) AddAssignedAccessRightIDs(ids ...pulid.ID) *SeatGroupCreate {
	sgc.mutation.AddAssignedAccessRightIDs(ids...)
	return sgc
}

// AddAssignedAccessRight adds the "assigned_access_right" edges to the AccessRight entity.
func (sgc *SeatGroupCreate) AddAssignedAccessRight(a ...*AccessRight) *SeatGroupCreate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sgc.AddAssignedAccessRightIDs(ids...)
}

// AddSeatGroupAccessRightIDs adds the "seat_group_access_right" edge to the SeatGroupAccessRight entity by IDs.
func (sgc *SeatGroupCreate) AddSeatGroupAccessRightIDs(ids ...pulid.ID) *SeatGroupCreate {
	sgc.mutation.AddSeatGroupAccessRightIDs(ids...)
	return sgc
}

// AddSeatGroupAccessRight adds the "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (sgc *SeatGroupCreate) AddSeatGroupAccessRight(s ...*SeatGroupAccessRight) *SeatGroupCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgc.AddSeatGroupAccessRightIDs(ids...)
}

// Mutation returns the SeatGroupMutation object of the builder.
func (sgc *SeatGroupCreate) Mutation() *SeatGroupMutation {
	return sgc.mutation
}

// Save creates the SeatGroup in the database.
func (sgc *SeatGroupCreate) Save(ctx context.Context) (*SeatGroup, error) {
	if err := sgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sgc.sqlSave, sgc.mutation, sgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *SeatGroupCreate) SaveX(ctx context.Context) *SeatGroup {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *SeatGroupCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *SeatGroupCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgc *SeatGroupCreate) defaults() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		if seatgroup.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized seatgroup.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := seatgroup.DefaultCreatedAt()
		sgc.mutation.SetCreatedAt(v)
	}
	if _, ok := sgc.mutation.ID(); !ok {
		if seatgroup.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized seatgroup.DefaultID (forgotten import ent/runtime?)")
		}
		v := seatgroup.DefaultID()
		sgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sgc *SeatGroupCreate) check() error {
	if _, ok := sgc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "SeatGroup.tenant_id"`)}
	}
	if _, ok := sgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SeatGroup.name"`)}
	}
	if len(sgc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "SeatGroup.tenant"`)}
	}
	return nil
}

func (sgc *SeatGroupCreate) sqlSave(ctx context.Context) (*SeatGroup, error) {
	if err := sgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sgc.mutation.id = &_node.ID
	sgc.mutation.done = true
	return _node, nil
}

func (sgc *SeatGroupCreate) createSpec() (*SeatGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &SeatGroup{config: sgc.config}
		_spec = sqlgraph.NewCreateSpec(seatgroup.Table, sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString))
	)
	_spec.OnConflict = sgc.conflict
	if id, ok := sgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sgc.mutation.Name(); ok {
		_spec.SetField(seatgroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sgc.mutation.CreatedAt(); ok {
		_spec.SetField(seatgroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sgc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroup.TenantTable,
			Columns: []string{seatgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.AssignedAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: sgc.config, mutation: newSeatGroupAccessRightMutation(sgc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.SeatGroupAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeatGroup.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeatGroupUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sgc *SeatGroupCreate) OnConflict(opts ...sql.ConflictOption) *SeatGroupUpsertOne {
	sgc.conflict = opts
	return &SeatGroupUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeatGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgc *SeatGroupCreate) OnConflictColumns(columns ...string) *SeatGroupUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &SeatGroupUpsertOne{
		create: sgc,
	}
}

type (
	// SeatGroupUpsertOne is the builder for "upsert"-ing
	//  one SeatGroup node.
	SeatGroupUpsertOne struct {
		create *SeatGroupCreate
	}

	// SeatGroupUpsert is the "OnConflict" setter.
	SeatGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *SeatGroupUpsert) SetTenantID(v pulid.ID) *SeatGroupUpsert {
	u.Set(seatgroup.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SeatGroupUpsert) UpdateTenantID() *SeatGroupUpsert {
	u.SetExcluded(seatgroup.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *SeatGroupUpsert) SetName(v string) *SeatGroupUpsert {
	u.Set(seatgroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SeatGroupUpsert) UpdateName() *SeatGroupUpsert {
	u.SetExcluded(seatgroup.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SeatGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(seatgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SeatGroupUpsertOne) UpdateNewValues() *SeatGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(seatgroup.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(seatgroup.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeatGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SeatGroupUpsertOne) Ignore() *SeatGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeatGroupUpsertOne) DoNothing() *SeatGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeatGroupCreate.OnConflict
// documentation for more info.
func (u *SeatGroupUpsertOne) Update(set func(*SeatGroupUpsert)) *SeatGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeatGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *SeatGroupUpsertOne) SetTenantID(v pulid.ID) *SeatGroupUpsertOne {
	return u.Update(func(s *SeatGroupUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SeatGroupUpsertOne) UpdateTenantID() *SeatGroupUpsertOne {
	return u.Update(func(s *SeatGroupUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *SeatGroupUpsertOne) SetName(v string) *SeatGroupUpsertOne {
	return u.Update(func(s *SeatGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SeatGroupUpsertOne) UpdateName() *SeatGroupUpsertOne {
	return u.Update(func(s *SeatGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SeatGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeatGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeatGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SeatGroupUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SeatGroupUpsertOne.ID is not supported by MySQL driver. Use SeatGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SeatGroupUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SeatGroupCreateBulk is the builder for creating many SeatGroup entities in bulk.
type SeatGroupCreateBulk struct {
	config
	err      error
	builders []*SeatGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the SeatGroup entities in the database.
func (sgcb *SeatGroupCreateBulk) Save(ctx context.Context) ([]*SeatGroup, error) {
	if sgcb.err != nil {
		return nil, sgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*SeatGroup, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *SeatGroupCreateBulk) SaveX(ctx context.Context) []*SeatGroup {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *SeatGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *SeatGroupCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SeatGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SeatGroupUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sgcb *SeatGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *SeatGroupUpsertBulk {
	sgcb.conflict = opts
	return &SeatGroupUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SeatGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgcb *SeatGroupCreateBulk) OnConflictColumns(columns ...string) *SeatGroupUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &SeatGroupUpsertBulk{
		create: sgcb,
	}
}

// SeatGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of SeatGroup nodes.
type SeatGroupUpsertBulk struct {
	create *SeatGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SeatGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(seatgroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SeatGroupUpsertBulk) UpdateNewValues() *SeatGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(seatgroup.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(seatgroup.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SeatGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SeatGroupUpsertBulk) Ignore() *SeatGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SeatGroupUpsertBulk) DoNothing() *SeatGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SeatGroupCreateBulk.OnConflict
// documentation for more info.
func (u *SeatGroupUpsertBulk) Update(set func(*SeatGroupUpsert)) *SeatGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SeatGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *SeatGroupUpsertBulk) SetTenantID(v pulid.ID) *SeatGroupUpsertBulk {
	return u.Update(func(s *SeatGroupUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *SeatGroupUpsertBulk) UpdateTenantID() *SeatGroupUpsertBulk {
	return u.Update(func(s *SeatGroupUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *SeatGroupUpsertBulk) SetName(v string) *SeatGroupUpsertBulk {
	return u.Update(func(s *SeatGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SeatGroupUpsertBulk) UpdateName() *SeatGroupUpsertBulk {
	return u.Update(func(s *SeatGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SeatGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SeatGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SeatGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SeatGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
