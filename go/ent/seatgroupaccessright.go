// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SeatGroupAccessRight is the model entity for the SeatGroupAccessRight schema.
type SeatGroupAccessRight struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Level holds the value of the "level" field.
	Level seatgroupaccessright.Level `json:"level,omitempty"`
	// AccessRightID holds the value of the "access_right_id" field.
	AccessRightID pulid.ID `json:"access_right_id,omitempty"`
	// SeatGroupID holds the value of the "seat_group_id" field.
	SeatGroupID pulid.ID `json:"seat_group_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeatGroupAccessRightQuery when eager-loading is set.
	Edges        SeatGroupAccessRightEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeatGroupAccessRightEdges holds the relations/edges for other nodes in the graph.
type SeatGroupAccessRightEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// AccessRight holds the value of the access_right edge.
	AccessRight *AccessRight `json:"access_right,omitempty"`
	// SeatGroup holds the value of the seat_group edge.
	SeatGroup *SeatGroup `json:"seat_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeatGroupAccessRightEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// AccessRightOrErr returns the AccessRight value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeatGroupAccessRightEdges) AccessRightOrErr() (*AccessRight, error) {
	if e.AccessRight != nil {
		return e.AccessRight, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: accessright.Label}
	}
	return nil, &NotLoadedError{edge: "access_right"}
}

// SeatGroupOrErr returns the SeatGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeatGroupAccessRightEdges) SeatGroupOrErr() (*SeatGroup, error) {
	if e.SeatGroup != nil {
		return e.SeatGroup, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: seatgroup.Label}
	}
	return nil, &NotLoadedError{edge: "seat_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeatGroupAccessRight) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seatgroupaccessright.FieldID, seatgroupaccessright.FieldTenantID, seatgroupaccessright.FieldAccessRightID, seatgroupaccessright.FieldSeatGroupID:
			values[i] = new(pulid.ID)
		case seatgroupaccessright.FieldLevel:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeatGroupAccessRight fields.
func (sgar *SeatGroupAccessRight) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seatgroupaccessright.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sgar.ID = *value
			}
		case seatgroupaccessright.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				sgar.TenantID = *value
			}
		case seatgroupaccessright.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				sgar.Level = seatgroupaccessright.Level(value.String)
			}
		case seatgroupaccessright.FieldAccessRightID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field access_right_id", values[i])
			} else if value != nil {
				sgar.AccessRightID = *value
			}
		case seatgroupaccessright.FieldSeatGroupID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field seat_group_id", values[i])
			} else if value != nil {
				sgar.SeatGroupID = *value
			}
		default:
			sgar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SeatGroupAccessRight.
// This includes values selected through modifiers, order, etc.
func (sgar *SeatGroupAccessRight) Value(name string) (ent.Value, error) {
	return sgar.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the SeatGroupAccessRight entity.
func (sgar *SeatGroupAccessRight) QueryTenant() *TenantQuery {
	return NewSeatGroupAccessRightClient(sgar.config).QueryTenant(sgar)
}

// QueryAccessRight queries the "access_right" edge of the SeatGroupAccessRight entity.
func (sgar *SeatGroupAccessRight) QueryAccessRight() *AccessRightQuery {
	return NewSeatGroupAccessRightClient(sgar.config).QueryAccessRight(sgar)
}

// QuerySeatGroup queries the "seat_group" edge of the SeatGroupAccessRight entity.
func (sgar *SeatGroupAccessRight) QuerySeatGroup() *SeatGroupQuery {
	return NewSeatGroupAccessRightClient(sgar.config).QuerySeatGroup(sgar)
}

// Update returns a builder for updating this SeatGroupAccessRight.
// Note that you need to call SeatGroupAccessRight.Unwrap() before calling this method if this SeatGroupAccessRight
// was returned from a transaction, and the transaction was committed or rolled back.
func (sgar *SeatGroupAccessRight) Update() *SeatGroupAccessRightUpdateOne {
	return NewSeatGroupAccessRightClient(sgar.config).UpdateOne(sgar)
}

// Unwrap unwraps the SeatGroupAccessRight entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sgar *SeatGroupAccessRight) Unwrap() *SeatGroupAccessRight {
	_tx, ok := sgar.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeatGroupAccessRight is not a transactional entity")
	}
	sgar.config.driver = _tx.drv
	return sgar
}

// String implements the fmt.Stringer.
func (sgar *SeatGroupAccessRight) String() string {
	var builder strings.Builder
	builder.WriteString("SeatGroupAccessRight(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sgar.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sgar.TenantID))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", sgar.Level))
	builder.WriteString(", ")
	builder.WriteString("access_right_id=")
	builder.WriteString(fmt.Sprintf("%v", sgar.AccessRightID))
	builder.WriteString(", ")
	builder.WriteString("seat_group_id=")
	builder.WriteString(fmt.Sprintf("%v", sgar.SeatGroupID))
	builder.WriteByte(')')
	return builder.String()
}

// SeatGroupAccessRights is a parsable slice of SeatGroupAccessRight.
type SeatGroupAccessRights []*SeatGroupAccessRight
