// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmailTemplateCreate is the builder for creating a EmailTemplate entity.
type EmailTemplateCreate struct {
	config
	mutation *EmailTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (etc *EmailTemplateCreate) SetTenantID(pu pulid.ID) *EmailTemplateCreate {
	etc.mutation.SetTenantID(pu)
	return etc
}

// SetName sets the "name" field.
func (etc *EmailTemplateCreate) SetName(s string) *EmailTemplateCreate {
	etc.mutation.SetName(s)
	return etc
}

// SetSubject sets the "subject" field.
func (etc *EmailTemplateCreate) SetSubject(s string) *EmailTemplateCreate {
	etc.mutation.SetSubject(s)
	return etc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableSubject(s *string) *EmailTemplateCreate {
	if s != nil {
		etc.SetSubject(*s)
	}
	return etc
}

// SetHTMLTemplate sets the "html_template" field.
func (etc *EmailTemplateCreate) SetHTMLTemplate(s string) *EmailTemplateCreate {
	etc.mutation.SetHTMLTemplate(s)
	return etc
}

// SetNillableHTMLTemplate sets the "html_template" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableHTMLTemplate(s *string) *EmailTemplateCreate {
	if s != nil {
		etc.SetHTMLTemplate(*s)
	}
	return etc
}

// SetMergeType sets the "merge_type" field.
func (etc *EmailTemplateCreate) SetMergeType(et emailtemplate.MergeType) *EmailTemplateCreate {
	etc.mutation.SetMergeType(et)
	return etc
}

// SetNillableMergeType sets the "merge_type" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableMergeType(et *emailtemplate.MergeType) *EmailTemplateCreate {
	if et != nil {
		etc.SetMergeType(*et)
	}
	return etc
}

// SetCreatedAt sets the "created_at" field.
func (etc *EmailTemplateCreate) SetCreatedAt(t time.Time) *EmailTemplateCreate {
	etc.mutation.SetCreatedAt(t)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableCreatedAt(t *time.Time) *EmailTemplateCreate {
	if t != nil {
		etc.SetCreatedAt(*t)
	}
	return etc
}

// SetUpdatedAt sets the "updated_at" field.
func (etc *EmailTemplateCreate) SetUpdatedAt(t time.Time) *EmailTemplateCreate {
	etc.mutation.SetUpdatedAt(t)
	return etc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableUpdatedAt(t *time.Time) *EmailTemplateCreate {
	if t != nil {
		etc.SetUpdatedAt(*t)
	}
	return etc
}

// SetID sets the "id" field.
func (etc *EmailTemplateCreate) SetID(pu pulid.ID) *EmailTemplateCreate {
	etc.mutation.SetID(pu)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EmailTemplateCreate) SetNillableID(pu *pulid.ID) *EmailTemplateCreate {
	if pu != nil {
		etc.SetID(*pu)
	}
	return etc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (etc *EmailTemplateCreate) SetTenant(t *Tenant) *EmailTemplateCreate {
	return etc.SetTenantID(t.ID)
}

// AddReturnPortalConfirmationLabelIDs adds the "return_portal_confirmation_label" edge to the ReturnPortal entity by IDs.
func (etc *EmailTemplateCreate) AddReturnPortalConfirmationLabelIDs(ids ...pulid.ID) *EmailTemplateCreate {
	etc.mutation.AddReturnPortalConfirmationLabelIDs(ids...)
	return etc
}

// AddReturnPortalConfirmationLabel adds the "return_portal_confirmation_label" edges to the ReturnPortal entity.
func (etc *EmailTemplateCreate) AddReturnPortalConfirmationLabel(r ...*ReturnPortal) *EmailTemplateCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etc.AddReturnPortalConfirmationLabelIDs(ids...)
}

// AddReturnPortalConfirmationQrCodeIDs adds the "return_portal_confirmation_qr_code" edge to the ReturnPortal entity by IDs.
func (etc *EmailTemplateCreate) AddReturnPortalConfirmationQrCodeIDs(ids ...pulid.ID) *EmailTemplateCreate {
	etc.mutation.AddReturnPortalConfirmationQrCodeIDs(ids...)
	return etc
}

// AddReturnPortalConfirmationQrCode adds the "return_portal_confirmation_qr_code" edges to the ReturnPortal entity.
func (etc *EmailTemplateCreate) AddReturnPortalConfirmationQrCode(r ...*ReturnPortal) *EmailTemplateCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etc.AddReturnPortalConfirmationQrCodeIDs(ids...)
}

// AddReturnPortalReceivedIDs adds the "return_portal_received" edge to the ReturnPortal entity by IDs.
func (etc *EmailTemplateCreate) AddReturnPortalReceivedIDs(ids ...pulid.ID) *EmailTemplateCreate {
	etc.mutation.AddReturnPortalReceivedIDs(ids...)
	return etc
}

// AddReturnPortalReceived adds the "return_portal_received" edges to the ReturnPortal entity.
func (etc *EmailTemplateCreate) AddReturnPortalReceived(r ...*ReturnPortal) *EmailTemplateCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etc.AddReturnPortalReceivedIDs(ids...)
}

// AddReturnPortalAcceptedIDs adds the "return_portal_accepted" edge to the ReturnPortal entity by IDs.
func (etc *EmailTemplateCreate) AddReturnPortalAcceptedIDs(ids ...pulid.ID) *EmailTemplateCreate {
	etc.mutation.AddReturnPortalAcceptedIDs(ids...)
	return etc
}

// AddReturnPortalAccepted adds the "return_portal_accepted" edges to the ReturnPortal entity.
func (etc *EmailTemplateCreate) AddReturnPortalAccepted(r ...*ReturnPortal) *EmailTemplateCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return etc.AddReturnPortalAcceptedIDs(ids...)
}

// AddDeliveryOptionClickCollectAtStoreIDs adds the "delivery_option_click_collect_at_store" edge to the DeliveryOption entity by IDs.
func (etc *EmailTemplateCreate) AddDeliveryOptionClickCollectAtStoreIDs(ids ...pulid.ID) *EmailTemplateCreate {
	etc.mutation.AddDeliveryOptionClickCollectAtStoreIDs(ids...)
	return etc
}

// AddDeliveryOptionClickCollectAtStore adds the "delivery_option_click_collect_at_store" edges to the DeliveryOption entity.
func (etc *EmailTemplateCreate) AddDeliveryOptionClickCollectAtStore(d ...*DeliveryOption) *EmailTemplateCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return etc.AddDeliveryOptionClickCollectAtStoreIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (etc *EmailTemplateCreate) AddNotificationIDs(ids ...pulid.ID) *EmailTemplateCreate {
	etc.mutation.AddNotificationIDs(ids...)
	return etc
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (etc *EmailTemplateCreate) AddNotifications(n ...*Notification) *EmailTemplateCreate {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return etc.AddNotificationIDs(ids...)
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etc *EmailTemplateCreate) Mutation() *EmailTemplateMutation {
	return etc.mutation
}

// Save creates the EmailTemplate in the database.
func (etc *EmailTemplateCreate) Save(ctx context.Context) (*EmailTemplate, error) {
	if err := etc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EmailTemplateCreate) SaveX(ctx context.Context) *EmailTemplate {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EmailTemplateCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EmailTemplateCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EmailTemplateCreate) defaults() error {
	if _, ok := etc.mutation.Subject(); !ok {
		v := emailtemplate.DefaultSubject
		etc.mutation.SetSubject(v)
	}
	if _, ok := etc.mutation.HTMLTemplate(); !ok {
		v := emailtemplate.DefaultHTMLTemplate
		etc.mutation.SetHTMLTemplate(v)
	}
	if _, ok := etc.mutation.MergeType(); !ok {
		v := emailtemplate.DefaultMergeType
		etc.mutation.SetMergeType(v)
	}
	if _, ok := etc.mutation.CreatedAt(); !ok {
		if emailtemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		if emailtemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultUpdatedAt()
		etc.mutation.SetUpdatedAt(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		if emailtemplate.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized emailtemplate.DefaultID (forgotten import ent/runtime?)")
		}
		v := emailtemplate.DefaultID()
		etc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (etc *EmailTemplateCreate) check() error {
	if _, ok := etc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "EmailTemplate.tenant_id"`)}
	}
	if _, ok := etc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EmailTemplate.name"`)}
	}
	if v, ok := etc.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if _, ok := etc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "EmailTemplate.subject"`)}
	}
	if v, ok := etc.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if _, ok := etc.mutation.HTMLTemplate(); !ok {
		return &ValidationError{Name: "html_template", err: errors.New(`ent: missing required field "EmailTemplate.html_template"`)}
	}
	if _, ok := etc.mutation.MergeType(); !ok {
		return &ValidationError{Name: "merge_type", err: errors.New(`ent: missing required field "EmailTemplate.merge_type"`)}
	}
	if v, ok := etc.mutation.MergeType(); ok {
		if err := emailtemplate.MergeTypeValidator(v); err != nil {
			return &ValidationError{Name: "merge_type", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.merge_type": %w`, err)}
		}
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EmailTemplate.updated_at"`)}
	}
	if len(etc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "EmailTemplate.tenant"`)}
	}
	return nil
}

func (etc *EmailTemplateCreate) sqlSave(ctx context.Context) (*EmailTemplate, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EmailTemplateCreate) createSpec() (*EmailTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailTemplate{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(emailtemplate.Table, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString))
	)
	_spec.OnConflict = etc.conflict
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := etc.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := etc.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := etc.mutation.HTMLTemplate(); ok {
		_spec.SetField(emailtemplate.FieldHTMLTemplate, field.TypeString, value)
		_node.HTMLTemplate = value
	}
	if value, ok := etc.mutation.MergeType(); ok {
		_spec.SetField(emailtemplate.FieldMergeType, field.TypeEnum, value)
		_node.MergeType = value
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.SetField(emailtemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := etc.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := etc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailtemplate.TenantTable,
			Columns: []string{emailtemplate.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.ReturnPortalConfirmationLabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.ReturnPortalConfirmationQrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.ReturnPortalReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.ReturnPortalAcceptedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.DeliveryOptionClickCollectAtStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailTemplate.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailTemplateUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (etc *EmailTemplateCreate) OnConflict(opts ...sql.ConflictOption) *EmailTemplateUpsertOne {
	etc.conflict = opts
	return &EmailTemplateUpsertOne{
		create: etc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (etc *EmailTemplateCreate) OnConflictColumns(columns ...string) *EmailTemplateUpsertOne {
	etc.conflict = append(etc.conflict, sql.ConflictColumns(columns...))
	return &EmailTemplateUpsertOne{
		create: etc,
	}
}

type (
	// EmailTemplateUpsertOne is the builder for "upsert"-ing
	//  one EmailTemplate node.
	EmailTemplateUpsertOne struct {
		create *EmailTemplateCreate
	}

	// EmailTemplateUpsert is the "OnConflict" setter.
	EmailTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *EmailTemplateUpsert) SetTenantID(v pulid.ID) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateTenantID() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *EmailTemplateUpsert) SetName(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateName() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldName)
	return u
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsert) SetSubject(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateSubject() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldSubject)
	return u
}

// SetHTMLTemplate sets the "html_template" field.
func (u *EmailTemplateUpsert) SetHTMLTemplate(v string) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldHTMLTemplate, v)
	return u
}

// UpdateHTMLTemplate sets the "html_template" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateHTMLTemplate() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldHTMLTemplate)
	return u
}

// SetMergeType sets the "merge_type" field.
func (u *EmailTemplateUpsert) SetMergeType(v emailtemplate.MergeType) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldMergeType, v)
	return u
}

// UpdateMergeType sets the "merge_type" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateMergeType() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldMergeType)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsert) SetUpdatedAt(v time.Time) *EmailTemplateUpsert {
	u.Set(emailtemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsert) UpdateUpdatedAt() *EmailTemplateUpsert {
	u.SetExcluded(emailtemplate.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EmailTemplateUpsertOne) UpdateNewValues() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(emailtemplate.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(emailtemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EmailTemplateUpsertOne) Ignore() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailTemplateUpsertOne) DoNothing() *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailTemplateCreate.OnConflict
// documentation for more info.
func (u *EmailTemplateUpsertOne) Update(set func(*EmailTemplateUpsert)) *EmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *EmailTemplateUpsertOne) SetTenantID(v pulid.ID) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateTenantID() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *EmailTemplateUpsertOne) SetName(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateName() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateName()
	})
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsertOne) SetSubject(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateSubject() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetHTMLTemplate sets the "html_template" field.
func (u *EmailTemplateUpsertOne) SetHTMLTemplate(v string) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetHTMLTemplate(v)
	})
}

// UpdateHTMLTemplate sets the "html_template" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateHTMLTemplate() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateHTMLTemplate()
	})
}

// SetMergeType sets the "merge_type" field.
func (u *EmailTemplateUpsertOne) SetMergeType(v emailtemplate.MergeType) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetMergeType(v)
	})
}

// UpdateMergeType sets the "merge_type" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateMergeType() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateMergeType()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsertOne) SetUpdatedAt(v time.Time) *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertOne) UpdateUpdatedAt() *EmailTemplateUpsertOne {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *EmailTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmailTemplateUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EmailTemplateUpsertOne.ID is not supported by MySQL driver. Use EmailTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmailTemplateUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmailTemplateCreateBulk is the builder for creating many EmailTemplate entities in bulk.
type EmailTemplateCreateBulk struct {
	config
	err      error
	builders []*EmailTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the EmailTemplate entities in the database.
func (etcb *EmailTemplateCreateBulk) Save(ctx context.Context) ([]*EmailTemplate, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EmailTemplate, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = etcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EmailTemplateCreateBulk) SaveX(ctx context.Context) []*EmailTemplate {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EmailTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EmailTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EmailTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmailTemplateUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (etcb *EmailTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmailTemplateUpsertBulk {
	etcb.conflict = opts
	return &EmailTemplateUpsertBulk{
		create: etcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (etcb *EmailTemplateCreateBulk) OnConflictColumns(columns ...string) *EmailTemplateUpsertBulk {
	etcb.conflict = append(etcb.conflict, sql.ConflictColumns(columns...))
	return &EmailTemplateUpsertBulk{
		create: etcb,
	}
}

// EmailTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of EmailTemplate nodes.
type EmailTemplateUpsertBulk struct {
	create *EmailTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(emailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EmailTemplateUpsertBulk) UpdateNewValues() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(emailtemplate.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(emailtemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EmailTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EmailTemplateUpsertBulk) Ignore() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmailTemplateUpsertBulk) DoNothing() *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmailTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *EmailTemplateUpsertBulk) Update(set func(*EmailTemplateUpsert)) *EmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *EmailTemplateUpsertBulk) SetTenantID(v pulid.ID) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateTenantID() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *EmailTemplateUpsertBulk) SetName(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateName() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateName()
	})
}

// SetSubject sets the "subject" field.
func (u *EmailTemplateUpsertBulk) SetSubject(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateSubject() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetHTMLTemplate sets the "html_template" field.
func (u *EmailTemplateUpsertBulk) SetHTMLTemplate(v string) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetHTMLTemplate(v)
	})
}

// UpdateHTMLTemplate sets the "html_template" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateHTMLTemplate() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateHTMLTemplate()
	})
}

// SetMergeType sets the "merge_type" field.
func (u *EmailTemplateUpsertBulk) SetMergeType(v emailtemplate.MergeType) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetMergeType(v)
	})
}

// UpdateMergeType sets the "merge_type" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateMergeType() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateMergeType()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmailTemplateUpsertBulk) SetUpdatedAt(v time.Time) *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmailTemplateUpsertBulk) UpdateUpdatedAt() *EmailTemplateUpsertBulk {
	return u.Update(func(s *EmailTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *EmailTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmailTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmailTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmailTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
