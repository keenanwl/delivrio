// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierGLSCreate is the builder for creating a CarrierGLS entity.
type CarrierGLSCreate struct {
	config
	mutation *CarrierGLSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cgc *CarrierGLSCreate) SetTenantID(pu pulid.ID) *CarrierGLSCreate {
	cgc.mutation.SetTenantID(pu)
	return cgc
}

// SetContactID sets the "contact_id" field.
func (cgc *CarrierGLSCreate) SetContactID(s string) *CarrierGLSCreate {
	cgc.mutation.SetContactID(s)
	return cgc
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableContactID(s *string) *CarrierGLSCreate {
	if s != nil {
		cgc.SetContactID(*s)
	}
	return cgc
}

// SetGLSUsername sets the "gls_username" field.
func (cgc *CarrierGLSCreate) SetGLSUsername(s string) *CarrierGLSCreate {
	cgc.mutation.SetGLSUsername(s)
	return cgc
}

// SetNillableGLSUsername sets the "gls_username" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableGLSUsername(s *string) *CarrierGLSCreate {
	if s != nil {
		cgc.SetGLSUsername(*s)
	}
	return cgc
}

// SetGLSPassword sets the "gls_password" field.
func (cgc *CarrierGLSCreate) SetGLSPassword(s string) *CarrierGLSCreate {
	cgc.mutation.SetGLSPassword(s)
	return cgc
}

// SetNillableGLSPassword sets the "gls_password" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableGLSPassword(s *string) *CarrierGLSCreate {
	if s != nil {
		cgc.SetGLSPassword(*s)
	}
	return cgc
}

// SetCustomerID sets the "customer_id" field.
func (cgc *CarrierGLSCreate) SetCustomerID(s string) *CarrierGLSCreate {
	cgc.mutation.SetCustomerID(s)
	return cgc
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableCustomerID(s *string) *CarrierGLSCreate {
	if s != nil {
		cgc.SetCustomerID(*s)
	}
	return cgc
}

// SetGLSCountryCode sets the "gls_country_code" field.
func (cgc *CarrierGLSCreate) SetGLSCountryCode(s string) *CarrierGLSCreate {
	cgc.mutation.SetGLSCountryCode(s)
	return cgc
}

// SetNillableGLSCountryCode sets the "gls_country_code" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableGLSCountryCode(s *string) *CarrierGLSCreate {
	if s != nil {
		cgc.SetGLSCountryCode(*s)
	}
	return cgc
}

// SetSyncShipmentCancellation sets the "sync_shipment_cancellation" field.
func (cgc *CarrierGLSCreate) SetSyncShipmentCancellation(b bool) *CarrierGLSCreate {
	cgc.mutation.SetSyncShipmentCancellation(b)
	return cgc
}

// SetNillableSyncShipmentCancellation sets the "sync_shipment_cancellation" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableSyncShipmentCancellation(b *bool) *CarrierGLSCreate {
	if b != nil {
		cgc.SetSyncShipmentCancellation(*b)
	}
	return cgc
}

// SetPrintErrorOnLabel sets the "print_error_on_label" field.
func (cgc *CarrierGLSCreate) SetPrintErrorOnLabel(b bool) *CarrierGLSCreate {
	cgc.mutation.SetPrintErrorOnLabel(b)
	return cgc
}

// SetNillablePrintErrorOnLabel sets the "print_error_on_label" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillablePrintErrorOnLabel(b *bool) *CarrierGLSCreate {
	if b != nil {
		cgc.SetPrintErrorOnLabel(*b)
	}
	return cgc
}

// SetID sets the "id" field.
func (cgc *CarrierGLSCreate) SetID(pu pulid.ID) *CarrierGLSCreate {
	cgc.mutation.SetID(pu)
	return cgc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cgc *CarrierGLSCreate) SetNillableID(pu *pulid.ID) *CarrierGLSCreate {
	if pu != nil {
		cgc.SetID(*pu)
	}
	return cgc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cgc *CarrierGLSCreate) SetTenant(t *Tenant) *CarrierGLSCreate {
	return cgc.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cgc *CarrierGLSCreate) SetCarrierID(id pulid.ID) *CarrierGLSCreate {
	cgc.mutation.SetCarrierID(id)
	return cgc
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cgc *CarrierGLSCreate) SetCarrier(c *Carrier) *CarrierGLSCreate {
	return cgc.SetCarrierID(c.ID)
}

// Mutation returns the CarrierGLSMutation object of the builder.
func (cgc *CarrierGLSCreate) Mutation() *CarrierGLSMutation {
	return cgc.mutation
}

// Save creates the CarrierGLS in the database.
func (cgc *CarrierGLSCreate) Save(ctx context.Context) (*CarrierGLS, error) {
	if err := cgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cgc.sqlSave, cgc.mutation, cgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cgc *CarrierGLSCreate) SaveX(ctx context.Context) *CarrierGLS {
	v, err := cgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgc *CarrierGLSCreate) Exec(ctx context.Context) error {
	_, err := cgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgc *CarrierGLSCreate) ExecX(ctx context.Context) {
	if err := cgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cgc *CarrierGLSCreate) defaults() error {
	if _, ok := cgc.mutation.SyncShipmentCancellation(); !ok {
		v := carriergls.DefaultSyncShipmentCancellation
		cgc.mutation.SetSyncShipmentCancellation(v)
	}
	if _, ok := cgc.mutation.PrintErrorOnLabel(); !ok {
		v := carriergls.DefaultPrintErrorOnLabel
		cgc.mutation.SetPrintErrorOnLabel(v)
	}
	if _, ok := cgc.mutation.ID(); !ok {
		if carriergls.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized carriergls.DefaultID (forgotten import ent/runtime?)")
		}
		v := carriergls.DefaultID()
		cgc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cgc *CarrierGLSCreate) check() error {
	if _, ok := cgc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "CarrierGLS.tenant_id"`)}
	}
	if len(cgc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "CarrierGLS.tenant"`)}
	}
	if len(cgc.mutation.CarrierIDs()) == 0 {
		return &ValidationError{Name: "carrier", err: errors.New(`ent: missing required edge "CarrierGLS.carrier"`)}
	}
	return nil
}

func (cgc *CarrierGLSCreate) sqlSave(ctx context.Context) (*CarrierGLS, error) {
	if err := cgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cgc.mutation.id = &_node.ID
	cgc.mutation.done = true
	return _node, nil
}

func (cgc *CarrierGLSCreate) createSpec() (*CarrierGLS, *sqlgraph.CreateSpec) {
	var (
		_node = &CarrierGLS{config: cgc.config}
		_spec = sqlgraph.NewCreateSpec(carriergls.Table, sqlgraph.NewFieldSpec(carriergls.FieldID, field.TypeString))
	)
	_spec.OnConflict = cgc.conflict
	if id, ok := cgc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cgc.mutation.ContactID(); ok {
		_spec.SetField(carriergls.FieldContactID, field.TypeString, value)
		_node.ContactID = value
	}
	if value, ok := cgc.mutation.GLSUsername(); ok {
		_spec.SetField(carriergls.FieldGLSUsername, field.TypeString, value)
		_node.GLSUsername = value
	}
	if value, ok := cgc.mutation.GLSPassword(); ok {
		_spec.SetField(carriergls.FieldGLSPassword, field.TypeString, value)
		_node.GLSPassword = value
	}
	if value, ok := cgc.mutation.CustomerID(); ok {
		_spec.SetField(carriergls.FieldCustomerID, field.TypeString, value)
		_node.CustomerID = value
	}
	if value, ok := cgc.mutation.GLSCountryCode(); ok {
		_spec.SetField(carriergls.FieldGLSCountryCode, field.TypeString, value)
		_node.GLSCountryCode = value
	}
	if value, ok := cgc.mutation.SyncShipmentCancellation(); ok {
		_spec.SetField(carriergls.FieldSyncShipmentCancellation, field.TypeBool, value)
		_node.SyncShipmentCancellation = value
	}
	if value, ok := cgc.mutation.PrintErrorOnLabel(); ok {
		_spec.SetField(carriergls.FieldPrintErrorOnLabel, field.TypeBool, value)
		_node.PrintErrorOnLabel = value
	}
	if nodes := cgc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriergls.TenantTable,
			Columns: []string{carriergls.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cgc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriergls.CarrierTable,
			Columns: []string{carriergls.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.carrier_carrier_gls = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierGLS.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierGLSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cgc *CarrierGLSCreate) OnConflict(opts ...sql.ConflictOption) *CarrierGLSUpsertOne {
	cgc.conflict = opts
	return &CarrierGLSUpsertOne{
		create: cgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cgc *CarrierGLSCreate) OnConflictColumns(columns ...string) *CarrierGLSUpsertOne {
	cgc.conflict = append(cgc.conflict, sql.ConflictColumns(columns...))
	return &CarrierGLSUpsertOne{
		create: cgc,
	}
}

type (
	// CarrierGLSUpsertOne is the builder for "upsert"-ing
	//  one CarrierGLS node.
	CarrierGLSUpsertOne struct {
		create *CarrierGLSCreate
	}

	// CarrierGLSUpsert is the "OnConflict" setter.
	CarrierGLSUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *CarrierGLSUpsert) SetTenantID(v pulid.ID) *CarrierGLSUpsert {
	u.Set(carriergls.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateTenantID() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldTenantID)
	return u
}

// SetContactID sets the "contact_id" field.
func (u *CarrierGLSUpsert) SetContactID(v string) *CarrierGLSUpsert {
	u.Set(carriergls.FieldContactID, v)
	return u
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateContactID() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldContactID)
	return u
}

// ClearContactID clears the value of the "contact_id" field.
func (u *CarrierGLSUpsert) ClearContactID() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldContactID)
	return u
}

// SetGLSUsername sets the "gls_username" field.
func (u *CarrierGLSUpsert) SetGLSUsername(v string) *CarrierGLSUpsert {
	u.Set(carriergls.FieldGLSUsername, v)
	return u
}

// UpdateGLSUsername sets the "gls_username" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateGLSUsername() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldGLSUsername)
	return u
}

// ClearGLSUsername clears the value of the "gls_username" field.
func (u *CarrierGLSUpsert) ClearGLSUsername() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldGLSUsername)
	return u
}

// SetGLSPassword sets the "gls_password" field.
func (u *CarrierGLSUpsert) SetGLSPassword(v string) *CarrierGLSUpsert {
	u.Set(carriergls.FieldGLSPassword, v)
	return u
}

// UpdateGLSPassword sets the "gls_password" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateGLSPassword() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldGLSPassword)
	return u
}

// ClearGLSPassword clears the value of the "gls_password" field.
func (u *CarrierGLSUpsert) ClearGLSPassword() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldGLSPassword)
	return u
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierGLSUpsert) SetCustomerID(v string) *CarrierGLSUpsert {
	u.Set(carriergls.FieldCustomerID, v)
	return u
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateCustomerID() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldCustomerID)
	return u
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CarrierGLSUpsert) ClearCustomerID() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldCustomerID)
	return u
}

// SetGLSCountryCode sets the "gls_country_code" field.
func (u *CarrierGLSUpsert) SetGLSCountryCode(v string) *CarrierGLSUpsert {
	u.Set(carriergls.FieldGLSCountryCode, v)
	return u
}

// UpdateGLSCountryCode sets the "gls_country_code" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateGLSCountryCode() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldGLSCountryCode)
	return u
}

// ClearGLSCountryCode clears the value of the "gls_country_code" field.
func (u *CarrierGLSUpsert) ClearGLSCountryCode() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldGLSCountryCode)
	return u
}

// SetSyncShipmentCancellation sets the "sync_shipment_cancellation" field.
func (u *CarrierGLSUpsert) SetSyncShipmentCancellation(v bool) *CarrierGLSUpsert {
	u.Set(carriergls.FieldSyncShipmentCancellation, v)
	return u
}

// UpdateSyncShipmentCancellation sets the "sync_shipment_cancellation" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdateSyncShipmentCancellation() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldSyncShipmentCancellation)
	return u
}

// ClearSyncShipmentCancellation clears the value of the "sync_shipment_cancellation" field.
func (u *CarrierGLSUpsert) ClearSyncShipmentCancellation() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldSyncShipmentCancellation)
	return u
}

// SetPrintErrorOnLabel sets the "print_error_on_label" field.
func (u *CarrierGLSUpsert) SetPrintErrorOnLabel(v bool) *CarrierGLSUpsert {
	u.Set(carriergls.FieldPrintErrorOnLabel, v)
	return u
}

// UpdatePrintErrorOnLabel sets the "print_error_on_label" field to the value that was provided on create.
func (u *CarrierGLSUpsert) UpdatePrintErrorOnLabel() *CarrierGLSUpsert {
	u.SetExcluded(carriergls.FieldPrintErrorOnLabel)
	return u
}

// ClearPrintErrorOnLabel clears the value of the "print_error_on_label" field.
func (u *CarrierGLSUpsert) ClearPrintErrorOnLabel() *CarrierGLSUpsert {
	u.SetNull(carriergls.FieldPrintErrorOnLabel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CarrierGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carriergls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierGLSUpsertOne) UpdateNewValues() *CarrierGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(carriergls.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierGLS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CarrierGLSUpsertOne) Ignore() *CarrierGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierGLSUpsertOne) DoNothing() *CarrierGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierGLSCreate.OnConflict
// documentation for more info.
func (u *CarrierGLSUpsertOne) Update(set func(*CarrierGLSUpsert)) *CarrierGLSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierGLSUpsertOne) SetTenantID(v pulid.ID) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateTenantID() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateTenantID()
	})
}

// SetContactID sets the "contact_id" field.
func (u *CarrierGLSUpsertOne) SetContactID(v string) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetContactID(v)
	})
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateContactID() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateContactID()
	})
}

// ClearContactID clears the value of the "contact_id" field.
func (u *CarrierGLSUpsertOne) ClearContactID() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearContactID()
	})
}

// SetGLSUsername sets the "gls_username" field.
func (u *CarrierGLSUpsertOne) SetGLSUsername(v string) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetGLSUsername(v)
	})
}

// UpdateGLSUsername sets the "gls_username" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateGLSUsername() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateGLSUsername()
	})
}

// ClearGLSUsername clears the value of the "gls_username" field.
func (u *CarrierGLSUpsertOne) ClearGLSUsername() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearGLSUsername()
	})
}

// SetGLSPassword sets the "gls_password" field.
func (u *CarrierGLSUpsertOne) SetGLSPassword(v string) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetGLSPassword(v)
	})
}

// UpdateGLSPassword sets the "gls_password" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateGLSPassword() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateGLSPassword()
	})
}

// ClearGLSPassword clears the value of the "gls_password" field.
func (u *CarrierGLSUpsertOne) ClearGLSPassword() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearGLSPassword()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierGLSUpsertOne) SetCustomerID(v string) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateCustomerID() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CarrierGLSUpsertOne) ClearCustomerID() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearCustomerID()
	})
}

// SetGLSCountryCode sets the "gls_country_code" field.
func (u *CarrierGLSUpsertOne) SetGLSCountryCode(v string) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetGLSCountryCode(v)
	})
}

// UpdateGLSCountryCode sets the "gls_country_code" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateGLSCountryCode() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateGLSCountryCode()
	})
}

// ClearGLSCountryCode clears the value of the "gls_country_code" field.
func (u *CarrierGLSUpsertOne) ClearGLSCountryCode() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearGLSCountryCode()
	})
}

// SetSyncShipmentCancellation sets the "sync_shipment_cancellation" field.
func (u *CarrierGLSUpsertOne) SetSyncShipmentCancellation(v bool) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetSyncShipmentCancellation(v)
	})
}

// UpdateSyncShipmentCancellation sets the "sync_shipment_cancellation" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdateSyncShipmentCancellation() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateSyncShipmentCancellation()
	})
}

// ClearSyncShipmentCancellation clears the value of the "sync_shipment_cancellation" field.
func (u *CarrierGLSUpsertOne) ClearSyncShipmentCancellation() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearSyncShipmentCancellation()
	})
}

// SetPrintErrorOnLabel sets the "print_error_on_label" field.
func (u *CarrierGLSUpsertOne) SetPrintErrorOnLabel(v bool) *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetPrintErrorOnLabel(v)
	})
}

// UpdatePrintErrorOnLabel sets the "print_error_on_label" field to the value that was provided on create.
func (u *CarrierGLSUpsertOne) UpdatePrintErrorOnLabel() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdatePrintErrorOnLabel()
	})
}

// ClearPrintErrorOnLabel clears the value of the "print_error_on_label" field.
func (u *CarrierGLSUpsertOne) ClearPrintErrorOnLabel() *CarrierGLSUpsertOne {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearPrintErrorOnLabel()
	})
}

// Exec executes the query.
func (u *CarrierGLSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierGLSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierGLSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CarrierGLSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CarrierGLSUpsertOne.ID is not supported by MySQL driver. Use CarrierGLSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CarrierGLSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CarrierGLSCreateBulk is the builder for creating many CarrierGLS entities in bulk.
type CarrierGLSCreateBulk struct {
	config
	err      error
	builders []*CarrierGLSCreate
	conflict []sql.ConflictOption
}

// Save creates the CarrierGLS entities in the database.
func (cgcb *CarrierGLSCreateBulk) Save(ctx context.Context) ([]*CarrierGLS, error) {
	if cgcb.err != nil {
		return nil, cgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cgcb.builders))
	nodes := make([]*CarrierGLS, len(cgcb.builders))
	mutators := make([]Mutator, len(cgcb.builders))
	for i := range cgcb.builders {
		func(i int, root context.Context) {
			builder := cgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarrierGLSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cgcb *CarrierGLSCreateBulk) SaveX(ctx context.Context) []*CarrierGLS {
	v, err := cgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cgcb *CarrierGLSCreateBulk) Exec(ctx context.Context) error {
	_, err := cgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cgcb *CarrierGLSCreateBulk) ExecX(ctx context.Context) {
	if err := cgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CarrierGLS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CarrierGLSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cgcb *CarrierGLSCreateBulk) OnConflict(opts ...sql.ConflictOption) *CarrierGLSUpsertBulk {
	cgcb.conflict = opts
	return &CarrierGLSUpsertBulk{
		create: cgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CarrierGLS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cgcb *CarrierGLSCreateBulk) OnConflictColumns(columns ...string) *CarrierGLSUpsertBulk {
	cgcb.conflict = append(cgcb.conflict, sql.ConflictColumns(columns...))
	return &CarrierGLSUpsertBulk{
		create: cgcb,
	}
}

// CarrierGLSUpsertBulk is the builder for "upsert"-ing
// a bulk of CarrierGLS nodes.
type CarrierGLSUpsertBulk struct {
	create *CarrierGLSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CarrierGLS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(carriergls.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CarrierGLSUpsertBulk) UpdateNewValues() *CarrierGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(carriergls.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CarrierGLS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CarrierGLSUpsertBulk) Ignore() *CarrierGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CarrierGLSUpsertBulk) DoNothing() *CarrierGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CarrierGLSCreateBulk.OnConflict
// documentation for more info.
func (u *CarrierGLSUpsertBulk) Update(set func(*CarrierGLSUpsert)) *CarrierGLSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CarrierGLSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *CarrierGLSUpsertBulk) SetTenantID(v pulid.ID) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateTenantID() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateTenantID()
	})
}

// SetContactID sets the "contact_id" field.
func (u *CarrierGLSUpsertBulk) SetContactID(v string) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetContactID(v)
	})
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateContactID() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateContactID()
	})
}

// ClearContactID clears the value of the "contact_id" field.
func (u *CarrierGLSUpsertBulk) ClearContactID() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearContactID()
	})
}

// SetGLSUsername sets the "gls_username" field.
func (u *CarrierGLSUpsertBulk) SetGLSUsername(v string) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetGLSUsername(v)
	})
}

// UpdateGLSUsername sets the "gls_username" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateGLSUsername() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateGLSUsername()
	})
}

// ClearGLSUsername clears the value of the "gls_username" field.
func (u *CarrierGLSUpsertBulk) ClearGLSUsername() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearGLSUsername()
	})
}

// SetGLSPassword sets the "gls_password" field.
func (u *CarrierGLSUpsertBulk) SetGLSPassword(v string) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetGLSPassword(v)
	})
}

// UpdateGLSPassword sets the "gls_password" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateGLSPassword() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateGLSPassword()
	})
}

// ClearGLSPassword clears the value of the "gls_password" field.
func (u *CarrierGLSUpsertBulk) ClearGLSPassword() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearGLSPassword()
	})
}

// SetCustomerID sets the "customer_id" field.
func (u *CarrierGLSUpsertBulk) SetCustomerID(v string) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetCustomerID(v)
	})
}

// UpdateCustomerID sets the "customer_id" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateCustomerID() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateCustomerID()
	})
}

// ClearCustomerID clears the value of the "customer_id" field.
func (u *CarrierGLSUpsertBulk) ClearCustomerID() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearCustomerID()
	})
}

// SetGLSCountryCode sets the "gls_country_code" field.
func (u *CarrierGLSUpsertBulk) SetGLSCountryCode(v string) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetGLSCountryCode(v)
	})
}

// UpdateGLSCountryCode sets the "gls_country_code" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateGLSCountryCode() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateGLSCountryCode()
	})
}

// ClearGLSCountryCode clears the value of the "gls_country_code" field.
func (u *CarrierGLSUpsertBulk) ClearGLSCountryCode() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearGLSCountryCode()
	})
}

// SetSyncShipmentCancellation sets the "sync_shipment_cancellation" field.
func (u *CarrierGLSUpsertBulk) SetSyncShipmentCancellation(v bool) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetSyncShipmentCancellation(v)
	})
}

// UpdateSyncShipmentCancellation sets the "sync_shipment_cancellation" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdateSyncShipmentCancellation() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdateSyncShipmentCancellation()
	})
}

// ClearSyncShipmentCancellation clears the value of the "sync_shipment_cancellation" field.
func (u *CarrierGLSUpsertBulk) ClearSyncShipmentCancellation() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearSyncShipmentCancellation()
	})
}

// SetPrintErrorOnLabel sets the "print_error_on_label" field.
func (u *CarrierGLSUpsertBulk) SetPrintErrorOnLabel(v bool) *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.SetPrintErrorOnLabel(v)
	})
}

// UpdatePrintErrorOnLabel sets the "print_error_on_label" field to the value that was provided on create.
func (u *CarrierGLSUpsertBulk) UpdatePrintErrorOnLabel() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.UpdatePrintErrorOnLabel()
	})
}

// ClearPrintErrorOnLabel clears the value of the "print_error_on_label" field.
func (u *CarrierGLSUpsertBulk) ClearPrintErrorOnLabel() *CarrierGLSUpsertBulk {
	return u.Update(func(s *CarrierGLSUpsert) {
		s.ClearPrintErrorOnLabel()
	})
}

// Exec executes the query.
func (u *CarrierGLSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CarrierGLSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CarrierGLSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CarrierGLSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
