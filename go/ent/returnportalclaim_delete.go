// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnportalclaim"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalClaimDelete is the builder for deleting a ReturnPortalClaim entity.
type ReturnPortalClaimDelete struct {
	config
	hooks    []Hook
	mutation *ReturnPortalClaimMutation
}

// Where appends a list predicates to the ReturnPortalClaimDelete builder.
func (rpcd *ReturnPortalClaimDelete) Where(ps ...predicate.ReturnPortalClaim) *ReturnPortalClaimDelete {
	rpcd.mutation.Where(ps...)
	return rpcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rpcd *ReturnPortalClaimDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rpcd.sqlExec, rpcd.mutation, rpcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcd *ReturnPortalClaimDelete) ExecX(ctx context.Context) int {
	n, err := rpcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rpcd *ReturnPortalClaimDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(returnportalclaim.Table, sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString))
	if ps := rpcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rpcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rpcd.mutation.done = true
	return affected, err
}

// ReturnPortalClaimDeleteOne is the builder for deleting a single ReturnPortalClaim entity.
type ReturnPortalClaimDeleteOne struct {
	rpcd *ReturnPortalClaimDelete
}

// Where appends a list predicates to the ReturnPortalClaimDelete builder.
func (rpcdo *ReturnPortalClaimDeleteOne) Where(ps ...predicate.ReturnPortalClaim) *ReturnPortalClaimDeleteOne {
	rpcdo.rpcd.mutation.Where(ps...)
	return rpcdo
}

// Exec executes the deletion query.
func (rpcdo *ReturnPortalClaimDeleteOne) Exec(ctx context.Context) error {
	n, err := rpcdo.rpcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{returnportalclaim.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpcdo *ReturnPortalClaimDeleteOne) ExecX(ctx context.Context) {
	if err := rpcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
