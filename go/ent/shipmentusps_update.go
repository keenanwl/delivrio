// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentUSPSUpdate is the builder for updating ShipmentUSPS entities.
type ShipmentUSPSUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentUSPSMutation
}

// Where appends a list predicates to the ShipmentUSPSUpdate builder.
func (suu *ShipmentUSPSUpdate) Where(ps ...predicate.ShipmentUSPS) *ShipmentUSPSUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetTenantID sets the "tenant_id" field.
func (suu *ShipmentUSPSUpdate) SetTenantID(pu pulid.ID) *ShipmentUSPSUpdate {
	suu.mutation.SetTenantID(pu)
	return suu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (suu *ShipmentUSPSUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentUSPSUpdate {
	if pu != nil {
		suu.SetTenantID(*pu)
	}
	return suu
}

// SetTrackingNumber sets the "tracking_number" field.
func (suu *ShipmentUSPSUpdate) SetTrackingNumber(s string) *ShipmentUSPSUpdate {
	suu.mutation.SetTrackingNumber(s)
	return suu
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (suu *ShipmentUSPSUpdate) SetNillableTrackingNumber(s *string) *ShipmentUSPSUpdate {
	if s != nil {
		suu.SetTrackingNumber(*s)
	}
	return suu
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (suu *ShipmentUSPSUpdate) ClearTrackingNumber() *ShipmentUSPSUpdate {
	suu.mutation.ClearTrackingNumber()
	return suu
}

// SetPostage sets the "postage" field.
func (suu *ShipmentUSPSUpdate) SetPostage(f float64) *ShipmentUSPSUpdate {
	suu.mutation.ResetPostage()
	suu.mutation.SetPostage(f)
	return suu
}

// SetNillablePostage sets the "postage" field if the given value is not nil.
func (suu *ShipmentUSPSUpdate) SetNillablePostage(f *float64) *ShipmentUSPSUpdate {
	if f != nil {
		suu.SetPostage(*f)
	}
	return suu
}

// AddPostage adds f to the "postage" field.
func (suu *ShipmentUSPSUpdate) AddPostage(f float64) *ShipmentUSPSUpdate {
	suu.mutation.AddPostage(f)
	return suu
}

// ClearPostage clears the value of the "postage" field.
func (suu *ShipmentUSPSUpdate) ClearPostage() *ShipmentUSPSUpdate {
	suu.mutation.ClearPostage()
	return suu
}

// SetScheduledDeliveryDate sets the "scheduled_delivery_date" field.
func (suu *ShipmentUSPSUpdate) SetScheduledDeliveryDate(t time.Time) *ShipmentUSPSUpdate {
	suu.mutation.SetScheduledDeliveryDate(t)
	return suu
}

// SetNillableScheduledDeliveryDate sets the "scheduled_delivery_date" field if the given value is not nil.
func (suu *ShipmentUSPSUpdate) SetNillableScheduledDeliveryDate(t *time.Time) *ShipmentUSPSUpdate {
	if t != nil {
		suu.SetScheduledDeliveryDate(*t)
	}
	return suu
}

// ClearScheduledDeliveryDate clears the value of the "scheduled_delivery_date" field.
func (suu *ShipmentUSPSUpdate) ClearScheduledDeliveryDate() *ShipmentUSPSUpdate {
	suu.mutation.ClearScheduledDeliveryDate()
	return suu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suu *ShipmentUSPSUpdate) SetTenant(t *Tenant) *ShipmentUSPSUpdate {
	return suu.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (suu *ShipmentUSPSUpdate) SetShipmentID(id pulid.ID) *ShipmentUSPSUpdate {
	suu.mutation.SetShipmentID(id)
	return suu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (suu *ShipmentUSPSUpdate) SetShipment(s *Shipment) *ShipmentUSPSUpdate {
	return suu.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentUSPSMutation object of the builder.
func (suu *ShipmentUSPSUpdate) Mutation() *ShipmentUSPSMutation {
	return suu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suu *ShipmentUSPSUpdate) ClearTenant() *ShipmentUSPSUpdate {
	suu.mutation.ClearTenant()
	return suu
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (suu *ShipmentUSPSUpdate) ClearShipment() *ShipmentUSPSUpdate {
	suu.mutation.ClearShipment()
	return suu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *ShipmentUSPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *ShipmentUSPSUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *ShipmentUSPSUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *ShipmentUSPSUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suu *ShipmentUSPSUpdate) check() error {
	if suu.mutation.TenantCleared() && len(suu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentUSPS.tenant"`)
	}
	if suu.mutation.ShipmentCleared() && len(suu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentUSPS.shipment"`)
	}
	return nil
}

func (suu *ShipmentUSPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := suu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentusps.Table, shipmentusps.Columns, sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.TrackingNumber(); ok {
		_spec.SetField(shipmentusps.FieldTrackingNumber, field.TypeString, value)
	}
	if suu.mutation.TrackingNumberCleared() {
		_spec.ClearField(shipmentusps.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := suu.mutation.Postage(); ok {
		_spec.SetField(shipmentusps.FieldPostage, field.TypeFloat64, value)
	}
	if value, ok := suu.mutation.AddedPostage(); ok {
		_spec.AddField(shipmentusps.FieldPostage, field.TypeFloat64, value)
	}
	if suu.mutation.PostageCleared() {
		_spec.ClearField(shipmentusps.FieldPostage, field.TypeFloat64)
	}
	if value, ok := suu.mutation.ScheduledDeliveryDate(); ok {
		_spec.SetField(shipmentusps.FieldScheduledDeliveryDate, field.TypeTime, value)
	}
	if suu.mutation.ScheduledDeliveryDateCleared() {
		_spec.ClearField(shipmentusps.FieldScheduledDeliveryDate, field.TypeTime)
	}
	if suu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentusps.TenantTable,
			Columns: []string{shipmentusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentusps.TenantTable,
			Columns: []string{shipmentusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentusps.ShipmentTable,
			Columns: []string{shipmentusps.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentusps.ShipmentTable,
			Columns: []string{shipmentusps.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// ShipmentUSPSUpdateOne is the builder for updating a single ShipmentUSPS entity.
type ShipmentUSPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentUSPSMutation
}

// SetTenantID sets the "tenant_id" field.
func (suuo *ShipmentUSPSUpdateOne) SetTenantID(pu pulid.ID) *ShipmentUSPSUpdateOne {
	suuo.mutation.SetTenantID(pu)
	return suuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (suuo *ShipmentUSPSUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentUSPSUpdateOne {
	if pu != nil {
		suuo.SetTenantID(*pu)
	}
	return suuo
}

// SetTrackingNumber sets the "tracking_number" field.
func (suuo *ShipmentUSPSUpdateOne) SetTrackingNumber(s string) *ShipmentUSPSUpdateOne {
	suuo.mutation.SetTrackingNumber(s)
	return suuo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (suuo *ShipmentUSPSUpdateOne) SetNillableTrackingNumber(s *string) *ShipmentUSPSUpdateOne {
	if s != nil {
		suuo.SetTrackingNumber(*s)
	}
	return suuo
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (suuo *ShipmentUSPSUpdateOne) ClearTrackingNumber() *ShipmentUSPSUpdateOne {
	suuo.mutation.ClearTrackingNumber()
	return suuo
}

// SetPostage sets the "postage" field.
func (suuo *ShipmentUSPSUpdateOne) SetPostage(f float64) *ShipmentUSPSUpdateOne {
	suuo.mutation.ResetPostage()
	suuo.mutation.SetPostage(f)
	return suuo
}

// SetNillablePostage sets the "postage" field if the given value is not nil.
func (suuo *ShipmentUSPSUpdateOne) SetNillablePostage(f *float64) *ShipmentUSPSUpdateOne {
	if f != nil {
		suuo.SetPostage(*f)
	}
	return suuo
}

// AddPostage adds f to the "postage" field.
func (suuo *ShipmentUSPSUpdateOne) AddPostage(f float64) *ShipmentUSPSUpdateOne {
	suuo.mutation.AddPostage(f)
	return suuo
}

// ClearPostage clears the value of the "postage" field.
func (suuo *ShipmentUSPSUpdateOne) ClearPostage() *ShipmentUSPSUpdateOne {
	suuo.mutation.ClearPostage()
	return suuo
}

// SetScheduledDeliveryDate sets the "scheduled_delivery_date" field.
func (suuo *ShipmentUSPSUpdateOne) SetScheduledDeliveryDate(t time.Time) *ShipmentUSPSUpdateOne {
	suuo.mutation.SetScheduledDeliveryDate(t)
	return suuo
}

// SetNillableScheduledDeliveryDate sets the "scheduled_delivery_date" field if the given value is not nil.
func (suuo *ShipmentUSPSUpdateOne) SetNillableScheduledDeliveryDate(t *time.Time) *ShipmentUSPSUpdateOne {
	if t != nil {
		suuo.SetScheduledDeliveryDate(*t)
	}
	return suuo
}

// ClearScheduledDeliveryDate clears the value of the "scheduled_delivery_date" field.
func (suuo *ShipmentUSPSUpdateOne) ClearScheduledDeliveryDate() *ShipmentUSPSUpdateOne {
	suuo.mutation.ClearScheduledDeliveryDate()
	return suuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suuo *ShipmentUSPSUpdateOne) SetTenant(t *Tenant) *ShipmentUSPSUpdateOne {
	return suuo.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (suuo *ShipmentUSPSUpdateOne) SetShipmentID(id pulid.ID) *ShipmentUSPSUpdateOne {
	suuo.mutation.SetShipmentID(id)
	return suuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (suuo *ShipmentUSPSUpdateOne) SetShipment(s *Shipment) *ShipmentUSPSUpdateOne {
	return suuo.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentUSPSMutation object of the builder.
func (suuo *ShipmentUSPSUpdateOne) Mutation() *ShipmentUSPSMutation {
	return suuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suuo *ShipmentUSPSUpdateOne) ClearTenant() *ShipmentUSPSUpdateOne {
	suuo.mutation.ClearTenant()
	return suuo
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (suuo *ShipmentUSPSUpdateOne) ClearShipment() *ShipmentUSPSUpdateOne {
	suuo.mutation.ClearShipment()
	return suuo
}

// Where appends a list predicates to the ShipmentUSPSUpdate builder.
func (suuo *ShipmentUSPSUpdateOne) Where(ps ...predicate.ShipmentUSPS) *ShipmentUSPSUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *ShipmentUSPSUpdateOne) Select(field string, fields ...string) *ShipmentUSPSUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated ShipmentUSPS entity.
func (suuo *ShipmentUSPSUpdateOne) Save(ctx context.Context) (*ShipmentUSPS, error) {
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *ShipmentUSPSUpdateOne) SaveX(ctx context.Context) *ShipmentUSPS {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *ShipmentUSPSUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *ShipmentUSPSUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suuo *ShipmentUSPSUpdateOne) check() error {
	if suuo.mutation.TenantCleared() && len(suuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentUSPS.tenant"`)
	}
	if suuo.mutation.ShipmentCleared() && len(suuo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentUSPS.shipment"`)
	}
	return nil
}

func (suuo *ShipmentUSPSUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentUSPS, err error) {
	if err := suuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentusps.Table, shipmentusps.Columns, sqlgraph.NewFieldSpec(shipmentusps.FieldID, field.TypeString))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentUSPS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentusps.FieldID)
		for _, f := range fields {
			if !shipmentusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.TrackingNumber(); ok {
		_spec.SetField(shipmentusps.FieldTrackingNumber, field.TypeString, value)
	}
	if suuo.mutation.TrackingNumberCleared() {
		_spec.ClearField(shipmentusps.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := suuo.mutation.Postage(); ok {
		_spec.SetField(shipmentusps.FieldPostage, field.TypeFloat64, value)
	}
	if value, ok := suuo.mutation.AddedPostage(); ok {
		_spec.AddField(shipmentusps.FieldPostage, field.TypeFloat64, value)
	}
	if suuo.mutation.PostageCleared() {
		_spec.ClearField(shipmentusps.FieldPostage, field.TypeFloat64)
	}
	if value, ok := suuo.mutation.ScheduledDeliveryDate(); ok {
		_spec.SetField(shipmentusps.FieldScheduledDeliveryDate, field.TypeTime, value)
	}
	if suuo.mutation.ScheduledDeliveryDateCleared() {
		_spec.ClearField(shipmentusps.FieldScheduledDeliveryDate, field.TypeTime)
	}
	if suuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentusps.TenantTable,
			Columns: []string{shipmentusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentusps.TenantTable,
			Columns: []string{shipmentusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentusps.ShipmentTable,
			Columns: []string{shipmentusps.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentusps.ShipmentTable,
			Columns: []string{shipmentusps.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentUSPS{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
