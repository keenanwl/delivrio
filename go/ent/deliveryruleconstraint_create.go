// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleConstraintCreate is the builder for creating a DeliveryRuleConstraint entity.
type DeliveryRuleConstraintCreate struct {
	config
	mutation *DeliveryRuleConstraintMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (drcc *DeliveryRuleConstraintCreate) SetTenantID(pu pulid.ID) *DeliveryRuleConstraintCreate {
	drcc.mutation.SetTenantID(pu)
	return drcc
}

// SetPropertyType sets the "property_type" field.
func (drcc *DeliveryRuleConstraintCreate) SetPropertyType(dt deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintCreate {
	drcc.mutation.SetPropertyType(dt)
	return drcc
}

// SetComparison sets the "comparison" field.
func (drcc *DeliveryRuleConstraintCreate) SetComparison(d deliveryruleconstraint.Comparison) *DeliveryRuleConstraintCreate {
	drcc.mutation.SetComparison(d)
	return drcc
}

// SetSelectedValue sets the "selected_value" field.
func (drcc *DeliveryRuleConstraintCreate) SetSelectedValue(frcsv *fieldjson.DeliveryRuleConstraintSelectedValue) *DeliveryRuleConstraintCreate {
	drcc.mutation.SetSelectedValue(frcsv)
	return drcc
}

// SetID sets the "id" field.
func (drcc *DeliveryRuleConstraintCreate) SetID(pu pulid.ID) *DeliveryRuleConstraintCreate {
	drcc.mutation.SetID(pu)
	return drcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drcc *DeliveryRuleConstraintCreate) SetNillableID(pu *pulid.ID) *DeliveryRuleConstraintCreate {
	if pu != nil {
		drcc.SetID(*pu)
	}
	return drcc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (drcc *DeliveryRuleConstraintCreate) SetTenant(t *Tenant) *DeliveryRuleConstraintCreate {
	return drcc.SetTenantID(t.ID)
}

// SetDeliveryRuleConstraintGroupID sets the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity by ID.
func (drcc *DeliveryRuleConstraintCreate) SetDeliveryRuleConstraintGroupID(id pulid.ID) *DeliveryRuleConstraintCreate {
	drcc.mutation.SetDeliveryRuleConstraintGroupID(id)
	return drcc
}

// SetDeliveryRuleConstraintGroup sets the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity.
func (drcc *DeliveryRuleConstraintCreate) SetDeliveryRuleConstraintGroup(d *DeliveryRuleConstraintGroup) *DeliveryRuleConstraintCreate {
	return drcc.SetDeliveryRuleConstraintGroupID(d.ID)
}

// Mutation returns the DeliveryRuleConstraintMutation object of the builder.
func (drcc *DeliveryRuleConstraintCreate) Mutation() *DeliveryRuleConstraintMutation {
	return drcc.mutation
}

// Save creates the DeliveryRuleConstraint in the database.
func (drcc *DeliveryRuleConstraintCreate) Save(ctx context.Context) (*DeliveryRuleConstraint, error) {
	if err := drcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, drcc.sqlSave, drcc.mutation, drcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drcc *DeliveryRuleConstraintCreate) SaveX(ctx context.Context) *DeliveryRuleConstraint {
	v, err := drcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcc *DeliveryRuleConstraintCreate) Exec(ctx context.Context) error {
	_, err := drcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcc *DeliveryRuleConstraintCreate) ExecX(ctx context.Context) {
	if err := drcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drcc *DeliveryRuleConstraintCreate) defaults() error {
	if _, ok := drcc.mutation.ID(); !ok {
		if deliveryruleconstraint.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryruleconstraint.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryruleconstraint.DefaultID()
		drcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (drcc *DeliveryRuleConstraintCreate) check() error {
	if _, ok := drcc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryRuleConstraint.tenant_id"`)}
	}
	if _, ok := drcc.mutation.PropertyType(); !ok {
		return &ValidationError{Name: "property_type", err: errors.New(`ent: missing required field "DeliveryRuleConstraint.property_type"`)}
	}
	if v, ok := drcc.mutation.PropertyType(); ok {
		if err := deliveryruleconstraint.PropertyTypeValidator(v); err != nil {
			return &ValidationError{Name: "property_type", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraint.property_type": %w`, err)}
		}
	}
	if _, ok := drcc.mutation.Comparison(); !ok {
		return &ValidationError{Name: "comparison", err: errors.New(`ent: missing required field "DeliveryRuleConstraint.comparison"`)}
	}
	if v, ok := drcc.mutation.Comparison(); ok {
		if err := deliveryruleconstraint.ComparisonValidator(v); err != nil {
			return &ValidationError{Name: "comparison", err: fmt.Errorf(`ent: validator failed for field "DeliveryRuleConstraint.comparison": %w`, err)}
		}
	}
	if _, ok := drcc.mutation.SelectedValue(); !ok {
		return &ValidationError{Name: "selected_value", err: errors.New(`ent: missing required field "DeliveryRuleConstraint.selected_value"`)}
	}
	if len(drcc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryRuleConstraint.tenant"`)}
	}
	if len(drcc.mutation.DeliveryRuleConstraintGroupIDs()) == 0 {
		return &ValidationError{Name: "delivery_rule_constraint_group", err: errors.New(`ent: missing required edge "DeliveryRuleConstraint.delivery_rule_constraint_group"`)}
	}
	return nil
}

func (drcc *DeliveryRuleConstraintCreate) sqlSave(ctx context.Context) (*DeliveryRuleConstraint, error) {
	if err := drcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	drcc.mutation.id = &_node.ID
	drcc.mutation.done = true
	return _node, nil
}

func (drcc *DeliveryRuleConstraintCreate) createSpec() (*DeliveryRuleConstraint, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryRuleConstraint{config: drcc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryruleconstraint.Table, sqlgraph.NewFieldSpec(deliveryruleconstraint.FieldID, field.TypeString))
	)
	_spec.OnConflict = drcc.conflict
	if id, ok := drcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := drcc.mutation.PropertyType(); ok {
		_spec.SetField(deliveryruleconstraint.FieldPropertyType, field.TypeEnum, value)
		_node.PropertyType = value
	}
	if value, ok := drcc.mutation.Comparison(); ok {
		_spec.SetField(deliveryruleconstraint.FieldComparison, field.TypeEnum, value)
		_node.Comparison = value
	}
	if value, ok := drcc.mutation.SelectedValue(); ok {
		_spec.SetField(deliveryruleconstraint.FieldSelectedValue, field.TypeOther, value)
		_node.SelectedValue = value
	}
	if nodes := drcc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraint.TenantTable,
			Columns: []string{deliveryruleconstraint.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drcc.mutation.DeliveryRuleConstraintGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraint.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryruleconstraint.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_rule_constraint_group_delivery_rule_constraints = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryRuleConstraint.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryRuleConstraintUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (drcc *DeliveryRuleConstraintCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryRuleConstraintUpsertOne {
	drcc.conflict = opts
	return &DeliveryRuleConstraintUpsertOne{
		create: drcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drcc *DeliveryRuleConstraintCreate) OnConflictColumns(columns ...string) *DeliveryRuleConstraintUpsertOne {
	drcc.conflict = append(drcc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryRuleConstraintUpsertOne{
		create: drcc,
	}
}

type (
	// DeliveryRuleConstraintUpsertOne is the builder for "upsert"-ing
	//  one DeliveryRuleConstraint node.
	DeliveryRuleConstraintUpsertOne struct {
		create *DeliveryRuleConstraintCreate
	}

	// DeliveryRuleConstraintUpsert is the "OnConflict" setter.
	DeliveryRuleConstraintUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleConstraintUpsert) SetTenantID(v pulid.ID) *DeliveryRuleConstraintUpsert {
	u.Set(deliveryruleconstraint.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsert) UpdateTenantID() *DeliveryRuleConstraintUpsert {
	u.SetExcluded(deliveryruleconstraint.FieldTenantID)
	return u
}

// SetPropertyType sets the "property_type" field.
func (u *DeliveryRuleConstraintUpsert) SetPropertyType(v deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpsert {
	u.Set(deliveryruleconstraint.FieldPropertyType, v)
	return u
}

// UpdatePropertyType sets the "property_type" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsert) UpdatePropertyType() *DeliveryRuleConstraintUpsert {
	u.SetExcluded(deliveryruleconstraint.FieldPropertyType)
	return u
}

// SetComparison sets the "comparison" field.
func (u *DeliveryRuleConstraintUpsert) SetComparison(v deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpsert {
	u.Set(deliveryruleconstraint.FieldComparison, v)
	return u
}

// UpdateComparison sets the "comparison" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsert) UpdateComparison() *DeliveryRuleConstraintUpsert {
	u.SetExcluded(deliveryruleconstraint.FieldComparison)
	return u
}

// SetSelectedValue sets the "selected_value" field.
func (u *DeliveryRuleConstraintUpsert) SetSelectedValue(v *fieldjson.DeliveryRuleConstraintSelectedValue) *DeliveryRuleConstraintUpsert {
	u.Set(deliveryruleconstraint.FieldSelectedValue, v)
	return u
}

// UpdateSelectedValue sets the "selected_value" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsert) UpdateSelectedValue() *DeliveryRuleConstraintUpsert {
	u.SetExcluded(deliveryruleconstraint.FieldSelectedValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryruleconstraint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryRuleConstraintUpsertOne) UpdateNewValues() *DeliveryRuleConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryruleconstraint.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraint.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryRuleConstraintUpsertOne) Ignore() *DeliveryRuleConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryRuleConstraintUpsertOne) DoNothing() *DeliveryRuleConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryRuleConstraintCreate.OnConflict
// documentation for more info.
func (u *DeliveryRuleConstraintUpsertOne) Update(set func(*DeliveryRuleConstraintUpsert)) *DeliveryRuleConstraintUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryRuleConstraintUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleConstraintUpsertOne) SetTenantID(v pulid.ID) *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertOne) UpdateTenantID() *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdateTenantID()
	})
}

// SetPropertyType sets the "property_type" field.
func (u *DeliveryRuleConstraintUpsertOne) SetPropertyType(v deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetPropertyType(v)
	})
}

// UpdatePropertyType sets the "property_type" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertOne) UpdatePropertyType() *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdatePropertyType()
	})
}

// SetComparison sets the "comparison" field.
func (u *DeliveryRuleConstraintUpsertOne) SetComparison(v deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetComparison(v)
	})
}

// UpdateComparison sets the "comparison" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertOne) UpdateComparison() *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdateComparison()
	})
}

// SetSelectedValue sets the "selected_value" field.
func (u *DeliveryRuleConstraintUpsertOne) SetSelectedValue(v *fieldjson.DeliveryRuleConstraintSelectedValue) *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetSelectedValue(v)
	})
}

// UpdateSelectedValue sets the "selected_value" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertOne) UpdateSelectedValue() *DeliveryRuleConstraintUpsertOne {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdateSelectedValue()
	})
}

// Exec executes the query.
func (u *DeliveryRuleConstraintUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryRuleConstraintCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryRuleConstraintUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryRuleConstraintUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryRuleConstraintUpsertOne.ID is not supported by MySQL driver. Use DeliveryRuleConstraintUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryRuleConstraintUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryRuleConstraintCreateBulk is the builder for creating many DeliveryRuleConstraint entities in bulk.
type DeliveryRuleConstraintCreateBulk struct {
	config
	err      error
	builders []*DeliveryRuleConstraintCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryRuleConstraint entities in the database.
func (drccb *DeliveryRuleConstraintCreateBulk) Save(ctx context.Context) ([]*DeliveryRuleConstraint, error) {
	if drccb.err != nil {
		return nil, drccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drccb.builders))
	nodes := make([]*DeliveryRuleConstraint, len(drccb.builders))
	mutators := make([]Mutator, len(drccb.builders))
	for i := range drccb.builders {
		func(i int, root context.Context) {
			builder := drccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryRuleConstraintMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = drccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drccb *DeliveryRuleConstraintCreateBulk) SaveX(ctx context.Context) []*DeliveryRuleConstraint {
	v, err := drccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drccb *DeliveryRuleConstraintCreateBulk) Exec(ctx context.Context) error {
	_, err := drccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drccb *DeliveryRuleConstraintCreateBulk) ExecX(ctx context.Context) {
	if err := drccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryRuleConstraint.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryRuleConstraintUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (drccb *DeliveryRuleConstraintCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryRuleConstraintUpsertBulk {
	drccb.conflict = opts
	return &DeliveryRuleConstraintUpsertBulk{
		create: drccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraint.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (drccb *DeliveryRuleConstraintCreateBulk) OnConflictColumns(columns ...string) *DeliveryRuleConstraintUpsertBulk {
	drccb.conflict = append(drccb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryRuleConstraintUpsertBulk{
		create: drccb,
	}
}

// DeliveryRuleConstraintUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryRuleConstraint nodes.
type DeliveryRuleConstraintUpsertBulk struct {
	create *DeliveryRuleConstraintCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraint.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryruleconstraint.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryRuleConstraintUpsertBulk) UpdateNewValues() *DeliveryRuleConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryruleconstraint.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryRuleConstraint.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryRuleConstraintUpsertBulk) Ignore() *DeliveryRuleConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryRuleConstraintUpsertBulk) DoNothing() *DeliveryRuleConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryRuleConstraintCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryRuleConstraintUpsertBulk) Update(set func(*DeliveryRuleConstraintUpsert)) *DeliveryRuleConstraintUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryRuleConstraintUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryRuleConstraintUpsertBulk) SetTenantID(v pulid.ID) *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertBulk) UpdateTenantID() *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdateTenantID()
	})
}

// SetPropertyType sets the "property_type" field.
func (u *DeliveryRuleConstraintUpsertBulk) SetPropertyType(v deliveryruleconstraint.PropertyType) *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetPropertyType(v)
	})
}

// UpdatePropertyType sets the "property_type" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertBulk) UpdatePropertyType() *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdatePropertyType()
	})
}

// SetComparison sets the "comparison" field.
func (u *DeliveryRuleConstraintUpsertBulk) SetComparison(v deliveryruleconstraint.Comparison) *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetComparison(v)
	})
}

// UpdateComparison sets the "comparison" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertBulk) UpdateComparison() *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdateComparison()
	})
}

// SetSelectedValue sets the "selected_value" field.
func (u *DeliveryRuleConstraintUpsertBulk) SetSelectedValue(v *fieldjson.DeliveryRuleConstraintSelectedValue) *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.SetSelectedValue(v)
	})
}

// UpdateSelectedValue sets the "selected_value" field to the value that was provided on create.
func (u *DeliveryRuleConstraintUpsertBulk) UpdateSelectedValue() *DeliveryRuleConstraintUpsertBulk {
	return u.Update(func(s *DeliveryRuleConstraintUpsert) {
		s.UpdateSelectedValue()
	})
}

// Exec executes the query.
func (u *DeliveryRuleConstraintUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryRuleConstraintCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryRuleConstraintCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryRuleConstraintUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
