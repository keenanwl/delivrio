// Code generated by ent, DO NOT EDIT.

package carrierusps

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierusps type in the database.
	Label = "carrier_usps"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldIsTestAPI holds the string denoting the is_test_api field in the database.
	FieldIsTestAPI = "is_test_api"
	// FieldConsumerKey holds the string denoting the consumer_key field in the database.
	FieldConsumerKey = "consumer_key"
	// FieldConsumerSecret holds the string denoting the consumer_secret field in the database.
	FieldConsumerSecret = "consumer_secret"
	// FieldMid holds the string denoting the mid field in the database.
	FieldMid = "mid"
	// FieldManifestMid holds the string denoting the manifest_mid field in the database.
	FieldManifestMid = "manifest_mid"
	// FieldCrid holds the string denoting the crid field in the database.
	FieldCrid = "crid"
	// FieldEpsAccountNumber holds the string denoting the eps_account_number field in the database.
	FieldEpsAccountNumber = "eps_account_number"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrier holds the string denoting the carrier edge name in mutations.
	EdgeCarrier = "carrier"
	// Table holds the table name of the carrierusps in the database.
	Table = "carrier_usp_ss"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "carrier_usp_ss"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierTable is the table that holds the carrier relation/edge.
	CarrierTable = "carrier_usp_ss"
	// CarrierInverseTable is the table name for the Carrier entity.
	// It exists in this package in order to avoid circular dependency with the "carrier" package.
	CarrierInverseTable = "carriers"
	// CarrierColumn is the table column denoting the carrier relation/edge.
	CarrierColumn = "carrier_carrier_usps"
)

// Columns holds all SQL columns for carrierusps fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldIsTestAPI,
	FieldConsumerKey,
	FieldConsumerSecret,
	FieldMid,
	FieldManifestMid,
	FieldCrid,
	FieldEpsAccountNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_usp_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_carrier_usps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultIsTestAPI holds the default value on creation for the "is_test_api" field.
	DefaultIsTestAPI bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierUSPS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByIsTestAPI orders the results by the is_test_api field.
func ByIsTestAPI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsTestAPI, opts...).ToFunc()
}

// ByConsumerKey orders the results by the consumer_key field.
func ByConsumerKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsumerKey, opts...).ToFunc()
}

// ByConsumerSecret orders the results by the consumer_secret field.
func ByConsumerSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConsumerSecret, opts...).ToFunc()
}

// ByMid orders the results by the mid field.
func ByMid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMid, opts...).ToFunc()
}

// ByManifestMid orders the results by the manifest_mid field.
func ByManifestMid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManifestMid, opts...).ToFunc()
}

// ByCrid orders the results by the crid field.
func ByCrid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCrid, opts...).ToFunc()
}

// ByEpsAccountNumber orders the results by the eps_account_number field.
func ByEpsAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpsAccountNumber, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierField orders the results by carrier field.
func ByCarrierField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CarrierTable, CarrierColumn),
	)
}
