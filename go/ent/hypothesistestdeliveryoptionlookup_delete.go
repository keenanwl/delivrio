// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionLookupDelete is the builder for deleting a HypothesisTestDeliveryOptionLookup entity.
type HypothesisTestDeliveryOptionLookupDelete struct {
	config
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionLookupMutation
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionLookupDelete builder.
func (htdold *HypothesisTestDeliveryOptionLookupDelete) Where(ps ...predicate.HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupDelete {
	htdold.mutation.Where(ps...)
	return htdold
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (htdold *HypothesisTestDeliveryOptionLookupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, htdold.sqlExec, htdold.mutation, htdold.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (htdold *HypothesisTestDeliveryOptionLookupDelete) ExecX(ctx context.Context) int {
	n, err := htdold.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (htdold *HypothesisTestDeliveryOptionLookupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(hypothesistestdeliveryoptionlookup.Table, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString))
	if ps := htdold.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, htdold.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	htdold.mutation.done = true
	return affected, err
}

// HypothesisTestDeliveryOptionLookupDeleteOne is the builder for deleting a single HypothesisTestDeliveryOptionLookup entity.
type HypothesisTestDeliveryOptionLookupDeleteOne struct {
	htdold *HypothesisTestDeliveryOptionLookupDelete
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionLookupDelete builder.
func (htdoldo *HypothesisTestDeliveryOptionLookupDeleteOne) Where(ps ...predicate.HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupDeleteOne {
	htdoldo.htdold.mutation.Where(ps...)
	return htdoldo
}

// Exec executes the deletion query.
func (htdoldo *HypothesisTestDeliveryOptionLookupDeleteOne) Exec(ctx context.Context) error {
	n, err := htdoldo.htdold.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (htdoldo *HypothesisTestDeliveryOptionLookupDeleteOne) ExecX(ctx context.Context) {
	if err := htdoldo.Exec(ctx); err != nil {
		panic(err)
	}
}
