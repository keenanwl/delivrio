// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChangeHistoryCreate is the builder for creating a ChangeHistory entity.
type ChangeHistoryCreate struct {
	config
	mutation *ChangeHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (chc *ChangeHistoryCreate) SetTenantID(pu pulid.ID) *ChangeHistoryCreate {
	chc.mutation.SetTenantID(pu)
	return chc
}

// SetCreatedAt sets the "created_at" field.
func (chc *ChangeHistoryCreate) SetCreatedAt(t time.Time) *ChangeHistoryCreate {
	chc.mutation.SetCreatedAt(t)
	return chc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (chc *ChangeHistoryCreate) SetNillableCreatedAt(t *time.Time) *ChangeHistoryCreate {
	if t != nil {
		chc.SetCreatedAt(*t)
	}
	return chc
}

// SetOrigin sets the "origin" field.
func (chc *ChangeHistoryCreate) SetOrigin(c changehistory.Origin) *ChangeHistoryCreate {
	chc.mutation.SetOrigin(c)
	return chc
}

// SetNillableOrigin sets the "origin" field if the given value is not nil.
func (chc *ChangeHistoryCreate) SetNillableOrigin(c *changehistory.Origin) *ChangeHistoryCreate {
	if c != nil {
		chc.SetOrigin(*c)
	}
	return chc
}

// SetID sets the "id" field.
func (chc *ChangeHistoryCreate) SetID(pu pulid.ID) *ChangeHistoryCreate {
	chc.mutation.SetID(pu)
	return chc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (chc *ChangeHistoryCreate) SetNillableID(pu *pulid.ID) *ChangeHistoryCreate {
	if pu != nil {
		chc.SetID(*pu)
	}
	return chc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (chc *ChangeHistoryCreate) SetTenant(t *Tenant) *ChangeHistoryCreate {
	return chc.SetTenantID(t.ID)
}

// AddPlanHistoryIDs adds the "plan_history" edge to the PlanHistory entity by IDs.
func (chc *ChangeHistoryCreate) AddPlanHistoryIDs(ids ...pulid.ID) *ChangeHistoryCreate {
	chc.mutation.AddPlanHistoryIDs(ids...)
	return chc
}

// AddPlanHistory adds the "plan_history" edges to the PlanHistory entity.
func (chc *ChangeHistoryCreate) AddPlanHistory(p ...*PlanHistory) *ChangeHistoryCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return chc.AddPlanHistoryIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (chc *ChangeHistoryCreate) SetUserID(id pulid.ID) *ChangeHistoryCreate {
	chc.mutation.SetUserID(id)
	return chc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (chc *ChangeHistoryCreate) SetNillableUserID(id *pulid.ID) *ChangeHistoryCreate {
	if id != nil {
		chc = chc.SetUserID(*id)
	}
	return chc
}

// SetUser sets the "user" edge to the User entity.
func (chc *ChangeHistoryCreate) SetUser(u *User) *ChangeHistoryCreate {
	return chc.SetUserID(u.ID)
}

// AddOrderHistoryIDs adds the "order_history" edge to the OrderHistory entity by IDs.
func (chc *ChangeHistoryCreate) AddOrderHistoryIDs(ids ...pulid.ID) *ChangeHistoryCreate {
	chc.mutation.AddOrderHistoryIDs(ids...)
	return chc
}

// AddOrderHistory adds the "order_history" edges to the OrderHistory entity.
func (chc *ChangeHistoryCreate) AddOrderHistory(o ...*OrderHistory) *ChangeHistoryCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return chc.AddOrderHistoryIDs(ids...)
}

// AddShipmentHistoryIDs adds the "shipment_history" edge to the ShipmentHistory entity by IDs.
func (chc *ChangeHistoryCreate) AddShipmentHistoryIDs(ids ...pulid.ID) *ChangeHistoryCreate {
	chc.mutation.AddShipmentHistoryIDs(ids...)
	return chc
}

// AddShipmentHistory adds the "shipment_history" edges to the ShipmentHistory entity.
func (chc *ChangeHistoryCreate) AddShipmentHistory(s ...*ShipmentHistory) *ChangeHistoryCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return chc.AddShipmentHistoryIDs(ids...)
}

// AddReturnColliHistoryIDs adds the "return_colli_history" edge to the ReturnColliHistory entity by IDs.
func (chc *ChangeHistoryCreate) AddReturnColliHistoryIDs(ids ...pulid.ID) *ChangeHistoryCreate {
	chc.mutation.AddReturnColliHistoryIDs(ids...)
	return chc
}

// AddReturnColliHistory adds the "return_colli_history" edges to the ReturnColliHistory entity.
func (chc *ChangeHistoryCreate) AddReturnColliHistory(r ...*ReturnColliHistory) *ChangeHistoryCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return chc.AddReturnColliHistoryIDs(ids...)
}

// Mutation returns the ChangeHistoryMutation object of the builder.
func (chc *ChangeHistoryCreate) Mutation() *ChangeHistoryMutation {
	return chc.mutation
}

// Save creates the ChangeHistory in the database.
func (chc *ChangeHistoryCreate) Save(ctx context.Context) (*ChangeHistory, error) {
	if err := chc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, chc.sqlSave, chc.mutation, chc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (chc *ChangeHistoryCreate) SaveX(ctx context.Context) *ChangeHistory {
	v, err := chc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chc *ChangeHistoryCreate) Exec(ctx context.Context) error {
	_, err := chc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chc *ChangeHistoryCreate) ExecX(ctx context.Context) {
	if err := chc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chc *ChangeHistoryCreate) defaults() error {
	if _, ok := chc.mutation.CreatedAt(); !ok {
		if changehistory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized changehistory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := changehistory.DefaultCreatedAt()
		chc.mutation.SetCreatedAt(v)
	}
	if _, ok := chc.mutation.Origin(); !ok {
		v := changehistory.DefaultOrigin
		chc.mutation.SetOrigin(v)
	}
	if _, ok := chc.mutation.ID(); !ok {
		if changehistory.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized changehistory.DefaultID (forgotten import ent/runtime?)")
		}
		v := changehistory.DefaultID()
		chc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (chc *ChangeHistoryCreate) check() error {
	if _, ok := chc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ChangeHistory.tenant_id"`)}
	}
	if _, ok := chc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ChangeHistory.created_at"`)}
	}
	if _, ok := chc.mutation.Origin(); !ok {
		return &ValidationError{Name: "origin", err: errors.New(`ent: missing required field "ChangeHistory.origin"`)}
	}
	if v, ok := chc.mutation.Origin(); ok {
		if err := changehistory.OriginValidator(v); err != nil {
			return &ValidationError{Name: "origin", err: fmt.Errorf(`ent: validator failed for field "ChangeHistory.origin": %w`, err)}
		}
	}
	if len(chc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ChangeHistory.tenant"`)}
	}
	return nil
}

func (chc *ChangeHistoryCreate) sqlSave(ctx context.Context) (*ChangeHistory, error) {
	if err := chc.check(); err != nil {
		return nil, err
	}
	_node, _spec := chc.createSpec()
	if err := sqlgraph.CreateNode(ctx, chc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	chc.mutation.id = &_node.ID
	chc.mutation.done = true
	return _node, nil
}

func (chc *ChangeHistoryCreate) createSpec() (*ChangeHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ChangeHistory{config: chc.config}
		_spec = sqlgraph.NewCreateSpec(changehistory.Table, sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = chc.conflict
	if id, ok := chc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := chc.mutation.CreatedAt(); ok {
		_spec.SetField(changehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := chc.mutation.Origin(); ok {
		_spec.SetField(changehistory.FieldOrigin, field.TypeEnum, value)
		_node.Origin = value
	}
	if nodes := chc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.TenantTable,
			Columns: []string{changehistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chc.mutation.PlanHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.UserTable,
			Columns: []string{changehistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.change_history_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chc.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chc.mutation.ShipmentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmenthistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := chc.mutation.ReturnColliHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChangeHistory.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChangeHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (chc *ChangeHistoryCreate) OnConflict(opts ...sql.ConflictOption) *ChangeHistoryUpsertOne {
	chc.conflict = opts
	return &ChangeHistoryUpsertOne{
		create: chc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChangeHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (chc *ChangeHistoryCreate) OnConflictColumns(columns ...string) *ChangeHistoryUpsertOne {
	chc.conflict = append(chc.conflict, sql.ConflictColumns(columns...))
	return &ChangeHistoryUpsertOne{
		create: chc,
	}
}

type (
	// ChangeHistoryUpsertOne is the builder for "upsert"-ing
	//  one ChangeHistory node.
	ChangeHistoryUpsertOne struct {
		create *ChangeHistoryCreate
	}

	// ChangeHistoryUpsert is the "OnConflict" setter.
	ChangeHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ChangeHistoryUpsert) SetTenantID(v pulid.ID) *ChangeHistoryUpsert {
	u.Set(changehistory.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ChangeHistoryUpsert) UpdateTenantID() *ChangeHistoryUpsert {
	u.SetExcluded(changehistory.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChangeHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(changehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChangeHistoryUpsertOne) UpdateNewValues() *ChangeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(changehistory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(changehistory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Origin(); exists {
			s.SetIgnore(changehistory.FieldOrigin)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChangeHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChangeHistoryUpsertOne) Ignore() *ChangeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChangeHistoryUpsertOne) DoNothing() *ChangeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChangeHistoryCreate.OnConflict
// documentation for more info.
func (u *ChangeHistoryUpsertOne) Update(set func(*ChangeHistoryUpsert)) *ChangeHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChangeHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ChangeHistoryUpsertOne) SetTenantID(v pulid.ID) *ChangeHistoryUpsertOne {
	return u.Update(func(s *ChangeHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ChangeHistoryUpsertOne) UpdateTenantID() *ChangeHistoryUpsertOne {
	return u.Update(func(s *ChangeHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *ChangeHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChangeHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChangeHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChangeHistoryUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ChangeHistoryUpsertOne.ID is not supported by MySQL driver. Use ChangeHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChangeHistoryUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChangeHistoryCreateBulk is the builder for creating many ChangeHistory entities in bulk.
type ChangeHistoryCreateBulk struct {
	config
	err      error
	builders []*ChangeHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the ChangeHistory entities in the database.
func (chcb *ChangeHistoryCreateBulk) Save(ctx context.Context) ([]*ChangeHistory, error) {
	if chcb.err != nil {
		return nil, chcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(chcb.builders))
	nodes := make([]*ChangeHistory, len(chcb.builders))
	mutators := make([]Mutator, len(chcb.builders))
	for i := range chcb.builders {
		func(i int, root context.Context) {
			builder := chcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChangeHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, chcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = chcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, chcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, chcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (chcb *ChangeHistoryCreateBulk) SaveX(ctx context.Context) []*ChangeHistory {
	v, err := chcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (chcb *ChangeHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := chcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chcb *ChangeHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := chcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChangeHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChangeHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (chcb *ChangeHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChangeHistoryUpsertBulk {
	chcb.conflict = opts
	return &ChangeHistoryUpsertBulk{
		create: chcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChangeHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (chcb *ChangeHistoryCreateBulk) OnConflictColumns(columns ...string) *ChangeHistoryUpsertBulk {
	chcb.conflict = append(chcb.conflict, sql.ConflictColumns(columns...))
	return &ChangeHistoryUpsertBulk{
		create: chcb,
	}
}

// ChangeHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of ChangeHistory nodes.
type ChangeHistoryUpsertBulk struct {
	create *ChangeHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChangeHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(changehistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChangeHistoryUpsertBulk) UpdateNewValues() *ChangeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(changehistory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(changehistory.FieldCreatedAt)
			}
			if _, exists := b.mutation.Origin(); exists {
				s.SetIgnore(changehistory.FieldOrigin)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChangeHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChangeHistoryUpsertBulk) Ignore() *ChangeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChangeHistoryUpsertBulk) DoNothing() *ChangeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChangeHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *ChangeHistoryUpsertBulk) Update(set func(*ChangeHistoryUpsert)) *ChangeHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChangeHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ChangeHistoryUpsertBulk) SetTenantID(v pulid.ID) *ChangeHistoryUpsertBulk {
	return u.Update(func(s *ChangeHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ChangeHistoryUpsertBulk) UpdateTenantID() *ChangeHistoryUpsertBulk {
	return u.Update(func(s *ChangeHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *ChangeHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChangeHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChangeHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChangeHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
