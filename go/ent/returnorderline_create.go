// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnOrderLineCreate is the builder for creating a ReturnOrderLine entity.
type ReturnOrderLineCreate struct {
	config
	mutation *ReturnOrderLineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rolc *ReturnOrderLineCreate) SetTenantID(pu pulid.ID) *ReturnOrderLineCreate {
	rolc.mutation.SetTenantID(pu)
	return rolc
}

// SetUnits sets the "units" field.
func (rolc *ReturnOrderLineCreate) SetUnits(i int) *ReturnOrderLineCreate {
	rolc.mutation.SetUnits(i)
	return rolc
}

// SetID sets the "id" field.
func (rolc *ReturnOrderLineCreate) SetID(pu pulid.ID) *ReturnOrderLineCreate {
	rolc.mutation.SetID(pu)
	return rolc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rolc *ReturnOrderLineCreate) SetNillableID(pu *pulid.ID) *ReturnOrderLineCreate {
	if pu != nil {
		rolc.SetID(*pu)
	}
	return rolc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rolc *ReturnOrderLineCreate) SetTenant(t *Tenant) *ReturnOrderLineCreate {
	return rolc.SetTenantID(t.ID)
}

// SetReturnColliID sets the "return_colli" edge to the ReturnColli entity by ID.
func (rolc *ReturnOrderLineCreate) SetReturnColliID(id pulid.ID) *ReturnOrderLineCreate {
	rolc.mutation.SetReturnColliID(id)
	return rolc
}

// SetReturnColli sets the "return_colli" edge to the ReturnColli entity.
func (rolc *ReturnOrderLineCreate) SetReturnColli(r *ReturnColli) *ReturnOrderLineCreate {
	return rolc.SetReturnColliID(r.ID)
}

// SetOrderLineID sets the "order_line" edge to the OrderLine entity by ID.
func (rolc *ReturnOrderLineCreate) SetOrderLineID(id pulid.ID) *ReturnOrderLineCreate {
	rolc.mutation.SetOrderLineID(id)
	return rolc
}

// SetOrderLine sets the "order_line" edge to the OrderLine entity.
func (rolc *ReturnOrderLineCreate) SetOrderLine(o *OrderLine) *ReturnOrderLineCreate {
	return rolc.SetOrderLineID(o.ID)
}

// SetReturnPortalClaimID sets the "return_portal_claim" edge to the ReturnPortalClaim entity by ID.
func (rolc *ReturnOrderLineCreate) SetReturnPortalClaimID(id pulid.ID) *ReturnOrderLineCreate {
	rolc.mutation.SetReturnPortalClaimID(id)
	return rolc
}

// SetReturnPortalClaim sets the "return_portal_claim" edge to the ReturnPortalClaim entity.
func (rolc *ReturnOrderLineCreate) SetReturnPortalClaim(r *ReturnPortalClaim) *ReturnOrderLineCreate {
	return rolc.SetReturnPortalClaimID(r.ID)
}

// Mutation returns the ReturnOrderLineMutation object of the builder.
func (rolc *ReturnOrderLineCreate) Mutation() *ReturnOrderLineMutation {
	return rolc.mutation
}

// Save creates the ReturnOrderLine in the database.
func (rolc *ReturnOrderLineCreate) Save(ctx context.Context) (*ReturnOrderLine, error) {
	if err := rolc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rolc.sqlSave, rolc.mutation, rolc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rolc *ReturnOrderLineCreate) SaveX(ctx context.Context) *ReturnOrderLine {
	v, err := rolc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rolc *ReturnOrderLineCreate) Exec(ctx context.Context) error {
	_, err := rolc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rolc *ReturnOrderLineCreate) ExecX(ctx context.Context) {
	if err := rolc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rolc *ReturnOrderLineCreate) defaults() error {
	if _, ok := rolc.mutation.ID(); !ok {
		if returnorderline.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized returnorderline.DefaultID (forgotten import ent/runtime?)")
		}
		v := returnorderline.DefaultID()
		rolc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rolc *ReturnOrderLineCreate) check() error {
	if _, ok := rolc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ReturnOrderLine.tenant_id"`)}
	}
	if _, ok := rolc.mutation.Units(); !ok {
		return &ValidationError{Name: "units", err: errors.New(`ent: missing required field "ReturnOrderLine.units"`)}
	}
	if v, ok := rolc.mutation.Units(); ok {
		if err := returnorderline.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ReturnOrderLine.units": %w`, err)}
		}
	}
	if len(rolc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ReturnOrderLine.tenant"`)}
	}
	if len(rolc.mutation.ReturnColliIDs()) == 0 {
		return &ValidationError{Name: "return_colli", err: errors.New(`ent: missing required edge "ReturnOrderLine.return_colli"`)}
	}
	if len(rolc.mutation.OrderLineIDs()) == 0 {
		return &ValidationError{Name: "order_line", err: errors.New(`ent: missing required edge "ReturnOrderLine.order_line"`)}
	}
	if len(rolc.mutation.ReturnPortalClaimIDs()) == 0 {
		return &ValidationError{Name: "return_portal_claim", err: errors.New(`ent: missing required edge "ReturnOrderLine.return_portal_claim"`)}
	}
	return nil
}

func (rolc *ReturnOrderLineCreate) sqlSave(ctx context.Context) (*ReturnOrderLine, error) {
	if err := rolc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rolc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rolc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rolc.mutation.id = &_node.ID
	rolc.mutation.done = true
	return _node, nil
}

func (rolc *ReturnOrderLineCreate) createSpec() (*ReturnOrderLine, *sqlgraph.CreateSpec) {
	var (
		_node = &ReturnOrderLine{config: rolc.config}
		_spec = sqlgraph.NewCreateSpec(returnorderline.Table, sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString))
	)
	_spec.OnConflict = rolc.conflict
	if id, ok := rolc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rolc.mutation.Units(); ok {
		_spec.SetField(returnorderline.FieldUnits, field.TypeInt, value)
		_node.Units = value
	}
	if nodes := rolc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.TenantTable,
			Columns: []string{returnorderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rolc.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnorderline.ReturnColliTable,
			Columns: []string{returnorderline.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_return_order_line = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rolc.mutation.OrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.OrderLineTable,
			Columns: []string{returnorderline.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_order_line_order_line = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rolc.mutation.ReturnPortalClaimIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.ReturnPortalClaimTable,
			Columns: []string{returnorderline.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_order_line_return_portal_claim = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnOrderLine.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnOrderLineUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rolc *ReturnOrderLineCreate) OnConflict(opts ...sql.ConflictOption) *ReturnOrderLineUpsertOne {
	rolc.conflict = opts
	return &ReturnOrderLineUpsertOne{
		create: rolc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnOrderLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rolc *ReturnOrderLineCreate) OnConflictColumns(columns ...string) *ReturnOrderLineUpsertOne {
	rolc.conflict = append(rolc.conflict, sql.ConflictColumns(columns...))
	return &ReturnOrderLineUpsertOne{
		create: rolc,
	}
}

type (
	// ReturnOrderLineUpsertOne is the builder for "upsert"-ing
	//  one ReturnOrderLine node.
	ReturnOrderLineUpsertOne struct {
		create *ReturnOrderLineCreate
	}

	// ReturnOrderLineUpsert is the "OnConflict" setter.
	ReturnOrderLineUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ReturnOrderLineUpsert) SetTenantID(v pulid.ID) *ReturnOrderLineUpsert {
	u.Set(returnorderline.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnOrderLineUpsert) UpdateTenantID() *ReturnOrderLineUpsert {
	u.SetExcluded(returnorderline.FieldTenantID)
	return u
}

// SetUnits sets the "units" field.
func (u *ReturnOrderLineUpsert) SetUnits(v int) *ReturnOrderLineUpsert {
	u.Set(returnorderline.FieldUnits, v)
	return u
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *ReturnOrderLineUpsert) UpdateUnits() *ReturnOrderLineUpsert {
	u.SetExcluded(returnorderline.FieldUnits)
	return u
}

// AddUnits adds v to the "units" field.
func (u *ReturnOrderLineUpsert) AddUnits(v int) *ReturnOrderLineUpsert {
	u.Add(returnorderline.FieldUnits, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReturnOrderLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returnorderline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnOrderLineUpsertOne) UpdateNewValues() *ReturnOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(returnorderline.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnOrderLine.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReturnOrderLineUpsertOne) Ignore() *ReturnOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnOrderLineUpsertOne) DoNothing() *ReturnOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnOrderLineCreate.OnConflict
// documentation for more info.
func (u *ReturnOrderLineUpsertOne) Update(set func(*ReturnOrderLineUpsert)) *ReturnOrderLineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnOrderLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnOrderLineUpsertOne) SetTenantID(v pulid.ID) *ReturnOrderLineUpsertOne {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnOrderLineUpsertOne) UpdateTenantID() *ReturnOrderLineUpsertOne {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.UpdateTenantID()
	})
}

// SetUnits sets the "units" field.
func (u *ReturnOrderLineUpsertOne) SetUnits(v int) *ReturnOrderLineUpsertOne {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *ReturnOrderLineUpsertOne) AddUnits(v int) *ReturnOrderLineUpsertOne {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *ReturnOrderLineUpsertOne) UpdateUnits() *ReturnOrderLineUpsertOne {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.UpdateUnits()
	})
}

// Exec executes the query.
func (u *ReturnOrderLineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnOrderLineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnOrderLineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReturnOrderLineUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReturnOrderLineUpsertOne.ID is not supported by MySQL driver. Use ReturnOrderLineUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReturnOrderLineUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReturnOrderLineCreateBulk is the builder for creating many ReturnOrderLine entities in bulk.
type ReturnOrderLineCreateBulk struct {
	config
	err      error
	builders []*ReturnOrderLineCreate
	conflict []sql.ConflictOption
}

// Save creates the ReturnOrderLine entities in the database.
func (rolcb *ReturnOrderLineCreateBulk) Save(ctx context.Context) ([]*ReturnOrderLine, error) {
	if rolcb.err != nil {
		return nil, rolcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rolcb.builders))
	nodes := make([]*ReturnOrderLine, len(rolcb.builders))
	mutators := make([]Mutator, len(rolcb.builders))
	for i := range rolcb.builders {
		func(i int, root context.Context) {
			builder := rolcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReturnOrderLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rolcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rolcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rolcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rolcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rolcb *ReturnOrderLineCreateBulk) SaveX(ctx context.Context) []*ReturnOrderLine {
	v, err := rolcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rolcb *ReturnOrderLineCreateBulk) Exec(ctx context.Context) error {
	_, err := rolcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rolcb *ReturnOrderLineCreateBulk) ExecX(ctx context.Context) {
	if err := rolcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnOrderLine.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnOrderLineUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rolcb *ReturnOrderLineCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReturnOrderLineUpsertBulk {
	rolcb.conflict = opts
	return &ReturnOrderLineUpsertBulk{
		create: rolcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnOrderLine.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rolcb *ReturnOrderLineCreateBulk) OnConflictColumns(columns ...string) *ReturnOrderLineUpsertBulk {
	rolcb.conflict = append(rolcb.conflict, sql.ConflictColumns(columns...))
	return &ReturnOrderLineUpsertBulk{
		create: rolcb,
	}
}

// ReturnOrderLineUpsertBulk is the builder for "upsert"-ing
// a bulk of ReturnOrderLine nodes.
type ReturnOrderLineUpsertBulk struct {
	create *ReturnOrderLineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReturnOrderLine.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returnorderline.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnOrderLineUpsertBulk) UpdateNewValues() *ReturnOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(returnorderline.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnOrderLine.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReturnOrderLineUpsertBulk) Ignore() *ReturnOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnOrderLineUpsertBulk) DoNothing() *ReturnOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnOrderLineCreateBulk.OnConflict
// documentation for more info.
func (u *ReturnOrderLineUpsertBulk) Update(set func(*ReturnOrderLineUpsert)) *ReturnOrderLineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnOrderLineUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnOrderLineUpsertBulk) SetTenantID(v pulid.ID) *ReturnOrderLineUpsertBulk {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnOrderLineUpsertBulk) UpdateTenantID() *ReturnOrderLineUpsertBulk {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.UpdateTenantID()
	})
}

// SetUnits sets the "units" field.
func (u *ReturnOrderLineUpsertBulk) SetUnits(v int) *ReturnOrderLineUpsertBulk {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.SetUnits(v)
	})
}

// AddUnits adds v to the "units" field.
func (u *ReturnOrderLineUpsertBulk) AddUnits(v int) *ReturnOrderLineUpsertBulk {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.AddUnits(v)
	})
}

// UpdateUnits sets the "units" field to the value that was provided on create.
func (u *ReturnOrderLineUpsertBulk) UpdateUnits() *ReturnOrderLineUpsertBulk {
	return u.Update(func(s *ReturnOrderLineUpsert) {
		s.UpdateUnits()
	})
}

// Exec executes the query.
func (u *ReturnOrderLineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReturnOrderLineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnOrderLineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnOrderLineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
