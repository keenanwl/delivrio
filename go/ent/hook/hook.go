// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"delivrio.io/go/ent"
)

// The APITokenFunc type is an adapter to allow the use of ordinary
// function as APIToken mutator.
type APITokenFunc func(context.Context, *ent.APITokenMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f APITokenFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.APITokenMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.APITokenMutation", m)
}

// The AccessRightFunc type is an adapter to allow the use of ordinary
// function as AccessRight mutator.
type AccessRightFunc func(context.Context, *ent.AccessRightMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AccessRightFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AccessRightMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AccessRightMutation", m)
}

// The AddressFunc type is an adapter to allow the use of ordinary
// function as Address mutator.
type AddressFunc func(context.Context, *ent.AddressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AddressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AddressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AddressMutation", m)
}

// The AddressGlobalFunc type is an adapter to allow the use of ordinary
// function as AddressGlobal mutator.
type AddressGlobalFunc func(context.Context, *ent.AddressGlobalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AddressGlobalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AddressGlobalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AddressGlobalMutation", m)
}

// The BusinessHoursPeriodFunc type is an adapter to allow the use of ordinary
// function as BusinessHoursPeriod mutator.
type BusinessHoursPeriodFunc func(context.Context, *ent.BusinessHoursPeriodMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BusinessHoursPeriodFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BusinessHoursPeriodMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BusinessHoursPeriodMutation", m)
}

// The CarrierFunc type is an adapter to allow the use of ordinary
// function as Carrier mutator.
type CarrierFunc func(context.Context, *ent.CarrierMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierMutation", m)
}

// The CarrierAdditionalServiceBringFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceBring mutator.
type CarrierAdditionalServiceBringFunc func(context.Context, *ent.CarrierAdditionalServiceBringMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceBringFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceBringMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceBringMutation", m)
}

// The CarrierAdditionalServiceDAOFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceDAO mutator.
type CarrierAdditionalServiceDAOFunc func(context.Context, *ent.CarrierAdditionalServiceDAOMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceDAOFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceDAOMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceDAOMutation", m)
}

// The CarrierAdditionalServiceDFFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceDF mutator.
type CarrierAdditionalServiceDFFunc func(context.Context, *ent.CarrierAdditionalServiceDFMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceDFFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceDFMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceDFMutation", m)
}

// The CarrierAdditionalServiceDSVFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceDSV mutator.
type CarrierAdditionalServiceDSVFunc func(context.Context, *ent.CarrierAdditionalServiceDSVMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceDSVFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceDSVMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceDSVMutation", m)
}

// The CarrierAdditionalServiceEasyPostFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceEasyPost mutator.
type CarrierAdditionalServiceEasyPostFunc func(context.Context, *ent.CarrierAdditionalServiceEasyPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceEasyPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceEasyPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceEasyPostMutation", m)
}

// The CarrierAdditionalServiceGLSFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceGLS mutator.
type CarrierAdditionalServiceGLSFunc func(context.Context, *ent.CarrierAdditionalServiceGLSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceGLSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceGLSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceGLSMutation", m)
}

// The CarrierAdditionalServicePostNordFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServicePostNord mutator.
type CarrierAdditionalServicePostNordFunc func(context.Context, *ent.CarrierAdditionalServicePostNordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServicePostNordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServicePostNordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServicePostNordMutation", m)
}

// The CarrierAdditionalServiceUSPSFunc type is an adapter to allow the use of ordinary
// function as CarrierAdditionalServiceUSPS mutator.
type CarrierAdditionalServiceUSPSFunc func(context.Context, *ent.CarrierAdditionalServiceUSPSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierAdditionalServiceUSPSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierAdditionalServiceUSPSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierAdditionalServiceUSPSMutation", m)
}

// The CarrierBrandFunc type is an adapter to allow the use of ordinary
// function as CarrierBrand mutator.
type CarrierBrandFunc func(context.Context, *ent.CarrierBrandMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierBrandFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierBrandMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierBrandMutation", m)
}

// The CarrierBringFunc type is an adapter to allow the use of ordinary
// function as CarrierBring mutator.
type CarrierBringFunc func(context.Context, *ent.CarrierBringMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierBringFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierBringMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierBringMutation", m)
}

// The CarrierDAOFunc type is an adapter to allow the use of ordinary
// function as CarrierDAO mutator.
type CarrierDAOFunc func(context.Context, *ent.CarrierDAOMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierDAOFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierDAOMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierDAOMutation", m)
}

// The CarrierDFFunc type is an adapter to allow the use of ordinary
// function as CarrierDF mutator.
type CarrierDFFunc func(context.Context, *ent.CarrierDFMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierDFFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierDFMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierDFMutation", m)
}

// The CarrierDSVFunc type is an adapter to allow the use of ordinary
// function as CarrierDSV mutator.
type CarrierDSVFunc func(context.Context, *ent.CarrierDSVMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierDSVFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierDSVMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierDSVMutation", m)
}

// The CarrierEasyPostFunc type is an adapter to allow the use of ordinary
// function as CarrierEasyPost mutator.
type CarrierEasyPostFunc func(context.Context, *ent.CarrierEasyPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierEasyPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierEasyPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierEasyPostMutation", m)
}

// The CarrierGLSFunc type is an adapter to allow the use of ordinary
// function as CarrierGLS mutator.
type CarrierGLSFunc func(context.Context, *ent.CarrierGLSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierGLSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierGLSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierGLSMutation", m)
}

// The CarrierPostNordFunc type is an adapter to allow the use of ordinary
// function as CarrierPostNord mutator.
type CarrierPostNordFunc func(context.Context, *ent.CarrierPostNordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierPostNordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierPostNordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierPostNordMutation", m)
}

// The CarrierServiceFunc type is an adapter to allow the use of ordinary
// function as CarrierService mutator.
type CarrierServiceFunc func(context.Context, *ent.CarrierServiceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceMutation", m)
}

// The CarrierServiceBringFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceBring mutator.
type CarrierServiceBringFunc func(context.Context, *ent.CarrierServiceBringMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceBringFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceBringMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceBringMutation", m)
}

// The CarrierServiceDAOFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceDAO mutator.
type CarrierServiceDAOFunc func(context.Context, *ent.CarrierServiceDAOMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceDAOFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceDAOMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceDAOMutation", m)
}

// The CarrierServiceDFFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceDF mutator.
type CarrierServiceDFFunc func(context.Context, *ent.CarrierServiceDFMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceDFFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceDFMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceDFMutation", m)
}

// The CarrierServiceDSVFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceDSV mutator.
type CarrierServiceDSVFunc func(context.Context, *ent.CarrierServiceDSVMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceDSVFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceDSVMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceDSVMutation", m)
}

// The CarrierServiceEasyPostFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceEasyPost mutator.
type CarrierServiceEasyPostFunc func(context.Context, *ent.CarrierServiceEasyPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceEasyPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceEasyPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceEasyPostMutation", m)
}

// The CarrierServiceGLSFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceGLS mutator.
type CarrierServiceGLSFunc func(context.Context, *ent.CarrierServiceGLSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceGLSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceGLSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceGLSMutation", m)
}

// The CarrierServicePostNordFunc type is an adapter to allow the use of ordinary
// function as CarrierServicePostNord mutator.
type CarrierServicePostNordFunc func(context.Context, *ent.CarrierServicePostNordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServicePostNordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServicePostNordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServicePostNordMutation", m)
}

// The CarrierServiceUSPSFunc type is an adapter to allow the use of ordinary
// function as CarrierServiceUSPS mutator.
type CarrierServiceUSPSFunc func(context.Context, *ent.CarrierServiceUSPSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierServiceUSPSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierServiceUSPSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierServiceUSPSMutation", m)
}

// The CarrierUSPSFunc type is an adapter to allow the use of ordinary
// function as CarrierUSPS mutator.
type CarrierUSPSFunc func(context.Context, *ent.CarrierUSPSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarrierUSPSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CarrierUSPSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarrierUSPSMutation", m)
}

// The ChangeHistoryFunc type is an adapter to allow the use of ordinary
// function as ChangeHistory mutator.
type ChangeHistoryFunc func(context.Context, *ent.ChangeHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ChangeHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ChangeHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ChangeHistoryMutation", m)
}

// The ColliFunc type is an adapter to allow the use of ordinary
// function as Colli mutator.
type ColliFunc func(context.Context, *ent.ColliMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ColliFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ColliMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ColliMutation", m)
}

// The ConnectOptionCarrierFunc type is an adapter to allow the use of ordinary
// function as ConnectOptionCarrier mutator.
type ConnectOptionCarrierFunc func(context.Context, *ent.ConnectOptionCarrierMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectOptionCarrierFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConnectOptionCarrierMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectOptionCarrierMutation", m)
}

// The ConnectOptionPlatformFunc type is an adapter to allow the use of ordinary
// function as ConnectOptionPlatform mutator.
type ConnectOptionPlatformFunc func(context.Context, *ent.ConnectOptionPlatformMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectOptionPlatformFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConnectOptionPlatformMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectOptionPlatformMutation", m)
}

// The ConnectionFunc type is an adapter to allow the use of ordinary
// function as Connection mutator.
type ConnectionFunc func(context.Context, *ent.ConnectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConnectionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectionMutation", m)
}

// The ConnectionBrandFunc type is an adapter to allow the use of ordinary
// function as ConnectionBrand mutator.
type ConnectionBrandFunc func(context.Context, *ent.ConnectionBrandMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectionBrandFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConnectionBrandMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectionBrandMutation", m)
}

// The ConnectionLookupFunc type is an adapter to allow the use of ordinary
// function as ConnectionLookup mutator.
type ConnectionLookupFunc func(context.Context, *ent.ConnectionLookupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectionLookupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConnectionLookupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectionLookupMutation", m)
}

// The ConnectionShopifyFunc type is an adapter to allow the use of ordinary
// function as ConnectionShopify mutator.
type ConnectionShopifyFunc func(context.Context, *ent.ConnectionShopifyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConnectionShopifyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConnectionShopifyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConnectionShopifyMutation", m)
}

// The ConsolidationFunc type is an adapter to allow the use of ordinary
// function as Consolidation mutator.
type ConsolidationFunc func(context.Context, *ent.ConsolidationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ConsolidationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ConsolidationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ConsolidationMutation", m)
}

// The ContactFunc type is an adapter to allow the use of ordinary
// function as Contact mutator.
type ContactFunc func(context.Context, *ent.ContactMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContactFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ContactMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContactMutation", m)
}

// The CountryFunc type is an adapter to allow the use of ordinary
// function as Country mutator.
type CountryFunc func(context.Context, *ent.CountryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CountryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CountryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CountryMutation", m)
}

// The CountryHarmonizedCodeFunc type is an adapter to allow the use of ordinary
// function as CountryHarmonizedCode mutator.
type CountryHarmonizedCodeFunc func(context.Context, *ent.CountryHarmonizedCodeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CountryHarmonizedCodeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CountryHarmonizedCodeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CountryHarmonizedCodeMutation", m)
}

// The CurrencyFunc type is an adapter to allow the use of ordinary
// function as Currency mutator.
type CurrencyFunc func(context.Context, *ent.CurrencyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CurrencyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CurrencyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CurrencyMutation", m)
}

// The DeliveryOptionFunc type is an adapter to allow the use of ordinary
// function as DeliveryOption mutator.
type DeliveryOptionFunc func(context.Context, *ent.DeliveryOptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionMutation", m)
}

// The DeliveryOptionBringFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionBring mutator.
type DeliveryOptionBringFunc func(context.Context, *ent.DeliveryOptionBringMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionBringFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionBringMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionBringMutation", m)
}

// The DeliveryOptionDAOFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionDAO mutator.
type DeliveryOptionDAOFunc func(context.Context, *ent.DeliveryOptionDAOMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionDAOFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionDAOMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionDAOMutation", m)
}

// The DeliveryOptionDFFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionDF mutator.
type DeliveryOptionDFFunc func(context.Context, *ent.DeliveryOptionDFMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionDFFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionDFMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionDFMutation", m)
}

// The DeliveryOptionDSVFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionDSV mutator.
type DeliveryOptionDSVFunc func(context.Context, *ent.DeliveryOptionDSVMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionDSVFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionDSVMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionDSVMutation", m)
}

// The DeliveryOptionEasyPostFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionEasyPost mutator.
type DeliveryOptionEasyPostFunc func(context.Context, *ent.DeliveryOptionEasyPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionEasyPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionEasyPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionEasyPostMutation", m)
}

// The DeliveryOptionGLSFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionGLS mutator.
type DeliveryOptionGLSFunc func(context.Context, *ent.DeliveryOptionGLSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionGLSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionGLSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionGLSMutation", m)
}

// The DeliveryOptionPostNordFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionPostNord mutator.
type DeliveryOptionPostNordFunc func(context.Context, *ent.DeliveryOptionPostNordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionPostNordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionPostNordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionPostNordMutation", m)
}

// The DeliveryOptionUSPSFunc type is an adapter to allow the use of ordinary
// function as DeliveryOptionUSPS mutator.
type DeliveryOptionUSPSFunc func(context.Context, *ent.DeliveryOptionUSPSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryOptionUSPSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryOptionUSPSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryOptionUSPSMutation", m)
}

// The DeliveryRuleFunc type is an adapter to allow the use of ordinary
// function as DeliveryRule mutator.
type DeliveryRuleFunc func(context.Context, *ent.DeliveryRuleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryRuleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryRuleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryRuleMutation", m)
}

// The DeliveryRuleConstraintFunc type is an adapter to allow the use of ordinary
// function as DeliveryRuleConstraint mutator.
type DeliveryRuleConstraintFunc func(context.Context, *ent.DeliveryRuleConstraintMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryRuleConstraintFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryRuleConstraintMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryRuleConstraintMutation", m)
}

// The DeliveryRuleConstraintGroupFunc type is an adapter to allow the use of ordinary
// function as DeliveryRuleConstraintGroup mutator.
type DeliveryRuleConstraintGroupFunc func(context.Context, *ent.DeliveryRuleConstraintGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliveryRuleConstraintGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DeliveryRuleConstraintGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliveryRuleConstraintGroupMutation", m)
}

// The DocumentFunc type is an adapter to allow the use of ordinary
// function as Document mutator.
type DocumentFunc func(context.Context, *ent.DocumentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DocumentMutation", m)
}

// The DocumentFileFunc type is an adapter to allow the use of ordinary
// function as DocumentFile mutator.
type DocumentFileFunc func(context.Context, *ent.DocumentFileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DocumentFileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DocumentFileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DocumentFileMutation", m)
}

// The EmailTemplateFunc type is an adapter to allow the use of ordinary
// function as EmailTemplate mutator.
type EmailTemplateFunc func(context.Context, *ent.EmailTemplateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EmailTemplateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EmailTemplateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EmailTemplateMutation", m)
}

// The HypothesisTestFunc type is an adapter to allow the use of ordinary
// function as HypothesisTest mutator.
type HypothesisTestFunc func(context.Context, *ent.HypothesisTestMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HypothesisTestFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HypothesisTestMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HypothesisTestMutation", m)
}

// The HypothesisTestDeliveryOptionFunc type is an adapter to allow the use of ordinary
// function as HypothesisTestDeliveryOption mutator.
type HypothesisTestDeliveryOptionFunc func(context.Context, *ent.HypothesisTestDeliveryOptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HypothesisTestDeliveryOptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HypothesisTestDeliveryOptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HypothesisTestDeliveryOptionMutation", m)
}

// The HypothesisTestDeliveryOptionLookupFunc type is an adapter to allow the use of ordinary
// function as HypothesisTestDeliveryOptionLookup mutator.
type HypothesisTestDeliveryOptionLookupFunc func(context.Context, *ent.HypothesisTestDeliveryOptionLookupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HypothesisTestDeliveryOptionLookupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HypothesisTestDeliveryOptionLookupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HypothesisTestDeliveryOptionLookupMutation", m)
}

// The HypothesisTestDeliveryOptionRequestFunc type is an adapter to allow the use of ordinary
// function as HypothesisTestDeliveryOptionRequest mutator.
type HypothesisTestDeliveryOptionRequestFunc func(context.Context, *ent.HypothesisTestDeliveryOptionRequestMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HypothesisTestDeliveryOptionRequestFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HypothesisTestDeliveryOptionRequestMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HypothesisTestDeliveryOptionRequestMutation", m)
}

// The InventoryItemFunc type is an adapter to allow the use of ordinary
// function as InventoryItem mutator.
type InventoryItemFunc func(context.Context, *ent.InventoryItemMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryItemFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InventoryItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InventoryItemMutation", m)
}

// The LanguageFunc type is an adapter to allow the use of ordinary
// function as Language mutator.
type LanguageFunc func(context.Context, *ent.LanguageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LanguageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LanguageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LanguageMutation", m)
}

// The LocationFunc type is an adapter to allow the use of ordinary
// function as Location mutator.
type LocationFunc func(context.Context, *ent.LocationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LocationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocationMutation", m)
}

// The LocationTagFunc type is an adapter to allow the use of ordinary
// function as LocationTag mutator.
type LocationTagFunc func(context.Context, *ent.LocationTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocationTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LocationTagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocationTagMutation", m)
}

// The NotificationFunc type is an adapter to allow the use of ordinary
// function as Notification mutator.
type NotificationFunc func(context.Context, *ent.NotificationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NotificationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.NotificationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NotificationMutation", m)
}

// The OTKRequestsFunc type is an adapter to allow the use of ordinary
// function as OTKRequests mutator.
type OTKRequestsFunc func(context.Context, *ent.OTKRequestsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OTKRequestsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OTKRequestsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OTKRequestsMutation", m)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *ent.OrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderMutation", m)
}

// The OrderHistoryFunc type is an adapter to allow the use of ordinary
// function as OrderHistory mutator.
type OrderHistoryFunc func(context.Context, *ent.OrderHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderHistoryMutation", m)
}

// The OrderLineFunc type is an adapter to allow the use of ordinary
// function as OrderLine mutator.
type OrderLineFunc func(context.Context, *ent.OrderLineMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderLineFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderLineMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderLineMutation", m)
}

// The OrderSenderFunc type is an adapter to allow the use of ordinary
// function as OrderSender mutator.
type OrderSenderFunc func(context.Context, *ent.OrderSenderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderSenderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderSenderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderSenderMutation", m)
}

// The PackagingFunc type is an adapter to allow the use of ordinary
// function as Packaging mutator.
type PackagingFunc func(context.Context, *ent.PackagingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PackagingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PackagingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PackagingMutation", m)
}

// The PackagingDFFunc type is an adapter to allow the use of ordinary
// function as PackagingDF mutator.
type PackagingDFFunc func(context.Context, *ent.PackagingDFMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PackagingDFFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PackagingDFMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PackagingDFMutation", m)
}

// The PackagingUSPSFunc type is an adapter to allow the use of ordinary
// function as PackagingUSPS mutator.
type PackagingUSPSFunc func(context.Context, *ent.PackagingUSPSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PackagingUSPSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PackagingUSPSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PackagingUSPSMutation", m)
}

// The PackagingUSPSProcessingCategoryFunc type is an adapter to allow the use of ordinary
// function as PackagingUSPSProcessingCategory mutator.
type PackagingUSPSProcessingCategoryFunc func(context.Context, *ent.PackagingUSPSProcessingCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PackagingUSPSProcessingCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PackagingUSPSProcessingCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PackagingUSPSProcessingCategoryMutation", m)
}

// The PackagingUSPSRateIndicatorFunc type is an adapter to allow the use of ordinary
// function as PackagingUSPSRateIndicator mutator.
type PackagingUSPSRateIndicatorFunc func(context.Context, *ent.PackagingUSPSRateIndicatorMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PackagingUSPSRateIndicatorFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PackagingUSPSRateIndicatorMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PackagingUSPSRateIndicatorMutation", m)
}

// The PalletFunc type is an adapter to allow the use of ordinary
// function as Pallet mutator.
type PalletFunc func(context.Context, *ent.PalletMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PalletFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PalletMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PalletMutation", m)
}

// The ParcelShopFunc type is an adapter to allow the use of ordinary
// function as ParcelShop mutator.
type ParcelShopFunc func(context.Context, *ent.ParcelShopMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ParcelShopFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ParcelShopMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ParcelShopMutation", m)
}

// The ParcelShopBringFunc type is an adapter to allow the use of ordinary
// function as ParcelShopBring mutator.
type ParcelShopBringFunc func(context.Context, *ent.ParcelShopBringMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ParcelShopBringFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ParcelShopBringMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ParcelShopBringMutation", m)
}

// The ParcelShopDAOFunc type is an adapter to allow the use of ordinary
// function as ParcelShopDAO mutator.
type ParcelShopDAOFunc func(context.Context, *ent.ParcelShopDAOMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ParcelShopDAOFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ParcelShopDAOMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ParcelShopDAOMutation", m)
}

// The ParcelShopGLSFunc type is an adapter to allow the use of ordinary
// function as ParcelShopGLS mutator.
type ParcelShopGLSFunc func(context.Context, *ent.ParcelShopGLSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ParcelShopGLSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ParcelShopGLSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ParcelShopGLSMutation", m)
}

// The ParcelShopPostNordFunc type is an adapter to allow the use of ordinary
// function as ParcelShopPostNord mutator.
type ParcelShopPostNordFunc func(context.Context, *ent.ParcelShopPostNordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ParcelShopPostNordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ParcelShopPostNordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ParcelShopPostNordMutation", m)
}

// The PlanFunc type is an adapter to allow the use of ordinary
// function as Plan mutator.
type PlanFunc func(context.Context, *ent.PlanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PlanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlanMutation", m)
}

// The PlanHistoryFunc type is an adapter to allow the use of ordinary
// function as PlanHistory mutator.
type PlanHistoryFunc func(context.Context, *ent.PlanHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlanHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PlanHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlanHistoryMutation", m)
}

// The PrintJobFunc type is an adapter to allow the use of ordinary
// function as PrintJob mutator.
type PrintJobFunc func(context.Context, *ent.PrintJobMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PrintJobFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PrintJobMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PrintJobMutation", m)
}

// The PrinterFunc type is an adapter to allow the use of ordinary
// function as Printer mutator.
type PrinterFunc func(context.Context, *ent.PrinterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PrinterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PrinterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PrinterMutation", m)
}

// The ProductFunc type is an adapter to allow the use of ordinary
// function as Product mutator.
type ProductFunc func(context.Context, *ent.ProductMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductMutation", m)
}

// The ProductImageFunc type is an adapter to allow the use of ordinary
// function as ProductImage mutator.
type ProductImageFunc func(context.Context, *ent.ProductImageMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductImageFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductImageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductImageMutation", m)
}

// The ProductTagFunc type is an adapter to allow the use of ordinary
// function as ProductTag mutator.
type ProductTagFunc func(context.Context, *ent.ProductTagMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductTagFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductTagMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductTagMutation", m)
}

// The ProductVariantFunc type is an adapter to allow the use of ordinary
// function as ProductVariant mutator.
type ProductVariantFunc func(context.Context, *ent.ProductVariantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProductVariantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProductVariantMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProductVariantMutation", m)
}

// The ReturnColliFunc type is an adapter to allow the use of ordinary
// function as ReturnColli mutator.
type ReturnColliFunc func(context.Context, *ent.ReturnColliMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReturnColliFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReturnColliMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReturnColliMutation", m)
}

// The ReturnColliHistoryFunc type is an adapter to allow the use of ordinary
// function as ReturnColliHistory mutator.
type ReturnColliHistoryFunc func(context.Context, *ent.ReturnColliHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReturnColliHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReturnColliHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReturnColliHistoryMutation", m)
}

// The ReturnOrderLineFunc type is an adapter to allow the use of ordinary
// function as ReturnOrderLine mutator.
type ReturnOrderLineFunc func(context.Context, *ent.ReturnOrderLineMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReturnOrderLineFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReturnOrderLineMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReturnOrderLineMutation", m)
}

// The ReturnPortalFunc type is an adapter to allow the use of ordinary
// function as ReturnPortal mutator.
type ReturnPortalFunc func(context.Context, *ent.ReturnPortalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReturnPortalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReturnPortalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReturnPortalMutation", m)
}

// The ReturnPortalClaimFunc type is an adapter to allow the use of ordinary
// function as ReturnPortalClaim mutator.
type ReturnPortalClaimFunc func(context.Context, *ent.ReturnPortalClaimMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReturnPortalClaimFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReturnPortalClaimMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReturnPortalClaimMutation", m)
}

// The SeatGroupFunc type is an adapter to allow the use of ordinary
// function as SeatGroup mutator.
type SeatGroupFunc func(context.Context, *ent.SeatGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SeatGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SeatGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SeatGroupMutation", m)
}

// The SeatGroupAccessRightFunc type is an adapter to allow the use of ordinary
// function as SeatGroupAccessRight mutator.
type SeatGroupAccessRightFunc func(context.Context, *ent.SeatGroupAccessRightMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SeatGroupAccessRightFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SeatGroupAccessRightMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SeatGroupAccessRightMutation", m)
}

// The ShipmentFunc type is an adapter to allow the use of ordinary
// function as Shipment mutator.
type ShipmentFunc func(context.Context, *ent.ShipmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentMutation", m)
}

// The ShipmentBringFunc type is an adapter to allow the use of ordinary
// function as ShipmentBring mutator.
type ShipmentBringFunc func(context.Context, *ent.ShipmentBringMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentBringFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentBringMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentBringMutation", m)
}

// The ShipmentDAOFunc type is an adapter to allow the use of ordinary
// function as ShipmentDAO mutator.
type ShipmentDAOFunc func(context.Context, *ent.ShipmentDAOMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentDAOFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentDAOMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentDAOMutation", m)
}

// The ShipmentDFFunc type is an adapter to allow the use of ordinary
// function as ShipmentDF mutator.
type ShipmentDFFunc func(context.Context, *ent.ShipmentDFMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentDFFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentDFMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentDFMutation", m)
}

// The ShipmentDSVFunc type is an adapter to allow the use of ordinary
// function as ShipmentDSV mutator.
type ShipmentDSVFunc func(context.Context, *ent.ShipmentDSVMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentDSVFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentDSVMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentDSVMutation", m)
}

// The ShipmentEasyPostFunc type is an adapter to allow the use of ordinary
// function as ShipmentEasyPost mutator.
type ShipmentEasyPostFunc func(context.Context, *ent.ShipmentEasyPostMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentEasyPostFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentEasyPostMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentEasyPostMutation", m)
}

// The ShipmentGLSFunc type is an adapter to allow the use of ordinary
// function as ShipmentGLS mutator.
type ShipmentGLSFunc func(context.Context, *ent.ShipmentGLSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentGLSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentGLSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentGLSMutation", m)
}

// The ShipmentHistoryFunc type is an adapter to allow the use of ordinary
// function as ShipmentHistory mutator.
type ShipmentHistoryFunc func(context.Context, *ent.ShipmentHistoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentHistoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentHistoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentHistoryMutation", m)
}

// The ShipmentPalletFunc type is an adapter to allow the use of ordinary
// function as ShipmentPallet mutator.
type ShipmentPalletFunc func(context.Context, *ent.ShipmentPalletMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentPalletFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentPalletMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentPalletMutation", m)
}

// The ShipmentParcelFunc type is an adapter to allow the use of ordinary
// function as ShipmentParcel mutator.
type ShipmentParcelFunc func(context.Context, *ent.ShipmentParcelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentParcelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentParcelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentParcelMutation", m)
}

// The ShipmentPostNordFunc type is an adapter to allow the use of ordinary
// function as ShipmentPostNord mutator.
type ShipmentPostNordFunc func(context.Context, *ent.ShipmentPostNordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentPostNordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentPostNordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentPostNordMutation", m)
}

// The ShipmentUSPSFunc type is an adapter to allow the use of ordinary
// function as ShipmentUSPS mutator.
type ShipmentUSPSFunc func(context.Context, *ent.ShipmentUSPSMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ShipmentUSPSFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ShipmentUSPSMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ShipmentUSPSMutation", m)
}

// The SignupOptionsFunc type is an adapter to allow the use of ordinary
// function as SignupOptions mutator.
type SignupOptionsFunc func(context.Context, *ent.SignupOptionsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SignupOptionsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SignupOptionsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SignupOptionsMutation", m)
}

// The SystemEventsFunc type is an adapter to allow the use of ordinary
// function as SystemEvents mutator.
type SystemEventsFunc func(context.Context, *ent.SystemEventsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SystemEventsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SystemEventsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SystemEventsMutation", m)
}

// The TenantFunc type is an adapter to allow the use of ordinary
// function as Tenant mutator.
type TenantFunc func(context.Context, *ent.TenantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TenantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TenantMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TenantMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
}

// The UserSeatFunc type is an adapter to allow the use of ordinary
// function as UserSeat mutator.
type UserSeatFunc func(context.Context, *ent.UserSeatMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserSeatFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.UserSeatMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserSeatMutation", m)
}

// The WorkspaceRecentScanFunc type is an adapter to allow the use of ordinary
// function as WorkspaceRecentScan mutator.
type WorkspaceRecentScanFunc func(context.Context, *ent.WorkspaceRecentScanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkspaceRecentScanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkspaceRecentScanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkspaceRecentScanMutation", m)
}

// The WorkstationFunc type is an adapter to allow the use of ordinary
// function as Workstation mutator.
type WorkstationFunc func(context.Context, *ent.WorkstationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkstationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkstationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkstationMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
