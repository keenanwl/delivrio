// Code generated by ent, DO NOT EDIT.

package carrieradditionalserviceeasypost

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLTE(FieldID, id))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldAPIKey, v))
}

// APIValue applies equality check predicate on the "api_value" field. It's identical to APIValueEQ.
func APIValue(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldAPIValue, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldContainsFold(FieldLabel, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldContainsFold(FieldAPIKey, v))
}

// APIValueEQ applies the EQ predicate on the "api_value" field.
func APIValueEQ(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEQ(FieldAPIValue, v))
}

// APIValueNEQ applies the NEQ predicate on the "api_value" field.
func APIValueNEQ(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNEQ(FieldAPIValue, v))
}

// APIValueIn applies the In predicate on the "api_value" field.
func APIValueIn(vs ...string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldIn(FieldAPIValue, vs...))
}

// APIValueNotIn applies the NotIn predicate on the "api_value" field.
func APIValueNotIn(vs ...string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldNotIn(FieldAPIValue, vs...))
}

// APIValueGT applies the GT predicate on the "api_value" field.
func APIValueGT(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGT(FieldAPIValue, v))
}

// APIValueGTE applies the GTE predicate on the "api_value" field.
func APIValueGTE(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldGTE(FieldAPIValue, v))
}

// APIValueLT applies the LT predicate on the "api_value" field.
func APIValueLT(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLT(FieldAPIValue, v))
}

// APIValueLTE applies the LTE predicate on the "api_value" field.
func APIValueLTE(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldLTE(FieldAPIValue, v))
}

// APIValueContains applies the Contains predicate on the "api_value" field.
func APIValueContains(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldContains(FieldAPIValue, v))
}

// APIValueHasPrefix applies the HasPrefix predicate on the "api_value" field.
func APIValueHasPrefix(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldHasPrefix(FieldAPIValue, v))
}

// APIValueHasSuffix applies the HasSuffix predicate on the "api_value" field.
func APIValueHasSuffix(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldHasSuffix(FieldAPIValue, v))
}

// APIValueEqualFold applies the EqualFold predicate on the "api_value" field.
func APIValueEqualFold(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldEqualFold(FieldAPIValue, v))
}

// APIValueContainsFold applies the ContainsFold predicate on the "api_value" field.
func APIValueContainsFold(v string) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.FieldContainsFold(FieldAPIValue, v))
}

// HasCarrierServiceEasyPost applies the HasEdge predicate on the "carrier_service_easy_post" edge.
func HasCarrierServiceEasyPost() predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, CarrierServiceEasyPostTable, CarrierServiceEasyPostPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceEasyPostWith applies the HasEdge predicate on the "carrier_service_easy_post" edge with a given conditions (other predicates).
func HasCarrierServiceEasyPostWith(preds ...predicate.CarrierServiceEasyPost) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(func(s *sql.Selector) {
		step := newCarrierServiceEasyPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionEasyPost applies the HasEdge predicate on the "delivery_option_easy_post" edge.
func HasDeliveryOptionEasyPost() predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionEasyPostTable, DeliveryOptionEasyPostPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionEasyPostWith applies the HasEdge predicate on the "delivery_option_easy_post" edge with a given conditions (other predicates).
func HasDeliveryOptionEasyPostWith(preds ...predicate.DeliveryOptionEasyPost) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(func(s *sql.Selector) {
		step := newDeliveryOptionEasyPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierAdditionalServiceEasyPost) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierAdditionalServiceEasyPost) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierAdditionalServiceEasyPost) predicate.CarrierAdditionalServiceEasyPost {
	return predicate.CarrierAdditionalServiceEasyPost(sql.NotPredicates(p))
}
