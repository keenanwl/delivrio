// Code generated by ent, DO NOT EDIT.

package carrieradditionalserviceeasypost

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrieradditionalserviceeasypost type in the database.
	Label = "carrier_additional_service_easy_post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldAPIValue holds the string denoting the api_value field in the database.
	FieldAPIValue = "api_value"
	// EdgeCarrierServiceEasyPost holds the string denoting the carrier_service_easy_post edge name in mutations.
	EdgeCarrierServiceEasyPost = "carrier_service_easy_post"
	// EdgeDeliveryOptionEasyPost holds the string denoting the delivery_option_easy_post edge name in mutations.
	EdgeDeliveryOptionEasyPost = "delivery_option_easy_post"
	// Table holds the table name of the carrieradditionalserviceeasypost in the database.
	Table = "carrier_additional_service_easy_posts"
	// CarrierServiceEasyPostTable is the table that holds the carrier_service_easy_post relation/edge. The primary key declared below.
	CarrierServiceEasyPostTable = "carrier_service_easy_post_carrier_add_serv_easy_post"
	// CarrierServiceEasyPostInverseTable is the table name for the CarrierServiceEasyPost entity.
	// It exists in this package in order to avoid circular dependency with the "carrierserviceeasypost" package.
	CarrierServiceEasyPostInverseTable = "carrier_service_easy_posts"
	// DeliveryOptionEasyPostTable is the table that holds the delivery_option_easy_post relation/edge. The primary key declared below.
	DeliveryOptionEasyPostTable = "delivery_option_easy_post_carrier_add_serv_easy_post"
	// DeliveryOptionEasyPostInverseTable is the table name for the DeliveryOptionEasyPost entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoptioneasypost" package.
	DeliveryOptionEasyPostInverseTable = "delivery_option_easy_posts"
)

// Columns holds all SQL columns for carrieradditionalserviceeasypost fields.
var Columns = []string{
	FieldID,
	FieldLabel,
	FieldAPIKey,
	FieldAPIValue,
}

var (
	// CarrierServiceEasyPostPrimaryKey and CarrierServiceEasyPostColumn2 are the table columns denoting the
	// primary key for the carrier_service_easy_post relation (M2M).
	CarrierServiceEasyPostPrimaryKey = []string{"carrier_service_easy_post_id", "carrier_additional_service_easy_post_id"}
	// DeliveryOptionEasyPostPrimaryKey and DeliveryOptionEasyPostColumn2 are the table columns denoting the
	// primary key for the delivery_option_easy_post relation (M2M).
	DeliveryOptionEasyPostPrimaryKey = []string{"delivery_option_easy_post_id", "carrier_additional_service_easy_post_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierAdditionalServiceEasyPost queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByAPIValue orders the results by the api_value field.
func ByAPIValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIValue, opts...).ToFunc()
}

// ByCarrierServiceEasyPostCount orders the results by carrier_service_easy_post count.
func ByCarrierServiceEasyPostCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierServiceEasyPostStep(), opts...)
	}
}

// ByCarrierServiceEasyPost orders the results by carrier_service_easy_post terms.
func ByCarrierServiceEasyPost(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceEasyPostStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionEasyPostCount orders the results by delivery_option_easy_post count.
func ByDeliveryOptionEasyPostCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionEasyPostStep(), opts...)
	}
}

// ByDeliveryOptionEasyPost orders the results by delivery_option_easy_post terms.
func ByDeliveryOptionEasyPost(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionEasyPostStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceEasyPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceEasyPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CarrierServiceEasyPostTable, CarrierServiceEasyPostPrimaryKey...),
	)
}
func newDeliveryOptionEasyPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionEasyPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DeliveryOptionEasyPostTable, DeliveryOptionEasyPostPrimaryKey...),
	)
}
