// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Shipment is the model entity for the Shipment schema.
type Shipment struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ShipmentPublicID holds the value of the "shipment_public_id" field.
	ShipmentPublicID string `json:"shipment_public_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status shipment.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShipmentQuery when eager-loading is set.
	Edges            ShipmentEdges `json:"edges"`
	shipment_carrier *pulid.ID
	selectValues     sql.SelectValues
}

// ShipmentEdges holds the relations/edges for other nodes in the graph.
type ShipmentEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Can get this from edges, but want the reference to persist even after cancelling
	Carrier *Carrier `json:"carrier,omitempty"`
	// ShipmentHistory holds the value of the shipment_history edge.
	ShipmentHistory []*ShipmentHistory `json:"shipment_history,omitempty"`
	// ShipmentBring holds the value of the shipment_bring edge.
	ShipmentBring *ShipmentBring `json:"shipment_bring,omitempty"`
	// ShipmentDAO holds the value of the shipment_dao edge.
	ShipmentDAO *ShipmentDAO `json:"shipment_dao,omitempty"`
	// ShipmentDF holds the value of the shipment_df edge.
	ShipmentDF *ShipmentDF `json:"shipment_df,omitempty"`
	// ShipmentDSV holds the value of the shipment_dsv edge.
	ShipmentDSV *ShipmentDSV `json:"shipment_dsv,omitempty"`
	// ShipmentEasyPost holds the value of the shipment_easy_post edge.
	ShipmentEasyPost *ShipmentEasyPost `json:"shipment_easy_post,omitempty"`
	// ShipmentPostNord holds the value of the shipment_post_nord edge.
	ShipmentPostNord *ShipmentPostNord `json:"shipment_post_nord,omitempty"`
	// ShipmentGLS holds the value of the shipment_gls edge.
	ShipmentGLS *ShipmentGLS `json:"shipment_gls,omitempty"`
	// ShipmentUSPS holds the value of the shipment_usps edge.
	ShipmentUSPS *ShipmentUSPS `json:"shipment_usps,omitempty"`
	// A shipment may have 0 or more collis
	Consolidation *Consolidation `json:"consolidation,omitempty"`
	// After a shipment is cancelled
	OldConsolidation []*Consolidation `json:"old_consolidation,omitempty"`
	// A shipment may have 0 or more collis
	ShipmentParcel []*ShipmentParcel `json:"shipment_parcel,omitempty"`
	// A shipment may have 0 or more pallets
	ShipmentPallet []*ShipmentPallet `json:"shipment_pallet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
	// totalCount holds the count of the edges above.
	totalCount [15]map[string]int

	namedShipmentHistory  map[string][]*ShipmentHistory
	namedOldConsolidation map[string][]*Consolidation
	namedShipmentParcel   map[string][]*ShipmentParcel
	namedShipmentPallet   map[string][]*ShipmentPallet
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) CarrierOrErr() (*Carrier, error) {
	if e.Carrier != nil {
		return e.Carrier, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrier.Label}
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// ShipmentHistoryOrErr returns the ShipmentHistory value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ShipmentHistoryOrErr() ([]*ShipmentHistory, error) {
	if e.loadedTypes[2] {
		return e.ShipmentHistory, nil
	}
	return nil, &NotLoadedError{edge: "shipment_history"}
}

// ShipmentBringOrErr returns the ShipmentBring value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentBringOrErr() (*ShipmentBring, error) {
	if e.ShipmentBring != nil {
		return e.ShipmentBring, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: shipmentbring.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_bring"}
}

// ShipmentDAOOrErr returns the ShipmentDAO value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentDAOOrErr() (*ShipmentDAO, error) {
	if e.ShipmentDAO != nil {
		return e.ShipmentDAO, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: shipmentdao.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_dao"}
}

// ShipmentDFOrErr returns the ShipmentDF value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentDFOrErr() (*ShipmentDF, error) {
	if e.ShipmentDF != nil {
		return e.ShipmentDF, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: shipmentdf.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_df"}
}

// ShipmentDSVOrErr returns the ShipmentDSV value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentDSVOrErr() (*ShipmentDSV, error) {
	if e.ShipmentDSV != nil {
		return e.ShipmentDSV, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: shipmentdsv.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_dsv"}
}

// ShipmentEasyPostOrErr returns the ShipmentEasyPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentEasyPostOrErr() (*ShipmentEasyPost, error) {
	if e.ShipmentEasyPost != nil {
		return e.ShipmentEasyPost, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: shipmenteasypost.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_easy_post"}
}

// ShipmentPostNordOrErr returns the ShipmentPostNord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentPostNordOrErr() (*ShipmentPostNord, error) {
	if e.ShipmentPostNord != nil {
		return e.ShipmentPostNord, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: shipmentpostnord.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_post_nord"}
}

// ShipmentGLSOrErr returns the ShipmentGLS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentGLSOrErr() (*ShipmentGLS, error) {
	if e.ShipmentGLS != nil {
		return e.ShipmentGLS, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: shipmentgls.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_gls"}
}

// ShipmentUSPSOrErr returns the ShipmentUSPS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ShipmentUSPSOrErr() (*ShipmentUSPS, error) {
	if e.ShipmentUSPS != nil {
		return e.ShipmentUSPS, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: shipmentusps.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_usps"}
}

// ConsolidationOrErr returns the Consolidation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShipmentEdges) ConsolidationOrErr() (*Consolidation, error) {
	if e.Consolidation != nil {
		return e.Consolidation, nil
	} else if e.loadedTypes[11] {
		return nil, &NotFoundError{label: consolidation.Label}
	}
	return nil, &NotLoadedError{edge: "consolidation"}
}

// OldConsolidationOrErr returns the OldConsolidation value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) OldConsolidationOrErr() ([]*Consolidation, error) {
	if e.loadedTypes[12] {
		return e.OldConsolidation, nil
	}
	return nil, &NotLoadedError{edge: "old_consolidation"}
}

// ShipmentParcelOrErr returns the ShipmentParcel value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ShipmentParcelOrErr() ([]*ShipmentParcel, error) {
	if e.loadedTypes[13] {
		return e.ShipmentParcel, nil
	}
	return nil, &NotLoadedError{edge: "shipment_parcel"}
}

// ShipmentPalletOrErr returns the ShipmentPallet value or an error if the edge
// was not loaded in eager-loading.
func (e ShipmentEdges) ShipmentPalletOrErr() ([]*ShipmentPallet, error) {
	if e.loadedTypes[14] {
		return e.ShipmentPallet, nil
	}
	return nil, &NotLoadedError{edge: "shipment_pallet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shipment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shipment.FieldID, shipment.FieldTenantID:
			values[i] = new(pulid.ID)
		case shipment.FieldShipmentPublicID, shipment.FieldStatus:
			values[i] = new(sql.NullString)
		case shipment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case shipment.ForeignKeys[0]: // shipment_carrier
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shipment fields.
func (s *Shipment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shipment.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case shipment.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				s.TenantID = *value
			}
		case shipment.FieldShipmentPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_public_id", values[i])
			} else if value.Valid {
				s.ShipmentPublicID = value.String
			}
		case shipment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case shipment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = shipment.Status(value.String)
			}
		case shipment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_carrier", values[i])
			} else if value.Valid {
				s.shipment_carrier = new(pulid.ID)
				*s.shipment_carrier = *value.S.(*pulid.ID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Shipment.
// This includes values selected through modifiers, order, etc.
func (s *Shipment) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Shipment entity.
func (s *Shipment) QueryTenant() *TenantQuery {
	return NewShipmentClient(s.config).QueryTenant(s)
}

// QueryCarrier queries the "carrier" edge of the Shipment entity.
func (s *Shipment) QueryCarrier() *CarrierQuery {
	return NewShipmentClient(s.config).QueryCarrier(s)
}

// QueryShipmentHistory queries the "shipment_history" edge of the Shipment entity.
func (s *Shipment) QueryShipmentHistory() *ShipmentHistoryQuery {
	return NewShipmentClient(s.config).QueryShipmentHistory(s)
}

// QueryShipmentBring queries the "shipment_bring" edge of the Shipment entity.
func (s *Shipment) QueryShipmentBring() *ShipmentBringQuery {
	return NewShipmentClient(s.config).QueryShipmentBring(s)
}

// QueryShipmentDAO queries the "shipment_dao" edge of the Shipment entity.
func (s *Shipment) QueryShipmentDAO() *ShipmentDAOQuery {
	return NewShipmentClient(s.config).QueryShipmentDAO(s)
}

// QueryShipmentDF queries the "shipment_df" edge of the Shipment entity.
func (s *Shipment) QueryShipmentDF() *ShipmentDFQuery {
	return NewShipmentClient(s.config).QueryShipmentDF(s)
}

// QueryShipmentDSV queries the "shipment_dsv" edge of the Shipment entity.
func (s *Shipment) QueryShipmentDSV() *ShipmentDSVQuery {
	return NewShipmentClient(s.config).QueryShipmentDSV(s)
}

// QueryShipmentEasyPost queries the "shipment_easy_post" edge of the Shipment entity.
func (s *Shipment) QueryShipmentEasyPost() *ShipmentEasyPostQuery {
	return NewShipmentClient(s.config).QueryShipmentEasyPost(s)
}

// QueryShipmentPostNord queries the "shipment_post_nord" edge of the Shipment entity.
func (s *Shipment) QueryShipmentPostNord() *ShipmentPostNordQuery {
	return NewShipmentClient(s.config).QueryShipmentPostNord(s)
}

// QueryShipmentGLS queries the "shipment_gls" edge of the Shipment entity.
func (s *Shipment) QueryShipmentGLS() *ShipmentGLSQuery {
	return NewShipmentClient(s.config).QueryShipmentGLS(s)
}

// QueryShipmentUSPS queries the "shipment_usps" edge of the Shipment entity.
func (s *Shipment) QueryShipmentUSPS() *ShipmentUSPSQuery {
	return NewShipmentClient(s.config).QueryShipmentUSPS(s)
}

// QueryConsolidation queries the "consolidation" edge of the Shipment entity.
func (s *Shipment) QueryConsolidation() *ConsolidationQuery {
	return NewShipmentClient(s.config).QueryConsolidation(s)
}

// QueryOldConsolidation queries the "old_consolidation" edge of the Shipment entity.
func (s *Shipment) QueryOldConsolidation() *ConsolidationQuery {
	return NewShipmentClient(s.config).QueryOldConsolidation(s)
}

// QueryShipmentParcel queries the "shipment_parcel" edge of the Shipment entity.
func (s *Shipment) QueryShipmentParcel() *ShipmentParcelQuery {
	return NewShipmentClient(s.config).QueryShipmentParcel(s)
}

// QueryShipmentPallet queries the "shipment_pallet" edge of the Shipment entity.
func (s *Shipment) QueryShipmentPallet() *ShipmentPalletQuery {
	return NewShipmentClient(s.config).QueryShipmentPallet(s)
}

// Update returns a builder for updating this Shipment.
// Note that you need to call Shipment.Unwrap() before calling this method if this Shipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shipment) Update() *ShipmentUpdateOne {
	return NewShipmentClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Shipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shipment) Unwrap() *Shipment {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shipment is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shipment) String() string {
	var builder strings.Builder
	builder.WriteString("Shipment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", s.TenantID))
	builder.WriteString(", ")
	builder.WriteString("shipment_public_id=")
	builder.WriteString(s.ShipmentPublicID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedShipmentHistory returns the ShipmentHistory named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shipment) NamedShipmentHistory(name string) ([]*ShipmentHistory, error) {
	if s.Edges.namedShipmentHistory == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedShipmentHistory[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shipment) appendNamedShipmentHistory(name string, edges ...*ShipmentHistory) {
	if s.Edges.namedShipmentHistory == nil {
		s.Edges.namedShipmentHistory = make(map[string][]*ShipmentHistory)
	}
	if len(edges) == 0 {
		s.Edges.namedShipmentHistory[name] = []*ShipmentHistory{}
	} else {
		s.Edges.namedShipmentHistory[name] = append(s.Edges.namedShipmentHistory[name], edges...)
	}
}

// NamedOldConsolidation returns the OldConsolidation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shipment) NamedOldConsolidation(name string) ([]*Consolidation, error) {
	if s.Edges.namedOldConsolidation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedOldConsolidation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shipment) appendNamedOldConsolidation(name string, edges ...*Consolidation) {
	if s.Edges.namedOldConsolidation == nil {
		s.Edges.namedOldConsolidation = make(map[string][]*Consolidation)
	}
	if len(edges) == 0 {
		s.Edges.namedOldConsolidation[name] = []*Consolidation{}
	} else {
		s.Edges.namedOldConsolidation[name] = append(s.Edges.namedOldConsolidation[name], edges...)
	}
}

// NamedShipmentParcel returns the ShipmentParcel named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shipment) NamedShipmentParcel(name string) ([]*ShipmentParcel, error) {
	if s.Edges.namedShipmentParcel == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedShipmentParcel[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shipment) appendNamedShipmentParcel(name string, edges ...*ShipmentParcel) {
	if s.Edges.namedShipmentParcel == nil {
		s.Edges.namedShipmentParcel = make(map[string][]*ShipmentParcel)
	}
	if len(edges) == 0 {
		s.Edges.namedShipmentParcel[name] = []*ShipmentParcel{}
	} else {
		s.Edges.namedShipmentParcel[name] = append(s.Edges.namedShipmentParcel[name], edges...)
	}
}

// NamedShipmentPallet returns the ShipmentPallet named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Shipment) NamedShipmentPallet(name string) ([]*ShipmentPallet, error) {
	if s.Edges.namedShipmentPallet == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedShipmentPallet[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Shipment) appendNamedShipmentPallet(name string, edges ...*ShipmentPallet) {
	if s.Edges.namedShipmentPallet == nil {
		s.Edges.namedShipmentPallet = make(map[string][]*ShipmentPallet)
	}
	if len(edges) == 0 {
		s.Edges.namedShipmentPallet[name] = []*ShipmentPallet{}
	} else {
		s.Edges.namedShipmentPallet[name] = append(s.Edges.namedShipmentPallet[name], edges...)
	}
}

// Shipments is a parsable slice of Shipment.
type Shipments []*Shipment
