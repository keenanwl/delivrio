// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnOrderLineUpdate is the builder for updating ReturnOrderLine entities.
type ReturnOrderLineUpdate struct {
	config
	hooks    []Hook
	mutation *ReturnOrderLineMutation
}

// Where appends a list predicates to the ReturnOrderLineUpdate builder.
func (rolu *ReturnOrderLineUpdate) Where(ps ...predicate.ReturnOrderLine) *ReturnOrderLineUpdate {
	rolu.mutation.Where(ps...)
	return rolu
}

// SetTenantID sets the "tenant_id" field.
func (rolu *ReturnOrderLineUpdate) SetTenantID(pu pulid.ID) *ReturnOrderLineUpdate {
	rolu.mutation.SetTenantID(pu)
	return rolu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (rolu *ReturnOrderLineUpdate) SetNillableTenantID(pu *pulid.ID) *ReturnOrderLineUpdate {
	if pu != nil {
		rolu.SetTenantID(*pu)
	}
	return rolu
}

// SetUnits sets the "units" field.
func (rolu *ReturnOrderLineUpdate) SetUnits(i int) *ReturnOrderLineUpdate {
	rolu.mutation.ResetUnits()
	rolu.mutation.SetUnits(i)
	return rolu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (rolu *ReturnOrderLineUpdate) SetNillableUnits(i *int) *ReturnOrderLineUpdate {
	if i != nil {
		rolu.SetUnits(*i)
	}
	return rolu
}

// AddUnits adds i to the "units" field.
func (rolu *ReturnOrderLineUpdate) AddUnits(i int) *ReturnOrderLineUpdate {
	rolu.mutation.AddUnits(i)
	return rolu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rolu *ReturnOrderLineUpdate) SetTenant(t *Tenant) *ReturnOrderLineUpdate {
	return rolu.SetTenantID(t.ID)
}

// SetReturnColliID sets the "return_colli" edge to the ReturnColli entity by ID.
func (rolu *ReturnOrderLineUpdate) SetReturnColliID(id pulid.ID) *ReturnOrderLineUpdate {
	rolu.mutation.SetReturnColliID(id)
	return rolu
}

// SetReturnColli sets the "return_colli" edge to the ReturnColli entity.
func (rolu *ReturnOrderLineUpdate) SetReturnColli(r *ReturnColli) *ReturnOrderLineUpdate {
	return rolu.SetReturnColliID(r.ID)
}

// SetOrderLineID sets the "order_line" edge to the OrderLine entity by ID.
func (rolu *ReturnOrderLineUpdate) SetOrderLineID(id pulid.ID) *ReturnOrderLineUpdate {
	rolu.mutation.SetOrderLineID(id)
	return rolu
}

// SetOrderLine sets the "order_line" edge to the OrderLine entity.
func (rolu *ReturnOrderLineUpdate) SetOrderLine(o *OrderLine) *ReturnOrderLineUpdate {
	return rolu.SetOrderLineID(o.ID)
}

// SetReturnPortalClaimID sets the "return_portal_claim" edge to the ReturnPortalClaim entity by ID.
func (rolu *ReturnOrderLineUpdate) SetReturnPortalClaimID(id pulid.ID) *ReturnOrderLineUpdate {
	rolu.mutation.SetReturnPortalClaimID(id)
	return rolu
}

// SetReturnPortalClaim sets the "return_portal_claim" edge to the ReturnPortalClaim entity.
func (rolu *ReturnOrderLineUpdate) SetReturnPortalClaim(r *ReturnPortalClaim) *ReturnOrderLineUpdate {
	return rolu.SetReturnPortalClaimID(r.ID)
}

// Mutation returns the ReturnOrderLineMutation object of the builder.
func (rolu *ReturnOrderLineUpdate) Mutation() *ReturnOrderLineMutation {
	return rolu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rolu *ReturnOrderLineUpdate) ClearTenant() *ReturnOrderLineUpdate {
	rolu.mutation.ClearTenant()
	return rolu
}

// ClearReturnColli clears the "return_colli" edge to the ReturnColli entity.
func (rolu *ReturnOrderLineUpdate) ClearReturnColli() *ReturnOrderLineUpdate {
	rolu.mutation.ClearReturnColli()
	return rolu
}

// ClearOrderLine clears the "order_line" edge to the OrderLine entity.
func (rolu *ReturnOrderLineUpdate) ClearOrderLine() *ReturnOrderLineUpdate {
	rolu.mutation.ClearOrderLine()
	return rolu
}

// ClearReturnPortalClaim clears the "return_portal_claim" edge to the ReturnPortalClaim entity.
func (rolu *ReturnOrderLineUpdate) ClearReturnPortalClaim() *ReturnOrderLineUpdate {
	rolu.mutation.ClearReturnPortalClaim()
	return rolu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rolu *ReturnOrderLineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rolu.sqlSave, rolu.mutation, rolu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rolu *ReturnOrderLineUpdate) SaveX(ctx context.Context) int {
	affected, err := rolu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rolu *ReturnOrderLineUpdate) Exec(ctx context.Context) error {
	_, err := rolu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rolu *ReturnOrderLineUpdate) ExecX(ctx context.Context) {
	if err := rolu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rolu *ReturnOrderLineUpdate) check() error {
	if v, ok := rolu.mutation.Units(); ok {
		if err := returnorderline.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ReturnOrderLine.units": %w`, err)}
		}
	}
	if rolu.mutation.TenantCleared() && len(rolu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.tenant"`)
	}
	if rolu.mutation.ReturnColliCleared() && len(rolu.mutation.ReturnColliIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.return_colli"`)
	}
	if rolu.mutation.OrderLineCleared() && len(rolu.mutation.OrderLineIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.order_line"`)
	}
	if rolu.mutation.ReturnPortalClaimCleared() && len(rolu.mutation.ReturnPortalClaimIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.return_portal_claim"`)
	}
	return nil
}

func (rolu *ReturnOrderLineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rolu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(returnorderline.Table, returnorderline.Columns, sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString))
	if ps := rolu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rolu.mutation.Units(); ok {
		_spec.SetField(returnorderline.FieldUnits, field.TypeInt, value)
	}
	if value, ok := rolu.mutation.AddedUnits(); ok {
		_spec.AddField(returnorderline.FieldUnits, field.TypeInt, value)
	}
	if rolu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.TenantTable,
			Columns: []string{returnorderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rolu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.TenantTable,
			Columns: []string{returnorderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rolu.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnorderline.ReturnColliTable,
			Columns: []string{returnorderline.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rolu.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnorderline.ReturnColliTable,
			Columns: []string{returnorderline.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rolu.mutation.OrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.OrderLineTable,
			Columns: []string{returnorderline.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rolu.mutation.OrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.OrderLineTable,
			Columns: []string{returnorderline.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rolu.mutation.ReturnPortalClaimCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.ReturnPortalClaimTable,
			Columns: []string{returnorderline.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rolu.mutation.ReturnPortalClaimIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.ReturnPortalClaimTable,
			Columns: []string{returnorderline.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rolu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returnorderline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rolu.mutation.done = true
	return n, nil
}

// ReturnOrderLineUpdateOne is the builder for updating a single ReturnOrderLine entity.
type ReturnOrderLineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReturnOrderLineMutation
}

// SetTenantID sets the "tenant_id" field.
func (roluo *ReturnOrderLineUpdateOne) SetTenantID(pu pulid.ID) *ReturnOrderLineUpdateOne {
	roluo.mutation.SetTenantID(pu)
	return roluo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (roluo *ReturnOrderLineUpdateOne) SetNillableTenantID(pu *pulid.ID) *ReturnOrderLineUpdateOne {
	if pu != nil {
		roluo.SetTenantID(*pu)
	}
	return roluo
}

// SetUnits sets the "units" field.
func (roluo *ReturnOrderLineUpdateOne) SetUnits(i int) *ReturnOrderLineUpdateOne {
	roluo.mutation.ResetUnits()
	roluo.mutation.SetUnits(i)
	return roluo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (roluo *ReturnOrderLineUpdateOne) SetNillableUnits(i *int) *ReturnOrderLineUpdateOne {
	if i != nil {
		roluo.SetUnits(*i)
	}
	return roluo
}

// AddUnits adds i to the "units" field.
func (roluo *ReturnOrderLineUpdateOne) AddUnits(i int) *ReturnOrderLineUpdateOne {
	roluo.mutation.AddUnits(i)
	return roluo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (roluo *ReturnOrderLineUpdateOne) SetTenant(t *Tenant) *ReturnOrderLineUpdateOne {
	return roluo.SetTenantID(t.ID)
}

// SetReturnColliID sets the "return_colli" edge to the ReturnColli entity by ID.
func (roluo *ReturnOrderLineUpdateOne) SetReturnColliID(id pulid.ID) *ReturnOrderLineUpdateOne {
	roluo.mutation.SetReturnColliID(id)
	return roluo
}

// SetReturnColli sets the "return_colli" edge to the ReturnColli entity.
func (roluo *ReturnOrderLineUpdateOne) SetReturnColli(r *ReturnColli) *ReturnOrderLineUpdateOne {
	return roluo.SetReturnColliID(r.ID)
}

// SetOrderLineID sets the "order_line" edge to the OrderLine entity by ID.
func (roluo *ReturnOrderLineUpdateOne) SetOrderLineID(id pulid.ID) *ReturnOrderLineUpdateOne {
	roluo.mutation.SetOrderLineID(id)
	return roluo
}

// SetOrderLine sets the "order_line" edge to the OrderLine entity.
func (roluo *ReturnOrderLineUpdateOne) SetOrderLine(o *OrderLine) *ReturnOrderLineUpdateOne {
	return roluo.SetOrderLineID(o.ID)
}

// SetReturnPortalClaimID sets the "return_portal_claim" edge to the ReturnPortalClaim entity by ID.
func (roluo *ReturnOrderLineUpdateOne) SetReturnPortalClaimID(id pulid.ID) *ReturnOrderLineUpdateOne {
	roluo.mutation.SetReturnPortalClaimID(id)
	return roluo
}

// SetReturnPortalClaim sets the "return_portal_claim" edge to the ReturnPortalClaim entity.
func (roluo *ReturnOrderLineUpdateOne) SetReturnPortalClaim(r *ReturnPortalClaim) *ReturnOrderLineUpdateOne {
	return roluo.SetReturnPortalClaimID(r.ID)
}

// Mutation returns the ReturnOrderLineMutation object of the builder.
func (roluo *ReturnOrderLineUpdateOne) Mutation() *ReturnOrderLineMutation {
	return roluo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (roluo *ReturnOrderLineUpdateOne) ClearTenant() *ReturnOrderLineUpdateOne {
	roluo.mutation.ClearTenant()
	return roluo
}

// ClearReturnColli clears the "return_colli" edge to the ReturnColli entity.
func (roluo *ReturnOrderLineUpdateOne) ClearReturnColli() *ReturnOrderLineUpdateOne {
	roluo.mutation.ClearReturnColli()
	return roluo
}

// ClearOrderLine clears the "order_line" edge to the OrderLine entity.
func (roluo *ReturnOrderLineUpdateOne) ClearOrderLine() *ReturnOrderLineUpdateOne {
	roluo.mutation.ClearOrderLine()
	return roluo
}

// ClearReturnPortalClaim clears the "return_portal_claim" edge to the ReturnPortalClaim entity.
func (roluo *ReturnOrderLineUpdateOne) ClearReturnPortalClaim() *ReturnOrderLineUpdateOne {
	roluo.mutation.ClearReturnPortalClaim()
	return roluo
}

// Where appends a list predicates to the ReturnOrderLineUpdate builder.
func (roluo *ReturnOrderLineUpdateOne) Where(ps ...predicate.ReturnOrderLine) *ReturnOrderLineUpdateOne {
	roluo.mutation.Where(ps...)
	return roluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (roluo *ReturnOrderLineUpdateOne) Select(field string, fields ...string) *ReturnOrderLineUpdateOne {
	roluo.fields = append([]string{field}, fields...)
	return roluo
}

// Save executes the query and returns the updated ReturnOrderLine entity.
func (roluo *ReturnOrderLineUpdateOne) Save(ctx context.Context) (*ReturnOrderLine, error) {
	return withHooks(ctx, roluo.sqlSave, roluo.mutation, roluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (roluo *ReturnOrderLineUpdateOne) SaveX(ctx context.Context) *ReturnOrderLine {
	node, err := roluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (roluo *ReturnOrderLineUpdateOne) Exec(ctx context.Context) error {
	_, err := roluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (roluo *ReturnOrderLineUpdateOne) ExecX(ctx context.Context) {
	if err := roluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (roluo *ReturnOrderLineUpdateOne) check() error {
	if v, ok := roluo.mutation.Units(); ok {
		if err := returnorderline.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ReturnOrderLine.units": %w`, err)}
		}
	}
	if roluo.mutation.TenantCleared() && len(roluo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.tenant"`)
	}
	if roluo.mutation.ReturnColliCleared() && len(roluo.mutation.ReturnColliIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.return_colli"`)
	}
	if roluo.mutation.OrderLineCleared() && len(roluo.mutation.OrderLineIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.order_line"`)
	}
	if roluo.mutation.ReturnPortalClaimCleared() && len(roluo.mutation.ReturnPortalClaimIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ReturnOrderLine.return_portal_claim"`)
	}
	return nil
}

func (roluo *ReturnOrderLineUpdateOne) sqlSave(ctx context.Context) (_node *ReturnOrderLine, err error) {
	if err := roluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(returnorderline.Table, returnorderline.Columns, sqlgraph.NewFieldSpec(returnorderline.FieldID, field.TypeString))
	id, ok := roluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReturnOrderLine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := roluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returnorderline.FieldID)
		for _, f := range fields {
			if !returnorderline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != returnorderline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := roluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := roluo.mutation.Units(); ok {
		_spec.SetField(returnorderline.FieldUnits, field.TypeInt, value)
	}
	if value, ok := roluo.mutation.AddedUnits(); ok {
		_spec.AddField(returnorderline.FieldUnits, field.TypeInt, value)
	}
	if roluo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.TenantTable,
			Columns: []string{returnorderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := roluo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.TenantTable,
			Columns: []string{returnorderline.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if roluo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnorderline.ReturnColliTable,
			Columns: []string{returnorderline.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := roluo.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnorderline.ReturnColliTable,
			Columns: []string{returnorderline.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if roluo.mutation.OrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.OrderLineTable,
			Columns: []string{returnorderline.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := roluo.mutation.OrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.OrderLineTable,
			Columns: []string{returnorderline.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if roluo.mutation.ReturnPortalClaimCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.ReturnPortalClaimTable,
			Columns: []string{returnorderline.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := roluo.mutation.ReturnPortalClaimIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.ReturnPortalClaimTable,
			Columns: []string{returnorderline.ReturnPortalClaimColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportalclaim.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReturnOrderLine{config: roluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, roluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{returnorderline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	roluo.mutation.done = true
	return _node, nil
}
