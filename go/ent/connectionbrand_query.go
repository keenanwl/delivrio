// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionBrandQuery is the builder for querying ConnectionBrand entities.
type ConnectionBrandQuery struct {
	config
	ctx                 *QueryContext
	order               []connectionbrand.OrderOption
	inters              []Interceptor
	predicates          []predicate.ConnectionBrand
	withConnection      *ConnectionQuery
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*ConnectionBrand) error
	withNamedConnection map[string]*ConnectionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConnectionBrandQuery builder.
func (cbq *ConnectionBrandQuery) Where(ps ...predicate.ConnectionBrand) *ConnectionBrandQuery {
	cbq.predicates = append(cbq.predicates, ps...)
	return cbq
}

// Limit the number of records to be returned by this query.
func (cbq *ConnectionBrandQuery) Limit(limit int) *ConnectionBrandQuery {
	cbq.ctx.Limit = &limit
	return cbq
}

// Offset to start from.
func (cbq *ConnectionBrandQuery) Offset(offset int) *ConnectionBrandQuery {
	cbq.ctx.Offset = &offset
	return cbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cbq *ConnectionBrandQuery) Unique(unique bool) *ConnectionBrandQuery {
	cbq.ctx.Unique = &unique
	return cbq
}

// Order specifies how the records should be ordered.
func (cbq *ConnectionBrandQuery) Order(o ...connectionbrand.OrderOption) *ConnectionBrandQuery {
	cbq.order = append(cbq.order, o...)
	return cbq
}

// QueryConnection chains the current query on the "connection" edge.
func (cbq *ConnectionBrandQuery) QueryConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: cbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionbrand.Table, connectionbrand.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connectionbrand.ConnectionTable, connectionbrand.ConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(cbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ConnectionBrand entity from the query.
// Returns a *NotFoundError when no ConnectionBrand was found.
func (cbq *ConnectionBrandQuery) First(ctx context.Context) (*ConnectionBrand, error) {
	nodes, err := cbq.Limit(1).All(setContextOp(ctx, cbq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{connectionbrand.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) FirstX(ctx context.Context) *ConnectionBrand {
	node, err := cbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ConnectionBrand ID from the query.
// Returns a *NotFoundError when no ConnectionBrand ID was found.
func (cbq *ConnectionBrandQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cbq.Limit(1).IDs(setContextOp(ctx, cbq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{connectionbrand.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := cbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ConnectionBrand entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ConnectionBrand entity is found.
// Returns a *NotFoundError when no ConnectionBrand entities are found.
func (cbq *ConnectionBrandQuery) Only(ctx context.Context) (*ConnectionBrand, error) {
	nodes, err := cbq.Limit(2).All(setContextOp(ctx, cbq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{connectionbrand.Label}
	default:
		return nil, &NotSingularError{connectionbrand.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) OnlyX(ctx context.Context) *ConnectionBrand {
	node, err := cbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ConnectionBrand ID in the query.
// Returns a *NotSingularError when more than one ConnectionBrand ID is found.
// Returns a *NotFoundError when no entities are found.
func (cbq *ConnectionBrandQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = cbq.Limit(2).IDs(setContextOp(ctx, cbq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{connectionbrand.Label}
	default:
		err = &NotSingularError{connectionbrand.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := cbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ConnectionBrands.
func (cbq *ConnectionBrandQuery) All(ctx context.Context) ([]*ConnectionBrand, error) {
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryAll)
	if err := cbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ConnectionBrand, *ConnectionBrandQuery]()
	return withInterceptors[[]*ConnectionBrand](ctx, cbq, qr, cbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) AllX(ctx context.Context) []*ConnectionBrand {
	nodes, err := cbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ConnectionBrand IDs.
func (cbq *ConnectionBrandQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if cbq.ctx.Unique == nil && cbq.path != nil {
		cbq.Unique(true)
	}
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryIDs)
	if err = cbq.Select(connectionbrand.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := cbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cbq *ConnectionBrandQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryCount)
	if err := cbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cbq, querierCount[*ConnectionBrandQuery](), cbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) CountX(ctx context.Context) int {
	count, err := cbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cbq *ConnectionBrandQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cbq.ctx, ent.OpQueryExist)
	switch _, err := cbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cbq *ConnectionBrandQuery) ExistX(ctx context.Context) bool {
	exist, err := cbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConnectionBrandQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cbq *ConnectionBrandQuery) Clone() *ConnectionBrandQuery {
	if cbq == nil {
		return nil
	}
	return &ConnectionBrandQuery{
		config:         cbq.config,
		ctx:            cbq.ctx.Clone(),
		order:          append([]connectionbrand.OrderOption{}, cbq.order...),
		inters:         append([]Interceptor{}, cbq.inters...),
		predicates:     append([]predicate.ConnectionBrand{}, cbq.predicates...),
		withConnection: cbq.withConnection.Clone(),
		// clone intermediate query.
		sql:  cbq.sql.Clone(),
		path: cbq.path,
	}
}

// WithConnection tells the query-builder to eager-load the nodes that are connected to
// the "connection" edge. The optional arguments are used to configure the query builder of the edge.
func (cbq *ConnectionBrandQuery) WithConnection(opts ...func(*ConnectionQuery)) *ConnectionBrandQuery {
	query := (&ConnectionClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cbq.withConnection = query
	return cbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ConnectionBrand.Query().
//		GroupBy(connectionbrand.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cbq *ConnectionBrandQuery) GroupBy(field string, fields ...string) *ConnectionBrandGroupBy {
	cbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConnectionBrandGroupBy{build: cbq}
	grbuild.flds = &cbq.ctx.Fields
	grbuild.label = connectionbrand.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.ConnectionBrand.Query().
//		Select(connectionbrand.FieldLabel).
//		Scan(ctx, &v)
func (cbq *ConnectionBrandQuery) Select(fields ...string) *ConnectionBrandSelect {
	cbq.ctx.Fields = append(cbq.ctx.Fields, fields...)
	sbuild := &ConnectionBrandSelect{ConnectionBrandQuery: cbq}
	sbuild.label = connectionbrand.Label
	sbuild.flds, sbuild.scan = &cbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConnectionBrandSelect configured with the given aggregations.
func (cbq *ConnectionBrandQuery) Aggregate(fns ...AggregateFunc) *ConnectionBrandSelect {
	return cbq.Select().Aggregate(fns...)
}

func (cbq *ConnectionBrandQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cbq); err != nil {
				return err
			}
		}
	}
	for _, f := range cbq.ctx.Fields {
		if !connectionbrand.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cbq.path != nil {
		prev, err := cbq.path(ctx)
		if err != nil {
			return err
		}
		cbq.sql = prev
	}
	if connectionbrand.Policy == nil {
		return errors.New("ent: uninitialized connectionbrand.Policy (forgotten import ent/runtime?)")
	}
	if err := connectionbrand.Policy.EvalQuery(ctx, cbq); err != nil {
		return err
	}
	return nil
}

func (cbq *ConnectionBrandQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ConnectionBrand, error) {
	var (
		nodes       = []*ConnectionBrand{}
		_spec       = cbq.querySpec()
		loadedTypes = [1]bool{
			cbq.withConnection != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ConnectionBrand).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ConnectionBrand{config: cbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cbq.modifiers) > 0 {
		_spec.Modifiers = cbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cbq.withConnection; query != nil {
		if err := cbq.loadConnection(ctx, query, nodes,
			func(n *ConnectionBrand) { n.Edges.Connection = []*Connection{} },
			func(n *ConnectionBrand, e *Connection) { n.Edges.Connection = append(n.Edges.Connection, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cbq.withNamedConnection {
		if err := cbq.loadConnection(ctx, query, nodes,
			func(n *ConnectionBrand) { n.appendNamedConnection(name) },
			func(n *ConnectionBrand, e *Connection) { n.appendNamedConnection(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cbq.loadTotal {
		if err := cbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cbq *ConnectionBrandQuery) loadConnection(ctx context.Context, query *ConnectionQuery, nodes []*ConnectionBrand, init func(*ConnectionBrand), assign func(*ConnectionBrand, *Connection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ConnectionBrand)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Connection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(connectionbrand.ConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_connection_brand
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_connection_brand" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_connection_brand" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cbq *ConnectionBrandQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cbq.querySpec()
	if len(cbq.modifiers) > 0 {
		_spec.Modifiers = cbq.modifiers
	}
	_spec.Node.Columns = cbq.ctx.Fields
	if len(cbq.ctx.Fields) > 0 {
		_spec.Unique = cbq.ctx.Unique != nil && *cbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cbq.driver, _spec)
}

func (cbq *ConnectionBrandQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(connectionbrand.Table, connectionbrand.Columns, sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString))
	_spec.From = cbq.sql
	if unique := cbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cbq.path != nil {
		_spec.Unique = true
	}
	if fields := cbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionbrand.FieldID)
		for i := range fields {
			if fields[i] != connectionbrand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cbq *ConnectionBrandQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cbq.driver.Dialect())
	t1 := builder.Table(connectionbrand.Table)
	columns := cbq.ctx.Fields
	if len(columns) == 0 {
		columns = connectionbrand.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cbq.sql != nil {
		selector = cbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cbq.ctx.Unique != nil && *cbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cbq.predicates {
		p(selector)
	}
	for _, p := range cbq.order {
		p(selector)
	}
	if offset := cbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedConnection tells the query-builder to eager-load the nodes that are connected to the "connection"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cbq *ConnectionBrandQuery) WithNamedConnection(name string, opts ...func(*ConnectionQuery)) *ConnectionBrandQuery {
	query := (&ConnectionClient{config: cbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cbq.withNamedConnection == nil {
		cbq.withNamedConnection = make(map[string]*ConnectionQuery)
	}
	cbq.withNamedConnection[name] = query
	return cbq
}

// ConnectionBrandGroupBy is the group-by builder for ConnectionBrand entities.
type ConnectionBrandGroupBy struct {
	selector
	build *ConnectionBrandQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cbgb *ConnectionBrandGroupBy) Aggregate(fns ...AggregateFunc) *ConnectionBrandGroupBy {
	cbgb.fns = append(cbgb.fns, fns...)
	return cbgb
}

// Scan applies the selector query and scans the result into the given value.
func (cbgb *ConnectionBrandGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cbgb.build.ctx, ent.OpQueryGroupBy)
	if err := cbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectionBrandQuery, *ConnectionBrandGroupBy](ctx, cbgb.build, cbgb, cbgb.build.inters, v)
}

func (cbgb *ConnectionBrandGroupBy) sqlScan(ctx context.Context, root *ConnectionBrandQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cbgb.fns))
	for _, fn := range cbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cbgb.flds)+len(cbgb.fns))
		for _, f := range *cbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConnectionBrandSelect is the builder for selecting fields of ConnectionBrand entities.
type ConnectionBrandSelect struct {
	*ConnectionBrandQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cbs *ConnectionBrandSelect) Aggregate(fns ...AggregateFunc) *ConnectionBrandSelect {
	cbs.fns = append(cbs.fns, fns...)
	return cbs
}

// Scan applies the selector query and scans the result into the given value.
func (cbs *ConnectionBrandSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cbs.ctx, ent.OpQuerySelect)
	if err := cbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectionBrandQuery, *ConnectionBrandSelect](ctx, cbs.ConnectionBrandQuery, cbs, cbs.inters, v)
}

func (cbs *ConnectionBrandSelect) sqlScan(ctx context.Context, root *ConnectionBrandQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cbs.fns))
	for _, fn := range cbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
