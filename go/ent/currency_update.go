// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CurrencyUpdate is the builder for updating Currency entities.
type CurrencyUpdate struct {
	config
	hooks    []Hook
	mutation *CurrencyMutation
}

// Where appends a list predicates to the CurrencyUpdate builder.
func (cu *CurrencyUpdate) Where(ps ...predicate.Currency) *CurrencyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDisplay sets the "display" field.
func (cu *CurrencyUpdate) SetDisplay(s string) *CurrencyUpdate {
	cu.mutation.SetDisplay(s)
	return cu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableDisplay(s *string) *CurrencyUpdate {
	if s != nil {
		cu.SetDisplay(*s)
	}
	return cu
}

// SetCurrencyCode sets the "currency_code" field.
func (cu *CurrencyUpdate) SetCurrencyCode(cc currency.CurrencyCode) *CurrencyUpdate {
	cu.mutation.SetCurrencyCode(cc)
	return cu
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (cu *CurrencyUpdate) SetNillableCurrencyCode(cc *currency.CurrencyCode) *CurrencyUpdate {
	if cc != nil {
		cu.SetCurrencyCode(*cc)
	}
	return cu
}

// AddOrderLineIDs adds the "order_line" edge to the OrderLine entity by IDs.
func (cu *CurrencyUpdate) AddOrderLineIDs(ids ...pulid.ID) *CurrencyUpdate {
	cu.mutation.AddOrderLineIDs(ids...)
	return cu
}

// AddOrderLine adds the "order_line" edges to the OrderLine entity.
func (cu *CurrencyUpdate) AddOrderLine(o ...*OrderLine) *CurrencyUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderLineIDs(ids...)
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (cu *CurrencyUpdate) AddDeliveryRuleIDs(ids ...pulid.ID) *CurrencyUpdate {
	cu.mutation.AddDeliveryRuleIDs(ids...)
	return cu
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (cu *CurrencyUpdate) AddDeliveryRule(d ...*DeliveryRule) *CurrencyUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeliveryRuleIDs(ids...)
}

// Mutation returns the CurrencyMutation object of the builder.
func (cu *CurrencyUpdate) Mutation() *CurrencyMutation {
	return cu.mutation
}

// ClearOrderLine clears all "order_line" edges to the OrderLine entity.
func (cu *CurrencyUpdate) ClearOrderLine() *CurrencyUpdate {
	cu.mutation.ClearOrderLine()
	return cu
}

// RemoveOrderLineIDs removes the "order_line" edge to OrderLine entities by IDs.
func (cu *CurrencyUpdate) RemoveOrderLineIDs(ids ...pulid.ID) *CurrencyUpdate {
	cu.mutation.RemoveOrderLineIDs(ids...)
	return cu
}

// RemoveOrderLine removes "order_line" edges to OrderLine entities.
func (cu *CurrencyUpdate) RemoveOrderLine(o ...*OrderLine) *CurrencyUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderLineIDs(ids...)
}

// ClearDeliveryRule clears all "delivery_rule" edges to the DeliveryRule entity.
func (cu *CurrencyUpdate) ClearDeliveryRule() *CurrencyUpdate {
	cu.mutation.ClearDeliveryRule()
	return cu
}

// RemoveDeliveryRuleIDs removes the "delivery_rule" edge to DeliveryRule entities by IDs.
func (cu *CurrencyUpdate) RemoveDeliveryRuleIDs(ids ...pulid.ID) *CurrencyUpdate {
	cu.mutation.RemoveDeliveryRuleIDs(ids...)
	return cu
}

// RemoveDeliveryRule removes "delivery_rule" edges to DeliveryRule entities.
func (cu *CurrencyUpdate) RemoveDeliveryRule(d ...*DeliveryRule) *CurrencyUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeliveryRuleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CurrencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CurrencyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CurrencyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CurrencyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CurrencyUpdate) check() error {
	if v, ok := cu.mutation.CurrencyCode(); ok {
		if err := currency.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Currency.currency_code": %w`, err)}
		}
	}
	return nil
}

func (cu *CurrencyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(currency.Table, currency.Columns, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Display(); ok {
		_spec.SetField(currency.FieldDisplay, field.TypeString, value)
	}
	if value, ok := cu.mutation.CurrencyCode(); ok {
		_spec.SetField(currency.FieldCurrencyCode, field.TypeEnum, value)
	}
	if cu.mutation.OrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrderLineIDs(); len(nodes) > 0 && !cu.mutation.OrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeliveryRuleIDs(); len(nodes) > 0 && !cu.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CurrencyUpdateOne is the builder for updating a single Currency entity.
type CurrencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CurrencyMutation
}

// SetDisplay sets the "display" field.
func (cuo *CurrencyUpdateOne) SetDisplay(s string) *CurrencyUpdateOne {
	cuo.mutation.SetDisplay(s)
	return cuo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableDisplay(s *string) *CurrencyUpdateOne {
	if s != nil {
		cuo.SetDisplay(*s)
	}
	return cuo
}

// SetCurrencyCode sets the "currency_code" field.
func (cuo *CurrencyUpdateOne) SetCurrencyCode(cc currency.CurrencyCode) *CurrencyUpdateOne {
	cuo.mutation.SetCurrencyCode(cc)
	return cuo
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (cuo *CurrencyUpdateOne) SetNillableCurrencyCode(cc *currency.CurrencyCode) *CurrencyUpdateOne {
	if cc != nil {
		cuo.SetCurrencyCode(*cc)
	}
	return cuo
}

// AddOrderLineIDs adds the "order_line" edge to the OrderLine entity by IDs.
func (cuo *CurrencyUpdateOne) AddOrderLineIDs(ids ...pulid.ID) *CurrencyUpdateOne {
	cuo.mutation.AddOrderLineIDs(ids...)
	return cuo
}

// AddOrderLine adds the "order_line" edges to the OrderLine entity.
func (cuo *CurrencyUpdateOne) AddOrderLine(o ...*OrderLine) *CurrencyUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderLineIDs(ids...)
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (cuo *CurrencyUpdateOne) AddDeliveryRuleIDs(ids ...pulid.ID) *CurrencyUpdateOne {
	cuo.mutation.AddDeliveryRuleIDs(ids...)
	return cuo
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (cuo *CurrencyUpdateOne) AddDeliveryRule(d ...*DeliveryRule) *CurrencyUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeliveryRuleIDs(ids...)
}

// Mutation returns the CurrencyMutation object of the builder.
func (cuo *CurrencyUpdateOne) Mutation() *CurrencyMutation {
	return cuo.mutation
}

// ClearOrderLine clears all "order_line" edges to the OrderLine entity.
func (cuo *CurrencyUpdateOne) ClearOrderLine() *CurrencyUpdateOne {
	cuo.mutation.ClearOrderLine()
	return cuo
}

// RemoveOrderLineIDs removes the "order_line" edge to OrderLine entities by IDs.
func (cuo *CurrencyUpdateOne) RemoveOrderLineIDs(ids ...pulid.ID) *CurrencyUpdateOne {
	cuo.mutation.RemoveOrderLineIDs(ids...)
	return cuo
}

// RemoveOrderLine removes "order_line" edges to OrderLine entities.
func (cuo *CurrencyUpdateOne) RemoveOrderLine(o ...*OrderLine) *CurrencyUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderLineIDs(ids...)
}

// ClearDeliveryRule clears all "delivery_rule" edges to the DeliveryRule entity.
func (cuo *CurrencyUpdateOne) ClearDeliveryRule() *CurrencyUpdateOne {
	cuo.mutation.ClearDeliveryRule()
	return cuo
}

// RemoveDeliveryRuleIDs removes the "delivery_rule" edge to DeliveryRule entities by IDs.
func (cuo *CurrencyUpdateOne) RemoveDeliveryRuleIDs(ids ...pulid.ID) *CurrencyUpdateOne {
	cuo.mutation.RemoveDeliveryRuleIDs(ids...)
	return cuo
}

// RemoveDeliveryRule removes "delivery_rule" edges to DeliveryRule entities.
func (cuo *CurrencyUpdateOne) RemoveDeliveryRule(d ...*DeliveryRule) *CurrencyUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeliveryRuleIDs(ids...)
}

// Where appends a list predicates to the CurrencyUpdate builder.
func (cuo *CurrencyUpdateOne) Where(ps ...predicate.Currency) *CurrencyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CurrencyUpdateOne) Select(field string, fields ...string) *CurrencyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Currency entity.
func (cuo *CurrencyUpdateOne) Save(ctx context.Context) (*Currency, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CurrencyUpdateOne) SaveX(ctx context.Context) *Currency {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CurrencyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CurrencyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CurrencyUpdateOne) check() error {
	if v, ok := cuo.mutation.CurrencyCode(); ok {
		if err := currency.CurrencyCodeValidator(v); err != nil {
			return &ValidationError{Name: "currency_code", err: fmt.Errorf(`ent: validator failed for field "Currency.currency_code": %w`, err)}
		}
	}
	return nil
}

func (cuo *CurrencyUpdateOne) sqlSave(ctx context.Context) (_node *Currency, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(currency.Table, currency.Columns, sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Currency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, currency.FieldID)
		for _, f := range fields {
			if !currency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != currency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Display(); ok {
		_spec.SetField(currency.FieldDisplay, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CurrencyCode(); ok {
		_spec.SetField(currency.FieldCurrencyCode, field.TypeEnum, value)
	}
	if cuo.mutation.OrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrderLineIDs(); len(nodes) > 0 && !cuo.mutation.OrderLineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderLineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeliveryRuleIDs(); len(nodes) > 0 && !cuo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Currency{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{currency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
