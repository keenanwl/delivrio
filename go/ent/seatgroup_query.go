// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupQuery is the builder for querying SeatGroup entities.
type SeatGroupQuery struct {
	config
	ctx                           *QueryContext
	order                         []seatgroup.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.SeatGroup
	withTenant                    *TenantQuery
	withUser                      *UserQuery
	withAssignedAccessRight       *AccessRightQuery
	withSeatGroupAccessRight      *SeatGroupAccessRightQuery
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*SeatGroup) error
	withNamedUser                 map[string]*UserQuery
	withNamedAssignedAccessRight  map[string]*AccessRightQuery
	withNamedSeatGroupAccessRight map[string]*SeatGroupAccessRightQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SeatGroupQuery builder.
func (sgq *SeatGroupQuery) Where(ps ...predicate.SeatGroup) *SeatGroupQuery {
	sgq.predicates = append(sgq.predicates, ps...)
	return sgq
}

// Limit the number of records to be returned by this query.
func (sgq *SeatGroupQuery) Limit(limit int) *SeatGroupQuery {
	sgq.ctx.Limit = &limit
	return sgq
}

// Offset to start from.
func (sgq *SeatGroupQuery) Offset(offset int) *SeatGroupQuery {
	sgq.ctx.Offset = &offset
	return sgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sgq *SeatGroupQuery) Unique(unique bool) *SeatGroupQuery {
	sgq.ctx.Unique = &unique
	return sgq
}

// Order specifies how the records should be ordered.
func (sgq *SeatGroupQuery) Order(o ...seatgroup.OrderOption) *SeatGroupQuery {
	sgq.order = append(sgq.order, o...)
	return sgq
}

// QueryTenant chains the current query on the "tenant" edge.
func (sgq *SeatGroupQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: sgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroup.TenantTable, seatgroup.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (sgq *SeatGroupQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: sgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, seatgroup.UserTable, seatgroup.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedAccessRight chains the current query on the "assigned_access_right" edge.
func (sgq *SeatGroupQuery) QueryAssignedAccessRight() *AccessRightQuery {
	query := (&AccessRightClient{config: sgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, selector),
			sqlgraph.To(accessright.Table, accessright.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, seatgroup.AssignedAccessRightTable, seatgroup.AssignedAccessRightPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySeatGroupAccessRight chains the current query on the "seat_group_access_right" edge.
func (sgq *SeatGroupQuery) QuerySeatGroupAccessRight() *SeatGroupAccessRightQuery {
	query := (&SeatGroupAccessRightClient{config: sgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, selector),
			sqlgraph.To(seatgroupaccessright.Table, seatgroupaccessright.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, seatgroup.SeatGroupAccessRightTable, seatgroup.SeatGroupAccessRightColumn),
		)
		fromU = sqlgraph.SetNeighbors(sgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SeatGroup entity from the query.
// Returns a *NotFoundError when no SeatGroup was found.
func (sgq *SeatGroupQuery) First(ctx context.Context) (*SeatGroup, error) {
	nodes, err := sgq.Limit(1).All(setContextOp(ctx, sgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{seatgroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sgq *SeatGroupQuery) FirstX(ctx context.Context) *SeatGroup {
	node, err := sgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SeatGroup ID from the query.
// Returns a *NotFoundError when no SeatGroup ID was found.
func (sgq *SeatGroupQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sgq.Limit(1).IDs(setContextOp(ctx, sgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{seatgroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sgq *SeatGroupQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := sgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SeatGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SeatGroup entity is found.
// Returns a *NotFoundError when no SeatGroup entities are found.
func (sgq *SeatGroupQuery) Only(ctx context.Context) (*SeatGroup, error) {
	nodes, err := sgq.Limit(2).All(setContextOp(ctx, sgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{seatgroup.Label}
	default:
		return nil, &NotSingularError{seatgroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sgq *SeatGroupQuery) OnlyX(ctx context.Context) *SeatGroup {
	node, err := sgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SeatGroup ID in the query.
// Returns a *NotSingularError when more than one SeatGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (sgq *SeatGroupQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = sgq.Limit(2).IDs(setContextOp(ctx, sgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{seatgroup.Label}
	default:
		err = &NotSingularError{seatgroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sgq *SeatGroupQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := sgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SeatGroups.
func (sgq *SeatGroupQuery) All(ctx context.Context) ([]*SeatGroup, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryAll)
	if err := sgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SeatGroup, *SeatGroupQuery]()
	return withInterceptors[[]*SeatGroup](ctx, sgq, qr, sgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sgq *SeatGroupQuery) AllX(ctx context.Context) []*SeatGroup {
	nodes, err := sgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SeatGroup IDs.
func (sgq *SeatGroupQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if sgq.ctx.Unique == nil && sgq.path != nil {
		sgq.Unique(true)
	}
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryIDs)
	if err = sgq.Select(seatgroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sgq *SeatGroupQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := sgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sgq *SeatGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryCount)
	if err := sgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sgq, querierCount[*SeatGroupQuery](), sgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sgq *SeatGroupQuery) CountX(ctx context.Context) int {
	count, err := sgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sgq *SeatGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryExist)
	switch _, err := sgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sgq *SeatGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := sgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SeatGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sgq *SeatGroupQuery) Clone() *SeatGroupQuery {
	if sgq == nil {
		return nil
	}
	return &SeatGroupQuery{
		config:                   sgq.config,
		ctx:                      sgq.ctx.Clone(),
		order:                    append([]seatgroup.OrderOption{}, sgq.order...),
		inters:                   append([]Interceptor{}, sgq.inters...),
		predicates:               append([]predicate.SeatGroup{}, sgq.predicates...),
		withTenant:               sgq.withTenant.Clone(),
		withUser:                 sgq.withUser.Clone(),
		withAssignedAccessRight:  sgq.withAssignedAccessRight.Clone(),
		withSeatGroupAccessRight: sgq.withSeatGroupAccessRight.Clone(),
		// clone intermediate query.
		sql:  sgq.sql.Clone(),
		path: sgq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithTenant(opts ...func(*TenantQuery)) *SeatGroupQuery {
	query := (&TenantClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgq.withTenant = query
	return sgq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithUser(opts ...func(*UserQuery)) *SeatGroupQuery {
	query := (&UserClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgq.withUser = query
	return sgq
}

// WithAssignedAccessRight tells the query-builder to eager-load the nodes that are connected to
// the "assigned_access_right" edge. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithAssignedAccessRight(opts ...func(*AccessRightQuery)) *SeatGroupQuery {
	query := (&AccessRightClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgq.withAssignedAccessRight = query
	return sgq
}

// WithSeatGroupAccessRight tells the query-builder to eager-load the nodes that are connected to
// the "seat_group_access_right" edge. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithSeatGroupAccessRight(opts ...func(*SeatGroupAccessRightQuery)) *SeatGroupQuery {
	query := (&SeatGroupAccessRightClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sgq.withSeatGroupAccessRight = query
	return sgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SeatGroup.Query().
//		GroupBy(seatgroup.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sgq *SeatGroupQuery) GroupBy(field string, fields ...string) *SeatGroupGroupBy {
	sgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SeatGroupGroupBy{build: sgq}
	grbuild.flds = &sgq.ctx.Fields
	grbuild.label = seatgroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.SeatGroup.Query().
//		Select(seatgroup.FieldTenantID).
//		Scan(ctx, &v)
func (sgq *SeatGroupQuery) Select(fields ...string) *SeatGroupSelect {
	sgq.ctx.Fields = append(sgq.ctx.Fields, fields...)
	sbuild := &SeatGroupSelect{SeatGroupQuery: sgq}
	sbuild.label = seatgroup.Label
	sbuild.flds, sbuild.scan = &sgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SeatGroupSelect configured with the given aggregations.
func (sgq *SeatGroupQuery) Aggregate(fns ...AggregateFunc) *SeatGroupSelect {
	return sgq.Select().Aggregate(fns...)
}

func (sgq *SeatGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sgq); err != nil {
				return err
			}
		}
	}
	for _, f := range sgq.ctx.Fields {
		if !seatgroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sgq.path != nil {
		prev, err := sgq.path(ctx)
		if err != nil {
			return err
		}
		sgq.sql = prev
	}
	if seatgroup.Policy == nil {
		return errors.New("ent: uninitialized seatgroup.Policy (forgotten import ent/runtime?)")
	}
	if err := seatgroup.Policy.EvalQuery(ctx, sgq); err != nil {
		return err
	}
	return nil
}

func (sgq *SeatGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SeatGroup, error) {
	var (
		nodes       = []*SeatGroup{}
		_spec       = sgq.querySpec()
		loadedTypes = [4]bool{
			sgq.withTenant != nil,
			sgq.withUser != nil,
			sgq.withAssignedAccessRight != nil,
			sgq.withSeatGroupAccessRight != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SeatGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SeatGroup{config: sgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sgq.modifiers) > 0 {
		_spec.Modifiers = sgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sgq.withTenant; query != nil {
		if err := sgq.loadTenant(ctx, query, nodes, nil,
			func(n *SeatGroup, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := sgq.withUser; query != nil {
		if err := sgq.loadUser(ctx, query, nodes,
			func(n *SeatGroup) { n.Edges.User = []*User{} },
			func(n *SeatGroup, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := sgq.withAssignedAccessRight; query != nil {
		if err := sgq.loadAssignedAccessRight(ctx, query, nodes,
			func(n *SeatGroup) { n.Edges.AssignedAccessRight = []*AccessRight{} },
			func(n *SeatGroup, e *AccessRight) {
				n.Edges.AssignedAccessRight = append(n.Edges.AssignedAccessRight, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sgq.withSeatGroupAccessRight; query != nil {
		if err := sgq.loadSeatGroupAccessRight(ctx, query, nodes,
			func(n *SeatGroup) { n.Edges.SeatGroupAccessRight = []*SeatGroupAccessRight{} },
			func(n *SeatGroup, e *SeatGroupAccessRight) {
				n.Edges.SeatGroupAccessRight = append(n.Edges.SeatGroupAccessRight, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range sgq.withNamedUser {
		if err := sgq.loadUser(ctx, query, nodes,
			func(n *SeatGroup) { n.appendNamedUser(name) },
			func(n *SeatGroup, e *User) { n.appendNamedUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sgq.withNamedAssignedAccessRight {
		if err := sgq.loadAssignedAccessRight(ctx, query, nodes,
			func(n *SeatGroup) { n.appendNamedAssignedAccessRight(name) },
			func(n *SeatGroup, e *AccessRight) { n.appendNamedAssignedAccessRight(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sgq.withNamedSeatGroupAccessRight {
		if err := sgq.loadSeatGroupAccessRight(ctx, query, nodes,
			func(n *SeatGroup) { n.appendNamedSeatGroupAccessRight(name) },
			func(n *SeatGroup, e *SeatGroupAccessRight) { n.appendNamedSeatGroupAccessRight(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sgq.loadTotal {
		if err := sgq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sgq *SeatGroupQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*SeatGroup, init func(*SeatGroup), assign func(*SeatGroup, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*SeatGroup)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sgq *SeatGroupQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*SeatGroup, init func(*SeatGroup), assign func(*SeatGroup, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*SeatGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(seatgroup.UserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.seat_group_user
		if fk == nil {
			return fmt.Errorf(`foreign-key "seat_group_user" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "seat_group_user" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sgq *SeatGroupQuery) loadAssignedAccessRight(ctx context.Context, query *AccessRightQuery, nodes []*SeatGroup, init func(*SeatGroup), assign func(*SeatGroup, *AccessRight)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*SeatGroup)
	nids := make(map[pulid.ID]map[*SeatGroup]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(seatgroup.AssignedAccessRightTable)
		s.Join(joinT).On(s.C(accessright.FieldID), joinT.C(seatgroup.AssignedAccessRightPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(seatgroup.AssignedAccessRightPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(seatgroup.AssignedAccessRightPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*SeatGroup]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*AccessRight](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assigned_access_right" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sgq *SeatGroupQuery) loadSeatGroupAccessRight(ctx context.Context, query *SeatGroupAccessRightQuery, nodes []*SeatGroup, init func(*SeatGroup), assign func(*SeatGroup, *SeatGroupAccessRight)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*SeatGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(seatgroupaccessright.FieldSeatGroupID)
	}
	query.Where(predicate.SeatGroupAccessRight(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(seatgroup.SeatGroupAccessRightColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SeatGroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "seat_group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sgq *SeatGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sgq.querySpec()
	if len(sgq.modifiers) > 0 {
		_spec.Modifiers = sgq.modifiers
	}
	_spec.Node.Columns = sgq.ctx.Fields
	if len(sgq.ctx.Fields) > 0 {
		_spec.Unique = sgq.ctx.Unique != nil && *sgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sgq.driver, _spec)
}

func (sgq *SeatGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(seatgroup.Table, seatgroup.Columns, sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString))
	_spec.From = sgq.sql
	if unique := sgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sgq.path != nil {
		_spec.Unique = true
	}
	if fields := sgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seatgroup.FieldID)
		for i := range fields {
			if fields[i] != seatgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sgq.withTenant != nil {
			_spec.Node.AddColumnOnce(seatgroup.FieldTenantID)
		}
	}
	if ps := sgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sgq *SeatGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sgq.driver.Dialect())
	t1 := builder.Table(seatgroup.Table)
	columns := sgq.ctx.Fields
	if len(columns) == 0 {
		columns = seatgroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sgq.sql != nil {
		selector = sgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sgq.ctx.Unique != nil && *sgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sgq.predicates {
		p(selector)
	}
	for _, p := range sgq.order {
		p(selector)
	}
	if offset := sgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedUser tells the query-builder to eager-load the nodes that are connected to the "user"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithNamedUser(name string, opts ...func(*UserQuery)) *SeatGroupQuery {
	query := (&UserClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sgq.withNamedUser == nil {
		sgq.withNamedUser = make(map[string]*UserQuery)
	}
	sgq.withNamedUser[name] = query
	return sgq
}

// WithNamedAssignedAccessRight tells the query-builder to eager-load the nodes that are connected to the "assigned_access_right"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithNamedAssignedAccessRight(name string, opts ...func(*AccessRightQuery)) *SeatGroupQuery {
	query := (&AccessRightClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sgq.withNamedAssignedAccessRight == nil {
		sgq.withNamedAssignedAccessRight = make(map[string]*AccessRightQuery)
	}
	sgq.withNamedAssignedAccessRight[name] = query
	return sgq
}

// WithNamedSeatGroupAccessRight tells the query-builder to eager-load the nodes that are connected to the "seat_group_access_right"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sgq *SeatGroupQuery) WithNamedSeatGroupAccessRight(name string, opts ...func(*SeatGroupAccessRightQuery)) *SeatGroupQuery {
	query := (&SeatGroupAccessRightClient{config: sgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sgq.withNamedSeatGroupAccessRight == nil {
		sgq.withNamedSeatGroupAccessRight = make(map[string]*SeatGroupAccessRightQuery)
	}
	sgq.withNamedSeatGroupAccessRight[name] = query
	return sgq
}

// SeatGroupGroupBy is the group-by builder for SeatGroup entities.
type SeatGroupGroupBy struct {
	selector
	build *SeatGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sggb *SeatGroupGroupBy) Aggregate(fns ...AggregateFunc) *SeatGroupGroupBy {
	sggb.fns = append(sggb.fns, fns...)
	return sggb
}

// Scan applies the selector query and scans the result into the given value.
func (sggb *SeatGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sggb.build.ctx, ent.OpQueryGroupBy)
	if err := sggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SeatGroupQuery, *SeatGroupGroupBy](ctx, sggb.build, sggb, sggb.build.inters, v)
}

func (sggb *SeatGroupGroupBy) sqlScan(ctx context.Context, root *SeatGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sggb.fns))
	for _, fn := range sggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sggb.flds)+len(sggb.fns))
		for _, f := range *sggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SeatGroupSelect is the builder for selecting fields of SeatGroup entities.
type SeatGroupSelect struct {
	*SeatGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sgs *SeatGroupSelect) Aggregate(fns ...AggregateFunc) *SeatGroupSelect {
	sgs.fns = append(sgs.fns, fns...)
	return sgs
}

// Scan applies the selector query and scans the result into the given value.
func (sgs *SeatGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgs.ctx, ent.OpQuerySelect)
	if err := sgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SeatGroupQuery, *SeatGroupSelect](ctx, sgs.SeatGroupQuery, sgs, sgs.inters, v)
}

func (sgs *SeatGroupSelect) sqlScan(ctx context.Context, root *SeatGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sgs.fns))
	for _, fn := range sgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
