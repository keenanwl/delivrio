// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionUpdate is the builder for updating DeliveryOption entities.
type DeliveryOptionUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionMutation
}

// Where appends a list predicates to the DeliveryOptionUpdate builder.
func (dou *DeliveryOptionUpdate) Where(ps ...predicate.DeliveryOption) *DeliveryOptionUpdate {
	dou.mutation.Where(ps...)
	return dou
}

// SetTenantID sets the "tenant_id" field.
func (dou *DeliveryOptionUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetTenantID(pu)
	return dou
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionUpdate {
	if pu != nil {
		dou.SetTenantID(*pu)
	}
	return dou
}

// SetArchivedAt sets the "archived_at" field.
func (dou *DeliveryOptionUpdate) SetArchivedAt(t time.Time) *DeliveryOptionUpdate {
	dou.mutation.SetArchivedAt(t)
	return dou
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableArchivedAt(t *time.Time) *DeliveryOptionUpdate {
	if t != nil {
		dou.SetArchivedAt(*t)
	}
	return dou
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (dou *DeliveryOptionUpdate) ClearArchivedAt() *DeliveryOptionUpdate {
	dou.mutation.ClearArchivedAt()
	return dou
}

// SetName sets the "name" field.
func (dou *DeliveryOptionUpdate) SetName(s string) *DeliveryOptionUpdate {
	dou.mutation.SetName(s)
	return dou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableName(s *string) *DeliveryOptionUpdate {
	if s != nil {
		dou.SetName(*s)
	}
	return dou
}

// SetSortOrder sets the "sort_order" field.
func (dou *DeliveryOptionUpdate) SetSortOrder(i int) *DeliveryOptionUpdate {
	dou.mutation.ResetSortOrder()
	dou.mutation.SetSortOrder(i)
	return dou
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableSortOrder(i *int) *DeliveryOptionUpdate {
	if i != nil {
		dou.SetSortOrder(*i)
	}
	return dou
}

// AddSortOrder adds i to the "sort_order" field.
func (dou *DeliveryOptionUpdate) AddSortOrder(i int) *DeliveryOptionUpdate {
	dou.mutation.AddSortOrder(i)
	return dou
}

// SetClickOptionDisplayCount sets the "click_option_display_count" field.
func (dou *DeliveryOptionUpdate) SetClickOptionDisplayCount(i int) *DeliveryOptionUpdate {
	dou.mutation.ResetClickOptionDisplayCount()
	dou.mutation.SetClickOptionDisplayCount(i)
	return dou
}

// SetNillableClickOptionDisplayCount sets the "click_option_display_count" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableClickOptionDisplayCount(i *int) *DeliveryOptionUpdate {
	if i != nil {
		dou.SetClickOptionDisplayCount(*i)
	}
	return dou
}

// AddClickOptionDisplayCount adds i to the "click_option_display_count" field.
func (dou *DeliveryOptionUpdate) AddClickOptionDisplayCount(i int) *DeliveryOptionUpdate {
	dou.mutation.AddClickOptionDisplayCount(i)
	return dou
}

// ClearClickOptionDisplayCount clears the value of the "click_option_display_count" field.
func (dou *DeliveryOptionUpdate) ClearClickOptionDisplayCount() *DeliveryOptionUpdate {
	dou.mutation.ClearClickOptionDisplayCount()
	return dou
}

// SetDescription sets the "description" field.
func (dou *DeliveryOptionUpdate) SetDescription(s string) *DeliveryOptionUpdate {
	dou.mutation.SetDescription(s)
	return dou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDescription(s *string) *DeliveryOptionUpdate {
	if s != nil {
		dou.SetDescription(*s)
	}
	return dou
}

// ClearDescription clears the value of the "description" field.
func (dou *DeliveryOptionUpdate) ClearDescription() *DeliveryOptionUpdate {
	dou.mutation.ClearDescription()
	return dou
}

// SetClickCollect sets the "click_collect" field.
func (dou *DeliveryOptionUpdate) SetClickCollect(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetClickCollect(b)
	return dou
}

// SetNillableClickCollect sets the "click_collect" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableClickCollect(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetClickCollect(*b)
	}
	return dou
}

// ClearClickCollect clears the value of the "click_collect" field.
func (dou *DeliveryOptionUpdate) ClearClickCollect() *DeliveryOptionUpdate {
	dou.mutation.ClearClickCollect()
	return dou
}

// SetOverrideSenderAddress sets the "override_sender_address" field.
func (dou *DeliveryOptionUpdate) SetOverrideSenderAddress(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetOverrideSenderAddress(b)
	return dou
}

// SetNillableOverrideSenderAddress sets the "override_sender_address" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableOverrideSenderAddress(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetOverrideSenderAddress(*b)
	}
	return dou
}

// ClearOverrideSenderAddress clears the value of the "override_sender_address" field.
func (dou *DeliveryOptionUpdate) ClearOverrideSenderAddress() *DeliveryOptionUpdate {
	dou.mutation.ClearOverrideSenderAddress()
	return dou
}

// SetOverrideReturnAddress sets the "override_return_address" field.
func (dou *DeliveryOptionUpdate) SetOverrideReturnAddress(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetOverrideReturnAddress(b)
	return dou
}

// SetNillableOverrideReturnAddress sets the "override_return_address" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableOverrideReturnAddress(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetOverrideReturnAddress(*b)
	}
	return dou
}

// ClearOverrideReturnAddress clears the value of the "override_return_address" field.
func (dou *DeliveryOptionUpdate) ClearOverrideReturnAddress() *DeliveryOptionUpdate {
	dou.mutation.ClearOverrideReturnAddress()
	return dou
}

// SetHideDeliveryOption sets the "hide_delivery_option" field.
func (dou *DeliveryOptionUpdate) SetHideDeliveryOption(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetHideDeliveryOption(b)
	return dou
}

// SetNillableHideDeliveryOption sets the "hide_delivery_option" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableHideDeliveryOption(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetHideDeliveryOption(*b)
	}
	return dou
}

// ClearHideDeliveryOption clears the value of the "hide_delivery_option" field.
func (dou *DeliveryOptionUpdate) ClearHideDeliveryOption() *DeliveryOptionUpdate {
	dou.mutation.ClearHideDeliveryOption()
	return dou
}

// SetDeliveryEstimateFrom sets the "delivery_estimate_from" field.
func (dou *DeliveryOptionUpdate) SetDeliveryEstimateFrom(i int) *DeliveryOptionUpdate {
	dou.mutation.ResetDeliveryEstimateFrom()
	dou.mutation.SetDeliveryEstimateFrom(i)
	return dou
}

// SetNillableDeliveryEstimateFrom sets the "delivery_estimate_from" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryEstimateFrom(i *int) *DeliveryOptionUpdate {
	if i != nil {
		dou.SetDeliveryEstimateFrom(*i)
	}
	return dou
}

// AddDeliveryEstimateFrom adds i to the "delivery_estimate_from" field.
func (dou *DeliveryOptionUpdate) AddDeliveryEstimateFrom(i int) *DeliveryOptionUpdate {
	dou.mutation.AddDeliveryEstimateFrom(i)
	return dou
}

// ClearDeliveryEstimateFrom clears the value of the "delivery_estimate_from" field.
func (dou *DeliveryOptionUpdate) ClearDeliveryEstimateFrom() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryEstimateFrom()
	return dou
}

// SetDeliveryEstimateTo sets the "delivery_estimate_to" field.
func (dou *DeliveryOptionUpdate) SetDeliveryEstimateTo(i int) *DeliveryOptionUpdate {
	dou.mutation.ResetDeliveryEstimateTo()
	dou.mutation.SetDeliveryEstimateTo(i)
	return dou
}

// SetNillableDeliveryEstimateTo sets the "delivery_estimate_to" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryEstimateTo(i *int) *DeliveryOptionUpdate {
	if i != nil {
		dou.SetDeliveryEstimateTo(*i)
	}
	return dou
}

// AddDeliveryEstimateTo adds i to the "delivery_estimate_to" field.
func (dou *DeliveryOptionUpdate) AddDeliveryEstimateTo(i int) *DeliveryOptionUpdate {
	dou.mutation.AddDeliveryEstimateTo(i)
	return dou
}

// ClearDeliveryEstimateTo clears the value of the "delivery_estimate_to" field.
func (dou *DeliveryOptionUpdate) ClearDeliveryEstimateTo() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryEstimateTo()
	return dou
}

// SetWebshipperIntegration sets the "webshipper_integration" field.
func (dou *DeliveryOptionUpdate) SetWebshipperIntegration(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetWebshipperIntegration(b)
	return dou
}

// SetNillableWebshipperIntegration sets the "webshipper_integration" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableWebshipperIntegration(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetWebshipperIntegration(*b)
	}
	return dou
}

// SetWebshipperID sets the "webshipper_id" field.
func (dou *DeliveryOptionUpdate) SetWebshipperID(i int) *DeliveryOptionUpdate {
	dou.mutation.ResetWebshipperID()
	dou.mutation.SetWebshipperID(i)
	return dou
}

// SetNillableWebshipperID sets the "webshipper_id" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableWebshipperID(i *int) *DeliveryOptionUpdate {
	if i != nil {
		dou.SetWebshipperID(*i)
	}
	return dou
}

// AddWebshipperID adds i to the "webshipper_id" field.
func (dou *DeliveryOptionUpdate) AddWebshipperID(i int) *DeliveryOptionUpdate {
	dou.mutation.AddWebshipperID(i)
	return dou
}

// ClearWebshipperID clears the value of the "webshipper_id" field.
func (dou *DeliveryOptionUpdate) ClearWebshipperID() *DeliveryOptionUpdate {
	dou.mutation.ClearWebshipperID()
	return dou
}

// SetShipmondoIntegration sets the "shipmondo_integration" field.
func (dou *DeliveryOptionUpdate) SetShipmondoIntegration(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetShipmondoIntegration(b)
	return dou
}

// SetNillableShipmondoIntegration sets the "shipmondo_integration" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableShipmondoIntegration(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetShipmondoIntegration(*b)
	}
	return dou
}

// SetShipmondoDeliveryOption sets the "shipmondo_delivery_option" field.
func (dou *DeliveryOptionUpdate) SetShipmondoDeliveryOption(s string) *DeliveryOptionUpdate {
	dou.mutation.SetShipmondoDeliveryOption(s)
	return dou
}

// SetNillableShipmondoDeliveryOption sets the "shipmondo_delivery_option" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableShipmondoDeliveryOption(s *string) *DeliveryOptionUpdate {
	if s != nil {
		dou.SetShipmondoDeliveryOption(*s)
	}
	return dou
}

// ClearShipmondoDeliveryOption clears the value of the "shipmondo_delivery_option" field.
func (dou *DeliveryOptionUpdate) ClearShipmondoDeliveryOption() *DeliveryOptionUpdate {
	dou.mutation.ClearShipmondoDeliveryOption()
	return dou
}

// SetCustomsEnabled sets the "customs_enabled" field.
func (dou *DeliveryOptionUpdate) SetCustomsEnabled(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetCustomsEnabled(b)
	return dou
}

// SetNillableCustomsEnabled sets the "customs_enabled" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableCustomsEnabled(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetCustomsEnabled(*b)
	}
	return dou
}

// SetCustomsSigner sets the "customs_signer" field.
func (dou *DeliveryOptionUpdate) SetCustomsSigner(s string) *DeliveryOptionUpdate {
	dou.mutation.SetCustomsSigner(s)
	return dou
}

// SetNillableCustomsSigner sets the "customs_signer" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableCustomsSigner(s *string) *DeliveryOptionUpdate {
	if s != nil {
		dou.SetCustomsSigner(*s)
	}
	return dou
}

// ClearCustomsSigner clears the value of the "customs_signer" field.
func (dou *DeliveryOptionUpdate) ClearCustomsSigner() *DeliveryOptionUpdate {
	dou.mutation.ClearCustomsSigner()
	return dou
}

// SetHideIfCompanyEmpty sets the "hide_if_company_empty" field.
func (dou *DeliveryOptionUpdate) SetHideIfCompanyEmpty(b bool) *DeliveryOptionUpdate {
	dou.mutation.SetHideIfCompanyEmpty(b)
	return dou
}

// SetNillableHideIfCompanyEmpty sets the "hide_if_company_empty" field if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableHideIfCompanyEmpty(b *bool) *DeliveryOptionUpdate {
	if b != nil {
		dou.SetHideIfCompanyEmpty(*b)
	}
	return dou
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dou *DeliveryOptionUpdate) SetTenant(t *Tenant) *DeliveryOptionUpdate {
	return dou.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (dou *DeliveryOptionUpdate) SetCarrierID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetCarrierID(id)
	return dou
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (dou *DeliveryOptionUpdate) SetCarrier(c *Carrier) *DeliveryOptionUpdate {
	return dou.SetCarrierID(c.ID)
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (dou *DeliveryOptionUpdate) AddDeliveryRuleIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddDeliveryRuleIDs(ids...)
	return dou
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (dou *DeliveryOptionUpdate) AddDeliveryRule(d ...*DeliveryRule) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dou.AddDeliveryRuleIDs(ids...)
}

// SetDeliveryOptionDAOID sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionDAOID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionDAOID(id)
	return dou
}

// SetNillableDeliveryOptionDAOID sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionDAOID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionDAOID(*id)
	}
	return dou
}

// SetDeliveryOptionDAO sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionDAO(d *DeliveryOptionDAO) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionDAOID(d.ID)
}

// SetDeliveryOptionDFID sets the "delivery_option_df" edge to the DeliveryOptionDF entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionDFID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionDFID(id)
	return dou
}

// SetNillableDeliveryOptionDFID sets the "delivery_option_df" edge to the DeliveryOptionDF entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionDFID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionDFID(*id)
	}
	return dou
}

// SetDeliveryOptionDF sets the "delivery_option_df" edge to the DeliveryOptionDF entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionDF(d *DeliveryOptionDF) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionDFID(d.ID)
}

// SetDeliveryOptionDSVID sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionDSVID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionDSVID(id)
	return dou
}

// SetNillableDeliveryOptionDSVID sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionDSVID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionDSVID(*id)
	}
	return dou
}

// SetDeliveryOptionDSV sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionDSV(d *DeliveryOptionDSV) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionDSVID(d.ID)
}

// SetDeliveryOptionEasyPostID sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionEasyPostID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionEasyPostID(id)
	return dou
}

// SetNillableDeliveryOptionEasyPostID sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionEasyPostID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionEasyPostID(*id)
	}
	return dou
}

// SetDeliveryOptionEasyPost sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionEasyPost(d *DeliveryOptionEasyPost) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionEasyPostID(d.ID)
}

// SetDeliveryOptionGLSID sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionGLSID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionGLSID(id)
	return dou
}

// SetNillableDeliveryOptionGLSID sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionGLSID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionGLSID(*id)
	}
	return dou
}

// SetDeliveryOptionGLS sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionGLS(d *DeliveryOptionGLS) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionGLSID(d.ID)
}

// SetDeliveryOptionPostNordID sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionPostNordID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionPostNordID(id)
	return dou
}

// SetNillableDeliveryOptionPostNordID sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionPostNordID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionPostNordID(*id)
	}
	return dou
}

// SetDeliveryOptionPostNord sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionPostNord(d *DeliveryOptionPostNord) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionPostNordID(d.ID)
}

// SetDeliveryOptionUSPSID sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionUSPSID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionUSPSID(id)
	return dou
}

// SetNillableDeliveryOptionUSPSID sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionUSPSID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionUSPSID(*id)
	}
	return dou
}

// SetDeliveryOptionUSPS sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionUSPS(d *DeliveryOptionUSPS) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionUSPSID(d.ID)
}

// SetDeliveryOptionBringID sets the "delivery_option_bring" edge to the DeliveryOptionBring entity by ID.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionBringID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDeliveryOptionBringID(id)
	return dou
}

// SetNillableDeliveryOptionBringID sets the "delivery_option_bring" edge to the DeliveryOptionBring entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDeliveryOptionBringID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDeliveryOptionBringID(*id)
	}
	return dou
}

// SetDeliveryOptionBring sets the "delivery_option_bring" edge to the DeliveryOptionBring entity.
func (dou *DeliveryOptionUpdate) SetDeliveryOptionBring(d *DeliveryOptionBring) *DeliveryOptionUpdate {
	return dou.SetDeliveryOptionBringID(d.ID)
}

// AddReturnPortalIDs adds the "return_portals" edge to the ReturnPortal entity by IDs.
func (dou *DeliveryOptionUpdate) AddReturnPortalIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddReturnPortalIDs(ids...)
	return dou
}

// AddReturnPortals adds the "return_portals" edges to the ReturnPortal entity.
func (dou *DeliveryOptionUpdate) AddReturnPortals(r ...*ReturnPortal) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dou.AddReturnPortalIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (dou *DeliveryOptionUpdate) AddColliIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddColliIDs(ids...)
	return dou
}

// AddColli adds the "colli" edges to the Colli entity.
func (dou *DeliveryOptionUpdate) AddColli(c ...*Colli) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dou.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (dou *DeliveryOptionUpdate) AddReturnColliIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddReturnColliIDs(ids...)
	return dou
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (dou *DeliveryOptionUpdate) AddReturnColli(r ...*ReturnColli) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dou.AddReturnColliIDs(ids...)
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (dou *DeliveryOptionUpdate) SetCarrierServiceID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetCarrierServiceID(id)
	return dou
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (dou *DeliveryOptionUpdate) SetCarrierService(c *CarrierService) *DeliveryOptionUpdate {
	return dou.SetCarrierServiceID(c.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (dou *DeliveryOptionUpdate) SetConnectionID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetConnectionID(id)
	return dou
}

// SetConnection sets the "connection" edge to the Connection entity.
func (dou *DeliveryOptionUpdate) SetConnection(c *Connection) *DeliveryOptionUpdate {
	return dou.SetConnectionID(c.ID)
}

// SetConnectionDefaultID sets the "connection_default" edge to the Connection entity by ID.
func (dou *DeliveryOptionUpdate) SetConnectionDefaultID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetConnectionDefaultID(id)
	return dou
}

// SetNillableConnectionDefaultID sets the "connection_default" edge to the Connection entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableConnectionDefaultID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetConnectionDefaultID(*id)
	}
	return dou
}

// SetConnectionDefault sets the "connection_default" edge to the Connection entity.
func (dou *DeliveryOptionUpdate) SetConnectionDefault(c *Connection) *DeliveryOptionUpdate {
	return dou.SetConnectionDefaultID(c.ID)
}

// AddHypothesisTestDeliveryOptionGroupOneIDs adds the "hypothesis_test_delivery_option_group_one" edge to the HypothesisTestDeliveryOption entity by IDs.
func (dou *DeliveryOptionUpdate) AddHypothesisTestDeliveryOptionGroupOneIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddHypothesisTestDeliveryOptionGroupOneIDs(ids...)
	return dou
}

// AddHypothesisTestDeliveryOptionGroupOne adds the "hypothesis_test_delivery_option_group_one" edges to the HypothesisTestDeliveryOption entity.
func (dou *DeliveryOptionUpdate) AddHypothesisTestDeliveryOptionGroupOne(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dou.AddHypothesisTestDeliveryOptionGroupOneIDs(ids...)
}

// AddHypothesisTestDeliveryOptionGroupTwoIDs adds the "hypothesis_test_delivery_option_group_two" edge to the HypothesisTestDeliveryOption entity by IDs.
func (dou *DeliveryOptionUpdate) AddHypothesisTestDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
	return dou
}

// AddHypothesisTestDeliveryOptionGroupTwo adds the "hypothesis_test_delivery_option_group_two" edges to the HypothesisTestDeliveryOption entity.
func (dou *DeliveryOptionUpdate) AddHypothesisTestDeliveryOptionGroupTwo(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dou.AddHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
}

// AddHypothesisTestDeliveryOptionLookupIDs adds the "hypothesis_test_delivery_option_lookup" edge to the HypothesisTestDeliveryOptionLookup entity by IDs.
func (dou *DeliveryOptionUpdate) AddHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
	return dou
}

// AddHypothesisTestDeliveryOptionLookup adds the "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (dou *DeliveryOptionUpdate) AddHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dou.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// AddClickCollectLocationIDs adds the "click_collect_location" edge to the Location entity by IDs.
func (dou *DeliveryOptionUpdate) AddClickCollectLocationIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddClickCollectLocationIDs(ids...)
	return dou
}

// AddClickCollectLocation adds the "click_collect_location" edges to the Location entity.
func (dou *DeliveryOptionUpdate) AddClickCollectLocation(l ...*Location) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return dou.AddClickCollectLocationIDs(ids...)
}

// SetEmailClickCollectAtStoreID sets the "email_click_collect_at_store" edge to the EmailTemplate entity by ID.
func (dou *DeliveryOptionUpdate) SetEmailClickCollectAtStoreID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetEmailClickCollectAtStoreID(id)
	return dou
}

// SetNillableEmailClickCollectAtStoreID sets the "email_click_collect_at_store" edge to the EmailTemplate entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableEmailClickCollectAtStoreID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetEmailClickCollectAtStoreID(*id)
	}
	return dou
}

// SetEmailClickCollectAtStore sets the "email_click_collect_at_store" edge to the EmailTemplate entity.
func (dou *DeliveryOptionUpdate) SetEmailClickCollectAtStore(e *EmailTemplate) *DeliveryOptionUpdate {
	return dou.SetEmailClickCollectAtStoreID(e.ID)
}

// AddConsolidationIDs adds the "consolidation" edge to the Consolidation entity by IDs.
func (dou *DeliveryOptionUpdate) AddConsolidationIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.AddConsolidationIDs(ids...)
	return dou
}

// AddConsolidation adds the "consolidation" edges to the Consolidation entity.
func (dou *DeliveryOptionUpdate) AddConsolidation(c ...*Consolidation) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dou.AddConsolidationIDs(ids...)
}

// SetDefaultPackagingID sets the "default_packaging" edge to the Packaging entity by ID.
func (dou *DeliveryOptionUpdate) SetDefaultPackagingID(id pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.SetDefaultPackagingID(id)
	return dou
}

// SetNillableDefaultPackagingID sets the "default_packaging" edge to the Packaging entity by ID if the given value is not nil.
func (dou *DeliveryOptionUpdate) SetNillableDefaultPackagingID(id *pulid.ID) *DeliveryOptionUpdate {
	if id != nil {
		dou = dou.SetDefaultPackagingID(*id)
	}
	return dou
}

// SetDefaultPackaging sets the "default_packaging" edge to the Packaging entity.
func (dou *DeliveryOptionUpdate) SetDefaultPackaging(p *Packaging) *DeliveryOptionUpdate {
	return dou.SetDefaultPackagingID(p.ID)
}

// Mutation returns the DeliveryOptionMutation object of the builder.
func (dou *DeliveryOptionUpdate) Mutation() *DeliveryOptionMutation {
	return dou.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dou *DeliveryOptionUpdate) ClearTenant() *DeliveryOptionUpdate {
	dou.mutation.ClearTenant()
	return dou
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (dou *DeliveryOptionUpdate) ClearCarrier() *DeliveryOptionUpdate {
	dou.mutation.ClearCarrier()
	return dou
}

// ClearDeliveryRule clears all "delivery_rule" edges to the DeliveryRule entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryRule() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryRule()
	return dou
}

// RemoveDeliveryRuleIDs removes the "delivery_rule" edge to DeliveryRule entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveDeliveryRuleIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveDeliveryRuleIDs(ids...)
	return dou
}

// RemoveDeliveryRule removes "delivery_rule" edges to DeliveryRule entities.
func (dou *DeliveryOptionUpdate) RemoveDeliveryRule(d ...*DeliveryRule) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dou.RemoveDeliveryRuleIDs(ids...)
}

// ClearDeliveryOptionDAO clears the "delivery_option_dao" edge to the DeliveryOptionDAO entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionDAO() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionDAO()
	return dou
}

// ClearDeliveryOptionDF clears the "delivery_option_df" edge to the DeliveryOptionDF entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionDF() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionDF()
	return dou
}

// ClearDeliveryOptionDSV clears the "delivery_option_dsv" edge to the DeliveryOptionDSV entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionDSV() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionDSV()
	return dou
}

// ClearDeliveryOptionEasyPost clears the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionEasyPost() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionEasyPost()
	return dou
}

// ClearDeliveryOptionGLS clears the "delivery_option_gls" edge to the DeliveryOptionGLS entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionGLS() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionGLS()
	return dou
}

// ClearDeliveryOptionPostNord clears the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionPostNord() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionPostNord()
	return dou
}

// ClearDeliveryOptionUSPS clears the "delivery_option_usps" edge to the DeliveryOptionUSPS entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionUSPS() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionUSPS()
	return dou
}

// ClearDeliveryOptionBring clears the "delivery_option_bring" edge to the DeliveryOptionBring entity.
func (dou *DeliveryOptionUpdate) ClearDeliveryOptionBring() *DeliveryOptionUpdate {
	dou.mutation.ClearDeliveryOptionBring()
	return dou
}

// ClearReturnPortals clears all "return_portals" edges to the ReturnPortal entity.
func (dou *DeliveryOptionUpdate) ClearReturnPortals() *DeliveryOptionUpdate {
	dou.mutation.ClearReturnPortals()
	return dou
}

// RemoveReturnPortalIDs removes the "return_portals" edge to ReturnPortal entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveReturnPortalIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveReturnPortalIDs(ids...)
	return dou
}

// RemoveReturnPortals removes "return_portals" edges to ReturnPortal entities.
func (dou *DeliveryOptionUpdate) RemoveReturnPortals(r ...*ReturnPortal) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dou.RemoveReturnPortalIDs(ids...)
}

// ClearColli clears all "colli" edges to the Colli entity.
func (dou *DeliveryOptionUpdate) ClearColli() *DeliveryOptionUpdate {
	dou.mutation.ClearColli()
	return dou
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveColliIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveColliIDs(ids...)
	return dou
}

// RemoveColli removes "colli" edges to Colli entities.
func (dou *DeliveryOptionUpdate) RemoveColli(c ...*Colli) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dou.RemoveColliIDs(ids...)
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (dou *DeliveryOptionUpdate) ClearReturnColli() *DeliveryOptionUpdate {
	dou.mutation.ClearReturnColli()
	return dou
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveReturnColliIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveReturnColliIDs(ids...)
	return dou
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (dou *DeliveryOptionUpdate) RemoveReturnColli(r ...*ReturnColli) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return dou.RemoveReturnColliIDs(ids...)
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (dou *DeliveryOptionUpdate) ClearCarrierService() *DeliveryOptionUpdate {
	dou.mutation.ClearCarrierService()
	return dou
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (dou *DeliveryOptionUpdate) ClearConnection() *DeliveryOptionUpdate {
	dou.mutation.ClearConnection()
	return dou
}

// ClearConnectionDefault clears the "connection_default" edge to the Connection entity.
func (dou *DeliveryOptionUpdate) ClearConnectionDefault() *DeliveryOptionUpdate {
	dou.mutation.ClearConnectionDefault()
	return dou
}

// ClearHypothesisTestDeliveryOptionGroupOne clears all "hypothesis_test_delivery_option_group_one" edges to the HypothesisTestDeliveryOption entity.
func (dou *DeliveryOptionUpdate) ClearHypothesisTestDeliveryOptionGroupOne() *DeliveryOptionUpdate {
	dou.mutation.ClearHypothesisTestDeliveryOptionGroupOne()
	return dou
}

// RemoveHypothesisTestDeliveryOptionGroupOneIDs removes the "hypothesis_test_delivery_option_group_one" edge to HypothesisTestDeliveryOption entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionGroupOneIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveHypothesisTestDeliveryOptionGroupOneIDs(ids...)
	return dou
}

// RemoveHypothesisTestDeliveryOptionGroupOne removes "hypothesis_test_delivery_option_group_one" edges to HypothesisTestDeliveryOption entities.
func (dou *DeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionGroupOne(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dou.RemoveHypothesisTestDeliveryOptionGroupOneIDs(ids...)
}

// ClearHypothesisTestDeliveryOptionGroupTwo clears all "hypothesis_test_delivery_option_group_two" edges to the HypothesisTestDeliveryOption entity.
func (dou *DeliveryOptionUpdate) ClearHypothesisTestDeliveryOptionGroupTwo() *DeliveryOptionUpdate {
	dou.mutation.ClearHypothesisTestDeliveryOptionGroupTwo()
	return dou
}

// RemoveHypothesisTestDeliveryOptionGroupTwoIDs removes the "hypothesis_test_delivery_option_group_two" edge to HypothesisTestDeliveryOption entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
	return dou
}

// RemoveHypothesisTestDeliveryOptionGroupTwo removes "hypothesis_test_delivery_option_group_two" edges to HypothesisTestDeliveryOption entities.
func (dou *DeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionGroupTwo(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dou.RemoveHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
}

// ClearHypothesisTestDeliveryOptionLookup clears all "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (dou *DeliveryOptionUpdate) ClearHypothesisTestDeliveryOptionLookup() *DeliveryOptionUpdate {
	dou.mutation.ClearHypothesisTestDeliveryOptionLookup()
	return dou
}

// RemoveHypothesisTestDeliveryOptionLookupIDs removes the "hypothesis_test_delivery_option_lookup" edge to HypothesisTestDeliveryOptionLookup entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
	return dou
}

// RemoveHypothesisTestDeliveryOptionLookup removes "hypothesis_test_delivery_option_lookup" edges to HypothesisTestDeliveryOptionLookup entities.
func (dou *DeliveryOptionUpdate) RemoveHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return dou.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// ClearClickCollectLocation clears all "click_collect_location" edges to the Location entity.
func (dou *DeliveryOptionUpdate) ClearClickCollectLocation() *DeliveryOptionUpdate {
	dou.mutation.ClearClickCollectLocation()
	return dou
}

// RemoveClickCollectLocationIDs removes the "click_collect_location" edge to Location entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveClickCollectLocationIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveClickCollectLocationIDs(ids...)
	return dou
}

// RemoveClickCollectLocation removes "click_collect_location" edges to Location entities.
func (dou *DeliveryOptionUpdate) RemoveClickCollectLocation(l ...*Location) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return dou.RemoveClickCollectLocationIDs(ids...)
}

// ClearEmailClickCollectAtStore clears the "email_click_collect_at_store" edge to the EmailTemplate entity.
func (dou *DeliveryOptionUpdate) ClearEmailClickCollectAtStore() *DeliveryOptionUpdate {
	dou.mutation.ClearEmailClickCollectAtStore()
	return dou
}

// ClearConsolidation clears all "consolidation" edges to the Consolidation entity.
func (dou *DeliveryOptionUpdate) ClearConsolidation() *DeliveryOptionUpdate {
	dou.mutation.ClearConsolidation()
	return dou
}

// RemoveConsolidationIDs removes the "consolidation" edge to Consolidation entities by IDs.
func (dou *DeliveryOptionUpdate) RemoveConsolidationIDs(ids ...pulid.ID) *DeliveryOptionUpdate {
	dou.mutation.RemoveConsolidationIDs(ids...)
	return dou
}

// RemoveConsolidation removes "consolidation" edges to Consolidation entities.
func (dou *DeliveryOptionUpdate) RemoveConsolidation(c ...*Consolidation) *DeliveryOptionUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dou.RemoveConsolidationIDs(ids...)
}

// ClearDefaultPackaging clears the "default_packaging" edge to the Packaging entity.
func (dou *DeliveryOptionUpdate) ClearDefaultPackaging() *DeliveryOptionUpdate {
	dou.mutation.ClearDefaultPackaging()
	return dou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dou *DeliveryOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dou.sqlSave, dou.mutation, dou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dou *DeliveryOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := dou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dou *DeliveryOptionUpdate) Exec(ctx context.Context) error {
	_, err := dou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dou *DeliveryOptionUpdate) ExecX(ctx context.Context) {
	if err := dou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dou *DeliveryOptionUpdate) check() error {
	if v, ok := dou.mutation.ClickOptionDisplayCount(); ok {
		if err := deliveryoption.ClickOptionDisplayCountValidator(v); err != nil {
			return &ValidationError{Name: "click_option_display_count", err: fmt.Errorf(`ent: validator failed for field "DeliveryOption.click_option_display_count": %w`, err)}
		}
	}
	if v, ok := dou.mutation.WebshipperID(); ok {
		if err := deliveryoption.WebshipperIDValidator(v); err != nil {
			return &ValidationError{Name: "webshipper_id", err: fmt.Errorf(`ent: validator failed for field "DeliveryOption.webshipper_id": %w`, err)}
		}
	}
	if dou.mutation.TenantCleared() && len(dou.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.tenant"`)
	}
	if dou.mutation.CarrierCleared() && len(dou.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.carrier"`)
	}
	if dou.mutation.CarrierServiceCleared() && len(dou.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.carrier_service"`)
	}
	if dou.mutation.ConnectionCleared() && len(dou.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.connection"`)
	}
	return nil
}

func (dou *DeliveryOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoption.Table, deliveryoption.Columns, sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString))
	if ps := dou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dou.mutation.ArchivedAt(); ok {
		_spec.SetField(deliveryoption.FieldArchivedAt, field.TypeTime, value)
	}
	if dou.mutation.ArchivedAtCleared() {
		_spec.ClearField(deliveryoption.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := dou.mutation.Name(); ok {
		_spec.SetField(deliveryoption.FieldName, field.TypeString, value)
	}
	if value, ok := dou.mutation.SortOrder(); ok {
		_spec.SetField(deliveryoption.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedSortOrder(); ok {
		_spec.AddField(deliveryoption.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := dou.mutation.ClickOptionDisplayCount(); ok {
		_spec.SetField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedClickOptionDisplayCount(); ok {
		_spec.AddField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt, value)
	}
	if dou.mutation.ClickOptionDisplayCountCleared() {
		_spec.ClearField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt)
	}
	if value, ok := dou.mutation.Description(); ok {
		_spec.SetField(deliveryoption.FieldDescription, field.TypeString, value)
	}
	if dou.mutation.DescriptionCleared() {
		_spec.ClearField(deliveryoption.FieldDescription, field.TypeString)
	}
	if value, ok := dou.mutation.ClickCollect(); ok {
		_spec.SetField(deliveryoption.FieldClickCollect, field.TypeBool, value)
	}
	if dou.mutation.ClickCollectCleared() {
		_spec.ClearField(deliveryoption.FieldClickCollect, field.TypeBool)
	}
	if value, ok := dou.mutation.OverrideSenderAddress(); ok {
		_spec.SetField(deliveryoption.FieldOverrideSenderAddress, field.TypeBool, value)
	}
	if dou.mutation.OverrideSenderAddressCleared() {
		_spec.ClearField(deliveryoption.FieldOverrideSenderAddress, field.TypeBool)
	}
	if value, ok := dou.mutation.OverrideReturnAddress(); ok {
		_spec.SetField(deliveryoption.FieldOverrideReturnAddress, field.TypeBool, value)
	}
	if dou.mutation.OverrideReturnAddressCleared() {
		_spec.ClearField(deliveryoption.FieldOverrideReturnAddress, field.TypeBool)
	}
	if value, ok := dou.mutation.HideDeliveryOption(); ok {
		_spec.SetField(deliveryoption.FieldHideDeliveryOption, field.TypeBool, value)
	}
	if dou.mutation.HideDeliveryOptionCleared() {
		_spec.ClearField(deliveryoption.FieldHideDeliveryOption, field.TypeBool)
	}
	if value, ok := dou.mutation.DeliveryEstimateFrom(); ok {
		_spec.SetField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedDeliveryEstimateFrom(); ok {
		_spec.AddField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt, value)
	}
	if dou.mutation.DeliveryEstimateFromCleared() {
		_spec.ClearField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt)
	}
	if value, ok := dou.mutation.DeliveryEstimateTo(); ok {
		_spec.SetField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedDeliveryEstimateTo(); ok {
		_spec.AddField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt, value)
	}
	if dou.mutation.DeliveryEstimateToCleared() {
		_spec.ClearField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt)
	}
	if value, ok := dou.mutation.WebshipperIntegration(); ok {
		_spec.SetField(deliveryoption.FieldWebshipperIntegration, field.TypeBool, value)
	}
	if value, ok := dou.mutation.WebshipperID(); ok {
		_spec.SetField(deliveryoption.FieldWebshipperID, field.TypeInt, value)
	}
	if value, ok := dou.mutation.AddedWebshipperID(); ok {
		_spec.AddField(deliveryoption.FieldWebshipperID, field.TypeInt, value)
	}
	if dou.mutation.WebshipperIDCleared() {
		_spec.ClearField(deliveryoption.FieldWebshipperID, field.TypeInt)
	}
	if value, ok := dou.mutation.ShipmondoIntegration(); ok {
		_spec.SetField(deliveryoption.FieldShipmondoIntegration, field.TypeBool, value)
	}
	if value, ok := dou.mutation.ShipmondoDeliveryOption(); ok {
		_spec.SetField(deliveryoption.FieldShipmondoDeliveryOption, field.TypeString, value)
	}
	if dou.mutation.ShipmondoDeliveryOptionCleared() {
		_spec.ClearField(deliveryoption.FieldShipmondoDeliveryOption, field.TypeString)
	}
	if value, ok := dou.mutation.CustomsEnabled(); ok {
		_spec.SetField(deliveryoption.FieldCustomsEnabled, field.TypeBool, value)
	}
	if value, ok := dou.mutation.CustomsSigner(); ok {
		_spec.SetField(deliveryoption.FieldCustomsSigner, field.TypeString, value)
	}
	if dou.mutation.CustomsSignerCleared() {
		_spec.ClearField(deliveryoption.FieldCustomsSigner, field.TypeString)
	}
	if value, ok := dou.mutation.HideIfCompanyEmpty(); ok {
		_spec.SetField(deliveryoption.FieldHideIfCompanyEmpty, field.TypeBool, value)
	}
	if dou.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.TenantTable,
			Columns: []string{deliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.TenantTable,
			Columns: []string{deliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierTable,
			Columns: []string{deliveryoption.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierTable,
			Columns: []string{deliveryoption.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedDeliveryRuleIDs(); len(nodes) > 0 && !dou.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDAOTable,
			Columns: []string{deliveryoption.DeliveryOptionDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDAOTable,
			Columns: []string{deliveryoption.DeliveryOptionDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDFTable,
			Columns: []string{deliveryoption.DeliveryOptionDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDFTable,
			Columns: []string{deliveryoption.DeliveryOptionDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDSVTable,
			Columns: []string{deliveryoption.DeliveryOptionDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDSVTable,
			Columns: []string{deliveryoption.DeliveryOptionDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionEasyPostTable,
			Columns: []string{deliveryoption.DeliveryOptionEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionEasyPostTable,
			Columns: []string{deliveryoption.DeliveryOptionEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionGLSTable,
			Columns: []string{deliveryoption.DeliveryOptionGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionGLSTable,
			Columns: []string{deliveryoption.DeliveryOptionGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionPostNordTable,
			Columns: []string{deliveryoption.DeliveryOptionPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionPostNordTable,
			Columns: []string{deliveryoption.DeliveryOptionPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionUSPSTable,
			Columns: []string{deliveryoption.DeliveryOptionUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionUSPSTable,
			Columns: []string{deliveryoption.DeliveryOptionUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DeliveryOptionBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionBringTable,
			Columns: []string{deliveryoption.DeliveryOptionBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DeliveryOptionBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionBringTable,
			Columns: []string{deliveryoption.DeliveryOptionBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ReturnPortalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedReturnPortalsIDs(); len(nodes) > 0 && !dou.mutation.ReturnPortalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ReturnPortalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedColliIDs(); len(nodes) > 0 && !dou.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !dou.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierServiceTable,
			Columns: []string{deliveryoption.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierServiceTable,
			Columns: []string{deliveryoption.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionTable,
			Columns: []string{deliveryoption.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionTable,
			Columns: []string{deliveryoption.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ConnectionDefaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionDefaultTable,
			Columns: []string{deliveryoption.ConnectionDefaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ConnectionDefaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionDefaultTable,
			Columns: []string{deliveryoption.ConnectionDefaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.HypothesisTestDeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedHypothesisTestDeliveryOptionGroupOneIDs(); len(nodes) > 0 && !dou.mutation.HypothesisTestDeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.HypothesisTestDeliveryOptionGroupOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.HypothesisTestDeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedHypothesisTestDeliveryOptionGroupTwoIDs(); len(nodes) > 0 && !dou.mutation.HypothesisTestDeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.HypothesisTestDeliveryOptionGroupTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedHypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 && !dou.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.HypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ClickCollectLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedClickCollectLocationIDs(); len(nodes) > 0 && !dou.mutation.ClickCollectLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ClickCollectLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.EmailClickCollectAtStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.EmailClickCollectAtStoreTable,
			Columns: []string{deliveryoption.EmailClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.EmailClickCollectAtStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.EmailClickCollectAtStoreTable,
			Columns: []string{deliveryoption.EmailClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.RemovedConsolidationIDs(); len(nodes) > 0 && !dou.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dou.mutation.DefaultPackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.DefaultPackagingTable,
			Columns: []string{deliveryoption.DefaultPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dou.mutation.DefaultPackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.DefaultPackagingTable,
			Columns: []string{deliveryoption.DefaultPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dou.mutation.done = true
	return n, nil
}

// DeliveryOptionUpdateOne is the builder for updating a single DeliveryOption entity.
type DeliveryOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionMutation
}

// SetTenantID sets the "tenant_id" field.
func (douo *DeliveryOptionUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetTenantID(pu)
	return douo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionUpdateOne {
	if pu != nil {
		douo.SetTenantID(*pu)
	}
	return douo
}

// SetArchivedAt sets the "archived_at" field.
func (douo *DeliveryOptionUpdateOne) SetArchivedAt(t time.Time) *DeliveryOptionUpdateOne {
	douo.mutation.SetArchivedAt(t)
	return douo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableArchivedAt(t *time.Time) *DeliveryOptionUpdateOne {
	if t != nil {
		douo.SetArchivedAt(*t)
	}
	return douo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (douo *DeliveryOptionUpdateOne) ClearArchivedAt() *DeliveryOptionUpdateOne {
	douo.mutation.ClearArchivedAt()
	return douo
}

// SetName sets the "name" field.
func (douo *DeliveryOptionUpdateOne) SetName(s string) *DeliveryOptionUpdateOne {
	douo.mutation.SetName(s)
	return douo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableName(s *string) *DeliveryOptionUpdateOne {
	if s != nil {
		douo.SetName(*s)
	}
	return douo
}

// SetSortOrder sets the "sort_order" field.
func (douo *DeliveryOptionUpdateOne) SetSortOrder(i int) *DeliveryOptionUpdateOne {
	douo.mutation.ResetSortOrder()
	douo.mutation.SetSortOrder(i)
	return douo
}

// SetNillableSortOrder sets the "sort_order" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableSortOrder(i *int) *DeliveryOptionUpdateOne {
	if i != nil {
		douo.SetSortOrder(*i)
	}
	return douo
}

// AddSortOrder adds i to the "sort_order" field.
func (douo *DeliveryOptionUpdateOne) AddSortOrder(i int) *DeliveryOptionUpdateOne {
	douo.mutation.AddSortOrder(i)
	return douo
}

// SetClickOptionDisplayCount sets the "click_option_display_count" field.
func (douo *DeliveryOptionUpdateOne) SetClickOptionDisplayCount(i int) *DeliveryOptionUpdateOne {
	douo.mutation.ResetClickOptionDisplayCount()
	douo.mutation.SetClickOptionDisplayCount(i)
	return douo
}

// SetNillableClickOptionDisplayCount sets the "click_option_display_count" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableClickOptionDisplayCount(i *int) *DeliveryOptionUpdateOne {
	if i != nil {
		douo.SetClickOptionDisplayCount(*i)
	}
	return douo
}

// AddClickOptionDisplayCount adds i to the "click_option_display_count" field.
func (douo *DeliveryOptionUpdateOne) AddClickOptionDisplayCount(i int) *DeliveryOptionUpdateOne {
	douo.mutation.AddClickOptionDisplayCount(i)
	return douo
}

// ClearClickOptionDisplayCount clears the value of the "click_option_display_count" field.
func (douo *DeliveryOptionUpdateOne) ClearClickOptionDisplayCount() *DeliveryOptionUpdateOne {
	douo.mutation.ClearClickOptionDisplayCount()
	return douo
}

// SetDescription sets the "description" field.
func (douo *DeliveryOptionUpdateOne) SetDescription(s string) *DeliveryOptionUpdateOne {
	douo.mutation.SetDescription(s)
	return douo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDescription(s *string) *DeliveryOptionUpdateOne {
	if s != nil {
		douo.SetDescription(*s)
	}
	return douo
}

// ClearDescription clears the value of the "description" field.
func (douo *DeliveryOptionUpdateOne) ClearDescription() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDescription()
	return douo
}

// SetClickCollect sets the "click_collect" field.
func (douo *DeliveryOptionUpdateOne) SetClickCollect(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetClickCollect(b)
	return douo
}

// SetNillableClickCollect sets the "click_collect" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableClickCollect(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetClickCollect(*b)
	}
	return douo
}

// ClearClickCollect clears the value of the "click_collect" field.
func (douo *DeliveryOptionUpdateOne) ClearClickCollect() *DeliveryOptionUpdateOne {
	douo.mutation.ClearClickCollect()
	return douo
}

// SetOverrideSenderAddress sets the "override_sender_address" field.
func (douo *DeliveryOptionUpdateOne) SetOverrideSenderAddress(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetOverrideSenderAddress(b)
	return douo
}

// SetNillableOverrideSenderAddress sets the "override_sender_address" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableOverrideSenderAddress(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetOverrideSenderAddress(*b)
	}
	return douo
}

// ClearOverrideSenderAddress clears the value of the "override_sender_address" field.
func (douo *DeliveryOptionUpdateOne) ClearOverrideSenderAddress() *DeliveryOptionUpdateOne {
	douo.mutation.ClearOverrideSenderAddress()
	return douo
}

// SetOverrideReturnAddress sets the "override_return_address" field.
func (douo *DeliveryOptionUpdateOne) SetOverrideReturnAddress(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetOverrideReturnAddress(b)
	return douo
}

// SetNillableOverrideReturnAddress sets the "override_return_address" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableOverrideReturnAddress(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetOverrideReturnAddress(*b)
	}
	return douo
}

// ClearOverrideReturnAddress clears the value of the "override_return_address" field.
func (douo *DeliveryOptionUpdateOne) ClearOverrideReturnAddress() *DeliveryOptionUpdateOne {
	douo.mutation.ClearOverrideReturnAddress()
	return douo
}

// SetHideDeliveryOption sets the "hide_delivery_option" field.
func (douo *DeliveryOptionUpdateOne) SetHideDeliveryOption(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetHideDeliveryOption(b)
	return douo
}

// SetNillableHideDeliveryOption sets the "hide_delivery_option" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableHideDeliveryOption(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetHideDeliveryOption(*b)
	}
	return douo
}

// ClearHideDeliveryOption clears the value of the "hide_delivery_option" field.
func (douo *DeliveryOptionUpdateOne) ClearHideDeliveryOption() *DeliveryOptionUpdateOne {
	douo.mutation.ClearHideDeliveryOption()
	return douo
}

// SetDeliveryEstimateFrom sets the "delivery_estimate_from" field.
func (douo *DeliveryOptionUpdateOne) SetDeliveryEstimateFrom(i int) *DeliveryOptionUpdateOne {
	douo.mutation.ResetDeliveryEstimateFrom()
	douo.mutation.SetDeliveryEstimateFrom(i)
	return douo
}

// SetNillableDeliveryEstimateFrom sets the "delivery_estimate_from" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryEstimateFrom(i *int) *DeliveryOptionUpdateOne {
	if i != nil {
		douo.SetDeliveryEstimateFrom(*i)
	}
	return douo
}

// AddDeliveryEstimateFrom adds i to the "delivery_estimate_from" field.
func (douo *DeliveryOptionUpdateOne) AddDeliveryEstimateFrom(i int) *DeliveryOptionUpdateOne {
	douo.mutation.AddDeliveryEstimateFrom(i)
	return douo
}

// ClearDeliveryEstimateFrom clears the value of the "delivery_estimate_from" field.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryEstimateFrom() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryEstimateFrom()
	return douo
}

// SetDeliveryEstimateTo sets the "delivery_estimate_to" field.
func (douo *DeliveryOptionUpdateOne) SetDeliveryEstimateTo(i int) *DeliveryOptionUpdateOne {
	douo.mutation.ResetDeliveryEstimateTo()
	douo.mutation.SetDeliveryEstimateTo(i)
	return douo
}

// SetNillableDeliveryEstimateTo sets the "delivery_estimate_to" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryEstimateTo(i *int) *DeliveryOptionUpdateOne {
	if i != nil {
		douo.SetDeliveryEstimateTo(*i)
	}
	return douo
}

// AddDeliveryEstimateTo adds i to the "delivery_estimate_to" field.
func (douo *DeliveryOptionUpdateOne) AddDeliveryEstimateTo(i int) *DeliveryOptionUpdateOne {
	douo.mutation.AddDeliveryEstimateTo(i)
	return douo
}

// ClearDeliveryEstimateTo clears the value of the "delivery_estimate_to" field.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryEstimateTo() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryEstimateTo()
	return douo
}

// SetWebshipperIntegration sets the "webshipper_integration" field.
func (douo *DeliveryOptionUpdateOne) SetWebshipperIntegration(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetWebshipperIntegration(b)
	return douo
}

// SetNillableWebshipperIntegration sets the "webshipper_integration" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableWebshipperIntegration(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetWebshipperIntegration(*b)
	}
	return douo
}

// SetWebshipperID sets the "webshipper_id" field.
func (douo *DeliveryOptionUpdateOne) SetWebshipperID(i int) *DeliveryOptionUpdateOne {
	douo.mutation.ResetWebshipperID()
	douo.mutation.SetWebshipperID(i)
	return douo
}

// SetNillableWebshipperID sets the "webshipper_id" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableWebshipperID(i *int) *DeliveryOptionUpdateOne {
	if i != nil {
		douo.SetWebshipperID(*i)
	}
	return douo
}

// AddWebshipperID adds i to the "webshipper_id" field.
func (douo *DeliveryOptionUpdateOne) AddWebshipperID(i int) *DeliveryOptionUpdateOne {
	douo.mutation.AddWebshipperID(i)
	return douo
}

// ClearWebshipperID clears the value of the "webshipper_id" field.
func (douo *DeliveryOptionUpdateOne) ClearWebshipperID() *DeliveryOptionUpdateOne {
	douo.mutation.ClearWebshipperID()
	return douo
}

// SetShipmondoIntegration sets the "shipmondo_integration" field.
func (douo *DeliveryOptionUpdateOne) SetShipmondoIntegration(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetShipmondoIntegration(b)
	return douo
}

// SetNillableShipmondoIntegration sets the "shipmondo_integration" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableShipmondoIntegration(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetShipmondoIntegration(*b)
	}
	return douo
}

// SetShipmondoDeliveryOption sets the "shipmondo_delivery_option" field.
func (douo *DeliveryOptionUpdateOne) SetShipmondoDeliveryOption(s string) *DeliveryOptionUpdateOne {
	douo.mutation.SetShipmondoDeliveryOption(s)
	return douo
}

// SetNillableShipmondoDeliveryOption sets the "shipmondo_delivery_option" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableShipmondoDeliveryOption(s *string) *DeliveryOptionUpdateOne {
	if s != nil {
		douo.SetShipmondoDeliveryOption(*s)
	}
	return douo
}

// ClearShipmondoDeliveryOption clears the value of the "shipmondo_delivery_option" field.
func (douo *DeliveryOptionUpdateOne) ClearShipmondoDeliveryOption() *DeliveryOptionUpdateOne {
	douo.mutation.ClearShipmondoDeliveryOption()
	return douo
}

// SetCustomsEnabled sets the "customs_enabled" field.
func (douo *DeliveryOptionUpdateOne) SetCustomsEnabled(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetCustomsEnabled(b)
	return douo
}

// SetNillableCustomsEnabled sets the "customs_enabled" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableCustomsEnabled(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetCustomsEnabled(*b)
	}
	return douo
}

// SetCustomsSigner sets the "customs_signer" field.
func (douo *DeliveryOptionUpdateOne) SetCustomsSigner(s string) *DeliveryOptionUpdateOne {
	douo.mutation.SetCustomsSigner(s)
	return douo
}

// SetNillableCustomsSigner sets the "customs_signer" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableCustomsSigner(s *string) *DeliveryOptionUpdateOne {
	if s != nil {
		douo.SetCustomsSigner(*s)
	}
	return douo
}

// ClearCustomsSigner clears the value of the "customs_signer" field.
func (douo *DeliveryOptionUpdateOne) ClearCustomsSigner() *DeliveryOptionUpdateOne {
	douo.mutation.ClearCustomsSigner()
	return douo
}

// SetHideIfCompanyEmpty sets the "hide_if_company_empty" field.
func (douo *DeliveryOptionUpdateOne) SetHideIfCompanyEmpty(b bool) *DeliveryOptionUpdateOne {
	douo.mutation.SetHideIfCompanyEmpty(b)
	return douo
}

// SetNillableHideIfCompanyEmpty sets the "hide_if_company_empty" field if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableHideIfCompanyEmpty(b *bool) *DeliveryOptionUpdateOne {
	if b != nil {
		douo.SetHideIfCompanyEmpty(*b)
	}
	return douo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (douo *DeliveryOptionUpdateOne) SetTenant(t *Tenant) *DeliveryOptionUpdateOne {
	return douo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (douo *DeliveryOptionUpdateOne) SetCarrierID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetCarrierID(id)
	return douo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (douo *DeliveryOptionUpdateOne) SetCarrier(c *Carrier) *DeliveryOptionUpdateOne {
	return douo.SetCarrierID(c.ID)
}

// AddDeliveryRuleIDs adds the "delivery_rule" edge to the DeliveryRule entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddDeliveryRuleIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddDeliveryRuleIDs(ids...)
	return douo
}

// AddDeliveryRule adds the "delivery_rule" edges to the DeliveryRule entity.
func (douo *DeliveryOptionUpdateOne) AddDeliveryRule(d ...*DeliveryRule) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return douo.AddDeliveryRuleIDs(ids...)
}

// SetDeliveryOptionDAOID sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionDAOID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionDAOID(id)
	return douo
}

// SetNillableDeliveryOptionDAOID sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionDAOID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionDAOID(*id)
	}
	return douo
}

// SetDeliveryOptionDAO sets the "delivery_option_dao" edge to the DeliveryOptionDAO entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionDAO(d *DeliveryOptionDAO) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionDAOID(d.ID)
}

// SetDeliveryOptionDFID sets the "delivery_option_df" edge to the DeliveryOptionDF entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionDFID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionDFID(id)
	return douo
}

// SetNillableDeliveryOptionDFID sets the "delivery_option_df" edge to the DeliveryOptionDF entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionDFID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionDFID(*id)
	}
	return douo
}

// SetDeliveryOptionDF sets the "delivery_option_df" edge to the DeliveryOptionDF entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionDF(d *DeliveryOptionDF) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionDFID(d.ID)
}

// SetDeliveryOptionDSVID sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionDSVID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionDSVID(id)
	return douo
}

// SetNillableDeliveryOptionDSVID sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionDSVID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionDSVID(*id)
	}
	return douo
}

// SetDeliveryOptionDSV sets the "delivery_option_dsv" edge to the DeliveryOptionDSV entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionDSV(d *DeliveryOptionDSV) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionDSVID(d.ID)
}

// SetDeliveryOptionEasyPostID sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionEasyPostID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionEasyPostID(id)
	return douo
}

// SetNillableDeliveryOptionEasyPostID sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionEasyPostID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionEasyPostID(*id)
	}
	return douo
}

// SetDeliveryOptionEasyPost sets the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionEasyPost(d *DeliveryOptionEasyPost) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionEasyPostID(d.ID)
}

// SetDeliveryOptionGLSID sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionGLSID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionGLSID(id)
	return douo
}

// SetNillableDeliveryOptionGLSID sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionGLSID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionGLSID(*id)
	}
	return douo
}

// SetDeliveryOptionGLS sets the "delivery_option_gls" edge to the DeliveryOptionGLS entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionGLS(d *DeliveryOptionGLS) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionGLSID(d.ID)
}

// SetDeliveryOptionPostNordID sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionPostNordID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionPostNordID(id)
	return douo
}

// SetNillableDeliveryOptionPostNordID sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionPostNordID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionPostNordID(*id)
	}
	return douo
}

// SetDeliveryOptionPostNord sets the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionPostNord(d *DeliveryOptionPostNord) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionPostNordID(d.ID)
}

// SetDeliveryOptionUSPSID sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionUSPSID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionUSPSID(id)
	return douo
}

// SetNillableDeliveryOptionUSPSID sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionUSPSID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionUSPSID(*id)
	}
	return douo
}

// SetDeliveryOptionUSPS sets the "delivery_option_usps" edge to the DeliveryOptionUSPS entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionUSPS(d *DeliveryOptionUSPS) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionUSPSID(d.ID)
}

// SetDeliveryOptionBringID sets the "delivery_option_bring" edge to the DeliveryOptionBring entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionBringID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDeliveryOptionBringID(id)
	return douo
}

// SetNillableDeliveryOptionBringID sets the "delivery_option_bring" edge to the DeliveryOptionBring entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDeliveryOptionBringID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDeliveryOptionBringID(*id)
	}
	return douo
}

// SetDeliveryOptionBring sets the "delivery_option_bring" edge to the DeliveryOptionBring entity.
func (douo *DeliveryOptionUpdateOne) SetDeliveryOptionBring(d *DeliveryOptionBring) *DeliveryOptionUpdateOne {
	return douo.SetDeliveryOptionBringID(d.ID)
}

// AddReturnPortalIDs adds the "return_portals" edge to the ReturnPortal entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddReturnPortalIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddReturnPortalIDs(ids...)
	return douo
}

// AddReturnPortals adds the "return_portals" edges to the ReturnPortal entity.
func (douo *DeliveryOptionUpdateOne) AddReturnPortals(r ...*ReturnPortal) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return douo.AddReturnPortalIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddColliIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddColliIDs(ids...)
	return douo
}

// AddColli adds the "colli" edges to the Colli entity.
func (douo *DeliveryOptionUpdateOne) AddColli(c ...*Colli) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douo.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddReturnColliIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddReturnColliIDs(ids...)
	return douo
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (douo *DeliveryOptionUpdateOne) AddReturnColli(r ...*ReturnColli) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return douo.AddReturnColliIDs(ids...)
}

// SetCarrierServiceID sets the "carrier_service" edge to the CarrierService entity by ID.
func (douo *DeliveryOptionUpdateOne) SetCarrierServiceID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetCarrierServiceID(id)
	return douo
}

// SetCarrierService sets the "carrier_service" edge to the CarrierService entity.
func (douo *DeliveryOptionUpdateOne) SetCarrierService(c *CarrierService) *DeliveryOptionUpdateOne {
	return douo.SetCarrierServiceID(c.ID)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (douo *DeliveryOptionUpdateOne) SetConnectionID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetConnectionID(id)
	return douo
}

// SetConnection sets the "connection" edge to the Connection entity.
func (douo *DeliveryOptionUpdateOne) SetConnection(c *Connection) *DeliveryOptionUpdateOne {
	return douo.SetConnectionID(c.ID)
}

// SetConnectionDefaultID sets the "connection_default" edge to the Connection entity by ID.
func (douo *DeliveryOptionUpdateOne) SetConnectionDefaultID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetConnectionDefaultID(id)
	return douo
}

// SetNillableConnectionDefaultID sets the "connection_default" edge to the Connection entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableConnectionDefaultID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetConnectionDefaultID(*id)
	}
	return douo
}

// SetConnectionDefault sets the "connection_default" edge to the Connection entity.
func (douo *DeliveryOptionUpdateOne) SetConnectionDefault(c *Connection) *DeliveryOptionUpdateOne {
	return douo.SetConnectionDefaultID(c.ID)
}

// AddHypothesisTestDeliveryOptionGroupOneIDs adds the "hypothesis_test_delivery_option_group_one" edge to the HypothesisTestDeliveryOption entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionGroupOneIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddHypothesisTestDeliveryOptionGroupOneIDs(ids...)
	return douo
}

// AddHypothesisTestDeliveryOptionGroupOne adds the "hypothesis_test_delivery_option_group_one" edges to the HypothesisTestDeliveryOption entity.
func (douo *DeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionGroupOne(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return douo.AddHypothesisTestDeliveryOptionGroupOneIDs(ids...)
}

// AddHypothesisTestDeliveryOptionGroupTwoIDs adds the "hypothesis_test_delivery_option_group_two" edge to the HypothesisTestDeliveryOption entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
	return douo
}

// AddHypothesisTestDeliveryOptionGroupTwo adds the "hypothesis_test_delivery_option_group_two" edges to the HypothesisTestDeliveryOption entity.
func (douo *DeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionGroupTwo(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return douo.AddHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
}

// AddHypothesisTestDeliveryOptionLookupIDs adds the "hypothesis_test_delivery_option_lookup" edge to the HypothesisTestDeliveryOptionLookup entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
	return douo
}

// AddHypothesisTestDeliveryOptionLookup adds the "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (douo *DeliveryOptionUpdateOne) AddHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return douo.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// AddClickCollectLocationIDs adds the "click_collect_location" edge to the Location entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddClickCollectLocationIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddClickCollectLocationIDs(ids...)
	return douo
}

// AddClickCollectLocation adds the "click_collect_location" edges to the Location entity.
func (douo *DeliveryOptionUpdateOne) AddClickCollectLocation(l ...*Location) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return douo.AddClickCollectLocationIDs(ids...)
}

// SetEmailClickCollectAtStoreID sets the "email_click_collect_at_store" edge to the EmailTemplate entity by ID.
func (douo *DeliveryOptionUpdateOne) SetEmailClickCollectAtStoreID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetEmailClickCollectAtStoreID(id)
	return douo
}

// SetNillableEmailClickCollectAtStoreID sets the "email_click_collect_at_store" edge to the EmailTemplate entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableEmailClickCollectAtStoreID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetEmailClickCollectAtStoreID(*id)
	}
	return douo
}

// SetEmailClickCollectAtStore sets the "email_click_collect_at_store" edge to the EmailTemplate entity.
func (douo *DeliveryOptionUpdateOne) SetEmailClickCollectAtStore(e *EmailTemplate) *DeliveryOptionUpdateOne {
	return douo.SetEmailClickCollectAtStoreID(e.ID)
}

// AddConsolidationIDs adds the "consolidation" edge to the Consolidation entity by IDs.
func (douo *DeliveryOptionUpdateOne) AddConsolidationIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.AddConsolidationIDs(ids...)
	return douo
}

// AddConsolidation adds the "consolidation" edges to the Consolidation entity.
func (douo *DeliveryOptionUpdateOne) AddConsolidation(c ...*Consolidation) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douo.AddConsolidationIDs(ids...)
}

// SetDefaultPackagingID sets the "default_packaging" edge to the Packaging entity by ID.
func (douo *DeliveryOptionUpdateOne) SetDefaultPackagingID(id pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.SetDefaultPackagingID(id)
	return douo
}

// SetNillableDefaultPackagingID sets the "default_packaging" edge to the Packaging entity by ID if the given value is not nil.
func (douo *DeliveryOptionUpdateOne) SetNillableDefaultPackagingID(id *pulid.ID) *DeliveryOptionUpdateOne {
	if id != nil {
		douo = douo.SetDefaultPackagingID(*id)
	}
	return douo
}

// SetDefaultPackaging sets the "default_packaging" edge to the Packaging entity.
func (douo *DeliveryOptionUpdateOne) SetDefaultPackaging(p *Packaging) *DeliveryOptionUpdateOne {
	return douo.SetDefaultPackagingID(p.ID)
}

// Mutation returns the DeliveryOptionMutation object of the builder.
func (douo *DeliveryOptionUpdateOne) Mutation() *DeliveryOptionMutation {
	return douo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (douo *DeliveryOptionUpdateOne) ClearTenant() *DeliveryOptionUpdateOne {
	douo.mutation.ClearTenant()
	return douo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (douo *DeliveryOptionUpdateOne) ClearCarrier() *DeliveryOptionUpdateOne {
	douo.mutation.ClearCarrier()
	return douo
}

// ClearDeliveryRule clears all "delivery_rule" edges to the DeliveryRule entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryRule() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryRule()
	return douo
}

// RemoveDeliveryRuleIDs removes the "delivery_rule" edge to DeliveryRule entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveDeliveryRuleIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveDeliveryRuleIDs(ids...)
	return douo
}

// RemoveDeliveryRule removes "delivery_rule" edges to DeliveryRule entities.
func (douo *DeliveryOptionUpdateOne) RemoveDeliveryRule(d ...*DeliveryRule) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return douo.RemoveDeliveryRuleIDs(ids...)
}

// ClearDeliveryOptionDAO clears the "delivery_option_dao" edge to the DeliveryOptionDAO entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionDAO() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionDAO()
	return douo
}

// ClearDeliveryOptionDF clears the "delivery_option_df" edge to the DeliveryOptionDF entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionDF() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionDF()
	return douo
}

// ClearDeliveryOptionDSV clears the "delivery_option_dsv" edge to the DeliveryOptionDSV entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionDSV() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionDSV()
	return douo
}

// ClearDeliveryOptionEasyPost clears the "delivery_option_easy_post" edge to the DeliveryOptionEasyPost entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionEasyPost() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionEasyPost()
	return douo
}

// ClearDeliveryOptionGLS clears the "delivery_option_gls" edge to the DeliveryOptionGLS entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionGLS() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionGLS()
	return douo
}

// ClearDeliveryOptionPostNord clears the "delivery_option_post_nord" edge to the DeliveryOptionPostNord entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionPostNord() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionPostNord()
	return douo
}

// ClearDeliveryOptionUSPS clears the "delivery_option_usps" edge to the DeliveryOptionUSPS entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionUSPS() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionUSPS()
	return douo
}

// ClearDeliveryOptionBring clears the "delivery_option_bring" edge to the DeliveryOptionBring entity.
func (douo *DeliveryOptionUpdateOne) ClearDeliveryOptionBring() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDeliveryOptionBring()
	return douo
}

// ClearReturnPortals clears all "return_portals" edges to the ReturnPortal entity.
func (douo *DeliveryOptionUpdateOne) ClearReturnPortals() *DeliveryOptionUpdateOne {
	douo.mutation.ClearReturnPortals()
	return douo
}

// RemoveReturnPortalIDs removes the "return_portals" edge to ReturnPortal entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveReturnPortalIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveReturnPortalIDs(ids...)
	return douo
}

// RemoveReturnPortals removes "return_portals" edges to ReturnPortal entities.
func (douo *DeliveryOptionUpdateOne) RemoveReturnPortals(r ...*ReturnPortal) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return douo.RemoveReturnPortalIDs(ids...)
}

// ClearColli clears all "colli" edges to the Colli entity.
func (douo *DeliveryOptionUpdateOne) ClearColli() *DeliveryOptionUpdateOne {
	douo.mutation.ClearColli()
	return douo
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveColliIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveColliIDs(ids...)
	return douo
}

// RemoveColli removes "colli" edges to Colli entities.
func (douo *DeliveryOptionUpdateOne) RemoveColli(c ...*Colli) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douo.RemoveColliIDs(ids...)
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (douo *DeliveryOptionUpdateOne) ClearReturnColli() *DeliveryOptionUpdateOne {
	douo.mutation.ClearReturnColli()
	return douo
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveReturnColliIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveReturnColliIDs(ids...)
	return douo
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (douo *DeliveryOptionUpdateOne) RemoveReturnColli(r ...*ReturnColli) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return douo.RemoveReturnColliIDs(ids...)
}

// ClearCarrierService clears the "carrier_service" edge to the CarrierService entity.
func (douo *DeliveryOptionUpdateOne) ClearCarrierService() *DeliveryOptionUpdateOne {
	douo.mutation.ClearCarrierService()
	return douo
}

// ClearConnection clears the "connection" edge to the Connection entity.
func (douo *DeliveryOptionUpdateOne) ClearConnection() *DeliveryOptionUpdateOne {
	douo.mutation.ClearConnection()
	return douo
}

// ClearConnectionDefault clears the "connection_default" edge to the Connection entity.
func (douo *DeliveryOptionUpdateOne) ClearConnectionDefault() *DeliveryOptionUpdateOne {
	douo.mutation.ClearConnectionDefault()
	return douo
}

// ClearHypothesisTestDeliveryOptionGroupOne clears all "hypothesis_test_delivery_option_group_one" edges to the HypothesisTestDeliveryOption entity.
func (douo *DeliveryOptionUpdateOne) ClearHypothesisTestDeliveryOptionGroupOne() *DeliveryOptionUpdateOne {
	douo.mutation.ClearHypothesisTestDeliveryOptionGroupOne()
	return douo
}

// RemoveHypothesisTestDeliveryOptionGroupOneIDs removes the "hypothesis_test_delivery_option_group_one" edge to HypothesisTestDeliveryOption entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionGroupOneIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveHypothesisTestDeliveryOptionGroupOneIDs(ids...)
	return douo
}

// RemoveHypothesisTestDeliveryOptionGroupOne removes "hypothesis_test_delivery_option_group_one" edges to HypothesisTestDeliveryOption entities.
func (douo *DeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionGroupOne(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return douo.RemoveHypothesisTestDeliveryOptionGroupOneIDs(ids...)
}

// ClearHypothesisTestDeliveryOptionGroupTwo clears all "hypothesis_test_delivery_option_group_two" edges to the HypothesisTestDeliveryOption entity.
func (douo *DeliveryOptionUpdateOne) ClearHypothesisTestDeliveryOptionGroupTwo() *DeliveryOptionUpdateOne {
	douo.mutation.ClearHypothesisTestDeliveryOptionGroupTwo()
	return douo
}

// RemoveHypothesisTestDeliveryOptionGroupTwoIDs removes the "hypothesis_test_delivery_option_group_two" edge to HypothesisTestDeliveryOption entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionGroupTwoIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
	return douo
}

// RemoveHypothesisTestDeliveryOptionGroupTwo removes "hypothesis_test_delivery_option_group_two" edges to HypothesisTestDeliveryOption entities.
func (douo *DeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionGroupTwo(h ...*HypothesisTestDeliveryOption) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return douo.RemoveHypothesisTestDeliveryOptionGroupTwoIDs(ids...)
}

// ClearHypothesisTestDeliveryOptionLookup clears all "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (douo *DeliveryOptionUpdateOne) ClearHypothesisTestDeliveryOptionLookup() *DeliveryOptionUpdateOne {
	douo.mutation.ClearHypothesisTestDeliveryOptionLookup()
	return douo
}

// RemoveHypothesisTestDeliveryOptionLookupIDs removes the "hypothesis_test_delivery_option_lookup" edge to HypothesisTestDeliveryOptionLookup entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
	return douo
}

// RemoveHypothesisTestDeliveryOptionLookup removes "hypothesis_test_delivery_option_lookup" edges to HypothesisTestDeliveryOptionLookup entities.
func (douo *DeliveryOptionUpdateOne) RemoveHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return douo.RemoveHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// ClearClickCollectLocation clears all "click_collect_location" edges to the Location entity.
func (douo *DeliveryOptionUpdateOne) ClearClickCollectLocation() *DeliveryOptionUpdateOne {
	douo.mutation.ClearClickCollectLocation()
	return douo
}

// RemoveClickCollectLocationIDs removes the "click_collect_location" edge to Location entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveClickCollectLocationIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveClickCollectLocationIDs(ids...)
	return douo
}

// RemoveClickCollectLocation removes "click_collect_location" edges to Location entities.
func (douo *DeliveryOptionUpdateOne) RemoveClickCollectLocation(l ...*Location) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return douo.RemoveClickCollectLocationIDs(ids...)
}

// ClearEmailClickCollectAtStore clears the "email_click_collect_at_store" edge to the EmailTemplate entity.
func (douo *DeliveryOptionUpdateOne) ClearEmailClickCollectAtStore() *DeliveryOptionUpdateOne {
	douo.mutation.ClearEmailClickCollectAtStore()
	return douo
}

// ClearConsolidation clears all "consolidation" edges to the Consolidation entity.
func (douo *DeliveryOptionUpdateOne) ClearConsolidation() *DeliveryOptionUpdateOne {
	douo.mutation.ClearConsolidation()
	return douo
}

// RemoveConsolidationIDs removes the "consolidation" edge to Consolidation entities by IDs.
func (douo *DeliveryOptionUpdateOne) RemoveConsolidationIDs(ids ...pulid.ID) *DeliveryOptionUpdateOne {
	douo.mutation.RemoveConsolidationIDs(ids...)
	return douo
}

// RemoveConsolidation removes "consolidation" edges to Consolidation entities.
func (douo *DeliveryOptionUpdateOne) RemoveConsolidation(c ...*Consolidation) *DeliveryOptionUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return douo.RemoveConsolidationIDs(ids...)
}

// ClearDefaultPackaging clears the "default_packaging" edge to the Packaging entity.
func (douo *DeliveryOptionUpdateOne) ClearDefaultPackaging() *DeliveryOptionUpdateOne {
	douo.mutation.ClearDefaultPackaging()
	return douo
}

// Where appends a list predicates to the DeliveryOptionUpdate builder.
func (douo *DeliveryOptionUpdateOne) Where(ps ...predicate.DeliveryOption) *DeliveryOptionUpdateOne {
	douo.mutation.Where(ps...)
	return douo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (douo *DeliveryOptionUpdateOne) Select(field string, fields ...string) *DeliveryOptionUpdateOne {
	douo.fields = append([]string{field}, fields...)
	return douo
}

// Save executes the query and returns the updated DeliveryOption entity.
func (douo *DeliveryOptionUpdateOne) Save(ctx context.Context) (*DeliveryOption, error) {
	return withHooks(ctx, douo.sqlSave, douo.mutation, douo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (douo *DeliveryOptionUpdateOne) SaveX(ctx context.Context) *DeliveryOption {
	node, err := douo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (douo *DeliveryOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := douo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (douo *DeliveryOptionUpdateOne) ExecX(ctx context.Context) {
	if err := douo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (douo *DeliveryOptionUpdateOne) check() error {
	if v, ok := douo.mutation.ClickOptionDisplayCount(); ok {
		if err := deliveryoption.ClickOptionDisplayCountValidator(v); err != nil {
			return &ValidationError{Name: "click_option_display_count", err: fmt.Errorf(`ent: validator failed for field "DeliveryOption.click_option_display_count": %w`, err)}
		}
	}
	if v, ok := douo.mutation.WebshipperID(); ok {
		if err := deliveryoption.WebshipperIDValidator(v); err != nil {
			return &ValidationError{Name: "webshipper_id", err: fmt.Errorf(`ent: validator failed for field "DeliveryOption.webshipper_id": %w`, err)}
		}
	}
	if douo.mutation.TenantCleared() && len(douo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.tenant"`)
	}
	if douo.mutation.CarrierCleared() && len(douo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.carrier"`)
	}
	if douo.mutation.CarrierServiceCleared() && len(douo.mutation.CarrierServiceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.carrier_service"`)
	}
	if douo.mutation.ConnectionCleared() && len(douo.mutation.ConnectionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOption.connection"`)
	}
	return nil
}

func (douo *DeliveryOptionUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOption, err error) {
	if err := douo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoption.Table, deliveryoption.Columns, sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString))
	id, ok := douo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := douo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoption.FieldID)
		for _, f := range fields {
			if !deliveryoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := douo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := douo.mutation.ArchivedAt(); ok {
		_spec.SetField(deliveryoption.FieldArchivedAt, field.TypeTime, value)
	}
	if douo.mutation.ArchivedAtCleared() {
		_spec.ClearField(deliveryoption.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := douo.mutation.Name(); ok {
		_spec.SetField(deliveryoption.FieldName, field.TypeString, value)
	}
	if value, ok := douo.mutation.SortOrder(); ok {
		_spec.SetField(deliveryoption.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedSortOrder(); ok {
		_spec.AddField(deliveryoption.FieldSortOrder, field.TypeInt, value)
	}
	if value, ok := douo.mutation.ClickOptionDisplayCount(); ok {
		_spec.SetField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedClickOptionDisplayCount(); ok {
		_spec.AddField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt, value)
	}
	if douo.mutation.ClickOptionDisplayCountCleared() {
		_spec.ClearField(deliveryoption.FieldClickOptionDisplayCount, field.TypeInt)
	}
	if value, ok := douo.mutation.Description(); ok {
		_spec.SetField(deliveryoption.FieldDescription, field.TypeString, value)
	}
	if douo.mutation.DescriptionCleared() {
		_spec.ClearField(deliveryoption.FieldDescription, field.TypeString)
	}
	if value, ok := douo.mutation.ClickCollect(); ok {
		_spec.SetField(deliveryoption.FieldClickCollect, field.TypeBool, value)
	}
	if douo.mutation.ClickCollectCleared() {
		_spec.ClearField(deliveryoption.FieldClickCollect, field.TypeBool)
	}
	if value, ok := douo.mutation.OverrideSenderAddress(); ok {
		_spec.SetField(deliveryoption.FieldOverrideSenderAddress, field.TypeBool, value)
	}
	if douo.mutation.OverrideSenderAddressCleared() {
		_spec.ClearField(deliveryoption.FieldOverrideSenderAddress, field.TypeBool)
	}
	if value, ok := douo.mutation.OverrideReturnAddress(); ok {
		_spec.SetField(deliveryoption.FieldOverrideReturnAddress, field.TypeBool, value)
	}
	if douo.mutation.OverrideReturnAddressCleared() {
		_spec.ClearField(deliveryoption.FieldOverrideReturnAddress, field.TypeBool)
	}
	if value, ok := douo.mutation.HideDeliveryOption(); ok {
		_spec.SetField(deliveryoption.FieldHideDeliveryOption, field.TypeBool, value)
	}
	if douo.mutation.HideDeliveryOptionCleared() {
		_spec.ClearField(deliveryoption.FieldHideDeliveryOption, field.TypeBool)
	}
	if value, ok := douo.mutation.DeliveryEstimateFrom(); ok {
		_spec.SetField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedDeliveryEstimateFrom(); ok {
		_spec.AddField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt, value)
	}
	if douo.mutation.DeliveryEstimateFromCleared() {
		_spec.ClearField(deliveryoption.FieldDeliveryEstimateFrom, field.TypeInt)
	}
	if value, ok := douo.mutation.DeliveryEstimateTo(); ok {
		_spec.SetField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedDeliveryEstimateTo(); ok {
		_spec.AddField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt, value)
	}
	if douo.mutation.DeliveryEstimateToCleared() {
		_spec.ClearField(deliveryoption.FieldDeliveryEstimateTo, field.TypeInt)
	}
	if value, ok := douo.mutation.WebshipperIntegration(); ok {
		_spec.SetField(deliveryoption.FieldWebshipperIntegration, field.TypeBool, value)
	}
	if value, ok := douo.mutation.WebshipperID(); ok {
		_spec.SetField(deliveryoption.FieldWebshipperID, field.TypeInt, value)
	}
	if value, ok := douo.mutation.AddedWebshipperID(); ok {
		_spec.AddField(deliveryoption.FieldWebshipperID, field.TypeInt, value)
	}
	if douo.mutation.WebshipperIDCleared() {
		_spec.ClearField(deliveryoption.FieldWebshipperID, field.TypeInt)
	}
	if value, ok := douo.mutation.ShipmondoIntegration(); ok {
		_spec.SetField(deliveryoption.FieldShipmondoIntegration, field.TypeBool, value)
	}
	if value, ok := douo.mutation.ShipmondoDeliveryOption(); ok {
		_spec.SetField(deliveryoption.FieldShipmondoDeliveryOption, field.TypeString, value)
	}
	if douo.mutation.ShipmondoDeliveryOptionCleared() {
		_spec.ClearField(deliveryoption.FieldShipmondoDeliveryOption, field.TypeString)
	}
	if value, ok := douo.mutation.CustomsEnabled(); ok {
		_spec.SetField(deliveryoption.FieldCustomsEnabled, field.TypeBool, value)
	}
	if value, ok := douo.mutation.CustomsSigner(); ok {
		_spec.SetField(deliveryoption.FieldCustomsSigner, field.TypeString, value)
	}
	if douo.mutation.CustomsSignerCleared() {
		_spec.ClearField(deliveryoption.FieldCustomsSigner, field.TypeString)
	}
	if value, ok := douo.mutation.HideIfCompanyEmpty(); ok {
		_spec.SetField(deliveryoption.FieldHideIfCompanyEmpty, field.TypeBool, value)
	}
	if douo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.TenantTable,
			Columns: []string{deliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.TenantTable,
			Columns: []string{deliveryoption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierTable,
			Columns: []string{deliveryoption.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierTable,
			Columns: []string{deliveryoption.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedDeliveryRuleIDs(); len(nodes) > 0 && !douo.mutation.DeliveryRuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryRuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDAOTable,
			Columns: []string{deliveryoption.DeliveryOptionDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDAOTable,
			Columns: []string{deliveryoption.DeliveryOptionDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDFTable,
			Columns: []string{deliveryoption.DeliveryOptionDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDFTable,
			Columns: []string{deliveryoption.DeliveryOptionDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDSVTable,
			Columns: []string{deliveryoption.DeliveryOptionDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDSVTable,
			Columns: []string{deliveryoption.DeliveryOptionDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionEasyPostTable,
			Columns: []string{deliveryoption.DeliveryOptionEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionEasyPostTable,
			Columns: []string{deliveryoption.DeliveryOptionEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionGLSTable,
			Columns: []string{deliveryoption.DeliveryOptionGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionGLSTable,
			Columns: []string{deliveryoption.DeliveryOptionGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiongls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionPostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionPostNordTable,
			Columns: []string{deliveryoption.DeliveryOptionPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionPostNordTable,
			Columns: []string{deliveryoption.DeliveryOptionPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionpostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionUSPSTable,
			Columns: []string{deliveryoption.DeliveryOptionUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionUSPSTable,
			Columns: []string{deliveryoption.DeliveryOptionUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DeliveryOptionBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionBringTable,
			Columns: []string{deliveryoption.DeliveryOptionBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DeliveryOptionBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionBringTable,
			Columns: []string{deliveryoption.DeliveryOptionBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ReturnPortalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedReturnPortalsIDs(); len(nodes) > 0 && !douo.mutation.ReturnPortalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ReturnPortalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedColliIDs(); len(nodes) > 0 && !douo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !douo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierServiceTable,
			Columns: []string{deliveryoption.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierServiceTable,
			Columns: []string{deliveryoption.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ConnectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionTable,
			Columns: []string{deliveryoption.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionTable,
			Columns: []string{deliveryoption.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ConnectionDefaultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionDefaultTable,
			Columns: []string{deliveryoption.ConnectionDefaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ConnectionDefaultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionDefaultTable,
			Columns: []string{deliveryoption.ConnectionDefaultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.HypothesisTestDeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedHypothesisTestDeliveryOptionGroupOneIDs(); len(nodes) > 0 && !douo.mutation.HypothesisTestDeliveryOptionGroupOneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.HypothesisTestDeliveryOptionGroupOneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.HypothesisTestDeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedHypothesisTestDeliveryOptionGroupTwoIDs(); len(nodes) > 0 && !douo.mutation.HypothesisTestDeliveryOptionGroupTwoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.HypothesisTestDeliveryOptionGroupTwoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedHypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 && !douo.mutation.HypothesisTestDeliveryOptionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.HypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ClickCollectLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedClickCollectLocationIDs(); len(nodes) > 0 && !douo.mutation.ClickCollectLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ClickCollectLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.EmailClickCollectAtStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.EmailClickCollectAtStoreTable,
			Columns: []string{deliveryoption.EmailClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.EmailClickCollectAtStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.EmailClickCollectAtStoreTable,
			Columns: []string{deliveryoption.EmailClickCollectAtStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.RemovedConsolidationIDs(); len(nodes) > 0 && !douo.mutation.ConsolidationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if douo.mutation.DefaultPackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.DefaultPackagingTable,
			Columns: []string{deliveryoption.DefaultPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := douo.mutation.DefaultPackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.DefaultPackagingTable,
			Columns: []string{deliveryoption.DefaultPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOption{config: douo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, douo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	douo.mutation.done = true
	return _node, nil
}
