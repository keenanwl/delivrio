// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OTKRequestsUpdate is the builder for updating OTKRequests entities.
type OTKRequestsUpdate struct {
	config
	hooks    []Hook
	mutation *OTKRequestsMutation
}

// Where appends a list predicates to the OTKRequestsUpdate builder.
func (oru *OTKRequestsUpdate) Where(ps ...predicate.OTKRequests) *OTKRequestsUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetTenantID sets the "tenant_id" field.
func (oru *OTKRequestsUpdate) SetTenantID(pu pulid.ID) *OTKRequestsUpdate {
	oru.mutation.SetTenantID(pu)
	return oru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (oru *OTKRequestsUpdate) SetNillableTenantID(pu *pulid.ID) *OTKRequestsUpdate {
	if pu != nil {
		oru.SetTenantID(*pu)
	}
	return oru
}

// SetOtk sets the "otk" field.
func (oru *OTKRequestsUpdate) SetOtk(s string) *OTKRequestsUpdate {
	oru.mutation.SetOtk(s)
	return oru
}

// SetNillableOtk sets the "otk" field if the given value is not nil.
func (oru *OTKRequestsUpdate) SetNillableOtk(s *string) *OTKRequestsUpdate {
	if s != nil {
		oru.SetOtk(*s)
	}
	return oru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oru *OTKRequestsUpdate) SetTenant(t *Tenant) *OTKRequestsUpdate {
	return oru.SetTenantID(t.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (oru *OTKRequestsUpdate) SetUsersID(id pulid.ID) *OTKRequestsUpdate {
	oru.mutation.SetUsersID(id)
	return oru
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (oru *OTKRequestsUpdate) SetNillableUsersID(id *pulid.ID) *OTKRequestsUpdate {
	if id != nil {
		oru = oru.SetUsersID(*id)
	}
	return oru
}

// SetUsers sets the "users" edge to the User entity.
func (oru *OTKRequestsUpdate) SetUsers(u *User) *OTKRequestsUpdate {
	return oru.SetUsersID(u.ID)
}

// Mutation returns the OTKRequestsMutation object of the builder.
func (oru *OTKRequestsUpdate) Mutation() *OTKRequestsMutation {
	return oru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (oru *OTKRequestsUpdate) ClearTenant() *OTKRequestsUpdate {
	oru.mutation.ClearTenant()
	return oru
}

// ClearUsers clears the "users" edge to the User entity.
func (oru *OTKRequestsUpdate) ClearUsers() *OTKRequestsUpdate {
	oru.mutation.ClearUsers()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OTKRequestsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OTKRequestsUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OTKRequestsUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OTKRequestsUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OTKRequestsUpdate) check() error {
	if oru.mutation.TenantCleared() && len(oru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OTKRequests.tenant"`)
	}
	return nil
}

func (oru *OTKRequestsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(otkrequests.Table, otkrequests.Columns, sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.Otk(); ok {
		_spec.SetField(otkrequests.FieldOtk, field.TypeString, value)
	}
	if oru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   otkrequests.TenantTable,
			Columns: []string{otkrequests.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   otkrequests.TenantTable,
			Columns: []string{otkrequests.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otkrequests.UsersTable,
			Columns: []string{otkrequests.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otkrequests.UsersTable,
			Columns: []string{otkrequests.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otkrequests.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OTKRequestsUpdateOne is the builder for updating a single OTKRequests entity.
type OTKRequestsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OTKRequestsMutation
}

// SetTenantID sets the "tenant_id" field.
func (oruo *OTKRequestsUpdateOne) SetTenantID(pu pulid.ID) *OTKRequestsUpdateOne {
	oruo.mutation.SetTenantID(pu)
	return oruo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (oruo *OTKRequestsUpdateOne) SetNillableTenantID(pu *pulid.ID) *OTKRequestsUpdateOne {
	if pu != nil {
		oruo.SetTenantID(*pu)
	}
	return oruo
}

// SetOtk sets the "otk" field.
func (oruo *OTKRequestsUpdateOne) SetOtk(s string) *OTKRequestsUpdateOne {
	oruo.mutation.SetOtk(s)
	return oruo
}

// SetNillableOtk sets the "otk" field if the given value is not nil.
func (oruo *OTKRequestsUpdateOne) SetNillableOtk(s *string) *OTKRequestsUpdateOne {
	if s != nil {
		oruo.SetOtk(*s)
	}
	return oruo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oruo *OTKRequestsUpdateOne) SetTenant(t *Tenant) *OTKRequestsUpdateOne {
	return oruo.SetTenantID(t.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (oruo *OTKRequestsUpdateOne) SetUsersID(id pulid.ID) *OTKRequestsUpdateOne {
	oruo.mutation.SetUsersID(id)
	return oruo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (oruo *OTKRequestsUpdateOne) SetNillableUsersID(id *pulid.ID) *OTKRequestsUpdateOne {
	if id != nil {
		oruo = oruo.SetUsersID(*id)
	}
	return oruo
}

// SetUsers sets the "users" edge to the User entity.
func (oruo *OTKRequestsUpdateOne) SetUsers(u *User) *OTKRequestsUpdateOne {
	return oruo.SetUsersID(u.ID)
}

// Mutation returns the OTKRequestsMutation object of the builder.
func (oruo *OTKRequestsUpdateOne) Mutation() *OTKRequestsMutation {
	return oruo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (oruo *OTKRequestsUpdateOne) ClearTenant() *OTKRequestsUpdateOne {
	oruo.mutation.ClearTenant()
	return oruo
}

// ClearUsers clears the "users" edge to the User entity.
func (oruo *OTKRequestsUpdateOne) ClearUsers() *OTKRequestsUpdateOne {
	oruo.mutation.ClearUsers()
	return oruo
}

// Where appends a list predicates to the OTKRequestsUpdate builder.
func (oruo *OTKRequestsUpdateOne) Where(ps ...predicate.OTKRequests) *OTKRequestsUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OTKRequestsUpdateOne) Select(field string, fields ...string) *OTKRequestsUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OTKRequests entity.
func (oruo *OTKRequestsUpdateOne) Save(ctx context.Context) (*OTKRequests, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OTKRequestsUpdateOne) SaveX(ctx context.Context) *OTKRequests {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OTKRequestsUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OTKRequestsUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OTKRequestsUpdateOne) check() error {
	if oruo.mutation.TenantCleared() && len(oruo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OTKRequests.tenant"`)
	}
	return nil
}

func (oruo *OTKRequestsUpdateOne) sqlSave(ctx context.Context) (_node *OTKRequests, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(otkrequests.Table, otkrequests.Columns, sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OTKRequests.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, otkrequests.FieldID)
		for _, f := range fields {
			if !otkrequests.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != otkrequests.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.Otk(); ok {
		_spec.SetField(otkrequests.FieldOtk, field.TypeString, value)
	}
	if oruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   otkrequests.TenantTable,
			Columns: []string{otkrequests.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   otkrequests.TenantTable,
			Columns: []string{otkrequests.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otkrequests.UsersTable,
			Columns: []string{otkrequests.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otkrequests.UsersTable,
			Columns: []string{otkrequests.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OTKRequests{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{otkrequests.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
