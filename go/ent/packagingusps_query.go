// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSQuery is the builder for querying PackagingUSPS entities.
type PackagingUSPSQuery struct {
	config
	ctx                                 *QueryContext
	order                               []packagingusps.OrderOption
	inters                              []Interceptor
	predicates                          []predicate.PackagingUSPS
	withTenant                          *TenantQuery
	withPackaging                       *PackagingQuery
	withPackagingUSPSRateIndicator      *PackagingUSPSRateIndicatorQuery
	withPackagingUSPSProcessingCategory *PackagingUSPSProcessingCategoryQuery
	withFKs                             bool
	modifiers                           []func(*sql.Selector)
	loadTotal                           []func(context.Context, []*PackagingUSPS) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PackagingUSPSQuery builder.
func (puq *PackagingUSPSQuery) Where(ps ...predicate.PackagingUSPS) *PackagingUSPSQuery {
	puq.predicates = append(puq.predicates, ps...)
	return puq
}

// Limit the number of records to be returned by this query.
func (puq *PackagingUSPSQuery) Limit(limit int) *PackagingUSPSQuery {
	puq.ctx.Limit = &limit
	return puq
}

// Offset to start from.
func (puq *PackagingUSPSQuery) Offset(offset int) *PackagingUSPSQuery {
	puq.ctx.Offset = &offset
	return puq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (puq *PackagingUSPSQuery) Unique(unique bool) *PackagingUSPSQuery {
	puq.ctx.Unique = &unique
	return puq
}

// Order specifies how the records should be ordered.
func (puq *PackagingUSPSQuery) Order(o ...packagingusps.OrderOption) *PackagingUSPSQuery {
	puq.order = append(puq.order, o...)
	return puq
}

// QueryTenant chains the current query on the "tenant" edge.
func (puq *PackagingUSPSQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: puq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingusps.TenantTable, packagingusps.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(puq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackaging chains the current query on the "packaging" edge.
func (puq *PackagingUSPSQuery) QueryPackaging() *PackagingQuery {
	query := (&PackagingClient{config: puq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, selector),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, packagingusps.PackagingTable, packagingusps.PackagingColumn),
		)
		fromU = sqlgraph.SetNeighbors(puq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackagingUSPSRateIndicator chains the current query on the "packaging_usps_rate_indicator" edge.
func (puq *PackagingUSPSQuery) QueryPackagingUSPSRateIndicator() *PackagingUSPSRateIndicatorQuery {
	query := (&PackagingUSPSRateIndicatorClient{config: puq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, selector),
			sqlgraph.To(packaginguspsrateindicator.Table, packaginguspsrateindicator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingusps.PackagingUSPSRateIndicatorTable, packagingusps.PackagingUSPSRateIndicatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(puq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPackagingUSPSProcessingCategory chains the current query on the "packaging_usps_processing_category" edge.
func (puq *PackagingUSPSQuery) QueryPackagingUSPSProcessingCategory() *PackagingUSPSProcessingCategoryQuery {
	query := (&PackagingUSPSProcessingCategoryClient{config: puq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := puq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := puq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, selector),
			sqlgraph.To(packaginguspsprocessingcategory.Table, packaginguspsprocessingcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingusps.PackagingUSPSProcessingCategoryTable, packagingusps.PackagingUSPSProcessingCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(puq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PackagingUSPS entity from the query.
// Returns a *NotFoundError when no PackagingUSPS was found.
func (puq *PackagingUSPSQuery) First(ctx context.Context) (*PackagingUSPS, error) {
	nodes, err := puq.Limit(1).All(setContextOp(ctx, puq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{packagingusps.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (puq *PackagingUSPSQuery) FirstX(ctx context.Context) *PackagingUSPS {
	node, err := puq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PackagingUSPS ID from the query.
// Returns a *NotFoundError when no PackagingUSPS ID was found.
func (puq *PackagingUSPSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = puq.Limit(1).IDs(setContextOp(ctx, puq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{packagingusps.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (puq *PackagingUSPSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := puq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PackagingUSPS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PackagingUSPS entity is found.
// Returns a *NotFoundError when no PackagingUSPS entities are found.
func (puq *PackagingUSPSQuery) Only(ctx context.Context) (*PackagingUSPS, error) {
	nodes, err := puq.Limit(2).All(setContextOp(ctx, puq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{packagingusps.Label}
	default:
		return nil, &NotSingularError{packagingusps.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (puq *PackagingUSPSQuery) OnlyX(ctx context.Context) *PackagingUSPS {
	node, err := puq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PackagingUSPS ID in the query.
// Returns a *NotSingularError when more than one PackagingUSPS ID is found.
// Returns a *NotFoundError when no entities are found.
func (puq *PackagingUSPSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = puq.Limit(2).IDs(setContextOp(ctx, puq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{packagingusps.Label}
	default:
		err = &NotSingularError{packagingusps.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (puq *PackagingUSPSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := puq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PackagingUSPSs.
func (puq *PackagingUSPSQuery) All(ctx context.Context) ([]*PackagingUSPS, error) {
	ctx = setContextOp(ctx, puq.ctx, ent.OpQueryAll)
	if err := puq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PackagingUSPS, *PackagingUSPSQuery]()
	return withInterceptors[[]*PackagingUSPS](ctx, puq, qr, puq.inters)
}

// AllX is like All, but panics if an error occurs.
func (puq *PackagingUSPSQuery) AllX(ctx context.Context) []*PackagingUSPS {
	nodes, err := puq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PackagingUSPS IDs.
func (puq *PackagingUSPSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if puq.ctx.Unique == nil && puq.path != nil {
		puq.Unique(true)
	}
	ctx = setContextOp(ctx, puq.ctx, ent.OpQueryIDs)
	if err = puq.Select(packagingusps.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (puq *PackagingUSPSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := puq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (puq *PackagingUSPSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, puq.ctx, ent.OpQueryCount)
	if err := puq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, puq, querierCount[*PackagingUSPSQuery](), puq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (puq *PackagingUSPSQuery) CountX(ctx context.Context) int {
	count, err := puq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (puq *PackagingUSPSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, puq.ctx, ent.OpQueryExist)
	switch _, err := puq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (puq *PackagingUSPSQuery) ExistX(ctx context.Context) bool {
	exist, err := puq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PackagingUSPSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (puq *PackagingUSPSQuery) Clone() *PackagingUSPSQuery {
	if puq == nil {
		return nil
	}
	return &PackagingUSPSQuery{
		config:                              puq.config,
		ctx:                                 puq.ctx.Clone(),
		order:                               append([]packagingusps.OrderOption{}, puq.order...),
		inters:                              append([]Interceptor{}, puq.inters...),
		predicates:                          append([]predicate.PackagingUSPS{}, puq.predicates...),
		withTenant:                          puq.withTenant.Clone(),
		withPackaging:                       puq.withPackaging.Clone(),
		withPackagingUSPSRateIndicator:      puq.withPackagingUSPSRateIndicator.Clone(),
		withPackagingUSPSProcessingCategory: puq.withPackagingUSPSProcessingCategory.Clone(),
		// clone intermediate query.
		sql:  puq.sql.Clone(),
		path: puq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (puq *PackagingUSPSQuery) WithTenant(opts ...func(*TenantQuery)) *PackagingUSPSQuery {
	query := (&TenantClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puq.withTenant = query
	return puq
}

// WithPackaging tells the query-builder to eager-load the nodes that are connected to
// the "packaging" edge. The optional arguments are used to configure the query builder of the edge.
func (puq *PackagingUSPSQuery) WithPackaging(opts ...func(*PackagingQuery)) *PackagingUSPSQuery {
	query := (&PackagingClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puq.withPackaging = query
	return puq
}

// WithPackagingUSPSRateIndicator tells the query-builder to eager-load the nodes that are connected to
// the "packaging_usps_rate_indicator" edge. The optional arguments are used to configure the query builder of the edge.
func (puq *PackagingUSPSQuery) WithPackagingUSPSRateIndicator(opts ...func(*PackagingUSPSRateIndicatorQuery)) *PackagingUSPSQuery {
	query := (&PackagingUSPSRateIndicatorClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puq.withPackagingUSPSRateIndicator = query
	return puq
}

// WithPackagingUSPSProcessingCategory tells the query-builder to eager-load the nodes that are connected to
// the "packaging_usps_processing_category" edge. The optional arguments are used to configure the query builder of the edge.
func (puq *PackagingUSPSQuery) WithPackagingUSPSProcessingCategory(opts ...func(*PackagingUSPSProcessingCategoryQuery)) *PackagingUSPSQuery {
	query := (&PackagingUSPSProcessingCategoryClient{config: puq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	puq.withPackagingUSPSProcessingCategory = query
	return puq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PackagingUSPS.Query().
//		GroupBy(packagingusps.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (puq *PackagingUSPSQuery) GroupBy(field string, fields ...string) *PackagingUSPSGroupBy {
	puq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PackagingUSPSGroupBy{build: puq}
	grbuild.flds = &puq.ctx.Fields
	grbuild.label = packagingusps.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.PackagingUSPS.Query().
//		Select(packagingusps.FieldTenantID).
//		Scan(ctx, &v)
func (puq *PackagingUSPSQuery) Select(fields ...string) *PackagingUSPSSelect {
	puq.ctx.Fields = append(puq.ctx.Fields, fields...)
	sbuild := &PackagingUSPSSelect{PackagingUSPSQuery: puq}
	sbuild.label = packagingusps.Label
	sbuild.flds, sbuild.scan = &puq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PackagingUSPSSelect configured with the given aggregations.
func (puq *PackagingUSPSQuery) Aggregate(fns ...AggregateFunc) *PackagingUSPSSelect {
	return puq.Select().Aggregate(fns...)
}

func (puq *PackagingUSPSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range puq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, puq); err != nil {
				return err
			}
		}
	}
	for _, f := range puq.ctx.Fields {
		if !packagingusps.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if puq.path != nil {
		prev, err := puq.path(ctx)
		if err != nil {
			return err
		}
		puq.sql = prev
	}
	if packagingusps.Policy == nil {
		return errors.New("ent: uninitialized packagingusps.Policy (forgotten import ent/runtime?)")
	}
	if err := packagingusps.Policy.EvalQuery(ctx, puq); err != nil {
		return err
	}
	return nil
}

func (puq *PackagingUSPSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PackagingUSPS, error) {
	var (
		nodes       = []*PackagingUSPS{}
		withFKs     = puq.withFKs
		_spec       = puq.querySpec()
		loadedTypes = [4]bool{
			puq.withTenant != nil,
			puq.withPackaging != nil,
			puq.withPackagingUSPSRateIndicator != nil,
			puq.withPackagingUSPSProcessingCategory != nil,
		}
	)
	if puq.withPackaging != nil || puq.withPackagingUSPSRateIndicator != nil || puq.withPackagingUSPSProcessingCategory != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, packagingusps.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PackagingUSPS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PackagingUSPS{config: puq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(puq.modifiers) > 0 {
		_spec.Modifiers = puq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, puq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := puq.withTenant; query != nil {
		if err := puq.loadTenant(ctx, query, nodes, nil,
			func(n *PackagingUSPS, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := puq.withPackaging; query != nil {
		if err := puq.loadPackaging(ctx, query, nodes, nil,
			func(n *PackagingUSPS, e *Packaging) { n.Edges.Packaging = e }); err != nil {
			return nil, err
		}
	}
	if query := puq.withPackagingUSPSRateIndicator; query != nil {
		if err := puq.loadPackagingUSPSRateIndicator(ctx, query, nodes, nil,
			func(n *PackagingUSPS, e *PackagingUSPSRateIndicator) { n.Edges.PackagingUSPSRateIndicator = e }); err != nil {
			return nil, err
		}
	}
	if query := puq.withPackagingUSPSProcessingCategory; query != nil {
		if err := puq.loadPackagingUSPSProcessingCategory(ctx, query, nodes, nil,
			func(n *PackagingUSPS, e *PackagingUSPSProcessingCategory) {
				n.Edges.PackagingUSPSProcessingCategory = e
			}); err != nil {
			return nil, err
		}
	}
	for i := range puq.loadTotal {
		if err := puq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (puq *PackagingUSPSQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*PackagingUSPS, init func(*PackagingUSPS), assign func(*PackagingUSPS, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PackagingUSPS)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (puq *PackagingUSPSQuery) loadPackaging(ctx context.Context, query *PackagingQuery, nodes []*PackagingUSPS, init func(*PackagingUSPS), assign func(*PackagingUSPS, *Packaging)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PackagingUSPS)
	for i := range nodes {
		if nodes[i].packaging_packaging_usps == nil {
			continue
		}
		fk := *nodes[i].packaging_packaging_usps
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packaging.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "packaging_packaging_usps" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (puq *PackagingUSPSQuery) loadPackagingUSPSRateIndicator(ctx context.Context, query *PackagingUSPSRateIndicatorQuery, nodes []*PackagingUSPS, init func(*PackagingUSPS), assign func(*PackagingUSPS, *PackagingUSPSRateIndicator)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PackagingUSPS)
	for i := range nodes {
		if nodes[i].packaging_usps_packaging_usps_rate_indicator == nil {
			continue
		}
		fk := *nodes[i].packaging_usps_packaging_usps_rate_indicator
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packaginguspsrateindicator.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "packaging_usps_packaging_usps_rate_indicator" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (puq *PackagingUSPSQuery) loadPackagingUSPSProcessingCategory(ctx context.Context, query *PackagingUSPSProcessingCategoryQuery, nodes []*PackagingUSPS, init func(*PackagingUSPS), assign func(*PackagingUSPS, *PackagingUSPSProcessingCategory)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PackagingUSPS)
	for i := range nodes {
		if nodes[i].packaging_usps_packaging_usps_processing_category == nil {
			continue
		}
		fk := *nodes[i].packaging_usps_packaging_usps_processing_category
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(packaginguspsprocessingcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "packaging_usps_packaging_usps_processing_category" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (puq *PackagingUSPSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := puq.querySpec()
	if len(puq.modifiers) > 0 {
		_spec.Modifiers = puq.modifiers
	}
	_spec.Node.Columns = puq.ctx.Fields
	if len(puq.ctx.Fields) > 0 {
		_spec.Unique = puq.ctx.Unique != nil && *puq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, puq.driver, _spec)
}

func (puq *PackagingUSPSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(packagingusps.Table, packagingusps.Columns, sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString))
	_spec.From = puq.sql
	if unique := puq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if puq.path != nil {
		_spec.Unique = true
	}
	if fields := puq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagingusps.FieldID)
		for i := range fields {
			if fields[i] != packagingusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if puq.withTenant != nil {
			_spec.Node.AddColumnOnce(packagingusps.FieldTenantID)
		}
	}
	if ps := puq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := puq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := puq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := puq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (puq *PackagingUSPSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(puq.driver.Dialect())
	t1 := builder.Table(packagingusps.Table)
	columns := puq.ctx.Fields
	if len(columns) == 0 {
		columns = packagingusps.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if puq.sql != nil {
		selector = puq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if puq.ctx.Unique != nil && *puq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range puq.predicates {
		p(selector)
	}
	for _, p := range puq.order {
		p(selector)
	}
	if offset := puq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := puq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PackagingUSPSGroupBy is the group-by builder for PackagingUSPS entities.
type PackagingUSPSGroupBy struct {
	selector
	build *PackagingUSPSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pugb *PackagingUSPSGroupBy) Aggregate(fns ...AggregateFunc) *PackagingUSPSGroupBy {
	pugb.fns = append(pugb.fns, fns...)
	return pugb
}

// Scan applies the selector query and scans the result into the given value.
func (pugb *PackagingUSPSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pugb.build.ctx, ent.OpQueryGroupBy)
	if err := pugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingUSPSQuery, *PackagingUSPSGroupBy](ctx, pugb.build, pugb, pugb.build.inters, v)
}

func (pugb *PackagingUSPSGroupBy) sqlScan(ctx context.Context, root *PackagingUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pugb.fns))
	for _, fn := range pugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pugb.flds)+len(pugb.fns))
		for _, f := range *pugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PackagingUSPSSelect is the builder for selecting fields of PackagingUSPS entities.
type PackagingUSPSSelect struct {
	*PackagingUSPSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pus *PackagingUSPSSelect) Aggregate(fns ...AggregateFunc) *PackagingUSPSSelect {
	pus.fns = append(pus.fns, fns...)
	return pus
}

// Scan applies the selector query and scans the result into the given value.
func (pus *PackagingUSPSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pus.ctx, ent.OpQuerySelect)
	if err := pus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingUSPSQuery, *PackagingUSPSSelect](ctx, pus.PackagingUSPSQuery, pus, pus.inters, v)
}

func (pus *PackagingUSPSSelect) sqlScan(ctx context.Context, root *PackagingUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pus.fns))
	for _, fn := range pus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
