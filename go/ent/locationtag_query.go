// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocationTagQuery is the builder for querying LocationTag entities.
type LocationTagQuery struct {
	config
	ctx               *QueryContext
	order             []locationtag.OrderOption
	inters            []Interceptor
	predicates        []predicate.LocationTag
	withLocation      *LocationQuery
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*LocationTag) error
	withNamedLocation map[string]*LocationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LocationTagQuery builder.
func (ltq *LocationTagQuery) Where(ps ...predicate.LocationTag) *LocationTagQuery {
	ltq.predicates = append(ltq.predicates, ps...)
	return ltq
}

// Limit the number of records to be returned by this query.
func (ltq *LocationTagQuery) Limit(limit int) *LocationTagQuery {
	ltq.ctx.Limit = &limit
	return ltq
}

// Offset to start from.
func (ltq *LocationTagQuery) Offset(offset int) *LocationTagQuery {
	ltq.ctx.Offset = &offset
	return ltq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ltq *LocationTagQuery) Unique(unique bool) *LocationTagQuery {
	ltq.ctx.Unique = &unique
	return ltq
}

// Order specifies how the records should be ordered.
func (ltq *LocationTagQuery) Order(o ...locationtag.OrderOption) *LocationTagQuery {
	ltq.order = append(ltq.order, o...)
	return ltq
}

// QueryLocation chains the current query on the "location" edge.
func (ltq *LocationTagQuery) QueryLocation() *LocationQuery {
	query := (&LocationClient{config: ltq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ltq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ltq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(locationtag.Table, locationtag.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, locationtag.LocationTable, locationtag.LocationPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ltq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LocationTag entity from the query.
// Returns a *NotFoundError when no LocationTag was found.
func (ltq *LocationTagQuery) First(ctx context.Context) (*LocationTag, error) {
	nodes, err := ltq.Limit(1).All(setContextOp(ctx, ltq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{locationtag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ltq *LocationTagQuery) FirstX(ctx context.Context) *LocationTag {
	node, err := ltq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LocationTag ID from the query.
// Returns a *NotFoundError when no LocationTag ID was found.
func (ltq *LocationTagQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = ltq.Limit(1).IDs(setContextOp(ctx, ltq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{locationtag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ltq *LocationTagQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := ltq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LocationTag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one LocationTag entity is found.
// Returns a *NotFoundError when no LocationTag entities are found.
func (ltq *LocationTagQuery) Only(ctx context.Context) (*LocationTag, error) {
	nodes, err := ltq.Limit(2).All(setContextOp(ctx, ltq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{locationtag.Label}
	default:
		return nil, &NotSingularError{locationtag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ltq *LocationTagQuery) OnlyX(ctx context.Context) *LocationTag {
	node, err := ltq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LocationTag ID in the query.
// Returns a *NotSingularError when more than one LocationTag ID is found.
// Returns a *NotFoundError when no entities are found.
func (ltq *LocationTagQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = ltq.Limit(2).IDs(setContextOp(ctx, ltq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{locationtag.Label}
	default:
		err = &NotSingularError{locationtag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ltq *LocationTagQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := ltq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LocationTags.
func (ltq *LocationTagQuery) All(ctx context.Context) ([]*LocationTag, error) {
	ctx = setContextOp(ctx, ltq.ctx, ent.OpQueryAll)
	if err := ltq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*LocationTag, *LocationTagQuery]()
	return withInterceptors[[]*LocationTag](ctx, ltq, qr, ltq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ltq *LocationTagQuery) AllX(ctx context.Context) []*LocationTag {
	nodes, err := ltq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LocationTag IDs.
func (ltq *LocationTagQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if ltq.ctx.Unique == nil && ltq.path != nil {
		ltq.Unique(true)
	}
	ctx = setContextOp(ctx, ltq.ctx, ent.OpQueryIDs)
	if err = ltq.Select(locationtag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ltq *LocationTagQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := ltq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ltq *LocationTagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ltq.ctx, ent.OpQueryCount)
	if err := ltq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ltq, querierCount[*LocationTagQuery](), ltq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ltq *LocationTagQuery) CountX(ctx context.Context) int {
	count, err := ltq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ltq *LocationTagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ltq.ctx, ent.OpQueryExist)
	switch _, err := ltq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ltq *LocationTagQuery) ExistX(ctx context.Context) bool {
	exist, err := ltq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LocationTagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ltq *LocationTagQuery) Clone() *LocationTagQuery {
	if ltq == nil {
		return nil
	}
	return &LocationTagQuery{
		config:       ltq.config,
		ctx:          ltq.ctx.Clone(),
		order:        append([]locationtag.OrderOption{}, ltq.order...),
		inters:       append([]Interceptor{}, ltq.inters...),
		predicates:   append([]predicate.LocationTag{}, ltq.predicates...),
		withLocation: ltq.withLocation.Clone(),
		// clone intermediate query.
		sql:  ltq.sql.Clone(),
		path: ltq.path,
	}
}

// WithLocation tells the query-builder to eager-load the nodes that are connected to
// the "location" edge. The optional arguments are used to configure the query builder of the edge.
func (ltq *LocationTagQuery) WithLocation(opts ...func(*LocationQuery)) *LocationTagQuery {
	query := (&LocationClient{config: ltq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ltq.withLocation = query
	return ltq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.LocationTag.Query().
//		GroupBy(locationtag.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ltq *LocationTagQuery) GroupBy(field string, fields ...string) *LocationTagGroupBy {
	ltq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LocationTagGroupBy{build: ltq}
	grbuild.flds = &ltq.ctx.Fields
	grbuild.label = locationtag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.LocationTag.Query().
//		Select(locationtag.FieldLabel).
//		Scan(ctx, &v)
func (ltq *LocationTagQuery) Select(fields ...string) *LocationTagSelect {
	ltq.ctx.Fields = append(ltq.ctx.Fields, fields...)
	sbuild := &LocationTagSelect{LocationTagQuery: ltq}
	sbuild.label = locationtag.Label
	sbuild.flds, sbuild.scan = &ltq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LocationTagSelect configured with the given aggregations.
func (ltq *LocationTagQuery) Aggregate(fns ...AggregateFunc) *LocationTagSelect {
	return ltq.Select().Aggregate(fns...)
}

func (ltq *LocationTagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ltq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ltq); err != nil {
				return err
			}
		}
	}
	for _, f := range ltq.ctx.Fields {
		if !locationtag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ltq.path != nil {
		prev, err := ltq.path(ctx)
		if err != nil {
			return err
		}
		ltq.sql = prev
	}
	if locationtag.Policy == nil {
		return errors.New("ent: uninitialized locationtag.Policy (forgotten import ent/runtime?)")
	}
	if err := locationtag.Policy.EvalQuery(ctx, ltq); err != nil {
		return err
	}
	return nil
}

func (ltq *LocationTagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*LocationTag, error) {
	var (
		nodes       = []*LocationTag{}
		_spec       = ltq.querySpec()
		loadedTypes = [1]bool{
			ltq.withLocation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*LocationTag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &LocationTag{config: ltq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ltq.modifiers) > 0 {
		_spec.Modifiers = ltq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ltq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ltq.withLocation; query != nil {
		if err := ltq.loadLocation(ctx, query, nodes,
			func(n *LocationTag) { n.Edges.Location = []*Location{} },
			func(n *LocationTag, e *Location) { n.Edges.Location = append(n.Edges.Location, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ltq.withNamedLocation {
		if err := ltq.loadLocation(ctx, query, nodes,
			func(n *LocationTag) { n.appendNamedLocation(name) },
			func(n *LocationTag, e *Location) { n.appendNamedLocation(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ltq.loadTotal {
		if err := ltq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ltq *LocationTagQuery) loadLocation(ctx context.Context, query *LocationQuery, nodes []*LocationTag, init func(*LocationTag), assign func(*LocationTag, *Location)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*LocationTag)
	nids := make(map[pulid.ID]map[*LocationTag]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(locationtag.LocationTable)
		s.Join(joinT).On(s.C(location.FieldID), joinT.C(locationtag.LocationPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(locationtag.LocationPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(locationtag.LocationPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*LocationTag]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Location](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "location" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ltq *LocationTagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ltq.querySpec()
	if len(ltq.modifiers) > 0 {
		_spec.Modifiers = ltq.modifiers
	}
	_spec.Node.Columns = ltq.ctx.Fields
	if len(ltq.ctx.Fields) > 0 {
		_spec.Unique = ltq.ctx.Unique != nil && *ltq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ltq.driver, _spec)
}

func (ltq *LocationTagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(locationtag.Table, locationtag.Columns, sqlgraph.NewFieldSpec(locationtag.FieldID, field.TypeString))
	_spec.From = ltq.sql
	if unique := ltq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ltq.path != nil {
		_spec.Unique = true
	}
	if fields := ltq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, locationtag.FieldID)
		for i := range fields {
			if fields[i] != locationtag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ltq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ltq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ltq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ltq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ltq *LocationTagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ltq.driver.Dialect())
	t1 := builder.Table(locationtag.Table)
	columns := ltq.ctx.Fields
	if len(columns) == 0 {
		columns = locationtag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ltq.sql != nil {
		selector = ltq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ltq.ctx.Unique != nil && *ltq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ltq.predicates {
		p(selector)
	}
	for _, p := range ltq.order {
		p(selector)
	}
	if offset := ltq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ltq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedLocation tells the query-builder to eager-load the nodes that are connected to the "location"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ltq *LocationTagQuery) WithNamedLocation(name string, opts ...func(*LocationQuery)) *LocationTagQuery {
	query := (&LocationClient{config: ltq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ltq.withNamedLocation == nil {
		ltq.withNamedLocation = make(map[string]*LocationQuery)
	}
	ltq.withNamedLocation[name] = query
	return ltq
}

// LocationTagGroupBy is the group-by builder for LocationTag entities.
type LocationTagGroupBy struct {
	selector
	build *LocationTagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ltgb *LocationTagGroupBy) Aggregate(fns ...AggregateFunc) *LocationTagGroupBy {
	ltgb.fns = append(ltgb.fns, fns...)
	return ltgb
}

// Scan applies the selector query and scans the result into the given value.
func (ltgb *LocationTagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ltgb.build.ctx, ent.OpQueryGroupBy)
	if err := ltgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocationTagQuery, *LocationTagGroupBy](ctx, ltgb.build, ltgb, ltgb.build.inters, v)
}

func (ltgb *LocationTagGroupBy) sqlScan(ctx context.Context, root *LocationTagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ltgb.fns))
	for _, fn := range ltgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ltgb.flds)+len(ltgb.fns))
		for _, f := range *ltgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ltgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ltgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LocationTagSelect is the builder for selecting fields of LocationTag entities.
type LocationTagSelect struct {
	*LocationTagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (lts *LocationTagSelect) Aggregate(fns ...AggregateFunc) *LocationTagSelect {
	lts.fns = append(lts.fns, fns...)
	return lts
}

// Scan applies the selector query and scans the result into the given value.
func (lts *LocationTagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lts.ctx, ent.OpQuerySelect)
	if err := lts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocationTagQuery, *LocationTagSelect](ctx, lts.LocationTagQuery, lts, lts.inters, v)
}

func (lts *LocationTagSelect) sqlScan(ctx context.Context, root *LocationTagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(lts.fns))
	for _, fn := range lts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*lts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
