// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceUSPSUpdate is the builder for updating CarrierAdditionalServiceUSPS entities.
type CarrierAdditionalServiceUSPSUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceUSPSMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceUSPSUpdate builder.
func (casuu *CarrierAdditionalServiceUSPSUpdate) Where(ps ...predicate.CarrierAdditionalServiceUSPS) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.Where(ps...)
	return casuu
}

// SetLabel sets the "label" field.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetLabel(s string) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.SetLabel(s)
	return casuu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceUSPSUpdate {
	if s != nil {
		casuu.SetLabel(*s)
	}
	return casuu
}

// SetCommonlyUsed sets the "commonly_used" field.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetCommonlyUsed(b bool) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.SetCommonlyUsed(b)
	return casuu
}

// SetNillableCommonlyUsed sets the "commonly_used" field if the given value is not nil.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetNillableCommonlyUsed(b *bool) *CarrierAdditionalServiceUSPSUpdate {
	if b != nil {
		casuu.SetCommonlyUsed(*b)
	}
	return casuu
}

// SetInternalID sets the "internal_id" field.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetInternalID(ci carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.SetInternalID(ci)
	return casuu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetNillableInternalID(ci *carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpdate {
	if ci != nil {
		casuu.SetInternalID(*ci)
	}
	return casuu
}

// SetAPICode sets the "api_code" field.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetAPICode(s string) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.SetAPICode(s)
	return casuu
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetNillableAPICode(s *string) *CarrierAdditionalServiceUSPSUpdate {
	if s != nil {
		casuu.SetAPICode(*s)
	}
	return casuu
}

// SetCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetCarrierServiceUSPSID(id pulid.ID) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.SetCarrierServiceUSPSID(id)
	return casuu
}

// SetNillableCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID if the given value is not nil.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetNillableCarrierServiceUSPSID(id *pulid.ID) *CarrierAdditionalServiceUSPSUpdate {
	if id != nil {
		casuu = casuu.SetCarrierServiceUSPSID(*id)
	}
	return casuu
}

// SetCarrierServiceUSPS sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SetCarrierServiceUSPS(c *CarrierServiceUSPS) *CarrierAdditionalServiceUSPSUpdate {
	return casuu.SetCarrierServiceUSPSID(c.ID)
}

// AddDeliveryOptionUspIDs adds the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by IDs.
func (casuu *CarrierAdditionalServiceUSPSUpdate) AddDeliveryOptionUspIDs(ids ...pulid.ID) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.AddDeliveryOptionUspIDs(ids...)
	return casuu
}

// AddDeliveryOptionUSPS adds the "delivery_option_usps" edges to the DeliveryOptionUSPS entity.
func (casuu *CarrierAdditionalServiceUSPSUpdate) AddDeliveryOptionUSPS(d ...*DeliveryOptionUSPS) *CarrierAdditionalServiceUSPSUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casuu.AddDeliveryOptionUspIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceUSPSMutation object of the builder.
func (casuu *CarrierAdditionalServiceUSPSUpdate) Mutation() *CarrierAdditionalServiceUSPSMutation {
	return casuu.mutation
}

// ClearCarrierServiceUSPS clears the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (casuu *CarrierAdditionalServiceUSPSUpdate) ClearCarrierServiceUSPS() *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.ClearCarrierServiceUSPS()
	return casuu
}

// ClearDeliveryOptionUSPS clears all "delivery_option_usps" edges to the DeliveryOptionUSPS entity.
func (casuu *CarrierAdditionalServiceUSPSUpdate) ClearDeliveryOptionUSPS() *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.ClearDeliveryOptionUSPS()
	return casuu
}

// RemoveDeliveryOptionUspIDs removes the "delivery_option_usps" edge to DeliveryOptionUSPS entities by IDs.
func (casuu *CarrierAdditionalServiceUSPSUpdate) RemoveDeliveryOptionUspIDs(ids ...pulid.ID) *CarrierAdditionalServiceUSPSUpdate {
	casuu.mutation.RemoveDeliveryOptionUspIDs(ids...)
	return casuu
}

// RemoveDeliveryOptionUSPS removes "delivery_option_usps" edges to DeliveryOptionUSPS entities.
func (casuu *CarrierAdditionalServiceUSPSUpdate) RemoveDeliveryOptionUSPS(d ...*DeliveryOptionUSPS) *CarrierAdditionalServiceUSPSUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casuu.RemoveDeliveryOptionUspIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casuu *CarrierAdditionalServiceUSPSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casuu.sqlSave, casuu.mutation, casuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casuu *CarrierAdditionalServiceUSPSUpdate) SaveX(ctx context.Context) int {
	affected, err := casuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casuu *CarrierAdditionalServiceUSPSUpdate) Exec(ctx context.Context) error {
	_, err := casuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casuu *CarrierAdditionalServiceUSPSUpdate) ExecX(ctx context.Context) {
	if err := casuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (casuu *CarrierAdditionalServiceUSPSUpdate) check() error {
	if v, ok := casuu.mutation.InternalID(); ok {
		if err := carrieradditionalserviceusps.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "CarrierAdditionalServiceUSPS.internal_id": %w`, err)}
		}
	}
	return nil
}

func (casuu *CarrierAdditionalServiceUSPSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := casuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.Columns, sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString))
	if ps := casuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casuu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldLabel, field.TypeString, value)
	}
	if value, ok := casuu.mutation.CommonlyUsed(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldCommonlyUsed, field.TypeBool, value)
	}
	if value, ok := casuu.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldInternalID, field.TypeEnum, value)
	}
	if value, ok := casuu.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldAPICode, field.TypeString, value)
	}
	if casuu.mutation.CarrierServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalserviceusps.CarrierServiceUSPSTable,
			Columns: []string{carrieradditionalserviceusps.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casuu.mutation.CarrierServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalserviceusps.CarrierServiceUSPSTable,
			Columns: []string{carrieradditionalserviceusps.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casuu.mutation.DeliveryOptionUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casuu.mutation.RemovedDeliveryOptionUSPSIDs(); len(nodes) > 0 && !casuu.mutation.DeliveryOptionUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casuu.mutation.DeliveryOptionUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalserviceusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casuu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceUSPSUpdateOne is the builder for updating a single CarrierAdditionalServiceUSPS entity.
type CarrierAdditionalServiceUSPSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceUSPSMutation
}

// SetLabel sets the "label" field.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetLabel(s string) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.SetLabel(s)
	return casuuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceUSPSUpdateOne {
	if s != nil {
		casuuo.SetLabel(*s)
	}
	return casuuo
}

// SetCommonlyUsed sets the "commonly_used" field.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetCommonlyUsed(b bool) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.SetCommonlyUsed(b)
	return casuuo
}

// SetNillableCommonlyUsed sets the "commonly_used" field if the given value is not nil.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetNillableCommonlyUsed(b *bool) *CarrierAdditionalServiceUSPSUpdateOne {
	if b != nil {
		casuuo.SetCommonlyUsed(*b)
	}
	return casuuo
}

// SetInternalID sets the "internal_id" field.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetInternalID(ci carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.SetInternalID(ci)
	return casuuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetNillableInternalID(ci *carrieradditionalserviceusps.InternalID) *CarrierAdditionalServiceUSPSUpdateOne {
	if ci != nil {
		casuuo.SetInternalID(*ci)
	}
	return casuuo
}

// SetAPICode sets the "api_code" field.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetAPICode(s string) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.SetAPICode(s)
	return casuuo
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetNillableAPICode(s *string) *CarrierAdditionalServiceUSPSUpdateOne {
	if s != nil {
		casuuo.SetAPICode(*s)
	}
	return casuuo
}

// SetCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetCarrierServiceUSPSID(id pulid.ID) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.SetCarrierServiceUSPSID(id)
	return casuuo
}

// SetNillableCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID if the given value is not nil.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetNillableCarrierServiceUSPSID(id *pulid.ID) *CarrierAdditionalServiceUSPSUpdateOne {
	if id != nil {
		casuuo = casuuo.SetCarrierServiceUSPSID(*id)
	}
	return casuuo
}

// SetCarrierServiceUSPS sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SetCarrierServiceUSPS(c *CarrierServiceUSPS) *CarrierAdditionalServiceUSPSUpdateOne {
	return casuuo.SetCarrierServiceUSPSID(c.ID)
}

// AddDeliveryOptionUspIDs adds the "delivery_option_usps" edge to the DeliveryOptionUSPS entity by IDs.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) AddDeliveryOptionUspIDs(ids ...pulid.ID) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.AddDeliveryOptionUspIDs(ids...)
	return casuuo
}

// AddDeliveryOptionUSPS adds the "delivery_option_usps" edges to the DeliveryOptionUSPS entity.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) AddDeliveryOptionUSPS(d ...*DeliveryOptionUSPS) *CarrierAdditionalServiceUSPSUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casuuo.AddDeliveryOptionUspIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceUSPSMutation object of the builder.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) Mutation() *CarrierAdditionalServiceUSPSMutation {
	return casuuo.mutation
}

// ClearCarrierServiceUSPS clears the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) ClearCarrierServiceUSPS() *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.ClearCarrierServiceUSPS()
	return casuuo
}

// ClearDeliveryOptionUSPS clears all "delivery_option_usps" edges to the DeliveryOptionUSPS entity.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) ClearDeliveryOptionUSPS() *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.ClearDeliveryOptionUSPS()
	return casuuo
}

// RemoveDeliveryOptionUspIDs removes the "delivery_option_usps" edge to DeliveryOptionUSPS entities by IDs.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) RemoveDeliveryOptionUspIDs(ids ...pulid.ID) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.RemoveDeliveryOptionUspIDs(ids...)
	return casuuo
}

// RemoveDeliveryOptionUSPS removes "delivery_option_usps" edges to DeliveryOptionUSPS entities.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) RemoveDeliveryOptionUSPS(d ...*DeliveryOptionUSPS) *CarrierAdditionalServiceUSPSUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casuuo.RemoveDeliveryOptionUspIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceUSPSUpdate builder.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceUSPS) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.mutation.Where(ps...)
	return casuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceUSPSUpdateOne {
	casuuo.fields = append([]string{field}, fields...)
	return casuuo
}

// Save executes the query and returns the updated CarrierAdditionalServiceUSPS entity.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceUSPS, error) {
	return withHooks(ctx, casuuo.sqlSave, casuuo.mutation, casuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceUSPS {
	node, err := casuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) Exec(ctx context.Context) error {
	_, err := casuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) ExecX(ctx context.Context) {
	if err := casuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) check() error {
	if v, ok := casuuo.mutation.InternalID(); ok {
		if err := carrieradditionalserviceusps.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "CarrierAdditionalServiceUSPS.internal_id": %w`, err)}
		}
	}
	return nil
}

func (casuuo *CarrierAdditionalServiceUSPSUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceUSPS, err error) {
	if err := casuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.Columns, sqlgraph.NewFieldSpec(carrieradditionalserviceusps.FieldID, field.TypeString))
	id, ok := casuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceUSPS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalserviceusps.FieldID)
		for _, f := range fields {
			if !carrieradditionalserviceusps.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalserviceusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casuuo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldLabel, field.TypeString, value)
	}
	if value, ok := casuuo.mutation.CommonlyUsed(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldCommonlyUsed, field.TypeBool, value)
	}
	if value, ok := casuuo.mutation.InternalID(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldInternalID, field.TypeEnum, value)
	}
	if value, ok := casuuo.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalserviceusps.FieldAPICode, field.TypeString, value)
	}
	if casuuo.mutation.CarrierServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalserviceusps.CarrierServiceUSPSTable,
			Columns: []string{carrieradditionalserviceusps.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casuuo.mutation.CarrierServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalserviceusps.CarrierServiceUSPSTable,
			Columns: []string{carrieradditionalserviceusps.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casuuo.mutation.DeliveryOptionUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casuuo.mutation.RemovedDeliveryOptionUSPSIDs(); len(nodes) > 0 && !casuuo.mutation.DeliveryOptionUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casuuo.mutation.DeliveryOptionUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptionusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceUSPS{config: casuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalserviceusps.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casuuo.mutation.done = true
	return _node, nil
}
