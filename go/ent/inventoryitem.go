// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// InventoryItem is the model entity for the InventoryItem schema.
type InventoryItem struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ExternalID holds the value of the "external_ID" field.
	ExternalID string `json:"external_ID,omitempty"`
	// Used when country specific code not available
	Code *string `json:"code,omitempty"`
	// Duplicated to match Shopify InventoryItem/ProductVariant
	Sku *string `json:"sku,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventoryItemQuery when eager-loading is set.
	Edges                            InventoryItemEdges `json:"edges"`
	inventory_item_country_of_origin *pulid.ID
	product_variant_inventory_item   *pulid.ID
	selectValues                     sql.SelectValues
}

// InventoryItemEdges holds the relations/edges for other nodes in the graph.
type InventoryItemEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Takes precedent over general HS code
	CountryHarmonizedCode []*CountryHarmonizedCode `json:"country_harmonized_code,omitempty"`
	// Can be null in Shopify
	CountryOfOrigin *Country `json:"country_of_origin,omitempty"`
	// ProductVariant holds the value of the product_variant edge.
	ProductVariant *ProductVariant `json:"product_variant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedCountryHarmonizedCode map[string][]*CountryHarmonizedCode
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CountryHarmonizedCodeOrErr returns the CountryHarmonizedCode value or an error if the edge
// was not loaded in eager-loading.
func (e InventoryItemEdges) CountryHarmonizedCodeOrErr() ([]*CountryHarmonizedCode, error) {
	if e.loadedTypes[1] {
		return e.CountryHarmonizedCode, nil
	}
	return nil, &NotLoadedError{edge: "country_harmonized_code"}
}

// CountryOfOriginOrErr returns the CountryOfOrigin value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) CountryOfOriginOrErr() (*Country, error) {
	if e.CountryOfOrigin != nil {
		return e.CountryOfOrigin, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country_of_origin"}
}

// ProductVariantOrErr returns the ProductVariant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InventoryItemEdges) ProductVariantOrErr() (*ProductVariant, error) {
	if e.ProductVariant != nil {
		return e.ProductVariant, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: productvariant.Label}
	}
	return nil, &NotLoadedError{edge: "product_variant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InventoryItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventoryitem.FieldID, inventoryitem.FieldTenantID:
			values[i] = new(pulid.ID)
		case inventoryitem.FieldExternalID, inventoryitem.FieldCode, inventoryitem.FieldSku:
			values[i] = new(sql.NullString)
		case inventoryitem.ForeignKeys[0]: // inventory_item_country_of_origin
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case inventoryitem.ForeignKeys[1]: // product_variant_inventory_item
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InventoryItem fields.
func (ii *InventoryItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inventoryitem.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ii.ID = *value
			}
		case inventoryitem.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				ii.TenantID = *value
			}
		case inventoryitem.FieldExternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_ID", values[i])
			} else if value.Valid {
				ii.ExternalID = value.String
			}
		case inventoryitem.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ii.Code = new(string)
				*ii.Code = value.String
			}
		case inventoryitem.FieldSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				ii.Sku = new(string)
				*ii.Sku = value.String
			}
		case inventoryitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_item_country_of_origin", values[i])
			} else if value.Valid {
				ii.inventory_item_country_of_origin = new(pulid.ID)
				*ii.inventory_item_country_of_origin = *value.S.(*pulid.ID)
			}
		case inventoryitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field product_variant_inventory_item", values[i])
			} else if value.Valid {
				ii.product_variant_inventory_item = new(pulid.ID)
				*ii.product_variant_inventory_item = *value.S.(*pulid.ID)
			}
		default:
			ii.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InventoryItem.
// This includes values selected through modifiers, order, etc.
func (ii *InventoryItem) Value(name string) (ent.Value, error) {
	return ii.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryTenant() *TenantQuery {
	return NewInventoryItemClient(ii.config).QueryTenant(ii)
}

// QueryCountryHarmonizedCode queries the "country_harmonized_code" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryCountryHarmonizedCode() *CountryHarmonizedCodeQuery {
	return NewInventoryItemClient(ii.config).QueryCountryHarmonizedCode(ii)
}

// QueryCountryOfOrigin queries the "country_of_origin" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryCountryOfOrigin() *CountryQuery {
	return NewInventoryItemClient(ii.config).QueryCountryOfOrigin(ii)
}

// QueryProductVariant queries the "product_variant" edge of the InventoryItem entity.
func (ii *InventoryItem) QueryProductVariant() *ProductVariantQuery {
	return NewInventoryItemClient(ii.config).QueryProductVariant(ii)
}

// Update returns a builder for updating this InventoryItem.
// Note that you need to call InventoryItem.Unwrap() before calling this method if this InventoryItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ii *InventoryItem) Update() *InventoryItemUpdateOne {
	return NewInventoryItemClient(ii.config).UpdateOne(ii)
}

// Unwrap unwraps the InventoryItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ii *InventoryItem) Unwrap() *InventoryItem {
	_tx, ok := ii.config.driver.(*txDriver)
	if !ok {
		panic("ent: InventoryItem is not a transactional entity")
	}
	ii.config.driver = _tx.drv
	return ii
}

// String implements the fmt.Stringer.
func (ii *InventoryItem) String() string {
	var builder strings.Builder
	builder.WriteString("InventoryItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ii.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", ii.TenantID))
	builder.WriteString(", ")
	builder.WriteString("external_ID=")
	builder.WriteString(ii.ExternalID)
	builder.WriteString(", ")
	if v := ii.Code; v != nil {
		builder.WriteString("code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ii.Sku; v != nil {
		builder.WriteString("sku=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCountryHarmonizedCode returns the CountryHarmonizedCode named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ii *InventoryItem) NamedCountryHarmonizedCode(name string) ([]*CountryHarmonizedCode, error) {
	if ii.Edges.namedCountryHarmonizedCode == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ii.Edges.namedCountryHarmonizedCode[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ii *InventoryItem) appendNamedCountryHarmonizedCode(name string, edges ...*CountryHarmonizedCode) {
	if ii.Edges.namedCountryHarmonizedCode == nil {
		ii.Edges.namedCountryHarmonizedCode = make(map[string][]*CountryHarmonizedCode)
	}
	if len(edges) == 0 {
		ii.Edges.namedCountryHarmonizedCode[name] = []*CountryHarmonizedCode{}
	} else {
		ii.Edges.namedCountryHarmonizedCode[name] = append(ii.Edges.namedCountryHarmonizedCode[name], edges...)
	}
}

// InventoryItems is a parsable slice of InventoryItem.
type InventoryItems []*InventoryItem
