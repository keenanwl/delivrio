// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentDAOCreate is the builder for creating a ShipmentDAO entity.
type ShipmentDAOCreate struct {
	config
	mutation *ShipmentDAOMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (sdc *ShipmentDAOCreate) SetTenantID(pu pulid.ID) *ShipmentDAOCreate {
	sdc.mutation.SetTenantID(pu)
	return sdc
}

// SetBarcodeID sets the "barcode_id" field.
func (sdc *ShipmentDAOCreate) SetBarcodeID(s string) *ShipmentDAOCreate {
	sdc.mutation.SetBarcodeID(s)
	return sdc
}

// SetID sets the "id" field.
func (sdc *ShipmentDAOCreate) SetID(pu pulid.ID) *ShipmentDAOCreate {
	sdc.mutation.SetID(pu)
	return sdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sdc *ShipmentDAOCreate) SetNillableID(pu *pulid.ID) *ShipmentDAOCreate {
	if pu != nil {
		sdc.SetID(*pu)
	}
	return sdc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sdc *ShipmentDAOCreate) SetTenant(t *Tenant) *ShipmentDAOCreate {
	return sdc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sdc *ShipmentDAOCreate) SetShipmentID(id pulid.ID) *ShipmentDAOCreate {
	sdc.mutation.SetShipmentID(id)
	return sdc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sdc *ShipmentDAOCreate) SetShipment(s *Shipment) *ShipmentDAOCreate {
	return sdc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentDAOMutation object of the builder.
func (sdc *ShipmentDAOCreate) Mutation() *ShipmentDAOMutation {
	return sdc.mutation
}

// Save creates the ShipmentDAO in the database.
func (sdc *ShipmentDAOCreate) Save(ctx context.Context) (*ShipmentDAO, error) {
	if err := sdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *ShipmentDAOCreate) SaveX(ctx context.Context) *ShipmentDAO {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *ShipmentDAOCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *ShipmentDAOCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *ShipmentDAOCreate) defaults() error {
	if _, ok := sdc.mutation.ID(); !ok {
		if shipmentdao.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmentdao.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmentdao.DefaultID()
		sdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sdc *ShipmentDAOCreate) check() error {
	if _, ok := sdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentDAO.tenant_id"`)}
	}
	if _, ok := sdc.mutation.BarcodeID(); !ok {
		return &ValidationError{Name: "barcode_id", err: errors.New(`ent: missing required field "ShipmentDAO.barcode_id"`)}
	}
	if len(sdc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentDAO.tenant"`)}
	}
	if len(sdc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentDAO.shipment"`)}
	}
	return nil
}

func (sdc *ShipmentDAOCreate) sqlSave(ctx context.Context) (*ShipmentDAO, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *ShipmentDAOCreate) createSpec() (*ShipmentDAO, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentDAO{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentdao.Table, sqlgraph.NewFieldSpec(shipmentdao.FieldID, field.TypeString))
	)
	_spec.OnConflict = sdc.conflict
	if id, ok := sdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sdc.mutation.BarcodeID(); ok {
		_spec.SetField(shipmentdao.FieldBarcodeID, field.TypeString, value)
		_node.BarcodeID = value
	}
	if nodes := sdc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdao.TenantTable,
			Columns: []string{shipmentdao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sdc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdao.ShipmentTable,
			Columns: []string{shipmentdao.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_dao = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentDAO.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentDAOUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sdc *ShipmentDAOCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentDAOUpsertOne {
	sdc.conflict = opts
	return &ShipmentDAOUpsertOne{
		create: sdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdc *ShipmentDAOCreate) OnConflictColumns(columns ...string) *ShipmentDAOUpsertOne {
	sdc.conflict = append(sdc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentDAOUpsertOne{
		create: sdc,
	}
}

type (
	// ShipmentDAOUpsertOne is the builder for "upsert"-ing
	//  one ShipmentDAO node.
	ShipmentDAOUpsertOne struct {
		create *ShipmentDAOCreate
	}

	// ShipmentDAOUpsert is the "OnConflict" setter.
	ShipmentDAOUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentDAOUpsert) SetTenantID(v pulid.ID) *ShipmentDAOUpsert {
	u.Set(shipmentdao.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentDAOUpsert) UpdateTenantID() *ShipmentDAOUpsert {
	u.SetExcluded(shipmentdao.FieldTenantID)
	return u
}

// SetBarcodeID sets the "barcode_id" field.
func (u *ShipmentDAOUpsert) SetBarcodeID(v string) *ShipmentDAOUpsert {
	u.Set(shipmentdao.FieldBarcodeID, v)
	return u
}

// UpdateBarcodeID sets the "barcode_id" field to the value that was provided on create.
func (u *ShipmentDAOUpsert) UpdateBarcodeID() *ShipmentDAOUpsert {
	u.SetExcluded(shipmentdao.FieldBarcodeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentdao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentDAOUpsertOne) UpdateNewValues() *ShipmentDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmentdao.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentDAO.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentDAOUpsertOne) Ignore() *ShipmentDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentDAOUpsertOne) DoNothing() *ShipmentDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentDAOCreate.OnConflict
// documentation for more info.
func (u *ShipmentDAOUpsertOne) Update(set func(*ShipmentDAOUpsert)) *ShipmentDAOUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentDAOUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentDAOUpsertOne) SetTenantID(v pulid.ID) *ShipmentDAOUpsertOne {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentDAOUpsertOne) UpdateTenantID() *ShipmentDAOUpsertOne {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.UpdateTenantID()
	})
}

// SetBarcodeID sets the "barcode_id" field.
func (u *ShipmentDAOUpsertOne) SetBarcodeID(v string) *ShipmentDAOUpsertOne {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.SetBarcodeID(v)
	})
}

// UpdateBarcodeID sets the "barcode_id" field to the value that was provided on create.
func (u *ShipmentDAOUpsertOne) UpdateBarcodeID() *ShipmentDAOUpsertOne {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.UpdateBarcodeID()
	})
}

// Exec executes the query.
func (u *ShipmentDAOUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentDAOCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentDAOUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentDAOUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentDAOUpsertOne.ID is not supported by MySQL driver. Use ShipmentDAOUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentDAOUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentDAOCreateBulk is the builder for creating many ShipmentDAO entities in bulk.
type ShipmentDAOCreateBulk struct {
	config
	err      error
	builders []*ShipmentDAOCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentDAO entities in the database.
func (sdcb *ShipmentDAOCreateBulk) Save(ctx context.Context) ([]*ShipmentDAO, error) {
	if sdcb.err != nil {
		return nil, sdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*ShipmentDAO, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentDAOMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *ShipmentDAOCreateBulk) SaveX(ctx context.Context) []*ShipmentDAO {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *ShipmentDAOCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *ShipmentDAOCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentDAO.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentDAOUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (sdcb *ShipmentDAOCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentDAOUpsertBulk {
	sdcb.conflict = opts
	return &ShipmentDAOUpsertBulk{
		create: sdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentDAO.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdcb *ShipmentDAOCreateBulk) OnConflictColumns(columns ...string) *ShipmentDAOUpsertBulk {
	sdcb.conflict = append(sdcb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentDAOUpsertBulk{
		create: sdcb,
	}
}

// ShipmentDAOUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentDAO nodes.
type ShipmentDAOUpsertBulk struct {
	create *ShipmentDAOCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentDAO.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentdao.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentDAOUpsertBulk) UpdateNewValues() *ShipmentDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmentdao.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentDAO.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentDAOUpsertBulk) Ignore() *ShipmentDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentDAOUpsertBulk) DoNothing() *ShipmentDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentDAOCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentDAOUpsertBulk) Update(set func(*ShipmentDAOUpsert)) *ShipmentDAOUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentDAOUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentDAOUpsertBulk) SetTenantID(v pulid.ID) *ShipmentDAOUpsertBulk {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentDAOUpsertBulk) UpdateTenantID() *ShipmentDAOUpsertBulk {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.UpdateTenantID()
	})
}

// SetBarcodeID sets the "barcode_id" field.
func (u *ShipmentDAOUpsertBulk) SetBarcodeID(v string) *ShipmentDAOUpsertBulk {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.SetBarcodeID(v)
	})
}

// UpdateBarcodeID sets the "barcode_id" field to the value that was provided on create.
func (u *ShipmentDAOUpsertBulk) UpdateBarcodeID() *ShipmentDAOUpsertBulk {
	return u.Update(func(s *ShipmentDAOUpsert) {
		s.UpdateBarcodeID()
	})
}

// Exec executes the query.
func (u *ShipmentDAOUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentDAOCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentDAOCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentDAOUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
