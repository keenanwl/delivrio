// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetTenantID sets the "tenant_id" field.
func (uu *UserUpdate) SetTenantID(pu pulid.ID) *UserUpdate {
	uu.mutation.SetTenantID(pu)
	return uu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTenantID(pu *pulid.ID) *UserUpdate {
	if pu != nil {
		uu.SetTenantID(*pu)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetSurname sets the "surname" field.
func (uu *UserUpdate) SetSurname(s string) *UserUpdate {
	uu.mutation.SetSurname(s)
	return uu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSurname(s *string) *UserUpdate {
	if s != nil {
		uu.SetSurname(*s)
	}
	return uu
}

// ClearSurname clears the value of the "surname" field.
func (uu *UserUpdate) ClearSurname() *UserUpdate {
	uu.mutation.ClearSurname()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetHash sets the "hash" field.
func (uu *UserUpdate) SetHash(s string) *UserUpdate {
	uu.mutation.SetHash(s)
	return uu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetHash(*s)
	}
	return uu
}

// SetIsAccountOwner sets the "is_account_owner" field.
func (uu *UserUpdate) SetIsAccountOwner(b bool) *UserUpdate {
	uu.mutation.SetIsAccountOwner(b)
	return uu
}

// SetNillableIsAccountOwner sets the "is_account_owner" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsAccountOwner(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsAccountOwner(*b)
	}
	return uu
}

// SetIsGlobalAdmin sets the "is_global_admin" field.
func (uu *UserUpdate) SetIsGlobalAdmin(b bool) *UserUpdate {
	uu.mutation.SetIsGlobalAdmin(b)
	return uu
}

// SetNillableIsGlobalAdmin sets the "is_global_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsGlobalAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsGlobalAdmin(*b)
	}
	return uu
}

// SetMarketingConsent sets the "marketing_consent" field.
func (uu *UserUpdate) SetMarketingConsent(b bool) *UserUpdate {
	uu.mutation.SetMarketingConsent(b)
	return uu
}

// SetNillableMarketingConsent sets the "marketing_consent" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMarketingConsent(b *bool) *UserUpdate {
	if b != nil {
		uu.SetMarketingConsent(*b)
	}
	return uu
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (uu *UserUpdate) ClearMarketingConsent() *UserUpdate {
	uu.mutation.ClearMarketingConsent()
	return uu
}

// SetArchivedAt sets the "archived_at" field.
func (uu *UserUpdate) SetArchivedAt(t time.Time) *UserUpdate {
	uu.mutation.SetArchivedAt(t)
	return uu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableArchivedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetArchivedAt(*t)
	}
	return uu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (uu *UserUpdate) ClearArchivedAt() *UserUpdate {
	uu.mutation.ClearArchivedAt()
	return uu
}

// SetPickupDay sets the "pickup_day" field.
func (uu *UserUpdate) SetPickupDay(ud user.PickupDay) *UserUpdate {
	uu.mutation.SetPickupDay(ud)
	return uu
}

// SetNillablePickupDay sets the "pickup_day" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePickupDay(ud *user.PickupDay) *UserUpdate {
	if ud != nil {
		uu.SetPickupDay(*ud)
	}
	return uu
}

// SetPickupDayLastChanged sets the "pickup_day_last_changed" field.
func (uu *UserUpdate) SetPickupDayLastChanged(t time.Time) *UserUpdate {
	uu.mutation.SetPickupDayLastChanged(t)
	return uu
}

// SetNillablePickupDayLastChanged sets the "pickup_day_last_changed" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePickupDayLastChanged(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetPickupDayLastChanged(*t)
	}
	return uu
}

// ClearPickupDayLastChanged clears the value of the "pickup_day_last_changed" field.
func (uu *UserUpdate) ClearPickupDayLastChanged() *UserUpdate {
	uu.mutation.ClearPickupDayLastChanged()
	return uu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) SetTenant(t *Tenant) *UserUpdate {
	return uu.SetTenantID(t.ID)
}

// AddOtkRequestIDs adds the "otk_requests" edge to the OTKRequests entity by IDs.
func (uu *UserUpdate) AddOtkRequestIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.AddOtkRequestIDs(ids...)
	return uu
}

// AddOtkRequests adds the "otk_requests" edges to the OTKRequests entity.
func (uu *UserUpdate) AddOtkRequests(o ...*OTKRequests) *UserUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOtkRequestIDs(ids...)
}

// SetSignupOptionsID sets the "signup_options" edge to the SignupOptions entity by ID.
func (uu *UserUpdate) SetSignupOptionsID(id pulid.ID) *UserUpdate {
	uu.mutation.SetSignupOptionsID(id)
	return uu
}

// SetNillableSignupOptionsID sets the "signup_options" edge to the SignupOptions entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableSignupOptionsID(id *pulid.ID) *UserUpdate {
	if id != nil {
		uu = uu.SetSignupOptionsID(*id)
	}
	return uu
}

// SetSignupOptions sets the "signup_options" edge to the SignupOptions entity.
func (uu *UserUpdate) SetSignupOptions(s *SignupOptions) *UserUpdate {
	return uu.SetSignupOptionsID(s.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (uu *UserUpdate) SetLanguageID(id pulid.ID) *UserUpdate {
	uu.mutation.SetLanguageID(id)
	return uu
}

// SetNillableLanguageID sets the "language" edge to the Language entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableLanguageID(id *pulid.ID) *UserUpdate {
	if id != nil {
		uu = uu.SetLanguageID(*id)
	}
	return uu
}

// SetLanguage sets the "language" edge to the Language entity.
func (uu *UserUpdate) SetLanguage(l *Language) *UserUpdate {
	return uu.SetLanguageID(l.ID)
}

// AddChangeHistoryIDs adds the "change_history" edge to the ChangeHistory entity by IDs.
func (uu *UserUpdate) AddChangeHistoryIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.AddChangeHistoryIDs(ids...)
	return uu
}

// AddChangeHistory adds the "change_history" edges to the ChangeHistory entity.
func (uu *UserUpdate) AddChangeHistory(c ...*ChangeHistory) *UserUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddChangeHistoryIDs(ids...)
}

// AddPlanHistoryUserIDs adds the "plan_history_user" edge to the PlanHistory entity by IDs.
func (uu *UserUpdate) AddPlanHistoryUserIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.AddPlanHistoryUserIDs(ids...)
	return uu
}

// AddPlanHistoryUser adds the "plan_history_user" edges to the PlanHistory entity.
func (uu *UserUpdate) AddPlanHistoryUser(p ...*PlanHistory) *UserUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPlanHistoryUserIDs(ids...)
}

// AddAPITokenIDs adds the "api_token" edge to the APIToken entity by IDs.
func (uu *UserUpdate) AddAPITokenIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.AddAPITokenIDs(ids...)
	return uu
}

// AddAPIToken adds the "api_token" edges to the APIToken entity.
func (uu *UserUpdate) AddAPIToken(a ...*APIToken) *UserUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAPITokenIDs(ids...)
}

// SetSelectedWorkstationID sets the "selected_workstation" edge to the Workstation entity by ID.
func (uu *UserUpdate) SetSelectedWorkstationID(id pulid.ID) *UserUpdate {
	uu.mutation.SetSelectedWorkstationID(id)
	return uu
}

// SetNillableSelectedWorkstationID sets the "selected_workstation" edge to the Workstation entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableSelectedWorkstationID(id *pulid.ID) *UserUpdate {
	if id != nil {
		uu = uu.SetSelectedWorkstationID(*id)
	}
	return uu
}

// SetSelectedWorkstation sets the "selected_workstation" edge to the Workstation entity.
func (uu *UserUpdate) SetSelectedWorkstation(w *Workstation) *UserUpdate {
	return uu.SetSelectedWorkstationID(w.ID)
}

// SetSeatGroupID sets the "seat_group" edge to the SeatGroup entity by ID.
func (uu *UserUpdate) SetSeatGroupID(id pulid.ID) *UserUpdate {
	uu.mutation.SetSeatGroupID(id)
	return uu
}

// SetNillableSeatGroupID sets the "seat_group" edge to the SeatGroup entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableSeatGroupID(id *pulid.ID) *UserUpdate {
	if id != nil {
		uu = uu.SetSeatGroupID(*id)
	}
	return uu
}

// SetSeatGroup sets the "seat_group" edge to the SeatGroup entity.
func (uu *UserUpdate) SetSeatGroup(s *SeatGroup) *UserUpdate {
	return uu.SetSeatGroupID(s.ID)
}

// AddWorkspaceRecentScanIDs adds the "workspace_recent_scan" edge to the WorkspaceRecentScan entity by IDs.
func (uu *UserUpdate) AddWorkspaceRecentScanIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.AddWorkspaceRecentScanIDs(ids...)
	return uu
}

// AddWorkspaceRecentScan adds the "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (uu *UserUpdate) AddWorkspaceRecentScan(w ...*WorkspaceRecentScan) *UserUpdate {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWorkspaceRecentScanIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uu *UserUpdate) ClearTenant() *UserUpdate {
	uu.mutation.ClearTenant()
	return uu
}

// ClearOtkRequests clears all "otk_requests" edges to the OTKRequests entity.
func (uu *UserUpdate) ClearOtkRequests() *UserUpdate {
	uu.mutation.ClearOtkRequests()
	return uu
}

// RemoveOtkRequestIDs removes the "otk_requests" edge to OTKRequests entities by IDs.
func (uu *UserUpdate) RemoveOtkRequestIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.RemoveOtkRequestIDs(ids...)
	return uu
}

// RemoveOtkRequests removes "otk_requests" edges to OTKRequests entities.
func (uu *UserUpdate) RemoveOtkRequests(o ...*OTKRequests) *UserUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOtkRequestIDs(ids...)
}

// ClearSignupOptions clears the "signup_options" edge to the SignupOptions entity.
func (uu *UserUpdate) ClearSignupOptions() *UserUpdate {
	uu.mutation.ClearSignupOptions()
	return uu
}

// ClearLanguage clears the "language" edge to the Language entity.
func (uu *UserUpdate) ClearLanguage() *UserUpdate {
	uu.mutation.ClearLanguage()
	return uu
}

// ClearChangeHistory clears all "change_history" edges to the ChangeHistory entity.
func (uu *UserUpdate) ClearChangeHistory() *UserUpdate {
	uu.mutation.ClearChangeHistory()
	return uu
}

// RemoveChangeHistoryIDs removes the "change_history" edge to ChangeHistory entities by IDs.
func (uu *UserUpdate) RemoveChangeHistoryIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.RemoveChangeHistoryIDs(ids...)
	return uu
}

// RemoveChangeHistory removes "change_history" edges to ChangeHistory entities.
func (uu *UserUpdate) RemoveChangeHistory(c ...*ChangeHistory) *UserUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveChangeHistoryIDs(ids...)
}

// ClearPlanHistoryUser clears all "plan_history_user" edges to the PlanHistory entity.
func (uu *UserUpdate) ClearPlanHistoryUser() *UserUpdate {
	uu.mutation.ClearPlanHistoryUser()
	return uu
}

// RemovePlanHistoryUserIDs removes the "plan_history_user" edge to PlanHistory entities by IDs.
func (uu *UserUpdate) RemovePlanHistoryUserIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.RemovePlanHistoryUserIDs(ids...)
	return uu
}

// RemovePlanHistoryUser removes "plan_history_user" edges to PlanHistory entities.
func (uu *UserUpdate) RemovePlanHistoryUser(p ...*PlanHistory) *UserUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePlanHistoryUserIDs(ids...)
}

// ClearAPIToken clears all "api_token" edges to the APIToken entity.
func (uu *UserUpdate) ClearAPIToken() *UserUpdate {
	uu.mutation.ClearAPIToken()
	return uu
}

// RemoveAPITokenIDs removes the "api_token" edge to APIToken entities by IDs.
func (uu *UserUpdate) RemoveAPITokenIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.RemoveAPITokenIDs(ids...)
	return uu
}

// RemoveAPIToken removes "api_token" edges to APIToken entities.
func (uu *UserUpdate) RemoveAPIToken(a ...*APIToken) *UserUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAPITokenIDs(ids...)
}

// ClearSelectedWorkstation clears the "selected_workstation" edge to the Workstation entity.
func (uu *UserUpdate) ClearSelectedWorkstation() *UserUpdate {
	uu.mutation.ClearSelectedWorkstation()
	return uu
}

// ClearSeatGroup clears the "seat_group" edge to the SeatGroup entity.
func (uu *UserUpdate) ClearSeatGroup() *UserUpdate {
	uu.mutation.ClearSeatGroup()
	return uu
}

// ClearWorkspaceRecentScan clears all "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (uu *UserUpdate) ClearWorkspaceRecentScan() *UserUpdate {
	uu.mutation.ClearWorkspaceRecentScan()
	return uu
}

// RemoveWorkspaceRecentScanIDs removes the "workspace_recent_scan" edge to WorkspaceRecentScan entities by IDs.
func (uu *UserUpdate) RemoveWorkspaceRecentScanIDs(ids ...pulid.ID) *UserUpdate {
	uu.mutation.RemoveWorkspaceRecentScanIDs(ids...)
	return uu
}

// RemoveWorkspaceRecentScan removes "workspace_recent_scan" edges to WorkspaceRecentScan entities.
func (uu *UserUpdate) RemoveWorkspaceRecentScan(w ...*WorkspaceRecentScan) *UserUpdate {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWorkspaceRecentScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PickupDay(); ok {
		if err := user.PickupDayValidator(v); err != nil {
			return &ValidationError{Name: "pickup_day", err: fmt.Errorf(`ent: validator failed for field "User.pickup_day": %w`, err)}
		}
	}
	if uu.mutation.TenantCleared() && len(uu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Surname(); ok {
		_spec.SetField(user.FieldSurname, field.TypeString, value)
	}
	if uu.mutation.SurnameCleared() {
		_spec.ClearField(user.FieldSurname, field.TypeString)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.Hash(); ok {
		_spec.SetField(user.FieldHash, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsAccountOwner(); ok {
		_spec.SetField(user.FieldIsAccountOwner, field.TypeBool, value)
	}
	if value, ok := uu.mutation.IsGlobalAdmin(); ok {
		_spec.SetField(user.FieldIsGlobalAdmin, field.TypeBool, value)
	}
	if value, ok := uu.mutation.MarketingConsent(); ok {
		_spec.SetField(user.FieldMarketingConsent, field.TypeBool, value)
	}
	if uu.mutation.MarketingConsentCleared() {
		_spec.ClearField(user.FieldMarketingConsent, field.TypeBool)
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.ArchivedAt(); ok {
		_spec.SetField(user.FieldArchivedAt, field.TypeTime, value)
	}
	if uu.mutation.ArchivedAtCleared() {
		_spec.ClearField(user.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.PickupDay(); ok {
		_spec.SetField(user.FieldPickupDay, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.PickupDayLastChanged(); ok {
		_spec.SetField(user.FieldPickupDayLastChanged, field.TypeTime, value)
	}
	if uu.mutation.PickupDayLastChangedCleared() {
		_spec.ClearField(user.FieldPickupDayLastChanged, field.TypeTime)
	}
	if uu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OtkRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOtkRequestsIDs(); len(nodes) > 0 && !uu.mutation.OtkRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OtkRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SignupOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SignupOptionsTable,
			Columns: []string{user.SignupOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SignupOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SignupOptionsTable,
			Columns: []string{user.SignupOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.LanguageTable,
			Columns: []string{user.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.LanguageTable,
			Columns: []string{user.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedChangeHistoryIDs(); len(nodes) > 0 && !uu.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PlanHistoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPlanHistoryUserIDs(); len(nodes) > 0 && !uu.mutation.PlanHistoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PlanHistoryUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APITokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAPITokenIDs(); len(nodes) > 0 && !uu.mutation.APITokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APITokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SelectedWorkstationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SelectedWorkstationTable,
			Columns: []string{user.SelectedWorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SelectedWorkstationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SelectedWorkstationTable,
			Columns: []string{user.SelectedWorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SeatGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.SeatGroupTable,
			Columns: []string{user.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SeatGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.SeatGroupTable,
			Columns: []string{user.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWorkspaceRecentScanIDs(); len(nodes) > 0 && !uu.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WorkspaceRecentScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetTenantID sets the "tenant_id" field.
func (uuo *UserUpdateOne) SetTenantID(pu pulid.ID) *UserUpdateOne {
	uuo.mutation.SetTenantID(pu)
	return uuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTenantID(pu *pulid.ID) *UserUpdateOne {
	if pu != nil {
		uuo.SetTenantID(*pu)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetSurname sets the "surname" field.
func (uuo *UserUpdateOne) SetSurname(s string) *UserUpdateOne {
	uuo.mutation.SetSurname(s)
	return uuo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSurname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSurname(*s)
	}
	return uuo
}

// ClearSurname clears the value of the "surname" field.
func (uuo *UserUpdateOne) ClearSurname() *UserUpdateOne {
	uuo.mutation.ClearSurname()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetHash sets the "hash" field.
func (uuo *UserUpdateOne) SetHash(s string) *UserUpdateOne {
	uuo.mutation.SetHash(s)
	return uuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetHash(*s)
	}
	return uuo
}

// SetIsAccountOwner sets the "is_account_owner" field.
func (uuo *UserUpdateOne) SetIsAccountOwner(b bool) *UserUpdateOne {
	uuo.mutation.SetIsAccountOwner(b)
	return uuo
}

// SetNillableIsAccountOwner sets the "is_account_owner" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsAccountOwner(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsAccountOwner(*b)
	}
	return uuo
}

// SetIsGlobalAdmin sets the "is_global_admin" field.
func (uuo *UserUpdateOne) SetIsGlobalAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetIsGlobalAdmin(b)
	return uuo
}

// SetNillableIsGlobalAdmin sets the "is_global_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsGlobalAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsGlobalAdmin(*b)
	}
	return uuo
}

// SetMarketingConsent sets the "marketing_consent" field.
func (uuo *UserUpdateOne) SetMarketingConsent(b bool) *UserUpdateOne {
	uuo.mutation.SetMarketingConsent(b)
	return uuo
}

// SetNillableMarketingConsent sets the "marketing_consent" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMarketingConsent(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetMarketingConsent(*b)
	}
	return uuo
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (uuo *UserUpdateOne) ClearMarketingConsent() *UserUpdateOne {
	uuo.mutation.ClearMarketingConsent()
	return uuo
}

// SetArchivedAt sets the "archived_at" field.
func (uuo *UserUpdateOne) SetArchivedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetArchivedAt(t)
	return uuo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableArchivedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetArchivedAt(*t)
	}
	return uuo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (uuo *UserUpdateOne) ClearArchivedAt() *UserUpdateOne {
	uuo.mutation.ClearArchivedAt()
	return uuo
}

// SetPickupDay sets the "pickup_day" field.
func (uuo *UserUpdateOne) SetPickupDay(ud user.PickupDay) *UserUpdateOne {
	uuo.mutation.SetPickupDay(ud)
	return uuo
}

// SetNillablePickupDay sets the "pickup_day" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePickupDay(ud *user.PickupDay) *UserUpdateOne {
	if ud != nil {
		uuo.SetPickupDay(*ud)
	}
	return uuo
}

// SetPickupDayLastChanged sets the "pickup_day_last_changed" field.
func (uuo *UserUpdateOne) SetPickupDayLastChanged(t time.Time) *UserUpdateOne {
	uuo.mutation.SetPickupDayLastChanged(t)
	return uuo
}

// SetNillablePickupDayLastChanged sets the "pickup_day_last_changed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePickupDayLastChanged(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetPickupDayLastChanged(*t)
	}
	return uuo
}

// ClearPickupDayLastChanged clears the value of the "pickup_day_last_changed" field.
func (uuo *UserUpdateOne) ClearPickupDayLastChanged() *UserUpdateOne {
	uuo.mutation.ClearPickupDayLastChanged()
	return uuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) SetTenant(t *Tenant) *UserUpdateOne {
	return uuo.SetTenantID(t.ID)
}

// AddOtkRequestIDs adds the "otk_requests" edge to the OTKRequests entity by IDs.
func (uuo *UserUpdateOne) AddOtkRequestIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.AddOtkRequestIDs(ids...)
	return uuo
}

// AddOtkRequests adds the "otk_requests" edges to the OTKRequests entity.
func (uuo *UserUpdateOne) AddOtkRequests(o ...*OTKRequests) *UserUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOtkRequestIDs(ids...)
}

// SetSignupOptionsID sets the "signup_options" edge to the SignupOptions entity by ID.
func (uuo *UserUpdateOne) SetSignupOptionsID(id pulid.ID) *UserUpdateOne {
	uuo.mutation.SetSignupOptionsID(id)
	return uuo
}

// SetNillableSignupOptionsID sets the "signup_options" edge to the SignupOptions entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSignupOptionsID(id *pulid.ID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetSignupOptionsID(*id)
	}
	return uuo
}

// SetSignupOptions sets the "signup_options" edge to the SignupOptions entity.
func (uuo *UserUpdateOne) SetSignupOptions(s *SignupOptions) *UserUpdateOne {
	return uuo.SetSignupOptionsID(s.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (uuo *UserUpdateOne) SetLanguageID(id pulid.ID) *UserUpdateOne {
	uuo.mutation.SetLanguageID(id)
	return uuo
}

// SetNillableLanguageID sets the "language" edge to the Language entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLanguageID(id *pulid.ID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetLanguageID(*id)
	}
	return uuo
}

// SetLanguage sets the "language" edge to the Language entity.
func (uuo *UserUpdateOne) SetLanguage(l *Language) *UserUpdateOne {
	return uuo.SetLanguageID(l.ID)
}

// AddChangeHistoryIDs adds the "change_history" edge to the ChangeHistory entity by IDs.
func (uuo *UserUpdateOne) AddChangeHistoryIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.AddChangeHistoryIDs(ids...)
	return uuo
}

// AddChangeHistory adds the "change_history" edges to the ChangeHistory entity.
func (uuo *UserUpdateOne) AddChangeHistory(c ...*ChangeHistory) *UserUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddChangeHistoryIDs(ids...)
}

// AddPlanHistoryUserIDs adds the "plan_history_user" edge to the PlanHistory entity by IDs.
func (uuo *UserUpdateOne) AddPlanHistoryUserIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.AddPlanHistoryUserIDs(ids...)
	return uuo
}

// AddPlanHistoryUser adds the "plan_history_user" edges to the PlanHistory entity.
func (uuo *UserUpdateOne) AddPlanHistoryUser(p ...*PlanHistory) *UserUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPlanHistoryUserIDs(ids...)
}

// AddAPITokenIDs adds the "api_token" edge to the APIToken entity by IDs.
func (uuo *UserUpdateOne) AddAPITokenIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.AddAPITokenIDs(ids...)
	return uuo
}

// AddAPIToken adds the "api_token" edges to the APIToken entity.
func (uuo *UserUpdateOne) AddAPIToken(a ...*APIToken) *UserUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAPITokenIDs(ids...)
}

// SetSelectedWorkstationID sets the "selected_workstation" edge to the Workstation entity by ID.
func (uuo *UserUpdateOne) SetSelectedWorkstationID(id pulid.ID) *UserUpdateOne {
	uuo.mutation.SetSelectedWorkstationID(id)
	return uuo
}

// SetNillableSelectedWorkstationID sets the "selected_workstation" edge to the Workstation entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSelectedWorkstationID(id *pulid.ID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetSelectedWorkstationID(*id)
	}
	return uuo
}

// SetSelectedWorkstation sets the "selected_workstation" edge to the Workstation entity.
func (uuo *UserUpdateOne) SetSelectedWorkstation(w *Workstation) *UserUpdateOne {
	return uuo.SetSelectedWorkstationID(w.ID)
}

// SetSeatGroupID sets the "seat_group" edge to the SeatGroup entity by ID.
func (uuo *UserUpdateOne) SetSeatGroupID(id pulid.ID) *UserUpdateOne {
	uuo.mutation.SetSeatGroupID(id)
	return uuo
}

// SetNillableSeatGroupID sets the "seat_group" edge to the SeatGroup entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSeatGroupID(id *pulid.ID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetSeatGroupID(*id)
	}
	return uuo
}

// SetSeatGroup sets the "seat_group" edge to the SeatGroup entity.
func (uuo *UserUpdateOne) SetSeatGroup(s *SeatGroup) *UserUpdateOne {
	return uuo.SetSeatGroupID(s.ID)
}

// AddWorkspaceRecentScanIDs adds the "workspace_recent_scan" edge to the WorkspaceRecentScan entity by IDs.
func (uuo *UserUpdateOne) AddWorkspaceRecentScanIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.AddWorkspaceRecentScanIDs(ids...)
	return uuo
}

// AddWorkspaceRecentScan adds the "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (uuo *UserUpdateOne) AddWorkspaceRecentScan(w ...*WorkspaceRecentScan) *UserUpdateOne {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWorkspaceRecentScanIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (uuo *UserUpdateOne) ClearTenant() *UserUpdateOne {
	uuo.mutation.ClearTenant()
	return uuo
}

// ClearOtkRequests clears all "otk_requests" edges to the OTKRequests entity.
func (uuo *UserUpdateOne) ClearOtkRequests() *UserUpdateOne {
	uuo.mutation.ClearOtkRequests()
	return uuo
}

// RemoveOtkRequestIDs removes the "otk_requests" edge to OTKRequests entities by IDs.
func (uuo *UserUpdateOne) RemoveOtkRequestIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.RemoveOtkRequestIDs(ids...)
	return uuo
}

// RemoveOtkRequests removes "otk_requests" edges to OTKRequests entities.
func (uuo *UserUpdateOne) RemoveOtkRequests(o ...*OTKRequests) *UserUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOtkRequestIDs(ids...)
}

// ClearSignupOptions clears the "signup_options" edge to the SignupOptions entity.
func (uuo *UserUpdateOne) ClearSignupOptions() *UserUpdateOne {
	uuo.mutation.ClearSignupOptions()
	return uuo
}

// ClearLanguage clears the "language" edge to the Language entity.
func (uuo *UserUpdateOne) ClearLanguage() *UserUpdateOne {
	uuo.mutation.ClearLanguage()
	return uuo
}

// ClearChangeHistory clears all "change_history" edges to the ChangeHistory entity.
func (uuo *UserUpdateOne) ClearChangeHistory() *UserUpdateOne {
	uuo.mutation.ClearChangeHistory()
	return uuo
}

// RemoveChangeHistoryIDs removes the "change_history" edge to ChangeHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveChangeHistoryIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.RemoveChangeHistoryIDs(ids...)
	return uuo
}

// RemoveChangeHistory removes "change_history" edges to ChangeHistory entities.
func (uuo *UserUpdateOne) RemoveChangeHistory(c ...*ChangeHistory) *UserUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveChangeHistoryIDs(ids...)
}

// ClearPlanHistoryUser clears all "plan_history_user" edges to the PlanHistory entity.
func (uuo *UserUpdateOne) ClearPlanHistoryUser() *UserUpdateOne {
	uuo.mutation.ClearPlanHistoryUser()
	return uuo
}

// RemovePlanHistoryUserIDs removes the "plan_history_user" edge to PlanHistory entities by IDs.
func (uuo *UserUpdateOne) RemovePlanHistoryUserIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.RemovePlanHistoryUserIDs(ids...)
	return uuo
}

// RemovePlanHistoryUser removes "plan_history_user" edges to PlanHistory entities.
func (uuo *UserUpdateOne) RemovePlanHistoryUser(p ...*PlanHistory) *UserUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePlanHistoryUserIDs(ids...)
}

// ClearAPIToken clears all "api_token" edges to the APIToken entity.
func (uuo *UserUpdateOne) ClearAPIToken() *UserUpdateOne {
	uuo.mutation.ClearAPIToken()
	return uuo
}

// RemoveAPITokenIDs removes the "api_token" edge to APIToken entities by IDs.
func (uuo *UserUpdateOne) RemoveAPITokenIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.RemoveAPITokenIDs(ids...)
	return uuo
}

// RemoveAPIToken removes "api_token" edges to APIToken entities.
func (uuo *UserUpdateOne) RemoveAPIToken(a ...*APIToken) *UserUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAPITokenIDs(ids...)
}

// ClearSelectedWorkstation clears the "selected_workstation" edge to the Workstation entity.
func (uuo *UserUpdateOne) ClearSelectedWorkstation() *UserUpdateOne {
	uuo.mutation.ClearSelectedWorkstation()
	return uuo
}

// ClearSeatGroup clears the "seat_group" edge to the SeatGroup entity.
func (uuo *UserUpdateOne) ClearSeatGroup() *UserUpdateOne {
	uuo.mutation.ClearSeatGroup()
	return uuo
}

// ClearWorkspaceRecentScan clears all "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (uuo *UserUpdateOne) ClearWorkspaceRecentScan() *UserUpdateOne {
	uuo.mutation.ClearWorkspaceRecentScan()
	return uuo
}

// RemoveWorkspaceRecentScanIDs removes the "workspace_recent_scan" edge to WorkspaceRecentScan entities by IDs.
func (uuo *UserUpdateOne) RemoveWorkspaceRecentScanIDs(ids ...pulid.ID) *UserUpdateOne {
	uuo.mutation.RemoveWorkspaceRecentScanIDs(ids...)
	return uuo
}

// RemoveWorkspaceRecentScan removes "workspace_recent_scan" edges to WorkspaceRecentScan entities.
func (uuo *UserUpdateOne) RemoveWorkspaceRecentScan(w ...*WorkspaceRecentScan) *UserUpdateOne {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWorkspaceRecentScanIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PickupDay(); ok {
		if err := user.PickupDayValidator(v); err != nil {
			return &ValidationError{Name: "pickup_day", err: fmt.Errorf(`ent: validator failed for field "User.pickup_day": %w`, err)}
		}
	}
	if uuo.mutation.TenantCleared() && len(uuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "User.tenant"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Surname(); ok {
		_spec.SetField(user.FieldSurname, field.TypeString, value)
	}
	if uuo.mutation.SurnameCleared() {
		_spec.ClearField(user.FieldSurname, field.TypeString)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.Hash(); ok {
		_spec.SetField(user.FieldHash, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsAccountOwner(); ok {
		_spec.SetField(user.FieldIsAccountOwner, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.IsGlobalAdmin(); ok {
		_spec.SetField(user.FieldIsGlobalAdmin, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.MarketingConsent(); ok {
		_spec.SetField(user.FieldMarketingConsent, field.TypeBool, value)
	}
	if uuo.mutation.MarketingConsentCleared() {
		_spec.ClearField(user.FieldMarketingConsent, field.TypeBool)
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.ArchivedAt(); ok {
		_spec.SetField(user.FieldArchivedAt, field.TypeTime, value)
	}
	if uuo.mutation.ArchivedAtCleared() {
		_spec.ClearField(user.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.PickupDay(); ok {
		_spec.SetField(user.FieldPickupDay, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.PickupDayLastChanged(); ok {
		_spec.SetField(user.FieldPickupDayLastChanged, field.TypeTime, value)
	}
	if uuo.mutation.PickupDayLastChangedCleared() {
		_spec.ClearField(user.FieldPickupDayLastChanged, field.TypeTime)
	}
	if uuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OtkRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOtkRequestsIDs(); len(nodes) > 0 && !uuo.mutation.OtkRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OtkRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SignupOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SignupOptionsTable,
			Columns: []string{user.SignupOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SignupOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SignupOptionsTable,
			Columns: []string{user.SignupOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.LanguageTable,
			Columns: []string{user.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.LanguageTable,
			Columns: []string{user.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedChangeHistoryIDs(); len(nodes) > 0 && !uuo.mutation.ChangeHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PlanHistoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPlanHistoryUserIDs(); len(nodes) > 0 && !uuo.mutation.PlanHistoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PlanHistoryUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APITokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAPITokenIDs(); len(nodes) > 0 && !uuo.mutation.APITokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APITokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SelectedWorkstationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SelectedWorkstationTable,
			Columns: []string{user.SelectedWorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SelectedWorkstationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SelectedWorkstationTable,
			Columns: []string{user.SelectedWorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SeatGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.SeatGroupTable,
			Columns: []string{user.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SeatGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.SeatGroupTable,
			Columns: []string{user.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWorkspaceRecentScanIDs(); len(nodes) > 0 && !uuo.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WorkspaceRecentScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
