// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierService is the model entity for the CarrierService schema.
type CarrierService struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID string `json:"internal_id,omitempty"`
	// Return holds the value of the "return" field.
	Return bool `json:"return,omitempty"`
	// Consolidation holds the value of the "consolidation" field.
	Consolidation bool `json:"consolidation,omitempty"`
	// DeliveryPointOptional holds the value of the "delivery_point_optional" field.
	DeliveryPointOptional bool `json:"delivery_point_optional,omitempty"`
	// DeliveryPointRequired holds the value of the "delivery_point_required" field.
	DeliveryPointRequired bool `json:"delivery_point_required,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierServiceQuery when eager-loading is set.
	Edges                         CarrierServiceEdges `json:"edges"`
	carrier_brand_carrier_service *pulid.ID
	selectValues                  sql.SelectValues
}

// CarrierServiceEdges holds the relations/edges for other nodes in the graph.
type CarrierServiceEdges struct {
	// CarrierServicePostNord holds the value of the carrier_service_post_nord edge.
	CarrierServicePostNord *CarrierServicePostNord `json:"carrier_service_post_nord,omitempty"`
	// CarrierServiceDAO holds the value of the carrier_service_dao edge.
	CarrierServiceDAO *CarrierServiceDAO `json:"carrier_service_dao,omitempty"`
	// CarrierServiceDF holds the value of the carrier_service_df edge.
	CarrierServiceDF *CarrierServiceDF `json:"carrier_service_df,omitempty"`
	// CarrierServiceDSV holds the value of the carrier_service_dsv edge.
	CarrierServiceDSV *CarrierServiceDSV `json:"carrier_service_dsv,omitempty"`
	// CarrierServEasyPost holds the value of the carrier_serv_easy_post edge.
	CarrierServEasyPost *CarrierServiceEasyPost `json:"carrier_serv_easy_post,omitempty"`
	// CarrierServiceGLS holds the value of the carrier_service_gls edge.
	CarrierServiceGLS *CarrierServiceGLS `json:"carrier_service_gls,omitempty"`
	// CarrierServiceUSPS holds the value of the carrier_service_usps edge.
	CarrierServiceUSPS *CarrierServiceUSPS `json:"carrier_service_usps,omitempty"`
	// CarrierServiceBring holds the value of the carrier_service_bring edge.
	CarrierServiceBring *CarrierServiceBring `json:"carrier_service_bring,omitempty"`
	// CarrierBrand holds the value of the carrier_brand edge.
	CarrierBrand *CarrierBrand `json:"carrier_brand,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption []*DeliveryOption `json:"delivery_option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [10]map[string]int

	namedDeliveryOption map[string][]*DeliveryOption
}

// CarrierServicePostNordOrErr returns the CarrierServicePostNord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServicePostNordOrErr() (*CarrierServicePostNord, error) {
	if e.CarrierServicePostNord != nil {
		return e.CarrierServicePostNord, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservicepostnord.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_post_nord"}
}

// CarrierServiceDAOOrErr returns the CarrierServiceDAO value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServiceDAOOrErr() (*CarrierServiceDAO, error) {
	if e.CarrierServiceDAO != nil {
		return e.CarrierServiceDAO, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrierservicedao.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_dao"}
}

// CarrierServiceDFOrErr returns the CarrierServiceDF value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServiceDFOrErr() (*CarrierServiceDF, error) {
	if e.CarrierServiceDF != nil {
		return e.CarrierServiceDF, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: carrierservicedf.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_df"}
}

// CarrierServiceDSVOrErr returns the CarrierServiceDSV value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServiceDSVOrErr() (*CarrierServiceDSV, error) {
	if e.CarrierServiceDSV != nil {
		return e.CarrierServiceDSV, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: carrierservicedsv.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_dsv"}
}

// CarrierServEasyPostOrErr returns the CarrierServEasyPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServEasyPostOrErr() (*CarrierServiceEasyPost, error) {
	if e.CarrierServEasyPost != nil {
		return e.CarrierServEasyPost, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: carrierserviceeasypost.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_serv_easy_post"}
}

// CarrierServiceGLSOrErr returns the CarrierServiceGLS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServiceGLSOrErr() (*CarrierServiceGLS, error) {
	if e.CarrierServiceGLS != nil {
		return e.CarrierServiceGLS, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: carrierservicegls.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_gls"}
}

// CarrierServiceUSPSOrErr returns the CarrierServiceUSPS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServiceUSPSOrErr() (*CarrierServiceUSPS, error) {
	if e.CarrierServiceUSPS != nil {
		return e.CarrierServiceUSPS, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: carrierserviceusps.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_usps"}
}

// CarrierServiceBringOrErr returns the CarrierServiceBring value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierServiceBringOrErr() (*CarrierServiceBring, error) {
	if e.CarrierServiceBring != nil {
		return e.CarrierServiceBring, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: carrierservicebring.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service_bring"}
}

// CarrierBrandOrErr returns the CarrierBrand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceEdges) CarrierBrandOrErr() (*CarrierBrand, error) {
	if e.CarrierBrand != nil {
		return e.CarrierBrand, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: carrierbrand.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_brand"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierServiceEdges) DeliveryOptionOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[9] {
		return e.DeliveryOption, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierService) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierservice.FieldID:
			values[i] = new(pulid.ID)
		case carrierservice.FieldReturn, carrierservice.FieldConsolidation, carrierservice.FieldDeliveryPointOptional, carrierservice.FieldDeliveryPointRequired:
			values[i] = new(sql.NullBool)
		case carrierservice.FieldLabel, carrierservice.FieldInternalID:
			values[i] = new(sql.NullString)
		case carrierservice.ForeignKeys[0]: // carrier_brand_carrier_service
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierService fields.
func (cs *CarrierService) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierservice.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case carrierservice.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				cs.Label = value.String
			}
		case carrierservice.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				cs.InternalID = value.String
			}
		case carrierservice.FieldReturn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field return", values[i])
			} else if value.Valid {
				cs.Return = value.Bool
			}
		case carrierservice.FieldConsolidation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field consolidation", values[i])
			} else if value.Valid {
				cs.Consolidation = value.Bool
			}
		case carrierservice.FieldDeliveryPointOptional:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_point_optional", values[i])
			} else if value.Valid {
				cs.DeliveryPointOptional = value.Bool
			}
		case carrierservice.FieldDeliveryPointRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_point_required", values[i])
			} else if value.Valid {
				cs.DeliveryPointRequired = value.Bool
			}
		case carrierservice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_brand_carrier_service", values[i])
			} else if value.Valid {
				cs.carrier_brand_carrier_service = new(pulid.ID)
				*cs.carrier_brand_carrier_service = *value.S.(*pulid.ID)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierService.
// This includes values selected through modifiers, order, etc.
func (cs *CarrierService) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryCarrierServicePostNord queries the "carrier_service_post_nord" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServicePostNord() *CarrierServicePostNordQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServicePostNord(cs)
}

// QueryCarrierServiceDAO queries the "carrier_service_dao" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServiceDAO() *CarrierServiceDAOQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServiceDAO(cs)
}

// QueryCarrierServiceDF queries the "carrier_service_df" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServiceDF() *CarrierServiceDFQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServiceDF(cs)
}

// QueryCarrierServiceDSV queries the "carrier_service_dsv" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServiceDSV() *CarrierServiceDSVQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServiceDSV(cs)
}

// QueryCarrierServEasyPost queries the "carrier_serv_easy_post" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServEasyPost() *CarrierServiceEasyPostQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServEasyPost(cs)
}

// QueryCarrierServiceGLS queries the "carrier_service_gls" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServiceGLS() *CarrierServiceGLSQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServiceGLS(cs)
}

// QueryCarrierServiceUSPS queries the "carrier_service_usps" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServiceUSPS() *CarrierServiceUSPSQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServiceUSPS(cs)
}

// QueryCarrierServiceBring queries the "carrier_service_bring" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierServiceBring() *CarrierServiceBringQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierServiceBring(cs)
}

// QueryCarrierBrand queries the "carrier_brand" edge of the CarrierService entity.
func (cs *CarrierService) QueryCarrierBrand() *CarrierBrandQuery {
	return NewCarrierServiceClient(cs.config).QueryCarrierBrand(cs)
}

// QueryDeliveryOption queries the "delivery_option" edge of the CarrierService entity.
func (cs *CarrierService) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewCarrierServiceClient(cs.config).QueryDeliveryOption(cs)
}

// Update returns a builder for updating this CarrierService.
// Note that you need to call CarrierService.Unwrap() before calling this method if this CarrierService
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CarrierService) Update() *CarrierServiceUpdateOne {
	return NewCarrierServiceClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CarrierService entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CarrierService) Unwrap() *CarrierService {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierService is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CarrierService) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierService(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("label=")
	builder.WriteString(cs.Label)
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(cs.InternalID)
	builder.WriteString(", ")
	builder.WriteString("return=")
	builder.WriteString(fmt.Sprintf("%v", cs.Return))
	builder.WriteString(", ")
	builder.WriteString("consolidation=")
	builder.WriteString(fmt.Sprintf("%v", cs.Consolidation))
	builder.WriteString(", ")
	builder.WriteString("delivery_point_optional=")
	builder.WriteString(fmt.Sprintf("%v", cs.DeliveryPointOptional))
	builder.WriteString(", ")
	builder.WriteString("delivery_point_required=")
	builder.WriteString(fmt.Sprintf("%v", cs.DeliveryPointRequired))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryOption returns the DeliveryOption named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cs *CarrierService) NamedDeliveryOption(name string) ([]*DeliveryOption, error) {
	if cs.Edges.namedDeliveryOption == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cs.Edges.namedDeliveryOption[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cs *CarrierService) appendNamedDeliveryOption(name string, edges ...*DeliveryOption) {
	if cs.Edges.namedDeliveryOption == nil {
		cs.Edges.namedDeliveryOption = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		cs.Edges.namedDeliveryOption[name] = []*DeliveryOption{}
	} else {
		cs.Edges.namedDeliveryOption[name] = append(cs.Edges.namedDeliveryOption[name], edges...)
	}
}

// CarrierServices is a parsable slice of CarrierService.
type CarrierServices []*CarrierService
