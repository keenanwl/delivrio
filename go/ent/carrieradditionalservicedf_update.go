// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceDFUpdate is the builder for updating CarrierAdditionalServiceDF entities.
type CarrierAdditionalServiceDFUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierAdditionalServiceDFMutation
}

// Where appends a list predicates to the CarrierAdditionalServiceDFUpdate builder.
func (casdu *CarrierAdditionalServiceDFUpdate) Where(ps ...predicate.CarrierAdditionalServiceDF) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.Where(ps...)
	return casdu
}

// SetLabel sets the "label" field.
func (casdu *CarrierAdditionalServiceDFUpdate) SetLabel(s string) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.SetLabel(s)
	return casdu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casdu *CarrierAdditionalServiceDFUpdate) SetNillableLabel(s *string) *CarrierAdditionalServiceDFUpdate {
	if s != nil {
		casdu.SetLabel(*s)
	}
	return casdu
}

// SetAPICode sets the "api_code" field.
func (casdu *CarrierAdditionalServiceDFUpdate) SetAPICode(s string) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.SetAPICode(s)
	return casdu
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casdu *CarrierAdditionalServiceDFUpdate) SetNillableAPICode(s *string) *CarrierAdditionalServiceDFUpdate {
	if s != nil {
		casdu.SetAPICode(*s)
	}
	return casdu
}

// AddCarrierServiceDFIDs adds the "carrier_service_df" edge to the CarrierServiceDF entity by IDs.
func (casdu *CarrierAdditionalServiceDFUpdate) AddCarrierServiceDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.AddCarrierServiceDFIDs(ids...)
	return casdu
}

// AddCarrierServiceDF adds the "carrier_service_df" edges to the CarrierServiceDF entity.
func (casdu *CarrierAdditionalServiceDFUpdate) AddCarrierServiceDF(c ...*CarrierServiceDF) *CarrierAdditionalServiceDFUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdu.AddCarrierServiceDFIDs(ids...)
}

// AddDeliveryOptionDFIDs adds the "delivery_option_df" edge to the DeliveryOptionDF entity by IDs.
func (casdu *CarrierAdditionalServiceDFUpdate) AddDeliveryOptionDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.AddDeliveryOptionDFIDs(ids...)
	return casdu
}

// AddDeliveryOptionDF adds the "delivery_option_df" edges to the DeliveryOptionDF entity.
func (casdu *CarrierAdditionalServiceDFUpdate) AddDeliveryOptionDF(d ...*DeliveryOptionDF) *CarrierAdditionalServiceDFUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdu.AddDeliveryOptionDFIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDFMutation object of the builder.
func (casdu *CarrierAdditionalServiceDFUpdate) Mutation() *CarrierAdditionalServiceDFMutation {
	return casdu.mutation
}

// ClearCarrierServiceDF clears all "carrier_service_df" edges to the CarrierServiceDF entity.
func (casdu *CarrierAdditionalServiceDFUpdate) ClearCarrierServiceDF() *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.ClearCarrierServiceDF()
	return casdu
}

// RemoveCarrierServiceDFIDs removes the "carrier_service_df" edge to CarrierServiceDF entities by IDs.
func (casdu *CarrierAdditionalServiceDFUpdate) RemoveCarrierServiceDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.RemoveCarrierServiceDFIDs(ids...)
	return casdu
}

// RemoveCarrierServiceDF removes "carrier_service_df" edges to CarrierServiceDF entities.
func (casdu *CarrierAdditionalServiceDFUpdate) RemoveCarrierServiceDF(c ...*CarrierServiceDF) *CarrierAdditionalServiceDFUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casdu.RemoveCarrierServiceDFIDs(ids...)
}

// ClearDeliveryOptionDF clears all "delivery_option_df" edges to the DeliveryOptionDF entity.
func (casdu *CarrierAdditionalServiceDFUpdate) ClearDeliveryOptionDF() *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.ClearDeliveryOptionDF()
	return casdu
}

// RemoveDeliveryOptionDFIDs removes the "delivery_option_df" edge to DeliveryOptionDF entities by IDs.
func (casdu *CarrierAdditionalServiceDFUpdate) RemoveDeliveryOptionDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdate {
	casdu.mutation.RemoveDeliveryOptionDFIDs(ids...)
	return casdu
}

// RemoveDeliveryOptionDF removes "delivery_option_df" edges to DeliveryOptionDF entities.
func (casdu *CarrierAdditionalServiceDFUpdate) RemoveDeliveryOptionDF(d ...*DeliveryOptionDF) *CarrierAdditionalServiceDFUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casdu.RemoveDeliveryOptionDFIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (casdu *CarrierAdditionalServiceDFUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, casdu.sqlSave, casdu.mutation, casdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casdu *CarrierAdditionalServiceDFUpdate) SaveX(ctx context.Context) int {
	affected, err := casdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (casdu *CarrierAdditionalServiceDFUpdate) Exec(ctx context.Context) error {
	_, err := casdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casdu *CarrierAdditionalServiceDFUpdate) ExecX(ctx context.Context) {
	if err := casdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casdu *CarrierAdditionalServiceDFUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicedf.Table, carrieradditionalservicedf.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedf.FieldID, field.TypeString))
	if ps := casdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casdu.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedf.FieldLabel, field.TypeString, value)
	}
	if value, ok := casdu.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedf.FieldAPICode, field.TypeString, value)
	}
	if casdu.mutation.CarrierServiceDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.RemovedCarrierServiceDFIDs(); len(nodes) > 0 && !casdu.mutation.CarrierServiceDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.CarrierServiceDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casdu.mutation.DeliveryOptionDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.RemovedDeliveryOptionDFIDs(); len(nodes) > 0 && !casdu.mutation.DeliveryOptionDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casdu.mutation.DeliveryOptionDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, casdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicedf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	casdu.mutation.done = true
	return n, nil
}

// CarrierAdditionalServiceDFUpdateOne is the builder for updating a single CarrierAdditionalServiceDF entity.
type CarrierAdditionalServiceDFUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierAdditionalServiceDFMutation
}

// SetLabel sets the "label" field.
func (casduo *CarrierAdditionalServiceDFUpdateOne) SetLabel(s string) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.SetLabel(s)
	return casduo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (casduo *CarrierAdditionalServiceDFUpdateOne) SetNillableLabel(s *string) *CarrierAdditionalServiceDFUpdateOne {
	if s != nil {
		casduo.SetLabel(*s)
	}
	return casduo
}

// SetAPICode sets the "api_code" field.
func (casduo *CarrierAdditionalServiceDFUpdateOne) SetAPICode(s string) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.SetAPICode(s)
	return casduo
}

// SetNillableAPICode sets the "api_code" field if the given value is not nil.
func (casduo *CarrierAdditionalServiceDFUpdateOne) SetNillableAPICode(s *string) *CarrierAdditionalServiceDFUpdateOne {
	if s != nil {
		casduo.SetAPICode(*s)
	}
	return casduo
}

// AddCarrierServiceDFIDs adds the "carrier_service_df" edge to the CarrierServiceDF entity by IDs.
func (casduo *CarrierAdditionalServiceDFUpdateOne) AddCarrierServiceDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.AddCarrierServiceDFIDs(ids...)
	return casduo
}

// AddCarrierServiceDF adds the "carrier_service_df" edges to the CarrierServiceDF entity.
func (casduo *CarrierAdditionalServiceDFUpdateOne) AddCarrierServiceDF(c ...*CarrierServiceDF) *CarrierAdditionalServiceDFUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casduo.AddCarrierServiceDFIDs(ids...)
}

// AddDeliveryOptionDFIDs adds the "delivery_option_df" edge to the DeliveryOptionDF entity by IDs.
func (casduo *CarrierAdditionalServiceDFUpdateOne) AddDeliveryOptionDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.AddDeliveryOptionDFIDs(ids...)
	return casduo
}

// AddDeliveryOptionDF adds the "delivery_option_df" edges to the DeliveryOptionDF entity.
func (casduo *CarrierAdditionalServiceDFUpdateOne) AddDeliveryOptionDF(d ...*DeliveryOptionDF) *CarrierAdditionalServiceDFUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casduo.AddDeliveryOptionDFIDs(ids...)
}

// Mutation returns the CarrierAdditionalServiceDFMutation object of the builder.
func (casduo *CarrierAdditionalServiceDFUpdateOne) Mutation() *CarrierAdditionalServiceDFMutation {
	return casduo.mutation
}

// ClearCarrierServiceDF clears all "carrier_service_df" edges to the CarrierServiceDF entity.
func (casduo *CarrierAdditionalServiceDFUpdateOne) ClearCarrierServiceDF() *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.ClearCarrierServiceDF()
	return casduo
}

// RemoveCarrierServiceDFIDs removes the "carrier_service_df" edge to CarrierServiceDF entities by IDs.
func (casduo *CarrierAdditionalServiceDFUpdateOne) RemoveCarrierServiceDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.RemoveCarrierServiceDFIDs(ids...)
	return casduo
}

// RemoveCarrierServiceDF removes "carrier_service_df" edges to CarrierServiceDF entities.
func (casduo *CarrierAdditionalServiceDFUpdateOne) RemoveCarrierServiceDF(c ...*CarrierServiceDF) *CarrierAdditionalServiceDFUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return casduo.RemoveCarrierServiceDFIDs(ids...)
}

// ClearDeliveryOptionDF clears all "delivery_option_df" edges to the DeliveryOptionDF entity.
func (casduo *CarrierAdditionalServiceDFUpdateOne) ClearDeliveryOptionDF() *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.ClearDeliveryOptionDF()
	return casduo
}

// RemoveDeliveryOptionDFIDs removes the "delivery_option_df" edge to DeliveryOptionDF entities by IDs.
func (casduo *CarrierAdditionalServiceDFUpdateOne) RemoveDeliveryOptionDFIDs(ids ...pulid.ID) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.RemoveDeliveryOptionDFIDs(ids...)
	return casduo
}

// RemoveDeliveryOptionDF removes "delivery_option_df" edges to DeliveryOptionDF entities.
func (casduo *CarrierAdditionalServiceDFUpdateOne) RemoveDeliveryOptionDF(d ...*DeliveryOptionDF) *CarrierAdditionalServiceDFUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return casduo.RemoveDeliveryOptionDFIDs(ids...)
}

// Where appends a list predicates to the CarrierAdditionalServiceDFUpdate builder.
func (casduo *CarrierAdditionalServiceDFUpdateOne) Where(ps ...predicate.CarrierAdditionalServiceDF) *CarrierAdditionalServiceDFUpdateOne {
	casduo.mutation.Where(ps...)
	return casduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (casduo *CarrierAdditionalServiceDFUpdateOne) Select(field string, fields ...string) *CarrierAdditionalServiceDFUpdateOne {
	casduo.fields = append([]string{field}, fields...)
	return casduo
}

// Save executes the query and returns the updated CarrierAdditionalServiceDF entity.
func (casduo *CarrierAdditionalServiceDFUpdateOne) Save(ctx context.Context) (*CarrierAdditionalServiceDF, error) {
	return withHooks(ctx, casduo.sqlSave, casduo.mutation, casduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (casduo *CarrierAdditionalServiceDFUpdateOne) SaveX(ctx context.Context) *CarrierAdditionalServiceDF {
	node, err := casduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (casduo *CarrierAdditionalServiceDFUpdateOne) Exec(ctx context.Context) error {
	_, err := casduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (casduo *CarrierAdditionalServiceDFUpdateOne) ExecX(ctx context.Context) {
	if err := casduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (casduo *CarrierAdditionalServiceDFUpdateOne) sqlSave(ctx context.Context) (_node *CarrierAdditionalServiceDF, err error) {
	_spec := sqlgraph.NewUpdateSpec(carrieradditionalservicedf.Table, carrieradditionalservicedf.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedf.FieldID, field.TypeString))
	id, ok := casduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierAdditionalServiceDF.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := casduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicedf.FieldID)
		for _, f := range fields {
			if !carrieradditionalservicedf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrieradditionalservicedf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := casduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := casduo.mutation.Label(); ok {
		_spec.SetField(carrieradditionalservicedf.FieldLabel, field.TypeString, value)
	}
	if value, ok := casduo.mutation.APICode(); ok {
		_spec.SetField(carrieradditionalservicedf.FieldAPICode, field.TypeString, value)
	}
	if casduo.mutation.CarrierServiceDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.RemovedCarrierServiceDFIDs(); len(nodes) > 0 && !casduo.mutation.CarrierServiceDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.CarrierServiceDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if casduo.mutation.DeliveryOptionDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.RemovedDeliveryOptionDFIDs(); len(nodes) > 0 && !casduo.mutation.DeliveryOptionDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := casduo.mutation.DeliveryOptionDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoptiondf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierAdditionalServiceDF{config: casduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, casduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrieradditionalservicedf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	casduo.mutation.done = true
	return _node, nil
}
