// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductTagCreate is the builder for creating a ProductTag entity.
type ProductTagCreate struct {
	config
	mutation *ProductTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ptc *ProductTagCreate) SetTenantID(pu pulid.ID) *ProductTagCreate {
	ptc.mutation.SetTenantID(pu)
	return ptc
}

// SetName sets the "name" field.
func (ptc *ProductTagCreate) SetName(s string) *ProductTagCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// SetCreatedAt sets the "created_at" field.
func (ptc *ProductTagCreate) SetCreatedAt(t time.Time) *ProductTagCreate {
	ptc.mutation.SetCreatedAt(t)
	return ptc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptc *ProductTagCreate) SetNillableCreatedAt(t *time.Time) *ProductTagCreate {
	if t != nil {
		ptc.SetCreatedAt(*t)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *ProductTagCreate) SetID(pu pulid.ID) *ProductTagCreate {
	ptc.mutation.SetID(pu)
	return ptc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptc *ProductTagCreate) SetNillableID(pu *pulid.ID) *ProductTagCreate {
	if pu != nil {
		ptc.SetID(*pu)
	}
	return ptc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ptc *ProductTagCreate) SetTenant(t *Tenant) *ProductTagCreate {
	return ptc.SetTenantID(t.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (ptc *ProductTagCreate) AddProductIDs(ids ...pulid.ID) *ProductTagCreate {
	ptc.mutation.AddProductIDs(ids...)
	return ptc
}

// AddProducts adds the "products" edges to the Product entity.
func (ptc *ProductTagCreate) AddProducts(p ...*Product) *ProductTagCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptc.AddProductIDs(ids...)
}

// Mutation returns the ProductTagMutation object of the builder.
func (ptc *ProductTagCreate) Mutation() *ProductTagMutation {
	return ptc.mutation
}

// Save creates the ProductTag in the database.
func (ptc *ProductTagCreate) Save(ctx context.Context) (*ProductTag, error) {
	if err := ptc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *ProductTagCreate) SaveX(ctx context.Context) *ProductTag {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *ProductTagCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *ProductTagCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *ProductTagCreate) defaults() error {
	if _, ok := ptc.mutation.CreatedAt(); !ok {
		if producttag.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized producttag.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := producttag.DefaultCreatedAt()
		ptc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptc.mutation.ID(); !ok {
		if producttag.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized producttag.DefaultID (forgotten import ent/runtime?)")
		}
		v := producttag.DefaultID()
		ptc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ptc *ProductTagCreate) check() error {
	if _, ok := ptc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProductTag.tenant_id"`)}
	}
	if _, ok := ptc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProductTag.name"`)}
	}
	if len(ptc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ProductTag.tenant"`)}
	}
	return nil
}

func (ptc *ProductTagCreate) sqlSave(ctx context.Context) (*ProductTag, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *ProductTagCreate) createSpec() (*ProductTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductTag{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(producttag.Table, sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString))
	)
	_spec.OnConflict = ptc.conflict
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ptc.mutation.Name(); ok {
		_spec.SetField(producttag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ptc.mutation.CreatedAt(); ok {
		_spec.SetField(producttag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ptc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   producttag.TenantTable,
			Columns: []string{producttag.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductTag.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductTagUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ptc *ProductTagCreate) OnConflict(opts ...sql.ConflictOption) *ProductTagUpsertOne {
	ptc.conflict = opts
	return &ProductTagUpsertOne{
		create: ptc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptc *ProductTagCreate) OnConflictColumns(columns ...string) *ProductTagUpsertOne {
	ptc.conflict = append(ptc.conflict, sql.ConflictColumns(columns...))
	return &ProductTagUpsertOne{
		create: ptc,
	}
}

type (
	// ProductTagUpsertOne is the builder for "upsert"-ing
	//  one ProductTag node.
	ProductTagUpsertOne struct {
		create *ProductTagCreate
	}

	// ProductTagUpsert is the "OnConflict" setter.
	ProductTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ProductTagUpsert) SetTenantID(v pulid.ID) *ProductTagUpsert {
	u.Set(producttag.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductTagUpsert) UpdateTenantID() *ProductTagUpsert {
	u.SetExcluded(producttag.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *ProductTagUpsert) SetName(v string) *ProductTagUpsert {
	u.Set(producttag.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductTagUpsert) UpdateName() *ProductTagUpsert {
	u.SetExcluded(producttag.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProductTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(producttag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductTagUpsertOne) UpdateNewValues() *ProductTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(producttag.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(producttag.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductTagUpsertOne) Ignore() *ProductTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductTagUpsertOne) DoNothing() *ProductTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductTagCreate.OnConflict
// documentation for more info.
func (u *ProductTagUpsertOne) Update(set func(*ProductTagUpsert)) *ProductTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ProductTagUpsertOne) SetTenantID(v pulid.ID) *ProductTagUpsertOne {
	return u.Update(func(s *ProductTagUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductTagUpsertOne) UpdateTenantID() *ProductTagUpsertOne {
	return u.Update(func(s *ProductTagUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ProductTagUpsertOne) SetName(v string) *ProductTagUpsertOne {
	return u.Update(func(s *ProductTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductTagUpsertOne) UpdateName() *ProductTagUpsertOne {
	return u.Update(func(s *ProductTagUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *ProductTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductTagUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProductTagUpsertOne.ID is not supported by MySQL driver. Use ProductTagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductTagUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductTagCreateBulk is the builder for creating many ProductTag entities in bulk.
type ProductTagCreateBulk struct {
	config
	err      error
	builders []*ProductTagCreate
	conflict []sql.ConflictOption
}

// Save creates the ProductTag entities in the database.
func (ptcb *ProductTagCreateBulk) Save(ctx context.Context) ([]*ProductTag, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*ProductTag, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *ProductTagCreateBulk) SaveX(ctx context.Context) []*ProductTag {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *ProductTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *ProductTagCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductTagUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ptcb *ProductTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductTagUpsertBulk {
	ptcb.conflict = opts
	return &ProductTagUpsertBulk{
		create: ptcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptcb *ProductTagCreateBulk) OnConflictColumns(columns ...string) *ProductTagUpsertBulk {
	ptcb.conflict = append(ptcb.conflict, sql.ConflictColumns(columns...))
	return &ProductTagUpsertBulk{
		create: ptcb,
	}
}

// ProductTagUpsertBulk is the builder for "upsert"-ing
// a bulk of ProductTag nodes.
type ProductTagUpsertBulk struct {
	create *ProductTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProductTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(producttag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductTagUpsertBulk) UpdateNewValues() *ProductTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(producttag.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(producttag.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductTagUpsertBulk) Ignore() *ProductTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductTagUpsertBulk) DoNothing() *ProductTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductTagCreateBulk.OnConflict
// documentation for more info.
func (u *ProductTagUpsertBulk) Update(set func(*ProductTagUpsert)) *ProductTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ProductTagUpsertBulk) SetTenantID(v pulid.ID) *ProductTagUpsertBulk {
	return u.Update(func(s *ProductTagUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductTagUpsertBulk) UpdateTenantID() *ProductTagUpsertBulk {
	return u.Update(func(s *ProductTagUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *ProductTagUpsertBulk) SetName(v string) *ProductTagUpsertBulk {
	return u.Update(func(s *ProductTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProductTagUpsertBulk) UpdateName() *ProductTagUpsertBulk {
	return u.Update(func(s *ProductTagUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *ProductTagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
