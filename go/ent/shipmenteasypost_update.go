// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentEasyPostUpdate is the builder for updating ShipmentEasyPost entities.
type ShipmentEasyPostUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentEasyPostMutation
}

// Where appends a list predicates to the ShipmentEasyPostUpdate builder.
func (sepu *ShipmentEasyPostUpdate) Where(ps ...predicate.ShipmentEasyPost) *ShipmentEasyPostUpdate {
	sepu.mutation.Where(ps...)
	return sepu
}

// SetTenantID sets the "tenant_id" field.
func (sepu *ShipmentEasyPostUpdate) SetTenantID(pu pulid.ID) *ShipmentEasyPostUpdate {
	sepu.mutation.SetTenantID(pu)
	return sepu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sepu *ShipmentEasyPostUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentEasyPostUpdate {
	if pu != nil {
		sepu.SetTenantID(*pu)
	}
	return sepu
}

// SetTrackingNumber sets the "tracking_number" field.
func (sepu *ShipmentEasyPostUpdate) SetTrackingNumber(s string) *ShipmentEasyPostUpdate {
	sepu.mutation.SetTrackingNumber(s)
	return sepu
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (sepu *ShipmentEasyPostUpdate) SetNillableTrackingNumber(s *string) *ShipmentEasyPostUpdate {
	if s != nil {
		sepu.SetTrackingNumber(*s)
	}
	return sepu
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (sepu *ShipmentEasyPostUpdate) ClearTrackingNumber() *ShipmentEasyPostUpdate {
	sepu.mutation.ClearTrackingNumber()
	return sepu
}

// SetEpShipmentID sets the "ep_shipment_id" field.
func (sepu *ShipmentEasyPostUpdate) SetEpShipmentID(s string) *ShipmentEasyPostUpdate {
	sepu.mutation.SetEpShipmentID(s)
	return sepu
}

// SetNillableEpShipmentID sets the "ep_shipment_id" field if the given value is not nil.
func (sepu *ShipmentEasyPostUpdate) SetNillableEpShipmentID(s *string) *ShipmentEasyPostUpdate {
	if s != nil {
		sepu.SetEpShipmentID(*s)
	}
	return sepu
}

// ClearEpShipmentID clears the value of the "ep_shipment_id" field.
func (sepu *ShipmentEasyPostUpdate) ClearEpShipmentID() *ShipmentEasyPostUpdate {
	sepu.mutation.ClearEpShipmentID()
	return sepu
}

// SetRate sets the "rate" field.
func (sepu *ShipmentEasyPostUpdate) SetRate(f float64) *ShipmentEasyPostUpdate {
	sepu.mutation.ResetRate()
	sepu.mutation.SetRate(f)
	return sepu
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (sepu *ShipmentEasyPostUpdate) SetNillableRate(f *float64) *ShipmentEasyPostUpdate {
	if f != nil {
		sepu.SetRate(*f)
	}
	return sepu
}

// AddRate adds f to the "rate" field.
func (sepu *ShipmentEasyPostUpdate) AddRate(f float64) *ShipmentEasyPostUpdate {
	sepu.mutation.AddRate(f)
	return sepu
}

// ClearRate clears the value of the "rate" field.
func (sepu *ShipmentEasyPostUpdate) ClearRate() *ShipmentEasyPostUpdate {
	sepu.mutation.ClearRate()
	return sepu
}

// SetEstDeliveryDate sets the "est_delivery_date" field.
func (sepu *ShipmentEasyPostUpdate) SetEstDeliveryDate(t time.Time) *ShipmentEasyPostUpdate {
	sepu.mutation.SetEstDeliveryDate(t)
	return sepu
}

// SetNillableEstDeliveryDate sets the "est_delivery_date" field if the given value is not nil.
func (sepu *ShipmentEasyPostUpdate) SetNillableEstDeliveryDate(t *time.Time) *ShipmentEasyPostUpdate {
	if t != nil {
		sepu.SetEstDeliveryDate(*t)
	}
	return sepu
}

// ClearEstDeliveryDate clears the value of the "est_delivery_date" field.
func (sepu *ShipmentEasyPostUpdate) ClearEstDeliveryDate() *ShipmentEasyPostUpdate {
	sepu.mutation.ClearEstDeliveryDate()
	return sepu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sepu *ShipmentEasyPostUpdate) SetTenant(t *Tenant) *ShipmentEasyPostUpdate {
	return sepu.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sepu *ShipmentEasyPostUpdate) SetShipmentID(id pulid.ID) *ShipmentEasyPostUpdate {
	sepu.mutation.SetShipmentID(id)
	return sepu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sepu *ShipmentEasyPostUpdate) SetShipment(s *Shipment) *ShipmentEasyPostUpdate {
	return sepu.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentEasyPostMutation object of the builder.
func (sepu *ShipmentEasyPostUpdate) Mutation() *ShipmentEasyPostMutation {
	return sepu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sepu *ShipmentEasyPostUpdate) ClearTenant() *ShipmentEasyPostUpdate {
	sepu.mutation.ClearTenant()
	return sepu
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (sepu *ShipmentEasyPostUpdate) ClearShipment() *ShipmentEasyPostUpdate {
	sepu.mutation.ClearShipment()
	return sepu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sepu *ShipmentEasyPostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sepu.sqlSave, sepu.mutation, sepu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sepu *ShipmentEasyPostUpdate) SaveX(ctx context.Context) int {
	affected, err := sepu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sepu *ShipmentEasyPostUpdate) Exec(ctx context.Context) error {
	_, err := sepu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sepu *ShipmentEasyPostUpdate) ExecX(ctx context.Context) {
	if err := sepu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sepu *ShipmentEasyPostUpdate) check() error {
	if sepu.mutation.TenantCleared() && len(sepu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentEasyPost.tenant"`)
	}
	if sepu.mutation.ShipmentCleared() && len(sepu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentEasyPost.shipment"`)
	}
	return nil
}

func (sepu *ShipmentEasyPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sepu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmenteasypost.Table, shipmenteasypost.Columns, sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString))
	if ps := sepu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sepu.mutation.TrackingNumber(); ok {
		_spec.SetField(shipmenteasypost.FieldTrackingNumber, field.TypeString, value)
	}
	if sepu.mutation.TrackingNumberCleared() {
		_spec.ClearField(shipmenteasypost.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := sepu.mutation.EpShipmentID(); ok {
		_spec.SetField(shipmenteasypost.FieldEpShipmentID, field.TypeString, value)
	}
	if sepu.mutation.EpShipmentIDCleared() {
		_spec.ClearField(shipmenteasypost.FieldEpShipmentID, field.TypeString)
	}
	if value, ok := sepu.mutation.Rate(); ok {
		_spec.SetField(shipmenteasypost.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := sepu.mutation.AddedRate(); ok {
		_spec.AddField(shipmenteasypost.FieldRate, field.TypeFloat64, value)
	}
	if sepu.mutation.RateCleared() {
		_spec.ClearField(shipmenteasypost.FieldRate, field.TypeFloat64)
	}
	if value, ok := sepu.mutation.EstDeliveryDate(); ok {
		_spec.SetField(shipmenteasypost.FieldEstDeliveryDate, field.TypeTime, value)
	}
	if sepu.mutation.EstDeliveryDateCleared() {
		_spec.ClearField(shipmenteasypost.FieldEstDeliveryDate, field.TypeTime)
	}
	if sepu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenteasypost.TenantTable,
			Columns: []string{shipmenteasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sepu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenteasypost.TenantTable,
			Columns: []string{shipmenteasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sepu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmenteasypost.ShipmentTable,
			Columns: []string{shipmenteasypost.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sepu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmenteasypost.ShipmentTable,
			Columns: []string{shipmenteasypost.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sepu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenteasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sepu.mutation.done = true
	return n, nil
}

// ShipmentEasyPostUpdateOne is the builder for updating a single ShipmentEasyPost entity.
type ShipmentEasyPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentEasyPostMutation
}

// SetTenantID sets the "tenant_id" field.
func (sepuo *ShipmentEasyPostUpdateOne) SetTenantID(pu pulid.ID) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.SetTenantID(pu)
	return sepuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sepuo *ShipmentEasyPostUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentEasyPostUpdateOne {
	if pu != nil {
		sepuo.SetTenantID(*pu)
	}
	return sepuo
}

// SetTrackingNumber sets the "tracking_number" field.
func (sepuo *ShipmentEasyPostUpdateOne) SetTrackingNumber(s string) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.SetTrackingNumber(s)
	return sepuo
}

// SetNillableTrackingNumber sets the "tracking_number" field if the given value is not nil.
func (sepuo *ShipmentEasyPostUpdateOne) SetNillableTrackingNumber(s *string) *ShipmentEasyPostUpdateOne {
	if s != nil {
		sepuo.SetTrackingNumber(*s)
	}
	return sepuo
}

// ClearTrackingNumber clears the value of the "tracking_number" field.
func (sepuo *ShipmentEasyPostUpdateOne) ClearTrackingNumber() *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ClearTrackingNumber()
	return sepuo
}

// SetEpShipmentID sets the "ep_shipment_id" field.
func (sepuo *ShipmentEasyPostUpdateOne) SetEpShipmentID(s string) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.SetEpShipmentID(s)
	return sepuo
}

// SetNillableEpShipmentID sets the "ep_shipment_id" field if the given value is not nil.
func (sepuo *ShipmentEasyPostUpdateOne) SetNillableEpShipmentID(s *string) *ShipmentEasyPostUpdateOne {
	if s != nil {
		sepuo.SetEpShipmentID(*s)
	}
	return sepuo
}

// ClearEpShipmentID clears the value of the "ep_shipment_id" field.
func (sepuo *ShipmentEasyPostUpdateOne) ClearEpShipmentID() *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ClearEpShipmentID()
	return sepuo
}

// SetRate sets the "rate" field.
func (sepuo *ShipmentEasyPostUpdateOne) SetRate(f float64) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ResetRate()
	sepuo.mutation.SetRate(f)
	return sepuo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (sepuo *ShipmentEasyPostUpdateOne) SetNillableRate(f *float64) *ShipmentEasyPostUpdateOne {
	if f != nil {
		sepuo.SetRate(*f)
	}
	return sepuo
}

// AddRate adds f to the "rate" field.
func (sepuo *ShipmentEasyPostUpdateOne) AddRate(f float64) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.AddRate(f)
	return sepuo
}

// ClearRate clears the value of the "rate" field.
func (sepuo *ShipmentEasyPostUpdateOne) ClearRate() *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ClearRate()
	return sepuo
}

// SetEstDeliveryDate sets the "est_delivery_date" field.
func (sepuo *ShipmentEasyPostUpdateOne) SetEstDeliveryDate(t time.Time) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.SetEstDeliveryDate(t)
	return sepuo
}

// SetNillableEstDeliveryDate sets the "est_delivery_date" field if the given value is not nil.
func (sepuo *ShipmentEasyPostUpdateOne) SetNillableEstDeliveryDate(t *time.Time) *ShipmentEasyPostUpdateOne {
	if t != nil {
		sepuo.SetEstDeliveryDate(*t)
	}
	return sepuo
}

// ClearEstDeliveryDate clears the value of the "est_delivery_date" field.
func (sepuo *ShipmentEasyPostUpdateOne) ClearEstDeliveryDate() *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ClearEstDeliveryDate()
	return sepuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sepuo *ShipmentEasyPostUpdateOne) SetTenant(t *Tenant) *ShipmentEasyPostUpdateOne {
	return sepuo.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (sepuo *ShipmentEasyPostUpdateOne) SetShipmentID(id pulid.ID) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.SetShipmentID(id)
	return sepuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (sepuo *ShipmentEasyPostUpdateOne) SetShipment(s *Shipment) *ShipmentEasyPostUpdateOne {
	return sepuo.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentEasyPostMutation object of the builder.
func (sepuo *ShipmentEasyPostUpdateOne) Mutation() *ShipmentEasyPostMutation {
	return sepuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sepuo *ShipmentEasyPostUpdateOne) ClearTenant() *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ClearTenant()
	return sepuo
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (sepuo *ShipmentEasyPostUpdateOne) ClearShipment() *ShipmentEasyPostUpdateOne {
	sepuo.mutation.ClearShipment()
	return sepuo
}

// Where appends a list predicates to the ShipmentEasyPostUpdate builder.
func (sepuo *ShipmentEasyPostUpdateOne) Where(ps ...predicate.ShipmentEasyPost) *ShipmentEasyPostUpdateOne {
	sepuo.mutation.Where(ps...)
	return sepuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sepuo *ShipmentEasyPostUpdateOne) Select(field string, fields ...string) *ShipmentEasyPostUpdateOne {
	sepuo.fields = append([]string{field}, fields...)
	return sepuo
}

// Save executes the query and returns the updated ShipmentEasyPost entity.
func (sepuo *ShipmentEasyPostUpdateOne) Save(ctx context.Context) (*ShipmentEasyPost, error) {
	return withHooks(ctx, sepuo.sqlSave, sepuo.mutation, sepuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sepuo *ShipmentEasyPostUpdateOne) SaveX(ctx context.Context) *ShipmentEasyPost {
	node, err := sepuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sepuo *ShipmentEasyPostUpdateOne) Exec(ctx context.Context) error {
	_, err := sepuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sepuo *ShipmentEasyPostUpdateOne) ExecX(ctx context.Context) {
	if err := sepuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sepuo *ShipmentEasyPostUpdateOne) check() error {
	if sepuo.mutation.TenantCleared() && len(sepuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentEasyPost.tenant"`)
	}
	if sepuo.mutation.ShipmentCleared() && len(sepuo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentEasyPost.shipment"`)
	}
	return nil
}

func (sepuo *ShipmentEasyPostUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentEasyPost, err error) {
	if err := sepuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmenteasypost.Table, shipmenteasypost.Columns, sqlgraph.NewFieldSpec(shipmenteasypost.FieldID, field.TypeString))
	id, ok := sepuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentEasyPost.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sepuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmenteasypost.FieldID)
		for _, f := range fields {
			if !shipmenteasypost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmenteasypost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sepuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sepuo.mutation.TrackingNumber(); ok {
		_spec.SetField(shipmenteasypost.FieldTrackingNumber, field.TypeString, value)
	}
	if sepuo.mutation.TrackingNumberCleared() {
		_spec.ClearField(shipmenteasypost.FieldTrackingNumber, field.TypeString)
	}
	if value, ok := sepuo.mutation.EpShipmentID(); ok {
		_spec.SetField(shipmenteasypost.FieldEpShipmentID, field.TypeString, value)
	}
	if sepuo.mutation.EpShipmentIDCleared() {
		_spec.ClearField(shipmenteasypost.FieldEpShipmentID, field.TypeString)
	}
	if value, ok := sepuo.mutation.Rate(); ok {
		_spec.SetField(shipmenteasypost.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := sepuo.mutation.AddedRate(); ok {
		_spec.AddField(shipmenteasypost.FieldRate, field.TypeFloat64, value)
	}
	if sepuo.mutation.RateCleared() {
		_spec.ClearField(shipmenteasypost.FieldRate, field.TypeFloat64)
	}
	if value, ok := sepuo.mutation.EstDeliveryDate(); ok {
		_spec.SetField(shipmenteasypost.FieldEstDeliveryDate, field.TypeTime, value)
	}
	if sepuo.mutation.EstDeliveryDateCleared() {
		_spec.ClearField(shipmenteasypost.FieldEstDeliveryDate, field.TypeTime)
	}
	if sepuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenteasypost.TenantTable,
			Columns: []string{shipmenteasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sepuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenteasypost.TenantTable,
			Columns: []string{shipmenteasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sepuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmenteasypost.ShipmentTable,
			Columns: []string{shipmenteasypost.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sepuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmenteasypost.ShipmentTable,
			Columns: []string{shipmenteasypost.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentEasyPost{config: sepuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sepuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmenteasypost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sepuo.mutation.done = true
	return _node, nil
}
