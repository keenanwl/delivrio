// Code generated by ent, DO NOT EDIT.

package document

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldName, v))
}

// HTMLTemplate applies equality check predicate on the "html_template" field. It's identical to HTMLTemplateEQ.
func HTMLTemplate(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldHTMLTemplate, v))
}

// HTMLHeader applies equality check predicate on the "html_header" field. It's identical to HTMLHeaderEQ.
func HTMLHeader(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldHTMLHeader, v))
}

// HTMLFooter applies equality check predicate on the "html_footer" field. It's identical to HTMLFooterEQ.
func HTMLFooter(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldHTMLFooter, v))
}

// LastBase64Pdf applies equality check predicate on the "last_base64_pdf" field. It's identical to LastBase64PdfEQ.
func LastBase64Pdf(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldLastBase64Pdf, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldEndAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Document {
	vc := string(v)
	return predicate.Document(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Document {
	vc := string(v)
	return predicate.Document(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Document {
	vc := string(v)
	return predicate.Document(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Document {
	vc := string(v)
	return predicate.Document(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Document {
	vc := string(v)
	return predicate.Document(sql.FieldContainsFold(FieldTenantID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldName, v))
}

// HTMLTemplateEQ applies the EQ predicate on the "html_template" field.
func HTMLTemplateEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldHTMLTemplate, v))
}

// HTMLTemplateNEQ applies the NEQ predicate on the "html_template" field.
func HTMLTemplateNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldHTMLTemplate, v))
}

// HTMLTemplateIn applies the In predicate on the "html_template" field.
func HTMLTemplateIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldHTMLTemplate, vs...))
}

// HTMLTemplateNotIn applies the NotIn predicate on the "html_template" field.
func HTMLTemplateNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldHTMLTemplate, vs...))
}

// HTMLTemplateGT applies the GT predicate on the "html_template" field.
func HTMLTemplateGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldHTMLTemplate, v))
}

// HTMLTemplateGTE applies the GTE predicate on the "html_template" field.
func HTMLTemplateGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldHTMLTemplate, v))
}

// HTMLTemplateLT applies the LT predicate on the "html_template" field.
func HTMLTemplateLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldHTMLTemplate, v))
}

// HTMLTemplateLTE applies the LTE predicate on the "html_template" field.
func HTMLTemplateLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldHTMLTemplate, v))
}

// HTMLTemplateContains applies the Contains predicate on the "html_template" field.
func HTMLTemplateContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldHTMLTemplate, v))
}

// HTMLTemplateHasPrefix applies the HasPrefix predicate on the "html_template" field.
func HTMLTemplateHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldHTMLTemplate, v))
}

// HTMLTemplateHasSuffix applies the HasSuffix predicate on the "html_template" field.
func HTMLTemplateHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldHTMLTemplate, v))
}

// HTMLTemplateIsNil applies the IsNil predicate on the "html_template" field.
func HTMLTemplateIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldHTMLTemplate))
}

// HTMLTemplateNotNil applies the NotNil predicate on the "html_template" field.
func HTMLTemplateNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldHTMLTemplate))
}

// HTMLTemplateEqualFold applies the EqualFold predicate on the "html_template" field.
func HTMLTemplateEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldHTMLTemplate, v))
}

// HTMLTemplateContainsFold applies the ContainsFold predicate on the "html_template" field.
func HTMLTemplateContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldHTMLTemplate, v))
}

// HTMLHeaderEQ applies the EQ predicate on the "html_header" field.
func HTMLHeaderEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldHTMLHeader, v))
}

// HTMLHeaderNEQ applies the NEQ predicate on the "html_header" field.
func HTMLHeaderNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldHTMLHeader, v))
}

// HTMLHeaderIn applies the In predicate on the "html_header" field.
func HTMLHeaderIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldHTMLHeader, vs...))
}

// HTMLHeaderNotIn applies the NotIn predicate on the "html_header" field.
func HTMLHeaderNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldHTMLHeader, vs...))
}

// HTMLHeaderGT applies the GT predicate on the "html_header" field.
func HTMLHeaderGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldHTMLHeader, v))
}

// HTMLHeaderGTE applies the GTE predicate on the "html_header" field.
func HTMLHeaderGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldHTMLHeader, v))
}

// HTMLHeaderLT applies the LT predicate on the "html_header" field.
func HTMLHeaderLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldHTMLHeader, v))
}

// HTMLHeaderLTE applies the LTE predicate on the "html_header" field.
func HTMLHeaderLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldHTMLHeader, v))
}

// HTMLHeaderContains applies the Contains predicate on the "html_header" field.
func HTMLHeaderContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldHTMLHeader, v))
}

// HTMLHeaderHasPrefix applies the HasPrefix predicate on the "html_header" field.
func HTMLHeaderHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldHTMLHeader, v))
}

// HTMLHeaderHasSuffix applies the HasSuffix predicate on the "html_header" field.
func HTMLHeaderHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldHTMLHeader, v))
}

// HTMLHeaderIsNil applies the IsNil predicate on the "html_header" field.
func HTMLHeaderIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldHTMLHeader))
}

// HTMLHeaderNotNil applies the NotNil predicate on the "html_header" field.
func HTMLHeaderNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldHTMLHeader))
}

// HTMLHeaderEqualFold applies the EqualFold predicate on the "html_header" field.
func HTMLHeaderEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldHTMLHeader, v))
}

// HTMLHeaderContainsFold applies the ContainsFold predicate on the "html_header" field.
func HTMLHeaderContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldHTMLHeader, v))
}

// HTMLFooterEQ applies the EQ predicate on the "html_footer" field.
func HTMLFooterEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldHTMLFooter, v))
}

// HTMLFooterNEQ applies the NEQ predicate on the "html_footer" field.
func HTMLFooterNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldHTMLFooter, v))
}

// HTMLFooterIn applies the In predicate on the "html_footer" field.
func HTMLFooterIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldHTMLFooter, vs...))
}

// HTMLFooterNotIn applies the NotIn predicate on the "html_footer" field.
func HTMLFooterNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldHTMLFooter, vs...))
}

// HTMLFooterGT applies the GT predicate on the "html_footer" field.
func HTMLFooterGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldHTMLFooter, v))
}

// HTMLFooterGTE applies the GTE predicate on the "html_footer" field.
func HTMLFooterGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldHTMLFooter, v))
}

// HTMLFooterLT applies the LT predicate on the "html_footer" field.
func HTMLFooterLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldHTMLFooter, v))
}

// HTMLFooterLTE applies the LTE predicate on the "html_footer" field.
func HTMLFooterLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldHTMLFooter, v))
}

// HTMLFooterContains applies the Contains predicate on the "html_footer" field.
func HTMLFooterContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldHTMLFooter, v))
}

// HTMLFooterHasPrefix applies the HasPrefix predicate on the "html_footer" field.
func HTMLFooterHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldHTMLFooter, v))
}

// HTMLFooterHasSuffix applies the HasSuffix predicate on the "html_footer" field.
func HTMLFooterHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldHTMLFooter, v))
}

// HTMLFooterIsNil applies the IsNil predicate on the "html_footer" field.
func HTMLFooterIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldHTMLFooter))
}

// HTMLFooterNotNil applies the NotNil predicate on the "html_footer" field.
func HTMLFooterNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldHTMLFooter))
}

// HTMLFooterEqualFold applies the EqualFold predicate on the "html_footer" field.
func HTMLFooterEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldHTMLFooter, v))
}

// HTMLFooterContainsFold applies the ContainsFold predicate on the "html_footer" field.
func HTMLFooterContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldHTMLFooter, v))
}

// LastBase64PdfEQ applies the EQ predicate on the "last_base64_pdf" field.
func LastBase64PdfEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldLastBase64Pdf, v))
}

// LastBase64PdfNEQ applies the NEQ predicate on the "last_base64_pdf" field.
func LastBase64PdfNEQ(v string) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldLastBase64Pdf, v))
}

// LastBase64PdfIn applies the In predicate on the "last_base64_pdf" field.
func LastBase64PdfIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldLastBase64Pdf, vs...))
}

// LastBase64PdfNotIn applies the NotIn predicate on the "last_base64_pdf" field.
func LastBase64PdfNotIn(vs ...string) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldLastBase64Pdf, vs...))
}

// LastBase64PdfGT applies the GT predicate on the "last_base64_pdf" field.
func LastBase64PdfGT(v string) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldLastBase64Pdf, v))
}

// LastBase64PdfGTE applies the GTE predicate on the "last_base64_pdf" field.
func LastBase64PdfGTE(v string) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldLastBase64Pdf, v))
}

// LastBase64PdfLT applies the LT predicate on the "last_base64_pdf" field.
func LastBase64PdfLT(v string) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldLastBase64Pdf, v))
}

// LastBase64PdfLTE applies the LTE predicate on the "last_base64_pdf" field.
func LastBase64PdfLTE(v string) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldLastBase64Pdf, v))
}

// LastBase64PdfContains applies the Contains predicate on the "last_base64_pdf" field.
func LastBase64PdfContains(v string) predicate.Document {
	return predicate.Document(sql.FieldContains(FieldLastBase64Pdf, v))
}

// LastBase64PdfHasPrefix applies the HasPrefix predicate on the "last_base64_pdf" field.
func LastBase64PdfHasPrefix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasPrefix(FieldLastBase64Pdf, v))
}

// LastBase64PdfHasSuffix applies the HasSuffix predicate on the "last_base64_pdf" field.
func LastBase64PdfHasSuffix(v string) predicate.Document {
	return predicate.Document(sql.FieldHasSuffix(FieldLastBase64Pdf, v))
}

// LastBase64PdfIsNil applies the IsNil predicate on the "last_base64_pdf" field.
func LastBase64PdfIsNil() predicate.Document {
	return predicate.Document(sql.FieldIsNull(FieldLastBase64Pdf))
}

// LastBase64PdfNotNil applies the NotNil predicate on the "last_base64_pdf" field.
func LastBase64PdfNotNil() predicate.Document {
	return predicate.Document(sql.FieldNotNull(FieldLastBase64Pdf))
}

// LastBase64PdfEqualFold applies the EqualFold predicate on the "last_base64_pdf" field.
func LastBase64PdfEqualFold(v string) predicate.Document {
	return predicate.Document(sql.FieldEqualFold(FieldLastBase64Pdf, v))
}

// LastBase64PdfContainsFold applies the ContainsFold predicate on the "last_base64_pdf" field.
func LastBase64PdfContainsFold(v string) predicate.Document {
	return predicate.Document(sql.FieldContainsFold(FieldLastBase64Pdf, v))
}

// MergeTypeEQ applies the EQ predicate on the "merge_type" field.
func MergeTypeEQ(v MergeType) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldMergeType, v))
}

// MergeTypeNEQ applies the NEQ predicate on the "merge_type" field.
func MergeTypeNEQ(v MergeType) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldMergeType, v))
}

// MergeTypeIn applies the In predicate on the "merge_type" field.
func MergeTypeIn(vs ...MergeType) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldMergeType, vs...))
}

// MergeTypeNotIn applies the NotIn predicate on the "merge_type" field.
func MergeTypeNotIn(vs ...MergeType) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldMergeType, vs...))
}

// PaperSizeEQ applies the EQ predicate on the "paper_size" field.
func PaperSizeEQ(v PaperSize) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldPaperSize, v))
}

// PaperSizeNEQ applies the NEQ predicate on the "paper_size" field.
func PaperSizeNEQ(v PaperSize) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldPaperSize, v))
}

// PaperSizeIn applies the In predicate on the "paper_size" field.
func PaperSizeIn(vs ...PaperSize) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldPaperSize, vs...))
}

// PaperSizeNotIn applies the NotIn predicate on the "paper_size" field.
func PaperSizeNotIn(vs ...PaperSize) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldPaperSize, vs...))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldStartAt, v))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldEndAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Document {
	return predicate.Document(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Document {
	return predicate.Document(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierBrand applies the HasEdge predicate on the "carrier_brand" edge.
func HasCarrierBrand() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierBrandWith applies the HasEdge predicate on the "carrier_brand" edge with a given conditions (other predicates).
func HasCarrierBrandWith(preds ...predicate.CarrierBrand) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newCarrierBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConnectionPackingSlip applies the HasEdge predicate on the "connection_packing_slip" edge.
func HasConnectionPackingSlip() predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ConnectionPackingSlipTable, ConnectionPackingSlipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConnectionPackingSlipWith applies the HasEdge predicate on the "connection_packing_slip" edge with a given conditions (other predicates).
func HasConnectionPackingSlipWith(preds ...predicate.Connection) predicate.Document {
	return predicate.Document(func(s *sql.Selector) {
		step := newConnectionPackingSlipStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Document) predicate.Document {
	return predicate.Document(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Document) predicate.Document {
	return predicate.Document(sql.NotPredicates(p))
}
