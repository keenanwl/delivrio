// Code generated by ent, DO NOT EDIT.

package document

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the document type in the database.
	Label = "document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldHTMLTemplate holds the string denoting the html_template field in the database.
	FieldHTMLTemplate = "html_template"
	// FieldHTMLHeader holds the string denoting the html_header field in the database.
	FieldHTMLHeader = "html_header"
	// FieldHTMLFooter holds the string denoting the html_footer field in the database.
	FieldHTMLFooter = "html_footer"
	// FieldLastBase64Pdf holds the string denoting the last_base64_pdf field in the database.
	FieldLastBase64Pdf = "last_base64_pdf"
	// FieldMergeType holds the string denoting the merge_type field in the database.
	FieldMergeType = "merge_type"
	// FieldPaperSize holds the string denoting the paper_size field in the database.
	FieldPaperSize = "paper_size"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrierBrand holds the string denoting the carrier_brand edge name in mutations.
	EdgeCarrierBrand = "carrier_brand"
	// EdgeConnectionPackingSlip holds the string denoting the connection_packing_slip edge name in mutations.
	EdgeConnectionPackingSlip = "connection_packing_slip"
	// Table holds the table name of the document in the database.
	Table = "documents"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "documents"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierBrandTable is the table that holds the carrier_brand relation/edge.
	CarrierBrandTable = "documents"
	// CarrierBrandInverseTable is the table name for the CarrierBrand entity.
	// It exists in this package in order to avoid circular dependency with the "carrierbrand" package.
	CarrierBrandInverseTable = "carrier_brands"
	// CarrierBrandColumn is the table column denoting the carrier_brand relation/edge.
	CarrierBrandColumn = "document_carrier_brand"
	// ConnectionPackingSlipTable is the table that holds the connection_packing_slip relation/edge.
	ConnectionPackingSlipTable = "connections"
	// ConnectionPackingSlipInverseTable is the table name for the Connection entity.
	// It exists in this package in order to avoid circular dependency with the "connection" package.
	ConnectionPackingSlipInverseTable = "connections"
	// ConnectionPackingSlipColumn is the table column denoting the connection_packing_slip relation/edge.
	ConnectionPackingSlipColumn = "connection_packing_slip_template"
)

// Columns holds all SQL columns for document fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldHTMLTemplate,
	FieldHTMLHeader,
	FieldHTMLFooter,
	FieldLastBase64Pdf,
	FieldMergeType,
	FieldPaperSize,
	FieldStartAt,
	FieldEndAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "documents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"document_carrier_brand",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultStartAt holds the default value on creation for the "start_at" field.
	DefaultStartAt func() time.Time
	// DefaultEndAt holds the default value on creation for the "end_at" field.
	DefaultEndAt func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// MergeType defines the type for the "merge_type" enum field.
type MergeType string

// MergeTypeOrders is the default value of the MergeType enum.
const DefaultMergeType = MergeTypeOrders

// MergeType values.
const (
	MergeTypeOrders      MergeType = "Orders"
	MergeTypePackingSlip MergeType = "PackingSlip"
	MergeTypeWaybill     MergeType = "Waybill"
)

func (mt MergeType) String() string {
	return string(mt)
}

// MergeTypeValidator is a validator for the "merge_type" field enum values. It is called by the builders before save.
func MergeTypeValidator(mt MergeType) error {
	switch mt {
	case MergeTypeOrders, MergeTypePackingSlip, MergeTypeWaybill:
		return nil
	default:
		return fmt.Errorf("document: invalid enum value for merge_type field: %q", mt)
	}
}

// PaperSize defines the type for the "paper_size" enum field.
type PaperSize string

// PaperSizeA4 is the default value of the PaperSize enum.
const DefaultPaperSize = PaperSizeA4

// PaperSize values.
const (
	PaperSizeA4         PaperSize = "A4"
	PaperSizeFour_x_six PaperSize = "Four_x_six"
)

func (ps PaperSize) String() string {
	return string(ps)
}

// PaperSizeValidator is a validator for the "paper_size" field enum values. It is called by the builders before save.
func PaperSizeValidator(ps PaperSize) error {
	switch ps {
	case PaperSizeA4, PaperSizeFour_x_six:
		return nil
	default:
		return fmt.Errorf("document: invalid enum value for paper_size field: %q", ps)
	}
}

// OrderOption defines the ordering options for the Document queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByHTMLTemplate orders the results by the html_template field.
func ByHTMLTemplate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLTemplate, opts...).ToFunc()
}

// ByHTMLHeader orders the results by the html_header field.
func ByHTMLHeader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLHeader, opts...).ToFunc()
}

// ByHTMLFooter orders the results by the html_footer field.
func ByHTMLFooter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLFooter, opts...).ToFunc()
}

// ByLastBase64Pdf orders the results by the last_base64_pdf field.
func ByLastBase64Pdf(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastBase64Pdf, opts...).ToFunc()
}

// ByMergeType orders the results by the merge_type field.
func ByMergeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMergeType, opts...).ToFunc()
}

// ByPaperSize orders the results by the paper_size field.
func ByPaperSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaperSize, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierBrandField orders the results by carrier_brand field.
func ByCarrierBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByConnectionPackingSlipCount orders the results by connection_packing_slip count.
func ByConnectionPackingSlipCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConnectionPackingSlipStep(), opts...)
	}
}

// ByConnectionPackingSlip orders the results by connection_packing_slip terms.
func ByConnectionPackingSlip(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConnectionPackingSlipStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierBrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
	)
}
func newConnectionPackingSlipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConnectionPackingSlipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ConnectionPackingSlipTable, ConnectionPackingSlipColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e MergeType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *MergeType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = MergeType(str)
	if err := MergeTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid MergeType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PaperSize) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PaperSize) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PaperSize(str)
	if err := PaperSizeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PaperSize", str)
	}
	return nil
}
