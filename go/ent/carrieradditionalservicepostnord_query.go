// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServicePostNordQuery is the builder for querying CarrierAdditionalServicePostNord entities.
type CarrierAdditionalServicePostNordQuery struct {
	config
	ctx                             *QueryContext
	order                           []carrieradditionalservicepostnord.OrderOption
	inters                          []Interceptor
	predicates                      []predicate.CarrierAdditionalServicePostNord
	withCarrierServicePostNord      *CarrierServicePostNordQuery
	withDeliveryOptionPostNord      *DeliveryOptionPostNordQuery
	withCountriesConsignee          *CountryQuery
	withCountriesConsignor          *CountryQuery
	withFKs                         bool
	modifiers                       []func(*sql.Selector)
	loadTotal                       []func(context.Context, []*CarrierAdditionalServicePostNord) error
	withNamedDeliveryOptionPostNord map[string]*DeliveryOptionPostNordQuery
	withNamedCountriesConsignee     map[string]*CountryQuery
	withNamedCountriesConsignor     map[string]*CountryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierAdditionalServicePostNordQuery builder.
func (caspnq *CarrierAdditionalServicePostNordQuery) Where(ps ...predicate.CarrierAdditionalServicePostNord) *CarrierAdditionalServicePostNordQuery {
	caspnq.predicates = append(caspnq.predicates, ps...)
	return caspnq
}

// Limit the number of records to be returned by this query.
func (caspnq *CarrierAdditionalServicePostNordQuery) Limit(limit int) *CarrierAdditionalServicePostNordQuery {
	caspnq.ctx.Limit = &limit
	return caspnq
}

// Offset to start from.
func (caspnq *CarrierAdditionalServicePostNordQuery) Offset(offset int) *CarrierAdditionalServicePostNordQuery {
	caspnq.ctx.Offset = &offset
	return caspnq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (caspnq *CarrierAdditionalServicePostNordQuery) Unique(unique bool) *CarrierAdditionalServicePostNordQuery {
	caspnq.ctx.Unique = &unique
	return caspnq
}

// Order specifies how the records should be ordered.
func (caspnq *CarrierAdditionalServicePostNordQuery) Order(o ...carrieradditionalservicepostnord.OrderOption) *CarrierAdditionalServicePostNordQuery {
	caspnq.order = append(caspnq.order, o...)
	return caspnq
}

// QueryCarrierServicePostNord chains the current query on the "carrier_service_post_nord" edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) QueryCarrierServicePostNord() *CarrierServicePostNordQuery {
	query := (&CarrierServicePostNordClient{config: caspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, selector),
			sqlgraph.To(carrierservicepostnord.Table, carrierservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalservicepostnord.CarrierServicePostNordTable, carrieradditionalservicepostnord.CarrierServicePostNordColumn),
		)
		fromU = sqlgraph.SetNeighbors(caspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionPostNord chains the current query on the "delivery_option_post_nord" edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) QueryDeliveryOptionPostNord() *DeliveryOptionPostNordQuery {
	query := (&DeliveryOptionPostNordClient{config: caspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, selector),
			sqlgraph.To(deliveryoptionpostnord.Table, deliveryoptionpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicepostnord.DeliveryOptionPostNordTable, carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(caspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountriesConsignee chains the current query on the "countries_consignee" edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) QueryCountriesConsignee() *CountryQuery {
	query := (&CountryClient{config: caspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicepostnord.CountriesConsigneeTable, carrieradditionalservicepostnord.CountriesConsigneePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(caspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountriesConsignor chains the current query on the "countries_consignor" edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) QueryCountriesConsignor() *CountryQuery {
	query := (&CountryClient{config: caspnq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caspnq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caspnq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicepostnord.CountriesConsignorTable, carrieradditionalservicepostnord.CountriesConsignorPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(caspnq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierAdditionalServicePostNord entity from the query.
// Returns a *NotFoundError when no CarrierAdditionalServicePostNord was found.
func (caspnq *CarrierAdditionalServicePostNordQuery) First(ctx context.Context) (*CarrierAdditionalServicePostNord, error) {
	nodes, err := caspnq.Limit(1).All(setContextOp(ctx, caspnq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrieradditionalservicepostnord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) FirstX(ctx context.Context) *CarrierAdditionalServicePostNord {
	node, err := caspnq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierAdditionalServicePostNord ID from the query.
// Returns a *NotFoundError when no CarrierAdditionalServicePostNord ID was found.
func (caspnq *CarrierAdditionalServicePostNordQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = caspnq.Limit(1).IDs(setContextOp(ctx, caspnq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrieradditionalservicepostnord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := caspnq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierAdditionalServicePostNord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierAdditionalServicePostNord entity is found.
// Returns a *NotFoundError when no CarrierAdditionalServicePostNord entities are found.
func (caspnq *CarrierAdditionalServicePostNordQuery) Only(ctx context.Context) (*CarrierAdditionalServicePostNord, error) {
	nodes, err := caspnq.Limit(2).All(setContextOp(ctx, caspnq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrieradditionalservicepostnord.Label}
	default:
		return nil, &NotSingularError{carrieradditionalservicepostnord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) OnlyX(ctx context.Context) *CarrierAdditionalServicePostNord {
	node, err := caspnq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierAdditionalServicePostNord ID in the query.
// Returns a *NotSingularError when more than one CarrierAdditionalServicePostNord ID is found.
// Returns a *NotFoundError when no entities are found.
func (caspnq *CarrierAdditionalServicePostNordQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = caspnq.Limit(2).IDs(setContextOp(ctx, caspnq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrieradditionalservicepostnord.Label}
	default:
		err = &NotSingularError{carrieradditionalservicepostnord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := caspnq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierAdditionalServicePostNords.
func (caspnq *CarrierAdditionalServicePostNordQuery) All(ctx context.Context) ([]*CarrierAdditionalServicePostNord, error) {
	ctx = setContextOp(ctx, caspnq.ctx, ent.OpQueryAll)
	if err := caspnq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierAdditionalServicePostNord, *CarrierAdditionalServicePostNordQuery]()
	return withInterceptors[[]*CarrierAdditionalServicePostNord](ctx, caspnq, qr, caspnq.inters)
}

// AllX is like All, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) AllX(ctx context.Context) []*CarrierAdditionalServicePostNord {
	nodes, err := caspnq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierAdditionalServicePostNord IDs.
func (caspnq *CarrierAdditionalServicePostNordQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if caspnq.ctx.Unique == nil && caspnq.path != nil {
		caspnq.Unique(true)
	}
	ctx = setContextOp(ctx, caspnq.ctx, ent.OpQueryIDs)
	if err = caspnq.Select(carrieradditionalservicepostnord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := caspnq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (caspnq *CarrierAdditionalServicePostNordQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, caspnq.ctx, ent.OpQueryCount)
	if err := caspnq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, caspnq, querierCount[*CarrierAdditionalServicePostNordQuery](), caspnq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) CountX(ctx context.Context) int {
	count, err := caspnq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (caspnq *CarrierAdditionalServicePostNordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, caspnq.ctx, ent.OpQueryExist)
	switch _, err := caspnq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (caspnq *CarrierAdditionalServicePostNordQuery) ExistX(ctx context.Context) bool {
	exist, err := caspnq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierAdditionalServicePostNordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (caspnq *CarrierAdditionalServicePostNordQuery) Clone() *CarrierAdditionalServicePostNordQuery {
	if caspnq == nil {
		return nil
	}
	return &CarrierAdditionalServicePostNordQuery{
		config:                     caspnq.config,
		ctx:                        caspnq.ctx.Clone(),
		order:                      append([]carrieradditionalservicepostnord.OrderOption{}, caspnq.order...),
		inters:                     append([]Interceptor{}, caspnq.inters...),
		predicates:                 append([]predicate.CarrierAdditionalServicePostNord{}, caspnq.predicates...),
		withCarrierServicePostNord: caspnq.withCarrierServicePostNord.Clone(),
		withDeliveryOptionPostNord: caspnq.withDeliveryOptionPostNord.Clone(),
		withCountriesConsignee:     caspnq.withCountriesConsignee.Clone(),
		withCountriesConsignor:     caspnq.withCountriesConsignor.Clone(),
		// clone intermediate query.
		sql:  caspnq.sql.Clone(),
		path: caspnq.path,
	}
}

// WithCarrierServicePostNord tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithCarrierServicePostNord(opts ...func(*CarrierServicePostNordQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierServicePostNordClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caspnq.withCarrierServicePostNord = query
	return caspnq
}

// WithDeliveryOptionPostNord tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithDeliveryOptionPostNord(opts ...func(*DeliveryOptionPostNordQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&DeliveryOptionPostNordClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caspnq.withDeliveryOptionPostNord = query
	return caspnq
}

// WithCountriesConsignee tells the query-builder to eager-load the nodes that are connected to
// the "countries_consignee" edge. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithCountriesConsignee(opts ...func(*CountryQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&CountryClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caspnq.withCountriesConsignee = query
	return caspnq
}

// WithCountriesConsignor tells the query-builder to eager-load the nodes that are connected to
// the "countries_consignor" edge. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithCountriesConsignor(opts ...func(*CountryQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&CountryClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caspnq.withCountriesConsignor = query
	return caspnq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierAdditionalServicePostNord.Query().
//		GroupBy(carrieradditionalservicepostnord.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (caspnq *CarrierAdditionalServicePostNordQuery) GroupBy(field string, fields ...string) *CarrierAdditionalServicePostNordGroupBy {
	caspnq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierAdditionalServicePostNordGroupBy{build: caspnq}
	grbuild.flds = &caspnq.ctx.Fields
	grbuild.label = carrieradditionalservicepostnord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierAdditionalServicePostNord.Query().
//		Select(carrieradditionalservicepostnord.FieldLabel).
//		Scan(ctx, &v)
func (caspnq *CarrierAdditionalServicePostNordQuery) Select(fields ...string) *CarrierAdditionalServicePostNordSelect {
	caspnq.ctx.Fields = append(caspnq.ctx.Fields, fields...)
	sbuild := &CarrierAdditionalServicePostNordSelect{CarrierAdditionalServicePostNordQuery: caspnq}
	sbuild.label = carrieradditionalservicepostnord.Label
	sbuild.flds, sbuild.scan = &caspnq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierAdditionalServicePostNordSelect configured with the given aggregations.
func (caspnq *CarrierAdditionalServicePostNordQuery) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServicePostNordSelect {
	return caspnq.Select().Aggregate(fns...)
}

func (caspnq *CarrierAdditionalServicePostNordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range caspnq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, caspnq); err != nil {
				return err
			}
		}
	}
	for _, f := range caspnq.ctx.Fields {
		if !carrieradditionalservicepostnord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if caspnq.path != nil {
		prev, err := caspnq.path(ctx)
		if err != nil {
			return err
		}
		caspnq.sql = prev
	}
	if carrieradditionalservicepostnord.Policy == nil {
		return errors.New("ent: uninitialized carrieradditionalservicepostnord.Policy (forgotten import ent/runtime?)")
	}
	if err := carrieradditionalservicepostnord.Policy.EvalQuery(ctx, caspnq); err != nil {
		return err
	}
	return nil
}

func (caspnq *CarrierAdditionalServicePostNordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierAdditionalServicePostNord, error) {
	var (
		nodes       = []*CarrierAdditionalServicePostNord{}
		withFKs     = caspnq.withFKs
		_spec       = caspnq.querySpec()
		loadedTypes = [4]bool{
			caspnq.withCarrierServicePostNord != nil,
			caspnq.withDeliveryOptionPostNord != nil,
			caspnq.withCountriesConsignee != nil,
			caspnq.withCountriesConsignor != nil,
		}
	)
	if caspnq.withCarrierServicePostNord != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicepostnord.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierAdditionalServicePostNord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierAdditionalServicePostNord{config: caspnq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(caspnq.modifiers) > 0 {
		_spec.Modifiers = caspnq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, caspnq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := caspnq.withCarrierServicePostNord; query != nil {
		if err := caspnq.loadCarrierServicePostNord(ctx, query, nodes, nil,
			func(n *CarrierAdditionalServicePostNord, e *CarrierServicePostNord) {
				n.Edges.CarrierServicePostNord = e
			}); err != nil {
			return nil, err
		}
	}
	if query := caspnq.withDeliveryOptionPostNord; query != nil {
		if err := caspnq.loadDeliveryOptionPostNord(ctx, query, nodes,
			func(n *CarrierAdditionalServicePostNord) {
				n.Edges.DeliveryOptionPostNord = []*DeliveryOptionPostNord{}
			},
			func(n *CarrierAdditionalServicePostNord, e *DeliveryOptionPostNord) {
				n.Edges.DeliveryOptionPostNord = append(n.Edges.DeliveryOptionPostNord, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := caspnq.withCountriesConsignee; query != nil {
		if err := caspnq.loadCountriesConsignee(ctx, query, nodes,
			func(n *CarrierAdditionalServicePostNord) { n.Edges.CountriesConsignee = []*Country{} },
			func(n *CarrierAdditionalServicePostNord, e *Country) {
				n.Edges.CountriesConsignee = append(n.Edges.CountriesConsignee, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := caspnq.withCountriesConsignor; query != nil {
		if err := caspnq.loadCountriesConsignor(ctx, query, nodes,
			func(n *CarrierAdditionalServicePostNord) { n.Edges.CountriesConsignor = []*Country{} },
			func(n *CarrierAdditionalServicePostNord, e *Country) {
				n.Edges.CountriesConsignor = append(n.Edges.CountriesConsignor, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range caspnq.withNamedDeliveryOptionPostNord {
		if err := caspnq.loadDeliveryOptionPostNord(ctx, query, nodes,
			func(n *CarrierAdditionalServicePostNord) { n.appendNamedDeliveryOptionPostNord(name) },
			func(n *CarrierAdditionalServicePostNord, e *DeliveryOptionPostNord) {
				n.appendNamedDeliveryOptionPostNord(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range caspnq.withNamedCountriesConsignee {
		if err := caspnq.loadCountriesConsignee(ctx, query, nodes,
			func(n *CarrierAdditionalServicePostNord) { n.appendNamedCountriesConsignee(name) },
			func(n *CarrierAdditionalServicePostNord, e *Country) { n.appendNamedCountriesConsignee(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range caspnq.withNamedCountriesConsignor {
		if err := caspnq.loadCountriesConsignor(ctx, query, nodes,
			func(n *CarrierAdditionalServicePostNord) { n.appendNamedCountriesConsignor(name) },
			func(n *CarrierAdditionalServicePostNord, e *Country) { n.appendNamedCountriesConsignor(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range caspnq.loadTotal {
		if err := caspnq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (caspnq *CarrierAdditionalServicePostNordQuery) loadCarrierServicePostNord(ctx context.Context, query *CarrierServicePostNordQuery, nodes []*CarrierAdditionalServicePostNord, init func(*CarrierAdditionalServicePostNord), assign func(*CarrierAdditionalServicePostNord, *CarrierServicePostNord)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierAdditionalServicePostNord)
	for i := range nodes {
		if nodes[i].carrier_service_post_nord_carrier_add_serv_post_nord == nil {
			continue
		}
		fk := *nodes[i].carrier_service_post_nord_carrier_add_serv_post_nord
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservicepostnord.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_post_nord_carrier_add_serv_post_nord" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (caspnq *CarrierAdditionalServicePostNordQuery) loadDeliveryOptionPostNord(ctx context.Context, query *DeliveryOptionPostNordQuery, nodes []*CarrierAdditionalServicePostNord, init func(*CarrierAdditionalServicePostNord), assign func(*CarrierAdditionalServicePostNord, *DeliveryOptionPostNord)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServicePostNord)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServicePostNord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicepostnord.DeliveryOptionPostNordTable)
		s.Join(joinT).On(s.C(deliveryoptionpostnord.FieldID), joinT.C(carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServicePostNord]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOptionPostNord](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_post_nord" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (caspnq *CarrierAdditionalServicePostNordQuery) loadCountriesConsignee(ctx context.Context, query *CountryQuery, nodes []*CarrierAdditionalServicePostNord, init func(*CarrierAdditionalServicePostNord), assign func(*CarrierAdditionalServicePostNord, *Country)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServicePostNord)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServicePostNord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicepostnord.CountriesConsigneeTable)
		s.Join(joinT).On(s.C(country.FieldID), joinT.C(carrieradditionalservicepostnord.CountriesConsigneePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicepostnord.CountriesConsigneePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicepostnord.CountriesConsigneePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServicePostNord]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Country](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "countries_consignee" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (caspnq *CarrierAdditionalServicePostNordQuery) loadCountriesConsignor(ctx context.Context, query *CountryQuery, nodes []*CarrierAdditionalServicePostNord, init func(*CarrierAdditionalServicePostNord), assign func(*CarrierAdditionalServicePostNord, *Country)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServicePostNord)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServicePostNord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicepostnord.CountriesConsignorTable)
		s.Join(joinT).On(s.C(country.FieldID), joinT.C(carrieradditionalservicepostnord.CountriesConsignorPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicepostnord.CountriesConsignorPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicepostnord.CountriesConsignorPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServicePostNord]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Country](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "countries_consignor" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (caspnq *CarrierAdditionalServicePostNordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := caspnq.querySpec()
	if len(caspnq.modifiers) > 0 {
		_spec.Modifiers = caspnq.modifiers
	}
	_spec.Node.Columns = caspnq.ctx.Fields
	if len(caspnq.ctx.Fields) > 0 {
		_spec.Unique = caspnq.ctx.Unique != nil && *caspnq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, caspnq.driver, _spec)
}

func (caspnq *CarrierAdditionalServicePostNordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicepostnord.FieldID, field.TypeString))
	_spec.From = caspnq.sql
	if unique := caspnq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if caspnq.path != nil {
		_spec.Unique = true
	}
	if fields := caspnq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicepostnord.FieldID)
		for i := range fields {
			if fields[i] != carrieradditionalservicepostnord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := caspnq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := caspnq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := caspnq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := caspnq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (caspnq *CarrierAdditionalServicePostNordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(caspnq.driver.Dialect())
	t1 := builder.Table(carrieradditionalservicepostnord.Table)
	columns := caspnq.ctx.Fields
	if len(columns) == 0 {
		columns = carrieradditionalservicepostnord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if caspnq.sql != nil {
		selector = caspnq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if caspnq.ctx.Unique != nil && *caspnq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range caspnq.predicates {
		p(selector)
	}
	for _, p := range caspnq.order {
		p(selector)
	}
	if offset := caspnq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := caspnq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryOptionPostNord tells the query-builder to eager-load the nodes that are connected to the "delivery_option_post_nord"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithNamedDeliveryOptionPostNord(name string, opts ...func(*DeliveryOptionPostNordQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&DeliveryOptionPostNordClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if caspnq.withNamedDeliveryOptionPostNord == nil {
		caspnq.withNamedDeliveryOptionPostNord = make(map[string]*DeliveryOptionPostNordQuery)
	}
	caspnq.withNamedDeliveryOptionPostNord[name] = query
	return caspnq
}

// WithNamedCountriesConsignee tells the query-builder to eager-load the nodes that are connected to the "countries_consignee"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithNamedCountriesConsignee(name string, opts ...func(*CountryQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&CountryClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if caspnq.withNamedCountriesConsignee == nil {
		caspnq.withNamedCountriesConsignee = make(map[string]*CountryQuery)
	}
	caspnq.withNamedCountriesConsignee[name] = query
	return caspnq
}

// WithNamedCountriesConsignor tells the query-builder to eager-load the nodes that are connected to the "countries_consignor"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (caspnq *CarrierAdditionalServicePostNordQuery) WithNamedCountriesConsignor(name string, opts ...func(*CountryQuery)) *CarrierAdditionalServicePostNordQuery {
	query := (&CountryClient{config: caspnq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if caspnq.withNamedCountriesConsignor == nil {
		caspnq.withNamedCountriesConsignor = make(map[string]*CountryQuery)
	}
	caspnq.withNamedCountriesConsignor[name] = query
	return caspnq
}

// CarrierAdditionalServicePostNordGroupBy is the group-by builder for CarrierAdditionalServicePostNord entities.
type CarrierAdditionalServicePostNordGroupBy struct {
	selector
	build *CarrierAdditionalServicePostNordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (caspngb *CarrierAdditionalServicePostNordGroupBy) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServicePostNordGroupBy {
	caspngb.fns = append(caspngb.fns, fns...)
	return caspngb
}

// Scan applies the selector query and scans the result into the given value.
func (caspngb *CarrierAdditionalServicePostNordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, caspngb.build.ctx, ent.OpQueryGroupBy)
	if err := caspngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServicePostNordQuery, *CarrierAdditionalServicePostNordGroupBy](ctx, caspngb.build, caspngb, caspngb.build.inters, v)
}

func (caspngb *CarrierAdditionalServicePostNordGroupBy) sqlScan(ctx context.Context, root *CarrierAdditionalServicePostNordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(caspngb.fns))
	for _, fn := range caspngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*caspngb.flds)+len(caspngb.fns))
		for _, f := range *caspngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*caspngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := caspngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierAdditionalServicePostNordSelect is the builder for selecting fields of CarrierAdditionalServicePostNord entities.
type CarrierAdditionalServicePostNordSelect struct {
	*CarrierAdditionalServicePostNordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (caspns *CarrierAdditionalServicePostNordSelect) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServicePostNordSelect {
	caspns.fns = append(caspns.fns, fns...)
	return caspns
}

// Scan applies the selector query and scans the result into the given value.
func (caspns *CarrierAdditionalServicePostNordSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, caspns.ctx, ent.OpQuerySelect)
	if err := caspns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServicePostNordQuery, *CarrierAdditionalServicePostNordSelect](ctx, caspns.CarrierAdditionalServicePostNordQuery, caspns, caspns.inters, v)
}

func (caspns *CarrierAdditionalServicePostNordSelect) sqlScan(ctx context.Context, root *CarrierAdditionalServicePostNordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(caspns.fns))
	for _, fn := range caspns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*caspns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := caspns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
