// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/locationtag"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LocationTag is the model entity for the LocationTag schema.
type LocationTag struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID string `json:"internal_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LocationTagQuery when eager-loading is set.
	Edges        LocationTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LocationTagEdges holds the relations/edges for other nodes in the graph.
type LocationTagEdges struct {
	// Location holds the value of the location edge.
	Location []*Location `json:"location,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedLocation map[string][]*Location
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading.
func (e LocationTagEdges) LocationOrErr() ([]*Location, error) {
	if e.loadedTypes[0] {
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LocationTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case locationtag.FieldID:
			values[i] = new(pulid.ID)
		case locationtag.FieldLabel, locationtag.FieldInternalID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LocationTag fields.
func (lt *LocationTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case locationtag.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				lt.ID = *value
			}
		case locationtag.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				lt.Label = value.String
			}
		case locationtag.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				lt.InternalID = value.String
			}
		default:
			lt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LocationTag.
// This includes values selected through modifiers, order, etc.
func (lt *LocationTag) Value(name string) (ent.Value, error) {
	return lt.selectValues.Get(name)
}

// QueryLocation queries the "location" edge of the LocationTag entity.
func (lt *LocationTag) QueryLocation() *LocationQuery {
	return NewLocationTagClient(lt.config).QueryLocation(lt)
}

// Update returns a builder for updating this LocationTag.
// Note that you need to call LocationTag.Unwrap() before calling this method if this LocationTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (lt *LocationTag) Update() *LocationTagUpdateOne {
	return NewLocationTagClient(lt.config).UpdateOne(lt)
}

// Unwrap unwraps the LocationTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lt *LocationTag) Unwrap() *LocationTag {
	_tx, ok := lt.config.driver.(*txDriver)
	if !ok {
		panic("ent: LocationTag is not a transactional entity")
	}
	lt.config.driver = _tx.drv
	return lt
}

// String implements the fmt.Stringer.
func (lt *LocationTag) String() string {
	var builder strings.Builder
	builder.WriteString("LocationTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lt.ID))
	builder.WriteString("label=")
	builder.WriteString(lt.Label)
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(lt.InternalID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedLocation returns the Location named value or an error if the edge was not
// loaded in eager-loading with this name.
func (lt *LocationTag) NamedLocation(name string) ([]*Location, error) {
	if lt.Edges.namedLocation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := lt.Edges.namedLocation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (lt *LocationTag) appendNamedLocation(name string, edges ...*Location) {
	if lt.Edges.namedLocation == nil {
		lt.Edges.namedLocation = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		lt.Edges.namedLocation[name] = []*Location{}
	} else {
		lt.Edges.namedLocation[name] = append(lt.Edges.namedLocation[name], edges...)
	}
}

// LocationTags is a parsable slice of LocationTag.
type LocationTags []*LocationTag
