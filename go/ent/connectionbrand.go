// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConnectionBrand is the model entity for the ConnectionBrand schema.
type ConnectionBrand struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID connectionbrand.InternalID `json:"internal_id,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionBrandQuery when eager-loading is set.
	Edges        ConnectionBrandEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ConnectionBrandEdges holds the relations/edges for other nodes in the graph.
type ConnectionBrandEdges struct {
	// Connection holds the value of the connection edge.
	Connection []*Connection `json:"connection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedConnection map[string][]*Connection
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading.
func (e ConnectionBrandEdges) ConnectionOrErr() ([]*Connection, error) {
	if e.loadedTypes[0] {
		return e.Connection, nil
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConnectionBrand) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connectionbrand.FieldID:
			values[i] = new(pulid.ID)
		case connectionbrand.FieldLabel, connectionbrand.FieldInternalID, connectionbrand.FieldLogoURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConnectionBrand fields.
func (cb *ConnectionBrand) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connectionbrand.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cb.ID = *value
			}
		case connectionbrand.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				cb.Label = value.String
			}
		case connectionbrand.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				cb.InternalID = connectionbrand.InternalID(value.String)
			}
		case connectionbrand.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				cb.LogoURL = value.String
			}
		default:
			cb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConnectionBrand.
// This includes values selected through modifiers, order, etc.
func (cb *ConnectionBrand) Value(name string) (ent.Value, error) {
	return cb.selectValues.Get(name)
}

// QueryConnection queries the "connection" edge of the ConnectionBrand entity.
func (cb *ConnectionBrand) QueryConnection() *ConnectionQuery {
	return NewConnectionBrandClient(cb.config).QueryConnection(cb)
}

// Update returns a builder for updating this ConnectionBrand.
// Note that you need to call ConnectionBrand.Unwrap() before calling this method if this ConnectionBrand
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *ConnectionBrand) Update() *ConnectionBrandUpdateOne {
	return NewConnectionBrandClient(cb.config).UpdateOne(cb)
}

// Unwrap unwraps the ConnectionBrand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *ConnectionBrand) Unwrap() *ConnectionBrand {
	_tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConnectionBrand is not a transactional entity")
	}
	cb.config.driver = _tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *ConnectionBrand) String() string {
	var builder strings.Builder
	builder.WriteString("ConnectionBrand(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cb.ID))
	builder.WriteString("label=")
	builder.WriteString(cb.Label)
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(fmt.Sprintf("%v", cb.InternalID))
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(cb.LogoURL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedConnection returns the Connection named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cb *ConnectionBrand) NamedConnection(name string) ([]*Connection, error) {
	if cb.Edges.namedConnection == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cb.Edges.namedConnection[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cb *ConnectionBrand) appendNamedConnection(name string, edges ...*Connection) {
	if cb.Edges.namedConnection == nil {
		cb.Edges.namedConnection = make(map[string][]*Connection)
	}
	if len(edges) == 0 {
		cb.Edges.namedConnection[name] = []*Connection{}
	} else {
		cb.Edges.namedConnection[name] = append(cb.Edges.namedConnection[name], edges...)
	}
}

// ConnectionBrands is a parsable slice of ConnectionBrand.
type ConnectionBrands []*ConnectionBrand
