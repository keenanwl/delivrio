// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *ProductUpdate) SetTenantID(value pulid.ID) *ProductUpdate {
	pu.mutation.SetTenantID(value)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTenantID(value *pulid.ID) *ProductUpdate {
	if value != nil {
		pu.SetTenantID(*value)
	}
	return pu
}

// SetExternalID sets the "external_id" field.
func (pu *ProductUpdate) SetExternalID(s string) *ProductUpdate {
	pu.mutation.SetExternalID(s)
	return pu
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableExternalID(s *string) *ProductUpdate {
	if s != nil {
		pu.SetExternalID(*s)
	}
	return pu
}

// ClearExternalID clears the value of the "external_id" field.
func (pu *ProductUpdate) ClearExternalID() *ProductUpdate {
	pu.mutation.ClearExternalID()
	return pu
}

// SetTitle sets the "title" field.
func (pu *ProductUpdate) SetTitle(s string) *ProductUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTitle(s *string) *ProductUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetBodyHTML sets the "body_html" field.
func (pu *ProductUpdate) SetBodyHTML(s string) *ProductUpdate {
	pu.mutation.SetBodyHTML(s)
	return pu
}

// SetNillableBodyHTML sets the "body_html" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBodyHTML(s *string) *ProductUpdate {
	if s != nil {
		pu.SetBodyHTML(*s)
	}
	return pu
}

// ClearBodyHTML clears the value of the "body_html" field.
func (pu *ProductUpdate) ClearBodyHTML() *ProductUpdate {
	pu.mutation.ClearBodyHTML()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProductUpdate) SetStatus(pr product.Status) *ProductUpdate {
	pu.mutation.SetStatus(pr)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableStatus(pr *product.Status) *ProductUpdate {
	if pr != nil {
		pu.SetStatus(*pr)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pu *ProductUpdate) SetTenant(t *Tenant) *ProductUpdate {
	return pu.SetTenantID(t.ID)
}

// AddProductTagIDs adds the "product_tags" edge to the ProductTag entity by IDs.
func (pu *ProductUpdate) AddProductTagIDs(ids ...pulid.ID) *ProductUpdate {
	pu.mutation.AddProductTagIDs(ids...)
	return pu
}

// AddProductTags adds the "product_tags" edges to the ProductTag entity.
func (pu *ProductUpdate) AddProductTags(p ...*ProductTag) *ProductUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductTagIDs(ids...)
}

// AddProductVariantIDs adds the "product_variant" edge to the ProductVariant entity by IDs.
func (pu *ProductUpdate) AddProductVariantIDs(ids ...pulid.ID) *ProductUpdate {
	pu.mutation.AddProductVariantIDs(ids...)
	return pu
}

// AddProductVariant adds the "product_variant" edges to the ProductVariant entity.
func (pu *ProductUpdate) AddProductVariant(p ...*ProductVariant) *ProductUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductVariantIDs(ids...)
}

// AddProductImageIDs adds the "product_image" edge to the ProductImage entity by IDs.
func (pu *ProductUpdate) AddProductImageIDs(ids ...pulid.ID) *ProductUpdate {
	pu.mutation.AddProductImageIDs(ids...)
	return pu
}

// AddProductImage adds the "product_image" edges to the ProductImage entity.
func (pu *ProductUpdate) AddProductImage(p ...*ProductImage) *ProductUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductImageIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pu *ProductUpdate) ClearTenant() *ProductUpdate {
	pu.mutation.ClearTenant()
	return pu
}

// ClearProductTags clears all "product_tags" edges to the ProductTag entity.
func (pu *ProductUpdate) ClearProductTags() *ProductUpdate {
	pu.mutation.ClearProductTags()
	return pu
}

// RemoveProductTagIDs removes the "product_tags" edge to ProductTag entities by IDs.
func (pu *ProductUpdate) RemoveProductTagIDs(ids ...pulid.ID) *ProductUpdate {
	pu.mutation.RemoveProductTagIDs(ids...)
	return pu
}

// RemoveProductTags removes "product_tags" edges to ProductTag entities.
func (pu *ProductUpdate) RemoveProductTags(p ...*ProductTag) *ProductUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductTagIDs(ids...)
}

// ClearProductVariant clears all "product_variant" edges to the ProductVariant entity.
func (pu *ProductUpdate) ClearProductVariant() *ProductUpdate {
	pu.mutation.ClearProductVariant()
	return pu
}

// RemoveProductVariantIDs removes the "product_variant" edge to ProductVariant entities by IDs.
func (pu *ProductUpdate) RemoveProductVariantIDs(ids ...pulid.ID) *ProductUpdate {
	pu.mutation.RemoveProductVariantIDs(ids...)
	return pu
}

// RemoveProductVariant removes "product_variant" edges to ProductVariant entities.
func (pu *ProductUpdate) RemoveProductVariant(p ...*ProductVariant) *ProductUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductVariantIDs(ids...)
}

// ClearProductImage clears all "product_image" edges to the ProductImage entity.
func (pu *ProductUpdate) ClearProductImage() *ProductUpdate {
	pu.mutation.ClearProductImage()
	return pu
}

// RemoveProductImageIDs removes the "product_image" edge to ProductImage entities by IDs.
func (pu *ProductUpdate) RemoveProductImageIDs(ids ...pulid.ID) *ProductUpdate {
	pu.mutation.RemoveProductImageIDs(ids...)
	return pu
}

// RemoveProductImage removes "product_image" edges to ProductImage entities.
func (pu *ProductUpdate) RemoveProductImage(p ...*ProductImage) *ProductUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductImageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if product.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized product.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Status(); ok {
		if err := product.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Product.status": %w`, err)}
		}
	}
	if pu.mutation.TenantCleared() && len(pu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Product.tenant"`)
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ExternalID(); ok {
		_spec.SetField(product.FieldExternalID, field.TypeString, value)
	}
	if pu.mutation.ExternalIDCleared() {
		_spec.ClearField(product.FieldExternalID, field.TypeString)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.BodyHTML(); ok {
		_spec.SetField(product.FieldBodyHTML, field.TypeString, value)
	}
	if pu.mutation.BodyHTMLCleared() {
		_spec.ClearField(product.FieldBodyHTML, field.TypeString)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeEnum, value)
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(product.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductTagsIDs(); len(nodes) > 0 && !pu.mutation.ProductTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductVariantIDs(); len(nodes) > 0 && !pu.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductImageIDs(); len(nodes) > 0 && !pu.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetTenantID sets the "tenant_id" field.
func (puo *ProductUpdateOne) SetTenantID(pu pulid.ID) *ProductUpdateOne {
	puo.mutation.SetTenantID(pu)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTenantID(pu *pulid.ID) *ProductUpdateOne {
	if pu != nil {
		puo.SetTenantID(*pu)
	}
	return puo
}

// SetExternalID sets the "external_id" field.
func (puo *ProductUpdateOne) SetExternalID(s string) *ProductUpdateOne {
	puo.mutation.SetExternalID(s)
	return puo
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableExternalID(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetExternalID(*s)
	}
	return puo
}

// ClearExternalID clears the value of the "external_id" field.
func (puo *ProductUpdateOne) ClearExternalID() *ProductUpdateOne {
	puo.mutation.ClearExternalID()
	return puo
}

// SetTitle sets the "title" field.
func (puo *ProductUpdateOne) SetTitle(s string) *ProductUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTitle(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetBodyHTML sets the "body_html" field.
func (puo *ProductUpdateOne) SetBodyHTML(s string) *ProductUpdateOne {
	puo.mutation.SetBodyHTML(s)
	return puo
}

// SetNillableBodyHTML sets the "body_html" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBodyHTML(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetBodyHTML(*s)
	}
	return puo
}

// ClearBodyHTML clears the value of the "body_html" field.
func (puo *ProductUpdateOne) ClearBodyHTML() *ProductUpdateOne {
	puo.mutation.ClearBodyHTML()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProductUpdateOne) SetStatus(pr product.Status) *ProductUpdateOne {
	puo.mutation.SetStatus(pr)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableStatus(pr *product.Status) *ProductUpdateOne {
	if pr != nil {
		puo.SetStatus(*pr)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puo *ProductUpdateOne) SetTenant(t *Tenant) *ProductUpdateOne {
	return puo.SetTenantID(t.ID)
}

// AddProductTagIDs adds the "product_tags" edge to the ProductTag entity by IDs.
func (puo *ProductUpdateOne) AddProductTagIDs(ids ...pulid.ID) *ProductUpdateOne {
	puo.mutation.AddProductTagIDs(ids...)
	return puo
}

// AddProductTags adds the "product_tags" edges to the ProductTag entity.
func (puo *ProductUpdateOne) AddProductTags(p ...*ProductTag) *ProductUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductTagIDs(ids...)
}

// AddProductVariantIDs adds the "product_variant" edge to the ProductVariant entity by IDs.
func (puo *ProductUpdateOne) AddProductVariantIDs(ids ...pulid.ID) *ProductUpdateOne {
	puo.mutation.AddProductVariantIDs(ids...)
	return puo
}

// AddProductVariant adds the "product_variant" edges to the ProductVariant entity.
func (puo *ProductUpdateOne) AddProductVariant(p ...*ProductVariant) *ProductUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductVariantIDs(ids...)
}

// AddProductImageIDs adds the "product_image" edge to the ProductImage entity by IDs.
func (puo *ProductUpdateOne) AddProductImageIDs(ids ...pulid.ID) *ProductUpdateOne {
	puo.mutation.AddProductImageIDs(ids...)
	return puo
}

// AddProductImage adds the "product_image" edges to the ProductImage entity.
func (puo *ProductUpdateOne) AddProductImage(p ...*ProductImage) *ProductUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductImageIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puo *ProductUpdateOne) ClearTenant() *ProductUpdateOne {
	puo.mutation.ClearTenant()
	return puo
}

// ClearProductTags clears all "product_tags" edges to the ProductTag entity.
func (puo *ProductUpdateOne) ClearProductTags() *ProductUpdateOne {
	puo.mutation.ClearProductTags()
	return puo
}

// RemoveProductTagIDs removes the "product_tags" edge to ProductTag entities by IDs.
func (puo *ProductUpdateOne) RemoveProductTagIDs(ids ...pulid.ID) *ProductUpdateOne {
	puo.mutation.RemoveProductTagIDs(ids...)
	return puo
}

// RemoveProductTags removes "product_tags" edges to ProductTag entities.
func (puo *ProductUpdateOne) RemoveProductTags(p ...*ProductTag) *ProductUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductTagIDs(ids...)
}

// ClearProductVariant clears all "product_variant" edges to the ProductVariant entity.
func (puo *ProductUpdateOne) ClearProductVariant() *ProductUpdateOne {
	puo.mutation.ClearProductVariant()
	return puo
}

// RemoveProductVariantIDs removes the "product_variant" edge to ProductVariant entities by IDs.
func (puo *ProductUpdateOne) RemoveProductVariantIDs(ids ...pulid.ID) *ProductUpdateOne {
	puo.mutation.RemoveProductVariantIDs(ids...)
	return puo
}

// RemoveProductVariant removes "product_variant" edges to ProductVariant entities.
func (puo *ProductUpdateOne) RemoveProductVariant(p ...*ProductVariant) *ProductUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductVariantIDs(ids...)
}

// ClearProductImage clears all "product_image" edges to the ProductImage entity.
func (puo *ProductUpdateOne) ClearProductImage() *ProductUpdateOne {
	puo.mutation.ClearProductImage()
	return puo
}

// RemoveProductImageIDs removes the "product_image" edge to ProductImage entities by IDs.
func (puo *ProductUpdateOne) RemoveProductImageIDs(ids ...pulid.ID) *ProductUpdateOne {
	puo.mutation.RemoveProductImageIDs(ids...)
	return puo
}

// RemoveProductImage removes "product_image" edges to ProductImage entities.
func (puo *ProductUpdateOne) RemoveProductImage(p ...*ProductImage) *ProductUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductImageIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if product.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized product.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Status(); ok {
		if err := product.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Product.status": %w`, err)}
		}
	}
	if puo.mutation.TenantCleared() && len(puo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Product.tenant"`)
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ExternalID(); ok {
		_spec.SetField(product.FieldExternalID, field.TypeString, value)
	}
	if puo.mutation.ExternalIDCleared() {
		_spec.ClearField(product.FieldExternalID, field.TypeString)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(product.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.BodyHTML(); ok {
		_spec.SetField(product.FieldBodyHTML, field.TypeString, value)
	}
	if puo.mutation.BodyHTMLCleared() {
		_spec.ClearField(product.FieldBodyHTML, field.TypeString)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(product.FieldStatus, field.TypeEnum, value)
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(product.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductTagsIDs(); len(nodes) > 0 && !puo.mutation.ProductTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(producttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductVariantIDs(); len(nodes) > 0 && !puo.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductImageIDs(); len(nodes) > 0 && !puo.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
