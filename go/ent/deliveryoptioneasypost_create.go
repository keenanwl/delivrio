// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionEasyPostCreate is the builder for creating a DeliveryOptionEasyPost entity.
type DeliveryOptionEasyPostCreate struct {
	config
	mutation *DeliveryOptionEasyPostMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (doepc *DeliveryOptionEasyPostCreate) SetTenantID(pu pulid.ID) *DeliveryOptionEasyPostCreate {
	doepc.mutation.SetTenantID(pu)
	return doepc
}

// SetID sets the "id" field.
func (doepc *DeliveryOptionEasyPostCreate) SetID(pu pulid.ID) *DeliveryOptionEasyPostCreate {
	doepc.mutation.SetID(pu)
	return doepc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (doepc *DeliveryOptionEasyPostCreate) SetNillableID(pu *pulid.ID) *DeliveryOptionEasyPostCreate {
	if pu != nil {
		doepc.SetID(*pu)
	}
	return doepc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (doepc *DeliveryOptionEasyPostCreate) SetTenant(t *Tenant) *DeliveryOptionEasyPostCreate {
	return doepc.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (doepc *DeliveryOptionEasyPostCreate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionEasyPostCreate {
	doepc.mutation.SetDeliveryOptionID(id)
	return doepc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (doepc *DeliveryOptionEasyPostCreate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionEasyPostCreate {
	return doepc.SetDeliveryOptionID(d.ID)
}

// AddCarrierAddServEasyPostIDs adds the "carrier_add_serv_easy_post" edge to the CarrierAdditionalServiceEasyPost entity by IDs.
func (doepc *DeliveryOptionEasyPostCreate) AddCarrierAddServEasyPostIDs(ids ...pulid.ID) *DeliveryOptionEasyPostCreate {
	doepc.mutation.AddCarrierAddServEasyPostIDs(ids...)
	return doepc
}

// AddCarrierAddServEasyPost adds the "carrier_add_serv_easy_post" edges to the CarrierAdditionalServiceEasyPost entity.
func (doepc *DeliveryOptionEasyPostCreate) AddCarrierAddServEasyPost(c ...*CarrierAdditionalServiceEasyPost) *DeliveryOptionEasyPostCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doepc.AddCarrierAddServEasyPostIDs(ids...)
}

// Mutation returns the DeliveryOptionEasyPostMutation object of the builder.
func (doepc *DeliveryOptionEasyPostCreate) Mutation() *DeliveryOptionEasyPostMutation {
	return doepc.mutation
}

// Save creates the DeliveryOptionEasyPost in the database.
func (doepc *DeliveryOptionEasyPostCreate) Save(ctx context.Context) (*DeliveryOptionEasyPost, error) {
	if err := doepc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, doepc.sqlSave, doepc.mutation, doepc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (doepc *DeliveryOptionEasyPostCreate) SaveX(ctx context.Context) *DeliveryOptionEasyPost {
	v, err := doepc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (doepc *DeliveryOptionEasyPostCreate) Exec(ctx context.Context) error {
	_, err := doepc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doepc *DeliveryOptionEasyPostCreate) ExecX(ctx context.Context) {
	if err := doepc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (doepc *DeliveryOptionEasyPostCreate) defaults() error {
	if _, ok := doepc.mutation.ID(); !ok {
		if deliveryoptioneasypost.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryoptioneasypost.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryoptioneasypost.DefaultID()
		doepc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (doepc *DeliveryOptionEasyPostCreate) check() error {
	if _, ok := doepc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryOptionEasyPost.tenant_id"`)}
	}
	if len(doepc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryOptionEasyPost.tenant"`)}
	}
	if len(doepc.mutation.DeliveryOptionIDs()) == 0 {
		return &ValidationError{Name: "delivery_option", err: errors.New(`ent: missing required edge "DeliveryOptionEasyPost.delivery_option"`)}
	}
	return nil
}

func (doepc *DeliveryOptionEasyPostCreate) sqlSave(ctx context.Context) (*DeliveryOptionEasyPost, error) {
	if err := doepc.check(); err != nil {
		return nil, err
	}
	_node, _spec := doepc.createSpec()
	if err := sqlgraph.CreateNode(ctx, doepc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	doepc.mutation.id = &_node.ID
	doepc.mutation.done = true
	return _node, nil
}

func (doepc *DeliveryOptionEasyPostCreate) createSpec() (*DeliveryOptionEasyPost, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryOptionEasyPost{config: doepc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryoptioneasypost.Table, sqlgraph.NewFieldSpec(deliveryoptioneasypost.FieldID, field.TypeString))
	)
	_spec.OnConflict = doepc.conflict
	if id, ok := doepc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := doepc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptioneasypost.TenantTable,
			Columns: []string{deliveryoptioneasypost.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doepc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptioneasypost.DeliveryOptionTable,
			Columns: []string{deliveryoptioneasypost.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_delivery_option_easy_post = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := doepc.mutation.CarrierAddServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionEasyPost.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionEasyPostUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (doepc *DeliveryOptionEasyPostCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionEasyPostUpsertOne {
	doepc.conflict = opts
	return &DeliveryOptionEasyPostUpsertOne{
		create: doepc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (doepc *DeliveryOptionEasyPostCreate) OnConflictColumns(columns ...string) *DeliveryOptionEasyPostUpsertOne {
	doepc.conflict = append(doepc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionEasyPostUpsertOne{
		create: doepc,
	}
}

type (
	// DeliveryOptionEasyPostUpsertOne is the builder for "upsert"-ing
	//  one DeliveryOptionEasyPost node.
	DeliveryOptionEasyPostUpsertOne struct {
		create *DeliveryOptionEasyPostCreate
	}

	// DeliveryOptionEasyPostUpsert is the "OnConflict" setter.
	DeliveryOptionEasyPostUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionEasyPostUpsert) SetTenantID(v pulid.ID) *DeliveryOptionEasyPostUpsert {
	u.Set(deliveryoptioneasypost.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionEasyPostUpsert) UpdateTenantID() *DeliveryOptionEasyPostUpsert {
	u.SetExcluded(deliveryoptioneasypost.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptioneasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionEasyPostUpsertOne) UpdateNewValues() *DeliveryOptionEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryoptioneasypost.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionEasyPost.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryOptionEasyPostUpsertOne) Ignore() *DeliveryOptionEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionEasyPostUpsertOne) DoNothing() *DeliveryOptionEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionEasyPostCreate.OnConflict
// documentation for more info.
func (u *DeliveryOptionEasyPostUpsertOne) Update(set func(*DeliveryOptionEasyPostUpsert)) *DeliveryOptionEasyPostUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionEasyPostUpsertOne) SetTenantID(v pulid.ID) *DeliveryOptionEasyPostUpsertOne {
	return u.Update(func(s *DeliveryOptionEasyPostUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionEasyPostUpsertOne) UpdateTenantID() *DeliveryOptionEasyPostUpsertOne {
	return u.Update(func(s *DeliveryOptionEasyPostUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *DeliveryOptionEasyPostUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionEasyPostCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionEasyPostUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryOptionEasyPostUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryOptionEasyPostUpsertOne.ID is not supported by MySQL driver. Use DeliveryOptionEasyPostUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryOptionEasyPostUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryOptionEasyPostCreateBulk is the builder for creating many DeliveryOptionEasyPost entities in bulk.
type DeliveryOptionEasyPostCreateBulk struct {
	config
	err      error
	builders []*DeliveryOptionEasyPostCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryOptionEasyPost entities in the database.
func (doepcb *DeliveryOptionEasyPostCreateBulk) Save(ctx context.Context) ([]*DeliveryOptionEasyPost, error) {
	if doepcb.err != nil {
		return nil, doepcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(doepcb.builders))
	nodes := make([]*DeliveryOptionEasyPost, len(doepcb.builders))
	mutators := make([]Mutator, len(doepcb.builders))
	for i := range doepcb.builders {
		func(i int, root context.Context) {
			builder := doepcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryOptionEasyPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, doepcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = doepcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, doepcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, doepcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (doepcb *DeliveryOptionEasyPostCreateBulk) SaveX(ctx context.Context) []*DeliveryOptionEasyPost {
	v, err := doepcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (doepcb *DeliveryOptionEasyPostCreateBulk) Exec(ctx context.Context) error {
	_, err := doepcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doepcb *DeliveryOptionEasyPostCreateBulk) ExecX(ctx context.Context) {
	if err := doepcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionEasyPost.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionEasyPostUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (doepcb *DeliveryOptionEasyPostCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionEasyPostUpsertBulk {
	doepcb.conflict = opts
	return &DeliveryOptionEasyPostUpsertBulk{
		create: doepcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionEasyPost.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (doepcb *DeliveryOptionEasyPostCreateBulk) OnConflictColumns(columns ...string) *DeliveryOptionEasyPostUpsertBulk {
	doepcb.conflict = append(doepcb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionEasyPostUpsertBulk{
		create: doepcb,
	}
}

// DeliveryOptionEasyPostUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryOptionEasyPost nodes.
type DeliveryOptionEasyPostUpsertBulk struct {
	create *DeliveryOptionEasyPostCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryOptionEasyPost.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptioneasypost.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionEasyPostUpsertBulk) UpdateNewValues() *DeliveryOptionEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryoptioneasypost.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionEasyPost.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryOptionEasyPostUpsertBulk) Ignore() *DeliveryOptionEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionEasyPostUpsertBulk) DoNothing() *DeliveryOptionEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionEasyPostCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryOptionEasyPostUpsertBulk) Update(set func(*DeliveryOptionEasyPostUpsert)) *DeliveryOptionEasyPostUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionEasyPostUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionEasyPostUpsertBulk) SetTenantID(v pulid.ID) *DeliveryOptionEasyPostUpsertBulk {
	return u.Update(func(s *DeliveryOptionEasyPostUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionEasyPostUpsertBulk) UpdateTenantID() *DeliveryOptionEasyPostUpsertBulk {
	return u.Update(func(s *DeliveryOptionEasyPostUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *DeliveryOptionEasyPostUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryOptionEasyPostCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionEasyPostCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionEasyPostUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
