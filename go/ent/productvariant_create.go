// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductVariantCreate is the builder for creating a ProductVariant entity.
type ProductVariantCreate struct {
	config
	mutation *ProductVariantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pvc *ProductVariantCreate) SetTenantID(pu pulid.ID) *ProductVariantCreate {
	pvc.mutation.SetTenantID(pu)
	return pvc
}

// SetArchived sets the "archived" field.
func (pvc *ProductVariantCreate) SetArchived(b bool) *ProductVariantCreate {
	pvc.mutation.SetArchived(b)
	return pvc
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableArchived(b *bool) *ProductVariantCreate {
	if b != nil {
		pvc.SetArchived(*b)
	}
	return pvc
}

// SetExternalID sets the "external_ID" field.
func (pvc *ProductVariantCreate) SetExternalID(s string) *ProductVariantCreate {
	pvc.mutation.SetExternalID(s)
	return pvc
}

// SetNillableExternalID sets the "external_ID" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableExternalID(s *string) *ProductVariantCreate {
	if s != nil {
		pvc.SetExternalID(*s)
	}
	return pvc
}

// SetDescription sets the "description" field.
func (pvc *ProductVariantCreate) SetDescription(s string) *ProductVariantCreate {
	pvc.mutation.SetDescription(s)
	return pvc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableDescription(s *string) *ProductVariantCreate {
	if s != nil {
		pvc.SetDescription(*s)
	}
	return pvc
}

// SetEanNumber sets the "ean_number" field.
func (pvc *ProductVariantCreate) SetEanNumber(s string) *ProductVariantCreate {
	pvc.mutation.SetEanNumber(s)
	return pvc
}

// SetNillableEanNumber sets the "ean_number" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableEanNumber(s *string) *ProductVariantCreate {
	if s != nil {
		pvc.SetEanNumber(*s)
	}
	return pvc
}

// SetWeightG sets the "weight_g" field.
func (pvc *ProductVariantCreate) SetWeightG(i int) *ProductVariantCreate {
	pvc.mutation.SetWeightG(i)
	return pvc
}

// SetNillableWeightG sets the "weight_g" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableWeightG(i *int) *ProductVariantCreate {
	if i != nil {
		pvc.SetWeightG(*i)
	}
	return pvc
}

// SetDimensionLength sets the "dimension_length" field.
func (pvc *ProductVariantCreate) SetDimensionLength(i int) *ProductVariantCreate {
	pvc.mutation.SetDimensionLength(i)
	return pvc
}

// SetNillableDimensionLength sets the "dimension_length" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableDimensionLength(i *int) *ProductVariantCreate {
	if i != nil {
		pvc.SetDimensionLength(*i)
	}
	return pvc
}

// SetDimensionWidth sets the "dimension_width" field.
func (pvc *ProductVariantCreate) SetDimensionWidth(i int) *ProductVariantCreate {
	pvc.mutation.SetDimensionWidth(i)
	return pvc
}

// SetNillableDimensionWidth sets the "dimension_width" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableDimensionWidth(i *int) *ProductVariantCreate {
	if i != nil {
		pvc.SetDimensionWidth(*i)
	}
	return pvc
}

// SetDimensionHeight sets the "dimension_height" field.
func (pvc *ProductVariantCreate) SetDimensionHeight(i int) *ProductVariantCreate {
	pvc.mutation.SetDimensionHeight(i)
	return pvc
}

// SetNillableDimensionHeight sets the "dimension_height" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableDimensionHeight(i *int) *ProductVariantCreate {
	if i != nil {
		pvc.SetDimensionHeight(*i)
	}
	return pvc
}

// SetCreatedAt sets the "created_at" field.
func (pvc *ProductVariantCreate) SetCreatedAt(t time.Time) *ProductVariantCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableCreatedAt(t *time.Time) *ProductVariantCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *ProductVariantCreate) SetUpdatedAt(t time.Time) *ProductVariantCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableUpdatedAt(t *time.Time) *ProductVariantCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// SetID sets the "id" field.
func (pvc *ProductVariantCreate) SetID(pu pulid.ID) *ProductVariantCreate {
	pvc.mutation.SetID(pu)
	return pvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableID(pu *pulid.ID) *ProductVariantCreate {
	if pu != nil {
		pvc.SetID(*pu)
	}
	return pvc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pvc *ProductVariantCreate) SetTenant(t *Tenant) *ProductVariantCreate {
	return pvc.SetTenantID(t.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pvc *ProductVariantCreate) SetProductID(id pulid.ID) *ProductVariantCreate {
	pvc.mutation.SetProductID(id)
	return pvc
}

// SetProduct sets the "product" edge to the Product entity.
func (pvc *ProductVariantCreate) SetProduct(p *Product) *ProductVariantCreate {
	return pvc.SetProductID(p.ID)
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (pvc *ProductVariantCreate) AddOrderLineIDs(ids ...pulid.ID) *ProductVariantCreate {
	pvc.mutation.AddOrderLineIDs(ids...)
	return pvc
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (pvc *ProductVariantCreate) AddOrderLines(o ...*OrderLine) *ProductVariantCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvc.AddOrderLineIDs(ids...)
}

// AddProductImageIDs adds the "product_image" edge to the ProductImage entity by IDs.
func (pvc *ProductVariantCreate) AddProductImageIDs(ids ...pulid.ID) *ProductVariantCreate {
	pvc.mutation.AddProductImageIDs(ids...)
	return pvc
}

// AddProductImage adds the "product_image" edges to the ProductImage entity.
func (pvc *ProductVariantCreate) AddProductImage(p ...*ProductImage) *ProductVariantCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvc.AddProductImageIDs(ids...)
}

// SetInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID.
func (pvc *ProductVariantCreate) SetInventoryItemID(id pulid.ID) *ProductVariantCreate {
	pvc.mutation.SetInventoryItemID(id)
	return pvc
}

// SetNillableInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID if the given value is not nil.
func (pvc *ProductVariantCreate) SetNillableInventoryItemID(id *pulid.ID) *ProductVariantCreate {
	if id != nil {
		pvc = pvc.SetInventoryItemID(*id)
	}
	return pvc
}

// SetInventoryItem sets the "inventory_item" edge to the InventoryItem entity.
func (pvc *ProductVariantCreate) SetInventoryItem(i *InventoryItem) *ProductVariantCreate {
	return pvc.SetInventoryItemID(i.ID)
}

// Mutation returns the ProductVariantMutation object of the builder.
func (pvc *ProductVariantCreate) Mutation() *ProductVariantMutation {
	return pvc.mutation
}

// Save creates the ProductVariant in the database.
func (pvc *ProductVariantCreate) Save(ctx context.Context) (*ProductVariant, error) {
	if err := pvc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *ProductVariantCreate) SaveX(ctx context.Context) *ProductVariant {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *ProductVariantCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *ProductVariantCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *ProductVariantCreate) defaults() error {
	if _, ok := pvc.mutation.Archived(); !ok {
		v := productvariant.DefaultArchived
		pvc.mutation.SetArchived(v)
	}
	if _, ok := pvc.mutation.WeightG(); !ok {
		v := productvariant.DefaultWeightG
		pvc.mutation.SetWeightG(v)
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		if productvariant.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized productvariant.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := productvariant.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		if productvariant.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productvariant.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productvariant.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pvc.mutation.ID(); !ok {
		if productvariant.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized productvariant.DefaultID (forgotten import ent/runtime?)")
		}
		v := productvariant.DefaultID()
		pvc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pvc *ProductVariantCreate) check() error {
	if _, ok := pvc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProductVariant.tenant_id"`)}
	}
	if _, ok := pvc.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`ent: missing required field "ProductVariant.archived"`)}
	}
	if v, ok := pvc.mutation.WeightG(); ok {
		if err := productvariant.WeightGValidator(v); err != nil {
			return &ValidationError{Name: "weight_g", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.weight_g": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.DimensionLength(); ok {
		if err := productvariant.DimensionLengthValidator(v); err != nil {
			return &ValidationError{Name: "dimension_length", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_length": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.DimensionWidth(); ok {
		if err := productvariant.DimensionWidthValidator(v); err != nil {
			return &ValidationError{Name: "dimension_width", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_width": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.DimensionHeight(); ok {
		if err := productvariant.DimensionHeightValidator(v); err != nil {
			return &ValidationError{Name: "dimension_height", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_height": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProductVariant.updated_at"`)}
	}
	if len(pvc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ProductVariant.tenant"`)}
	}
	if len(pvc.mutation.ProductIDs()) == 0 {
		return &ValidationError{Name: "product", err: errors.New(`ent: missing required edge "ProductVariant.product"`)}
	}
	return nil
}

func (pvc *ProductVariantCreate) sqlSave(ctx context.Context) (*ProductVariant, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *ProductVariantCreate) createSpec() (*ProductVariant, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductVariant{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(productvariant.Table, sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString))
	)
	_spec.OnConflict = pvc.conflict
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pvc.mutation.Archived(); ok {
		_spec.SetField(productvariant.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if value, ok := pvc.mutation.ExternalID(); ok {
		_spec.SetField(productvariant.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := pvc.mutation.Description(); ok {
		_spec.SetField(productvariant.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pvc.mutation.EanNumber(); ok {
		_spec.SetField(productvariant.FieldEanNumber, field.TypeString, value)
		_node.EanNumber = &value
	}
	if value, ok := pvc.mutation.WeightG(); ok {
		_spec.SetField(productvariant.FieldWeightG, field.TypeInt, value)
		_node.WeightG = &value
	}
	if value, ok := pvc.mutation.DimensionLength(); ok {
		_spec.SetField(productvariant.FieldDimensionLength, field.TypeInt, value)
		_node.DimensionLength = &value
	}
	if value, ok := pvc.mutation.DimensionWidth(); ok {
		_spec.SetField(productvariant.FieldDimensionWidth, field.TypeInt, value)
		_node.DimensionWidth = &value
	}
	if value, ok := pvc.mutation.DimensionHeight(); ok {
		_spec.SetField(productvariant.FieldDimensionHeight, field.TypeInt, value)
		_node.DimensionHeight = &value
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(productvariant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.SetField(productvariant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pvc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productvariant.TenantTable,
			Columns: []string{productvariant.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productvariant.ProductTable,
			Columns: []string{productvariant.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.product_product_variant = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.ProductImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pvc.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   productvariant.InventoryItemTable,
			Columns: []string{productvariant.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductVariant.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductVariantUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pvc *ProductVariantCreate) OnConflict(opts ...sql.ConflictOption) *ProductVariantUpsertOne {
	pvc.conflict = opts
	return &ProductVariantUpsertOne{
		create: pvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductVariant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pvc *ProductVariantCreate) OnConflictColumns(columns ...string) *ProductVariantUpsertOne {
	pvc.conflict = append(pvc.conflict, sql.ConflictColumns(columns...))
	return &ProductVariantUpsertOne{
		create: pvc,
	}
}

type (
	// ProductVariantUpsertOne is the builder for "upsert"-ing
	//  one ProductVariant node.
	ProductVariantUpsertOne struct {
		create *ProductVariantCreate
	}

	// ProductVariantUpsert is the "OnConflict" setter.
	ProductVariantUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ProductVariantUpsert) SetTenantID(v pulid.ID) *ProductVariantUpsert {
	u.Set(productvariant.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateTenantID() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldTenantID)
	return u
}

// SetArchived sets the "archived" field.
func (u *ProductVariantUpsert) SetArchived(v bool) *ProductVariantUpsert {
	u.Set(productvariant.FieldArchived, v)
	return u
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateArchived() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldArchived)
	return u
}

// SetExternalID sets the "external_ID" field.
func (u *ProductVariantUpsert) SetExternalID(v string) *ProductVariantUpsert {
	u.Set(productvariant.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_ID" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateExternalID() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_ID" field.
func (u *ProductVariantUpsert) ClearExternalID() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldExternalID)
	return u
}

// SetDescription sets the "description" field.
func (u *ProductVariantUpsert) SetDescription(v string) *ProductVariantUpsert {
	u.Set(productvariant.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateDescription() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ProductVariantUpsert) ClearDescription() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldDescription)
	return u
}

// SetEanNumber sets the "ean_number" field.
func (u *ProductVariantUpsert) SetEanNumber(v string) *ProductVariantUpsert {
	u.Set(productvariant.FieldEanNumber, v)
	return u
}

// UpdateEanNumber sets the "ean_number" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateEanNumber() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldEanNumber)
	return u
}

// ClearEanNumber clears the value of the "ean_number" field.
func (u *ProductVariantUpsert) ClearEanNumber() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldEanNumber)
	return u
}

// SetWeightG sets the "weight_g" field.
func (u *ProductVariantUpsert) SetWeightG(v int) *ProductVariantUpsert {
	u.Set(productvariant.FieldWeightG, v)
	return u
}

// UpdateWeightG sets the "weight_g" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateWeightG() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldWeightG)
	return u
}

// AddWeightG adds v to the "weight_g" field.
func (u *ProductVariantUpsert) AddWeightG(v int) *ProductVariantUpsert {
	u.Add(productvariant.FieldWeightG, v)
	return u
}

// ClearWeightG clears the value of the "weight_g" field.
func (u *ProductVariantUpsert) ClearWeightG() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldWeightG)
	return u
}

// SetDimensionLength sets the "dimension_length" field.
func (u *ProductVariantUpsert) SetDimensionLength(v int) *ProductVariantUpsert {
	u.Set(productvariant.FieldDimensionLength, v)
	return u
}

// UpdateDimensionLength sets the "dimension_length" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateDimensionLength() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldDimensionLength)
	return u
}

// AddDimensionLength adds v to the "dimension_length" field.
func (u *ProductVariantUpsert) AddDimensionLength(v int) *ProductVariantUpsert {
	u.Add(productvariant.FieldDimensionLength, v)
	return u
}

// ClearDimensionLength clears the value of the "dimension_length" field.
func (u *ProductVariantUpsert) ClearDimensionLength() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldDimensionLength)
	return u
}

// SetDimensionWidth sets the "dimension_width" field.
func (u *ProductVariantUpsert) SetDimensionWidth(v int) *ProductVariantUpsert {
	u.Set(productvariant.FieldDimensionWidth, v)
	return u
}

// UpdateDimensionWidth sets the "dimension_width" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateDimensionWidth() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldDimensionWidth)
	return u
}

// AddDimensionWidth adds v to the "dimension_width" field.
func (u *ProductVariantUpsert) AddDimensionWidth(v int) *ProductVariantUpsert {
	u.Add(productvariant.FieldDimensionWidth, v)
	return u
}

// ClearDimensionWidth clears the value of the "dimension_width" field.
func (u *ProductVariantUpsert) ClearDimensionWidth() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldDimensionWidth)
	return u
}

// SetDimensionHeight sets the "dimension_height" field.
func (u *ProductVariantUpsert) SetDimensionHeight(v int) *ProductVariantUpsert {
	u.Set(productvariant.FieldDimensionHeight, v)
	return u
}

// UpdateDimensionHeight sets the "dimension_height" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateDimensionHeight() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldDimensionHeight)
	return u
}

// AddDimensionHeight adds v to the "dimension_height" field.
func (u *ProductVariantUpsert) AddDimensionHeight(v int) *ProductVariantUpsert {
	u.Add(productvariant.FieldDimensionHeight, v)
	return u
}

// ClearDimensionHeight clears the value of the "dimension_height" field.
func (u *ProductVariantUpsert) ClearDimensionHeight() *ProductVariantUpsert {
	u.SetNull(productvariant.FieldDimensionHeight)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductVariantUpsert) SetUpdatedAt(v time.Time) *ProductVariantUpsert {
	u.Set(productvariant.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductVariantUpsert) UpdateUpdatedAt() *ProductVariantUpsert {
	u.SetExcluded(productvariant.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ProductVariant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(productvariant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductVariantUpsertOne) UpdateNewValues() *ProductVariantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(productvariant.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(productvariant.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductVariant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductVariantUpsertOne) Ignore() *ProductVariantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductVariantUpsertOne) DoNothing() *ProductVariantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductVariantCreate.OnConflict
// documentation for more info.
func (u *ProductVariantUpsertOne) Update(set func(*ProductVariantUpsert)) *ProductVariantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductVariantUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ProductVariantUpsertOne) SetTenantID(v pulid.ID) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateTenantID() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchived sets the "archived" field.
func (u *ProductVariantUpsertOne) SetArchived(v bool) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateArchived() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateArchived()
	})
}

// SetExternalID sets the "external_ID" field.
func (u *ProductVariantUpsertOne) SetExternalID(v string) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_ID" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateExternalID() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_ID" field.
func (u *ProductVariantUpsertOne) ClearExternalID() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearExternalID()
	})
}

// SetDescription sets the "description" field.
func (u *ProductVariantUpsertOne) SetDescription(v string) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateDescription() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ProductVariantUpsertOne) ClearDescription() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDescription()
	})
}

// SetEanNumber sets the "ean_number" field.
func (u *ProductVariantUpsertOne) SetEanNumber(v string) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetEanNumber(v)
	})
}

// UpdateEanNumber sets the "ean_number" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateEanNumber() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateEanNumber()
	})
}

// ClearEanNumber clears the value of the "ean_number" field.
func (u *ProductVariantUpsertOne) ClearEanNumber() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearEanNumber()
	})
}

// SetWeightG sets the "weight_g" field.
func (u *ProductVariantUpsertOne) SetWeightG(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetWeightG(v)
	})
}

// AddWeightG adds v to the "weight_g" field.
func (u *ProductVariantUpsertOne) AddWeightG(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddWeightG(v)
	})
}

// UpdateWeightG sets the "weight_g" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateWeightG() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateWeightG()
	})
}

// ClearWeightG clears the value of the "weight_g" field.
func (u *ProductVariantUpsertOne) ClearWeightG() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearWeightG()
	})
}

// SetDimensionLength sets the "dimension_length" field.
func (u *ProductVariantUpsertOne) SetDimensionLength(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDimensionLength(v)
	})
}

// AddDimensionLength adds v to the "dimension_length" field.
func (u *ProductVariantUpsertOne) AddDimensionLength(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddDimensionLength(v)
	})
}

// UpdateDimensionLength sets the "dimension_length" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateDimensionLength() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDimensionLength()
	})
}

// ClearDimensionLength clears the value of the "dimension_length" field.
func (u *ProductVariantUpsertOne) ClearDimensionLength() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDimensionLength()
	})
}

// SetDimensionWidth sets the "dimension_width" field.
func (u *ProductVariantUpsertOne) SetDimensionWidth(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDimensionWidth(v)
	})
}

// AddDimensionWidth adds v to the "dimension_width" field.
func (u *ProductVariantUpsertOne) AddDimensionWidth(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddDimensionWidth(v)
	})
}

// UpdateDimensionWidth sets the "dimension_width" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateDimensionWidth() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDimensionWidth()
	})
}

// ClearDimensionWidth clears the value of the "dimension_width" field.
func (u *ProductVariantUpsertOne) ClearDimensionWidth() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDimensionWidth()
	})
}

// SetDimensionHeight sets the "dimension_height" field.
func (u *ProductVariantUpsertOne) SetDimensionHeight(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDimensionHeight(v)
	})
}

// AddDimensionHeight adds v to the "dimension_height" field.
func (u *ProductVariantUpsertOne) AddDimensionHeight(v int) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddDimensionHeight(v)
	})
}

// UpdateDimensionHeight sets the "dimension_height" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateDimensionHeight() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDimensionHeight()
	})
}

// ClearDimensionHeight clears the value of the "dimension_height" field.
func (u *ProductVariantUpsertOne) ClearDimensionHeight() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDimensionHeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductVariantUpsertOne) SetUpdatedAt(v time.Time) *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductVariantUpsertOne) UpdateUpdatedAt() *ProductVariantUpsertOne {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProductVariantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductVariantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductVariantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductVariantUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ProductVariantUpsertOne.ID is not supported by MySQL driver. Use ProductVariantUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductVariantUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductVariantCreateBulk is the builder for creating many ProductVariant entities in bulk.
type ProductVariantCreateBulk struct {
	config
	err      error
	builders []*ProductVariantCreate
	conflict []sql.ConflictOption
}

// Save creates the ProductVariant entities in the database.
func (pvcb *ProductVariantCreateBulk) Save(ctx context.Context) ([]*ProductVariant, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*ProductVariant, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductVariantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *ProductVariantCreateBulk) SaveX(ctx context.Context) []*ProductVariant {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *ProductVariantCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *ProductVariantCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProductVariant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductVariantUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pvcb *ProductVariantCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductVariantUpsertBulk {
	pvcb.conflict = opts
	return &ProductVariantUpsertBulk{
		create: pvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProductVariant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pvcb *ProductVariantCreateBulk) OnConflictColumns(columns ...string) *ProductVariantUpsertBulk {
	pvcb.conflict = append(pvcb.conflict, sql.ConflictColumns(columns...))
	return &ProductVariantUpsertBulk{
		create: pvcb,
	}
}

// ProductVariantUpsertBulk is the builder for "upsert"-ing
// a bulk of ProductVariant nodes.
type ProductVariantUpsertBulk struct {
	create *ProductVariantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProductVariant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(productvariant.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductVariantUpsertBulk) UpdateNewValues() *ProductVariantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(productvariant.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(productvariant.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProductVariant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductVariantUpsertBulk) Ignore() *ProductVariantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductVariantUpsertBulk) DoNothing() *ProductVariantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductVariantCreateBulk.OnConflict
// documentation for more info.
func (u *ProductVariantUpsertBulk) Update(set func(*ProductVariantUpsert)) *ProductVariantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductVariantUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ProductVariantUpsertBulk) SetTenantID(v pulid.ID) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateTenantID() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchived sets the "archived" field.
func (u *ProductVariantUpsertBulk) SetArchived(v bool) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetArchived(v)
	})
}

// UpdateArchived sets the "archived" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateArchived() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateArchived()
	})
}

// SetExternalID sets the "external_ID" field.
func (u *ProductVariantUpsertBulk) SetExternalID(v string) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_ID" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateExternalID() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_ID" field.
func (u *ProductVariantUpsertBulk) ClearExternalID() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearExternalID()
	})
}

// SetDescription sets the "description" field.
func (u *ProductVariantUpsertBulk) SetDescription(v string) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateDescription() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ProductVariantUpsertBulk) ClearDescription() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDescription()
	})
}

// SetEanNumber sets the "ean_number" field.
func (u *ProductVariantUpsertBulk) SetEanNumber(v string) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetEanNumber(v)
	})
}

// UpdateEanNumber sets the "ean_number" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateEanNumber() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateEanNumber()
	})
}

// ClearEanNumber clears the value of the "ean_number" field.
func (u *ProductVariantUpsertBulk) ClearEanNumber() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearEanNumber()
	})
}

// SetWeightG sets the "weight_g" field.
func (u *ProductVariantUpsertBulk) SetWeightG(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetWeightG(v)
	})
}

// AddWeightG adds v to the "weight_g" field.
func (u *ProductVariantUpsertBulk) AddWeightG(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddWeightG(v)
	})
}

// UpdateWeightG sets the "weight_g" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateWeightG() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateWeightG()
	})
}

// ClearWeightG clears the value of the "weight_g" field.
func (u *ProductVariantUpsertBulk) ClearWeightG() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearWeightG()
	})
}

// SetDimensionLength sets the "dimension_length" field.
func (u *ProductVariantUpsertBulk) SetDimensionLength(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDimensionLength(v)
	})
}

// AddDimensionLength adds v to the "dimension_length" field.
func (u *ProductVariantUpsertBulk) AddDimensionLength(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddDimensionLength(v)
	})
}

// UpdateDimensionLength sets the "dimension_length" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateDimensionLength() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDimensionLength()
	})
}

// ClearDimensionLength clears the value of the "dimension_length" field.
func (u *ProductVariantUpsertBulk) ClearDimensionLength() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDimensionLength()
	})
}

// SetDimensionWidth sets the "dimension_width" field.
func (u *ProductVariantUpsertBulk) SetDimensionWidth(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDimensionWidth(v)
	})
}

// AddDimensionWidth adds v to the "dimension_width" field.
func (u *ProductVariantUpsertBulk) AddDimensionWidth(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddDimensionWidth(v)
	})
}

// UpdateDimensionWidth sets the "dimension_width" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateDimensionWidth() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDimensionWidth()
	})
}

// ClearDimensionWidth clears the value of the "dimension_width" field.
func (u *ProductVariantUpsertBulk) ClearDimensionWidth() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDimensionWidth()
	})
}

// SetDimensionHeight sets the "dimension_height" field.
func (u *ProductVariantUpsertBulk) SetDimensionHeight(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetDimensionHeight(v)
	})
}

// AddDimensionHeight adds v to the "dimension_height" field.
func (u *ProductVariantUpsertBulk) AddDimensionHeight(v int) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.AddDimensionHeight(v)
	})
}

// UpdateDimensionHeight sets the "dimension_height" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateDimensionHeight() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateDimensionHeight()
	})
}

// ClearDimensionHeight clears the value of the "dimension_height" field.
func (u *ProductVariantUpsertBulk) ClearDimensionHeight() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.ClearDimensionHeight()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductVariantUpsertBulk) SetUpdatedAt(v time.Time) *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductVariantUpsertBulk) UpdateUpdatedAt() *ProductVariantUpsertBulk {
	return u.Update(func(s *ProductVariantUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ProductVariantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProductVariantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProductVariantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductVariantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
