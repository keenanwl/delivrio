// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DeliveryRule is the model entity for the DeliveryRule schema.
type DeliveryRule struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryRuleQuery when eager-loading is set.
	Edges                         DeliveryRuleEdges `json:"edges"`
	delivery_option_delivery_rule *pulid.ID
	delivery_rule_currency        *pulid.ID
	selectValues                  sql.SelectValues
}

// DeliveryRuleEdges holds the relations/edges for other nodes in the graph.
type DeliveryRuleEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Since constraint groups can be && or ||, we need to have groups of multiple constraints
	DeliveryRuleConstraintGroup []*DeliveryRuleConstraintGroup `json:"delivery_rule_constraint_group,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// Country holds the value of the country edge.
	Country []*Country `json:"country,omitempty"`
	// Currency holds the value of the currency edge.
	Currency *Currency `json:"currency,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedDeliveryRuleConstraintGroup map[string][]*DeliveryRuleConstraintGroup
	namedCountry                     map[string][]*Country
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DeliveryRuleConstraintGroupOrErr returns the DeliveryRuleConstraintGroup value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryRuleEdges) DeliveryRuleConstraintGroupOrErr() ([]*DeliveryRuleConstraintGroup, error) {
	if e.loadedTypes[1] {
		return e.DeliveryRuleConstraintGroup, nil
	}
	return nil, &NotLoadedError{edge: "delivery_rule_constraint_group"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryRuleEdges) CountryOrErr() ([]*Country, error) {
	if e.loadedTypes[3] {
		return e.Country, nil
	}
	return nil, &NotLoadedError{edge: "country"}
}

// CurrencyOrErr returns the Currency value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryRuleEdges) CurrencyOrErr() (*Currency, error) {
	if e.Currency != nil {
		return e.Currency, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: currency.Label}
	}
	return nil, &NotLoadedError{edge: "currency"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeliveryRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliveryrule.FieldID, deliveryrule.FieldTenantID:
			values[i] = new(pulid.ID)
		case deliveryrule.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case deliveryrule.FieldName:
			values[i] = new(sql.NullString)
		case deliveryrule.ForeignKeys[0]: // delivery_option_delivery_rule
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case deliveryrule.ForeignKeys[1]: // delivery_rule_currency
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeliveryRule fields.
func (dr *DeliveryRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliveryrule.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dr.ID = *value
			}
		case deliveryrule.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				dr.TenantID = *value
			}
		case deliveryrule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dr.Name = value.String
			}
		case deliveryrule.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				dr.Price = value.Float64
			}
		case deliveryrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_option_delivery_rule", values[i])
			} else if value.Valid {
				dr.delivery_option_delivery_rule = new(pulid.ID)
				*dr.delivery_option_delivery_rule = *value.S.(*pulid.ID)
			}
		case deliveryrule.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field delivery_rule_currency", values[i])
			} else if value.Valid {
				dr.delivery_rule_currency = new(pulid.ID)
				*dr.delivery_rule_currency = *value.S.(*pulid.ID)
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeliveryRule.
// This includes values selected through modifiers, order, etc.
func (dr *DeliveryRule) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the DeliveryRule entity.
func (dr *DeliveryRule) QueryTenant() *TenantQuery {
	return NewDeliveryRuleClient(dr.config).QueryTenant(dr)
}

// QueryDeliveryRuleConstraintGroup queries the "delivery_rule_constraint_group" edge of the DeliveryRule entity.
func (dr *DeliveryRule) QueryDeliveryRuleConstraintGroup() *DeliveryRuleConstraintGroupQuery {
	return NewDeliveryRuleClient(dr.config).QueryDeliveryRuleConstraintGroup(dr)
}

// QueryDeliveryOption queries the "delivery_option" edge of the DeliveryRule entity.
func (dr *DeliveryRule) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewDeliveryRuleClient(dr.config).QueryDeliveryOption(dr)
}

// QueryCountry queries the "country" edge of the DeliveryRule entity.
func (dr *DeliveryRule) QueryCountry() *CountryQuery {
	return NewDeliveryRuleClient(dr.config).QueryCountry(dr)
}

// QueryCurrency queries the "currency" edge of the DeliveryRule entity.
func (dr *DeliveryRule) QueryCurrency() *CurrencyQuery {
	return NewDeliveryRuleClient(dr.config).QueryCurrency(dr)
}

// Update returns a builder for updating this DeliveryRule.
// Note that you need to call DeliveryRule.Unwrap() before calling this method if this DeliveryRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DeliveryRule) Update() *DeliveryRuleUpdateOne {
	return NewDeliveryRuleClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DeliveryRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DeliveryRule) Unwrap() *DeliveryRule {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeliveryRule is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DeliveryRule) String() string {
	var builder strings.Builder
	builder.WriteString("DeliveryRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", dr.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(dr.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", dr.Price))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryRuleConstraintGroup returns the DeliveryRuleConstraintGroup named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dr *DeliveryRule) NamedDeliveryRuleConstraintGroup(name string) ([]*DeliveryRuleConstraintGroup, error) {
	if dr.Edges.namedDeliveryRuleConstraintGroup == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dr.Edges.namedDeliveryRuleConstraintGroup[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dr *DeliveryRule) appendNamedDeliveryRuleConstraintGroup(name string, edges ...*DeliveryRuleConstraintGroup) {
	if dr.Edges.namedDeliveryRuleConstraintGroup == nil {
		dr.Edges.namedDeliveryRuleConstraintGroup = make(map[string][]*DeliveryRuleConstraintGroup)
	}
	if len(edges) == 0 {
		dr.Edges.namedDeliveryRuleConstraintGroup[name] = []*DeliveryRuleConstraintGroup{}
	} else {
		dr.Edges.namedDeliveryRuleConstraintGroup[name] = append(dr.Edges.namedDeliveryRuleConstraintGroup[name], edges...)
	}
}

// NamedCountry returns the Country named value or an error if the edge was not
// loaded in eager-loading with this name.
func (dr *DeliveryRule) NamedCountry(name string) ([]*Country, error) {
	if dr.Edges.namedCountry == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := dr.Edges.namedCountry[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (dr *DeliveryRule) appendNamedCountry(name string, edges ...*Country) {
	if dr.Edges.namedCountry == nil {
		dr.Edges.namedCountry = make(map[string][]*Country)
	}
	if len(edges) == 0 {
		dr.Edges.namedCountry[name] = []*Country{}
	} else {
		dr.Edges.namedCountry[name] = append(dr.Edges.namedCountry[name], edges...)
	}
}

// DeliveryRules is a parsable slice of DeliveryRule.
type DeliveryRules []*DeliveryRule
