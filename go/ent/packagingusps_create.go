// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSCreate is the builder for creating a PackagingUSPS entity.
type PackagingUSPSCreate struct {
	config
	mutation *PackagingUSPSMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (puc *PackagingUSPSCreate) SetTenantID(pu pulid.ID) *PackagingUSPSCreate {
	puc.mutation.SetTenantID(pu)
	return puc
}

// SetID sets the "id" field.
func (puc *PackagingUSPSCreate) SetID(pu pulid.ID) *PackagingUSPSCreate {
	puc.mutation.SetID(pu)
	return puc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (puc *PackagingUSPSCreate) SetNillableID(pu *pulid.ID) *PackagingUSPSCreate {
	if pu != nil {
		puc.SetID(*pu)
	}
	return puc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puc *PackagingUSPSCreate) SetTenant(t *Tenant) *PackagingUSPSCreate {
	return puc.SetTenantID(t.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (puc *PackagingUSPSCreate) SetPackagingID(id pulid.ID) *PackagingUSPSCreate {
	puc.mutation.SetPackagingID(id)
	return puc
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (puc *PackagingUSPSCreate) SetPackaging(p *Packaging) *PackagingUSPSCreate {
	return puc.SetPackagingID(p.ID)
}

// SetPackagingUSPSRateIndicatorID sets the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity by ID.
func (puc *PackagingUSPSCreate) SetPackagingUSPSRateIndicatorID(id pulid.ID) *PackagingUSPSCreate {
	puc.mutation.SetPackagingUSPSRateIndicatorID(id)
	return puc
}

// SetPackagingUSPSRateIndicator sets the "packaging_usps_rate_indicator" edge to the PackagingUSPSRateIndicator entity.
func (puc *PackagingUSPSCreate) SetPackagingUSPSRateIndicator(p *PackagingUSPSRateIndicator) *PackagingUSPSCreate {
	return puc.SetPackagingUSPSRateIndicatorID(p.ID)
}

// SetPackagingUSPSProcessingCategoryID sets the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity by ID.
func (puc *PackagingUSPSCreate) SetPackagingUSPSProcessingCategoryID(id pulid.ID) *PackagingUSPSCreate {
	puc.mutation.SetPackagingUSPSProcessingCategoryID(id)
	return puc
}

// SetPackagingUSPSProcessingCategory sets the "packaging_usps_processing_category" edge to the PackagingUSPSProcessingCategory entity.
func (puc *PackagingUSPSCreate) SetPackagingUSPSProcessingCategory(p *PackagingUSPSProcessingCategory) *PackagingUSPSCreate {
	return puc.SetPackagingUSPSProcessingCategoryID(p.ID)
}

// Mutation returns the PackagingUSPSMutation object of the builder.
func (puc *PackagingUSPSCreate) Mutation() *PackagingUSPSMutation {
	return puc.mutation
}

// Save creates the PackagingUSPS in the database.
func (puc *PackagingUSPSCreate) Save(ctx context.Context) (*PackagingUSPS, error) {
	if err := puc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puc.sqlSave, puc.mutation, puc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (puc *PackagingUSPSCreate) SaveX(ctx context.Context) *PackagingUSPS {
	v, err := puc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puc *PackagingUSPSCreate) Exec(ctx context.Context) error {
	_, err := puc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puc *PackagingUSPSCreate) ExecX(ctx context.Context) {
	if err := puc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puc *PackagingUSPSCreate) defaults() error {
	if _, ok := puc.mutation.ID(); !ok {
		if packagingusps.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized packagingusps.DefaultID (forgotten import ent/runtime?)")
		}
		v := packagingusps.DefaultID()
		puc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puc *PackagingUSPSCreate) check() error {
	if _, ok := puc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "PackagingUSPS.tenant_id"`)}
	}
	if len(puc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "PackagingUSPS.tenant"`)}
	}
	if len(puc.mutation.PackagingIDs()) == 0 {
		return &ValidationError{Name: "packaging", err: errors.New(`ent: missing required edge "PackagingUSPS.packaging"`)}
	}
	if len(puc.mutation.PackagingUSPSRateIndicatorIDs()) == 0 {
		return &ValidationError{Name: "packaging_usps_rate_indicator", err: errors.New(`ent: missing required edge "PackagingUSPS.packaging_usps_rate_indicator"`)}
	}
	if len(puc.mutation.PackagingUSPSProcessingCategoryIDs()) == 0 {
		return &ValidationError{Name: "packaging_usps_processing_category", err: errors.New(`ent: missing required edge "PackagingUSPS.packaging_usps_processing_category"`)}
	}
	return nil
}

func (puc *PackagingUSPSCreate) sqlSave(ctx context.Context) (*PackagingUSPS, error) {
	if err := puc.check(); err != nil {
		return nil, err
	}
	_node, _spec := puc.createSpec()
	if err := sqlgraph.CreateNode(ctx, puc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	puc.mutation.id = &_node.ID
	puc.mutation.done = true
	return _node, nil
}

func (puc *PackagingUSPSCreate) createSpec() (*PackagingUSPS, *sqlgraph.CreateSpec) {
	var (
		_node = &PackagingUSPS{config: puc.config}
		_spec = sqlgraph.NewCreateSpec(packagingusps.Table, sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString))
	)
	_spec.OnConflict = puc.conflict
	if id, ok := puc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := puc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.TenantTable,
			Columns: []string{packagingusps.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := puc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingusps.PackagingTable,
			Columns: []string{packagingusps.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.packaging_packaging_usps = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := puc.mutation.PackagingUSPSRateIndicatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSRateIndicatorTable,
			Columns: []string{packagingusps.PackagingUSPSRateIndicatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.packaging_usps_packaging_usps_rate_indicator = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := puc.mutation.PackagingUSPSProcessingCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSProcessingCategoryTable,
			Columns: []string{packagingusps.PackagingUSPSProcessingCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.packaging_usps_packaging_usps_processing_category = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingUSPS.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (puc *PackagingUSPSCreate) OnConflict(opts ...sql.ConflictOption) *PackagingUSPSUpsertOne {
	puc.conflict = opts
	return &PackagingUSPSUpsertOne{
		create: puc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (puc *PackagingUSPSCreate) OnConflictColumns(columns ...string) *PackagingUSPSUpsertOne {
	puc.conflict = append(puc.conflict, sql.ConflictColumns(columns...))
	return &PackagingUSPSUpsertOne{
		create: puc,
	}
}

type (
	// PackagingUSPSUpsertOne is the builder for "upsert"-ing
	//  one PackagingUSPS node.
	PackagingUSPSUpsertOne struct {
		create *PackagingUSPSCreate
	}

	// PackagingUSPSUpsert is the "OnConflict" setter.
	PackagingUSPSUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *PackagingUSPSUpsert) SetTenantID(v pulid.ID) *PackagingUSPSUpsert {
	u.Set(packagingusps.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingUSPSUpsert) UpdateTenantID() *PackagingUSPSUpsert {
	u.SetExcluded(packagingusps.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PackagingUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packagingusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUSPSUpsertOne) UpdateNewValues() *PackagingUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(packagingusps.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingUSPS.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackagingUSPSUpsertOne) Ignore() *PackagingUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUSPSUpsertOne) DoNothing() *PackagingUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingUSPSCreate.OnConflict
// documentation for more info.
func (u *PackagingUSPSUpsertOne) Update(set func(*PackagingUSPSUpsert)) *PackagingUSPSUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PackagingUSPSUpsertOne) SetTenantID(v pulid.ID) *PackagingUSPSUpsertOne {
	return u.Update(func(s *PackagingUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingUSPSUpsertOne) UpdateTenantID() *PackagingUSPSUpsertOne {
	return u.Update(func(s *PackagingUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *PackagingUSPSUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingUSPSCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUSPSUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackagingUSPSUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PackagingUSPSUpsertOne.ID is not supported by MySQL driver. Use PackagingUSPSUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackagingUSPSUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackagingUSPSCreateBulk is the builder for creating many PackagingUSPS entities in bulk.
type PackagingUSPSCreateBulk struct {
	config
	err      error
	builders []*PackagingUSPSCreate
	conflict []sql.ConflictOption
}

// Save creates the PackagingUSPS entities in the database.
func (pucb *PackagingUSPSCreateBulk) Save(ctx context.Context) ([]*PackagingUSPS, error) {
	if pucb.err != nil {
		return nil, pucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pucb.builders))
	nodes := make([]*PackagingUSPS, len(pucb.builders))
	mutators := make([]Mutator, len(pucb.builders))
	for i := range pucb.builders {
		func(i int, root context.Context) {
			builder := pucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackagingUSPSMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pucb *PackagingUSPSCreateBulk) SaveX(ctx context.Context) []*PackagingUSPS {
	v, err := pucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pucb *PackagingUSPSCreateBulk) Exec(ctx context.Context) error {
	_, err := pucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pucb *PackagingUSPSCreateBulk) ExecX(ctx context.Context) {
	if err := pucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingUSPS.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUSPSUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pucb *PackagingUSPSCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackagingUSPSUpsertBulk {
	pucb.conflict = opts
	return &PackagingUSPSUpsertBulk{
		create: pucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingUSPS.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pucb *PackagingUSPSCreateBulk) OnConflictColumns(columns ...string) *PackagingUSPSUpsertBulk {
	pucb.conflict = append(pucb.conflict, sql.ConflictColumns(columns...))
	return &PackagingUSPSUpsertBulk{
		create: pucb,
	}
}

// PackagingUSPSUpsertBulk is the builder for "upsert"-ing
// a bulk of PackagingUSPS nodes.
type PackagingUSPSUpsertBulk struct {
	create *PackagingUSPSCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackagingUSPS.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packagingusps.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUSPSUpsertBulk) UpdateNewValues() *PackagingUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(packagingusps.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingUSPS.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackagingUSPSUpsertBulk) Ignore() *PackagingUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUSPSUpsertBulk) DoNothing() *PackagingUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingUSPSCreateBulk.OnConflict
// documentation for more info.
func (u *PackagingUSPSUpsertBulk) Update(set func(*PackagingUSPSUpsert)) *PackagingUSPSUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUSPSUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PackagingUSPSUpsertBulk) SetTenantID(v pulid.ID) *PackagingUSPSUpsertBulk {
	return u.Update(func(s *PackagingUSPSUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingUSPSUpsertBulk) UpdateTenantID() *PackagingUSPSUpsertBulk {
	return u.Update(func(s *PackagingUSPSUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *PackagingUSPSUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackagingUSPSCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingUSPSCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUSPSUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
