// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSProcessingCategoryQuery is the builder for querying PackagingUSPSProcessingCategory entities.
type PackagingUSPSProcessingCategoryQuery struct {
	config
	ctx        *QueryContext
	order      []packaginguspsprocessingcategory.OrderOption
	inters     []Interceptor
	predicates []predicate.PackagingUSPSProcessingCategory
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*PackagingUSPSProcessingCategory) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PackagingUSPSProcessingCategoryQuery builder.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Where(ps ...predicate.PackagingUSPSProcessingCategory) *PackagingUSPSProcessingCategoryQuery {
	pupcq.predicates = append(pupcq.predicates, ps...)
	return pupcq
}

// Limit the number of records to be returned by this query.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Limit(limit int) *PackagingUSPSProcessingCategoryQuery {
	pupcq.ctx.Limit = &limit
	return pupcq
}

// Offset to start from.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Offset(offset int) *PackagingUSPSProcessingCategoryQuery {
	pupcq.ctx.Offset = &offset
	return pupcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Unique(unique bool) *PackagingUSPSProcessingCategoryQuery {
	pupcq.ctx.Unique = &unique
	return pupcq
}

// Order specifies how the records should be ordered.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Order(o ...packaginguspsprocessingcategory.OrderOption) *PackagingUSPSProcessingCategoryQuery {
	pupcq.order = append(pupcq.order, o...)
	return pupcq
}

// First returns the first PackagingUSPSProcessingCategory entity from the query.
// Returns a *NotFoundError when no PackagingUSPSProcessingCategory was found.
func (pupcq *PackagingUSPSProcessingCategoryQuery) First(ctx context.Context) (*PackagingUSPSProcessingCategory, error) {
	nodes, err := pupcq.Limit(1).All(setContextOp(ctx, pupcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{packaginguspsprocessingcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) FirstX(ctx context.Context) *PackagingUSPSProcessingCategory {
	node, err := pupcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PackagingUSPSProcessingCategory ID from the query.
// Returns a *NotFoundError when no PackagingUSPSProcessingCategory ID was found.
func (pupcq *PackagingUSPSProcessingCategoryQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pupcq.Limit(1).IDs(setContextOp(ctx, pupcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{packaginguspsprocessingcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := pupcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PackagingUSPSProcessingCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PackagingUSPSProcessingCategory entity is found.
// Returns a *NotFoundError when no PackagingUSPSProcessingCategory entities are found.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Only(ctx context.Context) (*PackagingUSPSProcessingCategory, error) {
	nodes, err := pupcq.Limit(2).All(setContextOp(ctx, pupcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{packaginguspsprocessingcategory.Label}
	default:
		return nil, &NotSingularError{packaginguspsprocessingcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) OnlyX(ctx context.Context) *PackagingUSPSProcessingCategory {
	node, err := pupcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PackagingUSPSProcessingCategory ID in the query.
// Returns a *NotSingularError when more than one PackagingUSPSProcessingCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (pupcq *PackagingUSPSProcessingCategoryQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = pupcq.Limit(2).IDs(setContextOp(ctx, pupcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{packaginguspsprocessingcategory.Label}
	default:
		err = &NotSingularError{packaginguspsprocessingcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := pupcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PackagingUSPSProcessingCategories.
func (pupcq *PackagingUSPSProcessingCategoryQuery) All(ctx context.Context) ([]*PackagingUSPSProcessingCategory, error) {
	ctx = setContextOp(ctx, pupcq.ctx, ent.OpQueryAll)
	if err := pupcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PackagingUSPSProcessingCategory, *PackagingUSPSProcessingCategoryQuery]()
	return withInterceptors[[]*PackagingUSPSProcessingCategory](ctx, pupcq, qr, pupcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) AllX(ctx context.Context) []*PackagingUSPSProcessingCategory {
	nodes, err := pupcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PackagingUSPSProcessingCategory IDs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if pupcq.ctx.Unique == nil && pupcq.path != nil {
		pupcq.Unique(true)
	}
	ctx = setContextOp(ctx, pupcq.ctx, ent.OpQueryIDs)
	if err = pupcq.Select(packaginguspsprocessingcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := pupcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pupcq.ctx, ent.OpQueryCount)
	if err := pupcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pupcq, querierCount[*PackagingUSPSProcessingCategoryQuery](), pupcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) CountX(ctx context.Context) int {
	count, err := pupcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pupcq.ctx, ent.OpQueryExist)
	switch _, err := pupcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pupcq *PackagingUSPSProcessingCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := pupcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PackagingUSPSProcessingCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Clone() *PackagingUSPSProcessingCategoryQuery {
	if pupcq == nil {
		return nil
	}
	return &PackagingUSPSProcessingCategoryQuery{
		config:     pupcq.config,
		ctx:        pupcq.ctx.Clone(),
		order:      append([]packaginguspsprocessingcategory.OrderOption{}, pupcq.order...),
		inters:     append([]Interceptor{}, pupcq.inters...),
		predicates: append([]predicate.PackagingUSPSProcessingCategory{}, pupcq.predicates...),
		// clone intermediate query.
		sql:  pupcq.sql.Clone(),
		path: pupcq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PackagingUSPSProcessingCategory.Query().
//		GroupBy(packaginguspsprocessingcategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pupcq *PackagingUSPSProcessingCategoryQuery) GroupBy(field string, fields ...string) *PackagingUSPSProcessingCategoryGroupBy {
	pupcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PackagingUSPSProcessingCategoryGroupBy{build: pupcq}
	grbuild.flds = &pupcq.ctx.Fields
	grbuild.label = packaginguspsprocessingcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.PackagingUSPSProcessingCategory.Query().
//		Select(packaginguspsprocessingcategory.FieldName).
//		Scan(ctx, &v)
func (pupcq *PackagingUSPSProcessingCategoryQuery) Select(fields ...string) *PackagingUSPSProcessingCategorySelect {
	pupcq.ctx.Fields = append(pupcq.ctx.Fields, fields...)
	sbuild := &PackagingUSPSProcessingCategorySelect{PackagingUSPSProcessingCategoryQuery: pupcq}
	sbuild.label = packaginguspsprocessingcategory.Label
	sbuild.flds, sbuild.scan = &pupcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PackagingUSPSProcessingCategorySelect configured with the given aggregations.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Aggregate(fns ...AggregateFunc) *PackagingUSPSProcessingCategorySelect {
	return pupcq.Select().Aggregate(fns...)
}

func (pupcq *PackagingUSPSProcessingCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pupcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pupcq); err != nil {
				return err
			}
		}
	}
	for _, f := range pupcq.ctx.Fields {
		if !packaginguspsprocessingcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pupcq.path != nil {
		prev, err := pupcq.path(ctx)
		if err != nil {
			return err
		}
		pupcq.sql = prev
	}
	if packaginguspsprocessingcategory.Policy == nil {
		return errors.New("ent: uninitialized packaginguspsprocessingcategory.Policy (forgotten import ent/runtime?)")
	}
	if err := packaginguspsprocessingcategory.Policy.EvalQuery(ctx, pupcq); err != nil {
		return err
	}
	return nil
}

func (pupcq *PackagingUSPSProcessingCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PackagingUSPSProcessingCategory, error) {
	var (
		nodes = []*PackagingUSPSProcessingCategory{}
		_spec = pupcq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PackagingUSPSProcessingCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PackagingUSPSProcessingCategory{config: pupcq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(pupcq.modifiers) > 0 {
		_spec.Modifiers = pupcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pupcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range pupcq.loadTotal {
		if err := pupcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pupcq *PackagingUSPSProcessingCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pupcq.querySpec()
	if len(pupcq.modifiers) > 0 {
		_spec.Modifiers = pupcq.modifiers
	}
	_spec.Node.Columns = pupcq.ctx.Fields
	if len(pupcq.ctx.Fields) > 0 {
		_spec.Unique = pupcq.ctx.Unique != nil && *pupcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pupcq.driver, _spec)
}

func (pupcq *PackagingUSPSProcessingCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(packaginguspsprocessingcategory.Table, packaginguspsprocessingcategory.Columns, sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString))
	_spec.From = pupcq.sql
	if unique := pupcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pupcq.path != nil {
		_spec.Unique = true
	}
	if fields := pupcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packaginguspsprocessingcategory.FieldID)
		for i := range fields {
			if fields[i] != packaginguspsprocessingcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pupcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pupcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pupcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pupcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pupcq *PackagingUSPSProcessingCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pupcq.driver.Dialect())
	t1 := builder.Table(packaginguspsprocessingcategory.Table)
	columns := pupcq.ctx.Fields
	if len(columns) == 0 {
		columns = packaginguspsprocessingcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pupcq.sql != nil {
		selector = pupcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pupcq.ctx.Unique != nil && *pupcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pupcq.predicates {
		p(selector)
	}
	for _, p := range pupcq.order {
		p(selector)
	}
	if offset := pupcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pupcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PackagingUSPSProcessingCategoryGroupBy is the group-by builder for PackagingUSPSProcessingCategory entities.
type PackagingUSPSProcessingCategoryGroupBy struct {
	selector
	build *PackagingUSPSProcessingCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pupcgb *PackagingUSPSProcessingCategoryGroupBy) Aggregate(fns ...AggregateFunc) *PackagingUSPSProcessingCategoryGroupBy {
	pupcgb.fns = append(pupcgb.fns, fns...)
	return pupcgb
}

// Scan applies the selector query and scans the result into the given value.
func (pupcgb *PackagingUSPSProcessingCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pupcgb.build.ctx, ent.OpQueryGroupBy)
	if err := pupcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingUSPSProcessingCategoryQuery, *PackagingUSPSProcessingCategoryGroupBy](ctx, pupcgb.build, pupcgb, pupcgb.build.inters, v)
}

func (pupcgb *PackagingUSPSProcessingCategoryGroupBy) sqlScan(ctx context.Context, root *PackagingUSPSProcessingCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pupcgb.fns))
	for _, fn := range pupcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pupcgb.flds)+len(pupcgb.fns))
		for _, f := range *pupcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pupcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pupcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PackagingUSPSProcessingCategorySelect is the builder for selecting fields of PackagingUSPSProcessingCategory entities.
type PackagingUSPSProcessingCategorySelect struct {
	*PackagingUSPSProcessingCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pupcs *PackagingUSPSProcessingCategorySelect) Aggregate(fns ...AggregateFunc) *PackagingUSPSProcessingCategorySelect {
	pupcs.fns = append(pupcs.fns, fns...)
	return pupcs
}

// Scan applies the selector query and scans the result into the given value.
func (pupcs *PackagingUSPSProcessingCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pupcs.ctx, ent.OpQuerySelect)
	if err := pupcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PackagingUSPSProcessingCategoryQuery, *PackagingUSPSProcessingCategorySelect](ctx, pupcs.PackagingUSPSProcessingCategoryQuery, pupcs, pupcs.inters, v)
}

func (pupcs *PackagingUSPSProcessingCategorySelect) sqlScan(ctx context.Context, root *PackagingUSPSProcessingCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pupcs.fns))
	for _, fn := range pupcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pupcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pupcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
