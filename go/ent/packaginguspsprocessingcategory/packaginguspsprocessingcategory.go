// Code generated by ent, DO NOT EDIT.

package packaginguspsprocessingcategory

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the packaginguspsprocessingcategory type in the database.
	Label = "packaging_usps_processing_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProcessingCategory holds the string denoting the processing_category field in the database.
	FieldProcessingCategory = "processing_category"
	// Table holds the table name of the packaginguspsprocessingcategory in the database.
	Table = "packaging_usps_processing_categories"
)

// Columns holds all SQL columns for packaginguspsprocessingcategory fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldProcessingCategory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// ProcessingCategory defines the type for the "processing_category" enum field.
type ProcessingCategory string

// ProcessingCategory values.
const (
	ProcessingCategoryLETTERS        ProcessingCategory = "LETTERS"
	ProcessingCategoryFLATS          ProcessingCategory = "FLATS"
	ProcessingCategoryMACHINABLE     ProcessingCategory = "MACHINABLE"
	ProcessingCategoryIRREGULAR      ProcessingCategory = "IRREGULAR"
	ProcessingCategoryNON_MACHINABLE ProcessingCategory = "NON_MACHINABLE"
)

func (pc ProcessingCategory) String() string {
	return string(pc)
}

// ProcessingCategoryValidator is a validator for the "processing_category" field enum values. It is called by the builders before save.
func ProcessingCategoryValidator(pc ProcessingCategory) error {
	switch pc {
	case ProcessingCategoryLETTERS, ProcessingCategoryFLATS, ProcessingCategoryMACHINABLE, ProcessingCategoryIRREGULAR, ProcessingCategoryNON_MACHINABLE:
		return nil
	default:
		return fmt.Errorf("packaginguspsprocessingcategory: invalid enum value for processing_category field: %q", pc)
	}
}

// OrderOption defines the ordering options for the PackagingUSPSProcessingCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProcessingCategory orders the results by the processing_category field.
func ByProcessingCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessingCategory, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ProcessingCategory) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ProcessingCategory) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ProcessingCategory(str)
	if err := ProcessingCategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ProcessingCategory", str)
	}
	return nil
}
