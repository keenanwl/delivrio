// Code generated by ent, DO NOT EDIT.

package packaging

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the packaging type in the database.
	Label = "packaging"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldArchivedAt holds the string denoting the archived_at field in the database.
	FieldArchivedAt = "archived_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldHeightCm holds the string denoting the height_cm field in the database.
	FieldHeightCm = "height_cm"
	// FieldWidthCm holds the string denoting the width_cm field in the database.
	FieldWidthCm = "width_cm"
	// FieldLengthCm holds the string denoting the length_cm field in the database.
	FieldLengthCm = "length_cm"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeShipmentParcel holds the string denoting the shipment_parcel edge name in mutations.
	EdgeShipmentParcel = "shipment_parcel"
	// EdgePallet holds the string denoting the pallet edge name in mutations.
	EdgePallet = "pallet"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeReturnColli holds the string denoting the return_colli edge name in mutations.
	EdgeReturnColli = "return_colli"
	// EdgePackagingDF holds the string denoting the packaging_df edge name in mutations.
	EdgePackagingDF = "packaging_df"
	// EdgePackagingUSPS holds the string denoting the packaging_usps edge name in mutations.
	EdgePackagingUSPS = "packaging_usps"
	// EdgeCarrierBrand holds the string denoting the carrier_brand edge name in mutations.
	EdgeCarrierBrand = "carrier_brand"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// Table holds the table name of the packaging in the database.
	Table = "packagings"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "packagings"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ShipmentParcelTable is the table that holds the shipment_parcel relation/edge.
	ShipmentParcelTable = "shipment_parcels"
	// ShipmentParcelInverseTable is the table name for the ShipmentParcel entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentparcel" package.
	ShipmentParcelInverseTable = "shipment_parcels"
	// ShipmentParcelColumn is the table column denoting the shipment_parcel relation/edge.
	ShipmentParcelColumn = "shipment_parcel_packaging"
	// PalletTable is the table that holds the pallet relation/edge.
	PalletTable = "pallets"
	// PalletInverseTable is the table name for the Pallet entity.
	// It exists in this package in order to avoid circular dependency with the "pallet" package.
	PalletInverseTable = "pallets"
	// PalletColumn is the table column denoting the pallet relation/edge.
	PalletColumn = "pallet_packaging"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "collis"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "colli_packaging"
	// ReturnColliTable is the table that holds the return_colli relation/edge.
	ReturnColliTable = "return_collis"
	// ReturnColliInverseTable is the table name for the ReturnColli entity.
	// It exists in this package in order to avoid circular dependency with the "returncolli" package.
	ReturnColliInverseTable = "return_collis"
	// ReturnColliColumn is the table column denoting the return_colli relation/edge.
	ReturnColliColumn = "return_colli_packaging"
	// PackagingDFTable is the table that holds the packaging_df relation/edge.
	PackagingDFTable = "packaging_dfs"
	// PackagingDFInverseTable is the table name for the PackagingDF entity.
	// It exists in this package in order to avoid circular dependency with the "packagingdf" package.
	PackagingDFInverseTable = "packaging_dfs"
	// PackagingDFColumn is the table column denoting the packaging_df relation/edge.
	PackagingDFColumn = "packaging_packaging_df"
	// PackagingUSPSTable is the table that holds the packaging_usps relation/edge.
	PackagingUSPSTable = "packaging_usp_ss"
	// PackagingUSPSInverseTable is the table name for the PackagingUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "packagingusps" package.
	PackagingUSPSInverseTable = "packaging_usp_ss"
	// PackagingUSPSColumn is the table column denoting the packaging_usps relation/edge.
	PackagingUSPSColumn = "packaging_packaging_usps"
	// CarrierBrandTable is the table that holds the carrier_brand relation/edge.
	CarrierBrandTable = "packagings"
	// CarrierBrandInverseTable is the table name for the CarrierBrand entity.
	// It exists in this package in order to avoid circular dependency with the "carrierbrand" package.
	CarrierBrandInverseTable = "carrier_brands"
	// CarrierBrandColumn is the table column denoting the carrier_brand relation/edge.
	CarrierBrandColumn = "packaging_carrier_brand"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "delivery_options"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "delivery_option_default_packaging"
)

// Columns holds all SQL columns for packaging fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldArchivedAt,
	FieldName,
	FieldHeightCm,
	FieldWidthCm,
	FieldLengthCm,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "packagings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"packaging_carrier_brand",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the Packaging queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByArchivedAt orders the results by the archived_at field.
func ByArchivedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchivedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByHeightCm orders the results by the height_cm field.
func ByHeightCm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeightCm, opts...).ToFunc()
}

// ByWidthCm orders the results by the width_cm field.
func ByWidthCm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWidthCm, opts...).ToFunc()
}

// ByLengthCm orders the results by the length_cm field.
func ByLengthCm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLengthCm, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentParcelCount orders the results by shipment_parcel count.
func ByShipmentParcelCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentParcelStep(), opts...)
	}
}

// ByShipmentParcel orders the results by shipment_parcel terms.
func ByShipmentParcel(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentParcelStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPalletCount orders the results by pallet count.
func ByPalletCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPalletStep(), opts...)
	}
}

// ByPallet orders the results by pallet terms.
func ByPallet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPalletStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByColliCount orders the results by colli count.
func ByColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newColliStep(), opts...)
	}
}

// ByColli orders the results by colli terms.
func ByColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnColliCount orders the results by return_colli count.
func ByReturnColliCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnColliStep(), opts...)
	}
}

// ByReturnColli orders the results by return_colli terms.
func ByReturnColli(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnColliStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPackagingDFField orders the results by packaging_df field.
func ByPackagingDFField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingDFStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingUSPSField orders the results by packaging_usps field.
func ByPackagingUSPSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingUSPSStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierBrandField orders the results by carrier_brand field.
func ByCarrierBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionCount orders the results by delivery_option count.
func ByDeliveryOptionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionStep(), opts...)
	}
}

// ByDeliveryOption orders the results by delivery_option terms.
func ByDeliveryOption(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newShipmentParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ShipmentParcelTable, ShipmentParcelColumn),
	)
}
func newPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PalletTable, PalletColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
	)
}
func newReturnColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnColliTable, ReturnColliColumn),
	)
}
func newPackagingDFStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingDFInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PackagingDFTable, PackagingDFColumn),
	)
}
func newPackagingUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PackagingUSPSTable, PackagingUSPSColumn),
	)
}
func newCarrierBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierBrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
