// Code generated by ent, DO NOT EDIT.

package packaging

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldTenantID, v))
}

// ArchivedAt applies equality check predicate on the "archived_at" field. It's identical to ArchivedAtEQ.
func ArchivedAt(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldArchivedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldName, v))
}

// HeightCm applies equality check predicate on the "height_cm" field. It's identical to HeightCmEQ.
func HeightCm(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldHeightCm, v))
}

// WidthCm applies equality check predicate on the "width_cm" field. It's identical to WidthCmEQ.
func WidthCm(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldWidthCm, v))
}

// LengthCm applies equality check predicate on the "length_cm" field. It's identical to LengthCmEQ.
func LengthCm(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldLengthCm, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Packaging {
	vc := string(v)
	return predicate.Packaging(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Packaging {
	vc := string(v)
	return predicate.Packaging(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Packaging {
	vc := string(v)
	return predicate.Packaging(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Packaging {
	vc := string(v)
	return predicate.Packaging(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Packaging {
	vc := string(v)
	return predicate.Packaging(sql.FieldContainsFold(FieldTenantID, vc))
}

// ArchivedAtEQ applies the EQ predicate on the "archived_at" field.
func ArchivedAtEQ(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldArchivedAt, v))
}

// ArchivedAtNEQ applies the NEQ predicate on the "archived_at" field.
func ArchivedAtNEQ(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldArchivedAt, v))
}

// ArchivedAtIn applies the In predicate on the "archived_at" field.
func ArchivedAtIn(vs ...time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldArchivedAt, vs...))
}

// ArchivedAtNotIn applies the NotIn predicate on the "archived_at" field.
func ArchivedAtNotIn(vs ...time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldArchivedAt, vs...))
}

// ArchivedAtGT applies the GT predicate on the "archived_at" field.
func ArchivedAtGT(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldArchivedAt, v))
}

// ArchivedAtGTE applies the GTE predicate on the "archived_at" field.
func ArchivedAtGTE(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldArchivedAt, v))
}

// ArchivedAtLT applies the LT predicate on the "archived_at" field.
func ArchivedAtLT(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldArchivedAt, v))
}

// ArchivedAtLTE applies the LTE predicate on the "archived_at" field.
func ArchivedAtLTE(v time.Time) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldArchivedAt, v))
}

// ArchivedAtIsNil applies the IsNil predicate on the "archived_at" field.
func ArchivedAtIsNil() predicate.Packaging {
	return predicate.Packaging(sql.FieldIsNull(FieldArchivedAt))
}

// ArchivedAtNotNil applies the NotNil predicate on the "archived_at" field.
func ArchivedAtNotNil() predicate.Packaging {
	return predicate.Packaging(sql.FieldNotNull(FieldArchivedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Packaging {
	return predicate.Packaging(sql.FieldContainsFold(FieldName, v))
}

// HeightCmEQ applies the EQ predicate on the "height_cm" field.
func HeightCmEQ(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldHeightCm, v))
}

// HeightCmNEQ applies the NEQ predicate on the "height_cm" field.
func HeightCmNEQ(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldHeightCm, v))
}

// HeightCmIn applies the In predicate on the "height_cm" field.
func HeightCmIn(vs ...int) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldHeightCm, vs...))
}

// HeightCmNotIn applies the NotIn predicate on the "height_cm" field.
func HeightCmNotIn(vs ...int) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldHeightCm, vs...))
}

// HeightCmGT applies the GT predicate on the "height_cm" field.
func HeightCmGT(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldHeightCm, v))
}

// HeightCmGTE applies the GTE predicate on the "height_cm" field.
func HeightCmGTE(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldHeightCm, v))
}

// HeightCmLT applies the LT predicate on the "height_cm" field.
func HeightCmLT(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldHeightCm, v))
}

// HeightCmLTE applies the LTE predicate on the "height_cm" field.
func HeightCmLTE(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldHeightCm, v))
}

// WidthCmEQ applies the EQ predicate on the "width_cm" field.
func WidthCmEQ(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldWidthCm, v))
}

// WidthCmNEQ applies the NEQ predicate on the "width_cm" field.
func WidthCmNEQ(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldWidthCm, v))
}

// WidthCmIn applies the In predicate on the "width_cm" field.
func WidthCmIn(vs ...int) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldWidthCm, vs...))
}

// WidthCmNotIn applies the NotIn predicate on the "width_cm" field.
func WidthCmNotIn(vs ...int) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldWidthCm, vs...))
}

// WidthCmGT applies the GT predicate on the "width_cm" field.
func WidthCmGT(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldWidthCm, v))
}

// WidthCmGTE applies the GTE predicate on the "width_cm" field.
func WidthCmGTE(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldWidthCm, v))
}

// WidthCmLT applies the LT predicate on the "width_cm" field.
func WidthCmLT(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldWidthCm, v))
}

// WidthCmLTE applies the LTE predicate on the "width_cm" field.
func WidthCmLTE(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldWidthCm, v))
}

// LengthCmEQ applies the EQ predicate on the "length_cm" field.
func LengthCmEQ(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldEQ(FieldLengthCm, v))
}

// LengthCmNEQ applies the NEQ predicate on the "length_cm" field.
func LengthCmNEQ(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldNEQ(FieldLengthCm, v))
}

// LengthCmIn applies the In predicate on the "length_cm" field.
func LengthCmIn(vs ...int) predicate.Packaging {
	return predicate.Packaging(sql.FieldIn(FieldLengthCm, vs...))
}

// LengthCmNotIn applies the NotIn predicate on the "length_cm" field.
func LengthCmNotIn(vs ...int) predicate.Packaging {
	return predicate.Packaging(sql.FieldNotIn(FieldLengthCm, vs...))
}

// LengthCmGT applies the GT predicate on the "length_cm" field.
func LengthCmGT(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldGT(FieldLengthCm, v))
}

// LengthCmGTE applies the GTE predicate on the "length_cm" field.
func LengthCmGTE(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldGTE(FieldLengthCm, v))
}

// LengthCmLT applies the LT predicate on the "length_cm" field.
func LengthCmLT(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldLT(FieldLengthCm, v))
}

// LengthCmLTE applies the LTE predicate on the "length_cm" field.
func LengthCmLTE(v int) predicate.Packaging {
	return predicate.Packaging(sql.FieldLTE(FieldLengthCm, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentParcel applies the HasEdge predicate on the "shipment_parcel" edge.
func HasShipmentParcel() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ShipmentParcelTable, ShipmentParcelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentParcelWith applies the HasEdge predicate on the "shipment_parcel" edge with a given conditions (other predicates).
func HasShipmentParcelWith(preds ...predicate.ShipmentParcel) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newShipmentParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPallet applies the HasEdge predicate on the "pallet" edge.
func HasPallet() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PalletTable, PalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPalletWith applies the HasEdge predicate on the "pallet" edge with a given conditions (other predicates).
func HasPalletWith(preds ...predicate.Pallet) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newPalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnColli applies the HasEdge predicate on the "return_colli" edge.
func HasReturnColli() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnColliTable, ReturnColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnColliWith applies the HasEdge predicate on the "return_colli" edge with a given conditions (other predicates).
func HasReturnColliWith(preds ...predicate.ReturnColli) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newReturnColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackagingDF applies the HasEdge predicate on the "packaging_df" edge.
func HasPackagingDF() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PackagingDFTable, PackagingDFColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingDFWith applies the HasEdge predicate on the "packaging_df" edge with a given conditions (other predicates).
func HasPackagingDFWith(preds ...predicate.PackagingDF) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newPackagingDFStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackagingUSPS applies the HasEdge predicate on the "packaging_usps" edge.
func HasPackagingUSPS() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PackagingUSPSTable, PackagingUSPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingUSPSWith applies the HasEdge predicate on the "packaging_usps" edge with a given conditions (other predicates).
func HasPackagingUSPSWith(preds ...predicate.PackagingUSPS) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newPackagingUSPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierBrand applies the HasEdge predicate on the "carrier_brand" edge.
func HasCarrierBrand() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierBrandTable, CarrierBrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierBrandWith applies the HasEdge predicate on the "carrier_brand" edge with a given conditions (other predicates).
func HasCarrierBrandWith(preds ...predicate.CarrierBrand) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newCarrierBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.Packaging {
	return predicate.Packaging(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Packaging) predicate.Packaging {
	return predicate.Packaging(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Packaging) predicate.Packaging {
	return predicate.Packaging(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Packaging) predicate.Packaging {
	return predicate.Packaging(sql.NotPredicates(p))
}
