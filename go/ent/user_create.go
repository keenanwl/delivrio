// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (uc *UserCreate) SetTenantID(pu pulid.ID) *UserCreate {
	uc.mutation.SetTenantID(pu)
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetSurname sets the "surname" field.
func (uc *UserCreate) SetSurname(s string) *UserCreate {
	uc.mutation.SetSurname(s)
	return uc
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (uc *UserCreate) SetNillableSurname(s *string) *UserCreate {
	if s != nil {
		uc.SetSurname(*s)
	}
	return uc
}

// SetPhoneNumber sets the "phone_number" field.
func (uc *UserCreate) SetPhoneNumber(s string) *UserCreate {
	uc.mutation.SetPhoneNumber(s)
	return uc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhoneNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetPhoneNumber(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassword(s *string) *UserCreate {
	if s != nil {
		uc.SetPassword(*s)
	}
	return uc
}

// SetHash sets the "hash" field.
func (uc *UserCreate) SetHash(s string) *UserCreate {
	uc.mutation.SetHash(s)
	return uc
}

// SetIsAccountOwner sets the "is_account_owner" field.
func (uc *UserCreate) SetIsAccountOwner(b bool) *UserCreate {
	uc.mutation.SetIsAccountOwner(b)
	return uc
}

// SetNillableIsAccountOwner sets the "is_account_owner" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsAccountOwner(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsAccountOwner(*b)
	}
	return uc
}

// SetIsGlobalAdmin sets the "is_global_admin" field.
func (uc *UserCreate) SetIsGlobalAdmin(b bool) *UserCreate {
	uc.mutation.SetIsGlobalAdmin(b)
	return uc
}

// SetNillableIsGlobalAdmin sets the "is_global_admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsGlobalAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsGlobalAdmin(*b)
	}
	return uc
}

// SetMarketingConsent sets the "marketing_consent" field.
func (uc *UserCreate) SetMarketingConsent(b bool) *UserCreate {
	uc.mutation.SetMarketingConsent(b)
	return uc
}

// SetNillableMarketingConsent sets the "marketing_consent" field if the given value is not nil.
func (uc *UserCreate) SetNillableMarketingConsent(b *bool) *UserCreate {
	if b != nil {
		uc.SetMarketingConsent(*b)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetArchivedAt sets the "archived_at" field.
func (uc *UserCreate) SetArchivedAt(t time.Time) *UserCreate {
	uc.mutation.SetArchivedAt(t)
	return uc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableArchivedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetArchivedAt(*t)
	}
	return uc
}

// SetPickupDay sets the "pickup_day" field.
func (uc *UserCreate) SetPickupDay(ud user.PickupDay) *UserCreate {
	uc.mutation.SetPickupDay(ud)
	return uc
}

// SetNillablePickupDay sets the "pickup_day" field if the given value is not nil.
func (uc *UserCreate) SetNillablePickupDay(ud *user.PickupDay) *UserCreate {
	if ud != nil {
		uc.SetPickupDay(*ud)
	}
	return uc
}

// SetPickupDayLastChanged sets the "pickup_day_last_changed" field.
func (uc *UserCreate) SetPickupDayLastChanged(t time.Time) *UserCreate {
	uc.mutation.SetPickupDayLastChanged(t)
	return uc
}

// SetNillablePickupDayLastChanged sets the "pickup_day_last_changed" field if the given value is not nil.
func (uc *UserCreate) SetNillablePickupDayLastChanged(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetPickupDayLastChanged(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(pu pulid.ID) *UserCreate {
	uc.mutation.SetID(pu)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(pu *pulid.ID) *UserCreate {
	if pu != nil {
		uc.SetID(*pu)
	}
	return uc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (uc *UserCreate) SetTenant(t *Tenant) *UserCreate {
	return uc.SetTenantID(t.ID)
}

// AddOtkRequestIDs adds the "otk_requests" edge to the OTKRequests entity by IDs.
func (uc *UserCreate) AddOtkRequestIDs(ids ...pulid.ID) *UserCreate {
	uc.mutation.AddOtkRequestIDs(ids...)
	return uc
}

// AddOtkRequests adds the "otk_requests" edges to the OTKRequests entity.
func (uc *UserCreate) AddOtkRequests(o ...*OTKRequests) *UserCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uc.AddOtkRequestIDs(ids...)
}

// SetSignupOptionsID sets the "signup_options" edge to the SignupOptions entity by ID.
func (uc *UserCreate) SetSignupOptionsID(id pulid.ID) *UserCreate {
	uc.mutation.SetSignupOptionsID(id)
	return uc
}

// SetNillableSignupOptionsID sets the "signup_options" edge to the SignupOptions entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableSignupOptionsID(id *pulid.ID) *UserCreate {
	if id != nil {
		uc = uc.SetSignupOptionsID(*id)
	}
	return uc
}

// SetSignupOptions sets the "signup_options" edge to the SignupOptions entity.
func (uc *UserCreate) SetSignupOptions(s *SignupOptions) *UserCreate {
	return uc.SetSignupOptionsID(s.ID)
}

// SetLanguageID sets the "language" edge to the Language entity by ID.
func (uc *UserCreate) SetLanguageID(id pulid.ID) *UserCreate {
	uc.mutation.SetLanguageID(id)
	return uc
}

// SetNillableLanguageID sets the "language" edge to the Language entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableLanguageID(id *pulid.ID) *UserCreate {
	if id != nil {
		uc = uc.SetLanguageID(*id)
	}
	return uc
}

// SetLanguage sets the "language" edge to the Language entity.
func (uc *UserCreate) SetLanguage(l *Language) *UserCreate {
	return uc.SetLanguageID(l.ID)
}

// AddChangeHistoryIDs adds the "change_history" edge to the ChangeHistory entity by IDs.
func (uc *UserCreate) AddChangeHistoryIDs(ids ...pulid.ID) *UserCreate {
	uc.mutation.AddChangeHistoryIDs(ids...)
	return uc
}

// AddChangeHistory adds the "change_history" edges to the ChangeHistory entity.
func (uc *UserCreate) AddChangeHistory(c ...*ChangeHistory) *UserCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddChangeHistoryIDs(ids...)
}

// AddPlanHistoryUserIDs adds the "plan_history_user" edge to the PlanHistory entity by IDs.
func (uc *UserCreate) AddPlanHistoryUserIDs(ids ...pulid.ID) *UserCreate {
	uc.mutation.AddPlanHistoryUserIDs(ids...)
	return uc
}

// AddPlanHistoryUser adds the "plan_history_user" edges to the PlanHistory entity.
func (uc *UserCreate) AddPlanHistoryUser(p ...*PlanHistory) *UserCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPlanHistoryUserIDs(ids...)
}

// AddAPITokenIDs adds the "api_token" edge to the APIToken entity by IDs.
func (uc *UserCreate) AddAPITokenIDs(ids ...pulid.ID) *UserCreate {
	uc.mutation.AddAPITokenIDs(ids...)
	return uc
}

// AddAPIToken adds the "api_token" edges to the APIToken entity.
func (uc *UserCreate) AddAPIToken(a ...*APIToken) *UserCreate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAPITokenIDs(ids...)
}

// SetSelectedWorkstationID sets the "selected_workstation" edge to the Workstation entity by ID.
func (uc *UserCreate) SetSelectedWorkstationID(id pulid.ID) *UserCreate {
	uc.mutation.SetSelectedWorkstationID(id)
	return uc
}

// SetNillableSelectedWorkstationID sets the "selected_workstation" edge to the Workstation entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableSelectedWorkstationID(id *pulid.ID) *UserCreate {
	if id != nil {
		uc = uc.SetSelectedWorkstationID(*id)
	}
	return uc
}

// SetSelectedWorkstation sets the "selected_workstation" edge to the Workstation entity.
func (uc *UserCreate) SetSelectedWorkstation(w *Workstation) *UserCreate {
	return uc.SetSelectedWorkstationID(w.ID)
}

// SetSeatGroupID sets the "seat_group" edge to the SeatGroup entity by ID.
func (uc *UserCreate) SetSeatGroupID(id pulid.ID) *UserCreate {
	uc.mutation.SetSeatGroupID(id)
	return uc
}

// SetNillableSeatGroupID sets the "seat_group" edge to the SeatGroup entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableSeatGroupID(id *pulid.ID) *UserCreate {
	if id != nil {
		uc = uc.SetSeatGroupID(*id)
	}
	return uc
}

// SetSeatGroup sets the "seat_group" edge to the SeatGroup entity.
func (uc *UserCreate) SetSeatGroup(s *SeatGroup) *UserCreate {
	return uc.SetSeatGroupID(s.ID)
}

// AddWorkspaceRecentScanIDs adds the "workspace_recent_scan" edge to the WorkspaceRecentScan entity by IDs.
func (uc *UserCreate) AddWorkspaceRecentScanIDs(ids ...pulid.ID) *UserCreate {
	uc.mutation.AddWorkspaceRecentScanIDs(ids...)
	return uc
}

// AddWorkspaceRecentScan adds the "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (uc *UserCreate) AddWorkspaceRecentScan(w ...*WorkspaceRecentScan) *UserCreate {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uc.AddWorkspaceRecentScanIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.IsAccountOwner(); !ok {
		v := user.DefaultIsAccountOwner
		uc.mutation.SetIsAccountOwner(v)
	}
	if _, ok := uc.mutation.IsGlobalAdmin(); !ok {
		v := user.DefaultIsGlobalAdmin
		uc.mutation.SetIsGlobalAdmin(v)
	}
	if _, ok := uc.mutation.MarketingConsent(); !ok {
		v := user.DefaultMarketingConsent
		uc.mutation.SetMarketingConsent(v)
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		if user.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.PickupDay(); !ok {
		v := user.DefaultPickupDay
		uc.mutation.SetPickupDay(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		if user.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultID (forgotten import ent/runtime?)")
		}
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "User.tenant_id"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "User.hash"`)}
	}
	if _, ok := uc.mutation.IsAccountOwner(); !ok {
		return &ValidationError{Name: "is_account_owner", err: errors.New(`ent: missing required field "User.is_account_owner"`)}
	}
	if _, ok := uc.mutation.IsGlobalAdmin(); !ok {
		return &ValidationError{Name: "is_global_admin", err: errors.New(`ent: missing required field "User.is_global_admin"`)}
	}
	if _, ok := uc.mutation.PickupDay(); !ok {
		return &ValidationError{Name: "pickup_day", err: errors.New(`ent: missing required field "User.pickup_day"`)}
	}
	if v, ok := uc.mutation.PickupDay(); ok {
		if err := user.PickupDayValidator(v); err != nil {
			return &ValidationError{Name: "pickup_day", err: fmt.Errorf(`ent: validator failed for field "User.pickup_day": %w`, err)}
		}
	}
	if len(uc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "User.tenant"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Surname(); ok {
		_spec.SetField(user.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := uc.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.Hash(); ok {
		_spec.SetField(user.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := uc.mutation.IsAccountOwner(); ok {
		_spec.SetField(user.FieldIsAccountOwner, field.TypeBool, value)
		_node.IsAccountOwner = value
	}
	if value, ok := uc.mutation.IsGlobalAdmin(); ok {
		_spec.SetField(user.FieldIsGlobalAdmin, field.TypeBool, value)
		_node.IsGlobalAdmin = value
	}
	if value, ok := uc.mutation.MarketingConsent(); ok {
		_spec.SetField(user.FieldMarketingConsent, field.TypeBool, value)
		_node.MarketingConsent = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.ArchivedAt(); ok {
		_spec.SetField(user.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = &value
	}
	if value, ok := uc.mutation.PickupDay(); ok {
		_spec.SetField(user.FieldPickupDay, field.TypeEnum, value)
		_node.PickupDay = value
	}
	if value, ok := uc.mutation.PickupDayLastChanged(); ok {
		_spec.SetField(user.FieldPickupDayLastChanged, field.TypeTime, value)
		_node.PickupDayLastChanged = value
	}
	if nodes := uc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.OtkRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(otkrequests.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SignupOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SignupOptionsTable,
			Columns: []string{user.SignupOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(signupoptions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.LanguageTable,
			Columns: []string{user.LanguageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(language.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_language = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PlanHistoryUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.APITokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SelectedWorkstationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SelectedWorkstationTable,
			Columns: []string{user.SelectedWorkstationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SeatGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.SeatGroupTable,
			Columns: []string{user.SeatGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seat_group_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WorkspaceRecentScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *UserUpsert) SetTenantID(v pulid.ID) *UserUpsert {
	u.Set(user.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateTenantID() *UserUpsert {
	u.SetExcluded(user.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *UserUpsert) ClearName() *UserUpsert {
	u.SetNull(user.FieldName)
	return u
}

// SetSurname sets the "surname" field.
func (u *UserUpsert) SetSurname(v string) *UserUpsert {
	u.Set(user.FieldSurname, v)
	return u
}

// UpdateSurname sets the "surname" field to the value that was provided on create.
func (u *UserUpsert) UpdateSurname() *UserUpsert {
	u.SetExcluded(user.FieldSurname)
	return u
}

// ClearSurname clears the value of the "surname" field.
func (u *UserUpsert) ClearSurname() *UserUpsert {
	u.SetNull(user.FieldSurname)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsert) SetPhoneNumber(v string) *UserUpsert {
	u.Set(user.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhoneNumber() *UserUpsert {
	u.SetExcluded(user.FieldPhoneNumber)
	return u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsert) ClearPhoneNumber() *UserUpsert {
	u.SetNull(user.FieldPhoneNumber)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsert) ClearPassword() *UserUpsert {
	u.SetNull(user.FieldPassword)
	return u
}

// SetHash sets the "hash" field.
func (u *UserUpsert) SetHash(v string) *UserUpsert {
	u.Set(user.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *UserUpsert) UpdateHash() *UserUpsert {
	u.SetExcluded(user.FieldHash)
	return u
}

// SetIsAccountOwner sets the "is_account_owner" field.
func (u *UserUpsert) SetIsAccountOwner(v bool) *UserUpsert {
	u.Set(user.FieldIsAccountOwner, v)
	return u
}

// UpdateIsAccountOwner sets the "is_account_owner" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsAccountOwner() *UserUpsert {
	u.SetExcluded(user.FieldIsAccountOwner)
	return u
}

// SetIsGlobalAdmin sets the "is_global_admin" field.
func (u *UserUpsert) SetIsGlobalAdmin(v bool) *UserUpsert {
	u.Set(user.FieldIsGlobalAdmin, v)
	return u
}

// UpdateIsGlobalAdmin sets the "is_global_admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateIsGlobalAdmin() *UserUpsert {
	u.SetExcluded(user.FieldIsGlobalAdmin)
	return u
}

// SetMarketingConsent sets the "marketing_consent" field.
func (u *UserUpsert) SetMarketingConsent(v bool) *UserUpsert {
	u.Set(user.FieldMarketingConsent, v)
	return u
}

// UpdateMarketingConsent sets the "marketing_consent" field to the value that was provided on create.
func (u *UserUpsert) UpdateMarketingConsent() *UserUpsert {
	u.SetExcluded(user.FieldMarketingConsent)
	return u
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (u *UserUpsert) ClearMarketingConsent() *UserUpsert {
	u.SetNull(user.FieldMarketingConsent)
	return u
}

// SetArchivedAt sets the "archived_at" field.
func (u *UserUpsert) SetArchivedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldArchivedAt, v)
	return u
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateArchivedAt() *UserUpsert {
	u.SetExcluded(user.FieldArchivedAt)
	return u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *UserUpsert) ClearArchivedAt() *UserUpsert {
	u.SetNull(user.FieldArchivedAt)
	return u
}

// SetPickupDay sets the "pickup_day" field.
func (u *UserUpsert) SetPickupDay(v user.PickupDay) *UserUpsert {
	u.Set(user.FieldPickupDay, v)
	return u
}

// UpdatePickupDay sets the "pickup_day" field to the value that was provided on create.
func (u *UserUpsert) UpdatePickupDay() *UserUpsert {
	u.SetExcluded(user.FieldPickupDay)
	return u
}

// SetPickupDayLastChanged sets the "pickup_day_last_changed" field.
func (u *UserUpsert) SetPickupDayLastChanged(v time.Time) *UserUpsert {
	u.Set(user.FieldPickupDayLastChanged, v)
	return u
}

// UpdatePickupDayLastChanged sets the "pickup_day_last_changed" field to the value that was provided on create.
func (u *UserUpsert) UpdatePickupDayLastChanged() *UserUpsert {
	u.SetExcluded(user.FieldPickupDayLastChanged)
	return u
}

// ClearPickupDayLastChanged clears the value of the "pickup_day_last_changed" field.
func (u *UserUpsert) ClearPickupDayLastChanged() *UserUpsert {
	u.SetNull(user.FieldPickupDayLastChanged)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UserUpsertOne) SetTenantID(v pulid.ID) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateTenantID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserUpsertOne) ClearName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearName()
	})
}

// SetSurname sets the "surname" field.
func (u *UserUpsertOne) SetSurname(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSurname(v)
	})
}

// UpdateSurname sets the "surname" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSurname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSurname()
	})
}

// ClearSurname clears the value of the "surname" field.
func (u *UserUpsertOne) ClearSurname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSurname()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertOne) SetPhoneNumber(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertOne) ClearPhoneNumber() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsertOne) ClearPassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPassword()
	})
}

// SetHash sets the "hash" field.
func (u *UserUpsertOne) SetHash(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHash()
	})
}

// SetIsAccountOwner sets the "is_account_owner" field.
func (u *UserUpsertOne) SetIsAccountOwner(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsAccountOwner(v)
	})
}

// UpdateIsAccountOwner sets the "is_account_owner" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsAccountOwner() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsAccountOwner()
	})
}

// SetIsGlobalAdmin sets the "is_global_admin" field.
func (u *UserUpsertOne) SetIsGlobalAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIsGlobalAdmin(v)
	})
}

// UpdateIsGlobalAdmin sets the "is_global_admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIsGlobalAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsGlobalAdmin()
	})
}

// SetMarketingConsent sets the "marketing_consent" field.
func (u *UserUpsertOne) SetMarketingConsent(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMarketingConsent(v)
	})
}

// UpdateMarketingConsent sets the "marketing_consent" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMarketingConsent() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMarketingConsent()
	})
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (u *UserUpsertOne) ClearMarketingConsent() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMarketingConsent()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *UserUpsertOne) SetArchivedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateArchivedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *UserUpsertOne) ClearArchivedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearArchivedAt()
	})
}

// SetPickupDay sets the "pickup_day" field.
func (u *UserUpsertOne) SetPickupDay(v user.PickupDay) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPickupDay(v)
	})
}

// UpdatePickupDay sets the "pickup_day" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePickupDay() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePickupDay()
	})
}

// SetPickupDayLastChanged sets the "pickup_day_last_changed" field.
func (u *UserUpsertOne) SetPickupDayLastChanged(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPickupDayLastChanged(v)
	})
}

// UpdatePickupDayLastChanged sets the "pickup_day_last_changed" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePickupDayLastChanged() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePickupDayLastChanged()
	})
}

// ClearPickupDayLastChanged clears the value of the "pickup_day_last_changed" field.
func (u *UserUpsertOne) ClearPickupDayLastChanged() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPickupDayLastChanged()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *UserUpsertBulk) SetTenantID(v pulid.ID) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateTenantID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *UserUpsertBulk) ClearName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearName()
	})
}

// SetSurname sets the "surname" field.
func (u *UserUpsertBulk) SetSurname(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSurname(v)
	})
}

// UpdateSurname sets the "surname" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSurname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSurname()
	})
}

// ClearSurname clears the value of the "surname" field.
func (u *UserUpsertBulk) ClearSurname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSurname()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *UserUpsertBulk) SetPhoneNumber(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhoneNumber()
	})
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (u *UserUpsertBulk) ClearPhoneNumber() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhoneNumber()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *UserUpsertBulk) ClearPassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPassword()
	})
}

// SetHash sets the "hash" field.
func (u *UserUpsertBulk) SetHash(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateHash()
	})
}

// SetIsAccountOwner sets the "is_account_owner" field.
func (u *UserUpsertBulk) SetIsAccountOwner(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsAccountOwner(v)
	})
}

// UpdateIsAccountOwner sets the "is_account_owner" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsAccountOwner() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsAccountOwner()
	})
}

// SetIsGlobalAdmin sets the "is_global_admin" field.
func (u *UserUpsertBulk) SetIsGlobalAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIsGlobalAdmin(v)
	})
}

// UpdateIsGlobalAdmin sets the "is_global_admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIsGlobalAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIsGlobalAdmin()
	})
}

// SetMarketingConsent sets the "marketing_consent" field.
func (u *UserUpsertBulk) SetMarketingConsent(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMarketingConsent(v)
	})
}

// UpdateMarketingConsent sets the "marketing_consent" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMarketingConsent() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMarketingConsent()
	})
}

// ClearMarketingConsent clears the value of the "marketing_consent" field.
func (u *UserUpsertBulk) ClearMarketingConsent() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMarketingConsent()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *UserUpsertBulk) SetArchivedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateArchivedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *UserUpsertBulk) ClearArchivedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearArchivedAt()
	})
}

// SetPickupDay sets the "pickup_day" field.
func (u *UserUpsertBulk) SetPickupDay(v user.PickupDay) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPickupDay(v)
	})
}

// UpdatePickupDay sets the "pickup_day" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePickupDay() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePickupDay()
	})
}

// SetPickupDayLastChanged sets the "pickup_day_last_changed" field.
func (u *UserUpsertBulk) SetPickupDayLastChanged(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPickupDayLastChanged(v)
	})
}

// UpdatePickupDayLastChanged sets the "pickup_day_last_changed" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePickupDayLastChanged() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePickupDayLastChanged()
	})
}

// ClearPickupDayLastChanged clears the value of the "pickup_day_last_changed" field.
func (u *UserUpsertBulk) ClearPickupDayLastChanged() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPickupDayLastChanged()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
