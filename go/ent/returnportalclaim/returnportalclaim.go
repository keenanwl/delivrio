// Code generated by ent, DO NOT EDIT.

package returnportalclaim

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the returnportalclaim type in the database.
	Label = "return_portal_claim"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRestockable holds the string denoting the restockable field in the database.
	FieldRestockable = "restockable"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeReturnPortal holds the string denoting the return_portal edge name in mutations.
	EdgeReturnPortal = "return_portal"
	// EdgeReturnLocation holds the string denoting the return_location edge name in mutations.
	EdgeReturnLocation = "return_location"
	// EdgeReturnOrderLine holds the string denoting the return_order_line edge name in mutations.
	EdgeReturnOrderLine = "return_order_line"
	// Table holds the table name of the returnportalclaim in the database.
	Table = "return_portal_claims"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "return_portal_claims"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ReturnPortalTable is the table that holds the return_portal relation/edge.
	ReturnPortalTable = "return_portal_claims"
	// ReturnPortalInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalInverseTable = "return_portals"
	// ReturnPortalColumn is the table column denoting the return_portal relation/edge.
	ReturnPortalColumn = "return_portal_return_portal_claim"
	// ReturnLocationTable is the table that holds the return_location relation/edge.
	ReturnLocationTable = "return_portal_claims"
	// ReturnLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	ReturnLocationInverseTable = "locations"
	// ReturnLocationColumn is the table column denoting the return_location relation/edge.
	ReturnLocationColumn = "return_portal_claim_return_location"
	// ReturnOrderLineTable is the table that holds the return_order_line relation/edge.
	ReturnOrderLineTable = "return_order_lines"
	// ReturnOrderLineInverseTable is the table name for the ReturnOrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "returnorderline" package.
	ReturnOrderLineInverseTable = "return_order_lines"
	// ReturnOrderLineColumn is the table column denoting the return_order_line relation/edge.
	ReturnOrderLineColumn = "return_order_line_return_portal_claim"
)

// Columns holds all SQL columns for returnportalclaim fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldDescription,
	FieldRestockable,
	FieldArchived,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "return_portal_claims"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"return_portal_return_portal_claim",
	"return_portal_claim_return_location",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the ReturnPortalClaim queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRestockable orders the results by the restockable field.
func ByRestockable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRestockable, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnPortalField orders the results by return_portal field.
func ByReturnPortalField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnLocationField orders the results by return_location field.
func ByReturnLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnOrderLineCount orders the results by return_order_line count.
func ByReturnOrderLineCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnOrderLineStep(), opts...)
	}
}

// ByReturnOrderLine orders the results by return_order_line terms.
func ByReturnOrderLine(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnOrderLineStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newReturnPortalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReturnPortalTable, ReturnPortalColumn),
	)
}
func newReturnLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ReturnLocationTable, ReturnLocationColumn),
	)
}
func newReturnOrderLineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnOrderLineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnOrderLineTable, ReturnOrderLineColumn),
	)
}
