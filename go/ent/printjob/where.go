// Code generated by ent, DO NOT EDIT.

package printjob

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldTenantID, v))
}

// Base64PrintData applies equality check predicate on the "base64_print_data" field. It's identical to Base64PrintDataEQ.
func Base64PrintData(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldBase64PrintData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldCreatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.PrintJob {
	vc := string(v)
	return predicate.PrintJob(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.PrintJob {
	vc := string(v)
	return predicate.PrintJob(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.PrintJob {
	vc := string(v)
	return predicate.PrintJob(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.PrintJob {
	vc := string(v)
	return predicate.PrintJob(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.PrintJob {
	vc := string(v)
	return predicate.PrintJob(sql.FieldContainsFold(FieldTenantID, vc))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldStatus, vs...))
}

// FileExtensionEQ applies the EQ predicate on the "file_extension" field.
func FileExtensionEQ(v FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldFileExtension, v))
}

// FileExtensionNEQ applies the NEQ predicate on the "file_extension" field.
func FileExtensionNEQ(v FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldFileExtension, v))
}

// FileExtensionIn applies the In predicate on the "file_extension" field.
func FileExtensionIn(vs ...FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldFileExtension, vs...))
}

// FileExtensionNotIn applies the NotIn predicate on the "file_extension" field.
func FileExtensionNotIn(vs ...FileExtension) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldFileExtension, vs...))
}

// DocumentTypeEQ applies the EQ predicate on the "document_type" field.
func DocumentTypeEQ(v DocumentType) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldDocumentType, v))
}

// DocumentTypeNEQ applies the NEQ predicate on the "document_type" field.
func DocumentTypeNEQ(v DocumentType) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldDocumentType, v))
}

// DocumentTypeIn applies the In predicate on the "document_type" field.
func DocumentTypeIn(vs ...DocumentType) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldDocumentType, vs...))
}

// DocumentTypeNotIn applies the NotIn predicate on the "document_type" field.
func DocumentTypeNotIn(vs ...DocumentType) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldDocumentType, vs...))
}

// PrinterMessagesIsNil applies the IsNil predicate on the "printer_messages" field.
func PrinterMessagesIsNil() predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIsNull(FieldPrinterMessages))
}

// PrinterMessagesNotNil applies the NotNil predicate on the "printer_messages" field.
func PrinterMessagesNotNil() predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotNull(FieldPrinterMessages))
}

// Base64PrintDataEQ applies the EQ predicate on the "base64_print_data" field.
func Base64PrintDataEQ(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldBase64PrintData, v))
}

// Base64PrintDataNEQ applies the NEQ predicate on the "base64_print_data" field.
func Base64PrintDataNEQ(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldBase64PrintData, v))
}

// Base64PrintDataIn applies the In predicate on the "base64_print_data" field.
func Base64PrintDataIn(vs ...string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldBase64PrintData, vs...))
}

// Base64PrintDataNotIn applies the NotIn predicate on the "base64_print_data" field.
func Base64PrintDataNotIn(vs ...string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldBase64PrintData, vs...))
}

// Base64PrintDataGT applies the GT predicate on the "base64_print_data" field.
func Base64PrintDataGT(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldBase64PrintData, v))
}

// Base64PrintDataGTE applies the GTE predicate on the "base64_print_data" field.
func Base64PrintDataGTE(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldBase64PrintData, v))
}

// Base64PrintDataLT applies the LT predicate on the "base64_print_data" field.
func Base64PrintDataLT(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldBase64PrintData, v))
}

// Base64PrintDataLTE applies the LTE predicate on the "base64_print_data" field.
func Base64PrintDataLTE(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldBase64PrintData, v))
}

// Base64PrintDataContains applies the Contains predicate on the "base64_print_data" field.
func Base64PrintDataContains(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldContains(FieldBase64PrintData, v))
}

// Base64PrintDataHasPrefix applies the HasPrefix predicate on the "base64_print_data" field.
func Base64PrintDataHasPrefix(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldHasPrefix(FieldBase64PrintData, v))
}

// Base64PrintDataHasSuffix applies the HasSuffix predicate on the "base64_print_data" field.
func Base64PrintDataHasSuffix(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldHasSuffix(FieldBase64PrintData, v))
}

// Base64PrintDataEqualFold applies the EqualFold predicate on the "base64_print_data" field.
func Base64PrintDataEqualFold(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEqualFold(FieldBase64PrintData, v))
}

// Base64PrintDataContainsFold applies the ContainsFold predicate on the "base64_print_data" field.
func Base64PrintDataContainsFold(v string) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldContainsFold(FieldBase64PrintData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PrintJob {
	return predicate.PrintJob(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrinter applies the HasEdge predicate on the "printer" edge.
func HasPrinter() predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PrinterTable, PrinterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrinterWith applies the HasEdge predicate on the "printer" edge with a given conditions (other predicates).
func HasPrinterWith(preds ...predicate.Printer) predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := newPrinterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasColli applies the HasEdge predicate on the "colli" edge.
func HasColli() predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ColliTable, ColliColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasColliWith applies the HasEdge predicate on the "colli" edge with a given conditions (other predicates).
func HasColliWith(preds ...predicate.Colli) predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := newColliStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentParcel applies the HasEdge predicate on the "shipment_parcel" edge.
func HasShipmentParcel() predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ShipmentParcelTable, ShipmentParcelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentParcelWith applies the HasEdge predicate on the "shipment_parcel" edge with a given conditions (other predicates).
func HasShipmentParcelWith(preds ...predicate.ShipmentParcel) predicate.PrintJob {
	return predicate.PrintJob(func(s *sql.Selector) {
		step := newShipmentParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PrintJob) predicate.PrintJob {
	return predicate.PrintJob(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PrintJob) predicate.PrintJob {
	return predicate.PrintJob(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PrintJob) predicate.PrintJob {
	return predicate.PrintJob(sql.NotPredicates(p))
}
