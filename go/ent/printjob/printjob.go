// Code generated by ent, DO NOT EDIT.

package printjob

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the printjob type in the database.
	Label = "print_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldFileExtension holds the string denoting the file_extension field in the database.
	FieldFileExtension = "file_extension"
	// FieldDocumentType holds the string denoting the document_type field in the database.
	FieldDocumentType = "document_type"
	// FieldPrinterMessages holds the string denoting the printer_messages field in the database.
	FieldPrinterMessages = "printer_messages"
	// FieldBase64PrintData holds the string denoting the base64_print_data field in the database.
	FieldBase64PrintData = "base64_print_data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgePrinter holds the string denoting the printer edge name in mutations.
	EdgePrinter = "printer"
	// EdgeColli holds the string denoting the colli edge name in mutations.
	EdgeColli = "colli"
	// EdgeShipmentParcel holds the string denoting the shipment_parcel edge name in mutations.
	EdgeShipmentParcel = "shipment_parcel"
	// Table holds the table name of the printjob in the database.
	Table = "print_jobs"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "print_jobs"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// PrinterTable is the table that holds the printer relation/edge.
	PrinterTable = "print_jobs"
	// PrinterInverseTable is the table name for the Printer entity.
	// It exists in this package in order to avoid circular dependency with the "printer" package.
	PrinterInverseTable = "printers"
	// PrinterColumn is the table column denoting the printer relation/edge.
	PrinterColumn = "print_job_printer"
	// ColliTable is the table that holds the colli relation/edge.
	ColliTable = "print_jobs"
	// ColliInverseTable is the table name for the Colli entity.
	// It exists in this package in order to avoid circular dependency with the "colli" package.
	ColliInverseTable = "collis"
	// ColliColumn is the table column denoting the colli relation/edge.
	ColliColumn = "print_job_colli"
	// ShipmentParcelTable is the table that holds the shipment_parcel relation/edge.
	ShipmentParcelTable = "print_jobs"
	// ShipmentParcelInverseTable is the table name for the ShipmentParcel entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentparcel" package.
	ShipmentParcelInverseTable = "shipment_parcels"
	// ShipmentParcelColumn is the table column denoting the shipment_parcel relation/edge.
	ShipmentParcelColumn = "print_job_shipment_parcel"
)

// Columns holds all SQL columns for printjob fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldStatus,
	FieldFileExtension,
	FieldDocumentType,
	FieldPrinterMessages,
	FieldBase64PrintData,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "print_jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"print_job_printer",
	"print_job_colli",
	"print_job_shipment_parcel",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending   Status = "pending"
	StatusAtPrinter Status = "at_printer"
	StatusSuccess   Status = "success"
	StatusCanceled  Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusAtPrinter, StatusSuccess, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("printjob: invalid enum value for status field: %q", s)
	}
}

// FileExtension defines the type for the "file_extension" enum field.
type FileExtension string

// FileExtension values.
const (
	FileExtensionPdf FileExtension = "pdf"
	FileExtensionZpl FileExtension = "zpl"
	FileExtensionTxt FileExtension = "txt"
	FileExtensionPng FileExtension = "png"
)

func (fe FileExtension) String() string {
	return string(fe)
}

// FileExtensionValidator is a validator for the "file_extension" field enum values. It is called by the builders before save.
func FileExtensionValidator(fe FileExtension) error {
	switch fe {
	case FileExtensionPdf, FileExtensionZpl, FileExtensionTxt, FileExtensionPng:
		return nil
	default:
		return fmt.Errorf("printjob: invalid enum value for file_extension field: %q", fe)
	}
}

// DocumentType defines the type for the "document_type" enum field.
type DocumentType string

// DocumentType values.
const (
	DocumentTypeParcelLabel DocumentType = "parcel_label"
	DocumentTypeUnknown     DocumentType = "unknown"
	DocumentTypePackingList DocumentType = "packing_list"
)

func (dt DocumentType) String() string {
	return string(dt)
}

// DocumentTypeValidator is a validator for the "document_type" field enum values. It is called by the builders before save.
func DocumentTypeValidator(dt DocumentType) error {
	switch dt {
	case DocumentTypeParcelLabel, DocumentTypeUnknown, DocumentTypePackingList:
		return nil
	default:
		return fmt.Errorf("printjob: invalid enum value for document_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the PrintJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFileExtension orders the results by the file_extension field.
func ByFileExtension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExtension, opts...).ToFunc()
}

// ByDocumentType orders the results by the document_type field.
func ByDocumentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentType, opts...).ToFunc()
}

// ByBase64PrintData orders the results by the base64_print_data field.
func ByBase64PrintData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBase64PrintData, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrinterField orders the results by printer field.
func ByPrinterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrinterStep(), sql.OrderByField(field, opts...))
	}
}

// ByColliField orders the results by colli field.
func ByColliField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newColliStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentParcelField orders the results by shipment_parcel field.
func ByShipmentParcelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentParcelStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newPrinterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrinterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PrinterTable, PrinterColumn),
	)
}
func newColliStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ColliInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ColliTable, ColliColumn),
	)
}
func newShipmentParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ShipmentParcelTable, ShipmentParcelColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e FileExtension) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *FileExtension) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = FileExtension(str)
	if err := FileExtensionValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid FileExtension", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DocumentType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DocumentType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DocumentType(str)
	if err := DocumentTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DocumentType", str)
	}
	return nil
}
