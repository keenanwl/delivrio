// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierServiceDF is the model entity for the CarrierServiceDF schema.
type CarrierServiceDF struct {
	config
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierServiceDFQuery when eager-loading is set.
	Edges                              CarrierServiceDFEdges `json:"edges"`
	carrier_service_carrier_service_df *pulid.ID
	selectValues                       sql.SelectValues
}

// CarrierServiceDFEdges holds the relations/edges for other nodes in the graph.
type CarrierServiceDFEdges struct {
	// CarrierService holds the value of the carrier_service edge.
	CarrierService *CarrierService `json:"carrier_service,omitempty"`
	// CarrierAdditionalServiceDF holds the value of the carrier_additional_service_df edge.
	CarrierAdditionalServiceDF []*CarrierAdditionalServiceDF `json:"carrier_additional_service_df,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierAdditionalServiceDF map[string][]*CarrierAdditionalServiceDF
}

// CarrierServiceOrErr returns the CarrierService value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierServiceDFEdges) CarrierServiceOrErr() (*CarrierService, error) {
	if e.CarrierService != nil {
		return e.CarrierService, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: carrierservice.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_service"}
}

// CarrierAdditionalServiceDFOrErr returns the CarrierAdditionalServiceDF value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierServiceDFEdges) CarrierAdditionalServiceDFOrErr() ([]*CarrierAdditionalServiceDF, error) {
	if e.loadedTypes[1] {
		return e.CarrierAdditionalServiceDF, nil
	}
	return nil, &NotLoadedError{edge: "carrier_additional_service_df"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierServiceDF) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrierservicedf.FieldID:
			values[i] = new(pulid.ID)
		case carrierservicedf.ForeignKeys[0]: // carrier_service_carrier_service_df
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierServiceDF fields.
func (csd *CarrierServiceDF) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrierservicedf.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				csd.ID = *value
			}
		case carrierservicedf.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_service_carrier_service_df", values[i])
			} else if value.Valid {
				csd.carrier_service_carrier_service_df = new(pulid.ID)
				*csd.carrier_service_carrier_service_df = *value.S.(*pulid.ID)
			}
		default:
			csd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierServiceDF.
// This includes values selected through modifiers, order, etc.
func (csd *CarrierServiceDF) Value(name string) (ent.Value, error) {
	return csd.selectValues.Get(name)
}

// QueryCarrierService queries the "carrier_service" edge of the CarrierServiceDF entity.
func (csd *CarrierServiceDF) QueryCarrierService() *CarrierServiceQuery {
	return NewCarrierServiceDFClient(csd.config).QueryCarrierService(csd)
}

// QueryCarrierAdditionalServiceDF queries the "carrier_additional_service_df" edge of the CarrierServiceDF entity.
func (csd *CarrierServiceDF) QueryCarrierAdditionalServiceDF() *CarrierAdditionalServiceDFQuery {
	return NewCarrierServiceDFClient(csd.config).QueryCarrierAdditionalServiceDF(csd)
}

// Update returns a builder for updating this CarrierServiceDF.
// Note that you need to call CarrierServiceDF.Unwrap() before calling this method if this CarrierServiceDF
// was returned from a transaction, and the transaction was committed or rolled back.
func (csd *CarrierServiceDF) Update() *CarrierServiceDFUpdateOne {
	return NewCarrierServiceDFClient(csd.config).UpdateOne(csd)
}

// Unwrap unwraps the CarrierServiceDF entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csd *CarrierServiceDF) Unwrap() *CarrierServiceDF {
	_tx, ok := csd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierServiceDF is not a transactional entity")
	}
	csd.config.driver = _tx.drv
	return csd
}

// String implements the fmt.Stringer.
func (csd *CarrierServiceDF) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierServiceDF(")
	builder.WriteString(fmt.Sprintf("id=%v", csd.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierAdditionalServiceDF returns the CarrierAdditionalServiceDF named value or an error if the edge was not
// loaded in eager-loading with this name.
func (csd *CarrierServiceDF) NamedCarrierAdditionalServiceDF(name string) ([]*CarrierAdditionalServiceDF, error) {
	if csd.Edges.namedCarrierAdditionalServiceDF == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := csd.Edges.namedCarrierAdditionalServiceDF[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (csd *CarrierServiceDF) appendNamedCarrierAdditionalServiceDF(name string, edges ...*CarrierAdditionalServiceDF) {
	if csd.Edges.namedCarrierAdditionalServiceDF == nil {
		csd.Edges.namedCarrierAdditionalServiceDF = make(map[string][]*CarrierAdditionalServiceDF)
	}
	if len(edges) == 0 {
		csd.Edges.namedCarrierAdditionalServiceDF[name] = []*CarrierAdditionalServiceDF{}
	} else {
		csd.Edges.namedCarrierAdditionalServiceDF[name] = append(csd.Edges.namedCarrierAdditionalServiceDF[name], edges...)
	}
}

// CarrierServiceDFs is a parsable slice of CarrierServiceDF.
type CarrierServiceDFs []*CarrierServiceDF
