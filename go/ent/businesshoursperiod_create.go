// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessHoursPeriodCreate is the builder for creating a BusinessHoursPeriod entity.
type BusinessHoursPeriodCreate struct {
	config
	mutation *BusinessHoursPeriodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDayOfWeek sets the "day_of_week" field.
func (bhpc *BusinessHoursPeriodCreate) SetDayOfWeek(bow businesshoursperiod.DayOfWeek) *BusinessHoursPeriodCreate {
	bhpc.mutation.SetDayOfWeek(bow)
	return bhpc
}

// SetOpening sets the "opening" field.
func (bhpc *BusinessHoursPeriodCreate) SetOpening(t time.Time) *BusinessHoursPeriodCreate {
	bhpc.mutation.SetOpening(t)
	return bhpc
}

// SetClosing sets the "closing" field.
func (bhpc *BusinessHoursPeriodCreate) SetClosing(t time.Time) *BusinessHoursPeriodCreate {
	bhpc.mutation.SetClosing(t)
	return bhpc
}

// SetID sets the "id" field.
func (bhpc *BusinessHoursPeriodCreate) SetID(pu pulid.ID) *BusinessHoursPeriodCreate {
	bhpc.mutation.SetID(pu)
	return bhpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bhpc *BusinessHoursPeriodCreate) SetNillableID(pu *pulid.ID) *BusinessHoursPeriodCreate {
	if pu != nil {
		bhpc.SetID(*pu)
	}
	return bhpc
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (bhpc *BusinessHoursPeriodCreate) SetParcelShopID(id pulid.ID) *BusinessHoursPeriodCreate {
	bhpc.mutation.SetParcelShopID(id)
	return bhpc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (bhpc *BusinessHoursPeriodCreate) SetParcelShop(p *ParcelShop) *BusinessHoursPeriodCreate {
	return bhpc.SetParcelShopID(p.ID)
}

// Mutation returns the BusinessHoursPeriodMutation object of the builder.
func (bhpc *BusinessHoursPeriodCreate) Mutation() *BusinessHoursPeriodMutation {
	return bhpc.mutation
}

// Save creates the BusinessHoursPeriod in the database.
func (bhpc *BusinessHoursPeriodCreate) Save(ctx context.Context) (*BusinessHoursPeriod, error) {
	if err := bhpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bhpc.sqlSave, bhpc.mutation, bhpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bhpc *BusinessHoursPeriodCreate) SaveX(ctx context.Context) *BusinessHoursPeriod {
	v, err := bhpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhpc *BusinessHoursPeriodCreate) Exec(ctx context.Context) error {
	_, err := bhpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhpc *BusinessHoursPeriodCreate) ExecX(ctx context.Context) {
	if err := bhpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bhpc *BusinessHoursPeriodCreate) defaults() error {
	if _, ok := bhpc.mutation.ID(); !ok {
		if businesshoursperiod.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized businesshoursperiod.DefaultID (forgotten import ent/runtime?)")
		}
		v := businesshoursperiod.DefaultID()
		bhpc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bhpc *BusinessHoursPeriodCreate) check() error {
	if _, ok := bhpc.mutation.DayOfWeek(); !ok {
		return &ValidationError{Name: "day_of_week", err: errors.New(`ent: missing required field "BusinessHoursPeriod.day_of_week"`)}
	}
	if v, ok := bhpc.mutation.DayOfWeek(); ok {
		if err := businesshoursperiod.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "BusinessHoursPeriod.day_of_week": %w`, err)}
		}
	}
	if _, ok := bhpc.mutation.Opening(); !ok {
		return &ValidationError{Name: "opening", err: errors.New(`ent: missing required field "BusinessHoursPeriod.opening"`)}
	}
	if _, ok := bhpc.mutation.Closing(); !ok {
		return &ValidationError{Name: "closing", err: errors.New(`ent: missing required field "BusinessHoursPeriod.closing"`)}
	}
	if len(bhpc.mutation.ParcelShopIDs()) == 0 {
		return &ValidationError{Name: "parcel_shop", err: errors.New(`ent: missing required edge "BusinessHoursPeriod.parcel_shop"`)}
	}
	return nil
}

func (bhpc *BusinessHoursPeriodCreate) sqlSave(ctx context.Context) (*BusinessHoursPeriod, error) {
	if err := bhpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bhpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bhpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bhpc.mutation.id = &_node.ID
	bhpc.mutation.done = true
	return _node, nil
}

func (bhpc *BusinessHoursPeriodCreate) createSpec() (*BusinessHoursPeriod, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessHoursPeriod{config: bhpc.config}
		_spec = sqlgraph.NewCreateSpec(businesshoursperiod.Table, sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString))
	)
	_spec.OnConflict = bhpc.conflict
	if id, ok := bhpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bhpc.mutation.DayOfWeek(); ok {
		_spec.SetField(businesshoursperiod.FieldDayOfWeek, field.TypeEnum, value)
		_node.DayOfWeek = value
	}
	if value, ok := bhpc.mutation.Opening(); ok {
		_spec.SetField(businesshoursperiod.FieldOpening, field.TypeTime, value)
		_node.Opening = value
	}
	if value, ok := bhpc.mutation.Closing(); ok {
		_spec.SetField(businesshoursperiod.FieldClosing, field.TypeTime, value)
		_node.Closing = value
	}
	if nodes := bhpc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businesshoursperiod.ParcelShopTable,
			Columns: []string{businesshoursperiod.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_business_hours_period = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BusinessHoursPeriod.Create().
//		SetDayOfWeek(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessHoursPeriodUpsert) {
//			SetDayOfWeek(v+v).
//		}).
//		Exec(ctx)
func (bhpc *BusinessHoursPeriodCreate) OnConflict(opts ...sql.ConflictOption) *BusinessHoursPeriodUpsertOne {
	bhpc.conflict = opts
	return &BusinessHoursPeriodUpsertOne{
		create: bhpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BusinessHoursPeriod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bhpc *BusinessHoursPeriodCreate) OnConflictColumns(columns ...string) *BusinessHoursPeriodUpsertOne {
	bhpc.conflict = append(bhpc.conflict, sql.ConflictColumns(columns...))
	return &BusinessHoursPeriodUpsertOne{
		create: bhpc,
	}
}

type (
	// BusinessHoursPeriodUpsertOne is the builder for "upsert"-ing
	//  one BusinessHoursPeriod node.
	BusinessHoursPeriodUpsertOne struct {
		create *BusinessHoursPeriodCreate
	}

	// BusinessHoursPeriodUpsert is the "OnConflict" setter.
	BusinessHoursPeriodUpsert struct {
		*sql.UpdateSet
	}
)

// SetDayOfWeek sets the "day_of_week" field.
func (u *BusinessHoursPeriodUpsert) SetDayOfWeek(v businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpsert {
	u.Set(businesshoursperiod.FieldDayOfWeek, v)
	return u
}

// UpdateDayOfWeek sets the "day_of_week" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsert) UpdateDayOfWeek() *BusinessHoursPeriodUpsert {
	u.SetExcluded(businesshoursperiod.FieldDayOfWeek)
	return u
}

// SetOpening sets the "opening" field.
func (u *BusinessHoursPeriodUpsert) SetOpening(v time.Time) *BusinessHoursPeriodUpsert {
	u.Set(businesshoursperiod.FieldOpening, v)
	return u
}

// UpdateOpening sets the "opening" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsert) UpdateOpening() *BusinessHoursPeriodUpsert {
	u.SetExcluded(businesshoursperiod.FieldOpening)
	return u
}

// SetClosing sets the "closing" field.
func (u *BusinessHoursPeriodUpsert) SetClosing(v time.Time) *BusinessHoursPeriodUpsert {
	u.Set(businesshoursperiod.FieldClosing, v)
	return u
}

// UpdateClosing sets the "closing" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsert) UpdateClosing() *BusinessHoursPeriodUpsert {
	u.SetExcluded(businesshoursperiod.FieldClosing)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BusinessHoursPeriod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(businesshoursperiod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BusinessHoursPeriodUpsertOne) UpdateNewValues() *BusinessHoursPeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(businesshoursperiod.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BusinessHoursPeriod.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BusinessHoursPeriodUpsertOne) Ignore() *BusinessHoursPeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessHoursPeriodUpsertOne) DoNothing() *BusinessHoursPeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessHoursPeriodCreate.OnConflict
// documentation for more info.
func (u *BusinessHoursPeriodUpsertOne) Update(set func(*BusinessHoursPeriodUpsert)) *BusinessHoursPeriodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessHoursPeriodUpsert{UpdateSet: update})
	}))
	return u
}

// SetDayOfWeek sets the "day_of_week" field.
func (u *BusinessHoursPeriodUpsertOne) SetDayOfWeek(v businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpsertOne {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.SetDayOfWeek(v)
	})
}

// UpdateDayOfWeek sets the "day_of_week" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsertOne) UpdateDayOfWeek() *BusinessHoursPeriodUpsertOne {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.UpdateDayOfWeek()
	})
}

// SetOpening sets the "opening" field.
func (u *BusinessHoursPeriodUpsertOne) SetOpening(v time.Time) *BusinessHoursPeriodUpsertOne {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.SetOpening(v)
	})
}

// UpdateOpening sets the "opening" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsertOne) UpdateOpening() *BusinessHoursPeriodUpsertOne {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.UpdateOpening()
	})
}

// SetClosing sets the "closing" field.
func (u *BusinessHoursPeriodUpsertOne) SetClosing(v time.Time) *BusinessHoursPeriodUpsertOne {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.SetClosing(v)
	})
}

// UpdateClosing sets the "closing" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsertOne) UpdateClosing() *BusinessHoursPeriodUpsertOne {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.UpdateClosing()
	})
}

// Exec executes the query.
func (u *BusinessHoursPeriodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessHoursPeriodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessHoursPeriodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BusinessHoursPeriodUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BusinessHoursPeriodUpsertOne.ID is not supported by MySQL driver. Use BusinessHoursPeriodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BusinessHoursPeriodUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BusinessHoursPeriodCreateBulk is the builder for creating many BusinessHoursPeriod entities in bulk.
type BusinessHoursPeriodCreateBulk struct {
	config
	err      error
	builders []*BusinessHoursPeriodCreate
	conflict []sql.ConflictOption
}

// Save creates the BusinessHoursPeriod entities in the database.
func (bhpcb *BusinessHoursPeriodCreateBulk) Save(ctx context.Context) ([]*BusinessHoursPeriod, error) {
	if bhpcb.err != nil {
		return nil, bhpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bhpcb.builders))
	nodes := make([]*BusinessHoursPeriod, len(bhpcb.builders))
	mutators := make([]Mutator, len(bhpcb.builders))
	for i := range bhpcb.builders {
		func(i int, root context.Context) {
			builder := bhpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessHoursPeriodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bhpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bhpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bhpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bhpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bhpcb *BusinessHoursPeriodCreateBulk) SaveX(ctx context.Context) []*BusinessHoursPeriod {
	v, err := bhpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bhpcb *BusinessHoursPeriodCreateBulk) Exec(ctx context.Context) error {
	_, err := bhpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhpcb *BusinessHoursPeriodCreateBulk) ExecX(ctx context.Context) {
	if err := bhpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BusinessHoursPeriod.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessHoursPeriodUpsert) {
//			SetDayOfWeek(v+v).
//		}).
//		Exec(ctx)
func (bhpcb *BusinessHoursPeriodCreateBulk) OnConflict(opts ...sql.ConflictOption) *BusinessHoursPeriodUpsertBulk {
	bhpcb.conflict = opts
	return &BusinessHoursPeriodUpsertBulk{
		create: bhpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BusinessHoursPeriod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bhpcb *BusinessHoursPeriodCreateBulk) OnConflictColumns(columns ...string) *BusinessHoursPeriodUpsertBulk {
	bhpcb.conflict = append(bhpcb.conflict, sql.ConflictColumns(columns...))
	return &BusinessHoursPeriodUpsertBulk{
		create: bhpcb,
	}
}

// BusinessHoursPeriodUpsertBulk is the builder for "upsert"-ing
// a bulk of BusinessHoursPeriod nodes.
type BusinessHoursPeriodUpsertBulk struct {
	create *BusinessHoursPeriodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BusinessHoursPeriod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(businesshoursperiod.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BusinessHoursPeriodUpsertBulk) UpdateNewValues() *BusinessHoursPeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(businesshoursperiod.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BusinessHoursPeriod.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BusinessHoursPeriodUpsertBulk) Ignore() *BusinessHoursPeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessHoursPeriodUpsertBulk) DoNothing() *BusinessHoursPeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessHoursPeriodCreateBulk.OnConflict
// documentation for more info.
func (u *BusinessHoursPeriodUpsertBulk) Update(set func(*BusinessHoursPeriodUpsert)) *BusinessHoursPeriodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessHoursPeriodUpsert{UpdateSet: update})
	}))
	return u
}

// SetDayOfWeek sets the "day_of_week" field.
func (u *BusinessHoursPeriodUpsertBulk) SetDayOfWeek(v businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpsertBulk {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.SetDayOfWeek(v)
	})
}

// UpdateDayOfWeek sets the "day_of_week" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsertBulk) UpdateDayOfWeek() *BusinessHoursPeriodUpsertBulk {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.UpdateDayOfWeek()
	})
}

// SetOpening sets the "opening" field.
func (u *BusinessHoursPeriodUpsertBulk) SetOpening(v time.Time) *BusinessHoursPeriodUpsertBulk {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.SetOpening(v)
	})
}

// UpdateOpening sets the "opening" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsertBulk) UpdateOpening() *BusinessHoursPeriodUpsertBulk {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.UpdateOpening()
	})
}

// SetClosing sets the "closing" field.
func (u *BusinessHoursPeriodUpsertBulk) SetClosing(v time.Time) *BusinessHoursPeriodUpsertBulk {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.SetClosing(v)
	})
}

// UpdateClosing sets the "closing" field to the value that was provided on create.
func (u *BusinessHoursPeriodUpsertBulk) UpdateClosing() *BusinessHoursPeriodUpsertBulk {
	return u.Update(func(s *BusinessHoursPeriodUpsert) {
		s.UpdateClosing()
	})
}

// Exec executes the query.
func (u *BusinessHoursPeriodUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BusinessHoursPeriodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessHoursPeriodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessHoursPeriodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
