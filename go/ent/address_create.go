// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (ac *AddressCreate) SetTenantID(pu pulid.ID) *AddressCreate {
	ac.mutation.SetTenantID(pu)
	return ac
}

// SetUniquenessID sets the "uniqueness_id" field.
func (ac *AddressCreate) SetUniquenessID(s string) *AddressCreate {
	ac.mutation.SetUniquenessID(s)
	return ac
}

// SetNillableUniquenessID sets the "uniqueness_id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableUniquenessID(s *string) *AddressCreate {
	if s != nil {
		ac.SetUniquenessID(*s)
	}
	return ac
}

// SetFirstName sets the "first_name" field.
func (ac *AddressCreate) SetFirstName(s string) *AddressCreate {
	ac.mutation.SetFirstName(s)
	return ac
}

// SetLastName sets the "last_name" field.
func (ac *AddressCreate) SetLastName(s string) *AddressCreate {
	ac.mutation.SetLastName(s)
	return ac
}

// SetEmail sets the "email" field.
func (ac *AddressCreate) SetEmail(s string) *AddressCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetPhoneNumber sets the "phone_number" field.
func (ac *AddressCreate) SetPhoneNumber(s string) *AddressCreate {
	ac.mutation.SetPhoneNumber(s)
	return ac
}

// SetPhoneNumber2 sets the "phone_number_2" field.
func (ac *AddressCreate) SetPhoneNumber2(s string) *AddressCreate {
	ac.mutation.SetPhoneNumber2(s)
	return ac
}

// SetNillablePhoneNumber2 sets the "phone_number_2" field if the given value is not nil.
func (ac *AddressCreate) SetNillablePhoneNumber2(s *string) *AddressCreate {
	if s != nil {
		ac.SetPhoneNumber2(*s)
	}
	return ac
}

// SetVatNumber sets the "vat_number" field.
func (ac *AddressCreate) SetVatNumber(s string) *AddressCreate {
	ac.mutation.SetVatNumber(s)
	return ac
}

// SetNillableVatNumber sets the "vat_number" field if the given value is not nil.
func (ac *AddressCreate) SetNillableVatNumber(s *string) *AddressCreate {
	if s != nil {
		ac.SetVatNumber(*s)
	}
	return ac
}

// SetCompany sets the "company" field.
func (ac *AddressCreate) SetCompany(s string) *AddressCreate {
	ac.mutation.SetCompany(s)
	return ac
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCompany(s *string) *AddressCreate {
	if s != nil {
		ac.SetCompany(*s)
	}
	return ac
}

// SetAddressOne sets the "address_one" field.
func (ac *AddressCreate) SetAddressOne(s string) *AddressCreate {
	ac.mutation.SetAddressOne(s)
	return ac
}

// SetAddressTwo sets the "address_two" field.
func (ac *AddressCreate) SetAddressTwo(s string) *AddressCreate {
	ac.mutation.SetAddressTwo(s)
	return ac
}

// SetCity sets the "city" field.
func (ac *AddressCreate) SetCity(s string) *AddressCreate {
	ac.mutation.SetCity(s)
	return ac
}

// SetState sets the "state" field.
func (ac *AddressCreate) SetState(s string) *AddressCreate {
	ac.mutation.SetState(s)
	return ac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ac *AddressCreate) SetNillableState(s *string) *AddressCreate {
	if s != nil {
		ac.SetState(*s)
	}
	return ac
}

// SetZip sets the "zip" field.
func (ac *AddressCreate) SetZip(s string) *AddressCreate {
	ac.mutation.SetZip(s)
	return ac
}

// SetID sets the "id" field.
func (ac *AddressCreate) SetID(pu pulid.ID) *AddressCreate {
	ac.mutation.SetID(pu)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AddressCreate) SetNillableID(pu *pulid.ID) *AddressCreate {
	if pu != nil {
		ac.SetID(*pu)
	}
	return ac
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (ac *AddressCreate) SetTenant(t *Tenant) *AddressCreate {
	return ac.SetTenantID(t.ID)
}

// AddRecipientColliIDs adds the "recipient_colli" edge to the Colli entity by IDs.
func (ac *AddressCreate) AddRecipientColliIDs(ids ...pulid.ID) *AddressCreate {
	ac.mutation.AddRecipientColliIDs(ids...)
	return ac
}

// AddRecipientColli adds the "recipient_colli" edges to the Colli entity.
func (ac *AddressCreate) AddRecipientColli(c ...*Colli) *AddressCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ac.AddRecipientColliIDs(ids...)
}

// SetRecipientConsolidationID sets the "recipient_consolidation" edge to the Consolidation entity by ID.
func (ac *AddressCreate) SetRecipientConsolidationID(id pulid.ID) *AddressCreate {
	ac.mutation.SetRecipientConsolidationID(id)
	return ac
}

// SetNillableRecipientConsolidationID sets the "recipient_consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (ac *AddressCreate) SetNillableRecipientConsolidationID(id *pulid.ID) *AddressCreate {
	if id != nil {
		ac = ac.SetRecipientConsolidationID(*id)
	}
	return ac
}

// SetRecipientConsolidation sets the "recipient_consolidation" edge to the Consolidation entity.
func (ac *AddressCreate) SetRecipientConsolidation(c *Consolidation) *AddressCreate {
	return ac.SetRecipientConsolidationID(c.ID)
}

// AddCompanyAddresIDs adds the "company_address" edge to the Tenant entity by IDs.
func (ac *AddressCreate) AddCompanyAddresIDs(ids ...pulid.ID) *AddressCreate {
	ac.mutation.AddCompanyAddresIDs(ids...)
	return ac
}

// AddCompanyAddress adds the "company_address" edges to the Tenant entity.
func (ac *AddressCreate) AddCompanyAddress(t ...*Tenant) *AddressCreate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddCompanyAddresIDs(ids...)
}

// AddLocationIDs adds the "location" edge to the Location entity by IDs.
func (ac *AddressCreate) AddLocationIDs(ids ...pulid.ID) *AddressCreate {
	ac.mutation.AddLocationIDs(ids...)
	return ac
}

// AddLocation adds the "location" edges to the Location entity.
func (ac *AddressCreate) AddLocation(l ...*Location) *AddressCreate {
	ids := make([]pulid.ID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ac.AddLocationIDs(ids...)
}

// AddSenderColliIDs adds the "sender_colli" edge to the Colli entity by IDs.
func (ac *AddressCreate) AddSenderColliIDs(ids ...pulid.ID) *AddressCreate {
	ac.mutation.AddSenderColliIDs(ids...)
	return ac
}

// AddSenderColli adds the "sender_colli" edges to the Colli entity.
func (ac *AddressCreate) AddSenderColli(c ...*Colli) *AddressCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ac.AddSenderColliIDs(ids...)
}

// SetSenderConsolidationID sets the "sender_consolidation" edge to the Consolidation entity by ID.
func (ac *AddressCreate) SetSenderConsolidationID(id pulid.ID) *AddressCreate {
	ac.mutation.SetSenderConsolidationID(id)
	return ac
}

// SetNillableSenderConsolidationID sets the "sender_consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (ac *AddressCreate) SetNillableSenderConsolidationID(id *pulid.ID) *AddressCreate {
	if id != nil {
		ac = ac.SetSenderConsolidationID(*id)
	}
	return ac
}

// SetSenderConsolidation sets the "sender_consolidation" edge to the Consolidation entity.
func (ac *AddressCreate) SetSenderConsolidation(c *Consolidation) *AddressCreate {
	return ac.SetSenderConsolidationID(c.ID)
}

// AddReturnSenderColliIDs adds the "return_sender_colli" edge to the ReturnColli entity by IDs.
func (ac *AddressCreate) AddReturnSenderColliIDs(ids ...pulid.ID) *AddressCreate {
	ac.mutation.AddReturnSenderColliIDs(ids...)
	return ac
}

// AddReturnSenderColli adds the "return_sender_colli" edges to the ReturnColli entity.
func (ac *AddressCreate) AddReturnSenderColli(r ...*ReturnColli) *AddressCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddReturnSenderColliIDs(ids...)
}

// AddReturnRecipientColliIDs adds the "return_recipient_colli" edge to the ReturnColli entity by IDs.
func (ac *AddressCreate) AddReturnRecipientColliIDs(ids ...pulid.ID) *AddressCreate {
	ac.mutation.AddReturnRecipientColliIDs(ids...)
	return ac
}

// AddReturnRecipientColli adds the "return_recipient_colli" edges to the ReturnColli entity.
func (ac *AddressCreate) AddReturnRecipientColli(r ...*ReturnColli) *AddressCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ac.AddReturnRecipientColliIDs(ids...)
}

// SetCountryID sets the "country" edge to the Country entity by ID.
func (ac *AddressCreate) SetCountryID(id pulid.ID) *AddressCreate {
	ac.mutation.SetCountryID(id)
	return ac
}

// SetCountry sets the "country" edge to the Country entity.
func (ac *AddressCreate) SetCountry(c *Country) *AddressCreate {
	return ac.SetCountryID(c.ID)
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AddressCreate) defaults() error {
	if _, ok := ac.mutation.ID(); !ok {
		if address.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized address.DefaultID (forgotten import ent/runtime?)")
		}
		v := address.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if _, ok := ac.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Address.tenant_id"`)}
	}
	if _, ok := ac.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Address.first_name"`)}
	}
	if _, ok := ac.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Address.last_name"`)}
	}
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Address.email"`)}
	}
	if _, ok := ac.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Address.phone_number"`)}
	}
	if _, ok := ac.mutation.AddressOne(); !ok {
		return &ValidationError{Name: "address_one", err: errors.New(`ent: missing required field "Address.address_one"`)}
	}
	if _, ok := ac.mutation.AddressTwo(); !ok {
		return &ValidationError{Name: "address_two", err: errors.New(`ent: missing required field "Address.address_two"`)}
	}
	if _, ok := ac.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Address.city"`)}
	}
	if _, ok := ac.mutation.Zip(); !ok {
		return &ValidationError{Name: "zip", err: errors.New(`ent: missing required field "Address.zip"`)}
	}
	if len(ac.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Address.tenant"`)}
	}
	if len(ac.mutation.CountryIDs()) == 0 {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required edge "Address.country"`)}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.UniquenessID(); ok {
		_spec.SetField(address.FieldUniquenessID, field.TypeString, value)
		_node.UniquenessID = value
	}
	if value, ok := ac.mutation.FirstName(); ok {
		_spec.SetField(address.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ac.mutation.LastName(); ok {
		_spec.SetField(address.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.SetField(address.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ac.mutation.PhoneNumber(); ok {
		_spec.SetField(address.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := ac.mutation.PhoneNumber2(); ok {
		_spec.SetField(address.FieldPhoneNumber2, field.TypeString, value)
		_node.PhoneNumber2 = value
	}
	if value, ok := ac.mutation.VatNumber(); ok {
		_spec.SetField(address.FieldVatNumber, field.TypeString, value)
		_node.VatNumber = value
	}
	if value, ok := ac.mutation.Company(); ok {
		_spec.SetField(address.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := ac.mutation.AddressOne(); ok {
		_spec.SetField(address.FieldAddressOne, field.TypeString, value)
		_node.AddressOne = value
	}
	if value, ok := ac.mutation.AddressTwo(); ok {
		_spec.SetField(address.FieldAddressTwo, field.TypeString, value)
		_node.AddressTwo = value
	}
	if value, ok := ac.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ac.mutation.State(); ok {
		_spec.SetField(address.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ac.mutation.Zip(); ok {
		_spec.SetField(address.FieldZip, field.TypeString, value)
		_node.Zip = value
	}
	if nodes := ac.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.TenantTable,
			Columns: []string{address.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RecipientColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RecipientConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.RecipientConsolidationTable,
			Columns: []string{address.RecipientConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.consolidation_recipient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CompanyAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SenderColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SenderConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.SenderConsolidationTable,
			Columns: []string{address.SenderConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.consolidation_sender = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ReturnSenderColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ReturnRecipientColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.CountryTable,
			Columns: []string{address.CountryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.address_country = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ac *AddressCreate) OnConflict(opts ...sql.ConflictOption) *AddressUpsertOne {
	ac.conflict = opts
	return &AddressUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AddressCreate) OnConflictColumns(columns ...string) *AddressUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertOne{
		create: ac,
	}
}

type (
	// AddressUpsertOne is the builder for "upsert"-ing
	//  one Address node.
	AddressUpsertOne struct {
		create *AddressCreate
	}

	// AddressUpsert is the "OnConflict" setter.
	AddressUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *AddressUpsert) SetTenantID(v pulid.ID) *AddressUpsert {
	u.Set(address.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateTenantID() *AddressUpsert {
	u.SetExcluded(address.FieldTenantID)
	return u
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *AddressUpsert) SetUniquenessID(v string) *AddressUpsert {
	u.Set(address.FieldUniquenessID, v)
	return u
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *AddressUpsert) UpdateUniquenessID() *AddressUpsert {
	u.SetExcluded(address.FieldUniquenessID)
	return u
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *AddressUpsert) ClearUniquenessID() *AddressUpsert {
	u.SetNull(address.FieldUniquenessID)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *AddressUpsert) SetFirstName(v string) *AddressUpsert {
	u.Set(address.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AddressUpsert) UpdateFirstName() *AddressUpsert {
	u.SetExcluded(address.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *AddressUpsert) SetLastName(v string) *AddressUpsert {
	u.Set(address.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AddressUpsert) UpdateLastName() *AddressUpsert {
	u.SetExcluded(address.FieldLastName)
	return u
}

// SetEmail sets the "email" field.
func (u *AddressUpsert) SetEmail(v string) *AddressUpsert {
	u.Set(address.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AddressUpsert) UpdateEmail() *AddressUpsert {
	u.SetExcluded(address.FieldEmail)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *AddressUpsert) SetPhoneNumber(v string) *AddressUpsert {
	u.Set(address.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *AddressUpsert) UpdatePhoneNumber() *AddressUpsert {
	u.SetExcluded(address.FieldPhoneNumber)
	return u
}

// SetPhoneNumber2 sets the "phone_number_2" field.
func (u *AddressUpsert) SetPhoneNumber2(v string) *AddressUpsert {
	u.Set(address.FieldPhoneNumber2, v)
	return u
}

// UpdatePhoneNumber2 sets the "phone_number_2" field to the value that was provided on create.
func (u *AddressUpsert) UpdatePhoneNumber2() *AddressUpsert {
	u.SetExcluded(address.FieldPhoneNumber2)
	return u
}

// ClearPhoneNumber2 clears the value of the "phone_number_2" field.
func (u *AddressUpsert) ClearPhoneNumber2() *AddressUpsert {
	u.SetNull(address.FieldPhoneNumber2)
	return u
}

// SetVatNumber sets the "vat_number" field.
func (u *AddressUpsert) SetVatNumber(v string) *AddressUpsert {
	u.Set(address.FieldVatNumber, v)
	return u
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *AddressUpsert) UpdateVatNumber() *AddressUpsert {
	u.SetExcluded(address.FieldVatNumber)
	return u
}

// ClearVatNumber clears the value of the "vat_number" field.
func (u *AddressUpsert) ClearVatNumber() *AddressUpsert {
	u.SetNull(address.FieldVatNumber)
	return u
}

// SetCompany sets the "company" field.
func (u *AddressUpsert) SetCompany(v string) *AddressUpsert {
	u.Set(address.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCompany() *AddressUpsert {
	u.SetExcluded(address.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *AddressUpsert) ClearCompany() *AddressUpsert {
	u.SetNull(address.FieldCompany)
	return u
}

// SetAddressOne sets the "address_one" field.
func (u *AddressUpsert) SetAddressOne(v string) *AddressUpsert {
	u.Set(address.FieldAddressOne, v)
	return u
}

// UpdateAddressOne sets the "address_one" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAddressOne() *AddressUpsert {
	u.SetExcluded(address.FieldAddressOne)
	return u
}

// SetAddressTwo sets the "address_two" field.
func (u *AddressUpsert) SetAddressTwo(v string) *AddressUpsert {
	u.Set(address.FieldAddressTwo, v)
	return u
}

// UpdateAddressTwo sets the "address_two" field to the value that was provided on create.
func (u *AddressUpsert) UpdateAddressTwo() *AddressUpsert {
	u.SetExcluded(address.FieldAddressTwo)
	return u
}

// SetCity sets the "city" field.
func (u *AddressUpsert) SetCity(v string) *AddressUpsert {
	u.Set(address.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsert) UpdateCity() *AddressUpsert {
	u.SetExcluded(address.FieldCity)
	return u
}

// SetState sets the "state" field.
func (u *AddressUpsert) SetState(v string) *AddressUpsert {
	u.Set(address.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsert) UpdateState() *AddressUpsert {
	u.SetExcluded(address.FieldState)
	return u
}

// ClearState clears the value of the "state" field.
func (u *AddressUpsert) ClearState() *AddressUpsert {
	u.SetNull(address.FieldState)
	return u
}

// SetZip sets the "zip" field.
func (u *AddressUpsert) SetZip(v string) *AddressUpsert {
	u.Set(address.FieldZip, v)
	return u
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressUpsert) UpdateZip() *AddressUpsert {
	u.SetExcluded(address.FieldZip)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(address.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressUpsertOne) UpdateNewValues() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(address.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AddressUpsertOne) Ignore() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertOne) DoNothing() *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreate.OnConflict
// documentation for more info.
func (u *AddressUpsertOne) Update(set func(*AddressUpsert)) *AddressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *AddressUpsertOne) SetTenantID(v pulid.ID) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateTenantID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateTenantID()
	})
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *AddressUpsertOne) SetUniquenessID(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetUniquenessID(v)
	})
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateUniquenessID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUniquenessID()
	})
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *AddressUpsertOne) ClearUniquenessID() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearUniquenessID()
	})
}

// SetFirstName sets the "first_name" field.
func (u *AddressUpsertOne) SetFirstName(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateFirstName() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *AddressUpsertOne) SetLastName(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateLastName() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateLastName()
	})
}

// SetEmail sets the "email" field.
func (u *AddressUpsertOne) SetEmail(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateEmail() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateEmail()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *AddressUpsertOne) SetPhoneNumber(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdatePhoneNumber() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetPhoneNumber2 sets the "phone_number_2" field.
func (u *AddressUpsertOne) SetPhoneNumber2(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetPhoneNumber2(v)
	})
}

// UpdatePhoneNumber2 sets the "phone_number_2" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdatePhoneNumber2() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePhoneNumber2()
	})
}

// ClearPhoneNumber2 clears the value of the "phone_number_2" field.
func (u *AddressUpsertOne) ClearPhoneNumber2() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearPhoneNumber2()
	})
}

// SetVatNumber sets the "vat_number" field.
func (u *AddressUpsertOne) SetVatNumber(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetVatNumber(v)
	})
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateVatNumber() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateVatNumber()
	})
}

// ClearVatNumber clears the value of the "vat_number" field.
func (u *AddressUpsertOne) ClearVatNumber() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearVatNumber()
	})
}

// SetCompany sets the "company" field.
func (u *AddressUpsertOne) SetCompany(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCompany() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *AddressUpsertOne) ClearCompany() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCompany()
	})
}

// SetAddressOne sets the "address_one" field.
func (u *AddressUpsertOne) SetAddressOne(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressOne(v)
	})
}

// UpdateAddressOne sets the "address_one" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAddressOne() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressOne()
	})
}

// SetAddressTwo sets the "address_two" field.
func (u *AddressUpsertOne) SetAddressTwo(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressTwo(v)
	})
}

// UpdateAddressTwo sets the "address_two" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateAddressTwo() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressTwo()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertOne) SetCity(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateCity() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *AddressUpsertOne) SetState(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateState() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *AddressUpsertOne) ClearState() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.ClearState()
	})
}

// SetZip sets the "zip" field.
func (u *AddressUpsertOne) SetZip(v string) *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressUpsertOne) UpdateZip() *AddressUpsertOne {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateZip()
	})
}

// Exec executes the query.
func (u *AddressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AddressUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AddressUpsertOne.ID is not supported by MySQL driver. Use AddressUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AddressUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	err      error
	builders []*AddressCreate
	conflict []sql.ConflictOption
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Address.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AddressUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (acb *AddressCreateBulk) OnConflict(opts ...sql.ConflictOption) *AddressUpsertBulk {
	acb.conflict = opts
	return &AddressUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AddressCreateBulk) OnConflictColumns(columns ...string) *AddressUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AddressUpsertBulk{
		create: acb,
	}
}

// AddressUpsertBulk is the builder for "upsert"-ing
// a bulk of Address nodes.
type AddressUpsertBulk struct {
	create *AddressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(address.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AddressUpsertBulk) UpdateNewValues() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(address.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Address.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AddressUpsertBulk) Ignore() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AddressUpsertBulk) DoNothing() *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AddressCreateBulk.OnConflict
// documentation for more info.
func (u *AddressUpsertBulk) Update(set func(*AddressUpsert)) *AddressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AddressUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *AddressUpsertBulk) SetTenantID(v pulid.ID) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateTenantID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateTenantID()
	})
}

// SetUniquenessID sets the "uniqueness_id" field.
func (u *AddressUpsertBulk) SetUniquenessID(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetUniquenessID(v)
	})
}

// UpdateUniquenessID sets the "uniqueness_id" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateUniquenessID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateUniquenessID()
	})
}

// ClearUniquenessID clears the value of the "uniqueness_id" field.
func (u *AddressUpsertBulk) ClearUniquenessID() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearUniquenessID()
	})
}

// SetFirstName sets the "first_name" field.
func (u *AddressUpsertBulk) SetFirstName(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateFirstName() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *AddressUpsertBulk) SetLastName(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateLastName() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateLastName()
	})
}

// SetEmail sets the "email" field.
func (u *AddressUpsertBulk) SetEmail(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateEmail() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateEmail()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *AddressUpsertBulk) SetPhoneNumber(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdatePhoneNumber() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetPhoneNumber2 sets the "phone_number_2" field.
func (u *AddressUpsertBulk) SetPhoneNumber2(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetPhoneNumber2(v)
	})
}

// UpdatePhoneNumber2 sets the "phone_number_2" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdatePhoneNumber2() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdatePhoneNumber2()
	})
}

// ClearPhoneNumber2 clears the value of the "phone_number_2" field.
func (u *AddressUpsertBulk) ClearPhoneNumber2() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearPhoneNumber2()
	})
}

// SetVatNumber sets the "vat_number" field.
func (u *AddressUpsertBulk) SetVatNumber(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetVatNumber(v)
	})
}

// UpdateVatNumber sets the "vat_number" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateVatNumber() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateVatNumber()
	})
}

// ClearVatNumber clears the value of the "vat_number" field.
func (u *AddressUpsertBulk) ClearVatNumber() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearVatNumber()
	})
}

// SetCompany sets the "company" field.
func (u *AddressUpsertBulk) SetCompany(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCompany() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *AddressUpsertBulk) ClearCompany() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearCompany()
	})
}

// SetAddressOne sets the "address_one" field.
func (u *AddressUpsertBulk) SetAddressOne(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressOne(v)
	})
}

// UpdateAddressOne sets the "address_one" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAddressOne() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressOne()
	})
}

// SetAddressTwo sets the "address_two" field.
func (u *AddressUpsertBulk) SetAddressTwo(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetAddressTwo(v)
	})
}

// UpdateAddressTwo sets the "address_two" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateAddressTwo() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateAddressTwo()
	})
}

// SetCity sets the "city" field.
func (u *AddressUpsertBulk) SetCity(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateCity() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateCity()
	})
}

// SetState sets the "state" field.
func (u *AddressUpsertBulk) SetState(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateState() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateState()
	})
}

// ClearState clears the value of the "state" field.
func (u *AddressUpsertBulk) ClearState() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.ClearState()
	})
}

// SetZip sets the "zip" field.
func (u *AddressUpsertBulk) SetZip(v string) *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.SetZip(v)
	})
}

// UpdateZip sets the "zip" field to the value that was provided on create.
func (u *AddressUpsertBulk) UpdateZip() *AddressUpsertBulk {
	return u.Update(func(s *AddressUpsert) {
		s.UpdateZip()
	})
}

// Exec executes the query.
func (u *AddressUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AddressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AddressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AddressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
