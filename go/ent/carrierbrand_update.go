// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierBrandUpdate is the builder for updating CarrierBrand entities.
type CarrierBrandUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierBrandMutation
}

// Where appends a list predicates to the CarrierBrandUpdate builder.
func (cbu *CarrierBrandUpdate) Where(ps ...predicate.CarrierBrand) *CarrierBrandUpdate {
	cbu.mutation.Where(ps...)
	return cbu
}

// SetLabel sets the "label" field.
func (cbu *CarrierBrandUpdate) SetLabel(s string) *CarrierBrandUpdate {
	cbu.mutation.SetLabel(s)
	return cbu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cbu *CarrierBrandUpdate) SetNillableLabel(s *string) *CarrierBrandUpdate {
	if s != nil {
		cbu.SetLabel(*s)
	}
	return cbu
}

// SetLabelShort sets the "label_short" field.
func (cbu *CarrierBrandUpdate) SetLabelShort(s string) *CarrierBrandUpdate {
	cbu.mutation.SetLabelShort(s)
	return cbu
}

// SetNillableLabelShort sets the "label_short" field if the given value is not nil.
func (cbu *CarrierBrandUpdate) SetNillableLabelShort(s *string) *CarrierBrandUpdate {
	if s != nil {
		cbu.SetLabelShort(*s)
	}
	return cbu
}

// SetInternalID sets the "internal_id" field.
func (cbu *CarrierBrandUpdate) SetInternalID(ci carrierbrand.InternalID) *CarrierBrandUpdate {
	cbu.mutation.SetInternalID(ci)
	return cbu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (cbu *CarrierBrandUpdate) SetNillableInternalID(ci *carrierbrand.InternalID) *CarrierBrandUpdate {
	if ci != nil {
		cbu.SetInternalID(*ci)
	}
	return cbu
}

// SetLogoURL sets the "logo_url" field.
func (cbu *CarrierBrandUpdate) SetLogoURL(s string) *CarrierBrandUpdate {
	cbu.mutation.SetLogoURL(s)
	return cbu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cbu *CarrierBrandUpdate) SetNillableLogoURL(s *string) *CarrierBrandUpdate {
	if s != nil {
		cbu.SetLogoURL(*s)
	}
	return cbu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (cbu *CarrierBrandUpdate) ClearLogoURL() *CarrierBrandUpdate {
	cbu.mutation.ClearLogoURL()
	return cbu
}

// SetTextColor sets the "text_color" field.
func (cbu *CarrierBrandUpdate) SetTextColor(s string) *CarrierBrandUpdate {
	cbu.mutation.SetTextColor(s)
	return cbu
}

// SetNillableTextColor sets the "text_color" field if the given value is not nil.
func (cbu *CarrierBrandUpdate) SetNillableTextColor(s *string) *CarrierBrandUpdate {
	if s != nil {
		cbu.SetTextColor(*s)
	}
	return cbu
}

// ClearTextColor clears the value of the "text_color" field.
func (cbu *CarrierBrandUpdate) ClearTextColor() *CarrierBrandUpdate {
	cbu.mutation.ClearTextColor()
	return cbu
}

// SetBackgroundColor sets the "background_color" field.
func (cbu *CarrierBrandUpdate) SetBackgroundColor(s string) *CarrierBrandUpdate {
	cbu.mutation.SetBackgroundColor(s)
	return cbu
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (cbu *CarrierBrandUpdate) SetNillableBackgroundColor(s *string) *CarrierBrandUpdate {
	if s != nil {
		cbu.SetBackgroundColor(*s)
	}
	return cbu
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (cbu *CarrierBrandUpdate) ClearBackgroundColor() *CarrierBrandUpdate {
	cbu.mutation.ClearBackgroundColor()
	return cbu
}

// AddCarrierServiceIDs adds the "carrier_service" edge to the CarrierService entity by IDs.
func (cbu *CarrierBrandUpdate) AddCarrierServiceIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.AddCarrierServiceIDs(ids...)
	return cbu
}

// AddCarrierService adds the "carrier_service" edges to the CarrierService entity.
func (cbu *CarrierBrandUpdate) AddCarrierService(c ...*CarrierService) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.AddCarrierServiceIDs(ids...)
}

// AddCarrierIDs adds the "carrier" edge to the Carrier entity by IDs.
func (cbu *CarrierBrandUpdate) AddCarrierIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.AddCarrierIDs(ids...)
	return cbu
}

// AddCarrier adds the "carrier" edges to the Carrier entity.
func (cbu *CarrierBrandUpdate) AddCarrier(c ...*Carrier) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.AddCarrierIDs(ids...)
}

// AddParcelShopIDs adds the "parcel_shop" edge to the ParcelShop entity by IDs.
func (cbu *CarrierBrandUpdate) AddParcelShopIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.AddParcelShopIDs(ids...)
	return cbu
}

// AddParcelShop adds the "parcel_shop" edges to the ParcelShop entity.
func (cbu *CarrierBrandUpdate) AddParcelShop(p ...*ParcelShop) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbu.AddParcelShopIDs(ids...)
}

// AddPackagingIDs adds the "packaging" edge to the Packaging entity by IDs.
func (cbu *CarrierBrandUpdate) AddPackagingIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.AddPackagingIDs(ids...)
	return cbu
}

// AddPackaging adds the "packaging" edges to the Packaging entity.
func (cbu *CarrierBrandUpdate) AddPackaging(p ...*Packaging) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbu.AddPackagingIDs(ids...)
}

// AddDocumentIDs adds the "document" edge to the Document entity by IDs.
func (cbu *CarrierBrandUpdate) AddDocumentIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.AddDocumentIDs(ids...)
	return cbu
}

// AddDocument adds the "document" edges to the Document entity.
func (cbu *CarrierBrandUpdate) AddDocument(d ...*Document) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cbu.AddDocumentIDs(ids...)
}

// Mutation returns the CarrierBrandMutation object of the builder.
func (cbu *CarrierBrandUpdate) Mutation() *CarrierBrandMutation {
	return cbu.mutation
}

// ClearCarrierService clears all "carrier_service" edges to the CarrierService entity.
func (cbu *CarrierBrandUpdate) ClearCarrierService() *CarrierBrandUpdate {
	cbu.mutation.ClearCarrierService()
	return cbu
}

// RemoveCarrierServiceIDs removes the "carrier_service" edge to CarrierService entities by IDs.
func (cbu *CarrierBrandUpdate) RemoveCarrierServiceIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.RemoveCarrierServiceIDs(ids...)
	return cbu
}

// RemoveCarrierService removes "carrier_service" edges to CarrierService entities.
func (cbu *CarrierBrandUpdate) RemoveCarrierService(c ...*CarrierService) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.RemoveCarrierServiceIDs(ids...)
}

// ClearCarrier clears all "carrier" edges to the Carrier entity.
func (cbu *CarrierBrandUpdate) ClearCarrier() *CarrierBrandUpdate {
	cbu.mutation.ClearCarrier()
	return cbu
}

// RemoveCarrierIDs removes the "carrier" edge to Carrier entities by IDs.
func (cbu *CarrierBrandUpdate) RemoveCarrierIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.RemoveCarrierIDs(ids...)
	return cbu
}

// RemoveCarrier removes "carrier" edges to Carrier entities.
func (cbu *CarrierBrandUpdate) RemoveCarrier(c ...*Carrier) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.RemoveCarrierIDs(ids...)
}

// ClearParcelShop clears all "parcel_shop" edges to the ParcelShop entity.
func (cbu *CarrierBrandUpdate) ClearParcelShop() *CarrierBrandUpdate {
	cbu.mutation.ClearParcelShop()
	return cbu
}

// RemoveParcelShopIDs removes the "parcel_shop" edge to ParcelShop entities by IDs.
func (cbu *CarrierBrandUpdate) RemoveParcelShopIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.RemoveParcelShopIDs(ids...)
	return cbu
}

// RemoveParcelShop removes "parcel_shop" edges to ParcelShop entities.
func (cbu *CarrierBrandUpdate) RemoveParcelShop(p ...*ParcelShop) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbu.RemoveParcelShopIDs(ids...)
}

// ClearPackaging clears all "packaging" edges to the Packaging entity.
func (cbu *CarrierBrandUpdate) ClearPackaging() *CarrierBrandUpdate {
	cbu.mutation.ClearPackaging()
	return cbu
}

// RemovePackagingIDs removes the "packaging" edge to Packaging entities by IDs.
func (cbu *CarrierBrandUpdate) RemovePackagingIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.RemovePackagingIDs(ids...)
	return cbu
}

// RemovePackaging removes "packaging" edges to Packaging entities.
func (cbu *CarrierBrandUpdate) RemovePackaging(p ...*Packaging) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbu.RemovePackagingIDs(ids...)
}

// ClearDocument clears all "document" edges to the Document entity.
func (cbu *CarrierBrandUpdate) ClearDocument() *CarrierBrandUpdate {
	cbu.mutation.ClearDocument()
	return cbu
}

// RemoveDocumentIDs removes the "document" edge to Document entities by IDs.
func (cbu *CarrierBrandUpdate) RemoveDocumentIDs(ids ...pulid.ID) *CarrierBrandUpdate {
	cbu.mutation.RemoveDocumentIDs(ids...)
	return cbu
}

// RemoveDocument removes "document" edges to Document entities.
func (cbu *CarrierBrandUpdate) RemoveDocument(d ...*Document) *CarrierBrandUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cbu.RemoveDocumentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cbu *CarrierBrandUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cbu.sqlSave, cbu.mutation, cbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *CarrierBrandUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *CarrierBrandUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *CarrierBrandUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbu *CarrierBrandUpdate) check() error {
	if v, ok := cbu.mutation.InternalID(); ok {
		if err := carrierbrand.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "CarrierBrand.internal_id": %w`, err)}
		}
	}
	return nil
}

func (cbu *CarrierBrandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierbrand.Table, carrierbrand.Columns, sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString))
	if ps := cbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbu.mutation.Label(); ok {
		_spec.SetField(carrierbrand.FieldLabel, field.TypeString, value)
	}
	if value, ok := cbu.mutation.LabelShort(); ok {
		_spec.SetField(carrierbrand.FieldLabelShort, field.TypeString, value)
	}
	if value, ok := cbu.mutation.InternalID(); ok {
		_spec.SetField(carrierbrand.FieldInternalID, field.TypeEnum, value)
	}
	if value, ok := cbu.mutation.LogoURL(); ok {
		_spec.SetField(carrierbrand.FieldLogoURL, field.TypeString, value)
	}
	if cbu.mutation.LogoURLCleared() {
		_spec.ClearField(carrierbrand.FieldLogoURL, field.TypeString)
	}
	if value, ok := cbu.mutation.TextColor(); ok {
		_spec.SetField(carrierbrand.FieldTextColor, field.TypeString, value)
	}
	if cbu.mutation.TextColorCleared() {
		_spec.ClearField(carrierbrand.FieldTextColor, field.TypeString)
	}
	if value, ok := cbu.mutation.BackgroundColor(); ok {
		_spec.SetField(carrierbrand.FieldBackgroundColor, field.TypeString, value)
	}
	if cbu.mutation.BackgroundColorCleared() {
		_spec.ClearField(carrierbrand.FieldBackgroundColor, field.TypeString)
	}
	if cbu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RemovedCarrierServiceIDs(); len(nodes) > 0 && !cbu.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RemovedCarrierIDs(); len(nodes) > 0 && !cbu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RemovedParcelShopIDs(); len(nodes) > 0 && !cbu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RemovedPackagingIDs(); len(nodes) > 0 && !cbu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.RemovedDocumentIDs(); len(nodes) > 0 && !cbu.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierbrand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cbu.mutation.done = true
	return n, nil
}

// CarrierBrandUpdateOne is the builder for updating a single CarrierBrand entity.
type CarrierBrandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierBrandMutation
}

// SetLabel sets the "label" field.
func (cbuo *CarrierBrandUpdateOne) SetLabel(s string) *CarrierBrandUpdateOne {
	cbuo.mutation.SetLabel(s)
	return cbuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (cbuo *CarrierBrandUpdateOne) SetNillableLabel(s *string) *CarrierBrandUpdateOne {
	if s != nil {
		cbuo.SetLabel(*s)
	}
	return cbuo
}

// SetLabelShort sets the "label_short" field.
func (cbuo *CarrierBrandUpdateOne) SetLabelShort(s string) *CarrierBrandUpdateOne {
	cbuo.mutation.SetLabelShort(s)
	return cbuo
}

// SetNillableLabelShort sets the "label_short" field if the given value is not nil.
func (cbuo *CarrierBrandUpdateOne) SetNillableLabelShort(s *string) *CarrierBrandUpdateOne {
	if s != nil {
		cbuo.SetLabelShort(*s)
	}
	return cbuo
}

// SetInternalID sets the "internal_id" field.
func (cbuo *CarrierBrandUpdateOne) SetInternalID(ci carrierbrand.InternalID) *CarrierBrandUpdateOne {
	cbuo.mutation.SetInternalID(ci)
	return cbuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (cbuo *CarrierBrandUpdateOne) SetNillableInternalID(ci *carrierbrand.InternalID) *CarrierBrandUpdateOne {
	if ci != nil {
		cbuo.SetInternalID(*ci)
	}
	return cbuo
}

// SetLogoURL sets the "logo_url" field.
func (cbuo *CarrierBrandUpdateOne) SetLogoURL(s string) *CarrierBrandUpdateOne {
	cbuo.mutation.SetLogoURL(s)
	return cbuo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (cbuo *CarrierBrandUpdateOne) SetNillableLogoURL(s *string) *CarrierBrandUpdateOne {
	if s != nil {
		cbuo.SetLogoURL(*s)
	}
	return cbuo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (cbuo *CarrierBrandUpdateOne) ClearLogoURL() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearLogoURL()
	return cbuo
}

// SetTextColor sets the "text_color" field.
func (cbuo *CarrierBrandUpdateOne) SetTextColor(s string) *CarrierBrandUpdateOne {
	cbuo.mutation.SetTextColor(s)
	return cbuo
}

// SetNillableTextColor sets the "text_color" field if the given value is not nil.
func (cbuo *CarrierBrandUpdateOne) SetNillableTextColor(s *string) *CarrierBrandUpdateOne {
	if s != nil {
		cbuo.SetTextColor(*s)
	}
	return cbuo
}

// ClearTextColor clears the value of the "text_color" field.
func (cbuo *CarrierBrandUpdateOne) ClearTextColor() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearTextColor()
	return cbuo
}

// SetBackgroundColor sets the "background_color" field.
func (cbuo *CarrierBrandUpdateOne) SetBackgroundColor(s string) *CarrierBrandUpdateOne {
	cbuo.mutation.SetBackgroundColor(s)
	return cbuo
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (cbuo *CarrierBrandUpdateOne) SetNillableBackgroundColor(s *string) *CarrierBrandUpdateOne {
	if s != nil {
		cbuo.SetBackgroundColor(*s)
	}
	return cbuo
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (cbuo *CarrierBrandUpdateOne) ClearBackgroundColor() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearBackgroundColor()
	return cbuo
}

// AddCarrierServiceIDs adds the "carrier_service" edge to the CarrierService entity by IDs.
func (cbuo *CarrierBrandUpdateOne) AddCarrierServiceIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.AddCarrierServiceIDs(ids...)
	return cbuo
}

// AddCarrierService adds the "carrier_service" edges to the CarrierService entity.
func (cbuo *CarrierBrandUpdateOne) AddCarrierService(c ...*CarrierService) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.AddCarrierServiceIDs(ids...)
}

// AddCarrierIDs adds the "carrier" edge to the Carrier entity by IDs.
func (cbuo *CarrierBrandUpdateOne) AddCarrierIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.AddCarrierIDs(ids...)
	return cbuo
}

// AddCarrier adds the "carrier" edges to the Carrier entity.
func (cbuo *CarrierBrandUpdateOne) AddCarrier(c ...*Carrier) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.AddCarrierIDs(ids...)
}

// AddParcelShopIDs adds the "parcel_shop" edge to the ParcelShop entity by IDs.
func (cbuo *CarrierBrandUpdateOne) AddParcelShopIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.AddParcelShopIDs(ids...)
	return cbuo
}

// AddParcelShop adds the "parcel_shop" edges to the ParcelShop entity.
func (cbuo *CarrierBrandUpdateOne) AddParcelShop(p ...*ParcelShop) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbuo.AddParcelShopIDs(ids...)
}

// AddPackagingIDs adds the "packaging" edge to the Packaging entity by IDs.
func (cbuo *CarrierBrandUpdateOne) AddPackagingIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.AddPackagingIDs(ids...)
	return cbuo
}

// AddPackaging adds the "packaging" edges to the Packaging entity.
func (cbuo *CarrierBrandUpdateOne) AddPackaging(p ...*Packaging) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbuo.AddPackagingIDs(ids...)
}

// AddDocumentIDs adds the "document" edge to the Document entity by IDs.
func (cbuo *CarrierBrandUpdateOne) AddDocumentIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.AddDocumentIDs(ids...)
	return cbuo
}

// AddDocument adds the "document" edges to the Document entity.
func (cbuo *CarrierBrandUpdateOne) AddDocument(d ...*Document) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cbuo.AddDocumentIDs(ids...)
}

// Mutation returns the CarrierBrandMutation object of the builder.
func (cbuo *CarrierBrandUpdateOne) Mutation() *CarrierBrandMutation {
	return cbuo.mutation
}

// ClearCarrierService clears all "carrier_service" edges to the CarrierService entity.
func (cbuo *CarrierBrandUpdateOne) ClearCarrierService() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearCarrierService()
	return cbuo
}

// RemoveCarrierServiceIDs removes the "carrier_service" edge to CarrierService entities by IDs.
func (cbuo *CarrierBrandUpdateOne) RemoveCarrierServiceIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.RemoveCarrierServiceIDs(ids...)
	return cbuo
}

// RemoveCarrierService removes "carrier_service" edges to CarrierService entities.
func (cbuo *CarrierBrandUpdateOne) RemoveCarrierService(c ...*CarrierService) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.RemoveCarrierServiceIDs(ids...)
}

// ClearCarrier clears all "carrier" edges to the Carrier entity.
func (cbuo *CarrierBrandUpdateOne) ClearCarrier() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearCarrier()
	return cbuo
}

// RemoveCarrierIDs removes the "carrier" edge to Carrier entities by IDs.
func (cbuo *CarrierBrandUpdateOne) RemoveCarrierIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.RemoveCarrierIDs(ids...)
	return cbuo
}

// RemoveCarrier removes "carrier" edges to Carrier entities.
func (cbuo *CarrierBrandUpdateOne) RemoveCarrier(c ...*Carrier) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.RemoveCarrierIDs(ids...)
}

// ClearParcelShop clears all "parcel_shop" edges to the ParcelShop entity.
func (cbuo *CarrierBrandUpdateOne) ClearParcelShop() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearParcelShop()
	return cbuo
}

// RemoveParcelShopIDs removes the "parcel_shop" edge to ParcelShop entities by IDs.
func (cbuo *CarrierBrandUpdateOne) RemoveParcelShopIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.RemoveParcelShopIDs(ids...)
	return cbuo
}

// RemoveParcelShop removes "parcel_shop" edges to ParcelShop entities.
func (cbuo *CarrierBrandUpdateOne) RemoveParcelShop(p ...*ParcelShop) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbuo.RemoveParcelShopIDs(ids...)
}

// ClearPackaging clears all "packaging" edges to the Packaging entity.
func (cbuo *CarrierBrandUpdateOne) ClearPackaging() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearPackaging()
	return cbuo
}

// RemovePackagingIDs removes the "packaging" edge to Packaging entities by IDs.
func (cbuo *CarrierBrandUpdateOne) RemovePackagingIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.RemovePackagingIDs(ids...)
	return cbuo
}

// RemovePackaging removes "packaging" edges to Packaging entities.
func (cbuo *CarrierBrandUpdateOne) RemovePackaging(p ...*Packaging) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cbuo.RemovePackagingIDs(ids...)
}

// ClearDocument clears all "document" edges to the Document entity.
func (cbuo *CarrierBrandUpdateOne) ClearDocument() *CarrierBrandUpdateOne {
	cbuo.mutation.ClearDocument()
	return cbuo
}

// RemoveDocumentIDs removes the "document" edge to Document entities by IDs.
func (cbuo *CarrierBrandUpdateOne) RemoveDocumentIDs(ids ...pulid.ID) *CarrierBrandUpdateOne {
	cbuo.mutation.RemoveDocumentIDs(ids...)
	return cbuo
}

// RemoveDocument removes "document" edges to Document entities.
func (cbuo *CarrierBrandUpdateOne) RemoveDocument(d ...*Document) *CarrierBrandUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cbuo.RemoveDocumentIDs(ids...)
}

// Where appends a list predicates to the CarrierBrandUpdate builder.
func (cbuo *CarrierBrandUpdateOne) Where(ps ...predicate.CarrierBrand) *CarrierBrandUpdateOne {
	cbuo.mutation.Where(ps...)
	return cbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cbuo *CarrierBrandUpdateOne) Select(field string, fields ...string) *CarrierBrandUpdateOne {
	cbuo.fields = append([]string{field}, fields...)
	return cbuo
}

// Save executes the query and returns the updated CarrierBrand entity.
func (cbuo *CarrierBrandUpdateOne) Save(ctx context.Context) (*CarrierBrand, error) {
	return withHooks(ctx, cbuo.sqlSave, cbuo.mutation, cbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *CarrierBrandUpdateOne) SaveX(ctx context.Context) *CarrierBrand {
	node, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbuo *CarrierBrandUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *CarrierBrandUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbuo *CarrierBrandUpdateOne) check() error {
	if v, ok := cbuo.mutation.InternalID(); ok {
		if err := carrierbrand.InternalIDValidator(v); err != nil {
			return &ValidationError{Name: "internal_id", err: fmt.Errorf(`ent: validator failed for field "CarrierBrand.internal_id": %w`, err)}
		}
	}
	return nil
}

func (cbuo *CarrierBrandUpdateOne) sqlSave(ctx context.Context) (_node *CarrierBrand, err error) {
	if err := cbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierbrand.Table, carrierbrand.Columns, sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString))
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierBrand.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierbrand.FieldID)
		for _, f := range fields {
			if !carrierbrand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierbrand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbuo.mutation.Label(); ok {
		_spec.SetField(carrierbrand.FieldLabel, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.LabelShort(); ok {
		_spec.SetField(carrierbrand.FieldLabelShort, field.TypeString, value)
	}
	if value, ok := cbuo.mutation.InternalID(); ok {
		_spec.SetField(carrierbrand.FieldInternalID, field.TypeEnum, value)
	}
	if value, ok := cbuo.mutation.LogoURL(); ok {
		_spec.SetField(carrierbrand.FieldLogoURL, field.TypeString, value)
	}
	if cbuo.mutation.LogoURLCleared() {
		_spec.ClearField(carrierbrand.FieldLogoURL, field.TypeString)
	}
	if value, ok := cbuo.mutation.TextColor(); ok {
		_spec.SetField(carrierbrand.FieldTextColor, field.TypeString, value)
	}
	if cbuo.mutation.TextColorCleared() {
		_spec.ClearField(carrierbrand.FieldTextColor, field.TypeString)
	}
	if value, ok := cbuo.mutation.BackgroundColor(); ok {
		_spec.SetField(carrierbrand.FieldBackgroundColor, field.TypeString, value)
	}
	if cbuo.mutation.BackgroundColorCleared() {
		_spec.ClearField(carrierbrand.FieldBackgroundColor, field.TypeString)
	}
	if cbuo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RemovedCarrierServiceIDs(); len(nodes) > 0 && !cbuo.mutation.CarrierServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.CarrierServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RemovedCarrierIDs(); len(nodes) > 0 && !cbuo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RemovedParcelShopIDs(); len(nodes) > 0 && !cbuo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RemovedPackagingIDs(); len(nodes) > 0 && !cbuo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.RemovedDocumentIDs(); len(nodes) > 0 && !cbuo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierBrand{config: cbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierbrand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cbuo.mutation.done = true
	return _node, nil
}
