// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ShipmentParcelUpdate is the builder for updating ShipmentParcel entities.
type ShipmentParcelUpdate struct {
	config
	hooks    []Hook
	mutation *ShipmentParcelMutation
}

// Where appends a list predicates to the ShipmentParcelUpdate builder.
func (spu *ShipmentParcelUpdate) Where(ps ...predicate.ShipmentParcel) *ShipmentParcelUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetTenantID sets the "tenant_id" field.
func (spu *ShipmentParcelUpdate) SetTenantID(pu pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.SetTenantID(pu)
	return spu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableTenantID(pu *pulid.ID) *ShipmentParcelUpdate {
	if pu != nil {
		spu.SetTenantID(*pu)
	}
	return spu
}

// SetItemID sets the "item_id" field.
func (spu *ShipmentParcelUpdate) SetItemID(s string) *ShipmentParcelUpdate {
	spu.mutation.SetItemID(s)
	return spu
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableItemID(s *string) *ShipmentParcelUpdate {
	if s != nil {
		spu.SetItemID(*s)
	}
	return spu
}

// ClearItemID clears the value of the "item_id" field.
func (spu *ShipmentParcelUpdate) ClearItemID() *ShipmentParcelUpdate {
	spu.mutation.ClearItemID()
	return spu
}

// SetStatus sets the "status" field.
func (spu *ShipmentParcelUpdate) SetStatus(s shipmentparcel.Status) *ShipmentParcelUpdate {
	spu.mutation.SetStatus(s)
	return spu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableStatus(s *shipmentparcel.Status) *ShipmentParcelUpdate {
	if s != nil {
		spu.SetStatus(*s)
	}
	return spu
}

// SetCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field.
func (spu *ShipmentParcelUpdate) SetCcPickupSignatureUrls(s []string) *ShipmentParcelUpdate {
	spu.mutation.SetCcPickupSignatureUrls(s)
	return spu
}

// AppendCcPickupSignatureUrls appends s to the "cc_pickup_signature_urls" field.
func (spu *ShipmentParcelUpdate) AppendCcPickupSignatureUrls(s []string) *ShipmentParcelUpdate {
	spu.mutation.AppendCcPickupSignatureUrls(s)
	return spu
}

// ClearCcPickupSignatureUrls clears the value of the "cc_pickup_signature_urls" field.
func (spu *ShipmentParcelUpdate) ClearCcPickupSignatureUrls() *ShipmentParcelUpdate {
	spu.mutation.ClearCcPickupSignatureUrls()
	return spu
}

// SetExpectedAt sets the "expected_at" field.
func (spu *ShipmentParcelUpdate) SetExpectedAt(t time.Time) *ShipmentParcelUpdate {
	spu.mutation.SetExpectedAt(t)
	return spu
}

// SetNillableExpectedAt sets the "expected_at" field if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableExpectedAt(t *time.Time) *ShipmentParcelUpdate {
	if t != nil {
		spu.SetExpectedAt(*t)
	}
	return spu
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (spu *ShipmentParcelUpdate) ClearExpectedAt() *ShipmentParcelUpdate {
	spu.mutation.ClearExpectedAt()
	return spu
}

// SetFulfillmentSyncedAt sets the "fulfillment_synced_at" field.
func (spu *ShipmentParcelUpdate) SetFulfillmentSyncedAt(t time.Time) *ShipmentParcelUpdate {
	spu.mutation.SetFulfillmentSyncedAt(t)
	return spu
}

// SetNillableFulfillmentSyncedAt sets the "fulfillment_synced_at" field if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableFulfillmentSyncedAt(t *time.Time) *ShipmentParcelUpdate {
	if t != nil {
		spu.SetFulfillmentSyncedAt(*t)
	}
	return spu
}

// ClearFulfillmentSyncedAt clears the value of the "fulfillment_synced_at" field.
func (spu *ShipmentParcelUpdate) ClearFulfillmentSyncedAt() *ShipmentParcelUpdate {
	spu.mutation.ClearFulfillmentSyncedAt()
	return spu
}

// SetCancelSyncedAt sets the "cancel_synced_at" field.
func (spu *ShipmentParcelUpdate) SetCancelSyncedAt(t time.Time) *ShipmentParcelUpdate {
	spu.mutation.SetCancelSyncedAt(t)
	return spu
}

// SetNillableCancelSyncedAt sets the "cancel_synced_at" field if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableCancelSyncedAt(t *time.Time) *ShipmentParcelUpdate {
	if t != nil {
		spu.SetCancelSyncedAt(*t)
	}
	return spu
}

// ClearCancelSyncedAt clears the value of the "cancel_synced_at" field.
func (spu *ShipmentParcelUpdate) ClearCancelSyncedAt() *ShipmentParcelUpdate {
	spu.mutation.ClearCancelSyncedAt()
	return spu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spu *ShipmentParcelUpdate) SetTenant(t *Tenant) *ShipmentParcelUpdate {
	return spu.SetTenantID(t.ID)
}

// SetColliID sets the "colli" edge to the Colli entity by ID.
func (spu *ShipmentParcelUpdate) SetColliID(id pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.SetColliID(id)
	return spu
}

// SetNillableColliID sets the "colli" edge to the Colli entity by ID if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableColliID(id *pulid.ID) *ShipmentParcelUpdate {
	if id != nil {
		spu = spu.SetColliID(*id)
	}
	return spu
}

// SetColli sets the "colli" edge to the Colli entity.
func (spu *ShipmentParcelUpdate) SetColli(c *Colli) *ShipmentParcelUpdate {
	return spu.SetColliID(c.ID)
}

// AddOldColliIDs adds the "old_colli" edge to the Colli entity by IDs.
func (spu *ShipmentParcelUpdate) AddOldColliIDs(ids ...pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.AddOldColliIDs(ids...)
	return spu
}

// AddOldColli adds the "old_colli" edges to the Colli entity.
func (spu *ShipmentParcelUpdate) AddOldColli(c ...*Colli) *ShipmentParcelUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.AddOldColliIDs(ids...)
}

// AddWorkspaceRecentScanIDs adds the "workspace_recent_scan" edge to the WorkspaceRecentScan entity by IDs.
func (spu *ShipmentParcelUpdate) AddWorkspaceRecentScanIDs(ids ...pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.AddWorkspaceRecentScanIDs(ids...)
	return spu
}

// AddWorkspaceRecentScan adds the "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (spu *ShipmentParcelUpdate) AddWorkspaceRecentScan(w ...*WorkspaceRecentScan) *ShipmentParcelUpdate {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return spu.AddWorkspaceRecentScanIDs(ids...)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (spu *ShipmentParcelUpdate) SetPackagingID(id pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.SetPackagingID(id)
	return spu
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillablePackagingID(id *pulid.ID) *ShipmentParcelUpdate {
	if id != nil {
		spu = spu.SetPackagingID(*id)
	}
	return spu
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (spu *ShipmentParcelUpdate) SetPackaging(p *Packaging) *ShipmentParcelUpdate {
	return spu.SetPackagingID(p.ID)
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (spu *ShipmentParcelUpdate) AddPrintJobIDs(ids ...pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.AddPrintJobIDs(ids...)
	return spu
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (spu *ShipmentParcelUpdate) AddPrintJob(p ...*PrintJob) *ShipmentParcelUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spu.AddPrintJobIDs(ids...)
}

// SetDocumentFileID sets the "document_file" edge to the DocumentFile entity by ID.
func (spu *ShipmentParcelUpdate) SetDocumentFileID(id pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.SetDocumentFileID(id)
	return spu
}

// SetNillableDocumentFileID sets the "document_file" edge to the DocumentFile entity by ID if the given value is not nil.
func (spu *ShipmentParcelUpdate) SetNillableDocumentFileID(id *pulid.ID) *ShipmentParcelUpdate {
	if id != nil {
		spu = spu.SetDocumentFileID(*id)
	}
	return spu
}

// SetDocumentFile sets the "document_file" edge to the DocumentFile entity.
func (spu *ShipmentParcelUpdate) SetDocumentFile(d *DocumentFile) *ShipmentParcelUpdate {
	return spu.SetDocumentFileID(d.ID)
}

// Mutation returns the ShipmentParcelMutation object of the builder.
func (spu *ShipmentParcelUpdate) Mutation() *ShipmentParcelMutation {
	return spu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (spu *ShipmentParcelUpdate) ClearTenant() *ShipmentParcelUpdate {
	spu.mutation.ClearTenant()
	return spu
}

// ClearColli clears the "colli" edge to the Colli entity.
func (spu *ShipmentParcelUpdate) ClearColli() *ShipmentParcelUpdate {
	spu.mutation.ClearColli()
	return spu
}

// ClearOldColli clears all "old_colli" edges to the Colli entity.
func (spu *ShipmentParcelUpdate) ClearOldColli() *ShipmentParcelUpdate {
	spu.mutation.ClearOldColli()
	return spu
}

// RemoveOldColliIDs removes the "old_colli" edge to Colli entities by IDs.
func (spu *ShipmentParcelUpdate) RemoveOldColliIDs(ids ...pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.RemoveOldColliIDs(ids...)
	return spu
}

// RemoveOldColli removes "old_colli" edges to Colli entities.
func (spu *ShipmentParcelUpdate) RemoveOldColli(c ...*Colli) *ShipmentParcelUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.RemoveOldColliIDs(ids...)
}

// ClearWorkspaceRecentScan clears all "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (spu *ShipmentParcelUpdate) ClearWorkspaceRecentScan() *ShipmentParcelUpdate {
	spu.mutation.ClearWorkspaceRecentScan()
	return spu
}

// RemoveWorkspaceRecentScanIDs removes the "workspace_recent_scan" edge to WorkspaceRecentScan entities by IDs.
func (spu *ShipmentParcelUpdate) RemoveWorkspaceRecentScanIDs(ids ...pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.RemoveWorkspaceRecentScanIDs(ids...)
	return spu
}

// RemoveWorkspaceRecentScan removes "workspace_recent_scan" edges to WorkspaceRecentScan entities.
func (spu *ShipmentParcelUpdate) RemoveWorkspaceRecentScan(w ...*WorkspaceRecentScan) *ShipmentParcelUpdate {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return spu.RemoveWorkspaceRecentScanIDs(ids...)
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (spu *ShipmentParcelUpdate) ClearPackaging() *ShipmentParcelUpdate {
	spu.mutation.ClearPackaging()
	return spu
}

// ClearPrintJob clears all "print_job" edges to the PrintJob entity.
func (spu *ShipmentParcelUpdate) ClearPrintJob() *ShipmentParcelUpdate {
	spu.mutation.ClearPrintJob()
	return spu
}

// RemovePrintJobIDs removes the "print_job" edge to PrintJob entities by IDs.
func (spu *ShipmentParcelUpdate) RemovePrintJobIDs(ids ...pulid.ID) *ShipmentParcelUpdate {
	spu.mutation.RemovePrintJobIDs(ids...)
	return spu
}

// RemovePrintJob removes "print_job" edges to PrintJob entities.
func (spu *ShipmentParcelUpdate) RemovePrintJob(p ...*PrintJob) *ShipmentParcelUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spu.RemovePrintJobIDs(ids...)
}

// ClearDocumentFile clears the "document_file" edge to the DocumentFile entity.
func (spu *ShipmentParcelUpdate) ClearDocumentFile() *ShipmentParcelUpdate {
	spu.mutation.ClearDocumentFile()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *ShipmentParcelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *ShipmentParcelUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *ShipmentParcelUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *ShipmentParcelUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *ShipmentParcelUpdate) check() error {
	if v, ok := spu.mutation.Status(); ok {
		if err := shipmentparcel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentParcel.status": %w`, err)}
		}
	}
	if spu.mutation.TenantCleared() && len(spu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentParcel.tenant"`)
	}
	if spu.mutation.ShipmentCleared() && len(spu.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentParcel.shipment"`)
	}
	return nil
}

func (spu *ShipmentParcelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentparcel.Table, shipmentparcel.Columns, sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.ItemID(); ok {
		_spec.SetField(shipmentparcel.FieldItemID, field.TypeString, value)
	}
	if spu.mutation.ItemIDCleared() {
		_spec.ClearField(shipmentparcel.FieldItemID, field.TypeString)
	}
	if value, ok := spu.mutation.Status(); ok {
		_spec.SetField(shipmentparcel.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := spu.mutation.CcPickupSignatureUrls(); ok {
		_spec.SetField(shipmentparcel.FieldCcPickupSignatureUrls, field.TypeJSON, value)
	}
	if value, ok := spu.mutation.AppendedCcPickupSignatureUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, shipmentparcel.FieldCcPickupSignatureUrls, value)
		})
	}
	if spu.mutation.CcPickupSignatureUrlsCleared() {
		_spec.ClearField(shipmentparcel.FieldCcPickupSignatureUrls, field.TypeJSON)
	}
	if value, ok := spu.mutation.ExpectedAt(); ok {
		_spec.SetField(shipmentparcel.FieldExpectedAt, field.TypeTime, value)
	}
	if spu.mutation.ExpectedAtCleared() {
		_spec.ClearField(shipmentparcel.FieldExpectedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.FulfillmentSyncedAt(); ok {
		_spec.SetField(shipmentparcel.FieldFulfillmentSyncedAt, field.TypeTime, value)
	}
	if spu.mutation.FulfillmentSyncedAtCleared() {
		_spec.ClearField(shipmentparcel.FieldFulfillmentSyncedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.CancelSyncedAt(); ok {
		_spec.SetField(shipmentparcel.FieldCancelSyncedAt, field.TypeTime, value)
	}
	if spu.mutation.CancelSyncedAtCleared() {
		_spec.ClearField(shipmentparcel.FieldCancelSyncedAt, field.TypeTime)
	}
	if spu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.TenantTable,
			Columns: []string{shipmentparcel.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.TenantTable,
			Columns: []string{shipmentparcel.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentparcel.ColliTable,
			Columns: []string{shipmentparcel.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentparcel.ColliTable,
			Columns: []string{shipmentparcel.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.OldColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedOldColliIDs(); len(nodes) > 0 && !spu.mutation.OldColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.OldColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedWorkspaceRecentScanIDs(); len(nodes) > 0 && !spu.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.WorkspaceRecentScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.PackagingTable,
			Columns: []string{shipmentparcel.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.PackagingTable,
			Columns: []string{shipmentparcel.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedPrintJobIDs(); len(nodes) > 0 && !spu.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.DocumentFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentparcel.DocumentFileTable,
			Columns: []string{shipmentparcel.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.DocumentFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentparcel.DocumentFileTable,
			Columns: []string{shipmentparcel.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentparcel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// ShipmentParcelUpdateOne is the builder for updating a single ShipmentParcel entity.
type ShipmentParcelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShipmentParcelMutation
}

// SetTenantID sets the "tenant_id" field.
func (spuo *ShipmentParcelUpdateOne) SetTenantID(pu pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.SetTenantID(pu)
	return spuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableTenantID(pu *pulid.ID) *ShipmentParcelUpdateOne {
	if pu != nil {
		spuo.SetTenantID(*pu)
	}
	return spuo
}

// SetItemID sets the "item_id" field.
func (spuo *ShipmentParcelUpdateOne) SetItemID(s string) *ShipmentParcelUpdateOne {
	spuo.mutation.SetItemID(s)
	return spuo
}

// SetNillableItemID sets the "item_id" field if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableItemID(s *string) *ShipmentParcelUpdateOne {
	if s != nil {
		spuo.SetItemID(*s)
	}
	return spuo
}

// ClearItemID clears the value of the "item_id" field.
func (spuo *ShipmentParcelUpdateOne) ClearItemID() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearItemID()
	return spuo
}

// SetStatus sets the "status" field.
func (spuo *ShipmentParcelUpdateOne) SetStatus(s shipmentparcel.Status) *ShipmentParcelUpdateOne {
	spuo.mutation.SetStatus(s)
	return spuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableStatus(s *shipmentparcel.Status) *ShipmentParcelUpdateOne {
	if s != nil {
		spuo.SetStatus(*s)
	}
	return spuo
}

// SetCcPickupSignatureUrls sets the "cc_pickup_signature_urls" field.
func (spuo *ShipmentParcelUpdateOne) SetCcPickupSignatureUrls(s []string) *ShipmentParcelUpdateOne {
	spuo.mutation.SetCcPickupSignatureUrls(s)
	return spuo
}

// AppendCcPickupSignatureUrls appends s to the "cc_pickup_signature_urls" field.
func (spuo *ShipmentParcelUpdateOne) AppendCcPickupSignatureUrls(s []string) *ShipmentParcelUpdateOne {
	spuo.mutation.AppendCcPickupSignatureUrls(s)
	return spuo
}

// ClearCcPickupSignatureUrls clears the value of the "cc_pickup_signature_urls" field.
func (spuo *ShipmentParcelUpdateOne) ClearCcPickupSignatureUrls() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearCcPickupSignatureUrls()
	return spuo
}

// SetExpectedAt sets the "expected_at" field.
func (spuo *ShipmentParcelUpdateOne) SetExpectedAt(t time.Time) *ShipmentParcelUpdateOne {
	spuo.mutation.SetExpectedAt(t)
	return spuo
}

// SetNillableExpectedAt sets the "expected_at" field if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableExpectedAt(t *time.Time) *ShipmentParcelUpdateOne {
	if t != nil {
		spuo.SetExpectedAt(*t)
	}
	return spuo
}

// ClearExpectedAt clears the value of the "expected_at" field.
func (spuo *ShipmentParcelUpdateOne) ClearExpectedAt() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearExpectedAt()
	return spuo
}

// SetFulfillmentSyncedAt sets the "fulfillment_synced_at" field.
func (spuo *ShipmentParcelUpdateOne) SetFulfillmentSyncedAt(t time.Time) *ShipmentParcelUpdateOne {
	spuo.mutation.SetFulfillmentSyncedAt(t)
	return spuo
}

// SetNillableFulfillmentSyncedAt sets the "fulfillment_synced_at" field if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableFulfillmentSyncedAt(t *time.Time) *ShipmentParcelUpdateOne {
	if t != nil {
		spuo.SetFulfillmentSyncedAt(*t)
	}
	return spuo
}

// ClearFulfillmentSyncedAt clears the value of the "fulfillment_synced_at" field.
func (spuo *ShipmentParcelUpdateOne) ClearFulfillmentSyncedAt() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearFulfillmentSyncedAt()
	return spuo
}

// SetCancelSyncedAt sets the "cancel_synced_at" field.
func (spuo *ShipmentParcelUpdateOne) SetCancelSyncedAt(t time.Time) *ShipmentParcelUpdateOne {
	spuo.mutation.SetCancelSyncedAt(t)
	return spuo
}

// SetNillableCancelSyncedAt sets the "cancel_synced_at" field if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableCancelSyncedAt(t *time.Time) *ShipmentParcelUpdateOne {
	if t != nil {
		spuo.SetCancelSyncedAt(*t)
	}
	return spuo
}

// ClearCancelSyncedAt clears the value of the "cancel_synced_at" field.
func (spuo *ShipmentParcelUpdateOne) ClearCancelSyncedAt() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearCancelSyncedAt()
	return spuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spuo *ShipmentParcelUpdateOne) SetTenant(t *Tenant) *ShipmentParcelUpdateOne {
	return spuo.SetTenantID(t.ID)
}

// SetColliID sets the "colli" edge to the Colli entity by ID.
func (spuo *ShipmentParcelUpdateOne) SetColliID(id pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.SetColliID(id)
	return spuo
}

// SetNillableColliID sets the "colli" edge to the Colli entity by ID if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableColliID(id *pulid.ID) *ShipmentParcelUpdateOne {
	if id != nil {
		spuo = spuo.SetColliID(*id)
	}
	return spuo
}

// SetColli sets the "colli" edge to the Colli entity.
func (spuo *ShipmentParcelUpdateOne) SetColli(c *Colli) *ShipmentParcelUpdateOne {
	return spuo.SetColliID(c.ID)
}

// AddOldColliIDs adds the "old_colli" edge to the Colli entity by IDs.
func (spuo *ShipmentParcelUpdateOne) AddOldColliIDs(ids ...pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.AddOldColliIDs(ids...)
	return spuo
}

// AddOldColli adds the "old_colli" edges to the Colli entity.
func (spuo *ShipmentParcelUpdateOne) AddOldColli(c ...*Colli) *ShipmentParcelUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.AddOldColliIDs(ids...)
}

// AddWorkspaceRecentScanIDs adds the "workspace_recent_scan" edge to the WorkspaceRecentScan entity by IDs.
func (spuo *ShipmentParcelUpdateOne) AddWorkspaceRecentScanIDs(ids ...pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.AddWorkspaceRecentScanIDs(ids...)
	return spuo
}

// AddWorkspaceRecentScan adds the "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (spuo *ShipmentParcelUpdateOne) AddWorkspaceRecentScan(w ...*WorkspaceRecentScan) *ShipmentParcelUpdateOne {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return spuo.AddWorkspaceRecentScanIDs(ids...)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (spuo *ShipmentParcelUpdateOne) SetPackagingID(id pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.SetPackagingID(id)
	return spuo
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillablePackagingID(id *pulid.ID) *ShipmentParcelUpdateOne {
	if id != nil {
		spuo = spuo.SetPackagingID(*id)
	}
	return spuo
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (spuo *ShipmentParcelUpdateOne) SetPackaging(p *Packaging) *ShipmentParcelUpdateOne {
	return spuo.SetPackagingID(p.ID)
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (spuo *ShipmentParcelUpdateOne) AddPrintJobIDs(ids ...pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.AddPrintJobIDs(ids...)
	return spuo
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (spuo *ShipmentParcelUpdateOne) AddPrintJob(p ...*PrintJob) *ShipmentParcelUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spuo.AddPrintJobIDs(ids...)
}

// SetDocumentFileID sets the "document_file" edge to the DocumentFile entity by ID.
func (spuo *ShipmentParcelUpdateOne) SetDocumentFileID(id pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.SetDocumentFileID(id)
	return spuo
}

// SetNillableDocumentFileID sets the "document_file" edge to the DocumentFile entity by ID if the given value is not nil.
func (spuo *ShipmentParcelUpdateOne) SetNillableDocumentFileID(id *pulid.ID) *ShipmentParcelUpdateOne {
	if id != nil {
		spuo = spuo.SetDocumentFileID(*id)
	}
	return spuo
}

// SetDocumentFile sets the "document_file" edge to the DocumentFile entity.
func (spuo *ShipmentParcelUpdateOne) SetDocumentFile(d *DocumentFile) *ShipmentParcelUpdateOne {
	return spuo.SetDocumentFileID(d.ID)
}

// Mutation returns the ShipmentParcelMutation object of the builder.
func (spuo *ShipmentParcelUpdateOne) Mutation() *ShipmentParcelMutation {
	return spuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (spuo *ShipmentParcelUpdateOne) ClearTenant() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearTenant()
	return spuo
}

// ClearColli clears the "colli" edge to the Colli entity.
func (spuo *ShipmentParcelUpdateOne) ClearColli() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearColli()
	return spuo
}

// ClearOldColli clears all "old_colli" edges to the Colli entity.
func (spuo *ShipmentParcelUpdateOne) ClearOldColli() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearOldColli()
	return spuo
}

// RemoveOldColliIDs removes the "old_colli" edge to Colli entities by IDs.
func (spuo *ShipmentParcelUpdateOne) RemoveOldColliIDs(ids ...pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.RemoveOldColliIDs(ids...)
	return spuo
}

// RemoveOldColli removes "old_colli" edges to Colli entities.
func (spuo *ShipmentParcelUpdateOne) RemoveOldColli(c ...*Colli) *ShipmentParcelUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.RemoveOldColliIDs(ids...)
}

// ClearWorkspaceRecentScan clears all "workspace_recent_scan" edges to the WorkspaceRecentScan entity.
func (spuo *ShipmentParcelUpdateOne) ClearWorkspaceRecentScan() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearWorkspaceRecentScan()
	return spuo
}

// RemoveWorkspaceRecentScanIDs removes the "workspace_recent_scan" edge to WorkspaceRecentScan entities by IDs.
func (spuo *ShipmentParcelUpdateOne) RemoveWorkspaceRecentScanIDs(ids ...pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.RemoveWorkspaceRecentScanIDs(ids...)
	return spuo
}

// RemoveWorkspaceRecentScan removes "workspace_recent_scan" edges to WorkspaceRecentScan entities.
func (spuo *ShipmentParcelUpdateOne) RemoveWorkspaceRecentScan(w ...*WorkspaceRecentScan) *ShipmentParcelUpdateOne {
	ids := make([]pulid.ID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return spuo.RemoveWorkspaceRecentScanIDs(ids...)
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (spuo *ShipmentParcelUpdateOne) ClearPackaging() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearPackaging()
	return spuo
}

// ClearPrintJob clears all "print_job" edges to the PrintJob entity.
func (spuo *ShipmentParcelUpdateOne) ClearPrintJob() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearPrintJob()
	return spuo
}

// RemovePrintJobIDs removes the "print_job" edge to PrintJob entities by IDs.
func (spuo *ShipmentParcelUpdateOne) RemovePrintJobIDs(ids ...pulid.ID) *ShipmentParcelUpdateOne {
	spuo.mutation.RemovePrintJobIDs(ids...)
	return spuo
}

// RemovePrintJob removes "print_job" edges to PrintJob entities.
func (spuo *ShipmentParcelUpdateOne) RemovePrintJob(p ...*PrintJob) *ShipmentParcelUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return spuo.RemovePrintJobIDs(ids...)
}

// ClearDocumentFile clears the "document_file" edge to the DocumentFile entity.
func (spuo *ShipmentParcelUpdateOne) ClearDocumentFile() *ShipmentParcelUpdateOne {
	spuo.mutation.ClearDocumentFile()
	return spuo
}

// Where appends a list predicates to the ShipmentParcelUpdate builder.
func (spuo *ShipmentParcelUpdateOne) Where(ps ...predicate.ShipmentParcel) *ShipmentParcelUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *ShipmentParcelUpdateOne) Select(field string, fields ...string) *ShipmentParcelUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated ShipmentParcel entity.
func (spuo *ShipmentParcelUpdateOne) Save(ctx context.Context) (*ShipmentParcel, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *ShipmentParcelUpdateOne) SaveX(ctx context.Context) *ShipmentParcel {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *ShipmentParcelUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *ShipmentParcelUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *ShipmentParcelUpdateOne) check() error {
	if v, ok := spuo.mutation.Status(); ok {
		if err := shipmentparcel.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ShipmentParcel.status": %w`, err)}
		}
	}
	if spuo.mutation.TenantCleared() && len(spuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentParcel.tenant"`)
	}
	if spuo.mutation.ShipmentCleared() && len(spuo.mutation.ShipmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ShipmentParcel.shipment"`)
	}
	return nil
}

func (spuo *ShipmentParcelUpdateOne) sqlSave(ctx context.Context) (_node *ShipmentParcel, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(shipmentparcel.Table, shipmentparcel.Columns, sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShipmentParcel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shipmentparcel.FieldID)
		for _, f := range fields {
			if !shipmentparcel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shipmentparcel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.ItemID(); ok {
		_spec.SetField(shipmentparcel.FieldItemID, field.TypeString, value)
	}
	if spuo.mutation.ItemIDCleared() {
		_spec.ClearField(shipmentparcel.FieldItemID, field.TypeString)
	}
	if value, ok := spuo.mutation.Status(); ok {
		_spec.SetField(shipmentparcel.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := spuo.mutation.CcPickupSignatureUrls(); ok {
		_spec.SetField(shipmentparcel.FieldCcPickupSignatureUrls, field.TypeJSON, value)
	}
	if value, ok := spuo.mutation.AppendedCcPickupSignatureUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, shipmentparcel.FieldCcPickupSignatureUrls, value)
		})
	}
	if spuo.mutation.CcPickupSignatureUrlsCleared() {
		_spec.ClearField(shipmentparcel.FieldCcPickupSignatureUrls, field.TypeJSON)
	}
	if value, ok := spuo.mutation.ExpectedAt(); ok {
		_spec.SetField(shipmentparcel.FieldExpectedAt, field.TypeTime, value)
	}
	if spuo.mutation.ExpectedAtCleared() {
		_spec.ClearField(shipmentparcel.FieldExpectedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.FulfillmentSyncedAt(); ok {
		_spec.SetField(shipmentparcel.FieldFulfillmentSyncedAt, field.TypeTime, value)
	}
	if spuo.mutation.FulfillmentSyncedAtCleared() {
		_spec.ClearField(shipmentparcel.FieldFulfillmentSyncedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.CancelSyncedAt(); ok {
		_spec.SetField(shipmentparcel.FieldCancelSyncedAt, field.TypeTime, value)
	}
	if spuo.mutation.CancelSyncedAtCleared() {
		_spec.ClearField(shipmentparcel.FieldCancelSyncedAt, field.TypeTime)
	}
	if spuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.TenantTable,
			Columns: []string{shipmentparcel.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.TenantTable,
			Columns: []string{shipmentparcel.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentparcel.ColliTable,
			Columns: []string{shipmentparcel.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentparcel.ColliTable,
			Columns: []string{shipmentparcel.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.OldColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedOldColliIDs(); len(nodes) > 0 && !spuo.mutation.OldColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.OldColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedWorkspaceRecentScanIDs(); len(nodes) > 0 && !spuo.mutation.WorkspaceRecentScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.WorkspaceRecentScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspacerecentscan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.PackagingTable,
			Columns: []string{shipmentparcel.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.PackagingTable,
			Columns: []string{shipmentparcel.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedPrintJobIDs(); len(nodes) > 0 && !spuo.mutation.PrintJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.DocumentFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentparcel.DocumentFileTable,
			Columns: []string{shipmentparcel.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.DocumentFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentparcel.DocumentFileTable,
			Columns: []string{shipmentparcel.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShipmentParcel{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shipmentparcel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
