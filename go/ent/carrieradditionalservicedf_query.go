// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceDFQuery is the builder for querying CarrierAdditionalServiceDF entities.
type CarrierAdditionalServiceDFQuery struct {
	config
	ctx                       *QueryContext
	order                     []carrieradditionalservicedf.OrderOption
	inters                    []Interceptor
	predicates                []predicate.CarrierAdditionalServiceDF
	withCarrierServiceDF      *CarrierServiceDFQuery
	withDeliveryOptionDF      *DeliveryOptionDFQuery
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*CarrierAdditionalServiceDF) error
	withNamedCarrierServiceDF map[string]*CarrierServiceDFQuery
	withNamedDeliveryOptionDF map[string]*DeliveryOptionDFQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierAdditionalServiceDFQuery builder.
func (casdq *CarrierAdditionalServiceDFQuery) Where(ps ...predicate.CarrierAdditionalServiceDF) *CarrierAdditionalServiceDFQuery {
	casdq.predicates = append(casdq.predicates, ps...)
	return casdq
}

// Limit the number of records to be returned by this query.
func (casdq *CarrierAdditionalServiceDFQuery) Limit(limit int) *CarrierAdditionalServiceDFQuery {
	casdq.ctx.Limit = &limit
	return casdq
}

// Offset to start from.
func (casdq *CarrierAdditionalServiceDFQuery) Offset(offset int) *CarrierAdditionalServiceDFQuery {
	casdq.ctx.Offset = &offset
	return casdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (casdq *CarrierAdditionalServiceDFQuery) Unique(unique bool) *CarrierAdditionalServiceDFQuery {
	casdq.ctx.Unique = &unique
	return casdq
}

// Order specifies how the records should be ordered.
func (casdq *CarrierAdditionalServiceDFQuery) Order(o ...carrieradditionalservicedf.OrderOption) *CarrierAdditionalServiceDFQuery {
	casdq.order = append(casdq.order, o...)
	return casdq
}

// QueryCarrierServiceDF chains the current query on the "carrier_service_df" edge.
func (casdq *CarrierAdditionalServiceDFQuery) QueryCarrierServiceDF() *CarrierServiceDFQuery {
	query := (&CarrierServiceDFClient{config: casdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID, selector),
			sqlgraph.To(carrierservicedf.Table, carrierservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedf.CarrierServiceDFTable, carrieradditionalservicedf.CarrierServiceDFPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionDF chains the current query on the "delivery_option_df" edge.
func (casdq *CarrierAdditionalServiceDFQuery) QueryDeliveryOptionDF() *DeliveryOptionDFQuery {
	query := (&DeliveryOptionDFClient{config: casdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID, selector),
			sqlgraph.To(deliveryoptiondf.Table, deliveryoptiondf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedf.DeliveryOptionDFTable, carrieradditionalservicedf.DeliveryOptionDFPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierAdditionalServiceDF entity from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceDF was found.
func (casdq *CarrierAdditionalServiceDFQuery) First(ctx context.Context) (*CarrierAdditionalServiceDF, error) {
	nodes, err := casdq.Limit(1).All(setContextOp(ctx, casdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrieradditionalservicedf.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) FirstX(ctx context.Context) *CarrierAdditionalServiceDF {
	node, err := casdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierAdditionalServiceDF ID from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceDF ID was found.
func (casdq *CarrierAdditionalServiceDFQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casdq.Limit(1).IDs(setContextOp(ctx, casdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrieradditionalservicedf.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := casdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierAdditionalServiceDF entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceDF entity is found.
// Returns a *NotFoundError when no CarrierAdditionalServiceDF entities are found.
func (casdq *CarrierAdditionalServiceDFQuery) Only(ctx context.Context) (*CarrierAdditionalServiceDF, error) {
	nodes, err := casdq.Limit(2).All(setContextOp(ctx, casdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrieradditionalservicedf.Label}
	default:
		return nil, &NotSingularError{carrieradditionalservicedf.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) OnlyX(ctx context.Context) *CarrierAdditionalServiceDF {
	node, err := casdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierAdditionalServiceDF ID in the query.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceDF ID is found.
// Returns a *NotFoundError when no entities are found.
func (casdq *CarrierAdditionalServiceDFQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casdq.Limit(2).IDs(setContextOp(ctx, casdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrieradditionalservicedf.Label}
	default:
		err = &NotSingularError{carrieradditionalservicedf.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := casdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierAdditionalServiceDFs.
func (casdq *CarrierAdditionalServiceDFQuery) All(ctx context.Context) ([]*CarrierAdditionalServiceDF, error) {
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryAll)
	if err := casdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierAdditionalServiceDF, *CarrierAdditionalServiceDFQuery]()
	return withInterceptors[[]*CarrierAdditionalServiceDF](ctx, casdq, qr, casdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) AllX(ctx context.Context) []*CarrierAdditionalServiceDF {
	nodes, err := casdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierAdditionalServiceDF IDs.
func (casdq *CarrierAdditionalServiceDFQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if casdq.ctx.Unique == nil && casdq.path != nil {
		casdq.Unique(true)
	}
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryIDs)
	if err = casdq.Select(carrieradditionalservicedf.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := casdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (casdq *CarrierAdditionalServiceDFQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryCount)
	if err := casdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, casdq, querierCount[*CarrierAdditionalServiceDFQuery](), casdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) CountX(ctx context.Context) int {
	count, err := casdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (casdq *CarrierAdditionalServiceDFQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryExist)
	switch _, err := casdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDFQuery) ExistX(ctx context.Context) bool {
	exist, err := casdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierAdditionalServiceDFQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (casdq *CarrierAdditionalServiceDFQuery) Clone() *CarrierAdditionalServiceDFQuery {
	if casdq == nil {
		return nil
	}
	return &CarrierAdditionalServiceDFQuery{
		config:               casdq.config,
		ctx:                  casdq.ctx.Clone(),
		order:                append([]carrieradditionalservicedf.OrderOption{}, casdq.order...),
		inters:               append([]Interceptor{}, casdq.inters...),
		predicates:           append([]predicate.CarrierAdditionalServiceDF{}, casdq.predicates...),
		withCarrierServiceDF: casdq.withCarrierServiceDF.Clone(),
		withDeliveryOptionDF: casdq.withDeliveryOptionDF.Clone(),
		// clone intermediate query.
		sql:  casdq.sql.Clone(),
		path: casdq.path,
	}
}

// WithCarrierServiceDF tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_df" edge. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDFQuery) WithCarrierServiceDF(opts ...func(*CarrierServiceDFQuery)) *CarrierAdditionalServiceDFQuery {
	query := (&CarrierServiceDFClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casdq.withCarrierServiceDF = query
	return casdq
}

// WithDeliveryOptionDF tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_df" edge. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDFQuery) WithDeliveryOptionDF(opts ...func(*DeliveryOptionDFQuery)) *CarrierAdditionalServiceDFQuery {
	query := (&DeliveryOptionDFClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casdq.withDeliveryOptionDF = query
	return casdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceDF.Query().
//		GroupBy(carrieradditionalservicedf.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (casdq *CarrierAdditionalServiceDFQuery) GroupBy(field string, fields ...string) *CarrierAdditionalServiceDFGroupBy {
	casdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierAdditionalServiceDFGroupBy{build: casdq}
	grbuild.flds = &casdq.ctx.Fields
	grbuild.label = carrieradditionalservicedf.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceDF.Query().
//		Select(carrieradditionalservicedf.FieldLabel).
//		Scan(ctx, &v)
func (casdq *CarrierAdditionalServiceDFQuery) Select(fields ...string) *CarrierAdditionalServiceDFSelect {
	casdq.ctx.Fields = append(casdq.ctx.Fields, fields...)
	sbuild := &CarrierAdditionalServiceDFSelect{CarrierAdditionalServiceDFQuery: casdq}
	sbuild.label = carrieradditionalservicedf.Label
	sbuild.flds, sbuild.scan = &casdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierAdditionalServiceDFSelect configured with the given aggregations.
func (casdq *CarrierAdditionalServiceDFQuery) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceDFSelect {
	return casdq.Select().Aggregate(fns...)
}

func (casdq *CarrierAdditionalServiceDFQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range casdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, casdq); err != nil {
				return err
			}
		}
	}
	for _, f := range casdq.ctx.Fields {
		if !carrieradditionalservicedf.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if casdq.path != nil {
		prev, err := casdq.path(ctx)
		if err != nil {
			return err
		}
		casdq.sql = prev
	}
	if carrieradditionalservicedf.Policy == nil {
		return errors.New("ent: uninitialized carrieradditionalservicedf.Policy (forgotten import ent/runtime?)")
	}
	if err := carrieradditionalservicedf.Policy.EvalQuery(ctx, casdq); err != nil {
		return err
	}
	return nil
}

func (casdq *CarrierAdditionalServiceDFQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierAdditionalServiceDF, error) {
	var (
		nodes       = []*CarrierAdditionalServiceDF{}
		_spec       = casdq.querySpec()
		loadedTypes = [2]bool{
			casdq.withCarrierServiceDF != nil,
			casdq.withDeliveryOptionDF != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierAdditionalServiceDF).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierAdditionalServiceDF{config: casdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(casdq.modifiers) > 0 {
		_spec.Modifiers = casdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, casdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := casdq.withCarrierServiceDF; query != nil {
		if err := casdq.loadCarrierServiceDF(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDF) { n.Edges.CarrierServiceDF = []*CarrierServiceDF{} },
			func(n *CarrierAdditionalServiceDF, e *CarrierServiceDF) {
				n.Edges.CarrierServiceDF = append(n.Edges.CarrierServiceDF, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := casdq.withDeliveryOptionDF; query != nil {
		if err := casdq.loadDeliveryOptionDF(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDF) { n.Edges.DeliveryOptionDF = []*DeliveryOptionDF{} },
			func(n *CarrierAdditionalServiceDF, e *DeliveryOptionDF) {
				n.Edges.DeliveryOptionDF = append(n.Edges.DeliveryOptionDF, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range casdq.withNamedCarrierServiceDF {
		if err := casdq.loadCarrierServiceDF(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDF) { n.appendNamedCarrierServiceDF(name) },
			func(n *CarrierAdditionalServiceDF, e *CarrierServiceDF) { n.appendNamedCarrierServiceDF(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range casdq.withNamedDeliveryOptionDF {
		if err := casdq.loadDeliveryOptionDF(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDF) { n.appendNamedDeliveryOptionDF(name) },
			func(n *CarrierAdditionalServiceDF, e *DeliveryOptionDF) { n.appendNamedDeliveryOptionDF(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range casdq.loadTotal {
		if err := casdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (casdq *CarrierAdditionalServiceDFQuery) loadCarrierServiceDF(ctx context.Context, query *CarrierServiceDFQuery, nodes []*CarrierAdditionalServiceDF, init func(*CarrierAdditionalServiceDF), assign func(*CarrierAdditionalServiceDF, *CarrierServiceDF)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceDF)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceDF]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicedf.CarrierServiceDFTable)
		s.Join(joinT).On(s.C(carrierservicedf.FieldID), joinT.C(carrieradditionalservicedf.CarrierServiceDFPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicedf.CarrierServiceDFPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicedf.CarrierServiceDFPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceDF]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierServiceDF](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_service_df" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (casdq *CarrierAdditionalServiceDFQuery) loadDeliveryOptionDF(ctx context.Context, query *DeliveryOptionDFQuery, nodes []*CarrierAdditionalServiceDF, init func(*CarrierAdditionalServiceDF), assign func(*CarrierAdditionalServiceDF, *DeliveryOptionDF)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceDF)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceDF]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicedf.DeliveryOptionDFTable)
		s.Join(joinT).On(s.C(deliveryoptiondf.FieldID), joinT.C(carrieradditionalservicedf.DeliveryOptionDFPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicedf.DeliveryOptionDFPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicedf.DeliveryOptionDFPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceDF]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOptionDF](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_df" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (casdq *CarrierAdditionalServiceDFQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := casdq.querySpec()
	if len(casdq.modifiers) > 0 {
		_spec.Modifiers = casdq.modifiers
	}
	_spec.Node.Columns = casdq.ctx.Fields
	if len(casdq.ctx.Fields) > 0 {
		_spec.Unique = casdq.ctx.Unique != nil && *casdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, casdq.driver, _spec)
}

func (casdq *CarrierAdditionalServiceDFQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrieradditionalservicedf.Table, carrieradditionalservicedf.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedf.FieldID, field.TypeString))
	_spec.From = casdq.sql
	if unique := casdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if casdq.path != nil {
		_spec.Unique = true
	}
	if fields := casdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicedf.FieldID)
		for i := range fields {
			if fields[i] != carrieradditionalservicedf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := casdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := casdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := casdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := casdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (casdq *CarrierAdditionalServiceDFQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(casdq.driver.Dialect())
	t1 := builder.Table(carrieradditionalservicedf.Table)
	columns := casdq.ctx.Fields
	if len(columns) == 0 {
		columns = carrieradditionalservicedf.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if casdq.sql != nil {
		selector = casdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if casdq.ctx.Unique != nil && *casdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range casdq.predicates {
		p(selector)
	}
	for _, p := range casdq.order {
		p(selector)
	}
	if offset := casdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := casdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierServiceDF tells the query-builder to eager-load the nodes that are connected to the "carrier_service_df"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDFQuery) WithNamedCarrierServiceDF(name string, opts ...func(*CarrierServiceDFQuery)) *CarrierAdditionalServiceDFQuery {
	query := (&CarrierServiceDFClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casdq.withNamedCarrierServiceDF == nil {
		casdq.withNamedCarrierServiceDF = make(map[string]*CarrierServiceDFQuery)
	}
	casdq.withNamedCarrierServiceDF[name] = query
	return casdq
}

// WithNamedDeliveryOptionDF tells the query-builder to eager-load the nodes that are connected to the "delivery_option_df"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDFQuery) WithNamedDeliveryOptionDF(name string, opts ...func(*DeliveryOptionDFQuery)) *CarrierAdditionalServiceDFQuery {
	query := (&DeliveryOptionDFClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casdq.withNamedDeliveryOptionDF == nil {
		casdq.withNamedDeliveryOptionDF = make(map[string]*DeliveryOptionDFQuery)
	}
	casdq.withNamedDeliveryOptionDF[name] = query
	return casdq
}

// CarrierAdditionalServiceDFGroupBy is the group-by builder for CarrierAdditionalServiceDF entities.
type CarrierAdditionalServiceDFGroupBy struct {
	selector
	build *CarrierAdditionalServiceDFQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (casdgb *CarrierAdditionalServiceDFGroupBy) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceDFGroupBy {
	casdgb.fns = append(casdgb.fns, fns...)
	return casdgb
}

// Scan applies the selector query and scans the result into the given value.
func (casdgb *CarrierAdditionalServiceDFGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casdgb.build.ctx, ent.OpQueryGroupBy)
	if err := casdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceDFQuery, *CarrierAdditionalServiceDFGroupBy](ctx, casdgb.build, casdgb, casdgb.build.inters, v)
}

func (casdgb *CarrierAdditionalServiceDFGroupBy) sqlScan(ctx context.Context, root *CarrierAdditionalServiceDFQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(casdgb.fns))
	for _, fn := range casdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*casdgb.flds)+len(casdgb.fns))
		for _, f := range *casdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*casdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierAdditionalServiceDFSelect is the builder for selecting fields of CarrierAdditionalServiceDF entities.
type CarrierAdditionalServiceDFSelect struct {
	*CarrierAdditionalServiceDFQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (casds *CarrierAdditionalServiceDFSelect) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceDFSelect {
	casds.fns = append(casds.fns, fns...)
	return casds
}

// Scan applies the selector query and scans the result into the given value.
func (casds *CarrierAdditionalServiceDFSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casds.ctx, ent.OpQuerySelect)
	if err := casds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceDFQuery, *CarrierAdditionalServiceDFSelect](ctx, casds.CarrierAdditionalServiceDFQuery, casds, casds.inters, v)
}

func (casds *CarrierAdditionalServiceDFSelect) sqlScan(ctx context.Context, root *CarrierAdditionalServiceDFQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(casds.fns))
	for _, fn := range casds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*casds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
