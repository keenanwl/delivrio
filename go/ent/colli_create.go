// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ColliCreate is the builder for creating a Colli entity.
type ColliCreate struct {
	config
	mutation *ColliMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cc *ColliCreate) SetTenantID(pu pulid.ID) *ColliCreate {
	cc.mutation.SetTenantID(pu)
	return cc
}

// SetInternalBarcode sets the "internal_barcode" field.
func (cc *ColliCreate) SetInternalBarcode(i int64) *ColliCreate {
	cc.mutation.SetInternalBarcode(i)
	return cc
}

// SetNillableInternalBarcode sets the "internal_barcode" field if the given value is not nil.
func (cc *ColliCreate) SetNillableInternalBarcode(i *int64) *ColliCreate {
	if i != nil {
		cc.SetInternalBarcode(*i)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ColliCreate) SetStatus(c colli.Status) *ColliCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetSlipPrintStatus sets the "slip_print_status" field.
func (cc *ColliCreate) SetSlipPrintStatus(cps colli.SlipPrintStatus) *ColliCreate {
	cc.mutation.SetSlipPrintStatus(cps)
	return cc
}

// SetNillableSlipPrintStatus sets the "slip_print_status" field if the given value is not nil.
func (cc *ColliCreate) SetNillableSlipPrintStatus(cps *colli.SlipPrintStatus) *ColliCreate {
	if cps != nil {
		cc.SetSlipPrintStatus(*cps)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ColliCreate) SetCreatedAt(t time.Time) *ColliCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ColliCreate) SetNillableCreatedAt(t *time.Time) *ColliCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field.
func (cc *ColliCreate) SetEmailPackingSlipPrintedAt(t time.Time) *ColliCreate {
	cc.mutation.SetEmailPackingSlipPrintedAt(t)
	return cc
}

// SetNillableEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field if the given value is not nil.
func (cc *ColliCreate) SetNillableEmailPackingSlipPrintedAt(t *time.Time) *ColliCreate {
	if t != nil {
		cc.SetEmailPackingSlipPrintedAt(*t)
	}
	return cc
}

// SetEmailLabelPrintedAt sets the "email_label_printed_at" field.
func (cc *ColliCreate) SetEmailLabelPrintedAt(t time.Time) *ColliCreate {
	cc.mutation.SetEmailLabelPrintedAt(t)
	return cc
}

// SetNillableEmailLabelPrintedAt sets the "email_label_printed_at" field if the given value is not nil.
func (cc *ColliCreate) SetNillableEmailLabelPrintedAt(t *time.Time) *ColliCreate {
	if t != nil {
		cc.SetEmailLabelPrintedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ColliCreate) SetID(pu pulid.ID) *ColliCreate {
	cc.mutation.SetID(pu)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ColliCreate) SetNillableID(pu *pulid.ID) *ColliCreate {
	if pu != nil {
		cc.SetID(*pu)
	}
	return cc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cc *ColliCreate) SetTenant(t *Tenant) *ColliCreate {
	return cc.SetTenantID(t.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (cc *ColliCreate) SetRecipientID(id pulid.ID) *ColliCreate {
	cc.mutation.SetRecipientID(id)
	return cc
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (cc *ColliCreate) SetRecipient(a *Address) *ColliCreate {
	return cc.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (cc *ColliCreate) SetSenderID(id pulid.ID) *ColliCreate {
	cc.mutation.SetSenderID(id)
	return cc
}

// SetSender sets the "sender" edge to the Address entity.
func (cc *ColliCreate) SetSender(a *Address) *ColliCreate {
	return cc.SetSenderID(a.ID)
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (cc *ColliCreate) SetParcelShopID(id pulid.ID) *ColliCreate {
	cc.mutation.SetParcelShopID(id)
	return cc
}

// SetNillableParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID if the given value is not nil.
func (cc *ColliCreate) SetNillableParcelShopID(id *pulid.ID) *ColliCreate {
	if id != nil {
		cc = cc.SetParcelShopID(*id)
	}
	return cc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (cc *ColliCreate) SetParcelShop(p *ParcelShop) *ColliCreate {
	return cc.SetParcelShopID(p.ID)
}

// SetClickCollectLocationID sets the "click_collect_location" edge to the Location entity by ID.
func (cc *ColliCreate) SetClickCollectLocationID(id pulid.ID) *ColliCreate {
	cc.mutation.SetClickCollectLocationID(id)
	return cc
}

// SetNillableClickCollectLocationID sets the "click_collect_location" edge to the Location entity by ID if the given value is not nil.
func (cc *ColliCreate) SetNillableClickCollectLocationID(id *pulid.ID) *ColliCreate {
	if id != nil {
		cc = cc.SetClickCollectLocationID(*id)
	}
	return cc
}

// SetClickCollectLocation sets the "click_collect_location" edge to the Location entity.
func (cc *ColliCreate) SetClickCollectLocation(l *Location) *ColliCreate {
	return cc.SetClickCollectLocationID(l.ID)
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (cc *ColliCreate) AddOrderLineIDs(ids ...pulid.ID) *ColliCreate {
	cc.mutation.AddOrderLineIDs(ids...)
	return cc
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (cc *ColliCreate) AddOrderLines(o ...*OrderLine) *ColliCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderLineIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (cc *ColliCreate) SetDeliveryOptionID(id pulid.ID) *ColliCreate {
	cc.mutation.SetDeliveryOptionID(id)
	return cc
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cc *ColliCreate) SetNillableDeliveryOptionID(id *pulid.ID) *ColliCreate {
	if id != nil {
		cc = cc.SetDeliveryOptionID(*id)
	}
	return cc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (cc *ColliCreate) SetDeliveryOption(d *DeliveryOption) *ColliCreate {
	return cc.SetDeliveryOptionID(d.ID)
}

// AddDocumentFileIDs adds the "document_file" edge to the DocumentFile entity by IDs.
func (cc *ColliCreate) AddDocumentFileIDs(ids ...pulid.ID) *ColliCreate {
	cc.mutation.AddDocumentFileIDs(ids...)
	return cc
}

// AddDocumentFile adds the "document_file" edges to the DocumentFile entity.
func (cc *ColliCreate) AddDocumentFile(d ...*DocumentFile) *ColliCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDocumentFileIDs(ids...)
}

// SetShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID.
func (cc *ColliCreate) SetShipmentParcelID(id pulid.ID) *ColliCreate {
	cc.mutation.SetShipmentParcelID(id)
	return cc
}

// SetNillableShipmentParcelID sets the "shipment_parcel" edge to the ShipmentParcel entity by ID if the given value is not nil.
func (cc *ColliCreate) SetNillableShipmentParcelID(id *pulid.ID) *ColliCreate {
	if id != nil {
		cc = cc.SetShipmentParcelID(*id)
	}
	return cc
}

// SetShipmentParcel sets the "shipment_parcel" edge to the ShipmentParcel entity.
func (cc *ColliCreate) SetShipmentParcel(s *ShipmentParcel) *ColliCreate {
	return cc.SetShipmentParcelID(s.ID)
}

// AddCancelledShipmentParcelIDs adds the "cancelled_shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (cc *ColliCreate) AddCancelledShipmentParcelIDs(ids ...pulid.ID) *ColliCreate {
	cc.mutation.AddCancelledShipmentParcelIDs(ids...)
	return cc
}

// AddCancelledShipmentParcel adds the "cancelled_shipment_parcel" edges to the ShipmentParcel entity.
func (cc *ColliCreate) AddCancelledShipmentParcel(s ...*ShipmentParcel) *ColliCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddCancelledShipmentParcelIDs(ids...)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (cc *ColliCreate) SetOrderID(id pulid.ID) *ColliCreate {
	cc.mutation.SetOrderID(id)
	return cc
}

// SetOrder sets the "order" edge to the Order entity.
func (cc *ColliCreate) SetOrder(o *Order) *ColliCreate {
	return cc.SetOrderID(o.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (cc *ColliCreate) SetPackagingID(id pulid.ID) *ColliCreate {
	cc.mutation.SetPackagingID(id)
	return cc
}

// SetNillablePackagingID sets the "packaging" edge to the Packaging entity by ID if the given value is not nil.
func (cc *ColliCreate) SetNillablePackagingID(id *pulid.ID) *ColliCreate {
	if id != nil {
		cc = cc.SetPackagingID(*id)
	}
	return cc
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (cc *ColliCreate) SetPackaging(p *Packaging) *ColliCreate {
	return cc.SetPackagingID(p.ID)
}

// AddPrintJobIDs adds the "print_job" edge to the PrintJob entity by IDs.
func (cc *ColliCreate) AddPrintJobIDs(ids ...pulid.ID) *ColliCreate {
	cc.mutation.AddPrintJobIDs(ids...)
	return cc
}

// AddPrintJob adds the "print_job" edges to the PrintJob entity.
func (cc *ColliCreate) AddPrintJob(p ...*PrintJob) *ColliCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPrintJobIDs(ids...)
}

// Mutation returns the ColliMutation object of the builder.
func (cc *ColliCreate) Mutation() *ColliMutation {
	return cc.mutation
}

// Save creates the Colli in the database.
func (cc *ColliCreate) Save(ctx context.Context) (*Colli, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ColliCreate) SaveX(ctx context.Context) *Colli {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ColliCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ColliCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ColliCreate) defaults() error {
	if _, ok := cc.mutation.SlipPrintStatus(); !ok {
		v := colli.DefaultSlipPrintStatus
		cc.mutation.SetSlipPrintStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if colli.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized colli.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := colli.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if colli.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized colli.DefaultID (forgotten import ent/runtime?)")
		}
		v := colli.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ColliCreate) check() error {
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Colli.tenant_id"`)}
	}
	if v, ok := cc.mutation.InternalBarcode(); ok {
		if err := colli.InternalBarcodeValidator(v); err != nil {
			return &ValidationError{Name: "internal_barcode", err: fmt.Errorf(`ent: validator failed for field "Colli.internal_barcode": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Colli.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := colli.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Colli.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.SlipPrintStatus(); !ok {
		return &ValidationError{Name: "slip_print_status", err: errors.New(`ent: missing required field "Colli.slip_print_status"`)}
	}
	if v, ok := cc.mutation.SlipPrintStatus(); ok {
		if err := colli.SlipPrintStatusValidator(v); err != nil {
			return &ValidationError{Name: "slip_print_status", err: fmt.Errorf(`ent: validator failed for field "Colli.slip_print_status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Colli.created_at"`)}
	}
	if len(cc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Colli.tenant"`)}
	}
	if len(cc.mutation.RecipientIDs()) == 0 {
		return &ValidationError{Name: "recipient", err: errors.New(`ent: missing required edge "Colli.recipient"`)}
	}
	if len(cc.mutation.SenderIDs()) == 0 {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required edge "Colli.sender"`)}
	}
	if len(cc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "Colli.order"`)}
	}
	return nil
}

func (cc *ColliCreate) sqlSave(ctx context.Context) (*Colli, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ColliCreate) createSpec() (*Colli, *sqlgraph.CreateSpec) {
	var (
		_node = &Colli{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(colli.Table, sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.InternalBarcode(); ok {
		_spec.SetField(colli.FieldInternalBarcode, field.TypeInt64, value)
		_node.InternalBarcode = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(colli.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.SlipPrintStatus(); ok {
		_spec.SetField(colli.FieldSlipPrintStatus, field.TypeEnum, value)
		_node.SlipPrintStatus = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(colli.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.EmailPackingSlipPrintedAt(); ok {
		_spec.SetField(colli.FieldEmailPackingSlipPrintedAt, field.TypeTime, value)
		_node.EmailPackingSlipPrintedAt = value
	}
	if value, ok := cc.mutation.EmailLabelPrintedAt(); ok {
		_spec.SetField(colli.FieldEmailLabelPrintedAt, field.TypeTime, value)
		_node.EmailLabelPrintedAt = value
	}
	if nodes := cc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.TenantTable,
			Columns: []string{colli.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.RecipientTable,
			Columns: []string{colli.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_recipient = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.SenderTable,
			Columns: []string{colli.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_sender = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ParcelShopTable,
			Columns: []string{colli.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_parcel_shop = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClickCollectLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ClickCollectLocationTable,
			Columns: []string{colli.ClickCollectLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_click_collect_location = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.DeliveryOptionTable,
			Columns: []string{colli.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DocumentFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   colli.ShipmentParcelTable,
			Columns: []string{colli.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CancelledShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   colli.OrderTable,
			Columns: []string{colli.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.order_colli = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.PackagingTable,
			Columns: []string{colli.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.colli_packaging = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PrintJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Colli.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ColliUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cc *ColliCreate) OnConflict(opts ...sql.ConflictOption) *ColliUpsertOne {
	cc.conflict = opts
	return &ColliUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Colli.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ColliCreate) OnConflictColumns(columns ...string) *ColliUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ColliUpsertOne{
		create: cc,
	}
}

type (
	// ColliUpsertOne is the builder for "upsert"-ing
	//  one Colli node.
	ColliUpsertOne struct {
		create *ColliCreate
	}

	// ColliUpsert is the "OnConflict" setter.
	ColliUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ColliUpsert) SetTenantID(v pulid.ID) *ColliUpsert {
	u.Set(colli.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ColliUpsert) UpdateTenantID() *ColliUpsert {
	u.SetExcluded(colli.FieldTenantID)
	return u
}

// SetInternalBarcode sets the "internal_barcode" field.
func (u *ColliUpsert) SetInternalBarcode(v int64) *ColliUpsert {
	u.Set(colli.FieldInternalBarcode, v)
	return u
}

// UpdateInternalBarcode sets the "internal_barcode" field to the value that was provided on create.
func (u *ColliUpsert) UpdateInternalBarcode() *ColliUpsert {
	u.SetExcluded(colli.FieldInternalBarcode)
	return u
}

// AddInternalBarcode adds v to the "internal_barcode" field.
func (u *ColliUpsert) AddInternalBarcode(v int64) *ColliUpsert {
	u.Add(colli.FieldInternalBarcode, v)
	return u
}

// ClearInternalBarcode clears the value of the "internal_barcode" field.
func (u *ColliUpsert) ClearInternalBarcode() *ColliUpsert {
	u.SetNull(colli.FieldInternalBarcode)
	return u
}

// SetStatus sets the "status" field.
func (u *ColliUpsert) SetStatus(v colli.Status) *ColliUpsert {
	u.Set(colli.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ColliUpsert) UpdateStatus() *ColliUpsert {
	u.SetExcluded(colli.FieldStatus)
	return u
}

// SetSlipPrintStatus sets the "slip_print_status" field.
func (u *ColliUpsert) SetSlipPrintStatus(v colli.SlipPrintStatus) *ColliUpsert {
	u.Set(colli.FieldSlipPrintStatus, v)
	return u
}

// UpdateSlipPrintStatus sets the "slip_print_status" field to the value that was provided on create.
func (u *ColliUpsert) UpdateSlipPrintStatus() *ColliUpsert {
	u.SetExcluded(colli.FieldSlipPrintStatus)
	return u
}

// SetEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field.
func (u *ColliUpsert) SetEmailPackingSlipPrintedAt(v time.Time) *ColliUpsert {
	u.Set(colli.FieldEmailPackingSlipPrintedAt, v)
	return u
}

// UpdateEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field to the value that was provided on create.
func (u *ColliUpsert) UpdateEmailPackingSlipPrintedAt() *ColliUpsert {
	u.SetExcluded(colli.FieldEmailPackingSlipPrintedAt)
	return u
}

// ClearEmailPackingSlipPrintedAt clears the value of the "email_packing_slip_printed_at" field.
func (u *ColliUpsert) ClearEmailPackingSlipPrintedAt() *ColliUpsert {
	u.SetNull(colli.FieldEmailPackingSlipPrintedAt)
	return u
}

// SetEmailLabelPrintedAt sets the "email_label_printed_at" field.
func (u *ColliUpsert) SetEmailLabelPrintedAt(v time.Time) *ColliUpsert {
	u.Set(colli.FieldEmailLabelPrintedAt, v)
	return u
}

// UpdateEmailLabelPrintedAt sets the "email_label_printed_at" field to the value that was provided on create.
func (u *ColliUpsert) UpdateEmailLabelPrintedAt() *ColliUpsert {
	u.SetExcluded(colli.FieldEmailLabelPrintedAt)
	return u
}

// ClearEmailLabelPrintedAt clears the value of the "email_label_printed_at" field.
func (u *ColliUpsert) ClearEmailLabelPrintedAt() *ColliUpsert {
	u.SetNull(colli.FieldEmailLabelPrintedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Colli.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(colli.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ColliUpsertOne) UpdateNewValues() *ColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(colli.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(colli.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Colli.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ColliUpsertOne) Ignore() *ColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ColliUpsertOne) DoNothing() *ColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ColliCreate.OnConflict
// documentation for more info.
func (u *ColliUpsertOne) Update(set func(*ColliUpsert)) *ColliUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ColliUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ColliUpsertOne) SetTenantID(v pulid.ID) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ColliUpsertOne) UpdateTenantID() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateTenantID()
	})
}

// SetInternalBarcode sets the "internal_barcode" field.
func (u *ColliUpsertOne) SetInternalBarcode(v int64) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.SetInternalBarcode(v)
	})
}

// AddInternalBarcode adds v to the "internal_barcode" field.
func (u *ColliUpsertOne) AddInternalBarcode(v int64) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.AddInternalBarcode(v)
	})
}

// UpdateInternalBarcode sets the "internal_barcode" field to the value that was provided on create.
func (u *ColliUpsertOne) UpdateInternalBarcode() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateInternalBarcode()
	})
}

// ClearInternalBarcode clears the value of the "internal_barcode" field.
func (u *ColliUpsertOne) ClearInternalBarcode() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.ClearInternalBarcode()
	})
}

// SetStatus sets the "status" field.
func (u *ColliUpsertOne) SetStatus(v colli.Status) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ColliUpsertOne) UpdateStatus() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateStatus()
	})
}

// SetSlipPrintStatus sets the "slip_print_status" field.
func (u *ColliUpsertOne) SetSlipPrintStatus(v colli.SlipPrintStatus) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.SetSlipPrintStatus(v)
	})
}

// UpdateSlipPrintStatus sets the "slip_print_status" field to the value that was provided on create.
func (u *ColliUpsertOne) UpdateSlipPrintStatus() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateSlipPrintStatus()
	})
}

// SetEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field.
func (u *ColliUpsertOne) SetEmailPackingSlipPrintedAt(v time.Time) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.SetEmailPackingSlipPrintedAt(v)
	})
}

// UpdateEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field to the value that was provided on create.
func (u *ColliUpsertOne) UpdateEmailPackingSlipPrintedAt() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateEmailPackingSlipPrintedAt()
	})
}

// ClearEmailPackingSlipPrintedAt clears the value of the "email_packing_slip_printed_at" field.
func (u *ColliUpsertOne) ClearEmailPackingSlipPrintedAt() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.ClearEmailPackingSlipPrintedAt()
	})
}

// SetEmailLabelPrintedAt sets the "email_label_printed_at" field.
func (u *ColliUpsertOne) SetEmailLabelPrintedAt(v time.Time) *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.SetEmailLabelPrintedAt(v)
	})
}

// UpdateEmailLabelPrintedAt sets the "email_label_printed_at" field to the value that was provided on create.
func (u *ColliUpsertOne) UpdateEmailLabelPrintedAt() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateEmailLabelPrintedAt()
	})
}

// ClearEmailLabelPrintedAt clears the value of the "email_label_printed_at" field.
func (u *ColliUpsertOne) ClearEmailLabelPrintedAt() *ColliUpsertOne {
	return u.Update(func(s *ColliUpsert) {
		s.ClearEmailLabelPrintedAt()
	})
}

// Exec executes the query.
func (u *ColliUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ColliCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ColliUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ColliUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ColliUpsertOne.ID is not supported by MySQL driver. Use ColliUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ColliUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ColliCreateBulk is the builder for creating many Colli entities in bulk.
type ColliCreateBulk struct {
	config
	err      error
	builders []*ColliCreate
	conflict []sql.ConflictOption
}

// Save creates the Colli entities in the database.
func (ccb *ColliCreateBulk) Save(ctx context.Context) ([]*Colli, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Colli, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ColliMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ColliCreateBulk) SaveX(ctx context.Context) []*Colli {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ColliCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ColliCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Colli.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ColliUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ColliCreateBulk) OnConflict(opts ...sql.ConflictOption) *ColliUpsertBulk {
	ccb.conflict = opts
	return &ColliUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Colli.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ColliCreateBulk) OnConflictColumns(columns ...string) *ColliUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ColliUpsertBulk{
		create: ccb,
	}
}

// ColliUpsertBulk is the builder for "upsert"-ing
// a bulk of Colli nodes.
type ColliUpsertBulk struct {
	create *ColliCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Colli.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(colli.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ColliUpsertBulk) UpdateNewValues() *ColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(colli.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(colli.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Colli.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ColliUpsertBulk) Ignore() *ColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ColliUpsertBulk) DoNothing() *ColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ColliCreateBulk.OnConflict
// documentation for more info.
func (u *ColliUpsertBulk) Update(set func(*ColliUpsert)) *ColliUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ColliUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ColliUpsertBulk) SetTenantID(v pulid.ID) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ColliUpsertBulk) UpdateTenantID() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateTenantID()
	})
}

// SetInternalBarcode sets the "internal_barcode" field.
func (u *ColliUpsertBulk) SetInternalBarcode(v int64) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.SetInternalBarcode(v)
	})
}

// AddInternalBarcode adds v to the "internal_barcode" field.
func (u *ColliUpsertBulk) AddInternalBarcode(v int64) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.AddInternalBarcode(v)
	})
}

// UpdateInternalBarcode sets the "internal_barcode" field to the value that was provided on create.
func (u *ColliUpsertBulk) UpdateInternalBarcode() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateInternalBarcode()
	})
}

// ClearInternalBarcode clears the value of the "internal_barcode" field.
func (u *ColliUpsertBulk) ClearInternalBarcode() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.ClearInternalBarcode()
	})
}

// SetStatus sets the "status" field.
func (u *ColliUpsertBulk) SetStatus(v colli.Status) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ColliUpsertBulk) UpdateStatus() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateStatus()
	})
}

// SetSlipPrintStatus sets the "slip_print_status" field.
func (u *ColliUpsertBulk) SetSlipPrintStatus(v colli.SlipPrintStatus) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.SetSlipPrintStatus(v)
	})
}

// UpdateSlipPrintStatus sets the "slip_print_status" field to the value that was provided on create.
func (u *ColliUpsertBulk) UpdateSlipPrintStatus() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateSlipPrintStatus()
	})
}

// SetEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field.
func (u *ColliUpsertBulk) SetEmailPackingSlipPrintedAt(v time.Time) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.SetEmailPackingSlipPrintedAt(v)
	})
}

// UpdateEmailPackingSlipPrintedAt sets the "email_packing_slip_printed_at" field to the value that was provided on create.
func (u *ColliUpsertBulk) UpdateEmailPackingSlipPrintedAt() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateEmailPackingSlipPrintedAt()
	})
}

// ClearEmailPackingSlipPrintedAt clears the value of the "email_packing_slip_printed_at" field.
func (u *ColliUpsertBulk) ClearEmailPackingSlipPrintedAt() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.ClearEmailPackingSlipPrintedAt()
	})
}

// SetEmailLabelPrintedAt sets the "email_label_printed_at" field.
func (u *ColliUpsertBulk) SetEmailLabelPrintedAt(v time.Time) *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.SetEmailLabelPrintedAt(v)
	})
}

// UpdateEmailLabelPrintedAt sets the "email_label_printed_at" field to the value that was provided on create.
func (u *ColliUpsertBulk) UpdateEmailLabelPrintedAt() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.UpdateEmailLabelPrintedAt()
	})
}

// ClearEmailLabelPrintedAt clears the value of the "email_label_printed_at" field.
func (u *ColliUpsertBulk) ClearEmailLabelPrintedAt() *ColliUpsertBulk {
	return u.Update(func(s *ColliUpsert) {
		s.ClearEmailLabelPrintedAt()
	})
}

// Exec executes the query.
func (u *ColliUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ColliCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ColliCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ColliUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
