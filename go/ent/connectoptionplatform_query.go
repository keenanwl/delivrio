// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectOptionPlatformQuery is the builder for querying ConnectOptionPlatform entities.
type ConnectOptionPlatformQuery struct {
	config
	ctx             *QueryContext
	order           []connectoptionplatform.OrderOption
	inters          []Interceptor
	predicates      []predicate.ConnectOptionPlatform
	withTenant      *TenantQuery
	modifiers       []func(*sql.Selector)
	loadTotal       []func(context.Context, []*ConnectOptionPlatform) error
	withNamedTenant map[string]*TenantQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ConnectOptionPlatformQuery builder.
func (copq *ConnectOptionPlatformQuery) Where(ps ...predicate.ConnectOptionPlatform) *ConnectOptionPlatformQuery {
	copq.predicates = append(copq.predicates, ps...)
	return copq
}

// Limit the number of records to be returned by this query.
func (copq *ConnectOptionPlatformQuery) Limit(limit int) *ConnectOptionPlatformQuery {
	copq.ctx.Limit = &limit
	return copq
}

// Offset to start from.
func (copq *ConnectOptionPlatformQuery) Offset(offset int) *ConnectOptionPlatformQuery {
	copq.ctx.Offset = &offset
	return copq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (copq *ConnectOptionPlatformQuery) Unique(unique bool) *ConnectOptionPlatformQuery {
	copq.ctx.Unique = &unique
	return copq
}

// Order specifies how the records should be ordered.
func (copq *ConnectOptionPlatformQuery) Order(o ...connectoptionplatform.OrderOption) *ConnectOptionPlatformQuery {
	copq.order = append(copq.order, o...)
	return copq
}

// QueryTenant chains the current query on the "tenant" edge.
func (copq *ConnectOptionPlatformQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: copq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := copq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := copq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(connectoptionplatform.Table, connectoptionplatform.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, connectoptionplatform.TenantTable, connectoptionplatform.TenantPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(copq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ConnectOptionPlatform entity from the query.
// Returns a *NotFoundError when no ConnectOptionPlatform was found.
func (copq *ConnectOptionPlatformQuery) First(ctx context.Context) (*ConnectOptionPlatform, error) {
	nodes, err := copq.Limit(1).All(setContextOp(ctx, copq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{connectoptionplatform.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) FirstX(ctx context.Context) *ConnectOptionPlatform {
	node, err := copq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ConnectOptionPlatform ID from the query.
// Returns a *NotFoundError when no ConnectOptionPlatform ID was found.
func (copq *ConnectOptionPlatformQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = copq.Limit(1).IDs(setContextOp(ctx, copq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{connectoptionplatform.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := copq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ConnectOptionPlatform entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ConnectOptionPlatform entity is found.
// Returns a *NotFoundError when no ConnectOptionPlatform entities are found.
func (copq *ConnectOptionPlatformQuery) Only(ctx context.Context) (*ConnectOptionPlatform, error) {
	nodes, err := copq.Limit(2).All(setContextOp(ctx, copq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{connectoptionplatform.Label}
	default:
		return nil, &NotSingularError{connectoptionplatform.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) OnlyX(ctx context.Context) *ConnectOptionPlatform {
	node, err := copq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ConnectOptionPlatform ID in the query.
// Returns a *NotSingularError when more than one ConnectOptionPlatform ID is found.
// Returns a *NotFoundError when no entities are found.
func (copq *ConnectOptionPlatformQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = copq.Limit(2).IDs(setContextOp(ctx, copq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{connectoptionplatform.Label}
	default:
		err = &NotSingularError{connectoptionplatform.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := copq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ConnectOptionPlatforms.
func (copq *ConnectOptionPlatformQuery) All(ctx context.Context) ([]*ConnectOptionPlatform, error) {
	ctx = setContextOp(ctx, copq.ctx, ent.OpQueryAll)
	if err := copq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ConnectOptionPlatform, *ConnectOptionPlatformQuery]()
	return withInterceptors[[]*ConnectOptionPlatform](ctx, copq, qr, copq.inters)
}

// AllX is like All, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) AllX(ctx context.Context) []*ConnectOptionPlatform {
	nodes, err := copq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ConnectOptionPlatform IDs.
func (copq *ConnectOptionPlatformQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if copq.ctx.Unique == nil && copq.path != nil {
		copq.Unique(true)
	}
	ctx = setContextOp(ctx, copq.ctx, ent.OpQueryIDs)
	if err = copq.Select(connectoptionplatform.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := copq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (copq *ConnectOptionPlatformQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, copq.ctx, ent.OpQueryCount)
	if err := copq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, copq, querierCount[*ConnectOptionPlatformQuery](), copq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) CountX(ctx context.Context) int {
	count, err := copq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (copq *ConnectOptionPlatformQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, copq.ctx, ent.OpQueryExist)
	switch _, err := copq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (copq *ConnectOptionPlatformQuery) ExistX(ctx context.Context) bool {
	exist, err := copq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ConnectOptionPlatformQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (copq *ConnectOptionPlatformQuery) Clone() *ConnectOptionPlatformQuery {
	if copq == nil {
		return nil
	}
	return &ConnectOptionPlatformQuery{
		config:     copq.config,
		ctx:        copq.ctx.Clone(),
		order:      append([]connectoptionplatform.OrderOption{}, copq.order...),
		inters:     append([]Interceptor{}, copq.inters...),
		predicates: append([]predicate.ConnectOptionPlatform{}, copq.predicates...),
		withTenant: copq.withTenant.Clone(),
		// clone intermediate query.
		sql:  copq.sql.Clone(),
		path: copq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (copq *ConnectOptionPlatformQuery) WithTenant(opts ...func(*TenantQuery)) *ConnectOptionPlatformQuery {
	query := (&TenantClient{config: copq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	copq.withTenant = query
	return copq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ConnectOptionPlatform.Query().
//		GroupBy(connectoptionplatform.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (copq *ConnectOptionPlatformQuery) GroupBy(field string, fields ...string) *ConnectOptionPlatformGroupBy {
	copq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ConnectOptionPlatformGroupBy{build: copq}
	grbuild.flds = &copq.ctx.Fields
	grbuild.label = connectoptionplatform.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ConnectOptionPlatform.Query().
//		Select(connectoptionplatform.FieldName).
//		Scan(ctx, &v)
func (copq *ConnectOptionPlatformQuery) Select(fields ...string) *ConnectOptionPlatformSelect {
	copq.ctx.Fields = append(copq.ctx.Fields, fields...)
	sbuild := &ConnectOptionPlatformSelect{ConnectOptionPlatformQuery: copq}
	sbuild.label = connectoptionplatform.Label
	sbuild.flds, sbuild.scan = &copq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ConnectOptionPlatformSelect configured with the given aggregations.
func (copq *ConnectOptionPlatformQuery) Aggregate(fns ...AggregateFunc) *ConnectOptionPlatformSelect {
	return copq.Select().Aggregate(fns...)
}

func (copq *ConnectOptionPlatformQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range copq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, copq); err != nil {
				return err
			}
		}
	}
	for _, f := range copq.ctx.Fields {
		if !connectoptionplatform.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if copq.path != nil {
		prev, err := copq.path(ctx)
		if err != nil {
			return err
		}
		copq.sql = prev
	}
	if connectoptionplatform.Policy == nil {
		return errors.New("ent: uninitialized connectoptionplatform.Policy (forgotten import ent/runtime?)")
	}
	if err := connectoptionplatform.Policy.EvalQuery(ctx, copq); err != nil {
		return err
	}
	return nil
}

func (copq *ConnectOptionPlatformQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ConnectOptionPlatform, error) {
	var (
		nodes       = []*ConnectOptionPlatform{}
		_spec       = copq.querySpec()
		loadedTypes = [1]bool{
			copq.withTenant != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ConnectOptionPlatform).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ConnectOptionPlatform{config: copq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(copq.modifiers) > 0 {
		_spec.Modifiers = copq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, copq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := copq.withTenant; query != nil {
		if err := copq.loadTenant(ctx, query, nodes,
			func(n *ConnectOptionPlatform) { n.Edges.Tenant = []*Tenant{} },
			func(n *ConnectOptionPlatform, e *Tenant) { n.Edges.Tenant = append(n.Edges.Tenant, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range copq.withNamedTenant {
		if err := copq.loadTenant(ctx, query, nodes,
			func(n *ConnectOptionPlatform) { n.appendNamedTenant(name) },
			func(n *ConnectOptionPlatform, e *Tenant) { n.appendNamedTenant(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range copq.loadTotal {
		if err := copq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (copq *ConnectOptionPlatformQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ConnectOptionPlatform, init func(*ConnectOptionPlatform), assign func(*ConnectOptionPlatform, *Tenant)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*ConnectOptionPlatform)
	nids := make(map[pulid.ID]map[*ConnectOptionPlatform]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(connectoptionplatform.TenantTable)
		s.Join(joinT).On(s.C(tenant.FieldID), joinT.C(connectoptionplatform.TenantPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(connectoptionplatform.TenantPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(connectoptionplatform.TenantPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ConnectOptionPlatform]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Tenant](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tenant" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (copq *ConnectOptionPlatformQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := copq.querySpec()
	if len(copq.modifiers) > 0 {
		_spec.Modifiers = copq.modifiers
	}
	_spec.Node.Columns = copq.ctx.Fields
	if len(copq.ctx.Fields) > 0 {
		_spec.Unique = copq.ctx.Unique != nil && *copq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, copq.driver, _spec)
}

func (copq *ConnectOptionPlatformQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(connectoptionplatform.Table, connectoptionplatform.Columns, sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString))
	_spec.From = copq.sql
	if unique := copq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if copq.path != nil {
		_spec.Unique = true
	}
	if fields := copq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectoptionplatform.FieldID)
		for i := range fields {
			if fields[i] != connectoptionplatform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := copq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := copq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := copq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := copq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (copq *ConnectOptionPlatformQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(copq.driver.Dialect())
	t1 := builder.Table(connectoptionplatform.Table)
	columns := copq.ctx.Fields
	if len(columns) == 0 {
		columns = connectoptionplatform.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if copq.sql != nil {
		selector = copq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if copq.ctx.Unique != nil && *copq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range copq.predicates {
		p(selector)
	}
	for _, p := range copq.order {
		p(selector)
	}
	if offset := copq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := copq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTenant tells the query-builder to eager-load the nodes that are connected to the "tenant"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (copq *ConnectOptionPlatformQuery) WithNamedTenant(name string, opts ...func(*TenantQuery)) *ConnectOptionPlatformQuery {
	query := (&TenantClient{config: copq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if copq.withNamedTenant == nil {
		copq.withNamedTenant = make(map[string]*TenantQuery)
	}
	copq.withNamedTenant[name] = query
	return copq
}

// ConnectOptionPlatformGroupBy is the group-by builder for ConnectOptionPlatform entities.
type ConnectOptionPlatformGroupBy struct {
	selector
	build *ConnectOptionPlatformQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (copgb *ConnectOptionPlatformGroupBy) Aggregate(fns ...AggregateFunc) *ConnectOptionPlatformGroupBy {
	copgb.fns = append(copgb.fns, fns...)
	return copgb
}

// Scan applies the selector query and scans the result into the given value.
func (copgb *ConnectOptionPlatformGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, copgb.build.ctx, ent.OpQueryGroupBy)
	if err := copgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectOptionPlatformQuery, *ConnectOptionPlatformGroupBy](ctx, copgb.build, copgb, copgb.build.inters, v)
}

func (copgb *ConnectOptionPlatformGroupBy) sqlScan(ctx context.Context, root *ConnectOptionPlatformQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(copgb.fns))
	for _, fn := range copgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*copgb.flds)+len(copgb.fns))
		for _, f := range *copgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*copgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := copgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ConnectOptionPlatformSelect is the builder for selecting fields of ConnectOptionPlatform entities.
type ConnectOptionPlatformSelect struct {
	*ConnectOptionPlatformQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cops *ConnectOptionPlatformSelect) Aggregate(fns ...AggregateFunc) *ConnectOptionPlatformSelect {
	cops.fns = append(cops.fns, fns...)
	return cops
}

// Scan applies the selector query and scans the result into the given value.
func (cops *ConnectOptionPlatformSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cops.ctx, ent.OpQuerySelect)
	if err := cops.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ConnectOptionPlatformQuery, *ConnectOptionPlatformSelect](ctx, cops.ConnectOptionPlatformQuery, cops, cops.inters, v)
}

func (cops *ConnectOptionPlatformSelect) sqlScan(ctx context.Context, root *ConnectOptionPlatformQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cops.fns))
	for _, fn := range cops.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cops.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
