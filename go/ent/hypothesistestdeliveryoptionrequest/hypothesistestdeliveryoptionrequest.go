// Code generated by ent, DO NOT EDIT.

package hypothesistestdeliveryoptionrequest

import (
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the hypothesistestdeliveryoptionrequest type in the database.
	Label = "hypothesis_test_delivery_option_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldOrderHash holds the string denoting the order_hash field in the database.
	FieldOrderHash = "order_hash"
	// FieldShippingAddressHash holds the string denoting the shipping_address_hash field in the database.
	FieldShippingAddressHash = "shipping_address_hash"
	// FieldIsControlGroup holds the string denoting the is_control_group field in the database.
	FieldIsControlGroup = "is_control_group"
	// FieldRequestCount holds the string denoting the request_count field in the database.
	FieldRequestCount = "request_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastRequestedAt holds the string denoting the last_requested_at field in the database.
	FieldLastRequestedAt = "last_requested_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeHypothesisTestDeliveryOption holds the string denoting the hypothesis_test_delivery_option edge name in mutations.
	EdgeHypothesisTestDeliveryOption = "hypothesis_test_delivery_option"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeHypothesisTestDeliveryOptionLookup holds the string denoting the hypothesis_test_delivery_option_lookup edge name in mutations.
	EdgeHypothesisTestDeliveryOptionLookup = "hypothesis_test_delivery_option_lookup"
	// Table holds the table name of the hypothesistestdeliveryoptionrequest in the database.
	Table = "hypothesis_test_delivery_option_requests"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "hypothesis_test_delivery_option_requests"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// HypothesisTestDeliveryOptionTable is the table that holds the hypothesis_test_delivery_option relation/edge.
	HypothesisTestDeliveryOptionTable = "hypothesis_test_delivery_option_requests"
	// HypothesisTestDeliveryOptionInverseTable is the table name for the HypothesisTestDeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoption" package.
	HypothesisTestDeliveryOptionInverseTable = "hypothesis_test_delivery_options"
	// HypothesisTestDeliveryOptionColumn is the table column denoting the hypothesis_test_delivery_option relation/edge.
	HypothesisTestDeliveryOptionColumn = "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "orders"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "hypothesis_test_delivery_option_request_order"
	// HypothesisTestDeliveryOptionLookupTable is the table that holds the hypothesis_test_delivery_option_lookup relation/edge.
	HypothesisTestDeliveryOptionLookupTable = "hypothesis_test_delivery_option_lookups"
	// HypothesisTestDeliveryOptionLookupInverseTable is the table name for the HypothesisTestDeliveryOptionLookup entity.
	// It exists in this package in order to avoid circular dependency with the "hypothesistestdeliveryoptionlookup" package.
	HypothesisTestDeliveryOptionLookupInverseTable = "hypothesis_test_delivery_option_lookups"
	// HypothesisTestDeliveryOptionLookupColumn is the table column denoting the hypothesis_test_delivery_option_lookup relation/edge.
	HypothesisTestDeliveryOptionLookupColumn = "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup"
)

// Columns holds all SQL columns for hypothesistestdeliveryoptionrequest fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldOrderHash,
	FieldShippingAddressHash,
	FieldIsControlGroup,
	FieldRequestCount,
	FieldCreatedAt,
	FieldLastRequestedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "hypothesis_test_delivery_option_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"hypothesis_test_delivery_option_request_hypothesis_test_delivery_option",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastRequestedAt holds the default value on creation for the "last_requested_at" field.
	DefaultLastRequestedAt func() time.Time
	// UpdateDefaultLastRequestedAt holds the default value on update for the "last_requested_at" field.
	UpdateDefaultLastRequestedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the HypothesisTestDeliveryOptionRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByOrderHash orders the results by the order_hash field.
func ByOrderHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderHash, opts...).ToFunc()
}

// ByShippingAddressHash orders the results by the shipping_address_hash field.
func ByShippingAddressHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShippingAddressHash, opts...).ToFunc()
}

// ByIsControlGroup orders the results by the is_control_group field.
func ByIsControlGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsControlGroup, opts...).ToFunc()
}

// ByRequestCount orders the results by the request_count field.
func ByRequestCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastRequestedAt orders the results by the last_requested_at field.
func ByLastRequestedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRequestedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByHypothesisTestDeliveryOptionField orders the results by hypothesis_test_delivery_option field.
func ByHypothesisTestDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByHypothesisTestDeliveryOptionLookupCount orders the results by hypothesis_test_delivery_option_lookup count.
func ByHypothesisTestDeliveryOptionLookupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHypothesisTestDeliveryOptionLookupStep(), opts...)
	}
}

// ByHypothesisTestDeliveryOptionLookup orders the results by hypothesis_test_delivery_option_lookup terms.
func ByHypothesisTestDeliveryOptionLookup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHypothesisTestDeliveryOptionLookupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newHypothesisTestDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, HypothesisTestDeliveryOptionTable, HypothesisTestDeliveryOptionColumn),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, OrderTable, OrderColumn),
	)
}
func newHypothesisTestDeliveryOptionLookupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HypothesisTestDeliveryOptionLookupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HypothesisTestDeliveryOptionLookupTable, HypothesisTestDeliveryOptionLookupColumn),
	)
}
