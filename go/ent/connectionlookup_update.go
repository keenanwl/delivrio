// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionLookupUpdate is the builder for updating ConnectionLookup entities.
type ConnectionLookupUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionLookupMutation
}

// Where appends a list predicates to the ConnectionLookupUpdate builder.
func (clu *ConnectionLookupUpdate) Where(ps ...predicate.ConnectionLookup) *ConnectionLookupUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetTenantID sets the "tenant_id" field.
func (clu *ConnectionLookupUpdate) SetTenantID(pu pulid.ID) *ConnectionLookupUpdate {
	clu.mutation.SetTenantID(pu)
	return clu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (clu *ConnectionLookupUpdate) SetNillableTenantID(pu *pulid.ID) *ConnectionLookupUpdate {
	if pu != nil {
		clu.SetTenantID(*pu)
	}
	return clu
}

// SetPayload sets the "payload" field.
func (clu *ConnectionLookupUpdate) SetPayload(s string) *ConnectionLookupUpdate {
	clu.mutation.SetPayload(s)
	return clu
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (clu *ConnectionLookupUpdate) SetNillablePayload(s *string) *ConnectionLookupUpdate {
	if s != nil {
		clu.SetPayload(*s)
	}
	return clu
}

// SetOptionsOutputCount sets the "options_output_count" field.
func (clu *ConnectionLookupUpdate) SetOptionsOutputCount(i int) *ConnectionLookupUpdate {
	clu.mutation.ResetOptionsOutputCount()
	clu.mutation.SetOptionsOutputCount(i)
	return clu
}

// SetNillableOptionsOutputCount sets the "options_output_count" field if the given value is not nil.
func (clu *ConnectionLookupUpdate) SetNillableOptionsOutputCount(i *int) *ConnectionLookupUpdate {
	if i != nil {
		clu.SetOptionsOutputCount(*i)
	}
	return clu
}

// AddOptionsOutputCount adds i to the "options_output_count" field.
func (clu *ConnectionLookupUpdate) AddOptionsOutputCount(i int) *ConnectionLookupUpdate {
	clu.mutation.AddOptionsOutputCount(i)
	return clu
}

// SetError sets the "error" field.
func (clu *ConnectionLookupUpdate) SetError(s string) *ConnectionLookupUpdate {
	clu.mutation.SetError(s)
	return clu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (clu *ConnectionLookupUpdate) SetNillableError(s *string) *ConnectionLookupUpdate {
	if s != nil {
		clu.SetError(*s)
	}
	return clu
}

// ClearError clears the value of the "error" field.
func (clu *ConnectionLookupUpdate) ClearError() *ConnectionLookupUpdate {
	clu.mutation.ClearError()
	return clu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (clu *ConnectionLookupUpdate) SetTenant(t *Tenant) *ConnectionLookupUpdate {
	return clu.SetTenantID(t.ID)
}

// Mutation returns the ConnectionLookupMutation object of the builder.
func (clu *ConnectionLookupUpdate) Mutation() *ConnectionLookupMutation {
	return clu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (clu *ConnectionLookupUpdate) ClearTenant() *ConnectionLookupUpdate {
	clu.mutation.ClearTenant()
	return clu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *ConnectionLookupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *ConnectionLookupUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *ConnectionLookupUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *ConnectionLookupUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clu *ConnectionLookupUpdate) check() error {
	if clu.mutation.TenantCleared() && len(clu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionLookup.tenant"`)
	}
	return nil
}

func (clu *ConnectionLookupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := clu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionlookup.Table, connectionlookup.Columns, sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.Payload(); ok {
		_spec.SetField(connectionlookup.FieldPayload, field.TypeString, value)
	}
	if value, ok := clu.mutation.OptionsOutputCount(); ok {
		_spec.SetField(connectionlookup.FieldOptionsOutputCount, field.TypeInt, value)
	}
	if value, ok := clu.mutation.AddedOptionsOutputCount(); ok {
		_spec.AddField(connectionlookup.FieldOptionsOutputCount, field.TypeInt, value)
	}
	if value, ok := clu.mutation.Error(); ok {
		_spec.SetField(connectionlookup.FieldError, field.TypeString, value)
	}
	if clu.mutation.ErrorCleared() {
		_spec.ClearField(connectionlookup.FieldError, field.TypeString)
	}
	if clu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.TenantTable,
			Columns: []string{connectionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := clu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.TenantTable,
			Columns: []string{connectionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionlookup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// ConnectionLookupUpdateOne is the builder for updating a single ConnectionLookup entity.
type ConnectionLookupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionLookupMutation
}

// SetTenantID sets the "tenant_id" field.
func (cluo *ConnectionLookupUpdateOne) SetTenantID(pu pulid.ID) *ConnectionLookupUpdateOne {
	cluo.mutation.SetTenantID(pu)
	return cluo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cluo *ConnectionLookupUpdateOne) SetNillableTenantID(pu *pulid.ID) *ConnectionLookupUpdateOne {
	if pu != nil {
		cluo.SetTenantID(*pu)
	}
	return cluo
}

// SetPayload sets the "payload" field.
func (cluo *ConnectionLookupUpdateOne) SetPayload(s string) *ConnectionLookupUpdateOne {
	cluo.mutation.SetPayload(s)
	return cluo
}

// SetNillablePayload sets the "payload" field if the given value is not nil.
func (cluo *ConnectionLookupUpdateOne) SetNillablePayload(s *string) *ConnectionLookupUpdateOne {
	if s != nil {
		cluo.SetPayload(*s)
	}
	return cluo
}

// SetOptionsOutputCount sets the "options_output_count" field.
func (cluo *ConnectionLookupUpdateOne) SetOptionsOutputCount(i int) *ConnectionLookupUpdateOne {
	cluo.mutation.ResetOptionsOutputCount()
	cluo.mutation.SetOptionsOutputCount(i)
	return cluo
}

// SetNillableOptionsOutputCount sets the "options_output_count" field if the given value is not nil.
func (cluo *ConnectionLookupUpdateOne) SetNillableOptionsOutputCount(i *int) *ConnectionLookupUpdateOne {
	if i != nil {
		cluo.SetOptionsOutputCount(*i)
	}
	return cluo
}

// AddOptionsOutputCount adds i to the "options_output_count" field.
func (cluo *ConnectionLookupUpdateOne) AddOptionsOutputCount(i int) *ConnectionLookupUpdateOne {
	cluo.mutation.AddOptionsOutputCount(i)
	return cluo
}

// SetError sets the "error" field.
func (cluo *ConnectionLookupUpdateOne) SetError(s string) *ConnectionLookupUpdateOne {
	cluo.mutation.SetError(s)
	return cluo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (cluo *ConnectionLookupUpdateOne) SetNillableError(s *string) *ConnectionLookupUpdateOne {
	if s != nil {
		cluo.SetError(*s)
	}
	return cluo
}

// ClearError clears the value of the "error" field.
func (cluo *ConnectionLookupUpdateOne) ClearError() *ConnectionLookupUpdateOne {
	cluo.mutation.ClearError()
	return cluo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cluo *ConnectionLookupUpdateOne) SetTenant(t *Tenant) *ConnectionLookupUpdateOne {
	return cluo.SetTenantID(t.ID)
}

// Mutation returns the ConnectionLookupMutation object of the builder.
func (cluo *ConnectionLookupUpdateOne) Mutation() *ConnectionLookupMutation {
	return cluo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cluo *ConnectionLookupUpdateOne) ClearTenant() *ConnectionLookupUpdateOne {
	cluo.mutation.ClearTenant()
	return cluo
}

// Where appends a list predicates to the ConnectionLookupUpdate builder.
func (cluo *ConnectionLookupUpdateOne) Where(ps ...predicate.ConnectionLookup) *ConnectionLookupUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *ConnectionLookupUpdateOne) Select(field string, fields ...string) *ConnectionLookupUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated ConnectionLookup entity.
func (cluo *ConnectionLookupUpdateOne) Save(ctx context.Context) (*ConnectionLookup, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *ConnectionLookupUpdateOne) SaveX(ctx context.Context) *ConnectionLookup {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *ConnectionLookupUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *ConnectionLookupUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cluo *ConnectionLookupUpdateOne) check() error {
	if cluo.mutation.TenantCleared() && len(cluo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConnectionLookup.tenant"`)
	}
	return nil
}

func (cluo *ConnectionLookupUpdateOne) sqlSave(ctx context.Context) (_node *ConnectionLookup, err error) {
	if err := cluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connectionlookup.Table, connectionlookup.Columns, sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConnectionLookup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connectionlookup.FieldID)
		for _, f := range fields {
			if !connectionlookup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connectionlookup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.Payload(); ok {
		_spec.SetField(connectionlookup.FieldPayload, field.TypeString, value)
	}
	if value, ok := cluo.mutation.OptionsOutputCount(); ok {
		_spec.SetField(connectionlookup.FieldOptionsOutputCount, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.AddedOptionsOutputCount(); ok {
		_spec.AddField(connectionlookup.FieldOptionsOutputCount, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.Error(); ok {
		_spec.SetField(connectionlookup.FieldError, field.TypeString, value)
	}
	if cluo.mutation.ErrorCleared() {
		_spec.ClearField(connectionlookup.FieldError, field.TypeString)
	}
	if cluo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.TenantTable,
			Columns: []string{connectionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cluo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.TenantTable,
			Columns: []string{connectionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConnectionLookup{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connectionlookup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
