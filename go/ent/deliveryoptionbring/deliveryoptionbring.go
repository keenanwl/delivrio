// Code generated by ent, DO NOT EDIT.

package deliveryoptionbring

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deliveryoptionbring type in the database.
	Label = "delivery_option_bring"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldElectronicCustoms holds the string denoting the electronic_customs field in the database.
	FieldElectronicCustoms = "electronic_customs"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeCarrierAdditionalServiceBring holds the string denoting the carrier_additional_service_bring edge name in mutations.
	EdgeCarrierAdditionalServiceBring = "carrier_additional_service_bring"
	// Table holds the table name of the deliveryoptionbring in the database.
	Table = "delivery_option_brings"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "delivery_option_brings"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "delivery_option_brings"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "delivery_option_delivery_option_bring"
	// CarrierAdditionalServiceBringTable is the table that holds the carrier_additional_service_bring relation/edge. The primary key declared below.
	CarrierAdditionalServiceBringTable = "delivery_option_bring_carrier_additional_service_bring"
	// CarrierAdditionalServiceBringInverseTable is the table name for the CarrierAdditionalServiceBring entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicebring" package.
	CarrierAdditionalServiceBringInverseTable = "carrier_additional_service_brings"
)

// Columns holds all SQL columns for deliveryoptionbring fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldElectronicCustoms,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "delivery_option_brings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"delivery_option_delivery_option_bring",
}

var (
	// CarrierAdditionalServiceBringPrimaryKey and CarrierAdditionalServiceBringColumn2 are the table columns denoting the
	// primary key for the carrier_additional_service_bring relation (M2M).
	CarrierAdditionalServiceBringPrimaryKey = []string{"delivery_option_bring_id", "carrier_additional_service_bring_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultElectronicCustoms holds the default value on creation for the "electronic_customs" field.
	DefaultElectronicCustoms bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the DeliveryOptionBring queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByElectronicCustoms orders the results by the electronic_customs field.
func ByElectronicCustoms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElectronicCustoms, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryOptionField orders the results by delivery_option field.
func ByDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierAdditionalServiceBringCount orders the results by carrier_additional_service_bring count.
func ByCarrierAdditionalServiceBringCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServiceBringStep(), opts...)
	}
}

// ByCarrierAdditionalServiceBring orders the results by carrier_additional_service_bring terms.
func ByCarrierAdditionalServiceBring(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServiceBringStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
func newCarrierAdditionalServiceBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServiceBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CarrierAdditionalServiceBringTable, CarrierAdditionalServiceBringPrimaryKey...),
	)
}
