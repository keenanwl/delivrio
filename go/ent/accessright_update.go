// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccessRightUpdate is the builder for updating AccessRight entities.
type AccessRightUpdate struct {
	config
	hooks    []Hook
	mutation *AccessRightMutation
}

// Where appends a list predicates to the AccessRightUpdate builder.
func (aru *AccessRightUpdate) Where(ps ...predicate.AccessRight) *AccessRightUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetLabel sets the "label" field.
func (aru *AccessRightUpdate) SetLabel(s string) *AccessRightUpdate {
	aru.mutation.SetLabel(s)
	return aru
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (aru *AccessRightUpdate) SetNillableLabel(s *string) *AccessRightUpdate {
	if s != nil {
		aru.SetLabel(*s)
	}
	return aru
}

// SetInternalID sets the "internal_id" field.
func (aru *AccessRightUpdate) SetInternalID(s string) *AccessRightUpdate {
	aru.mutation.SetInternalID(s)
	return aru
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (aru *AccessRightUpdate) SetNillableInternalID(s *string) *AccessRightUpdate {
	if s != nil {
		aru.SetInternalID(*s)
	}
	return aru
}

// AddAssignedAccessRightIDs adds the "assigned_access_right" edge to the SeatGroup entity by IDs.
func (aru *AccessRightUpdate) AddAssignedAccessRightIDs(ids ...pulid.ID) *AccessRightUpdate {
	aru.mutation.AddAssignedAccessRightIDs(ids...)
	return aru
}

// AddAssignedAccessRight adds the "assigned_access_right" edges to the SeatGroup entity.
func (aru *AccessRightUpdate) AddAssignedAccessRight(s ...*SeatGroup) *AccessRightUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aru.AddAssignedAccessRightIDs(ids...)
}

// AddSeatGroupAccessRightIDs adds the "seat_group_access_right" edge to the SeatGroupAccessRight entity by IDs.
func (aru *AccessRightUpdate) AddSeatGroupAccessRightIDs(ids ...pulid.ID) *AccessRightUpdate {
	aru.mutation.AddSeatGroupAccessRightIDs(ids...)
	return aru
}

// AddSeatGroupAccessRight adds the "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (aru *AccessRightUpdate) AddSeatGroupAccessRight(s ...*SeatGroupAccessRight) *AccessRightUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aru.AddSeatGroupAccessRightIDs(ids...)
}

// Mutation returns the AccessRightMutation object of the builder.
func (aru *AccessRightUpdate) Mutation() *AccessRightMutation {
	return aru.mutation
}

// ClearAssignedAccessRight clears all "assigned_access_right" edges to the SeatGroup entity.
func (aru *AccessRightUpdate) ClearAssignedAccessRight() *AccessRightUpdate {
	aru.mutation.ClearAssignedAccessRight()
	return aru
}

// RemoveAssignedAccessRightIDs removes the "assigned_access_right" edge to SeatGroup entities by IDs.
func (aru *AccessRightUpdate) RemoveAssignedAccessRightIDs(ids ...pulid.ID) *AccessRightUpdate {
	aru.mutation.RemoveAssignedAccessRightIDs(ids...)
	return aru
}

// RemoveAssignedAccessRight removes "assigned_access_right" edges to SeatGroup entities.
func (aru *AccessRightUpdate) RemoveAssignedAccessRight(s ...*SeatGroup) *AccessRightUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aru.RemoveAssignedAccessRightIDs(ids...)
}

// ClearSeatGroupAccessRight clears all "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (aru *AccessRightUpdate) ClearSeatGroupAccessRight() *AccessRightUpdate {
	aru.mutation.ClearSeatGroupAccessRight()
	return aru
}

// RemoveSeatGroupAccessRightIDs removes the "seat_group_access_right" edge to SeatGroupAccessRight entities by IDs.
func (aru *AccessRightUpdate) RemoveSeatGroupAccessRightIDs(ids ...pulid.ID) *AccessRightUpdate {
	aru.mutation.RemoveSeatGroupAccessRightIDs(ids...)
	return aru
}

// RemoveSeatGroupAccessRight removes "seat_group_access_right" edges to SeatGroupAccessRight entities.
func (aru *AccessRightUpdate) RemoveSeatGroupAccessRight(s ...*SeatGroupAccessRight) *AccessRightUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aru.RemoveSeatGroupAccessRightIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AccessRightUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AccessRightUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AccessRightUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AccessRightUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aru *AccessRightUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accessright.Table, accessright.Columns, sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Label(); ok {
		_spec.SetField(accessright.FieldLabel, field.TypeString, value)
	}
	if value, ok := aru.mutation.InternalID(); ok {
		_spec.SetField(accessright.FieldInternalID, field.TypeString, value)
	}
	if aru.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		createE := &SeatGroupAccessRightCreate{config: aru.config, mutation: newSeatGroupAccessRightMutation(aru.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAssignedAccessRightIDs(); len(nodes) > 0 && !aru.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: aru.config, mutation: newSeatGroupAccessRightMutation(aru.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AssignedAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: aru.config, mutation: newSeatGroupAccessRightMutation(aru.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedSeatGroupAccessRightIDs(); len(nodes) > 0 && !aru.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.SeatGroupAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessright.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AccessRightUpdateOne is the builder for updating a single AccessRight entity.
type AccessRightUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessRightMutation
}

// SetLabel sets the "label" field.
func (aruo *AccessRightUpdateOne) SetLabel(s string) *AccessRightUpdateOne {
	aruo.mutation.SetLabel(s)
	return aruo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (aruo *AccessRightUpdateOne) SetNillableLabel(s *string) *AccessRightUpdateOne {
	if s != nil {
		aruo.SetLabel(*s)
	}
	return aruo
}

// SetInternalID sets the "internal_id" field.
func (aruo *AccessRightUpdateOne) SetInternalID(s string) *AccessRightUpdateOne {
	aruo.mutation.SetInternalID(s)
	return aruo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (aruo *AccessRightUpdateOne) SetNillableInternalID(s *string) *AccessRightUpdateOne {
	if s != nil {
		aruo.SetInternalID(*s)
	}
	return aruo
}

// AddAssignedAccessRightIDs adds the "assigned_access_right" edge to the SeatGroup entity by IDs.
func (aruo *AccessRightUpdateOne) AddAssignedAccessRightIDs(ids ...pulid.ID) *AccessRightUpdateOne {
	aruo.mutation.AddAssignedAccessRightIDs(ids...)
	return aruo
}

// AddAssignedAccessRight adds the "assigned_access_right" edges to the SeatGroup entity.
func (aruo *AccessRightUpdateOne) AddAssignedAccessRight(s ...*SeatGroup) *AccessRightUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aruo.AddAssignedAccessRightIDs(ids...)
}

// AddSeatGroupAccessRightIDs adds the "seat_group_access_right" edge to the SeatGroupAccessRight entity by IDs.
func (aruo *AccessRightUpdateOne) AddSeatGroupAccessRightIDs(ids ...pulid.ID) *AccessRightUpdateOne {
	aruo.mutation.AddSeatGroupAccessRightIDs(ids...)
	return aruo
}

// AddSeatGroupAccessRight adds the "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (aruo *AccessRightUpdateOne) AddSeatGroupAccessRight(s ...*SeatGroupAccessRight) *AccessRightUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aruo.AddSeatGroupAccessRightIDs(ids...)
}

// Mutation returns the AccessRightMutation object of the builder.
func (aruo *AccessRightUpdateOne) Mutation() *AccessRightMutation {
	return aruo.mutation
}

// ClearAssignedAccessRight clears all "assigned_access_right" edges to the SeatGroup entity.
func (aruo *AccessRightUpdateOne) ClearAssignedAccessRight() *AccessRightUpdateOne {
	aruo.mutation.ClearAssignedAccessRight()
	return aruo
}

// RemoveAssignedAccessRightIDs removes the "assigned_access_right" edge to SeatGroup entities by IDs.
func (aruo *AccessRightUpdateOne) RemoveAssignedAccessRightIDs(ids ...pulid.ID) *AccessRightUpdateOne {
	aruo.mutation.RemoveAssignedAccessRightIDs(ids...)
	return aruo
}

// RemoveAssignedAccessRight removes "assigned_access_right" edges to SeatGroup entities.
func (aruo *AccessRightUpdateOne) RemoveAssignedAccessRight(s ...*SeatGroup) *AccessRightUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aruo.RemoveAssignedAccessRightIDs(ids...)
}

// ClearSeatGroupAccessRight clears all "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (aruo *AccessRightUpdateOne) ClearSeatGroupAccessRight() *AccessRightUpdateOne {
	aruo.mutation.ClearSeatGroupAccessRight()
	return aruo
}

// RemoveSeatGroupAccessRightIDs removes the "seat_group_access_right" edge to SeatGroupAccessRight entities by IDs.
func (aruo *AccessRightUpdateOne) RemoveSeatGroupAccessRightIDs(ids ...pulid.ID) *AccessRightUpdateOne {
	aruo.mutation.RemoveSeatGroupAccessRightIDs(ids...)
	return aruo
}

// RemoveSeatGroupAccessRight removes "seat_group_access_right" edges to SeatGroupAccessRight entities.
func (aruo *AccessRightUpdateOne) RemoveSeatGroupAccessRight(s ...*SeatGroupAccessRight) *AccessRightUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aruo.RemoveSeatGroupAccessRightIDs(ids...)
}

// Where appends a list predicates to the AccessRightUpdate builder.
func (aruo *AccessRightUpdateOne) Where(ps ...predicate.AccessRight) *AccessRightUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AccessRightUpdateOne) Select(field string, fields ...string) *AccessRightUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AccessRight entity.
func (aruo *AccessRightUpdateOne) Save(ctx context.Context) (*AccessRight, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AccessRightUpdateOne) SaveX(ctx context.Context) *AccessRight {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AccessRightUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AccessRightUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aruo *AccessRightUpdateOne) sqlSave(ctx context.Context) (_node *AccessRight, err error) {
	_spec := sqlgraph.NewUpdateSpec(accessright.Table, accessright.Columns, sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessRight.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accessright.FieldID)
		for _, f := range fields {
			if !accessright.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accessright.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Label(); ok {
		_spec.SetField(accessright.FieldLabel, field.TypeString, value)
	}
	if value, ok := aruo.mutation.InternalID(); ok {
		_spec.SetField(accessright.FieldInternalID, field.TypeString, value)
	}
	if aruo.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		createE := &SeatGroupAccessRightCreate{config: aruo.config, mutation: newSeatGroupAccessRightMutation(aruo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAssignedAccessRightIDs(); len(nodes) > 0 && !aruo.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: aruo.config, mutation: newSeatGroupAccessRightMutation(aruo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AssignedAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: aruo.config, mutation: newSeatGroupAccessRightMutation(aruo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedSeatGroupAccessRightIDs(); len(nodes) > 0 && !aruo.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.SeatGroupAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccessRight{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accessright.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
