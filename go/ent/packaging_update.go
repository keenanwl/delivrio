// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUpdate is the builder for updating Packaging entities.
type PackagingUpdate struct {
	config
	hooks    []Hook
	mutation *PackagingMutation
}

// Where appends a list predicates to the PackagingUpdate builder.
func (pu *PackagingUpdate) Where(ps ...predicate.Packaging) *PackagingUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTenantID sets the "tenant_id" field.
func (pu *PackagingUpdate) SetTenantID(value pulid.ID) *PackagingUpdate {
	pu.mutation.SetTenantID(value)
	return pu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pu *PackagingUpdate) SetNillableTenantID(value *pulid.ID) *PackagingUpdate {
	if value != nil {
		pu.SetTenantID(*value)
	}
	return pu
}

// SetArchivedAt sets the "archived_at" field.
func (pu *PackagingUpdate) SetArchivedAt(t time.Time) *PackagingUpdate {
	pu.mutation.SetArchivedAt(t)
	return pu
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pu *PackagingUpdate) SetNillableArchivedAt(t *time.Time) *PackagingUpdate {
	if t != nil {
		pu.SetArchivedAt(*t)
	}
	return pu
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (pu *PackagingUpdate) ClearArchivedAt() *PackagingUpdate {
	pu.mutation.ClearArchivedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PackagingUpdate) SetName(s string) *PackagingUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PackagingUpdate) SetNillableName(s *string) *PackagingUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetHeightCm sets the "height_cm" field.
func (pu *PackagingUpdate) SetHeightCm(i int) *PackagingUpdate {
	pu.mutation.ResetHeightCm()
	pu.mutation.SetHeightCm(i)
	return pu
}

// SetNillableHeightCm sets the "height_cm" field if the given value is not nil.
func (pu *PackagingUpdate) SetNillableHeightCm(i *int) *PackagingUpdate {
	if i != nil {
		pu.SetHeightCm(*i)
	}
	return pu
}

// AddHeightCm adds i to the "height_cm" field.
func (pu *PackagingUpdate) AddHeightCm(i int) *PackagingUpdate {
	pu.mutation.AddHeightCm(i)
	return pu
}

// SetWidthCm sets the "width_cm" field.
func (pu *PackagingUpdate) SetWidthCm(i int) *PackagingUpdate {
	pu.mutation.ResetWidthCm()
	pu.mutation.SetWidthCm(i)
	return pu
}

// SetNillableWidthCm sets the "width_cm" field if the given value is not nil.
func (pu *PackagingUpdate) SetNillableWidthCm(i *int) *PackagingUpdate {
	if i != nil {
		pu.SetWidthCm(*i)
	}
	return pu
}

// AddWidthCm adds i to the "width_cm" field.
func (pu *PackagingUpdate) AddWidthCm(i int) *PackagingUpdate {
	pu.mutation.AddWidthCm(i)
	return pu
}

// SetLengthCm sets the "length_cm" field.
func (pu *PackagingUpdate) SetLengthCm(i int) *PackagingUpdate {
	pu.mutation.ResetLengthCm()
	pu.mutation.SetLengthCm(i)
	return pu
}

// SetNillableLengthCm sets the "length_cm" field if the given value is not nil.
func (pu *PackagingUpdate) SetNillableLengthCm(i *int) *PackagingUpdate {
	if i != nil {
		pu.SetLengthCm(*i)
	}
	return pu
}

// AddLengthCm adds i to the "length_cm" field.
func (pu *PackagingUpdate) AddLengthCm(i int) *PackagingUpdate {
	pu.mutation.AddLengthCm(i)
	return pu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pu *PackagingUpdate) SetTenant(t *Tenant) *PackagingUpdate {
	return pu.SetTenantID(t.ID)
}

// AddShipmentParcelIDs adds the "shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (pu *PackagingUpdate) AddShipmentParcelIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.AddShipmentParcelIDs(ids...)
	return pu
}

// AddShipmentParcel adds the "shipment_parcel" edges to the ShipmentParcel entity.
func (pu *PackagingUpdate) AddShipmentParcel(s ...*ShipmentParcel) *PackagingUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddShipmentParcelIDs(ids...)
}

// AddPalletIDs adds the "pallet" edge to the Pallet entity by IDs.
func (pu *PackagingUpdate) AddPalletIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.AddPalletIDs(ids...)
	return pu
}

// AddPallet adds the "pallet" edges to the Pallet entity.
func (pu *PackagingUpdate) AddPallet(p ...*Pallet) *PackagingUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPalletIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (pu *PackagingUpdate) AddColliIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.AddColliIDs(ids...)
	return pu
}

// AddColli adds the "colli" edges to the Colli entity.
func (pu *PackagingUpdate) AddColli(c ...*Colli) *PackagingUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (pu *PackagingUpdate) AddReturnColliIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.AddReturnColliIDs(ids...)
	return pu
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (pu *PackagingUpdate) AddReturnColli(r ...*ReturnColli) *PackagingUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReturnColliIDs(ids...)
}

// SetPackagingDFID sets the "packaging_df" edge to the PackagingDF entity by ID.
func (pu *PackagingUpdate) SetPackagingDFID(id pulid.ID) *PackagingUpdate {
	pu.mutation.SetPackagingDFID(id)
	return pu
}

// SetNillablePackagingDFID sets the "packaging_df" edge to the PackagingDF entity by ID if the given value is not nil.
func (pu *PackagingUpdate) SetNillablePackagingDFID(id *pulid.ID) *PackagingUpdate {
	if id != nil {
		pu = pu.SetPackagingDFID(*id)
	}
	return pu
}

// SetPackagingDF sets the "packaging_df" edge to the PackagingDF entity.
func (pu *PackagingUpdate) SetPackagingDF(p *PackagingDF) *PackagingUpdate {
	return pu.SetPackagingDFID(p.ID)
}

// SetPackagingUSPSID sets the "packaging_usps" edge to the PackagingUSPS entity by ID.
func (pu *PackagingUpdate) SetPackagingUSPSID(id pulid.ID) *PackagingUpdate {
	pu.mutation.SetPackagingUSPSID(id)
	return pu
}

// SetNillablePackagingUSPSID sets the "packaging_usps" edge to the PackagingUSPS entity by ID if the given value is not nil.
func (pu *PackagingUpdate) SetNillablePackagingUSPSID(id *pulid.ID) *PackagingUpdate {
	if id != nil {
		pu = pu.SetPackagingUSPSID(*id)
	}
	return pu
}

// SetPackagingUSPS sets the "packaging_usps" edge to the PackagingUSPS entity.
func (pu *PackagingUpdate) SetPackagingUSPS(p *PackagingUSPS) *PackagingUpdate {
	return pu.SetPackagingUSPSID(p.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (pu *PackagingUpdate) SetCarrierBrandID(id pulid.ID) *PackagingUpdate {
	pu.mutation.SetCarrierBrandID(id)
	return pu
}

// SetNillableCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID if the given value is not nil.
func (pu *PackagingUpdate) SetNillableCarrierBrandID(id *pulid.ID) *PackagingUpdate {
	if id != nil {
		pu = pu.SetCarrierBrandID(*id)
	}
	return pu
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (pu *PackagingUpdate) SetCarrierBrand(c *CarrierBrand) *PackagingUpdate {
	return pu.SetCarrierBrandID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (pu *PackagingUpdate) AddDeliveryOptionIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.AddDeliveryOptionIDs(ids...)
	return pu
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (pu *PackagingUpdate) AddDeliveryOption(d ...*DeliveryOption) *PackagingUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDeliveryOptionIDs(ids...)
}

// Mutation returns the PackagingMutation object of the builder.
func (pu *PackagingUpdate) Mutation() *PackagingMutation {
	return pu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pu *PackagingUpdate) ClearTenant() *PackagingUpdate {
	pu.mutation.ClearTenant()
	return pu
}

// ClearShipmentParcel clears all "shipment_parcel" edges to the ShipmentParcel entity.
func (pu *PackagingUpdate) ClearShipmentParcel() *PackagingUpdate {
	pu.mutation.ClearShipmentParcel()
	return pu
}

// RemoveShipmentParcelIDs removes the "shipment_parcel" edge to ShipmentParcel entities by IDs.
func (pu *PackagingUpdate) RemoveShipmentParcelIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.RemoveShipmentParcelIDs(ids...)
	return pu
}

// RemoveShipmentParcel removes "shipment_parcel" edges to ShipmentParcel entities.
func (pu *PackagingUpdate) RemoveShipmentParcel(s ...*ShipmentParcel) *PackagingUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveShipmentParcelIDs(ids...)
}

// ClearPallet clears all "pallet" edges to the Pallet entity.
func (pu *PackagingUpdate) ClearPallet() *PackagingUpdate {
	pu.mutation.ClearPallet()
	return pu
}

// RemovePalletIDs removes the "pallet" edge to Pallet entities by IDs.
func (pu *PackagingUpdate) RemovePalletIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.RemovePalletIDs(ids...)
	return pu
}

// RemovePallet removes "pallet" edges to Pallet entities.
func (pu *PackagingUpdate) RemovePallet(p ...*Pallet) *PackagingUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePalletIDs(ids...)
}

// ClearColli clears all "colli" edges to the Colli entity.
func (pu *PackagingUpdate) ClearColli() *PackagingUpdate {
	pu.mutation.ClearColli()
	return pu
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (pu *PackagingUpdate) RemoveColliIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.RemoveColliIDs(ids...)
	return pu
}

// RemoveColli removes "colli" edges to Colli entities.
func (pu *PackagingUpdate) RemoveColli(c ...*Colli) *PackagingUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveColliIDs(ids...)
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (pu *PackagingUpdate) ClearReturnColli() *PackagingUpdate {
	pu.mutation.ClearReturnColli()
	return pu
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (pu *PackagingUpdate) RemoveReturnColliIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.RemoveReturnColliIDs(ids...)
	return pu
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (pu *PackagingUpdate) RemoveReturnColli(r ...*ReturnColli) *PackagingUpdate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReturnColliIDs(ids...)
}

// ClearPackagingDF clears the "packaging_df" edge to the PackagingDF entity.
func (pu *PackagingUpdate) ClearPackagingDF() *PackagingUpdate {
	pu.mutation.ClearPackagingDF()
	return pu
}

// ClearPackagingUSPS clears the "packaging_usps" edge to the PackagingUSPS entity.
func (pu *PackagingUpdate) ClearPackagingUSPS() *PackagingUpdate {
	pu.mutation.ClearPackagingUSPS()
	return pu
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (pu *PackagingUpdate) ClearCarrierBrand() *PackagingUpdate {
	pu.mutation.ClearCarrierBrand()
	return pu
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (pu *PackagingUpdate) ClearDeliveryOption() *PackagingUpdate {
	pu.mutation.ClearDeliveryOption()
	return pu
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (pu *PackagingUpdate) RemoveDeliveryOptionIDs(ids ...pulid.ID) *PackagingUpdate {
	pu.mutation.RemoveDeliveryOptionIDs(ids...)
	return pu
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (pu *PackagingUpdate) RemoveDeliveryOption(d ...*DeliveryOption) *PackagingUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDeliveryOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PackagingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PackagingUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PackagingUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PackagingUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PackagingUpdate) check() error {
	if pu.mutation.TenantCleared() && len(pu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Packaging.tenant"`)
	}
	return nil
}

func (pu *PackagingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packaging.Table, packaging.Columns, sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ArchivedAt(); ok {
		_spec.SetField(packaging.FieldArchivedAt, field.TypeTime, value)
	}
	if pu.mutation.ArchivedAtCleared() {
		_spec.ClearField(packaging.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(packaging.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.HeightCm(); ok {
		_spec.SetField(packaging.FieldHeightCm, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedHeightCm(); ok {
		_spec.AddField(packaging.FieldHeightCm, field.TypeInt, value)
	}
	if value, ok := pu.mutation.WidthCm(); ok {
		_spec.SetField(packaging.FieldWidthCm, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedWidthCm(); ok {
		_spec.AddField(packaging.FieldWidthCm, field.TypeInt, value)
	}
	if value, ok := pu.mutation.LengthCm(); ok {
		_spec.SetField(packaging.FieldLengthCm, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLengthCm(); ok {
		_spec.AddField(packaging.FieldLengthCm, field.TypeInt, value)
	}
	if pu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.TenantTable,
			Columns: []string{packaging.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.TenantTable,
			Columns: []string{packaging.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedShipmentParcelIDs(); len(nodes) > 0 && !pu.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPalletIDs(); len(nodes) > 0 && !pu.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedColliIDs(); len(nodes) > 0 && !pu.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !pu.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PackagingDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingDFTable,
			Columns: []string{packaging.PackagingDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PackagingDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingDFTable,
			Columns: []string{packaging.PackagingDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PackagingUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingUSPSTable,
			Columns: []string{packaging.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PackagingUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingUSPSTable,
			Columns: []string{packaging.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.CarrierBrandTable,
			Columns: []string{packaging.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.CarrierBrandTable,
			Columns: []string{packaging.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !pu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packaging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PackagingUpdateOne is the builder for updating a single Packaging entity.
type PackagingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackagingMutation
}

// SetTenantID sets the "tenant_id" field.
func (puo *PackagingUpdateOne) SetTenantID(pu pulid.ID) *PackagingUpdateOne {
	puo.mutation.SetTenantID(pu)
	return puo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableTenantID(pu *pulid.ID) *PackagingUpdateOne {
	if pu != nil {
		puo.SetTenantID(*pu)
	}
	return puo
}

// SetArchivedAt sets the "archived_at" field.
func (puo *PackagingUpdateOne) SetArchivedAt(t time.Time) *PackagingUpdateOne {
	puo.mutation.SetArchivedAt(t)
	return puo
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableArchivedAt(t *time.Time) *PackagingUpdateOne {
	if t != nil {
		puo.SetArchivedAt(*t)
	}
	return puo
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (puo *PackagingUpdateOne) ClearArchivedAt() *PackagingUpdateOne {
	puo.mutation.ClearArchivedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PackagingUpdateOne) SetName(s string) *PackagingUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableName(s *string) *PackagingUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetHeightCm sets the "height_cm" field.
func (puo *PackagingUpdateOne) SetHeightCm(i int) *PackagingUpdateOne {
	puo.mutation.ResetHeightCm()
	puo.mutation.SetHeightCm(i)
	return puo
}

// SetNillableHeightCm sets the "height_cm" field if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableHeightCm(i *int) *PackagingUpdateOne {
	if i != nil {
		puo.SetHeightCm(*i)
	}
	return puo
}

// AddHeightCm adds i to the "height_cm" field.
func (puo *PackagingUpdateOne) AddHeightCm(i int) *PackagingUpdateOne {
	puo.mutation.AddHeightCm(i)
	return puo
}

// SetWidthCm sets the "width_cm" field.
func (puo *PackagingUpdateOne) SetWidthCm(i int) *PackagingUpdateOne {
	puo.mutation.ResetWidthCm()
	puo.mutation.SetWidthCm(i)
	return puo
}

// SetNillableWidthCm sets the "width_cm" field if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableWidthCm(i *int) *PackagingUpdateOne {
	if i != nil {
		puo.SetWidthCm(*i)
	}
	return puo
}

// AddWidthCm adds i to the "width_cm" field.
func (puo *PackagingUpdateOne) AddWidthCm(i int) *PackagingUpdateOne {
	puo.mutation.AddWidthCm(i)
	return puo
}

// SetLengthCm sets the "length_cm" field.
func (puo *PackagingUpdateOne) SetLengthCm(i int) *PackagingUpdateOne {
	puo.mutation.ResetLengthCm()
	puo.mutation.SetLengthCm(i)
	return puo
}

// SetNillableLengthCm sets the "length_cm" field if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableLengthCm(i *int) *PackagingUpdateOne {
	if i != nil {
		puo.SetLengthCm(*i)
	}
	return puo
}

// AddLengthCm adds i to the "length_cm" field.
func (puo *PackagingUpdateOne) AddLengthCm(i int) *PackagingUpdateOne {
	puo.mutation.AddLengthCm(i)
	return puo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (puo *PackagingUpdateOne) SetTenant(t *Tenant) *PackagingUpdateOne {
	return puo.SetTenantID(t.ID)
}

// AddShipmentParcelIDs adds the "shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (puo *PackagingUpdateOne) AddShipmentParcelIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.AddShipmentParcelIDs(ids...)
	return puo
}

// AddShipmentParcel adds the "shipment_parcel" edges to the ShipmentParcel entity.
func (puo *PackagingUpdateOne) AddShipmentParcel(s ...*ShipmentParcel) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddShipmentParcelIDs(ids...)
}

// AddPalletIDs adds the "pallet" edge to the Pallet entity by IDs.
func (puo *PackagingUpdateOne) AddPalletIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.AddPalletIDs(ids...)
	return puo
}

// AddPallet adds the "pallet" edges to the Pallet entity.
func (puo *PackagingUpdateOne) AddPallet(p ...*Pallet) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPalletIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (puo *PackagingUpdateOne) AddColliIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.AddColliIDs(ids...)
	return puo
}

// AddColli adds the "colli" edges to the Colli entity.
func (puo *PackagingUpdateOne) AddColli(c ...*Colli) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (puo *PackagingUpdateOne) AddReturnColliIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.AddReturnColliIDs(ids...)
	return puo
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (puo *PackagingUpdateOne) AddReturnColli(r ...*ReturnColli) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReturnColliIDs(ids...)
}

// SetPackagingDFID sets the "packaging_df" edge to the PackagingDF entity by ID.
func (puo *PackagingUpdateOne) SetPackagingDFID(id pulid.ID) *PackagingUpdateOne {
	puo.mutation.SetPackagingDFID(id)
	return puo
}

// SetNillablePackagingDFID sets the "packaging_df" edge to the PackagingDF entity by ID if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillablePackagingDFID(id *pulid.ID) *PackagingUpdateOne {
	if id != nil {
		puo = puo.SetPackagingDFID(*id)
	}
	return puo
}

// SetPackagingDF sets the "packaging_df" edge to the PackagingDF entity.
func (puo *PackagingUpdateOne) SetPackagingDF(p *PackagingDF) *PackagingUpdateOne {
	return puo.SetPackagingDFID(p.ID)
}

// SetPackagingUSPSID sets the "packaging_usps" edge to the PackagingUSPS entity by ID.
func (puo *PackagingUpdateOne) SetPackagingUSPSID(id pulid.ID) *PackagingUpdateOne {
	puo.mutation.SetPackagingUSPSID(id)
	return puo
}

// SetNillablePackagingUSPSID sets the "packaging_usps" edge to the PackagingUSPS entity by ID if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillablePackagingUSPSID(id *pulid.ID) *PackagingUpdateOne {
	if id != nil {
		puo = puo.SetPackagingUSPSID(*id)
	}
	return puo
}

// SetPackagingUSPS sets the "packaging_usps" edge to the PackagingUSPS entity.
func (puo *PackagingUpdateOne) SetPackagingUSPS(p *PackagingUSPS) *PackagingUpdateOne {
	return puo.SetPackagingUSPSID(p.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (puo *PackagingUpdateOne) SetCarrierBrandID(id pulid.ID) *PackagingUpdateOne {
	puo.mutation.SetCarrierBrandID(id)
	return puo
}

// SetNillableCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID if the given value is not nil.
func (puo *PackagingUpdateOne) SetNillableCarrierBrandID(id *pulid.ID) *PackagingUpdateOne {
	if id != nil {
		puo = puo.SetCarrierBrandID(*id)
	}
	return puo
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (puo *PackagingUpdateOne) SetCarrierBrand(c *CarrierBrand) *PackagingUpdateOne {
	return puo.SetCarrierBrandID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (puo *PackagingUpdateOne) AddDeliveryOptionIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.AddDeliveryOptionIDs(ids...)
	return puo
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (puo *PackagingUpdateOne) AddDeliveryOption(d ...*DeliveryOption) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDeliveryOptionIDs(ids...)
}

// Mutation returns the PackagingMutation object of the builder.
func (puo *PackagingUpdateOne) Mutation() *PackagingMutation {
	return puo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (puo *PackagingUpdateOne) ClearTenant() *PackagingUpdateOne {
	puo.mutation.ClearTenant()
	return puo
}

// ClearShipmentParcel clears all "shipment_parcel" edges to the ShipmentParcel entity.
func (puo *PackagingUpdateOne) ClearShipmentParcel() *PackagingUpdateOne {
	puo.mutation.ClearShipmentParcel()
	return puo
}

// RemoveShipmentParcelIDs removes the "shipment_parcel" edge to ShipmentParcel entities by IDs.
func (puo *PackagingUpdateOne) RemoveShipmentParcelIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.RemoveShipmentParcelIDs(ids...)
	return puo
}

// RemoveShipmentParcel removes "shipment_parcel" edges to ShipmentParcel entities.
func (puo *PackagingUpdateOne) RemoveShipmentParcel(s ...*ShipmentParcel) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveShipmentParcelIDs(ids...)
}

// ClearPallet clears all "pallet" edges to the Pallet entity.
func (puo *PackagingUpdateOne) ClearPallet() *PackagingUpdateOne {
	puo.mutation.ClearPallet()
	return puo
}

// RemovePalletIDs removes the "pallet" edge to Pallet entities by IDs.
func (puo *PackagingUpdateOne) RemovePalletIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.RemovePalletIDs(ids...)
	return puo
}

// RemovePallet removes "pallet" edges to Pallet entities.
func (puo *PackagingUpdateOne) RemovePallet(p ...*Pallet) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePalletIDs(ids...)
}

// ClearColli clears all "colli" edges to the Colli entity.
func (puo *PackagingUpdateOne) ClearColli() *PackagingUpdateOne {
	puo.mutation.ClearColli()
	return puo
}

// RemoveColliIDs removes the "colli" edge to Colli entities by IDs.
func (puo *PackagingUpdateOne) RemoveColliIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.RemoveColliIDs(ids...)
	return puo
}

// RemoveColli removes "colli" edges to Colli entities.
func (puo *PackagingUpdateOne) RemoveColli(c ...*Colli) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveColliIDs(ids...)
}

// ClearReturnColli clears all "return_colli" edges to the ReturnColli entity.
func (puo *PackagingUpdateOne) ClearReturnColli() *PackagingUpdateOne {
	puo.mutation.ClearReturnColli()
	return puo
}

// RemoveReturnColliIDs removes the "return_colli" edge to ReturnColli entities by IDs.
func (puo *PackagingUpdateOne) RemoveReturnColliIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.RemoveReturnColliIDs(ids...)
	return puo
}

// RemoveReturnColli removes "return_colli" edges to ReturnColli entities.
func (puo *PackagingUpdateOne) RemoveReturnColli(r ...*ReturnColli) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReturnColliIDs(ids...)
}

// ClearPackagingDF clears the "packaging_df" edge to the PackagingDF entity.
func (puo *PackagingUpdateOne) ClearPackagingDF() *PackagingUpdateOne {
	puo.mutation.ClearPackagingDF()
	return puo
}

// ClearPackagingUSPS clears the "packaging_usps" edge to the PackagingUSPS entity.
func (puo *PackagingUpdateOne) ClearPackagingUSPS() *PackagingUpdateOne {
	puo.mutation.ClearPackagingUSPS()
	return puo
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (puo *PackagingUpdateOne) ClearCarrierBrand() *PackagingUpdateOne {
	puo.mutation.ClearCarrierBrand()
	return puo
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (puo *PackagingUpdateOne) ClearDeliveryOption() *PackagingUpdateOne {
	puo.mutation.ClearDeliveryOption()
	return puo
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (puo *PackagingUpdateOne) RemoveDeliveryOptionIDs(ids ...pulid.ID) *PackagingUpdateOne {
	puo.mutation.RemoveDeliveryOptionIDs(ids...)
	return puo
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (puo *PackagingUpdateOne) RemoveDeliveryOption(d ...*DeliveryOption) *PackagingUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDeliveryOptionIDs(ids...)
}

// Where appends a list predicates to the PackagingUpdate builder.
func (puo *PackagingUpdateOne) Where(ps ...predicate.Packaging) *PackagingUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PackagingUpdateOne) Select(field string, fields ...string) *PackagingUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Packaging entity.
func (puo *PackagingUpdateOne) Save(ctx context.Context) (*Packaging, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PackagingUpdateOne) SaveX(ctx context.Context) *Packaging {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PackagingUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PackagingUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PackagingUpdateOne) check() error {
	if puo.mutation.TenantCleared() && len(puo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Packaging.tenant"`)
	}
	return nil
}

func (puo *PackagingUpdateOne) sqlSave(ctx context.Context) (_node *Packaging, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packaging.Table, packaging.Columns, sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Packaging.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packaging.FieldID)
		for _, f := range fields {
			if !packaging.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packaging.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ArchivedAt(); ok {
		_spec.SetField(packaging.FieldArchivedAt, field.TypeTime, value)
	}
	if puo.mutation.ArchivedAtCleared() {
		_spec.ClearField(packaging.FieldArchivedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(packaging.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.HeightCm(); ok {
		_spec.SetField(packaging.FieldHeightCm, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedHeightCm(); ok {
		_spec.AddField(packaging.FieldHeightCm, field.TypeInt, value)
	}
	if value, ok := puo.mutation.WidthCm(); ok {
		_spec.SetField(packaging.FieldWidthCm, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedWidthCm(); ok {
		_spec.AddField(packaging.FieldWidthCm, field.TypeInt, value)
	}
	if value, ok := puo.mutation.LengthCm(); ok {
		_spec.SetField(packaging.FieldLengthCm, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLengthCm(); ok {
		_spec.AddField(packaging.FieldLengthCm, field.TypeInt, value)
	}
	if puo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.TenantTable,
			Columns: []string{packaging.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.TenantTable,
			Columns: []string{packaging.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedShipmentParcelIDs(); len(nodes) > 0 && !puo.mutation.ShipmentParcelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPalletIDs(); len(nodes) > 0 && !puo.mutation.PalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedColliIDs(); len(nodes) > 0 && !puo.mutation.ColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReturnColliIDs(); len(nodes) > 0 && !puo.mutation.ReturnColliCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PackagingDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingDFTable,
			Columns: []string{packaging.PackagingDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PackagingDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingDFTable,
			Columns: []string{packaging.PackagingDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PackagingUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingUSPSTable,
			Columns: []string{packaging.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PackagingUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingUSPSTable,
			Columns: []string{packaging.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.CarrierBrandTable,
			Columns: []string{packaging.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.CarrierBrandTable,
			Columns: []string{packaging.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !puo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Packaging{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packaging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
