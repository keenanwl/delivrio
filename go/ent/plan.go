// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/plan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// PriceDkk holds the value of the "price_dkk" field.
	PriceDkk int `json:"price_dkk,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges        PlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant []*Tenant `json:"tenant,omitempty"`
	// PlanHistoryPlan holds the value of the plan_history_plan edge.
	PlanHistoryPlan []*PlanHistory `json:"plan_history_plan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedTenant          map[string][]*Tenant
	namedPlanHistoryPlan map[string][]*PlanHistory
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) TenantOrErr() ([]*Tenant, error) {
	if e.loadedTypes[0] {
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PlanHistoryPlanOrErr returns the PlanHistoryPlan value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PlanHistoryPlanOrErr() ([]*PlanHistory, error) {
	if e.loadedTypes[1] {
		return e.PlanHistoryPlan, nil
	}
	return nil, &NotLoadedError{edge: "plan_history_plan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			values[i] = new(pulid.ID)
		case plan.FieldRank, plan.FieldPriceDkk:
			values[i] = new(sql.NullInt64)
		case plan.FieldLabel:
			values[i] = new(sql.NullString)
		case plan.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pl.ID = *value
			}
		case plan.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				pl.Label = value.String
			}
		case plan.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				pl.Rank = int(value.Int64)
			}
		case plan.FieldPriceDkk:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_dkk", values[i])
			} else if value.Valid {
				pl.PriceDkk = int(value.Int64)
			}
		case plan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plan.
// This includes values selected through modifiers, order, etc.
func (pl *Plan) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Plan entity.
func (pl *Plan) QueryTenant() *TenantQuery {
	return NewPlanClient(pl.config).QueryTenant(pl)
}

// QueryPlanHistoryPlan queries the "plan_history_plan" edge of the Plan entity.
func (pl *Plan) QueryPlanHistoryPlan() *PlanHistoryQuery {
	return NewPlanClient(pl.config).QueryPlanHistoryPlan(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return NewPlanClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("label=")
	builder.WriteString(pl.Label)
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", pl.Rank))
	builder.WriteString(", ")
	builder.WriteString("price_dkk=")
	builder.WriteString(fmt.Sprintf("%v", pl.PriceDkk))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedTenant returns the Tenant named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pl *Plan) NamedTenant(name string) ([]*Tenant, error) {
	if pl.Edges.namedTenant == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pl.Edges.namedTenant[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pl *Plan) appendNamedTenant(name string, edges ...*Tenant) {
	if pl.Edges.namedTenant == nil {
		pl.Edges.namedTenant = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		pl.Edges.namedTenant[name] = []*Tenant{}
	} else {
		pl.Edges.namedTenant[name] = append(pl.Edges.namedTenant[name], edges...)
	}
}

// NamedPlanHistoryPlan returns the PlanHistoryPlan named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pl *Plan) NamedPlanHistoryPlan(name string) ([]*PlanHistory, error) {
	if pl.Edges.namedPlanHistoryPlan == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pl.Edges.namedPlanHistoryPlan[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pl *Plan) appendNamedPlanHistoryPlan(name string, edges ...*PlanHistory) {
	if pl.Edges.namedPlanHistoryPlan == nil {
		pl.Edges.namedPlanHistoryPlan = make(map[string][]*PlanHistory)
	}
	if len(edges) == 0 {
		pl.Edges.namedPlanHistoryPlan[name] = []*PlanHistory{}
	} else {
		pl.Edges.namedPlanHistoryPlan[name] = append(pl.Edges.namedPlanHistoryPlan[name], edges...)
	}
}

// Plans is a parsable slice of Plan.
type Plans []*Plan
