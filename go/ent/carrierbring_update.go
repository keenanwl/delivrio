// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierBringUpdate is the builder for updating CarrierBring entities.
type CarrierBringUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierBringMutation
}

// Where appends a list predicates to the CarrierBringUpdate builder.
func (cbu *CarrierBringUpdate) Where(ps ...predicate.CarrierBring) *CarrierBringUpdate {
	cbu.mutation.Where(ps...)
	return cbu
}

// SetTenantID sets the "tenant_id" field.
func (cbu *CarrierBringUpdate) SetTenantID(pu pulid.ID) *CarrierBringUpdate {
	cbu.mutation.SetTenantID(pu)
	return cbu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cbu *CarrierBringUpdate) SetNillableTenantID(pu *pulid.ID) *CarrierBringUpdate {
	if pu != nil {
		cbu.SetTenantID(*pu)
	}
	return cbu
}

// SetAPIKey sets the "api_key" field.
func (cbu *CarrierBringUpdate) SetAPIKey(s string) *CarrierBringUpdate {
	cbu.mutation.SetAPIKey(s)
	return cbu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cbu *CarrierBringUpdate) SetNillableAPIKey(s *string) *CarrierBringUpdate {
	if s != nil {
		cbu.SetAPIKey(*s)
	}
	return cbu
}

// ClearAPIKey clears the value of the "api_key" field.
func (cbu *CarrierBringUpdate) ClearAPIKey() *CarrierBringUpdate {
	cbu.mutation.ClearAPIKey()
	return cbu
}

// SetCustomerNumber sets the "customer_number" field.
func (cbu *CarrierBringUpdate) SetCustomerNumber(s string) *CarrierBringUpdate {
	cbu.mutation.SetCustomerNumber(s)
	return cbu
}

// SetNillableCustomerNumber sets the "customer_number" field if the given value is not nil.
func (cbu *CarrierBringUpdate) SetNillableCustomerNumber(s *string) *CarrierBringUpdate {
	if s != nil {
		cbu.SetCustomerNumber(*s)
	}
	return cbu
}

// ClearCustomerNumber clears the value of the "customer_number" field.
func (cbu *CarrierBringUpdate) ClearCustomerNumber() *CarrierBringUpdate {
	cbu.mutation.ClearCustomerNumber()
	return cbu
}

// SetTest sets the "test" field.
func (cbu *CarrierBringUpdate) SetTest(b bool) *CarrierBringUpdate {
	cbu.mutation.SetTest(b)
	return cbu
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cbu *CarrierBringUpdate) SetNillableTest(b *bool) *CarrierBringUpdate {
	if b != nil {
		cbu.SetTest(*b)
	}
	return cbu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cbu *CarrierBringUpdate) SetTenant(t *Tenant) *CarrierBringUpdate {
	return cbu.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cbu *CarrierBringUpdate) SetCarrierID(id pulid.ID) *CarrierBringUpdate {
	cbu.mutation.SetCarrierID(id)
	return cbu
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cbu *CarrierBringUpdate) SetCarrier(c *Carrier) *CarrierBringUpdate {
	return cbu.SetCarrierID(c.ID)
}

// Mutation returns the CarrierBringMutation object of the builder.
func (cbu *CarrierBringUpdate) Mutation() *CarrierBringMutation {
	return cbu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cbu *CarrierBringUpdate) ClearTenant() *CarrierBringUpdate {
	cbu.mutation.ClearTenant()
	return cbu
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cbu *CarrierBringUpdate) ClearCarrier() *CarrierBringUpdate {
	cbu.mutation.ClearCarrier()
	return cbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cbu *CarrierBringUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cbu.sqlSave, cbu.mutation, cbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *CarrierBringUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *CarrierBringUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *CarrierBringUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbu *CarrierBringUpdate) check() error {
	if cbu.mutation.TenantCleared() && len(cbu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierBring.tenant"`)
	}
	if cbu.mutation.CarrierCleared() && len(cbu.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierBring.carrier"`)
	}
	return nil
}

func (cbu *CarrierBringUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierbring.Table, carrierbring.Columns, sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString))
	if ps := cbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbu.mutation.APIKey(); ok {
		_spec.SetField(carrierbring.FieldAPIKey, field.TypeString, value)
	}
	if cbu.mutation.APIKeyCleared() {
		_spec.ClearField(carrierbring.FieldAPIKey, field.TypeString)
	}
	if value, ok := cbu.mutation.CustomerNumber(); ok {
		_spec.SetField(carrierbring.FieldCustomerNumber, field.TypeString, value)
	}
	if cbu.mutation.CustomerNumberCleared() {
		_spec.ClearField(carrierbring.FieldCustomerNumber, field.TypeString)
	}
	if value, ok := cbu.mutation.Test(); ok {
		_spec.SetField(carrierbring.FieldTest, field.TypeBool, value)
	}
	if cbu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierbring.TenantTable,
			Columns: []string{carrierbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierbring.TenantTable,
			Columns: []string{carrierbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbu.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierbring.CarrierTable,
			Columns: []string{carrierbring.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierbring.CarrierTable,
			Columns: []string{carrierbring.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cbu.mutation.done = true
	return n, nil
}

// CarrierBringUpdateOne is the builder for updating a single CarrierBring entity.
type CarrierBringUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierBringMutation
}

// SetTenantID sets the "tenant_id" field.
func (cbuo *CarrierBringUpdateOne) SetTenantID(pu pulid.ID) *CarrierBringUpdateOne {
	cbuo.mutation.SetTenantID(pu)
	return cbuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cbuo *CarrierBringUpdateOne) SetNillableTenantID(pu *pulid.ID) *CarrierBringUpdateOne {
	if pu != nil {
		cbuo.SetTenantID(*pu)
	}
	return cbuo
}

// SetAPIKey sets the "api_key" field.
func (cbuo *CarrierBringUpdateOne) SetAPIKey(s string) *CarrierBringUpdateOne {
	cbuo.mutation.SetAPIKey(s)
	return cbuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (cbuo *CarrierBringUpdateOne) SetNillableAPIKey(s *string) *CarrierBringUpdateOne {
	if s != nil {
		cbuo.SetAPIKey(*s)
	}
	return cbuo
}

// ClearAPIKey clears the value of the "api_key" field.
func (cbuo *CarrierBringUpdateOne) ClearAPIKey() *CarrierBringUpdateOne {
	cbuo.mutation.ClearAPIKey()
	return cbuo
}

// SetCustomerNumber sets the "customer_number" field.
func (cbuo *CarrierBringUpdateOne) SetCustomerNumber(s string) *CarrierBringUpdateOne {
	cbuo.mutation.SetCustomerNumber(s)
	return cbuo
}

// SetNillableCustomerNumber sets the "customer_number" field if the given value is not nil.
func (cbuo *CarrierBringUpdateOne) SetNillableCustomerNumber(s *string) *CarrierBringUpdateOne {
	if s != nil {
		cbuo.SetCustomerNumber(*s)
	}
	return cbuo
}

// ClearCustomerNumber clears the value of the "customer_number" field.
func (cbuo *CarrierBringUpdateOne) ClearCustomerNumber() *CarrierBringUpdateOne {
	cbuo.mutation.ClearCustomerNumber()
	return cbuo
}

// SetTest sets the "test" field.
func (cbuo *CarrierBringUpdateOne) SetTest(b bool) *CarrierBringUpdateOne {
	cbuo.mutation.SetTest(b)
	return cbuo
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (cbuo *CarrierBringUpdateOne) SetNillableTest(b *bool) *CarrierBringUpdateOne {
	if b != nil {
		cbuo.SetTest(*b)
	}
	return cbuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cbuo *CarrierBringUpdateOne) SetTenant(t *Tenant) *CarrierBringUpdateOne {
	return cbuo.SetTenantID(t.ID)
}

// SetCarrierID sets the "carrier" edge to the Carrier entity by ID.
func (cbuo *CarrierBringUpdateOne) SetCarrierID(id pulid.ID) *CarrierBringUpdateOne {
	cbuo.mutation.SetCarrierID(id)
	return cbuo
}

// SetCarrier sets the "carrier" edge to the Carrier entity.
func (cbuo *CarrierBringUpdateOne) SetCarrier(c *Carrier) *CarrierBringUpdateOne {
	return cbuo.SetCarrierID(c.ID)
}

// Mutation returns the CarrierBringMutation object of the builder.
func (cbuo *CarrierBringUpdateOne) Mutation() *CarrierBringMutation {
	return cbuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cbuo *CarrierBringUpdateOne) ClearTenant() *CarrierBringUpdateOne {
	cbuo.mutation.ClearTenant()
	return cbuo
}

// ClearCarrier clears the "carrier" edge to the Carrier entity.
func (cbuo *CarrierBringUpdateOne) ClearCarrier() *CarrierBringUpdateOne {
	cbuo.mutation.ClearCarrier()
	return cbuo
}

// Where appends a list predicates to the CarrierBringUpdate builder.
func (cbuo *CarrierBringUpdateOne) Where(ps ...predicate.CarrierBring) *CarrierBringUpdateOne {
	cbuo.mutation.Where(ps...)
	return cbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cbuo *CarrierBringUpdateOne) Select(field string, fields ...string) *CarrierBringUpdateOne {
	cbuo.fields = append([]string{field}, fields...)
	return cbuo
}

// Save executes the query and returns the updated CarrierBring entity.
func (cbuo *CarrierBringUpdateOne) Save(ctx context.Context) (*CarrierBring, error) {
	return withHooks(ctx, cbuo.sqlSave, cbuo.mutation, cbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *CarrierBringUpdateOne) SaveX(ctx context.Context) *CarrierBring {
	node, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cbuo *CarrierBringUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *CarrierBringUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbuo *CarrierBringUpdateOne) check() error {
	if cbuo.mutation.TenantCleared() && len(cbuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierBring.tenant"`)
	}
	if cbuo.mutation.CarrierCleared() && len(cbuo.mutation.CarrierIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierBring.carrier"`)
	}
	return nil
}

func (cbuo *CarrierBringUpdateOne) sqlSave(ctx context.Context) (_node *CarrierBring, err error) {
	if err := cbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierbring.Table, carrierbring.Columns, sqlgraph.NewFieldSpec(carrierbring.FieldID, field.TypeString))
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierBring.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierbring.FieldID)
		for _, f := range fields {
			if !carrierbring.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierbring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbuo.mutation.APIKey(); ok {
		_spec.SetField(carrierbring.FieldAPIKey, field.TypeString, value)
	}
	if cbuo.mutation.APIKeyCleared() {
		_spec.ClearField(carrierbring.FieldAPIKey, field.TypeString)
	}
	if value, ok := cbuo.mutation.CustomerNumber(); ok {
		_spec.SetField(carrierbring.FieldCustomerNumber, field.TypeString, value)
	}
	if cbuo.mutation.CustomerNumberCleared() {
		_spec.ClearField(carrierbring.FieldCustomerNumber, field.TypeString)
	}
	if value, ok := cbuo.mutation.Test(); ok {
		_spec.SetField(carrierbring.FieldTest, field.TypeBool, value)
	}
	if cbuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierbring.TenantTable,
			Columns: []string{carrierbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierbring.TenantTable,
			Columns: []string{carrierbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cbuo.mutation.CarrierCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierbring.CarrierTable,
			Columns: []string{carrierbring.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierbring.CarrierTable,
			Columns: []string{carrierbring.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrier.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierBring{config: cbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierbring.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cbuo.mutation.done = true
	return _node, nil
}
