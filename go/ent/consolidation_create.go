// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConsolidationCreate is the builder for creating a Consolidation entity.
type ConsolidationCreate struct {
	config
	mutation *ConsolidationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (cc *ConsolidationCreate) SetTenantID(pu pulid.ID) *ConsolidationCreate {
	cc.mutation.SetTenantID(pu)
	return cc
}

// SetPublicID sets the "public_id" field.
func (cc *ConsolidationCreate) SetPublicID(s string) *ConsolidationCreate {
	cc.mutation.SetPublicID(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *ConsolidationCreate) SetDescription(s string) *ConsolidationCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableDescription(s *string) *ConsolidationCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ConsolidationCreate) SetStatus(c consolidation.Status) *ConsolidationCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableStatus(c *consolidation.Status) *ConsolidationCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ConsolidationCreate) SetCreatedAt(t time.Time) *ConsolidationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableCreatedAt(t *time.Time) *ConsolidationCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConsolidationCreate) SetID(pu pulid.ID) *ConsolidationCreate {
	cc.mutation.SetID(pu)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableID(pu *pulid.ID) *ConsolidationCreate {
	if pu != nil {
		cc.SetID(*pu)
	}
	return cc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cc *ConsolidationCreate) SetTenant(t *Tenant) *ConsolidationCreate {
	return cc.SetTenantID(t.ID)
}

// AddPalletIDs adds the "pallets" edge to the Pallet entity by IDs.
func (cc *ConsolidationCreate) AddPalletIDs(ids ...pulid.ID) *ConsolidationCreate {
	cc.mutation.AddPalletIDs(ids...)
	return cc
}

// AddPallets adds the "pallets" edges to the Pallet entity.
func (cc *ConsolidationCreate) AddPallets(p ...*Pallet) *ConsolidationCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPalletIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cc *ConsolidationCreate) AddOrderIDs(ids ...pulid.ID) *ConsolidationCreate {
	cc.mutation.AddOrderIDs(ids...)
	return cc
}

// AddOrders adds the "orders" edges to the Order entity.
func (cc *ConsolidationCreate) AddOrders(o ...*Order) *ConsolidationCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOrderIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (cc *ConsolidationCreate) SetDeliveryOptionID(id pulid.ID) *ConsolidationCreate {
	cc.mutation.SetDeliveryOptionID(id)
	return cc
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableDeliveryOptionID(id *pulid.ID) *ConsolidationCreate {
	if id != nil {
		cc = cc.SetDeliveryOptionID(*id)
	}
	return cc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (cc *ConsolidationCreate) SetDeliveryOption(d *DeliveryOption) *ConsolidationCreate {
	return cc.SetDeliveryOptionID(d.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (cc *ConsolidationCreate) SetRecipientID(id pulid.ID) *ConsolidationCreate {
	cc.mutation.SetRecipientID(id)
	return cc
}

// SetNillableRecipientID sets the "recipient" edge to the Address entity by ID if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableRecipientID(id *pulid.ID) *ConsolidationCreate {
	if id != nil {
		cc = cc.SetRecipientID(*id)
	}
	return cc
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (cc *ConsolidationCreate) SetRecipient(a *Address) *ConsolidationCreate {
	return cc.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (cc *ConsolidationCreate) SetSenderID(id pulid.ID) *ConsolidationCreate {
	cc.mutation.SetSenderID(id)
	return cc
}

// SetNillableSenderID sets the "sender" edge to the Address entity by ID if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableSenderID(id *pulid.ID) *ConsolidationCreate {
	if id != nil {
		cc = cc.SetSenderID(*id)
	}
	return cc
}

// SetSender sets the "sender" edge to the Address entity.
func (cc *ConsolidationCreate) SetSender(a *Address) *ConsolidationCreate {
	return cc.SetSenderID(a.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (cc *ConsolidationCreate) SetShipmentID(id pulid.ID) *ConsolidationCreate {
	cc.mutation.SetShipmentID(id)
	return cc
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (cc *ConsolidationCreate) SetNillableShipmentID(id *pulid.ID) *ConsolidationCreate {
	if id != nil {
		cc = cc.SetShipmentID(*id)
	}
	return cc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (cc *ConsolidationCreate) SetShipment(s *Shipment) *ConsolidationCreate {
	return cc.SetShipmentID(s.ID)
}

// AddCancelledShipmentIDs adds the "cancelled_shipments" edge to the Shipment entity by IDs.
func (cc *ConsolidationCreate) AddCancelledShipmentIDs(ids ...pulid.ID) *ConsolidationCreate {
	cc.mutation.AddCancelledShipmentIDs(ids...)
	return cc
}

// AddCancelledShipments adds the "cancelled_shipments" edges to the Shipment entity.
func (cc *ConsolidationCreate) AddCancelledShipments(s ...*Shipment) *ConsolidationCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddCancelledShipmentIDs(ids...)
}

// Mutation returns the ConsolidationMutation object of the builder.
func (cc *ConsolidationCreate) Mutation() *ConsolidationMutation {
	return cc.mutation
}

// Save creates the Consolidation in the database.
func (cc *ConsolidationCreate) Save(ctx context.Context) (*Consolidation, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConsolidationCreate) SaveX(ctx context.Context) *Consolidation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConsolidationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConsolidationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConsolidationCreate) defaults() error {
	if _, ok := cc.mutation.Status(); !ok {
		v := consolidation.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if consolidation.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized consolidation.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := consolidation.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		if consolidation.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized consolidation.DefaultID (forgotten import ent/runtime?)")
		}
		v := consolidation.DefaultID()
		cc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConsolidationCreate) check() error {
	if _, ok := cc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Consolidation.tenant_id"`)}
	}
	if _, ok := cc.mutation.PublicID(); !ok {
		return &ValidationError{Name: "public_id", err: errors.New(`ent: missing required field "Consolidation.public_id"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Consolidation.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := consolidation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Consolidation.status": %w`, err)}
		}
	}
	if len(cc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Consolidation.tenant"`)}
	}
	return nil
}

func (cc *ConsolidationCreate) sqlSave(ctx context.Context) (*Consolidation, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConsolidationCreate) createSpec() (*Consolidation, *sqlgraph.CreateSpec) {
	var (
		_node = &Consolidation{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(consolidation.Table, sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.PublicID(); ok {
		_spec.SetField(consolidation.FieldPublicID, field.TypeString, value)
		_node.PublicID = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(consolidation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(consolidation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(consolidation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.TenantTable,
			Columns: []string{consolidation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.DeliveryOptionTable,
			Columns: []string{consolidation.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.consolidation_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.RecipientTable,
			Columns: []string{consolidation.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.SenderTable,
			Columns: []string{consolidation.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   consolidation.ShipmentTable,
			Columns: []string{consolidation.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_consolidation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CancelledShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consolidation.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConsolidationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (cc *ConsolidationCreate) OnConflict(opts ...sql.ConflictOption) *ConsolidationUpsertOne {
	cc.conflict = opts
	return &ConsolidationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consolidation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConsolidationCreate) OnConflictColumns(columns ...string) *ConsolidationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConsolidationUpsertOne{
		create: cc,
	}
}

type (
	// ConsolidationUpsertOne is the builder for "upsert"-ing
	//  one Consolidation node.
	ConsolidationUpsertOne struct {
		create *ConsolidationCreate
	}

	// ConsolidationUpsert is the "OnConflict" setter.
	ConsolidationUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ConsolidationUpsert) SetTenantID(v pulid.ID) *ConsolidationUpsert {
	u.Set(consolidation.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConsolidationUpsert) UpdateTenantID() *ConsolidationUpsert {
	u.SetExcluded(consolidation.FieldTenantID)
	return u
}

// SetPublicID sets the "public_id" field.
func (u *ConsolidationUpsert) SetPublicID(v string) *ConsolidationUpsert {
	u.Set(consolidation.FieldPublicID, v)
	return u
}

// UpdatePublicID sets the "public_id" field to the value that was provided on create.
func (u *ConsolidationUpsert) UpdatePublicID() *ConsolidationUpsert {
	u.SetExcluded(consolidation.FieldPublicID)
	return u
}

// SetDescription sets the "description" field.
func (u *ConsolidationUpsert) SetDescription(v string) *ConsolidationUpsert {
	u.Set(consolidation.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConsolidationUpsert) UpdateDescription() *ConsolidationUpsert {
	u.SetExcluded(consolidation.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ConsolidationUpsert) ClearDescription() *ConsolidationUpsert {
	u.SetNull(consolidation.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *ConsolidationUpsert) SetStatus(v consolidation.Status) *ConsolidationUpsert {
	u.Set(consolidation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConsolidationUpsert) UpdateStatus() *ConsolidationUpsert {
	u.SetExcluded(consolidation.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Consolidation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consolidation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConsolidationUpsertOne) UpdateNewValues() *ConsolidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(consolidation.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(consolidation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consolidation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConsolidationUpsertOne) Ignore() *ConsolidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConsolidationUpsertOne) DoNothing() *ConsolidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsolidationCreate.OnConflict
// documentation for more info.
func (u *ConsolidationUpsertOne) Update(set func(*ConsolidationUpsert)) *ConsolidationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConsolidationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConsolidationUpsertOne) SetTenantID(v pulid.ID) *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConsolidationUpsertOne) UpdateTenantID() *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdateTenantID()
	})
}

// SetPublicID sets the "public_id" field.
func (u *ConsolidationUpsertOne) SetPublicID(v string) *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetPublicID(v)
	})
}

// UpdatePublicID sets the "public_id" field to the value that was provided on create.
func (u *ConsolidationUpsertOne) UpdatePublicID() *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdatePublicID()
	})
}

// SetDescription sets the "description" field.
func (u *ConsolidationUpsertOne) SetDescription(v string) *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConsolidationUpsertOne) UpdateDescription() *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ConsolidationUpsertOne) ClearDescription() *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *ConsolidationUpsertOne) SetStatus(v consolidation.Status) *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConsolidationUpsertOne) UpdateStatus() *ConsolidationUpsertOne {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ConsolidationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsolidationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConsolidationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConsolidationUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConsolidationUpsertOne.ID is not supported by MySQL driver. Use ConsolidationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConsolidationUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConsolidationCreateBulk is the builder for creating many Consolidation entities in bulk.
type ConsolidationCreateBulk struct {
	config
	err      error
	builders []*ConsolidationCreate
	conflict []sql.ConflictOption
}

// Save creates the Consolidation entities in the database.
func (ccb *ConsolidationCreateBulk) Save(ctx context.Context) ([]*Consolidation, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Consolidation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsolidationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConsolidationCreateBulk) SaveX(ctx context.Context) []*Consolidation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConsolidationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConsolidationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Consolidation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConsolidationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConsolidationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConsolidationUpsertBulk {
	ccb.conflict = opts
	return &ConsolidationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Consolidation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConsolidationCreateBulk) OnConflictColumns(columns ...string) *ConsolidationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConsolidationUpsertBulk{
		create: ccb,
	}
}

// ConsolidationUpsertBulk is the builder for "upsert"-ing
// a bulk of Consolidation nodes.
type ConsolidationUpsertBulk struct {
	create *ConsolidationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Consolidation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(consolidation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConsolidationUpsertBulk) UpdateNewValues() *ConsolidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(consolidation.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(consolidation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Consolidation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConsolidationUpsertBulk) Ignore() *ConsolidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConsolidationUpsertBulk) DoNothing() *ConsolidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsolidationCreateBulk.OnConflict
// documentation for more info.
func (u *ConsolidationUpsertBulk) Update(set func(*ConsolidationUpsert)) *ConsolidationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConsolidationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ConsolidationUpsertBulk) SetTenantID(v pulid.ID) *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ConsolidationUpsertBulk) UpdateTenantID() *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdateTenantID()
	})
}

// SetPublicID sets the "public_id" field.
func (u *ConsolidationUpsertBulk) SetPublicID(v string) *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetPublicID(v)
	})
}

// UpdatePublicID sets the "public_id" field to the value that was provided on create.
func (u *ConsolidationUpsertBulk) UpdatePublicID() *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdatePublicID()
	})
}

// SetDescription sets the "description" field.
func (u *ConsolidationUpsertBulk) SetDescription(v string) *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ConsolidationUpsertBulk) UpdateDescription() *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ConsolidationUpsertBulk) ClearDescription() *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *ConsolidationUpsertBulk) SetStatus(v consolidation.Status) *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConsolidationUpsertBulk) UpdateStatus() *ConsolidationUpsertBulk {
	return u.Update(func(s *ConsolidationUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ConsolidationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConsolidationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsolidationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConsolidationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
