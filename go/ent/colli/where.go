// Code generated by ent, DO NOT EDIT.

package colli

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldTenantID, v))
}

// InternalBarcode applies equality check predicate on the "internal_barcode" field. It's identical to InternalBarcodeEQ.
func InternalBarcode(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldInternalBarcode, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldCreatedAt, v))
}

// EmailPackingSlipPrintedAt applies equality check predicate on the "email_packing_slip_printed_at" field. It's identical to EmailPackingSlipPrintedAtEQ.
func EmailPackingSlipPrintedAt(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldEmailPackingSlipPrintedAt, v))
}

// EmailLabelPrintedAt applies equality check predicate on the "email_label_printed_at" field. It's identical to EmailLabelPrintedAtEQ.
func EmailLabelPrintedAt(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldEmailLabelPrintedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Colli {
	return predicate.Colli(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Colli {
	vc := string(v)
	return predicate.Colli(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Colli {
	vc := string(v)
	return predicate.Colli(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Colli {
	vc := string(v)
	return predicate.Colli(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Colli {
	vc := string(v)
	return predicate.Colli(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Colli {
	vc := string(v)
	return predicate.Colli(sql.FieldContainsFold(FieldTenantID, vc))
}

// InternalBarcodeEQ applies the EQ predicate on the "internal_barcode" field.
func InternalBarcodeEQ(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldInternalBarcode, v))
}

// InternalBarcodeNEQ applies the NEQ predicate on the "internal_barcode" field.
func InternalBarcodeNEQ(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldInternalBarcode, v))
}

// InternalBarcodeIn applies the In predicate on the "internal_barcode" field.
func InternalBarcodeIn(vs ...int64) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldInternalBarcode, vs...))
}

// InternalBarcodeNotIn applies the NotIn predicate on the "internal_barcode" field.
func InternalBarcodeNotIn(vs ...int64) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldInternalBarcode, vs...))
}

// InternalBarcodeGT applies the GT predicate on the "internal_barcode" field.
func InternalBarcodeGT(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldGT(FieldInternalBarcode, v))
}

// InternalBarcodeGTE applies the GTE predicate on the "internal_barcode" field.
func InternalBarcodeGTE(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldGTE(FieldInternalBarcode, v))
}

// InternalBarcodeLT applies the LT predicate on the "internal_barcode" field.
func InternalBarcodeLT(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldLT(FieldInternalBarcode, v))
}

// InternalBarcodeLTE applies the LTE predicate on the "internal_barcode" field.
func InternalBarcodeLTE(v int64) predicate.Colli {
	return predicate.Colli(sql.FieldLTE(FieldInternalBarcode, v))
}

// InternalBarcodeIsNil applies the IsNil predicate on the "internal_barcode" field.
func InternalBarcodeIsNil() predicate.Colli {
	return predicate.Colli(sql.FieldIsNull(FieldInternalBarcode))
}

// InternalBarcodeNotNil applies the NotNil predicate on the "internal_barcode" field.
func InternalBarcodeNotNil() predicate.Colli {
	return predicate.Colli(sql.FieldNotNull(FieldInternalBarcode))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldStatus, vs...))
}

// SlipPrintStatusEQ applies the EQ predicate on the "slip_print_status" field.
func SlipPrintStatusEQ(v SlipPrintStatus) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldSlipPrintStatus, v))
}

// SlipPrintStatusNEQ applies the NEQ predicate on the "slip_print_status" field.
func SlipPrintStatusNEQ(v SlipPrintStatus) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldSlipPrintStatus, v))
}

// SlipPrintStatusIn applies the In predicate on the "slip_print_status" field.
func SlipPrintStatusIn(vs ...SlipPrintStatus) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldSlipPrintStatus, vs...))
}

// SlipPrintStatusNotIn applies the NotIn predicate on the "slip_print_status" field.
func SlipPrintStatusNotIn(vs ...SlipPrintStatus) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldSlipPrintStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldLTE(FieldCreatedAt, v))
}

// EmailPackingSlipPrintedAtEQ applies the EQ predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtEQ(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldEmailPackingSlipPrintedAt, v))
}

// EmailPackingSlipPrintedAtNEQ applies the NEQ predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtNEQ(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldEmailPackingSlipPrintedAt, v))
}

// EmailPackingSlipPrintedAtIn applies the In predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtIn(vs ...time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldEmailPackingSlipPrintedAt, vs...))
}

// EmailPackingSlipPrintedAtNotIn applies the NotIn predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtNotIn(vs ...time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldEmailPackingSlipPrintedAt, vs...))
}

// EmailPackingSlipPrintedAtGT applies the GT predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtGT(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldGT(FieldEmailPackingSlipPrintedAt, v))
}

// EmailPackingSlipPrintedAtGTE applies the GTE predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtGTE(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldGTE(FieldEmailPackingSlipPrintedAt, v))
}

// EmailPackingSlipPrintedAtLT applies the LT predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtLT(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldLT(FieldEmailPackingSlipPrintedAt, v))
}

// EmailPackingSlipPrintedAtLTE applies the LTE predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtLTE(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldLTE(FieldEmailPackingSlipPrintedAt, v))
}

// EmailPackingSlipPrintedAtIsNil applies the IsNil predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtIsNil() predicate.Colli {
	return predicate.Colli(sql.FieldIsNull(FieldEmailPackingSlipPrintedAt))
}

// EmailPackingSlipPrintedAtNotNil applies the NotNil predicate on the "email_packing_slip_printed_at" field.
func EmailPackingSlipPrintedAtNotNil() predicate.Colli {
	return predicate.Colli(sql.FieldNotNull(FieldEmailPackingSlipPrintedAt))
}

// EmailLabelPrintedAtEQ applies the EQ predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtEQ(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldEQ(FieldEmailLabelPrintedAt, v))
}

// EmailLabelPrintedAtNEQ applies the NEQ predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtNEQ(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldNEQ(FieldEmailLabelPrintedAt, v))
}

// EmailLabelPrintedAtIn applies the In predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtIn(vs ...time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldIn(FieldEmailLabelPrintedAt, vs...))
}

// EmailLabelPrintedAtNotIn applies the NotIn predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtNotIn(vs ...time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldNotIn(FieldEmailLabelPrintedAt, vs...))
}

// EmailLabelPrintedAtGT applies the GT predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtGT(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldGT(FieldEmailLabelPrintedAt, v))
}

// EmailLabelPrintedAtGTE applies the GTE predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtGTE(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldGTE(FieldEmailLabelPrintedAt, v))
}

// EmailLabelPrintedAtLT applies the LT predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtLT(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldLT(FieldEmailLabelPrintedAt, v))
}

// EmailLabelPrintedAtLTE applies the LTE predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtLTE(v time.Time) predicate.Colli {
	return predicate.Colli(sql.FieldLTE(FieldEmailLabelPrintedAt, v))
}

// EmailLabelPrintedAtIsNil applies the IsNil predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtIsNil() predicate.Colli {
	return predicate.Colli(sql.FieldIsNull(FieldEmailLabelPrintedAt))
}

// EmailLabelPrintedAtNotNil applies the NotNil predicate on the "email_label_printed_at" field.
func EmailLabelPrintedAtNotNil() predicate.Colli {
	return predicate.Colli(sql.FieldNotNull(FieldEmailLabelPrintedAt))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipient applies the HasEdge predicate on the "recipient" edge.
func HasRecipient() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RecipientTable, RecipientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipientWith applies the HasEdge predicate on the "recipient" edge with a given conditions (other predicates).
func HasRecipientWith(preds ...predicate.Address) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newRecipientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.Address) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClickCollectLocation applies the HasEdge predicate on the "click_collect_location" edge.
func HasClickCollectLocation() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ClickCollectLocationTable, ClickCollectLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClickCollectLocationWith applies the HasEdge predicate on the "click_collect_location" edge with a given conditions (other predicates).
func HasClickCollectLocationWith(preds ...predicate.Location) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newClickCollectLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderLines applies the HasEdge predicate on the "order_lines" edge.
func HasOrderLines() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderLinesTable, OrderLinesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderLinesWith applies the HasEdge predicate on the "order_lines" edge with a given conditions (other predicates).
func HasOrderLinesWith(preds ...predicate.OrderLine) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newOrderLinesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOption applies the HasEdge predicate on the "delivery_option" edge.
func HasDeliveryOption() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeliveryOptionTable, DeliveryOptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionWith applies the HasEdge predicate on the "delivery_option" edge with a given conditions (other predicates).
func HasDeliveryOptionWith(preds ...predicate.DeliveryOption) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newDeliveryOptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocumentFile applies the HasEdge predicate on the "document_file" edge.
func HasDocumentFile() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentFileTable, DocumentFileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentFileWith applies the HasEdge predicate on the "document_file" edge with a given conditions (other predicates).
func HasDocumentFileWith(preds ...predicate.DocumentFile) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newDocumentFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentParcel applies the HasEdge predicate on the "shipment_parcel" edge.
func HasShipmentParcel() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentParcelTable, ShipmentParcelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentParcelWith applies the HasEdge predicate on the "shipment_parcel" edge with a given conditions (other predicates).
func HasShipmentParcelWith(preds ...predicate.ShipmentParcel) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newShipmentParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCancelledShipmentParcel applies the HasEdge predicate on the "cancelled_shipment_parcel" edge.
func HasCancelledShipmentParcel() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CancelledShipmentParcelTable, CancelledShipmentParcelPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCancelledShipmentParcelWith applies the HasEdge predicate on the "cancelled_shipment_parcel" edge with a given conditions (other predicates).
func HasCancelledShipmentParcelWith(preds ...predicate.ShipmentParcel) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newCancelledShipmentParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPackaging applies the HasEdge predicate on the "packaging" edge.
func HasPackaging() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPackagingWith applies the HasEdge predicate on the "packaging" edge with a given conditions (other predicates).
func HasPackagingWith(preds ...predicate.Packaging) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newPackagingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrintJob applies the HasEdge predicate on the "print_job" edge.
func HasPrintJob() predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PrintJobTable, PrintJobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrintJobWith applies the HasEdge predicate on the "print_job" edge with a given conditions (other predicates).
func HasPrintJobWith(preds ...predicate.PrintJob) predicate.Colli {
	return predicate.Colli(func(s *sql.Selector) {
		step := newPrintJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Colli) predicate.Colli {
	return predicate.Colli(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Colli) predicate.Colli {
	return predicate.Colli(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Colli) predicate.Colli {
	return predicate.Colli(sql.NotPredicates(p))
}
