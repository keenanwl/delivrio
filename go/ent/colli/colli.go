// Code generated by ent, DO NOT EDIT.

package colli

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the colli type in the database.
	Label = "colli"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldInternalBarcode holds the string denoting the internal_barcode field in the database.
	FieldInternalBarcode = "internal_barcode"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSlipPrintStatus holds the string denoting the slip_print_status field in the database.
	FieldSlipPrintStatus = "slip_print_status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldEmailPackingSlipPrintedAt holds the string denoting the email_packing_slip_printed_at field in the database.
	FieldEmailPackingSlipPrintedAt = "email_packing_slip_printed_at"
	// FieldEmailLabelPrintedAt holds the string denoting the email_label_printed_at field in the database.
	FieldEmailLabelPrintedAt = "email_label_printed_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRecipient holds the string denoting the recipient edge name in mutations.
	EdgeRecipient = "recipient"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeParcelShop holds the string denoting the parcel_shop edge name in mutations.
	EdgeParcelShop = "parcel_shop"
	// EdgeClickCollectLocation holds the string denoting the click_collect_location edge name in mutations.
	EdgeClickCollectLocation = "click_collect_location"
	// EdgeOrderLines holds the string denoting the order_lines edge name in mutations.
	EdgeOrderLines = "order_lines"
	// EdgeDeliveryOption holds the string denoting the delivery_option edge name in mutations.
	EdgeDeliveryOption = "delivery_option"
	// EdgeDocumentFile holds the string denoting the document_file edge name in mutations.
	EdgeDocumentFile = "document_file"
	// EdgeShipmentParcel holds the string denoting the shipment_parcel edge name in mutations.
	EdgeShipmentParcel = "shipment_parcel"
	// EdgeCancelledShipmentParcel holds the string denoting the cancelled_shipment_parcel edge name in mutations.
	EdgeCancelledShipmentParcel = "cancelled_shipment_parcel"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgePackaging holds the string denoting the packaging edge name in mutations.
	EdgePackaging = "packaging"
	// EdgePrintJob holds the string denoting the print_job edge name in mutations.
	EdgePrintJob = "print_job"
	// Table holds the table name of the colli in the database.
	Table = "collis"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "collis"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RecipientTable is the table that holds the recipient relation/edge.
	RecipientTable = "collis"
	// RecipientInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	RecipientInverseTable = "addresses"
	// RecipientColumn is the table column denoting the recipient relation/edge.
	RecipientColumn = "colli_recipient"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "collis"
	// SenderInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	SenderInverseTable = "addresses"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "colli_sender"
	// ParcelShopTable is the table that holds the parcel_shop relation/edge.
	ParcelShopTable = "collis"
	// ParcelShopInverseTable is the table name for the ParcelShop entity.
	// It exists in this package in order to avoid circular dependency with the "parcelshop" package.
	ParcelShopInverseTable = "parcel_shops"
	// ParcelShopColumn is the table column denoting the parcel_shop relation/edge.
	ParcelShopColumn = "colli_parcel_shop"
	// ClickCollectLocationTable is the table that holds the click_collect_location relation/edge.
	ClickCollectLocationTable = "collis"
	// ClickCollectLocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	ClickCollectLocationInverseTable = "locations"
	// ClickCollectLocationColumn is the table column denoting the click_collect_location relation/edge.
	ClickCollectLocationColumn = "colli_click_collect_location"
	// OrderLinesTable is the table that holds the order_lines relation/edge.
	OrderLinesTable = "order_lines"
	// OrderLinesInverseTable is the table name for the OrderLine entity.
	// It exists in this package in order to avoid circular dependency with the "orderline" package.
	OrderLinesInverseTable = "order_lines"
	// OrderLinesColumn is the table column denoting the order_lines relation/edge.
	OrderLinesColumn = "colli_id"
	// DeliveryOptionTable is the table that holds the delivery_option relation/edge.
	DeliveryOptionTable = "collis"
	// DeliveryOptionInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionInverseTable = "delivery_options"
	// DeliveryOptionColumn is the table column denoting the delivery_option relation/edge.
	DeliveryOptionColumn = "colli_delivery_option"
	// DocumentFileTable is the table that holds the document_file relation/edge.
	DocumentFileTable = "document_files"
	// DocumentFileInverseTable is the table name for the DocumentFile entity.
	// It exists in this package in order to avoid circular dependency with the "documentfile" package.
	DocumentFileInverseTable = "document_files"
	// DocumentFileColumn is the table column denoting the document_file relation/edge.
	DocumentFileColumn = "colli_document_file"
	// ShipmentParcelTable is the table that holds the shipment_parcel relation/edge.
	ShipmentParcelTable = "shipment_parcels"
	// ShipmentParcelInverseTable is the table name for the ShipmentParcel entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentparcel" package.
	ShipmentParcelInverseTable = "shipment_parcels"
	// ShipmentParcelColumn is the table column denoting the shipment_parcel relation/edge.
	ShipmentParcelColumn = "colli_shipment_parcel"
	// CancelledShipmentParcelTable is the table that holds the cancelled_shipment_parcel relation/edge. The primary key declared below.
	CancelledShipmentParcelTable = "colli_cancelled_shipment_parcel"
	// CancelledShipmentParcelInverseTable is the table name for the ShipmentParcel entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentparcel" package.
	CancelledShipmentParcelInverseTable = "shipment_parcels"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "collis"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_colli"
	// PackagingTable is the table that holds the packaging relation/edge.
	PackagingTable = "collis"
	// PackagingInverseTable is the table name for the Packaging entity.
	// It exists in this package in order to avoid circular dependency with the "packaging" package.
	PackagingInverseTable = "packagings"
	// PackagingColumn is the table column denoting the packaging relation/edge.
	PackagingColumn = "colli_packaging"
	// PrintJobTable is the table that holds the print_job relation/edge.
	PrintJobTable = "print_jobs"
	// PrintJobInverseTable is the table name for the PrintJob entity.
	// It exists in this package in order to avoid circular dependency with the "printjob" package.
	PrintJobInverseTable = "print_jobs"
	// PrintJobColumn is the table column denoting the print_job relation/edge.
	PrintJobColumn = "print_job_colli"
)

// Columns holds all SQL columns for colli fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldInternalBarcode,
	FieldStatus,
	FieldSlipPrintStatus,
	FieldCreatedAt,
	FieldEmailPackingSlipPrintedAt,
	FieldEmailLabelPrintedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "collis"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"colli_recipient",
	"colli_sender",
	"colli_parcel_shop",
	"colli_click_collect_location",
	"colli_delivery_option",
	"colli_packaging",
	"order_colli",
}

var (
	// CancelledShipmentParcelPrimaryKey and CancelledShipmentParcelColumn2 are the table columns denoting the
	// primary key for the cancelled_shipment_parcel relation (M2M).
	CancelledShipmentParcelPrimaryKey = []string{"colli_id", "shipment_parcel_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [7]ent.Hook
	Policy ent.Policy
	// InternalBarcodeValidator is a validator for the "internal_barcode" field. It is called by the builders before save.
	InternalBarcodeValidator func(int64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending    Status = "Pending"
	StatusDispatched Status = "Dispatched"
	StatusCancelled  Status = "Cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusDispatched, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("colli: invalid enum value for status field: %q", s)
	}
}

// SlipPrintStatus defines the type for the "slip_print_status" enum field.
type SlipPrintStatus string

// SlipPrintStatusPending is the default value of the SlipPrintStatus enum.
const DefaultSlipPrintStatus = SlipPrintStatusPending

// SlipPrintStatus values.
const (
	SlipPrintStatusPending SlipPrintStatus = "pending"
	SlipPrintStatusPrinted SlipPrintStatus = "printed"
)

func (sps SlipPrintStatus) String() string {
	return string(sps)
}

// SlipPrintStatusValidator is a validator for the "slip_print_status" field enum values. It is called by the builders before save.
func SlipPrintStatusValidator(sps SlipPrintStatus) error {
	switch sps {
	case SlipPrintStatusPending, SlipPrintStatusPrinted:
		return nil
	default:
		return fmt.Errorf("colli: invalid enum value for slip_print_status field: %q", sps)
	}
}

// OrderOption defines the ordering options for the Colli queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByInternalBarcode orders the results by the internal_barcode field.
func ByInternalBarcode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalBarcode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySlipPrintStatus orders the results by the slip_print_status field.
func BySlipPrintStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlipPrintStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByEmailPackingSlipPrintedAt orders the results by the email_packing_slip_printed_at field.
func ByEmailPackingSlipPrintedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailPackingSlipPrintedAt, opts...).ToFunc()
}

// ByEmailLabelPrintedAt orders the results by the email_label_printed_at field.
func ByEmailLabelPrintedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailLabelPrintedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecipientField orders the results by recipient field.
func ByRecipientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecipientStep(), sql.OrderByField(field, opts...))
	}
}

// BySenderField orders the results by sender field.
func BySenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByParcelShopField orders the results by parcel_shop field.
func ByParcelShopField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParcelShopStep(), sql.OrderByField(field, opts...))
	}
}

// ByClickCollectLocationField orders the results by click_collect_location field.
func ByClickCollectLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClickCollectLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderLinesCount orders the results by order_lines count.
func ByOrderLinesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderLinesStep(), opts...)
	}
}

// ByOrderLines orders the results by order_lines terms.
func ByOrderLines(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderLinesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionField orders the results by delivery_option field.
func ByDeliveryOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByDocumentFileCount orders the results by document_file count.
func ByDocumentFileCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentFileStep(), opts...)
	}
}

// ByDocumentFile orders the results by document_file terms.
func ByDocumentFile(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentFileStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentParcelField orders the results by shipment_parcel field.
func ByShipmentParcelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentParcelStep(), sql.OrderByField(field, opts...))
	}
}

// ByCancelledShipmentParcelCount orders the results by cancelled_shipment_parcel count.
func ByCancelledShipmentParcelCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCancelledShipmentParcelStep(), opts...)
	}
}

// ByCancelledShipmentParcel orders the results by cancelled_shipment_parcel terms.
func ByCancelledShipmentParcel(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCancelledShipmentParcelStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByPackagingField orders the results by packaging field.
func ByPackagingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingStep(), sql.OrderByField(field, opts...))
	}
}

// ByPrintJobCount orders the results by print_job count.
func ByPrintJobCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrintJobStep(), opts...)
	}
}

// ByPrintJob orders the results by print_job terms.
func ByPrintJob(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrintJobStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newRecipientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecipientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RecipientTable, RecipientColumn),
	)
}
func newSenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
	)
}
func newParcelShopStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParcelShopInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ParcelShopTable, ParcelShopColumn),
	)
}
func newClickCollectLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClickCollectLocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ClickCollectLocationTable, ClickCollectLocationColumn),
	)
}
func newOrderLinesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderLinesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderLinesTable, OrderLinesColumn),
	)
}
func newDeliveryOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DeliveryOptionTable, DeliveryOptionColumn),
	)
}
func newDocumentFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentFileTable, DocumentFileColumn),
	)
}
func newShipmentParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentParcelTable, ShipmentParcelColumn),
	)
}
func newCancelledShipmentParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CancelledShipmentParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CancelledShipmentParcelTable, CancelledShipmentParcelPrimaryKey...),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
	)
}
func newPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PackagingTable, PackagingColumn),
	)
}
func newPrintJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrintJobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PrintJobTable, PrintJobColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e SlipPrintStatus) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *SlipPrintStatus) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = SlipPrintStatus(str)
	if err := SlipPrintStatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid SlipPrintStatus", str)
	}
	return nil
}
