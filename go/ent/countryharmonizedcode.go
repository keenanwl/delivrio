// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CountryHarmonizedCode is the model entity for the CountryHarmonizedCode schema.
type CountryHarmonizedCode struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CountryHarmonizedCodeQuery when eager-loading is set.
	Edges                                  CountryHarmonizedCodeEdges `json:"edges"`
	country_harmonized_code_country        *pulid.ID
	inventory_item_country_harmonized_code *pulid.ID
	selectValues                           sql.SelectValues
}

// CountryHarmonizedCodeEdges holds the relations/edges for other nodes in the graph.
type CountryHarmonizedCodeEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// InventoryItem holds the value of the inventory_item edge.
	InventoryItem *InventoryItem `json:"inventory_item,omitempty"`
	// Country holds the value of the country edge.
	Country *Country `json:"country,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CountryHarmonizedCodeEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// InventoryItemOrErr returns the InventoryItem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CountryHarmonizedCodeEdges) InventoryItemOrErr() (*InventoryItem, error) {
	if e.InventoryItem != nil {
		return e.InventoryItem, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: inventoryitem.Label}
	}
	return nil, &NotLoadedError{edge: "inventory_item"}
}

// CountryOrErr returns the Country value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CountryHarmonizedCodeEdges) CountryOrErr() (*Country, error) {
	if e.Country != nil {
		return e.Country, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: country.Label}
	}
	return nil, &NotLoadedError{edge: "country"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CountryHarmonizedCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case countryharmonizedcode.FieldID, countryharmonizedcode.FieldTenantID:
			values[i] = new(pulid.ID)
		case countryharmonizedcode.FieldCode:
			values[i] = new(sql.NullString)
		case countryharmonizedcode.ForeignKeys[0]: // country_harmonized_code_country
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case countryharmonizedcode.ForeignKeys[1]: // inventory_item_country_harmonized_code
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CountryHarmonizedCode fields.
func (chc *CountryHarmonizedCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case countryharmonizedcode.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				chc.ID = *value
			}
		case countryharmonizedcode.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				chc.TenantID = *value
			}
		case countryharmonizedcode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				chc.Code = value.String
			}
		case countryharmonizedcode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field country_harmonized_code_country", values[i])
			} else if value.Valid {
				chc.country_harmonized_code_country = new(pulid.ID)
				*chc.country_harmonized_code_country = *value.S.(*pulid.ID)
			}
		case countryharmonizedcode.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_item_country_harmonized_code", values[i])
			} else if value.Valid {
				chc.inventory_item_country_harmonized_code = new(pulid.ID)
				*chc.inventory_item_country_harmonized_code = *value.S.(*pulid.ID)
			}
		default:
			chc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CountryHarmonizedCode.
// This includes values selected through modifiers, order, etc.
func (chc *CountryHarmonizedCode) Value(name string) (ent.Value, error) {
	return chc.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the CountryHarmonizedCode entity.
func (chc *CountryHarmonizedCode) QueryTenant() *TenantQuery {
	return NewCountryHarmonizedCodeClient(chc.config).QueryTenant(chc)
}

// QueryInventoryItem queries the "inventory_item" edge of the CountryHarmonizedCode entity.
func (chc *CountryHarmonizedCode) QueryInventoryItem() *InventoryItemQuery {
	return NewCountryHarmonizedCodeClient(chc.config).QueryInventoryItem(chc)
}

// QueryCountry queries the "country" edge of the CountryHarmonizedCode entity.
func (chc *CountryHarmonizedCode) QueryCountry() *CountryQuery {
	return NewCountryHarmonizedCodeClient(chc.config).QueryCountry(chc)
}

// Update returns a builder for updating this CountryHarmonizedCode.
// Note that you need to call CountryHarmonizedCode.Unwrap() before calling this method if this CountryHarmonizedCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (chc *CountryHarmonizedCode) Update() *CountryHarmonizedCodeUpdateOne {
	return NewCountryHarmonizedCodeClient(chc.config).UpdateOne(chc)
}

// Unwrap unwraps the CountryHarmonizedCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (chc *CountryHarmonizedCode) Unwrap() *CountryHarmonizedCode {
	_tx, ok := chc.config.driver.(*txDriver)
	if !ok {
		panic("ent: CountryHarmonizedCode is not a transactional entity")
	}
	chc.config.driver = _tx.drv
	return chc
}

// String implements the fmt.Stringer.
func (chc *CountryHarmonizedCode) String() string {
	var builder strings.Builder
	builder.WriteString("CountryHarmonizedCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", chc.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", chc.TenantID))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(chc.Code)
	builder.WriteByte(')')
	return builder.String()
}

// CountryHarmonizedCodes is a parsable slice of CountryHarmonizedCode.
type CountryHarmonizedCodes []*CountryHarmonizedCode
