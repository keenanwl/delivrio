// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workstation"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkstationCreate is the builder for creating a Workstation entity.
type WorkstationCreate struct {
	config
	mutation *WorkstationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (wc *WorkstationCreate) SetTenantID(pu pulid.ID) *WorkstationCreate {
	wc.mutation.SetTenantID(pu)
	return wc
}

// SetArchivedAt sets the "archived_at" field.
func (wc *WorkstationCreate) SetArchivedAt(t time.Time) *WorkstationCreate {
	wc.mutation.SetArchivedAt(t)
	return wc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableArchivedAt(t *time.Time) *WorkstationCreate {
	if t != nil {
		wc.SetArchivedAt(*t)
	}
	return wc
}

// SetName sets the "name" field.
func (wc *WorkstationCreate) SetName(s string) *WorkstationCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetDeviceType sets the "device_type" field.
func (wc *WorkstationCreate) SetDeviceType(wt workstation.DeviceType) *WorkstationCreate {
	wc.mutation.SetDeviceType(wt)
	return wc
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableDeviceType(wt *workstation.DeviceType) *WorkstationCreate {
	if wt != nil {
		wc.SetDeviceType(*wt)
	}
	return wc
}

// SetRegistrationCode sets the "registration_code" field.
func (wc *WorkstationCreate) SetRegistrationCode(s string) *WorkstationCreate {
	wc.mutation.SetRegistrationCode(s)
	return wc
}

// SetWorkstationID sets the "workstation_id" field.
func (wc *WorkstationCreate) SetWorkstationID(pu pulid.ID) *WorkstationCreate {
	wc.mutation.SetWorkstationID(pu)
	return wc
}

// SetCreatedAt sets the "created_at" field.
func (wc *WorkstationCreate) SetCreatedAt(t time.Time) *WorkstationCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableCreatedAt(t *time.Time) *WorkstationCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetLastPing sets the "last_ping" field.
func (wc *WorkstationCreate) SetLastPing(t time.Time) *WorkstationCreate {
	wc.mutation.SetLastPing(t)
	return wc
}

// SetNillableLastPing sets the "last_ping" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableLastPing(t *time.Time) *WorkstationCreate {
	if t != nil {
		wc.SetLastPing(*t)
	}
	return wc
}

// SetStatus sets the "status" field.
func (wc *WorkstationCreate) SetStatus(w workstation.Status) *WorkstationCreate {
	wc.mutation.SetStatus(w)
	return wc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableStatus(w *workstation.Status) *WorkstationCreate {
	if w != nil {
		wc.SetStatus(*w)
	}
	return wc
}

// SetAutoPrintReceiver sets the "auto_print_receiver" field.
func (wc *WorkstationCreate) SetAutoPrintReceiver(b bool) *WorkstationCreate {
	wc.mutation.SetAutoPrintReceiver(b)
	return wc
}

// SetNillableAutoPrintReceiver sets the "auto_print_receiver" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableAutoPrintReceiver(b *bool) *WorkstationCreate {
	if b != nil {
		wc.SetAutoPrintReceiver(*b)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WorkstationCreate) SetID(pu pulid.ID) *WorkstationCreate {
	wc.mutation.SetID(pu)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WorkstationCreate) SetNillableID(pu *pulid.ID) *WorkstationCreate {
	if pu != nil {
		wc.SetID(*pu)
	}
	return wc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (wc *WorkstationCreate) SetTenant(t *Tenant) *WorkstationCreate {
	return wc.SetTenantID(t.ID)
}

// AddPrinterIDs adds the "printer" edge to the Printer entity by IDs.
func (wc *WorkstationCreate) AddPrinterIDs(ids ...pulid.ID) *WorkstationCreate {
	wc.mutation.AddPrinterIDs(ids...)
	return wc
}

// AddPrinter adds the "printer" edges to the Printer entity.
func (wc *WorkstationCreate) AddPrinter(p ...*Printer) *WorkstationCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wc.AddPrinterIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (wc *WorkstationCreate) SetUserID(id pulid.ID) *WorkstationCreate {
	wc.mutation.SetUserID(id)
	return wc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (wc *WorkstationCreate) SetNillableUserID(id *pulid.ID) *WorkstationCreate {
	if id != nil {
		wc = wc.SetUserID(*id)
	}
	return wc
}

// SetUser sets the "user" edge to the User entity.
func (wc *WorkstationCreate) SetUser(u *User) *WorkstationCreate {
	return wc.SetUserID(u.ID)
}

// SetSelectedUserID sets the "selected_user" edge to the User entity by ID.
func (wc *WorkstationCreate) SetSelectedUserID(id pulid.ID) *WorkstationCreate {
	wc.mutation.SetSelectedUserID(id)
	return wc
}

// SetNillableSelectedUserID sets the "selected_user" edge to the User entity by ID if the given value is not nil.
func (wc *WorkstationCreate) SetNillableSelectedUserID(id *pulid.ID) *WorkstationCreate {
	if id != nil {
		wc = wc.SetSelectedUserID(*id)
	}
	return wc
}

// SetSelectedUser sets the "selected_user" edge to the User entity.
func (wc *WorkstationCreate) SetSelectedUser(u *User) *WorkstationCreate {
	return wc.SetSelectedUserID(u.ID)
}

// Mutation returns the WorkstationMutation object of the builder.
func (wc *WorkstationCreate) Mutation() *WorkstationMutation {
	return wc.mutation
}

// Save creates the Workstation in the database.
func (wc *WorkstationCreate) Save(ctx context.Context) (*Workstation, error) {
	if err := wc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkstationCreate) SaveX(ctx context.Context) *Workstation {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkstationCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkstationCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorkstationCreate) defaults() error {
	if _, ok := wc.mutation.DeviceType(); !ok {
		v := workstation.DefaultDeviceType
		wc.mutation.SetDeviceType(v)
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		if workstation.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized workstation.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := workstation.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.Status(); !ok {
		v := workstation.DefaultStatus
		wc.mutation.SetStatus(v)
	}
	if _, ok := wc.mutation.AutoPrintReceiver(); !ok {
		v := workstation.DefaultAutoPrintReceiver
		wc.mutation.SetAutoPrintReceiver(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		if workstation.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized workstation.DefaultID (forgotten import ent/runtime?)")
		}
		v := workstation.DefaultID()
		wc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkstationCreate) check() error {
	if _, ok := wc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Workstation.tenant_id"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Workstation.name"`)}
	}
	if _, ok := wc.mutation.DeviceType(); !ok {
		return &ValidationError{Name: "device_type", err: errors.New(`ent: missing required field "Workstation.device_type"`)}
	}
	if v, ok := wc.mutation.DeviceType(); ok {
		if err := workstation.DeviceTypeValidator(v); err != nil {
			return &ValidationError{Name: "device_type", err: fmt.Errorf(`ent: validator failed for field "Workstation.device_type": %w`, err)}
		}
	}
	if _, ok := wc.mutation.RegistrationCode(); !ok {
		return &ValidationError{Name: "registration_code", err: errors.New(`ent: missing required field "Workstation.registration_code"`)}
	}
	if _, ok := wc.mutation.WorkstationID(); !ok {
		return &ValidationError{Name: "workstation_id", err: errors.New(`ent: missing required field "Workstation.workstation_id"`)}
	}
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Workstation.created_at"`)}
	}
	if _, ok := wc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Workstation.status"`)}
	}
	if v, ok := wc.mutation.Status(); ok {
		if err := workstation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Workstation.status": %w`, err)}
		}
	}
	if _, ok := wc.mutation.AutoPrintReceiver(); !ok {
		return &ValidationError{Name: "auto_print_receiver", err: errors.New(`ent: missing required field "Workstation.auto_print_receiver"`)}
	}
	if len(wc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Workstation.tenant"`)}
	}
	return nil
}

func (wc *WorkstationCreate) sqlSave(ctx context.Context) (*Workstation, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorkstationCreate) createSpec() (*Workstation, *sqlgraph.CreateSpec) {
	var (
		_node = &Workstation{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(workstation.Table, sqlgraph.NewFieldSpec(workstation.FieldID, field.TypeString))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.ArchivedAt(); ok {
		_spec.SetField(workstation.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(workstation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.DeviceType(); ok {
		_spec.SetField(workstation.FieldDeviceType, field.TypeEnum, value)
		_node.DeviceType = value
	}
	if value, ok := wc.mutation.RegistrationCode(); ok {
		_spec.SetField(workstation.FieldRegistrationCode, field.TypeString, value)
		_node.RegistrationCode = value
	}
	if value, ok := wc.mutation.WorkstationID(); ok {
		_spec.SetField(workstation.FieldWorkstationID, field.TypeString, value)
		_node.WorkstationID = value
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(workstation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.LastPing(); ok {
		_spec.SetField(workstation.FieldLastPing, field.TypeTime, value)
		_node.LastPing = value
	}
	if value, ok := wc.mutation.Status(); ok {
		_spec.SetField(workstation.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := wc.mutation.AutoPrintReceiver(); ok {
		_spec.SetField(workstation.FieldAutoPrintReceiver, field.TypeBool, value)
		_node.AutoPrintReceiver = value
	}
	if nodes := wc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.TenantTable,
			Columns: []string{workstation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.PrinterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.UserTable,
			Columns: []string{workstation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workstation_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.SelectedUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workstation.SelectedUserTable,
			Columns: []string{workstation.SelectedUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_selected_workstation = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workstation.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkstationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (wc *WorkstationCreate) OnConflict(opts ...sql.ConflictOption) *WorkstationUpsertOne {
	wc.conflict = opts
	return &WorkstationUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workstation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WorkstationCreate) OnConflictColumns(columns ...string) *WorkstationUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WorkstationUpsertOne{
		create: wc,
	}
}

type (
	// WorkstationUpsertOne is the builder for "upsert"-ing
	//  one Workstation node.
	WorkstationUpsertOne struct {
		create *WorkstationCreate
	}

	// WorkstationUpsert is the "OnConflict" setter.
	WorkstationUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *WorkstationUpsert) SetTenantID(v pulid.ID) *WorkstationUpsert {
	u.Set(workstation.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateTenantID() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldTenantID)
	return u
}

// SetArchivedAt sets the "archived_at" field.
func (u *WorkstationUpsert) SetArchivedAt(v time.Time) *WorkstationUpsert {
	u.Set(workstation.FieldArchivedAt, v)
	return u
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateArchivedAt() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldArchivedAt)
	return u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *WorkstationUpsert) ClearArchivedAt() *WorkstationUpsert {
	u.SetNull(workstation.FieldArchivedAt)
	return u
}

// SetName sets the "name" field.
func (u *WorkstationUpsert) SetName(v string) *WorkstationUpsert {
	u.Set(workstation.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateName() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldName)
	return u
}

// SetDeviceType sets the "device_type" field.
func (u *WorkstationUpsert) SetDeviceType(v workstation.DeviceType) *WorkstationUpsert {
	u.Set(workstation.FieldDeviceType, v)
	return u
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateDeviceType() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldDeviceType)
	return u
}

// SetWorkstationID sets the "workstation_id" field.
func (u *WorkstationUpsert) SetWorkstationID(v pulid.ID) *WorkstationUpsert {
	u.Set(workstation.FieldWorkstationID, v)
	return u
}

// UpdateWorkstationID sets the "workstation_id" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateWorkstationID() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldWorkstationID)
	return u
}

// SetLastPing sets the "last_ping" field.
func (u *WorkstationUpsert) SetLastPing(v time.Time) *WorkstationUpsert {
	u.Set(workstation.FieldLastPing, v)
	return u
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateLastPing() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldLastPing)
	return u
}

// ClearLastPing clears the value of the "last_ping" field.
func (u *WorkstationUpsert) ClearLastPing() *WorkstationUpsert {
	u.SetNull(workstation.FieldLastPing)
	return u
}

// SetStatus sets the "status" field.
func (u *WorkstationUpsert) SetStatus(v workstation.Status) *WorkstationUpsert {
	u.Set(workstation.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateStatus() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldStatus)
	return u
}

// SetAutoPrintReceiver sets the "auto_print_receiver" field.
func (u *WorkstationUpsert) SetAutoPrintReceiver(v bool) *WorkstationUpsert {
	u.Set(workstation.FieldAutoPrintReceiver, v)
	return u
}

// UpdateAutoPrintReceiver sets the "auto_print_receiver" field to the value that was provided on create.
func (u *WorkstationUpsert) UpdateAutoPrintReceiver() *WorkstationUpsert {
	u.SetExcluded(workstation.FieldAutoPrintReceiver)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Workstation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workstation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkstationUpsertOne) UpdateNewValues() *WorkstationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workstation.FieldID)
		}
		if _, exists := u.create.mutation.RegistrationCode(); exists {
			s.SetIgnore(workstation.FieldRegistrationCode)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workstation.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workstation.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkstationUpsertOne) Ignore() *WorkstationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkstationUpsertOne) DoNothing() *WorkstationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkstationCreate.OnConflict
// documentation for more info.
func (u *WorkstationUpsertOne) Update(set func(*WorkstationUpsert)) *WorkstationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkstationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WorkstationUpsertOne) SetTenantID(v pulid.ID) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateTenantID() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *WorkstationUpsertOne) SetArchivedAt(v time.Time) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateArchivedAt() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *WorkstationUpsertOne) ClearArchivedAt() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.ClearArchivedAt()
	})
}

// SetName sets the "name" field.
func (u *WorkstationUpsertOne) SetName(v string) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateName() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateName()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *WorkstationUpsertOne) SetDeviceType(v workstation.DeviceType) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateDeviceType() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateDeviceType()
	})
}

// SetWorkstationID sets the "workstation_id" field.
func (u *WorkstationUpsertOne) SetWorkstationID(v pulid.ID) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetWorkstationID(v)
	})
}

// UpdateWorkstationID sets the "workstation_id" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateWorkstationID() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateWorkstationID()
	})
}

// SetLastPing sets the "last_ping" field.
func (u *WorkstationUpsertOne) SetLastPing(v time.Time) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetLastPing(v)
	})
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateLastPing() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateLastPing()
	})
}

// ClearLastPing clears the value of the "last_ping" field.
func (u *WorkstationUpsertOne) ClearLastPing() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.ClearLastPing()
	})
}

// SetStatus sets the "status" field.
func (u *WorkstationUpsertOne) SetStatus(v workstation.Status) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateStatus() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateStatus()
	})
}

// SetAutoPrintReceiver sets the "auto_print_receiver" field.
func (u *WorkstationUpsertOne) SetAutoPrintReceiver(v bool) *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetAutoPrintReceiver(v)
	})
}

// UpdateAutoPrintReceiver sets the "auto_print_receiver" field to the value that was provided on create.
func (u *WorkstationUpsertOne) UpdateAutoPrintReceiver() *WorkstationUpsertOne {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateAutoPrintReceiver()
	})
}

// Exec executes the query.
func (u *WorkstationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkstationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkstationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkstationUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkstationUpsertOne.ID is not supported by MySQL driver. Use WorkstationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkstationUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkstationCreateBulk is the builder for creating many Workstation entities in bulk.
type WorkstationCreateBulk struct {
	config
	err      error
	builders []*WorkstationCreate
	conflict []sql.ConflictOption
}

// Save creates the Workstation entities in the database.
func (wcb *WorkstationCreateBulk) Save(ctx context.Context) ([]*Workstation, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workstation, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkstationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkstationCreateBulk) SaveX(ctx context.Context) []*Workstation {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkstationCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkstationCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workstation.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkstationUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (wcb *WorkstationCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkstationUpsertBulk {
	wcb.conflict = opts
	return &WorkstationUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workstation.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WorkstationCreateBulk) OnConflictColumns(columns ...string) *WorkstationUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WorkstationUpsertBulk{
		create: wcb,
	}
}

// WorkstationUpsertBulk is the builder for "upsert"-ing
// a bulk of Workstation nodes.
type WorkstationUpsertBulk struct {
	create *WorkstationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Workstation.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workstation.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkstationUpsertBulk) UpdateNewValues() *WorkstationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workstation.FieldID)
			}
			if _, exists := b.mutation.RegistrationCode(); exists {
				s.SetIgnore(workstation.FieldRegistrationCode)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workstation.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workstation.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkstationUpsertBulk) Ignore() *WorkstationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkstationUpsertBulk) DoNothing() *WorkstationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkstationCreateBulk.OnConflict
// documentation for more info.
func (u *WorkstationUpsertBulk) Update(set func(*WorkstationUpsert)) *WorkstationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkstationUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *WorkstationUpsertBulk) SetTenantID(v pulid.ID) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateTenantID() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *WorkstationUpsertBulk) SetArchivedAt(v time.Time) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateArchivedAt() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *WorkstationUpsertBulk) ClearArchivedAt() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.ClearArchivedAt()
	})
}

// SetName sets the "name" field.
func (u *WorkstationUpsertBulk) SetName(v string) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateName() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateName()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *WorkstationUpsertBulk) SetDeviceType(v workstation.DeviceType) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateDeviceType() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateDeviceType()
	})
}

// SetWorkstationID sets the "workstation_id" field.
func (u *WorkstationUpsertBulk) SetWorkstationID(v pulid.ID) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetWorkstationID(v)
	})
}

// UpdateWorkstationID sets the "workstation_id" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateWorkstationID() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateWorkstationID()
	})
}

// SetLastPing sets the "last_ping" field.
func (u *WorkstationUpsertBulk) SetLastPing(v time.Time) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetLastPing(v)
	})
}

// UpdateLastPing sets the "last_ping" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateLastPing() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateLastPing()
	})
}

// ClearLastPing clears the value of the "last_ping" field.
func (u *WorkstationUpsertBulk) ClearLastPing() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.ClearLastPing()
	})
}

// SetStatus sets the "status" field.
func (u *WorkstationUpsertBulk) SetStatus(v workstation.Status) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateStatus() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateStatus()
	})
}

// SetAutoPrintReceiver sets the "auto_print_receiver" field.
func (u *WorkstationUpsertBulk) SetAutoPrintReceiver(v bool) *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.SetAutoPrintReceiver(v)
	})
}

// UpdateAutoPrintReceiver sets the "auto_print_receiver" field to the value that was provided on create.
func (u *WorkstationUpsertBulk) UpdateAutoPrintReceiver() *WorkstationUpsertBulk {
	return u.Update(func(s *WorkstationUpsert) {
		s.UpdateAutoPrintReceiver()
	})
}

// Exec executes the query.
func (u *WorkstationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkstationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkstationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkstationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
