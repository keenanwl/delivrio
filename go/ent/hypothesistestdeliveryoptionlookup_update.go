// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionLookupUpdate is the builder for updating HypothesisTestDeliveryOptionLookup entities.
type HypothesisTestDeliveryOptionLookupUpdate struct {
	config
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionLookupMutation
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionLookupUpdate builder.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) Where(ps ...predicate.HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.Where(ps...)
	return htdolu
}

// SetTenantID sets the "tenant_id" field.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.SetTenantID(pu)
	return htdolu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetNillableTenantID(pu *pulid.ID) *HypothesisTestDeliveryOptionLookupUpdate {
	if pu != nil {
		htdolu.SetTenantID(*pu)
	}
	return htdolu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionLookupUpdate {
	return htdolu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetDeliveryOptionID(id pulid.ID) *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.SetDeliveryOptionID(id)
	return htdolu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetDeliveryOption(d *DeliveryOption) *HypothesisTestDeliveryOptionLookupUpdate {
	return htdolu.SetDeliveryOptionID(d.ID)
}

// SetHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetHypothesisTestDeliveryOptionRequestID(id pulid.ID) *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.SetHypothesisTestDeliveryOptionRequestID(id)
	return htdolu
}

// SetHypothesisTestDeliveryOptionRequest sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SetHypothesisTestDeliveryOptionRequest(h *HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionLookupUpdate {
	return htdolu.SetHypothesisTestDeliveryOptionRequestID(h.ID)
}

// Mutation returns the HypothesisTestDeliveryOptionLookupMutation object of the builder.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) Mutation() *HypothesisTestDeliveryOptionLookupMutation {
	return htdolu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) ClearTenant() *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.ClearTenant()
	return htdolu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) ClearDeliveryOption() *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.ClearDeliveryOption()
	return htdolu
}

// ClearHypothesisTestDeliveryOptionRequest clears the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) ClearHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionLookupUpdate {
	htdolu.mutation.ClearHypothesisTestDeliveryOptionRequest()
	return htdolu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, htdolu.sqlSave, htdolu.mutation, htdolu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) SaveX(ctx context.Context) int {
	affected, err := htdolu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) Exec(ctx context.Context) error {
	_, err := htdolu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) ExecX(ctx context.Context) {
	if err := htdolu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) check() error {
	if htdolu.mutation.TenantCleared() && len(htdolu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionLookup.tenant"`)
	}
	if htdolu.mutation.DeliveryOptionCleared() && len(htdolu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionLookup.delivery_option"`)
	}
	if htdolu.mutation.HypothesisTestDeliveryOptionRequestCleared() && len(htdolu.mutation.HypothesisTestDeliveryOptionRequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionLookup.hypothesis_test_delivery_option_request"`)
	}
	return nil
}

func (htdolu *HypothesisTestDeliveryOptionLookupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htdolu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString))
	if ps := htdolu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if htdolu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdolu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdolu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.DeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdolu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.DeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdolu.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdolu.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htdolu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htdolu.mutation.done = true
	return n, nil
}

// HypothesisTestDeliveryOptionLookupUpdateOne is the builder for updating a single HypothesisTestDeliveryOptionLookup entity.
type HypothesisTestDeliveryOptionLookupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HypothesisTestDeliveryOptionLookupMutation
}

// SetTenantID sets the "tenant_id" field.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.SetTenantID(pu)
	return htdoluo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetNillableTenantID(pu *pulid.ID) *HypothesisTestDeliveryOptionLookupUpdateOne {
	if pu != nil {
		htdoluo.SetTenantID(*pu)
	}
	return htdoluo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionLookupUpdateOne {
	return htdoluo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetDeliveryOptionID(id pulid.ID) *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.SetDeliveryOptionID(id)
	return htdoluo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetDeliveryOption(d *DeliveryOption) *HypothesisTestDeliveryOptionLookupUpdateOne {
	return htdoluo.SetDeliveryOptionID(d.ID)
}

// SetHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetHypothesisTestDeliveryOptionRequestID(id pulid.ID) *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.SetHypothesisTestDeliveryOptionRequestID(id)
	return htdoluo
}

// SetHypothesisTestDeliveryOptionRequest sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SetHypothesisTestDeliveryOptionRequest(h *HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionLookupUpdateOne {
	return htdoluo.SetHypothesisTestDeliveryOptionRequestID(h.ID)
}

// Mutation returns the HypothesisTestDeliveryOptionLookupMutation object of the builder.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) Mutation() *HypothesisTestDeliveryOptionLookupMutation {
	return htdoluo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) ClearTenant() *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.ClearTenant()
	return htdoluo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) ClearDeliveryOption() *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.ClearDeliveryOption()
	return htdoluo
}

// ClearHypothesisTestDeliveryOptionRequest clears the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) ClearHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.ClearHypothesisTestDeliveryOptionRequest()
	return htdoluo
}

// Where appends a list predicates to the HypothesisTestDeliveryOptionLookupUpdate builder.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) Where(ps ...predicate.HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.mutation.Where(ps...)
	return htdoluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) Select(field string, fields ...string) *HypothesisTestDeliveryOptionLookupUpdateOne {
	htdoluo.fields = append([]string{field}, fields...)
	return htdoluo
}

// Save executes the query and returns the updated HypothesisTestDeliveryOptionLookup entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) Save(ctx context.Context) (*HypothesisTestDeliveryOptionLookup, error) {
	return withHooks(ctx, htdoluo.sqlSave, htdoluo.mutation, htdoluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) SaveX(ctx context.Context) *HypothesisTestDeliveryOptionLookup {
	node, err := htdoluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) Exec(ctx context.Context) error {
	_, err := htdoluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) ExecX(ctx context.Context) {
	if err := htdoluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) check() error {
	if htdoluo.mutation.TenantCleared() && len(htdoluo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionLookup.tenant"`)
	}
	if htdoluo.mutation.DeliveryOptionCleared() && len(htdoluo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionLookup.delivery_option"`)
	}
	if htdoluo.mutation.HypothesisTestDeliveryOptionRequestCleared() && len(htdoluo.mutation.HypothesisTestDeliveryOptionRequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HypothesisTestDeliveryOptionLookup.hypothesis_test_delivery_option_request"`)
	}
	return nil
}

func (htdoluo *HypothesisTestDeliveryOptionLookupUpdateOne) sqlSave(ctx context.Context) (_node *HypothesisTestDeliveryOptionLookup, err error) {
	if err := htdoluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString))
	id, ok := htdoluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HypothesisTestDeliveryOptionLookup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htdoluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoptionlookup.FieldID)
		for _, f := range fields {
			if !hypothesistestdeliveryoptionlookup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hypothesistestdeliveryoptionlookup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htdoluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if htdoluo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoluo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoluo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.DeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoluo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.DeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if htdoluo.mutation.HypothesisTestDeliveryOptionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := htdoluo.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HypothesisTestDeliveryOptionLookup{config: htdoluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htdoluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hypothesistestdeliveryoptionlookup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htdoluo.mutation.done = true
	return _node, nil
}
