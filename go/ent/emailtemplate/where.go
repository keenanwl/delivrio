// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldTenantID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldName, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldSubject, v))
}

// HTMLTemplate applies equality check predicate on the "html_template" field. It's identical to HTMLTemplateEQ.
func HTMLTemplate(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldHTMLTemplate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.EmailTemplate {
	vc := string(v)
	return predicate.EmailTemplate(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.EmailTemplate {
	vc := string(v)
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.EmailTemplate {
	vc := string(v)
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.EmailTemplate {
	vc := string(v)
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.EmailTemplate {
	vc := string(v)
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldTenantID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldName, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldSubject, v))
}

// HTMLTemplateEQ applies the EQ predicate on the "html_template" field.
func HTMLTemplateEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldHTMLTemplate, v))
}

// HTMLTemplateNEQ applies the NEQ predicate on the "html_template" field.
func HTMLTemplateNEQ(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldHTMLTemplate, v))
}

// HTMLTemplateIn applies the In predicate on the "html_template" field.
func HTMLTemplateIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldHTMLTemplate, vs...))
}

// HTMLTemplateNotIn applies the NotIn predicate on the "html_template" field.
func HTMLTemplateNotIn(vs ...string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldHTMLTemplate, vs...))
}

// HTMLTemplateGT applies the GT predicate on the "html_template" field.
func HTMLTemplateGT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldHTMLTemplate, v))
}

// HTMLTemplateGTE applies the GTE predicate on the "html_template" field.
func HTMLTemplateGTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldHTMLTemplate, v))
}

// HTMLTemplateLT applies the LT predicate on the "html_template" field.
func HTMLTemplateLT(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldHTMLTemplate, v))
}

// HTMLTemplateLTE applies the LTE predicate on the "html_template" field.
func HTMLTemplateLTE(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldHTMLTemplate, v))
}

// HTMLTemplateContains applies the Contains predicate on the "html_template" field.
func HTMLTemplateContains(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContains(FieldHTMLTemplate, v))
}

// HTMLTemplateHasPrefix applies the HasPrefix predicate on the "html_template" field.
func HTMLTemplateHasPrefix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasPrefix(FieldHTMLTemplate, v))
}

// HTMLTemplateHasSuffix applies the HasSuffix predicate on the "html_template" field.
func HTMLTemplateHasSuffix(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldHasSuffix(FieldHTMLTemplate, v))
}

// HTMLTemplateEqualFold applies the EqualFold predicate on the "html_template" field.
func HTMLTemplateEqualFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEqualFold(FieldHTMLTemplate, v))
}

// HTMLTemplateContainsFold applies the ContainsFold predicate on the "html_template" field.
func HTMLTemplateContainsFold(v string) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldContainsFold(FieldHTMLTemplate, v))
}

// MergeTypeEQ applies the EQ predicate on the "merge_type" field.
func MergeTypeEQ(v MergeType) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldMergeType, v))
}

// MergeTypeNEQ applies the NEQ predicate on the "merge_type" field.
func MergeTypeNEQ(v MergeType) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldMergeType, v))
}

// MergeTypeIn applies the In predicate on the "merge_type" field.
func MergeTypeIn(vs ...MergeType) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldMergeType, vs...))
}

// MergeTypeNotIn applies the NotIn predicate on the "merge_type" field.
func MergeTypeNotIn(vs ...MergeType) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldMergeType, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortalConfirmationLabel applies the HasEdge predicate on the "return_portal_confirmation_label" edge.
func HasReturnPortalConfirmationLabel() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalConfirmationLabelTable, ReturnPortalConfirmationLabelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalConfirmationLabelWith applies the HasEdge predicate on the "return_portal_confirmation_label" edge with a given conditions (other predicates).
func HasReturnPortalConfirmationLabelWith(preds ...predicate.ReturnPortal) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newReturnPortalConfirmationLabelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortalConfirmationQrCode applies the HasEdge predicate on the "return_portal_confirmation_qr_code" edge.
func HasReturnPortalConfirmationQrCode() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalConfirmationQrCodeTable, ReturnPortalConfirmationQrCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalConfirmationQrCodeWith applies the HasEdge predicate on the "return_portal_confirmation_qr_code" edge with a given conditions (other predicates).
func HasReturnPortalConfirmationQrCodeWith(preds ...predicate.ReturnPortal) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newReturnPortalConfirmationQrCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortalReceived applies the HasEdge predicate on the "return_portal_received" edge.
func HasReturnPortalReceived() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalReceivedTable, ReturnPortalReceivedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalReceivedWith applies the HasEdge predicate on the "return_portal_received" edge with a given conditions (other predicates).
func HasReturnPortalReceivedWith(preds ...predicate.ReturnPortal) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newReturnPortalReceivedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReturnPortalAccepted applies the HasEdge predicate on the "return_portal_accepted" edge.
func HasReturnPortalAccepted() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalAcceptedTable, ReturnPortalAcceptedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReturnPortalAcceptedWith applies the HasEdge predicate on the "return_portal_accepted" edge with a given conditions (other predicates).
func HasReturnPortalAcceptedWith(preds ...predicate.ReturnPortal) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newReturnPortalAcceptedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveryOptionClickCollectAtStore applies the HasEdge predicate on the "delivery_option_click_collect_at_store" edge.
func HasDeliveryOptionClickCollectAtStore() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionClickCollectAtStoreTable, DeliveryOptionClickCollectAtStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveryOptionClickCollectAtStoreWith applies the HasEdge predicate on the "delivery_option_click_collect_at_store" edge with a given conditions (other predicates).
func HasDeliveryOptionClickCollectAtStoreWith(preds ...predicate.DeliveryOption) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newDeliveryOptionClickCollectAtStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.EmailTemplate {
	return predicate.EmailTemplate(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EmailTemplate) predicate.EmailTemplate {
	return predicate.EmailTemplate(sql.NotPredicates(p))
}
