// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the emailtemplate type in the database.
	Label = "email_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldHTMLTemplate holds the string denoting the html_template field in the database.
	FieldHTMLTemplate = "html_template"
	// FieldMergeType holds the string denoting the merge_type field in the database.
	FieldMergeType = "merge_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeReturnPortalConfirmationLabel holds the string denoting the return_portal_confirmation_label edge name in mutations.
	EdgeReturnPortalConfirmationLabel = "return_portal_confirmation_label"
	// EdgeReturnPortalConfirmationQrCode holds the string denoting the return_portal_confirmation_qr_code edge name in mutations.
	EdgeReturnPortalConfirmationQrCode = "return_portal_confirmation_qr_code"
	// EdgeReturnPortalReceived holds the string denoting the return_portal_received edge name in mutations.
	EdgeReturnPortalReceived = "return_portal_received"
	// EdgeReturnPortalAccepted holds the string denoting the return_portal_accepted edge name in mutations.
	EdgeReturnPortalAccepted = "return_portal_accepted"
	// EdgeDeliveryOptionClickCollectAtStore holds the string denoting the delivery_option_click_collect_at_store edge name in mutations.
	EdgeDeliveryOptionClickCollectAtStore = "delivery_option_click_collect_at_store"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// Table holds the table name of the emailtemplate in the database.
	Table = "email_templates"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "email_templates"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// ReturnPortalConfirmationLabelTable is the table that holds the return_portal_confirmation_label relation/edge.
	ReturnPortalConfirmationLabelTable = "return_portals"
	// ReturnPortalConfirmationLabelInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalConfirmationLabelInverseTable = "return_portals"
	// ReturnPortalConfirmationLabelColumn is the table column denoting the return_portal_confirmation_label relation/edge.
	ReturnPortalConfirmationLabelColumn = "return_portal_email_confirmation_label"
	// ReturnPortalConfirmationQrCodeTable is the table that holds the return_portal_confirmation_qr_code relation/edge.
	ReturnPortalConfirmationQrCodeTable = "return_portals"
	// ReturnPortalConfirmationQrCodeInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalConfirmationQrCodeInverseTable = "return_portals"
	// ReturnPortalConfirmationQrCodeColumn is the table column denoting the return_portal_confirmation_qr_code relation/edge.
	ReturnPortalConfirmationQrCodeColumn = "return_portal_email_confirmation_qr_code"
	// ReturnPortalReceivedTable is the table that holds the return_portal_received relation/edge.
	ReturnPortalReceivedTable = "return_portals"
	// ReturnPortalReceivedInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalReceivedInverseTable = "return_portals"
	// ReturnPortalReceivedColumn is the table column denoting the return_portal_received relation/edge.
	ReturnPortalReceivedColumn = "return_portal_email_received"
	// ReturnPortalAcceptedTable is the table that holds the return_portal_accepted relation/edge.
	ReturnPortalAcceptedTable = "return_portals"
	// ReturnPortalAcceptedInverseTable is the table name for the ReturnPortal entity.
	// It exists in this package in order to avoid circular dependency with the "returnportal" package.
	ReturnPortalAcceptedInverseTable = "return_portals"
	// ReturnPortalAcceptedColumn is the table column denoting the return_portal_accepted relation/edge.
	ReturnPortalAcceptedColumn = "return_portal_email_accepted"
	// DeliveryOptionClickCollectAtStoreTable is the table that holds the delivery_option_click_collect_at_store relation/edge.
	DeliveryOptionClickCollectAtStoreTable = "delivery_options"
	// DeliveryOptionClickCollectAtStoreInverseTable is the table name for the DeliveryOption entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryoption" package.
	DeliveryOptionClickCollectAtStoreInverseTable = "delivery_options"
	// DeliveryOptionClickCollectAtStoreColumn is the table column denoting the delivery_option_click_collect_at_store relation/edge.
	DeliveryOptionClickCollectAtStoreColumn = "delivery_option_email_click_collect_at_store"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "notification_email_template"
)

// Columns holds all SQL columns for emailtemplate fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldName,
	FieldSubject,
	FieldHTMLTemplate,
	FieldMergeType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultSubject holds the default value on creation for the "subject" field.
	DefaultSubject string
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// DefaultHTMLTemplate holds the default value on creation for the "html_template" field.
	DefaultHTMLTemplate string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// MergeType defines the type for the "merge_type" enum field.
type MergeType string

// MergeTypeReturnColliLabel is the default value of the MergeType enum.
const DefaultMergeType = MergeTypeReturnColliLabel

// MergeType values.
const (
	MergeTypeReturnColliLabel    MergeType = "return_colli_label"
	MergeTypeReturnColliQr       MergeType = "return_colli_qr"
	MergeTypeReturnColliReceived MergeType = "return_colli_received"
	MergeTypeReturnColliAccepted MergeType = "return_colli_accepted"
	MergeTypeOrderConfirmation   MergeType = "order_confirmation"
	MergeTypeOrderPicked         MergeType = "order_picked"
)

func (mt MergeType) String() string {
	return string(mt)
}

// MergeTypeValidator is a validator for the "merge_type" field enum values. It is called by the builders before save.
func MergeTypeValidator(mt MergeType) error {
	switch mt {
	case MergeTypeReturnColliLabel, MergeTypeReturnColliQr, MergeTypeReturnColliReceived, MergeTypeReturnColliAccepted, MergeTypeOrderConfirmation, MergeTypeOrderPicked:
		return nil
	default:
		return fmt.Errorf("emailtemplate: invalid enum value for merge_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the EmailTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByHTMLTemplate orders the results by the html_template field.
func ByHTMLTemplate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTMLTemplate, opts...).ToFunc()
}

// ByMergeType orders the results by the merge_type field.
func ByMergeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMergeType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByReturnPortalConfirmationLabelCount orders the results by return_portal_confirmation_label count.
func ByReturnPortalConfirmationLabelCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalConfirmationLabelStep(), opts...)
	}
}

// ByReturnPortalConfirmationLabel orders the results by return_portal_confirmation_label terms.
func ByReturnPortalConfirmationLabel(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalConfirmationLabelStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnPortalConfirmationQrCodeCount orders the results by return_portal_confirmation_qr_code count.
func ByReturnPortalConfirmationQrCodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalConfirmationQrCodeStep(), opts...)
	}
}

// ByReturnPortalConfirmationQrCode orders the results by return_portal_confirmation_qr_code terms.
func ByReturnPortalConfirmationQrCode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalConfirmationQrCodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnPortalReceivedCount orders the results by return_portal_received count.
func ByReturnPortalReceivedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalReceivedStep(), opts...)
	}
}

// ByReturnPortalReceived orders the results by return_portal_received terms.
func ByReturnPortalReceived(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalReceivedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReturnPortalAcceptedCount orders the results by return_portal_accepted count.
func ByReturnPortalAcceptedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReturnPortalAcceptedStep(), opts...)
	}
}

// ByReturnPortalAccepted orders the results by return_portal_accepted terms.
func ByReturnPortalAccepted(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReturnPortalAcceptedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDeliveryOptionClickCollectAtStoreCount orders the results by delivery_option_click_collect_at_store count.
func ByDeliveryOptionClickCollectAtStoreCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveryOptionClickCollectAtStoreStep(), opts...)
	}
}

// ByDeliveryOptionClickCollectAtStore orders the results by delivery_option_click_collect_at_store terms.
func ByDeliveryOptionClickCollectAtStore(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryOptionClickCollectAtStoreStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newReturnPortalConfirmationLabelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalConfirmationLabelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalConfirmationLabelTable, ReturnPortalConfirmationLabelColumn),
	)
}
func newReturnPortalConfirmationQrCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalConfirmationQrCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalConfirmationQrCodeTable, ReturnPortalConfirmationQrCodeColumn),
	)
}
func newReturnPortalReceivedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalReceivedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalReceivedTable, ReturnPortalReceivedColumn),
	)
}
func newReturnPortalAcceptedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReturnPortalAcceptedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ReturnPortalAcceptedTable, ReturnPortalAcceptedColumn),
	)
}
func newDeliveryOptionClickCollectAtStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryOptionClickCollectAtStoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeliveryOptionClickCollectAtStoreTable, DeliveryOptionClickCollectAtStoreColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e MergeType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *MergeType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = MergeType(str)
	if err := MergeTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid MergeType", str)
	}
	return nil
}
