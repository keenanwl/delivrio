// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CarrierAdditionalServiceDF is the model entity for the CarrierAdditionalServiceDF schema.
type CarrierAdditionalServiceDF struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// APICode holds the value of the "api_code" field.
	APICode string `json:"api_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierAdditionalServiceDFQuery when eager-loading is set.
	Edges        CarrierAdditionalServiceDFEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CarrierAdditionalServiceDFEdges holds the relations/edges for other nodes in the graph.
type CarrierAdditionalServiceDFEdges struct {
	// CarrierServiceDF holds the value of the carrier_service_df edge.
	CarrierServiceDF []*CarrierServiceDF `json:"carrier_service_df,omitempty"`
	// DeliveryOptionDF holds the value of the delivery_option_df edge.
	DeliveryOptionDF []*DeliveryOptionDF `json:"delivery_option_df,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCarrierServiceDF map[string][]*CarrierServiceDF
	namedDeliveryOptionDF map[string][]*DeliveryOptionDF
}

// CarrierServiceDFOrErr returns the CarrierServiceDF value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceDFEdges) CarrierServiceDFOrErr() ([]*CarrierServiceDF, error) {
	if e.loadedTypes[0] {
		return e.CarrierServiceDF, nil
	}
	return nil, &NotLoadedError{edge: "carrier_service_df"}
}

// DeliveryOptionDFOrErr returns the DeliveryOptionDF value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierAdditionalServiceDFEdges) DeliveryOptionDFOrErr() ([]*DeliveryOptionDF, error) {
	if e.loadedTypes[1] {
		return e.DeliveryOptionDF, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_df"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarrierAdditionalServiceDF) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrieradditionalservicedf.FieldID:
			values[i] = new(pulid.ID)
		case carrieradditionalservicedf.FieldLabel, carrieradditionalservicedf.FieldAPICode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarrierAdditionalServiceDF fields.
func (casd *CarrierAdditionalServiceDF) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrieradditionalservicedf.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				casd.ID = *value
			}
		case carrieradditionalservicedf.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				casd.Label = value.String
			}
		case carrieradditionalservicedf.FieldAPICode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_code", values[i])
			} else if value.Valid {
				casd.APICode = value.String
			}
		default:
			casd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CarrierAdditionalServiceDF.
// This includes values selected through modifiers, order, etc.
func (casd *CarrierAdditionalServiceDF) Value(name string) (ent.Value, error) {
	return casd.selectValues.Get(name)
}

// QueryCarrierServiceDF queries the "carrier_service_df" edge of the CarrierAdditionalServiceDF entity.
func (casd *CarrierAdditionalServiceDF) QueryCarrierServiceDF() *CarrierServiceDFQuery {
	return NewCarrierAdditionalServiceDFClient(casd.config).QueryCarrierServiceDF(casd)
}

// QueryDeliveryOptionDF queries the "delivery_option_df" edge of the CarrierAdditionalServiceDF entity.
func (casd *CarrierAdditionalServiceDF) QueryDeliveryOptionDF() *DeliveryOptionDFQuery {
	return NewCarrierAdditionalServiceDFClient(casd.config).QueryDeliveryOptionDF(casd)
}

// Update returns a builder for updating this CarrierAdditionalServiceDF.
// Note that you need to call CarrierAdditionalServiceDF.Unwrap() before calling this method if this CarrierAdditionalServiceDF
// was returned from a transaction, and the transaction was committed or rolled back.
func (casd *CarrierAdditionalServiceDF) Update() *CarrierAdditionalServiceDFUpdateOne {
	return NewCarrierAdditionalServiceDFClient(casd.config).UpdateOne(casd)
}

// Unwrap unwraps the CarrierAdditionalServiceDF entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (casd *CarrierAdditionalServiceDF) Unwrap() *CarrierAdditionalServiceDF {
	_tx, ok := casd.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarrierAdditionalServiceDF is not a transactional entity")
	}
	casd.config.driver = _tx.drv
	return casd
}

// String implements the fmt.Stringer.
func (casd *CarrierAdditionalServiceDF) String() string {
	var builder strings.Builder
	builder.WriteString("CarrierAdditionalServiceDF(")
	builder.WriteString(fmt.Sprintf("id=%v, ", casd.ID))
	builder.WriteString("label=")
	builder.WriteString(casd.Label)
	builder.WriteString(", ")
	builder.WriteString("api_code=")
	builder.WriteString(casd.APICode)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCarrierServiceDF returns the CarrierServiceDF named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casd *CarrierAdditionalServiceDF) NamedCarrierServiceDF(name string) ([]*CarrierServiceDF, error) {
	if casd.Edges.namedCarrierServiceDF == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casd.Edges.namedCarrierServiceDF[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casd *CarrierAdditionalServiceDF) appendNamedCarrierServiceDF(name string, edges ...*CarrierServiceDF) {
	if casd.Edges.namedCarrierServiceDF == nil {
		casd.Edges.namedCarrierServiceDF = make(map[string][]*CarrierServiceDF)
	}
	if len(edges) == 0 {
		casd.Edges.namedCarrierServiceDF[name] = []*CarrierServiceDF{}
	} else {
		casd.Edges.namedCarrierServiceDF[name] = append(casd.Edges.namedCarrierServiceDF[name], edges...)
	}
}

// NamedDeliveryOptionDF returns the DeliveryOptionDF named value or an error if the edge was not
// loaded in eager-loading with this name.
func (casd *CarrierAdditionalServiceDF) NamedDeliveryOptionDF(name string) ([]*DeliveryOptionDF, error) {
	if casd.Edges.namedDeliveryOptionDF == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := casd.Edges.namedDeliveryOptionDF[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (casd *CarrierAdditionalServiceDF) appendNamedDeliveryOptionDF(name string, edges ...*DeliveryOptionDF) {
	if casd.Edges.namedDeliveryOptionDF == nil {
		casd.Edges.namedDeliveryOptionDF = make(map[string][]*DeliveryOptionDF)
	}
	if len(edges) == 0 {
		casd.Edges.namedDeliveryOptionDF[name] = []*DeliveryOptionDF{}
	} else {
		casd.Edges.namedDeliveryOptionDF[name] = append(casd.Edges.namedDeliveryOptionDF[name], edges...)
	}
}

// CarrierAdditionalServiceDFs is a parsable slice of CarrierAdditionalServiceDF.
type CarrierAdditionalServiceDFs []*CarrierAdditionalServiceDF
