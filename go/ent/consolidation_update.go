// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConsolidationUpdate is the builder for updating Consolidation entities.
type ConsolidationUpdate struct {
	config
	hooks    []Hook
	mutation *ConsolidationMutation
}

// Where appends a list predicates to the ConsolidationUpdate builder.
func (cu *ConsolidationUpdate) Where(ps ...predicate.Consolidation) *ConsolidationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *ConsolidationUpdate) SetTenantID(pu pulid.ID) *ConsolidationUpdate {
	cu.mutation.SetTenantID(pu)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableTenantID(pu *pulid.ID) *ConsolidationUpdate {
	if pu != nil {
		cu.SetTenantID(*pu)
	}
	return cu
}

// SetPublicID sets the "public_id" field.
func (cu *ConsolidationUpdate) SetPublicID(s string) *ConsolidationUpdate {
	cu.mutation.SetPublicID(s)
	return cu
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillablePublicID(s *string) *ConsolidationUpdate {
	if s != nil {
		cu.SetPublicID(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ConsolidationUpdate) SetDescription(s string) *ConsolidationUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableDescription(s *string) *ConsolidationUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *ConsolidationUpdate) ClearDescription() *ConsolidationUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ConsolidationUpdate) SetStatus(c consolidation.Status) *ConsolidationUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableStatus(c *consolidation.Status) *ConsolidationUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cu *ConsolidationUpdate) SetTenant(t *Tenant) *ConsolidationUpdate {
	return cu.SetTenantID(t.ID)
}

// AddPalletIDs adds the "pallets" edge to the Pallet entity by IDs.
func (cu *ConsolidationUpdate) AddPalletIDs(ids ...pulid.ID) *ConsolidationUpdate {
	cu.mutation.AddPalletIDs(ids...)
	return cu
}

// AddPallets adds the "pallets" edges to the Pallet entity.
func (cu *ConsolidationUpdate) AddPallets(p ...*Pallet) *ConsolidationUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPalletIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cu *ConsolidationUpdate) AddOrderIDs(ids ...pulid.ID) *ConsolidationUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the Order entity.
func (cu *ConsolidationUpdate) AddOrders(o ...*Order) *ConsolidationUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (cu *ConsolidationUpdate) SetDeliveryOptionID(id pulid.ID) *ConsolidationUpdate {
	cu.mutation.SetDeliveryOptionID(id)
	return cu
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableDeliveryOptionID(id *pulid.ID) *ConsolidationUpdate {
	if id != nil {
		cu = cu.SetDeliveryOptionID(*id)
	}
	return cu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (cu *ConsolidationUpdate) SetDeliveryOption(d *DeliveryOption) *ConsolidationUpdate {
	return cu.SetDeliveryOptionID(d.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (cu *ConsolidationUpdate) SetRecipientID(id pulid.ID) *ConsolidationUpdate {
	cu.mutation.SetRecipientID(id)
	return cu
}

// SetNillableRecipientID sets the "recipient" edge to the Address entity by ID if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableRecipientID(id *pulid.ID) *ConsolidationUpdate {
	if id != nil {
		cu = cu.SetRecipientID(*id)
	}
	return cu
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (cu *ConsolidationUpdate) SetRecipient(a *Address) *ConsolidationUpdate {
	return cu.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (cu *ConsolidationUpdate) SetSenderID(id pulid.ID) *ConsolidationUpdate {
	cu.mutation.SetSenderID(id)
	return cu
}

// SetNillableSenderID sets the "sender" edge to the Address entity by ID if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableSenderID(id *pulid.ID) *ConsolidationUpdate {
	if id != nil {
		cu = cu.SetSenderID(*id)
	}
	return cu
}

// SetSender sets the "sender" edge to the Address entity.
func (cu *ConsolidationUpdate) SetSender(a *Address) *ConsolidationUpdate {
	return cu.SetSenderID(a.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (cu *ConsolidationUpdate) SetShipmentID(id pulid.ID) *ConsolidationUpdate {
	cu.mutation.SetShipmentID(id)
	return cu
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (cu *ConsolidationUpdate) SetNillableShipmentID(id *pulid.ID) *ConsolidationUpdate {
	if id != nil {
		cu = cu.SetShipmentID(*id)
	}
	return cu
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (cu *ConsolidationUpdate) SetShipment(s *Shipment) *ConsolidationUpdate {
	return cu.SetShipmentID(s.ID)
}

// AddCancelledShipmentIDs adds the "cancelled_shipments" edge to the Shipment entity by IDs.
func (cu *ConsolidationUpdate) AddCancelledShipmentIDs(ids ...pulid.ID) *ConsolidationUpdate {
	cu.mutation.AddCancelledShipmentIDs(ids...)
	return cu
}

// AddCancelledShipments adds the "cancelled_shipments" edges to the Shipment entity.
func (cu *ConsolidationUpdate) AddCancelledShipments(s ...*Shipment) *ConsolidationUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddCancelledShipmentIDs(ids...)
}

// Mutation returns the ConsolidationMutation object of the builder.
func (cu *ConsolidationUpdate) Mutation() *ConsolidationMutation {
	return cu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cu *ConsolidationUpdate) ClearTenant() *ConsolidationUpdate {
	cu.mutation.ClearTenant()
	return cu
}

// ClearPallets clears all "pallets" edges to the Pallet entity.
func (cu *ConsolidationUpdate) ClearPallets() *ConsolidationUpdate {
	cu.mutation.ClearPallets()
	return cu
}

// RemovePalletIDs removes the "pallets" edge to Pallet entities by IDs.
func (cu *ConsolidationUpdate) RemovePalletIDs(ids ...pulid.ID) *ConsolidationUpdate {
	cu.mutation.RemovePalletIDs(ids...)
	return cu
}

// RemovePallets removes "pallets" edges to Pallet entities.
func (cu *ConsolidationUpdate) RemovePallets(p ...*Pallet) *ConsolidationUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePalletIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cu *ConsolidationUpdate) ClearOrders() *ConsolidationUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cu *ConsolidationUpdate) RemoveOrderIDs(ids ...pulid.ID) *ConsolidationUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to Order entities.
func (cu *ConsolidationUpdate) RemoveOrders(o ...*Order) *ConsolidationUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (cu *ConsolidationUpdate) ClearDeliveryOption() *ConsolidationUpdate {
	cu.mutation.ClearDeliveryOption()
	return cu
}

// ClearRecipient clears the "recipient" edge to the Address entity.
func (cu *ConsolidationUpdate) ClearRecipient() *ConsolidationUpdate {
	cu.mutation.ClearRecipient()
	return cu
}

// ClearSender clears the "sender" edge to the Address entity.
func (cu *ConsolidationUpdate) ClearSender() *ConsolidationUpdate {
	cu.mutation.ClearSender()
	return cu
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (cu *ConsolidationUpdate) ClearShipment() *ConsolidationUpdate {
	cu.mutation.ClearShipment()
	return cu
}

// ClearCancelledShipments clears all "cancelled_shipments" edges to the Shipment entity.
func (cu *ConsolidationUpdate) ClearCancelledShipments() *ConsolidationUpdate {
	cu.mutation.ClearCancelledShipments()
	return cu
}

// RemoveCancelledShipmentIDs removes the "cancelled_shipments" edge to Shipment entities by IDs.
func (cu *ConsolidationUpdate) RemoveCancelledShipmentIDs(ids ...pulid.ID) *ConsolidationUpdate {
	cu.mutation.RemoveCancelledShipmentIDs(ids...)
	return cu
}

// RemoveCancelledShipments removes "cancelled_shipments" edges to Shipment entities.
func (cu *ConsolidationUpdate) RemoveCancelledShipments(s ...*Shipment) *ConsolidationUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveCancelledShipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConsolidationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConsolidationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConsolidationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConsolidationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConsolidationUpdate) check() error {
	if v, ok := cu.mutation.Status(); ok {
		if err := consolidation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Consolidation.status": %w`, err)}
		}
	}
	if cu.mutation.TenantCleared() && len(cu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Consolidation.tenant"`)
	}
	return nil
}

func (cu *ConsolidationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(consolidation.Table, consolidation.Columns, sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.PublicID(); ok {
		_spec.SetField(consolidation.FieldPublicID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(consolidation.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(consolidation.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(consolidation.FieldStatus, field.TypeEnum, value)
	}
	if cu.mutation.CreatedAtCleared() {
		_spec.ClearField(consolidation.FieldCreatedAt, field.TypeTime)
	}
	if cu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.TenantTable,
			Columns: []string{consolidation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.TenantTable,
			Columns: []string{consolidation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPalletsIDs(); len(nodes) > 0 && !cu.mutation.PalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.DeliveryOptionTable,
			Columns: []string{consolidation.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.DeliveryOptionTable,
			Columns: []string{consolidation.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.RecipientTable,
			Columns: []string{consolidation.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.RecipientTable,
			Columns: []string{consolidation.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.SenderTable,
			Columns: []string{consolidation.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.SenderTable,
			Columns: []string{consolidation.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   consolidation.ShipmentTable,
			Columns: []string{consolidation.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   consolidation.ShipmentTable,
			Columns: []string{consolidation.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CancelledShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCancelledShipmentsIDs(); len(nodes) > 0 && !cu.mutation.CancelledShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CancelledShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consolidation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConsolidationUpdateOne is the builder for updating a single Consolidation entity.
type ConsolidationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConsolidationMutation
}

// SetTenantID sets the "tenant_id" field.
func (cuo *ConsolidationUpdateOne) SetTenantID(pu pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.SetTenantID(pu)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableTenantID(pu *pulid.ID) *ConsolidationUpdateOne {
	if pu != nil {
		cuo.SetTenantID(*pu)
	}
	return cuo
}

// SetPublicID sets the "public_id" field.
func (cuo *ConsolidationUpdateOne) SetPublicID(s string) *ConsolidationUpdateOne {
	cuo.mutation.SetPublicID(s)
	return cuo
}

// SetNillablePublicID sets the "public_id" field if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillablePublicID(s *string) *ConsolidationUpdateOne {
	if s != nil {
		cuo.SetPublicID(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ConsolidationUpdateOne) SetDescription(s string) *ConsolidationUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableDescription(s *string) *ConsolidationUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *ConsolidationUpdateOne) ClearDescription() *ConsolidationUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ConsolidationUpdateOne) SetStatus(c consolidation.Status) *ConsolidationUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableStatus(c *consolidation.Status) *ConsolidationUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuo *ConsolidationUpdateOne) SetTenant(t *Tenant) *ConsolidationUpdateOne {
	return cuo.SetTenantID(t.ID)
}

// AddPalletIDs adds the "pallets" edge to the Pallet entity by IDs.
func (cuo *ConsolidationUpdateOne) AddPalletIDs(ids ...pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.AddPalletIDs(ids...)
	return cuo
}

// AddPallets adds the "pallets" edges to the Pallet entity.
func (cuo *ConsolidationUpdateOne) AddPallets(p ...*Pallet) *ConsolidationUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPalletIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cuo *ConsolidationUpdateOne) AddOrderIDs(ids ...pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (cuo *ConsolidationUpdateOne) AddOrders(o ...*Order) *ConsolidationUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (cuo *ConsolidationUpdateOne) SetDeliveryOptionID(id pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.SetDeliveryOptionID(id)
	return cuo
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableDeliveryOptionID(id *pulid.ID) *ConsolidationUpdateOne {
	if id != nil {
		cuo = cuo.SetDeliveryOptionID(*id)
	}
	return cuo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (cuo *ConsolidationUpdateOne) SetDeliveryOption(d *DeliveryOption) *ConsolidationUpdateOne {
	return cuo.SetDeliveryOptionID(d.ID)
}

// SetRecipientID sets the "recipient" edge to the Address entity by ID.
func (cuo *ConsolidationUpdateOne) SetRecipientID(id pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.SetRecipientID(id)
	return cuo
}

// SetNillableRecipientID sets the "recipient" edge to the Address entity by ID if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableRecipientID(id *pulid.ID) *ConsolidationUpdateOne {
	if id != nil {
		cuo = cuo.SetRecipientID(*id)
	}
	return cuo
}

// SetRecipient sets the "recipient" edge to the Address entity.
func (cuo *ConsolidationUpdateOne) SetRecipient(a *Address) *ConsolidationUpdateOne {
	return cuo.SetRecipientID(a.ID)
}

// SetSenderID sets the "sender" edge to the Address entity by ID.
func (cuo *ConsolidationUpdateOne) SetSenderID(id pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.SetSenderID(id)
	return cuo
}

// SetNillableSenderID sets the "sender" edge to the Address entity by ID if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableSenderID(id *pulid.ID) *ConsolidationUpdateOne {
	if id != nil {
		cuo = cuo.SetSenderID(*id)
	}
	return cuo
}

// SetSender sets the "sender" edge to the Address entity.
func (cuo *ConsolidationUpdateOne) SetSender(a *Address) *ConsolidationUpdateOne {
	return cuo.SetSenderID(a.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (cuo *ConsolidationUpdateOne) SetShipmentID(id pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.SetShipmentID(id)
	return cuo
}

// SetNillableShipmentID sets the "shipment" edge to the Shipment entity by ID if the given value is not nil.
func (cuo *ConsolidationUpdateOne) SetNillableShipmentID(id *pulid.ID) *ConsolidationUpdateOne {
	if id != nil {
		cuo = cuo.SetShipmentID(*id)
	}
	return cuo
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (cuo *ConsolidationUpdateOne) SetShipment(s *Shipment) *ConsolidationUpdateOne {
	return cuo.SetShipmentID(s.ID)
}

// AddCancelledShipmentIDs adds the "cancelled_shipments" edge to the Shipment entity by IDs.
func (cuo *ConsolidationUpdateOne) AddCancelledShipmentIDs(ids ...pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.AddCancelledShipmentIDs(ids...)
	return cuo
}

// AddCancelledShipments adds the "cancelled_shipments" edges to the Shipment entity.
func (cuo *ConsolidationUpdateOne) AddCancelledShipments(s ...*Shipment) *ConsolidationUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddCancelledShipmentIDs(ids...)
}

// Mutation returns the ConsolidationMutation object of the builder.
func (cuo *ConsolidationUpdateOne) Mutation() *ConsolidationMutation {
	return cuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuo *ConsolidationUpdateOne) ClearTenant() *ConsolidationUpdateOne {
	cuo.mutation.ClearTenant()
	return cuo
}

// ClearPallets clears all "pallets" edges to the Pallet entity.
func (cuo *ConsolidationUpdateOne) ClearPallets() *ConsolidationUpdateOne {
	cuo.mutation.ClearPallets()
	return cuo
}

// RemovePalletIDs removes the "pallets" edge to Pallet entities by IDs.
func (cuo *ConsolidationUpdateOne) RemovePalletIDs(ids ...pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.RemovePalletIDs(ids...)
	return cuo
}

// RemovePallets removes "pallets" edges to Pallet entities.
func (cuo *ConsolidationUpdateOne) RemovePallets(p ...*Pallet) *ConsolidationUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePalletIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cuo *ConsolidationUpdateOne) ClearOrders() *ConsolidationUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cuo *ConsolidationUpdateOne) RemoveOrderIDs(ids ...pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (cuo *ConsolidationUpdateOne) RemoveOrders(o ...*Order) *ConsolidationUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (cuo *ConsolidationUpdateOne) ClearDeliveryOption() *ConsolidationUpdateOne {
	cuo.mutation.ClearDeliveryOption()
	return cuo
}

// ClearRecipient clears the "recipient" edge to the Address entity.
func (cuo *ConsolidationUpdateOne) ClearRecipient() *ConsolidationUpdateOne {
	cuo.mutation.ClearRecipient()
	return cuo
}

// ClearSender clears the "sender" edge to the Address entity.
func (cuo *ConsolidationUpdateOne) ClearSender() *ConsolidationUpdateOne {
	cuo.mutation.ClearSender()
	return cuo
}

// ClearShipment clears the "shipment" edge to the Shipment entity.
func (cuo *ConsolidationUpdateOne) ClearShipment() *ConsolidationUpdateOne {
	cuo.mutation.ClearShipment()
	return cuo
}

// ClearCancelledShipments clears all "cancelled_shipments" edges to the Shipment entity.
func (cuo *ConsolidationUpdateOne) ClearCancelledShipments() *ConsolidationUpdateOne {
	cuo.mutation.ClearCancelledShipments()
	return cuo
}

// RemoveCancelledShipmentIDs removes the "cancelled_shipments" edge to Shipment entities by IDs.
func (cuo *ConsolidationUpdateOne) RemoveCancelledShipmentIDs(ids ...pulid.ID) *ConsolidationUpdateOne {
	cuo.mutation.RemoveCancelledShipmentIDs(ids...)
	return cuo
}

// RemoveCancelledShipments removes "cancelled_shipments" edges to Shipment entities.
func (cuo *ConsolidationUpdateOne) RemoveCancelledShipments(s ...*Shipment) *ConsolidationUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveCancelledShipmentIDs(ids...)
}

// Where appends a list predicates to the ConsolidationUpdate builder.
func (cuo *ConsolidationUpdateOne) Where(ps ...predicate.Consolidation) *ConsolidationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConsolidationUpdateOne) Select(field string, fields ...string) *ConsolidationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Consolidation entity.
func (cuo *ConsolidationUpdateOne) Save(ctx context.Context) (*Consolidation, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConsolidationUpdateOne) SaveX(ctx context.Context) *Consolidation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConsolidationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConsolidationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConsolidationUpdateOne) check() error {
	if v, ok := cuo.mutation.Status(); ok {
		if err := consolidation.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Consolidation.status": %w`, err)}
		}
	}
	if cuo.mutation.TenantCleared() && len(cuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Consolidation.tenant"`)
	}
	return nil
}

func (cuo *ConsolidationUpdateOne) sqlSave(ctx context.Context) (_node *Consolidation, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(consolidation.Table, consolidation.Columns, sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Consolidation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, consolidation.FieldID)
		for _, f := range fields {
			if !consolidation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != consolidation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.PublicID(); ok {
		_spec.SetField(consolidation.FieldPublicID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(consolidation.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(consolidation.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(consolidation.FieldStatus, field.TypeEnum, value)
	}
	if cuo.mutation.CreatedAtCleared() {
		_spec.ClearField(consolidation.FieldCreatedAt, field.TypeTime)
	}
	if cuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.TenantTable,
			Columns: []string{consolidation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.TenantTable,
			Columns: []string{consolidation.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPalletsIDs(); len(nodes) > 0 && !cuo.mutation.PalletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PalletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.DeliveryOptionTable,
			Columns: []string{consolidation.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.DeliveryOptionTable,
			Columns: []string{consolidation.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.RecipientTable,
			Columns: []string{consolidation.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.RecipientTable,
			Columns: []string{consolidation.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.SenderTable,
			Columns: []string{consolidation.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.SenderTable,
			Columns: []string{consolidation.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ShipmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   consolidation.ShipmentTable,
			Columns: []string{consolidation.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   consolidation.ShipmentTable,
			Columns: []string{consolidation.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CancelledShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCancelledShipmentsIDs(); len(nodes) > 0 && !cuo.mutation.CancelledShipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CancelledShipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Consolidation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{consolidation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
