// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductVariantUpdate is the builder for updating ProductVariant entities.
type ProductVariantUpdate struct {
	config
	hooks    []Hook
	mutation *ProductVariantMutation
}

// Where appends a list predicates to the ProductVariantUpdate builder.
func (pvu *ProductVariantUpdate) Where(ps ...predicate.ProductVariant) *ProductVariantUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetTenantID sets the "tenant_id" field.
func (pvu *ProductVariantUpdate) SetTenantID(pu pulid.ID) *ProductVariantUpdate {
	pvu.mutation.SetTenantID(pu)
	return pvu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableTenantID(pu *pulid.ID) *ProductVariantUpdate {
	if pu != nil {
		pvu.SetTenantID(*pu)
	}
	return pvu
}

// SetArchived sets the "archived" field.
func (pvu *ProductVariantUpdate) SetArchived(b bool) *ProductVariantUpdate {
	pvu.mutation.SetArchived(b)
	return pvu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableArchived(b *bool) *ProductVariantUpdate {
	if b != nil {
		pvu.SetArchived(*b)
	}
	return pvu
}

// SetExternalID sets the "external_ID" field.
func (pvu *ProductVariantUpdate) SetExternalID(s string) *ProductVariantUpdate {
	pvu.mutation.SetExternalID(s)
	return pvu
}

// SetNillableExternalID sets the "external_ID" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableExternalID(s *string) *ProductVariantUpdate {
	if s != nil {
		pvu.SetExternalID(*s)
	}
	return pvu
}

// ClearExternalID clears the value of the "external_ID" field.
func (pvu *ProductVariantUpdate) ClearExternalID() *ProductVariantUpdate {
	pvu.mutation.ClearExternalID()
	return pvu
}

// SetDescription sets the "description" field.
func (pvu *ProductVariantUpdate) SetDescription(s string) *ProductVariantUpdate {
	pvu.mutation.SetDescription(s)
	return pvu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableDescription(s *string) *ProductVariantUpdate {
	if s != nil {
		pvu.SetDescription(*s)
	}
	return pvu
}

// ClearDescription clears the value of the "description" field.
func (pvu *ProductVariantUpdate) ClearDescription() *ProductVariantUpdate {
	pvu.mutation.ClearDescription()
	return pvu
}

// SetEanNumber sets the "ean_number" field.
func (pvu *ProductVariantUpdate) SetEanNumber(s string) *ProductVariantUpdate {
	pvu.mutation.SetEanNumber(s)
	return pvu
}

// SetNillableEanNumber sets the "ean_number" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableEanNumber(s *string) *ProductVariantUpdate {
	if s != nil {
		pvu.SetEanNumber(*s)
	}
	return pvu
}

// ClearEanNumber clears the value of the "ean_number" field.
func (pvu *ProductVariantUpdate) ClearEanNumber() *ProductVariantUpdate {
	pvu.mutation.ClearEanNumber()
	return pvu
}

// SetWeightG sets the "weight_g" field.
func (pvu *ProductVariantUpdate) SetWeightG(i int) *ProductVariantUpdate {
	pvu.mutation.ResetWeightG()
	pvu.mutation.SetWeightG(i)
	return pvu
}

// SetNillableWeightG sets the "weight_g" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableWeightG(i *int) *ProductVariantUpdate {
	if i != nil {
		pvu.SetWeightG(*i)
	}
	return pvu
}

// AddWeightG adds i to the "weight_g" field.
func (pvu *ProductVariantUpdate) AddWeightG(i int) *ProductVariantUpdate {
	pvu.mutation.AddWeightG(i)
	return pvu
}

// ClearWeightG clears the value of the "weight_g" field.
func (pvu *ProductVariantUpdate) ClearWeightG() *ProductVariantUpdate {
	pvu.mutation.ClearWeightG()
	return pvu
}

// SetDimensionLength sets the "dimension_length" field.
func (pvu *ProductVariantUpdate) SetDimensionLength(i int) *ProductVariantUpdate {
	pvu.mutation.ResetDimensionLength()
	pvu.mutation.SetDimensionLength(i)
	return pvu
}

// SetNillableDimensionLength sets the "dimension_length" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableDimensionLength(i *int) *ProductVariantUpdate {
	if i != nil {
		pvu.SetDimensionLength(*i)
	}
	return pvu
}

// AddDimensionLength adds i to the "dimension_length" field.
func (pvu *ProductVariantUpdate) AddDimensionLength(i int) *ProductVariantUpdate {
	pvu.mutation.AddDimensionLength(i)
	return pvu
}

// ClearDimensionLength clears the value of the "dimension_length" field.
func (pvu *ProductVariantUpdate) ClearDimensionLength() *ProductVariantUpdate {
	pvu.mutation.ClearDimensionLength()
	return pvu
}

// SetDimensionWidth sets the "dimension_width" field.
func (pvu *ProductVariantUpdate) SetDimensionWidth(i int) *ProductVariantUpdate {
	pvu.mutation.ResetDimensionWidth()
	pvu.mutation.SetDimensionWidth(i)
	return pvu
}

// SetNillableDimensionWidth sets the "dimension_width" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableDimensionWidth(i *int) *ProductVariantUpdate {
	if i != nil {
		pvu.SetDimensionWidth(*i)
	}
	return pvu
}

// AddDimensionWidth adds i to the "dimension_width" field.
func (pvu *ProductVariantUpdate) AddDimensionWidth(i int) *ProductVariantUpdate {
	pvu.mutation.AddDimensionWidth(i)
	return pvu
}

// ClearDimensionWidth clears the value of the "dimension_width" field.
func (pvu *ProductVariantUpdate) ClearDimensionWidth() *ProductVariantUpdate {
	pvu.mutation.ClearDimensionWidth()
	return pvu
}

// SetDimensionHeight sets the "dimension_height" field.
func (pvu *ProductVariantUpdate) SetDimensionHeight(i int) *ProductVariantUpdate {
	pvu.mutation.ResetDimensionHeight()
	pvu.mutation.SetDimensionHeight(i)
	return pvu
}

// SetNillableDimensionHeight sets the "dimension_height" field if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableDimensionHeight(i *int) *ProductVariantUpdate {
	if i != nil {
		pvu.SetDimensionHeight(*i)
	}
	return pvu
}

// AddDimensionHeight adds i to the "dimension_height" field.
func (pvu *ProductVariantUpdate) AddDimensionHeight(i int) *ProductVariantUpdate {
	pvu.mutation.AddDimensionHeight(i)
	return pvu
}

// ClearDimensionHeight clears the value of the "dimension_height" field.
func (pvu *ProductVariantUpdate) ClearDimensionHeight() *ProductVariantUpdate {
	pvu.mutation.ClearDimensionHeight()
	return pvu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvu *ProductVariantUpdate) SetUpdatedAt(t time.Time) *ProductVariantUpdate {
	pvu.mutation.SetUpdatedAt(t)
	return pvu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pvu *ProductVariantUpdate) SetTenant(t *Tenant) *ProductVariantUpdate {
	return pvu.SetTenantID(t.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pvu *ProductVariantUpdate) SetProductID(id pulid.ID) *ProductVariantUpdate {
	pvu.mutation.SetProductID(id)
	return pvu
}

// SetProduct sets the "product" edge to the Product entity.
func (pvu *ProductVariantUpdate) SetProduct(p *Product) *ProductVariantUpdate {
	return pvu.SetProductID(p.ID)
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (pvu *ProductVariantUpdate) AddOrderLineIDs(ids ...pulid.ID) *ProductVariantUpdate {
	pvu.mutation.AddOrderLineIDs(ids...)
	return pvu
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (pvu *ProductVariantUpdate) AddOrderLines(o ...*OrderLine) *ProductVariantUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvu.AddOrderLineIDs(ids...)
}

// AddProductImageIDs adds the "product_image" edge to the ProductImage entity by IDs.
func (pvu *ProductVariantUpdate) AddProductImageIDs(ids ...pulid.ID) *ProductVariantUpdate {
	pvu.mutation.AddProductImageIDs(ids...)
	return pvu
}

// AddProductImage adds the "product_image" edges to the ProductImage entity.
func (pvu *ProductVariantUpdate) AddProductImage(p ...*ProductImage) *ProductVariantUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.AddProductImageIDs(ids...)
}

// SetInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID.
func (pvu *ProductVariantUpdate) SetInventoryItemID(id pulid.ID) *ProductVariantUpdate {
	pvu.mutation.SetInventoryItemID(id)
	return pvu
}

// SetNillableInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID if the given value is not nil.
func (pvu *ProductVariantUpdate) SetNillableInventoryItemID(id *pulid.ID) *ProductVariantUpdate {
	if id != nil {
		pvu = pvu.SetInventoryItemID(*id)
	}
	return pvu
}

// SetInventoryItem sets the "inventory_item" edge to the InventoryItem entity.
func (pvu *ProductVariantUpdate) SetInventoryItem(i *InventoryItem) *ProductVariantUpdate {
	return pvu.SetInventoryItemID(i.ID)
}

// Mutation returns the ProductVariantMutation object of the builder.
func (pvu *ProductVariantUpdate) Mutation() *ProductVariantMutation {
	return pvu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pvu *ProductVariantUpdate) ClearTenant() *ProductVariantUpdate {
	pvu.mutation.ClearTenant()
	return pvu
}

// ClearProduct clears the "product" edge to the Product entity.
func (pvu *ProductVariantUpdate) ClearProduct() *ProductVariantUpdate {
	pvu.mutation.ClearProduct()
	return pvu
}

// ClearOrderLines clears all "order_lines" edges to the OrderLine entity.
func (pvu *ProductVariantUpdate) ClearOrderLines() *ProductVariantUpdate {
	pvu.mutation.ClearOrderLines()
	return pvu
}

// RemoveOrderLineIDs removes the "order_lines" edge to OrderLine entities by IDs.
func (pvu *ProductVariantUpdate) RemoveOrderLineIDs(ids ...pulid.ID) *ProductVariantUpdate {
	pvu.mutation.RemoveOrderLineIDs(ids...)
	return pvu
}

// RemoveOrderLines removes "order_lines" edges to OrderLine entities.
func (pvu *ProductVariantUpdate) RemoveOrderLines(o ...*OrderLine) *ProductVariantUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvu.RemoveOrderLineIDs(ids...)
}

// ClearProductImage clears all "product_image" edges to the ProductImage entity.
func (pvu *ProductVariantUpdate) ClearProductImage() *ProductVariantUpdate {
	pvu.mutation.ClearProductImage()
	return pvu
}

// RemoveProductImageIDs removes the "product_image" edge to ProductImage entities by IDs.
func (pvu *ProductVariantUpdate) RemoveProductImageIDs(ids ...pulid.ID) *ProductVariantUpdate {
	pvu.mutation.RemoveProductImageIDs(ids...)
	return pvu
}

// RemoveProductImage removes "product_image" edges to ProductImage entities.
func (pvu *ProductVariantUpdate) RemoveProductImage(p ...*ProductImage) *ProductVariantUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvu.RemoveProductImageIDs(ids...)
}

// ClearInventoryItem clears the "inventory_item" edge to the InventoryItem entity.
func (pvu *ProductVariantUpdate) ClearInventoryItem() *ProductVariantUpdate {
	pvu.mutation.ClearInventoryItem()
	return pvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProductVariantUpdate) Save(ctx context.Context) (int, error) {
	if err := pvu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProductVariantUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProductVariantUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProductVariantUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *ProductVariantUpdate) defaults() error {
	if _, ok := pvu.mutation.UpdatedAt(); !ok {
		if productvariant.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productvariant.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productvariant.UpdateDefaultUpdatedAt()
		pvu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pvu *ProductVariantUpdate) check() error {
	if v, ok := pvu.mutation.WeightG(); ok {
		if err := productvariant.WeightGValidator(v); err != nil {
			return &ValidationError{Name: "weight_g", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.weight_g": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.DimensionLength(); ok {
		if err := productvariant.DimensionLengthValidator(v); err != nil {
			return &ValidationError{Name: "dimension_length", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_length": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.DimensionWidth(); ok {
		if err := productvariant.DimensionWidthValidator(v); err != nil {
			return &ValidationError{Name: "dimension_width", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_width": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.DimensionHeight(); ok {
		if err := productvariant.DimensionHeightValidator(v); err != nil {
			return &ValidationError{Name: "dimension_height", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_height": %w`, err)}
		}
	}
	if pvu.mutation.TenantCleared() && len(pvu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductVariant.tenant"`)
	}
	if pvu.mutation.ProductCleared() && len(pvu.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductVariant.product"`)
	}
	return nil
}

func (pvu *ProductVariantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productvariant.Table, productvariant.Columns, sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.Archived(); ok {
		_spec.SetField(productvariant.FieldArchived, field.TypeBool, value)
	}
	if value, ok := pvu.mutation.ExternalID(); ok {
		_spec.SetField(productvariant.FieldExternalID, field.TypeString, value)
	}
	if pvu.mutation.ExternalIDCleared() {
		_spec.ClearField(productvariant.FieldExternalID, field.TypeString)
	}
	if value, ok := pvu.mutation.Description(); ok {
		_spec.SetField(productvariant.FieldDescription, field.TypeString, value)
	}
	if pvu.mutation.DescriptionCleared() {
		_spec.ClearField(productvariant.FieldDescription, field.TypeString)
	}
	if value, ok := pvu.mutation.EanNumber(); ok {
		_spec.SetField(productvariant.FieldEanNumber, field.TypeString, value)
	}
	if pvu.mutation.EanNumberCleared() {
		_spec.ClearField(productvariant.FieldEanNumber, field.TypeString)
	}
	if value, ok := pvu.mutation.WeightG(); ok {
		_spec.SetField(productvariant.FieldWeightG, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedWeightG(); ok {
		_spec.AddField(productvariant.FieldWeightG, field.TypeInt, value)
	}
	if pvu.mutation.WeightGCleared() {
		_spec.ClearField(productvariant.FieldWeightG, field.TypeInt)
	}
	if value, ok := pvu.mutation.DimensionLength(); ok {
		_spec.SetField(productvariant.FieldDimensionLength, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedDimensionLength(); ok {
		_spec.AddField(productvariant.FieldDimensionLength, field.TypeInt, value)
	}
	if pvu.mutation.DimensionLengthCleared() {
		_spec.ClearField(productvariant.FieldDimensionLength, field.TypeInt)
	}
	if value, ok := pvu.mutation.DimensionWidth(); ok {
		_spec.SetField(productvariant.FieldDimensionWidth, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedDimensionWidth(); ok {
		_spec.AddField(productvariant.FieldDimensionWidth, field.TypeInt, value)
	}
	if pvu.mutation.DimensionWidthCleared() {
		_spec.ClearField(productvariant.FieldDimensionWidth, field.TypeInt)
	}
	if value, ok := pvu.mutation.DimensionHeight(); ok {
		_spec.SetField(productvariant.FieldDimensionHeight, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedDimensionHeight(); ok {
		_spec.AddField(productvariant.FieldDimensionHeight, field.TypeInt, value)
	}
	if pvu.mutation.DimensionHeightCleared() {
		_spec.ClearField(productvariant.FieldDimensionHeight, field.TypeInt)
	}
	if pvu.mutation.CreatedAtCleared() {
		_spec.ClearField(productvariant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pvu.mutation.UpdatedAt(); ok {
		_spec.SetField(productvariant.FieldUpdatedAt, field.TypeTime, value)
	}
	if pvu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productvariant.TenantTable,
			Columns: []string{productvariant.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productvariant.TenantTable,
			Columns: []string{productvariant.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productvariant.ProductTable,
			Columns: []string{productvariant.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productvariant.ProductTable,
			Columns: []string{productvariant.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.RemovedOrderLinesIDs(); len(nodes) > 0 && !pvu.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.RemovedProductImageIDs(); len(nodes) > 0 && !pvu.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.ProductImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvu.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   productvariant.InventoryItemTable,
			Columns: []string{productvariant.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvu.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   productvariant.InventoryItemTable,
			Columns: []string{productvariant.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productvariant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProductVariantUpdateOne is the builder for updating a single ProductVariant entity.
type ProductVariantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductVariantMutation
}

// SetTenantID sets the "tenant_id" field.
func (pvuo *ProductVariantUpdateOne) SetTenantID(pu pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.SetTenantID(pu)
	return pvuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableTenantID(pu *pulid.ID) *ProductVariantUpdateOne {
	if pu != nil {
		pvuo.SetTenantID(*pu)
	}
	return pvuo
}

// SetArchived sets the "archived" field.
func (pvuo *ProductVariantUpdateOne) SetArchived(b bool) *ProductVariantUpdateOne {
	pvuo.mutation.SetArchived(b)
	return pvuo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableArchived(b *bool) *ProductVariantUpdateOne {
	if b != nil {
		pvuo.SetArchived(*b)
	}
	return pvuo
}

// SetExternalID sets the "external_ID" field.
func (pvuo *ProductVariantUpdateOne) SetExternalID(s string) *ProductVariantUpdateOne {
	pvuo.mutation.SetExternalID(s)
	return pvuo
}

// SetNillableExternalID sets the "external_ID" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableExternalID(s *string) *ProductVariantUpdateOne {
	if s != nil {
		pvuo.SetExternalID(*s)
	}
	return pvuo
}

// ClearExternalID clears the value of the "external_ID" field.
func (pvuo *ProductVariantUpdateOne) ClearExternalID() *ProductVariantUpdateOne {
	pvuo.mutation.ClearExternalID()
	return pvuo
}

// SetDescription sets the "description" field.
func (pvuo *ProductVariantUpdateOne) SetDescription(s string) *ProductVariantUpdateOne {
	pvuo.mutation.SetDescription(s)
	return pvuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableDescription(s *string) *ProductVariantUpdateOne {
	if s != nil {
		pvuo.SetDescription(*s)
	}
	return pvuo
}

// ClearDescription clears the value of the "description" field.
func (pvuo *ProductVariantUpdateOne) ClearDescription() *ProductVariantUpdateOne {
	pvuo.mutation.ClearDescription()
	return pvuo
}

// SetEanNumber sets the "ean_number" field.
func (pvuo *ProductVariantUpdateOne) SetEanNumber(s string) *ProductVariantUpdateOne {
	pvuo.mutation.SetEanNumber(s)
	return pvuo
}

// SetNillableEanNumber sets the "ean_number" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableEanNumber(s *string) *ProductVariantUpdateOne {
	if s != nil {
		pvuo.SetEanNumber(*s)
	}
	return pvuo
}

// ClearEanNumber clears the value of the "ean_number" field.
func (pvuo *ProductVariantUpdateOne) ClearEanNumber() *ProductVariantUpdateOne {
	pvuo.mutation.ClearEanNumber()
	return pvuo
}

// SetWeightG sets the "weight_g" field.
func (pvuo *ProductVariantUpdateOne) SetWeightG(i int) *ProductVariantUpdateOne {
	pvuo.mutation.ResetWeightG()
	pvuo.mutation.SetWeightG(i)
	return pvuo
}

// SetNillableWeightG sets the "weight_g" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableWeightG(i *int) *ProductVariantUpdateOne {
	if i != nil {
		pvuo.SetWeightG(*i)
	}
	return pvuo
}

// AddWeightG adds i to the "weight_g" field.
func (pvuo *ProductVariantUpdateOne) AddWeightG(i int) *ProductVariantUpdateOne {
	pvuo.mutation.AddWeightG(i)
	return pvuo
}

// ClearWeightG clears the value of the "weight_g" field.
func (pvuo *ProductVariantUpdateOne) ClearWeightG() *ProductVariantUpdateOne {
	pvuo.mutation.ClearWeightG()
	return pvuo
}

// SetDimensionLength sets the "dimension_length" field.
func (pvuo *ProductVariantUpdateOne) SetDimensionLength(i int) *ProductVariantUpdateOne {
	pvuo.mutation.ResetDimensionLength()
	pvuo.mutation.SetDimensionLength(i)
	return pvuo
}

// SetNillableDimensionLength sets the "dimension_length" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableDimensionLength(i *int) *ProductVariantUpdateOne {
	if i != nil {
		pvuo.SetDimensionLength(*i)
	}
	return pvuo
}

// AddDimensionLength adds i to the "dimension_length" field.
func (pvuo *ProductVariantUpdateOne) AddDimensionLength(i int) *ProductVariantUpdateOne {
	pvuo.mutation.AddDimensionLength(i)
	return pvuo
}

// ClearDimensionLength clears the value of the "dimension_length" field.
func (pvuo *ProductVariantUpdateOne) ClearDimensionLength() *ProductVariantUpdateOne {
	pvuo.mutation.ClearDimensionLength()
	return pvuo
}

// SetDimensionWidth sets the "dimension_width" field.
func (pvuo *ProductVariantUpdateOne) SetDimensionWidth(i int) *ProductVariantUpdateOne {
	pvuo.mutation.ResetDimensionWidth()
	pvuo.mutation.SetDimensionWidth(i)
	return pvuo
}

// SetNillableDimensionWidth sets the "dimension_width" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableDimensionWidth(i *int) *ProductVariantUpdateOne {
	if i != nil {
		pvuo.SetDimensionWidth(*i)
	}
	return pvuo
}

// AddDimensionWidth adds i to the "dimension_width" field.
func (pvuo *ProductVariantUpdateOne) AddDimensionWidth(i int) *ProductVariantUpdateOne {
	pvuo.mutation.AddDimensionWidth(i)
	return pvuo
}

// ClearDimensionWidth clears the value of the "dimension_width" field.
func (pvuo *ProductVariantUpdateOne) ClearDimensionWidth() *ProductVariantUpdateOne {
	pvuo.mutation.ClearDimensionWidth()
	return pvuo
}

// SetDimensionHeight sets the "dimension_height" field.
func (pvuo *ProductVariantUpdateOne) SetDimensionHeight(i int) *ProductVariantUpdateOne {
	pvuo.mutation.ResetDimensionHeight()
	pvuo.mutation.SetDimensionHeight(i)
	return pvuo
}

// SetNillableDimensionHeight sets the "dimension_height" field if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableDimensionHeight(i *int) *ProductVariantUpdateOne {
	if i != nil {
		pvuo.SetDimensionHeight(*i)
	}
	return pvuo
}

// AddDimensionHeight adds i to the "dimension_height" field.
func (pvuo *ProductVariantUpdateOne) AddDimensionHeight(i int) *ProductVariantUpdateOne {
	pvuo.mutation.AddDimensionHeight(i)
	return pvuo
}

// ClearDimensionHeight clears the value of the "dimension_height" field.
func (pvuo *ProductVariantUpdateOne) ClearDimensionHeight() *ProductVariantUpdateOne {
	pvuo.mutation.ClearDimensionHeight()
	return pvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pvuo *ProductVariantUpdateOne) SetUpdatedAt(t time.Time) *ProductVariantUpdateOne {
	pvuo.mutation.SetUpdatedAt(t)
	return pvuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pvuo *ProductVariantUpdateOne) SetTenant(t *Tenant) *ProductVariantUpdateOne {
	return pvuo.SetTenantID(t.ID)
}

// SetProductID sets the "product" edge to the Product entity by ID.
func (pvuo *ProductVariantUpdateOne) SetProductID(id pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.SetProductID(id)
	return pvuo
}

// SetProduct sets the "product" edge to the Product entity.
func (pvuo *ProductVariantUpdateOne) SetProduct(p *Product) *ProductVariantUpdateOne {
	return pvuo.SetProductID(p.ID)
}

// AddOrderLineIDs adds the "order_lines" edge to the OrderLine entity by IDs.
func (pvuo *ProductVariantUpdateOne) AddOrderLineIDs(ids ...pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.AddOrderLineIDs(ids...)
	return pvuo
}

// AddOrderLines adds the "order_lines" edges to the OrderLine entity.
func (pvuo *ProductVariantUpdateOne) AddOrderLines(o ...*OrderLine) *ProductVariantUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvuo.AddOrderLineIDs(ids...)
}

// AddProductImageIDs adds the "product_image" edge to the ProductImage entity by IDs.
func (pvuo *ProductVariantUpdateOne) AddProductImageIDs(ids ...pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.AddProductImageIDs(ids...)
	return pvuo
}

// AddProductImage adds the "product_image" edges to the ProductImage entity.
func (pvuo *ProductVariantUpdateOne) AddProductImage(p ...*ProductImage) *ProductVariantUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.AddProductImageIDs(ids...)
}

// SetInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID.
func (pvuo *ProductVariantUpdateOne) SetInventoryItemID(id pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.SetInventoryItemID(id)
	return pvuo
}

// SetNillableInventoryItemID sets the "inventory_item" edge to the InventoryItem entity by ID if the given value is not nil.
func (pvuo *ProductVariantUpdateOne) SetNillableInventoryItemID(id *pulid.ID) *ProductVariantUpdateOne {
	if id != nil {
		pvuo = pvuo.SetInventoryItemID(*id)
	}
	return pvuo
}

// SetInventoryItem sets the "inventory_item" edge to the InventoryItem entity.
func (pvuo *ProductVariantUpdateOne) SetInventoryItem(i *InventoryItem) *ProductVariantUpdateOne {
	return pvuo.SetInventoryItemID(i.ID)
}

// Mutation returns the ProductVariantMutation object of the builder.
func (pvuo *ProductVariantUpdateOne) Mutation() *ProductVariantMutation {
	return pvuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pvuo *ProductVariantUpdateOne) ClearTenant() *ProductVariantUpdateOne {
	pvuo.mutation.ClearTenant()
	return pvuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (pvuo *ProductVariantUpdateOne) ClearProduct() *ProductVariantUpdateOne {
	pvuo.mutation.ClearProduct()
	return pvuo
}

// ClearOrderLines clears all "order_lines" edges to the OrderLine entity.
func (pvuo *ProductVariantUpdateOne) ClearOrderLines() *ProductVariantUpdateOne {
	pvuo.mutation.ClearOrderLines()
	return pvuo
}

// RemoveOrderLineIDs removes the "order_lines" edge to OrderLine entities by IDs.
func (pvuo *ProductVariantUpdateOne) RemoveOrderLineIDs(ids ...pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.RemoveOrderLineIDs(ids...)
	return pvuo
}

// RemoveOrderLines removes "order_lines" edges to OrderLine entities.
func (pvuo *ProductVariantUpdateOne) RemoveOrderLines(o ...*OrderLine) *ProductVariantUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pvuo.RemoveOrderLineIDs(ids...)
}

// ClearProductImage clears all "product_image" edges to the ProductImage entity.
func (pvuo *ProductVariantUpdateOne) ClearProductImage() *ProductVariantUpdateOne {
	pvuo.mutation.ClearProductImage()
	return pvuo
}

// RemoveProductImageIDs removes the "product_image" edge to ProductImage entities by IDs.
func (pvuo *ProductVariantUpdateOne) RemoveProductImageIDs(ids ...pulid.ID) *ProductVariantUpdateOne {
	pvuo.mutation.RemoveProductImageIDs(ids...)
	return pvuo
}

// RemoveProductImage removes "product_image" edges to ProductImage entities.
func (pvuo *ProductVariantUpdateOne) RemoveProductImage(p ...*ProductImage) *ProductVariantUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pvuo.RemoveProductImageIDs(ids...)
}

// ClearInventoryItem clears the "inventory_item" edge to the InventoryItem entity.
func (pvuo *ProductVariantUpdateOne) ClearInventoryItem() *ProductVariantUpdateOne {
	pvuo.mutation.ClearInventoryItem()
	return pvuo
}

// Where appends a list predicates to the ProductVariantUpdate builder.
func (pvuo *ProductVariantUpdateOne) Where(ps ...predicate.ProductVariant) *ProductVariantUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProductVariantUpdateOne) Select(field string, fields ...string) *ProductVariantUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProductVariant entity.
func (pvuo *ProductVariantUpdateOne) Save(ctx context.Context) (*ProductVariant, error) {
	if err := pvuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProductVariantUpdateOne) SaveX(ctx context.Context) *ProductVariant {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProductVariantUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProductVariantUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *ProductVariantUpdateOne) defaults() error {
	if _, ok := pvuo.mutation.UpdatedAt(); !ok {
		if productvariant.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized productvariant.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := productvariant.UpdateDefaultUpdatedAt()
		pvuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *ProductVariantUpdateOne) check() error {
	if v, ok := pvuo.mutation.WeightG(); ok {
		if err := productvariant.WeightGValidator(v); err != nil {
			return &ValidationError{Name: "weight_g", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.weight_g": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.DimensionLength(); ok {
		if err := productvariant.DimensionLengthValidator(v); err != nil {
			return &ValidationError{Name: "dimension_length", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_length": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.DimensionWidth(); ok {
		if err := productvariant.DimensionWidthValidator(v); err != nil {
			return &ValidationError{Name: "dimension_width", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_width": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.DimensionHeight(); ok {
		if err := productvariant.DimensionHeightValidator(v); err != nil {
			return &ValidationError{Name: "dimension_height", err: fmt.Errorf(`ent: validator failed for field "ProductVariant.dimension_height": %w`, err)}
		}
	}
	if pvuo.mutation.TenantCleared() && len(pvuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductVariant.tenant"`)
	}
	if pvuo.mutation.ProductCleared() && len(pvuo.mutation.ProductIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProductVariant.product"`)
	}
	return nil
}

func (pvuo *ProductVariantUpdateOne) sqlSave(ctx context.Context) (_node *ProductVariant, err error) {
	if err := pvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productvariant.Table, productvariant.Columns, sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductVariant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productvariant.FieldID)
		for _, f := range fields {
			if !productvariant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productvariant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.Archived(); ok {
		_spec.SetField(productvariant.FieldArchived, field.TypeBool, value)
	}
	if value, ok := pvuo.mutation.ExternalID(); ok {
		_spec.SetField(productvariant.FieldExternalID, field.TypeString, value)
	}
	if pvuo.mutation.ExternalIDCleared() {
		_spec.ClearField(productvariant.FieldExternalID, field.TypeString)
	}
	if value, ok := pvuo.mutation.Description(); ok {
		_spec.SetField(productvariant.FieldDescription, field.TypeString, value)
	}
	if pvuo.mutation.DescriptionCleared() {
		_spec.ClearField(productvariant.FieldDescription, field.TypeString)
	}
	if value, ok := pvuo.mutation.EanNumber(); ok {
		_spec.SetField(productvariant.FieldEanNumber, field.TypeString, value)
	}
	if pvuo.mutation.EanNumberCleared() {
		_spec.ClearField(productvariant.FieldEanNumber, field.TypeString)
	}
	if value, ok := pvuo.mutation.WeightG(); ok {
		_spec.SetField(productvariant.FieldWeightG, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedWeightG(); ok {
		_spec.AddField(productvariant.FieldWeightG, field.TypeInt, value)
	}
	if pvuo.mutation.WeightGCleared() {
		_spec.ClearField(productvariant.FieldWeightG, field.TypeInt)
	}
	if value, ok := pvuo.mutation.DimensionLength(); ok {
		_spec.SetField(productvariant.FieldDimensionLength, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedDimensionLength(); ok {
		_spec.AddField(productvariant.FieldDimensionLength, field.TypeInt, value)
	}
	if pvuo.mutation.DimensionLengthCleared() {
		_spec.ClearField(productvariant.FieldDimensionLength, field.TypeInt)
	}
	if value, ok := pvuo.mutation.DimensionWidth(); ok {
		_spec.SetField(productvariant.FieldDimensionWidth, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedDimensionWidth(); ok {
		_spec.AddField(productvariant.FieldDimensionWidth, field.TypeInt, value)
	}
	if pvuo.mutation.DimensionWidthCleared() {
		_spec.ClearField(productvariant.FieldDimensionWidth, field.TypeInt)
	}
	if value, ok := pvuo.mutation.DimensionHeight(); ok {
		_spec.SetField(productvariant.FieldDimensionHeight, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedDimensionHeight(); ok {
		_spec.AddField(productvariant.FieldDimensionHeight, field.TypeInt, value)
	}
	if pvuo.mutation.DimensionHeightCleared() {
		_spec.ClearField(productvariant.FieldDimensionHeight, field.TypeInt)
	}
	if pvuo.mutation.CreatedAtCleared() {
		_spec.ClearField(productvariant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(productvariant.FieldUpdatedAt, field.TypeTime, value)
	}
	if pvuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productvariant.TenantTable,
			Columns: []string{productvariant.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productvariant.TenantTable,
			Columns: []string{productvariant.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productvariant.ProductTable,
			Columns: []string{productvariant.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productvariant.ProductTable,
			Columns: []string{productvariant.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.RemovedOrderLinesIDs(); len(nodes) > 0 && !pvuo.mutation.OrderLinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.OrderLinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderline.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.RemovedProductImageIDs(); len(nodes) > 0 && !pvuo.mutation.ProductImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.ProductImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pvuo.mutation.InventoryItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   productvariant.InventoryItemTable,
			Columns: []string{productvariant.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pvuo.mutation.InventoryItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   productvariant.InventoryItemTable,
			Columns: []string{productvariant.InventoryItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductVariant{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productvariant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
