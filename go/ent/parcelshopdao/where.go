// Code generated by ent, DO NOT EDIT.

package parcelshopdao

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldLTE(FieldID, id))
}

// ShopID applies equality check predicate on the "shop_id" field. It's identical to ShopIDEQ.
func ShopID(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldEQ(FieldShopID, v))
}

// ShopIDEQ applies the EQ predicate on the "shop_id" field.
func ShopIDEQ(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldEQ(FieldShopID, v))
}

// ShopIDNEQ applies the NEQ predicate on the "shop_id" field.
func ShopIDNEQ(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldNEQ(FieldShopID, v))
}

// ShopIDIn applies the In predicate on the "shop_id" field.
func ShopIDIn(vs ...string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldIn(FieldShopID, vs...))
}

// ShopIDNotIn applies the NotIn predicate on the "shop_id" field.
func ShopIDNotIn(vs ...string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldNotIn(FieldShopID, vs...))
}

// ShopIDGT applies the GT predicate on the "shop_id" field.
func ShopIDGT(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldGT(FieldShopID, v))
}

// ShopIDGTE applies the GTE predicate on the "shop_id" field.
func ShopIDGTE(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldGTE(FieldShopID, v))
}

// ShopIDLT applies the LT predicate on the "shop_id" field.
func ShopIDLT(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldLT(FieldShopID, v))
}

// ShopIDLTE applies the LTE predicate on the "shop_id" field.
func ShopIDLTE(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldLTE(FieldShopID, v))
}

// ShopIDContains applies the Contains predicate on the "shop_id" field.
func ShopIDContains(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldContains(FieldShopID, v))
}

// ShopIDHasPrefix applies the HasPrefix predicate on the "shop_id" field.
func ShopIDHasPrefix(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldHasPrefix(FieldShopID, v))
}

// ShopIDHasSuffix applies the HasSuffix predicate on the "shop_id" field.
func ShopIDHasSuffix(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldHasSuffix(FieldShopID, v))
}

// ShopIDEqualFold applies the EqualFold predicate on the "shop_id" field.
func ShopIDEqualFold(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldEqualFold(FieldShopID, v))
}

// ShopIDContainsFold applies the ContainsFold predicate on the "shop_id" field.
func ShopIDContainsFold(v string) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.FieldContainsFold(FieldShopID, v))
}

// HasParcelShop applies the HasEdge predicate on the "parcel_shop" edge.
func HasParcelShop() predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParcelShopTable, ParcelShopColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParcelShopWith applies the HasEdge predicate on the "parcel_shop" edge with a given conditions (other predicates).
func HasParcelShopWith(preds ...predicate.ParcelShop) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(func(s *sql.Selector) {
		step := newParcelShopStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ParcelShopDAO) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ParcelShopDAO) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ParcelShopDAO) predicate.ParcelShopDAO {
	return predicate.ParcelShopDAO(sql.NotPredicates(p))
}
