// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionBringCreate is the builder for creating a DeliveryOptionBring entity.
type DeliveryOptionBringCreate struct {
	config
	mutation *DeliveryOptionBringMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (dobc *DeliveryOptionBringCreate) SetTenantID(pu pulid.ID) *DeliveryOptionBringCreate {
	dobc.mutation.SetTenantID(pu)
	return dobc
}

// SetElectronicCustoms sets the "electronic_customs" field.
func (dobc *DeliveryOptionBringCreate) SetElectronicCustoms(b bool) *DeliveryOptionBringCreate {
	dobc.mutation.SetElectronicCustoms(b)
	return dobc
}

// SetNillableElectronicCustoms sets the "electronic_customs" field if the given value is not nil.
func (dobc *DeliveryOptionBringCreate) SetNillableElectronicCustoms(b *bool) *DeliveryOptionBringCreate {
	if b != nil {
		dobc.SetElectronicCustoms(*b)
	}
	return dobc
}

// SetID sets the "id" field.
func (dobc *DeliveryOptionBringCreate) SetID(pu pulid.ID) *DeliveryOptionBringCreate {
	dobc.mutation.SetID(pu)
	return dobc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dobc *DeliveryOptionBringCreate) SetNillableID(pu *pulid.ID) *DeliveryOptionBringCreate {
	if pu != nil {
		dobc.SetID(*pu)
	}
	return dobc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dobc *DeliveryOptionBringCreate) SetTenant(t *Tenant) *DeliveryOptionBringCreate {
	return dobc.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dobc *DeliveryOptionBringCreate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionBringCreate {
	dobc.mutation.SetDeliveryOptionID(id)
	return dobc
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dobc *DeliveryOptionBringCreate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionBringCreate {
	return dobc.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceBringIDs adds the "carrier_additional_service_bring" edge to the CarrierAdditionalServiceBring entity by IDs.
func (dobc *DeliveryOptionBringCreate) AddCarrierAdditionalServiceBringIDs(ids ...pulid.ID) *DeliveryOptionBringCreate {
	dobc.mutation.AddCarrierAdditionalServiceBringIDs(ids...)
	return dobc
}

// AddCarrierAdditionalServiceBring adds the "carrier_additional_service_bring" edges to the CarrierAdditionalServiceBring entity.
func (dobc *DeliveryOptionBringCreate) AddCarrierAdditionalServiceBring(c ...*CarrierAdditionalServiceBring) *DeliveryOptionBringCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dobc.AddCarrierAdditionalServiceBringIDs(ids...)
}

// Mutation returns the DeliveryOptionBringMutation object of the builder.
func (dobc *DeliveryOptionBringCreate) Mutation() *DeliveryOptionBringMutation {
	return dobc.mutation
}

// Save creates the DeliveryOptionBring in the database.
func (dobc *DeliveryOptionBringCreate) Save(ctx context.Context) (*DeliveryOptionBring, error) {
	if err := dobc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dobc.sqlSave, dobc.mutation, dobc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dobc *DeliveryOptionBringCreate) SaveX(ctx context.Context) *DeliveryOptionBring {
	v, err := dobc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dobc *DeliveryOptionBringCreate) Exec(ctx context.Context) error {
	_, err := dobc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dobc *DeliveryOptionBringCreate) ExecX(ctx context.Context) {
	if err := dobc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dobc *DeliveryOptionBringCreate) defaults() error {
	if _, ok := dobc.mutation.ElectronicCustoms(); !ok {
		v := deliveryoptionbring.DefaultElectronicCustoms
		dobc.mutation.SetElectronicCustoms(v)
	}
	if _, ok := dobc.mutation.ID(); !ok {
		if deliveryoptionbring.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized deliveryoptionbring.DefaultID (forgotten import ent/runtime?)")
		}
		v := deliveryoptionbring.DefaultID()
		dobc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dobc *DeliveryOptionBringCreate) check() error {
	if _, ok := dobc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "DeliveryOptionBring.tenant_id"`)}
	}
	if _, ok := dobc.mutation.ElectronicCustoms(); !ok {
		return &ValidationError{Name: "electronic_customs", err: errors.New(`ent: missing required field "DeliveryOptionBring.electronic_customs"`)}
	}
	if len(dobc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "DeliveryOptionBring.tenant"`)}
	}
	if len(dobc.mutation.DeliveryOptionIDs()) == 0 {
		return &ValidationError{Name: "delivery_option", err: errors.New(`ent: missing required edge "DeliveryOptionBring.delivery_option"`)}
	}
	return nil
}

func (dobc *DeliveryOptionBringCreate) sqlSave(ctx context.Context) (*DeliveryOptionBring, error) {
	if err := dobc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dobc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dobc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dobc.mutation.id = &_node.ID
	dobc.mutation.done = true
	return _node, nil
}

func (dobc *DeliveryOptionBringCreate) createSpec() (*DeliveryOptionBring, *sqlgraph.CreateSpec) {
	var (
		_node = &DeliveryOptionBring{config: dobc.config}
		_spec = sqlgraph.NewCreateSpec(deliveryoptionbring.Table, sqlgraph.NewFieldSpec(deliveryoptionbring.FieldID, field.TypeString))
	)
	_spec.OnConflict = dobc.conflict
	if id, ok := dobc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dobc.mutation.ElectronicCustoms(); ok {
		_spec.SetField(deliveryoptionbring.FieldElectronicCustoms, field.TypeBool, value)
		_node.ElectronicCustoms = value
	}
	if nodes := dobc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionbring.TenantTable,
			Columns: []string{deliveryoptionbring.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dobc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionbring.DeliveryOptionTable,
			Columns: []string{deliveryoptionbring.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.delivery_option_delivery_option_bring = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dobc.mutation.CarrierAdditionalServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionBring.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionBringUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dobc *DeliveryOptionBringCreate) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionBringUpsertOne {
	dobc.conflict = opts
	return &DeliveryOptionBringUpsertOne{
		create: dobc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dobc *DeliveryOptionBringCreate) OnConflictColumns(columns ...string) *DeliveryOptionBringUpsertOne {
	dobc.conflict = append(dobc.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionBringUpsertOne{
		create: dobc,
	}
}

type (
	// DeliveryOptionBringUpsertOne is the builder for "upsert"-ing
	//  one DeliveryOptionBring node.
	DeliveryOptionBringUpsertOne struct {
		create *DeliveryOptionBringCreate
	}

	// DeliveryOptionBringUpsert is the "OnConflict" setter.
	DeliveryOptionBringUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionBringUpsert) SetTenantID(v pulid.ID) *DeliveryOptionBringUpsert {
	u.Set(deliveryoptionbring.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionBringUpsert) UpdateTenantID() *DeliveryOptionBringUpsert {
	u.SetExcluded(deliveryoptionbring.FieldTenantID)
	return u
}

// SetElectronicCustoms sets the "electronic_customs" field.
func (u *DeliveryOptionBringUpsert) SetElectronicCustoms(v bool) *DeliveryOptionBringUpsert {
	u.Set(deliveryoptionbring.FieldElectronicCustoms, v)
	return u
}

// UpdateElectronicCustoms sets the "electronic_customs" field to the value that was provided on create.
func (u *DeliveryOptionBringUpsert) UpdateElectronicCustoms() *DeliveryOptionBringUpsert {
	u.SetExcluded(deliveryoptionbring.FieldElectronicCustoms)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptionbring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionBringUpsertOne) UpdateNewValues() *DeliveryOptionBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(deliveryoptionbring.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionBring.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DeliveryOptionBringUpsertOne) Ignore() *DeliveryOptionBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionBringUpsertOne) DoNothing() *DeliveryOptionBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionBringCreate.OnConflict
// documentation for more info.
func (u *DeliveryOptionBringUpsertOne) Update(set func(*DeliveryOptionBringUpsert)) *DeliveryOptionBringUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionBringUpsertOne) SetTenantID(v pulid.ID) *DeliveryOptionBringUpsertOne {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionBringUpsertOne) UpdateTenantID() *DeliveryOptionBringUpsertOne {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.UpdateTenantID()
	})
}

// SetElectronicCustoms sets the "electronic_customs" field.
func (u *DeliveryOptionBringUpsertOne) SetElectronicCustoms(v bool) *DeliveryOptionBringUpsertOne {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.SetElectronicCustoms(v)
	})
}

// UpdateElectronicCustoms sets the "electronic_customs" field to the value that was provided on create.
func (u *DeliveryOptionBringUpsertOne) UpdateElectronicCustoms() *DeliveryOptionBringUpsertOne {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.UpdateElectronicCustoms()
	})
}

// Exec executes the query.
func (u *DeliveryOptionBringUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionBringCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionBringUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DeliveryOptionBringUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DeliveryOptionBringUpsertOne.ID is not supported by MySQL driver. Use DeliveryOptionBringUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DeliveryOptionBringUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DeliveryOptionBringCreateBulk is the builder for creating many DeliveryOptionBring entities in bulk.
type DeliveryOptionBringCreateBulk struct {
	config
	err      error
	builders []*DeliveryOptionBringCreate
	conflict []sql.ConflictOption
}

// Save creates the DeliveryOptionBring entities in the database.
func (dobcb *DeliveryOptionBringCreateBulk) Save(ctx context.Context) ([]*DeliveryOptionBring, error) {
	if dobcb.err != nil {
		return nil, dobcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dobcb.builders))
	nodes := make([]*DeliveryOptionBring, len(dobcb.builders))
	mutators := make([]Mutator, len(dobcb.builders))
	for i := range dobcb.builders {
		func(i int, root context.Context) {
			builder := dobcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliveryOptionBringMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dobcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dobcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dobcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dobcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dobcb *DeliveryOptionBringCreateBulk) SaveX(ctx context.Context) []*DeliveryOptionBring {
	v, err := dobcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dobcb *DeliveryOptionBringCreateBulk) Exec(ctx context.Context) error {
	_, err := dobcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dobcb *DeliveryOptionBringCreateBulk) ExecX(ctx context.Context) {
	if err := dobcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DeliveryOptionBring.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DeliveryOptionBringUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dobcb *DeliveryOptionBringCreateBulk) OnConflict(opts ...sql.ConflictOption) *DeliveryOptionBringUpsertBulk {
	dobcb.conflict = opts
	return &DeliveryOptionBringUpsertBulk{
		create: dobcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DeliveryOptionBring.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dobcb *DeliveryOptionBringCreateBulk) OnConflictColumns(columns ...string) *DeliveryOptionBringUpsertBulk {
	dobcb.conflict = append(dobcb.conflict, sql.ConflictColumns(columns...))
	return &DeliveryOptionBringUpsertBulk{
		create: dobcb,
	}
}

// DeliveryOptionBringUpsertBulk is the builder for "upsert"-ing
// a bulk of DeliveryOptionBring nodes.
type DeliveryOptionBringUpsertBulk struct {
	create *DeliveryOptionBringCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DeliveryOptionBring.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(deliveryoptionbring.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DeliveryOptionBringUpsertBulk) UpdateNewValues() *DeliveryOptionBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(deliveryoptionbring.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DeliveryOptionBring.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DeliveryOptionBringUpsertBulk) Ignore() *DeliveryOptionBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DeliveryOptionBringUpsertBulk) DoNothing() *DeliveryOptionBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DeliveryOptionBringCreateBulk.OnConflict
// documentation for more info.
func (u *DeliveryOptionBringUpsertBulk) Update(set func(*DeliveryOptionBringUpsert)) *DeliveryOptionBringUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DeliveryOptionBringUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DeliveryOptionBringUpsertBulk) SetTenantID(v pulid.ID) *DeliveryOptionBringUpsertBulk {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DeliveryOptionBringUpsertBulk) UpdateTenantID() *DeliveryOptionBringUpsertBulk {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.UpdateTenantID()
	})
}

// SetElectronicCustoms sets the "electronic_customs" field.
func (u *DeliveryOptionBringUpsertBulk) SetElectronicCustoms(v bool) *DeliveryOptionBringUpsertBulk {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.SetElectronicCustoms(v)
	})
}

// UpdateElectronicCustoms sets the "electronic_customs" field to the value that was provided on create.
func (u *DeliveryOptionBringUpsertBulk) UpdateElectronicCustoms() *DeliveryOptionBringUpsertBulk {
	return u.Update(func(s *DeliveryOptionBringUpsert) {
		s.UpdateElectronicCustoms()
	})
}

// Exec executes the query.
func (u *DeliveryOptionBringUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DeliveryOptionBringCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DeliveryOptionBringCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DeliveryOptionBringUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
