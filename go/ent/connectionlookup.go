// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConnectionLookup is the model entity for the ConnectionLookup schema.
type ConnectionLookup struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload string `json:"payload,omitempty"`
	// OptionsOutputCount holds the value of the "options_output_count" field.
	OptionsOutputCount int `json:"options_output_count,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConnectionLookupQuery when eager-loading is set.
	Edges                         ConnectionLookupEdges `json:"edges"`
	connection_lookup_connections *pulid.ID
	selectValues                  sql.SelectValues
}

// ConnectionLookupEdges holds the relations/edges for other nodes in the graph.
type ConnectionLookupEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Connections holds the value of the connections edge.
	Connections *Connection `json:"connections,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionLookupEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ConnectionsOrErr returns the Connections value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConnectionLookupEdges) ConnectionsOrErr() (*Connection, error) {
	if e.Connections != nil {
		return e.Connections, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConnectionLookup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case connectionlookup.FieldID, connectionlookup.FieldTenantID:
			values[i] = new(pulid.ID)
		case connectionlookup.FieldOptionsOutputCount:
			values[i] = new(sql.NullInt64)
		case connectionlookup.FieldPayload, connectionlookup.FieldError:
			values[i] = new(sql.NullString)
		case connectionlookup.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case connectionlookup.ForeignKeys[0]: // connection_lookup_connections
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConnectionLookup fields.
func (cl *ConnectionLookup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case connectionlookup.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cl.ID = *value
			}
		case connectionlookup.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				cl.TenantID = *value
			}
		case connectionlookup.FieldPayload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value.Valid {
				cl.Payload = value.String
			}
		case connectionlookup.FieldOptionsOutputCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field options_output_count", values[i])
			} else if value.Valid {
				cl.OptionsOutputCount = int(value.Int64)
			}
		case connectionlookup.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				cl.Error = value.String
			}
		case connectionlookup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		case connectionlookup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field connection_lookup_connections", values[i])
			} else if value.Valid {
				cl.connection_lookup_connections = new(pulid.ID)
				*cl.connection_lookup_connections = *value.S.(*pulid.ID)
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConnectionLookup.
// This includes values selected through modifiers, order, etc.
func (cl *ConnectionLookup) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ConnectionLookup entity.
func (cl *ConnectionLookup) QueryTenant() *TenantQuery {
	return NewConnectionLookupClient(cl.config).QueryTenant(cl)
}

// QueryConnections queries the "connections" edge of the ConnectionLookup entity.
func (cl *ConnectionLookup) QueryConnections() *ConnectionQuery {
	return NewConnectionLookupClient(cl.config).QueryConnections(cl)
}

// Update returns a builder for updating this ConnectionLookup.
// Note that you need to call ConnectionLookup.Unwrap() before calling this method if this ConnectionLookup
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *ConnectionLookup) Update() *ConnectionLookupUpdateOne {
	return NewConnectionLookupClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the ConnectionLookup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *ConnectionLookup) Unwrap() *ConnectionLookup {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConnectionLookup is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *ConnectionLookup) String() string {
	var builder strings.Builder
	builder.WriteString("ConnectionLookup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.TenantID))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(cl.Payload)
	builder.WriteString(", ")
	builder.WriteString("options_output_count=")
	builder.WriteString(fmt.Sprintf("%v", cl.OptionsOutputCount))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(cl.Error)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConnectionLookups is a parsable slice of ConnectionLookup.
type ConnectionLookups []*ConnectionLookup
