// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (dc *DocumentCreate) SetTenantID(pu pulid.ID) *DocumentCreate {
	dc.mutation.SetTenantID(pu)
	return dc
}

// SetName sets the "name" field.
func (dc *DocumentCreate) SetName(s string) *DocumentCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetHTMLTemplate sets the "html_template" field.
func (dc *DocumentCreate) SetHTMLTemplate(s string) *DocumentCreate {
	dc.mutation.SetHTMLTemplate(s)
	return dc
}

// SetNillableHTMLTemplate sets the "html_template" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableHTMLTemplate(s *string) *DocumentCreate {
	if s != nil {
		dc.SetHTMLTemplate(*s)
	}
	return dc
}

// SetHTMLHeader sets the "html_header" field.
func (dc *DocumentCreate) SetHTMLHeader(s string) *DocumentCreate {
	dc.mutation.SetHTMLHeader(s)
	return dc
}

// SetNillableHTMLHeader sets the "html_header" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableHTMLHeader(s *string) *DocumentCreate {
	if s != nil {
		dc.SetHTMLHeader(*s)
	}
	return dc
}

// SetHTMLFooter sets the "html_footer" field.
func (dc *DocumentCreate) SetHTMLFooter(s string) *DocumentCreate {
	dc.mutation.SetHTMLFooter(s)
	return dc
}

// SetNillableHTMLFooter sets the "html_footer" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableHTMLFooter(s *string) *DocumentCreate {
	if s != nil {
		dc.SetHTMLFooter(*s)
	}
	return dc
}

// SetLastBase64Pdf sets the "last_base64_pdf" field.
func (dc *DocumentCreate) SetLastBase64Pdf(s string) *DocumentCreate {
	dc.mutation.SetLastBase64Pdf(s)
	return dc
}

// SetNillableLastBase64Pdf sets the "last_base64_pdf" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableLastBase64Pdf(s *string) *DocumentCreate {
	if s != nil {
		dc.SetLastBase64Pdf(*s)
	}
	return dc
}

// SetMergeType sets the "merge_type" field.
func (dc *DocumentCreate) SetMergeType(dt document.MergeType) *DocumentCreate {
	dc.mutation.SetMergeType(dt)
	return dc
}

// SetNillableMergeType sets the "merge_type" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableMergeType(dt *document.MergeType) *DocumentCreate {
	if dt != nil {
		dc.SetMergeType(*dt)
	}
	return dc
}

// SetPaperSize sets the "paper_size" field.
func (dc *DocumentCreate) SetPaperSize(ds document.PaperSize) *DocumentCreate {
	dc.mutation.SetPaperSize(ds)
	return dc
}

// SetNillablePaperSize sets the "paper_size" field if the given value is not nil.
func (dc *DocumentCreate) SetNillablePaperSize(ds *document.PaperSize) *DocumentCreate {
	if ds != nil {
		dc.SetPaperSize(*ds)
	}
	return dc
}

// SetStartAt sets the "start_at" field.
func (dc *DocumentCreate) SetStartAt(t time.Time) *DocumentCreate {
	dc.mutation.SetStartAt(t)
	return dc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableStartAt(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetStartAt(*t)
	}
	return dc
}

// SetEndAt sets the "end_at" field.
func (dc *DocumentCreate) SetEndAt(t time.Time) *DocumentCreate {
	dc.mutation.SetEndAt(t)
	return dc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableEndAt(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetEndAt(*t)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DocumentCreate) SetCreatedAt(t time.Time) *DocumentCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableCreatedAt(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DocumentCreate) SetID(pu pulid.ID) *DocumentCreate {
	dc.mutation.SetID(pu)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableID(pu *pulid.ID) *DocumentCreate {
	if pu != nil {
		dc.SetID(*pu)
	}
	return dc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dc *DocumentCreate) SetTenant(t *Tenant) *DocumentCreate {
	return dc.SetTenantID(t.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (dc *DocumentCreate) SetCarrierBrandID(id pulid.ID) *DocumentCreate {
	dc.mutation.SetCarrierBrandID(id)
	return dc
}

// SetNillableCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableCarrierBrandID(id *pulid.ID) *DocumentCreate {
	if id != nil {
		dc = dc.SetCarrierBrandID(*id)
	}
	return dc
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (dc *DocumentCreate) SetCarrierBrand(c *CarrierBrand) *DocumentCreate {
	return dc.SetCarrierBrandID(c.ID)
}

// AddConnectionPackingSlipIDs adds the "connection_packing_slip" edge to the Connection entity by IDs.
func (dc *DocumentCreate) AddConnectionPackingSlipIDs(ids ...pulid.ID) *DocumentCreate {
	dc.mutation.AddConnectionPackingSlipIDs(ids...)
	return dc
}

// AddConnectionPackingSlip adds the "connection_packing_slip" edges to the Connection entity.
func (dc *DocumentCreate) AddConnectionPackingSlip(c ...*Connection) *DocumentCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dc.AddConnectionPackingSlipIDs(ids...)
}

// Mutation returns the DocumentMutation object of the builder.
func (dc *DocumentCreate) Mutation() *DocumentMutation {
	return dc.mutation
}

// Save creates the Document in the database.
func (dc *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DocumentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DocumentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DocumentCreate) defaults() error {
	if _, ok := dc.mutation.MergeType(); !ok {
		v := document.DefaultMergeType
		dc.mutation.SetMergeType(v)
	}
	if _, ok := dc.mutation.PaperSize(); !ok {
		v := document.DefaultPaperSize
		dc.mutation.SetPaperSize(v)
	}
	if _, ok := dc.mutation.StartAt(); !ok {
		if document.DefaultStartAt == nil {
			return fmt.Errorf("ent: uninitialized document.DefaultStartAt (forgotten import ent/runtime?)")
		}
		v := document.DefaultStartAt()
		dc.mutation.SetStartAt(v)
	}
	if _, ok := dc.mutation.EndAt(); !ok {
		if document.DefaultEndAt == nil {
			return fmt.Errorf("ent: uninitialized document.DefaultEndAt (forgotten import ent/runtime?)")
		}
		v := document.DefaultEndAt()
		dc.mutation.SetEndAt(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if document.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized document.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := document.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		if document.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized document.DefaultID (forgotten import ent/runtime?)")
		}
		v := document.DefaultID()
		dc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DocumentCreate) check() error {
	if _, ok := dc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Document.tenant_id"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Document.name"`)}
	}
	if _, ok := dc.mutation.MergeType(); !ok {
		return &ValidationError{Name: "merge_type", err: errors.New(`ent: missing required field "Document.merge_type"`)}
	}
	if v, ok := dc.mutation.MergeType(); ok {
		if err := document.MergeTypeValidator(v); err != nil {
			return &ValidationError{Name: "merge_type", err: fmt.Errorf(`ent: validator failed for field "Document.merge_type": %w`, err)}
		}
	}
	if _, ok := dc.mutation.PaperSize(); !ok {
		return &ValidationError{Name: "paper_size", err: errors.New(`ent: missing required field "Document.paper_size"`)}
	}
	if v, ok := dc.mutation.PaperSize(); ok {
		if err := document.PaperSizeValidator(v); err != nil {
			return &ValidationError{Name: "paper_size", err: fmt.Errorf(`ent: validator failed for field "Document.paper_size": %w`, err)}
		}
	}
	if _, ok := dc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "Document.start_at"`)}
	}
	if _, ok := dc.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "Document.end_at"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Document.created_at"`)}
	}
	if len(dc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Document.tenant"`)}
	}
	return nil
}

func (dc *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.HTMLTemplate(); ok {
		_spec.SetField(document.FieldHTMLTemplate, field.TypeString, value)
		_node.HTMLTemplate = value
	}
	if value, ok := dc.mutation.HTMLHeader(); ok {
		_spec.SetField(document.FieldHTMLHeader, field.TypeString, value)
		_node.HTMLHeader = value
	}
	if value, ok := dc.mutation.HTMLFooter(); ok {
		_spec.SetField(document.FieldHTMLFooter, field.TypeString, value)
		_node.HTMLFooter = value
	}
	if value, ok := dc.mutation.LastBase64Pdf(); ok {
		_spec.SetField(document.FieldLastBase64Pdf, field.TypeString, value)
		_node.LastBase64Pdf = value
	}
	if value, ok := dc.mutation.MergeType(); ok {
		_spec.SetField(document.FieldMergeType, field.TypeEnum, value)
		_node.MergeType = value
	}
	if value, ok := dc.mutation.PaperSize(); ok {
		_spec.SetField(document.FieldPaperSize, field.TypeEnum, value)
		_node.PaperSize = value
	}
	if value, ok := dc.mutation.StartAt(); ok {
		_spec.SetField(document.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := dc.mutation.EndAt(); ok {
		_spec.SetField(document.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(document.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.TenantTable,
			Columns: []string{document.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.CarrierBrandTable,
			Columns: []string{document.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.document_carrier_brand = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ConnectionPackingSlipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertOne {
	dc.conflict = opts
	return &DocumentUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflictColumns(columns ...string) *DocumentUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertOne{
		create: dc,
	}
}

type (
	// DocumentUpsertOne is the builder for "upsert"-ing
	//  one Document node.
	DocumentUpsertOne struct {
		create *DocumentCreate
	}

	// DocumentUpsert is the "OnConflict" setter.
	DocumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *DocumentUpsert) SetTenantID(v pulid.ID) *DocumentUpsert {
	u.Set(document.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateTenantID() *DocumentUpsert {
	u.SetExcluded(document.FieldTenantID)
	return u
}

// SetName sets the "name" field.
func (u *DocumentUpsert) SetName(v string) *DocumentUpsert {
	u.Set(document.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateName() *DocumentUpsert {
	u.SetExcluded(document.FieldName)
	return u
}

// SetHTMLTemplate sets the "html_template" field.
func (u *DocumentUpsert) SetHTMLTemplate(v string) *DocumentUpsert {
	u.Set(document.FieldHTMLTemplate, v)
	return u
}

// UpdateHTMLTemplate sets the "html_template" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateHTMLTemplate() *DocumentUpsert {
	u.SetExcluded(document.FieldHTMLTemplate)
	return u
}

// ClearHTMLTemplate clears the value of the "html_template" field.
func (u *DocumentUpsert) ClearHTMLTemplate() *DocumentUpsert {
	u.SetNull(document.FieldHTMLTemplate)
	return u
}

// SetHTMLHeader sets the "html_header" field.
func (u *DocumentUpsert) SetHTMLHeader(v string) *DocumentUpsert {
	u.Set(document.FieldHTMLHeader, v)
	return u
}

// UpdateHTMLHeader sets the "html_header" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateHTMLHeader() *DocumentUpsert {
	u.SetExcluded(document.FieldHTMLHeader)
	return u
}

// ClearHTMLHeader clears the value of the "html_header" field.
func (u *DocumentUpsert) ClearHTMLHeader() *DocumentUpsert {
	u.SetNull(document.FieldHTMLHeader)
	return u
}

// SetHTMLFooter sets the "html_footer" field.
func (u *DocumentUpsert) SetHTMLFooter(v string) *DocumentUpsert {
	u.Set(document.FieldHTMLFooter, v)
	return u
}

// UpdateHTMLFooter sets the "html_footer" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateHTMLFooter() *DocumentUpsert {
	u.SetExcluded(document.FieldHTMLFooter)
	return u
}

// ClearHTMLFooter clears the value of the "html_footer" field.
func (u *DocumentUpsert) ClearHTMLFooter() *DocumentUpsert {
	u.SetNull(document.FieldHTMLFooter)
	return u
}

// SetLastBase64Pdf sets the "last_base64_pdf" field.
func (u *DocumentUpsert) SetLastBase64Pdf(v string) *DocumentUpsert {
	u.Set(document.FieldLastBase64Pdf, v)
	return u
}

// UpdateLastBase64Pdf sets the "last_base64_pdf" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateLastBase64Pdf() *DocumentUpsert {
	u.SetExcluded(document.FieldLastBase64Pdf)
	return u
}

// ClearLastBase64Pdf clears the value of the "last_base64_pdf" field.
func (u *DocumentUpsert) ClearLastBase64Pdf() *DocumentUpsert {
	u.SetNull(document.FieldLastBase64Pdf)
	return u
}

// SetMergeType sets the "merge_type" field.
func (u *DocumentUpsert) SetMergeType(v document.MergeType) *DocumentUpsert {
	u.Set(document.FieldMergeType, v)
	return u
}

// UpdateMergeType sets the "merge_type" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateMergeType() *DocumentUpsert {
	u.SetExcluded(document.FieldMergeType)
	return u
}

// SetPaperSize sets the "paper_size" field.
func (u *DocumentUpsert) SetPaperSize(v document.PaperSize) *DocumentUpsert {
	u.Set(document.FieldPaperSize, v)
	return u
}

// UpdatePaperSize sets the "paper_size" field to the value that was provided on create.
func (u *DocumentUpsert) UpdatePaperSize() *DocumentUpsert {
	u.SetExcluded(document.FieldPaperSize)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *DocumentUpsert) SetStartAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateStartAt() *DocumentUpsert {
	u.SetExcluded(document.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *DocumentUpsert) SetEndAt(v time.Time) *DocumentUpsert {
	u.Set(document.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateEndAt() *DocumentUpsert {
	u.SetExcluded(document.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(document.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentUpsertOne) UpdateNewValues() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(document.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(document.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentUpsertOne) Ignore() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertOne) DoNothing() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreate.OnConflict
// documentation for more info.
func (u *DocumentUpsertOne) Update(set func(*DocumentUpsert)) *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DocumentUpsertOne) SetTenantID(v pulid.ID) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateTenantID() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *DocumentUpsertOne) SetName(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateName() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateName()
	})
}

// SetHTMLTemplate sets the "html_template" field.
func (u *DocumentUpsertOne) SetHTMLTemplate(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHTMLTemplate(v)
	})
}

// UpdateHTMLTemplate sets the "html_template" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateHTMLTemplate() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHTMLTemplate()
	})
}

// ClearHTMLTemplate clears the value of the "html_template" field.
func (u *DocumentUpsertOne) ClearHTMLTemplate() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearHTMLTemplate()
	})
}

// SetHTMLHeader sets the "html_header" field.
func (u *DocumentUpsertOne) SetHTMLHeader(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHTMLHeader(v)
	})
}

// UpdateHTMLHeader sets the "html_header" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateHTMLHeader() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHTMLHeader()
	})
}

// ClearHTMLHeader clears the value of the "html_header" field.
func (u *DocumentUpsertOne) ClearHTMLHeader() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearHTMLHeader()
	})
}

// SetHTMLFooter sets the "html_footer" field.
func (u *DocumentUpsertOne) SetHTMLFooter(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHTMLFooter(v)
	})
}

// UpdateHTMLFooter sets the "html_footer" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateHTMLFooter() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHTMLFooter()
	})
}

// ClearHTMLFooter clears the value of the "html_footer" field.
func (u *DocumentUpsertOne) ClearHTMLFooter() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearHTMLFooter()
	})
}

// SetLastBase64Pdf sets the "last_base64_pdf" field.
func (u *DocumentUpsertOne) SetLastBase64Pdf(v string) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetLastBase64Pdf(v)
	})
}

// UpdateLastBase64Pdf sets the "last_base64_pdf" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateLastBase64Pdf() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateLastBase64Pdf()
	})
}

// ClearLastBase64Pdf clears the value of the "last_base64_pdf" field.
func (u *DocumentUpsertOne) ClearLastBase64Pdf() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearLastBase64Pdf()
	})
}

// SetMergeType sets the "merge_type" field.
func (u *DocumentUpsertOne) SetMergeType(v document.MergeType) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetMergeType(v)
	})
}

// UpdateMergeType sets the "merge_type" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateMergeType() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateMergeType()
	})
}

// SetPaperSize sets the "paper_size" field.
func (u *DocumentUpsertOne) SetPaperSize(v document.PaperSize) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetPaperSize(v)
	})
}

// UpdatePaperSize sets the "paper_size" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdatePaperSize() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdatePaperSize()
	})
}

// SetStartAt sets the "start_at" field.
func (u *DocumentUpsertOne) SetStartAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateStartAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *DocumentUpsertOne) SetEndAt(v time.Time) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateEndAt() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateEndAt()
	})
}

// Exec executes the query.
func (u *DocumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DocumentUpsertOne.ID is not supported by MySQL driver. Use DocumentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
	conflict []sql.ConflictOption
}

// Save creates the Document entities in the database.
func (dcb *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Document, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertBulk {
	dcb.conflict = opts
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflictColumns(columns ...string) *DocumentUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// DocumentUpsertBulk is the builder for "upsert"-ing
// a bulk of Document nodes.
type DocumentUpsertBulk struct {
	create *DocumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(document.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DocumentUpsertBulk) UpdateNewValues() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(document.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(document.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentUpsertBulk) Ignore() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertBulk) DoNothing() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentUpsertBulk) Update(set func(*DocumentUpsert)) *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *DocumentUpsertBulk) SetTenantID(v pulid.ID) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateTenantID() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateTenantID()
	})
}

// SetName sets the "name" field.
func (u *DocumentUpsertBulk) SetName(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateName() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateName()
	})
}

// SetHTMLTemplate sets the "html_template" field.
func (u *DocumentUpsertBulk) SetHTMLTemplate(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHTMLTemplate(v)
	})
}

// UpdateHTMLTemplate sets the "html_template" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateHTMLTemplate() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHTMLTemplate()
	})
}

// ClearHTMLTemplate clears the value of the "html_template" field.
func (u *DocumentUpsertBulk) ClearHTMLTemplate() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearHTMLTemplate()
	})
}

// SetHTMLHeader sets the "html_header" field.
func (u *DocumentUpsertBulk) SetHTMLHeader(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHTMLHeader(v)
	})
}

// UpdateHTMLHeader sets the "html_header" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateHTMLHeader() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHTMLHeader()
	})
}

// ClearHTMLHeader clears the value of the "html_header" field.
func (u *DocumentUpsertBulk) ClearHTMLHeader() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearHTMLHeader()
	})
}

// SetHTMLFooter sets the "html_footer" field.
func (u *DocumentUpsertBulk) SetHTMLFooter(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetHTMLFooter(v)
	})
}

// UpdateHTMLFooter sets the "html_footer" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateHTMLFooter() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateHTMLFooter()
	})
}

// ClearHTMLFooter clears the value of the "html_footer" field.
func (u *DocumentUpsertBulk) ClearHTMLFooter() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearHTMLFooter()
	})
}

// SetLastBase64Pdf sets the "last_base64_pdf" field.
func (u *DocumentUpsertBulk) SetLastBase64Pdf(v string) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetLastBase64Pdf(v)
	})
}

// UpdateLastBase64Pdf sets the "last_base64_pdf" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateLastBase64Pdf() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateLastBase64Pdf()
	})
}

// ClearLastBase64Pdf clears the value of the "last_base64_pdf" field.
func (u *DocumentUpsertBulk) ClearLastBase64Pdf() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.ClearLastBase64Pdf()
	})
}

// SetMergeType sets the "merge_type" field.
func (u *DocumentUpsertBulk) SetMergeType(v document.MergeType) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetMergeType(v)
	})
}

// UpdateMergeType sets the "merge_type" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateMergeType() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateMergeType()
	})
}

// SetPaperSize sets the "paper_size" field.
func (u *DocumentUpsertBulk) SetPaperSize(v document.PaperSize) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetPaperSize(v)
	})
}

// UpdatePaperSize sets the "paper_size" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdatePaperSize() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdatePaperSize()
	})
}

// SetStartAt sets the "start_at" field.
func (u *DocumentUpsertBulk) SetStartAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateStartAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *DocumentUpsertBulk) SetEndAt(v time.Time) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateEndAt() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateEndAt()
	})
}

// Exec executes the query.
func (u *DocumentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
