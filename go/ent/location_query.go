// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LocationQuery is the builder for querying Location entities.
type LocationQuery struct {
	config
	ctx                       *QueryContext
	order                     []location.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Location
	withTenant                *TenantQuery
	withAddress               *AddressQuery
	withLocationTags          *LocationTagQuery
	withSenderConnection      *ConnectionQuery
	withPickupConnection      *ConnectionQuery
	withReturnConnection      *ConnectionQuery
	withSellerConnection      *ConnectionQuery
	withReturnPortal          *ReturnPortalQuery
	withDeliveryOption        *DeliveryOptionQuery
	withColli                 *ColliQuery
	withFKs                   bool
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*Location) error
	withNamedLocationTags     map[string]*LocationTagQuery
	withNamedSenderConnection map[string]*ConnectionQuery
	withNamedPickupConnection map[string]*ConnectionQuery
	withNamedReturnConnection map[string]*ConnectionQuery
	withNamedSellerConnection map[string]*ConnectionQuery
	withNamedReturnPortal     map[string]*ReturnPortalQuery
	withNamedDeliveryOption   map[string]*DeliveryOptionQuery
	withNamedColli            map[string]*ColliQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LocationQuery builder.
func (lq *LocationQuery) Where(ps ...predicate.Location) *LocationQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit the number of records to be returned by this query.
func (lq *LocationQuery) Limit(limit int) *LocationQuery {
	lq.ctx.Limit = &limit
	return lq
}

// Offset to start from.
func (lq *LocationQuery) Offset(offset int) *LocationQuery {
	lq.ctx.Offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *LocationQuery) Unique(unique bool) *LocationQuery {
	lq.ctx.Unique = &unique
	return lq
}

// Order specifies how the records should be ordered.
func (lq *LocationQuery) Order(o ...location.OrderOption) *LocationQuery {
	lq.order = append(lq.order, o...)
	return lq
}

// QueryTenant chains the current query on the "tenant" edge.
func (lq *LocationQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, location.TenantTable, location.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddress chains the current query on the "address" edge.
func (lq *LocationQuery) QueryAddress() *AddressQuery {
	query := (&AddressClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, location.AddressTable, location.AddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationTags chains the current query on the "location_tags" edge.
func (lq *LocationQuery) QueryLocationTags() *LocationTagQuery {
	query := (&LocationTagClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(locationtag.Table, locationtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, location.LocationTagsTable, location.LocationTagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySenderConnection chains the current query on the "sender_connection" edge.
func (lq *LocationQuery) QuerySenderConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.SenderConnectionTable, location.SenderConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPickupConnection chains the current query on the "pickup_connection" edge.
func (lq *LocationQuery) QueryPickupConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.PickupConnectionTable, location.PickupConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnConnection chains the current query on the "return_connection" edge.
func (lq *LocationQuery) QueryReturnConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.ReturnConnectionTable, location.ReturnConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySellerConnection chains the current query on the "seller_connection" edge.
func (lq *LocationQuery) QuerySellerConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.SellerConnectionTable, location.SellerConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnPortal chains the current query on the "return_portal" edge.
func (lq *LocationQuery) QueryReturnPortal() *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, location.ReturnPortalTable, location.ReturnPortalPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (lq *LocationQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, location.DeliveryOptionTable, location.DeliveryOptionPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (lq *LocationQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.ColliTable, location.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Location entity from the query.
// Returns a *NotFoundError when no Location was found.
func (lq *LocationQuery) First(ctx context.Context) (*Location, error) {
	nodes, err := lq.Limit(1).All(setContextOp(ctx, lq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{location.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *LocationQuery) FirstX(ctx context.Context) *Location {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Location ID from the query.
// Returns a *NotFoundError when no Location ID was found.
func (lq *LocationQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = lq.Limit(1).IDs(setContextOp(ctx, lq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{location.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *LocationQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Location entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Location entity is found.
// Returns a *NotFoundError when no Location entities are found.
func (lq *LocationQuery) Only(ctx context.Context) (*Location, error) {
	nodes, err := lq.Limit(2).All(setContextOp(ctx, lq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{location.Label}
	default:
		return nil, &NotSingularError{location.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *LocationQuery) OnlyX(ctx context.Context) *Location {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Location ID in the query.
// Returns a *NotSingularError when more than one Location ID is found.
// Returns a *NotFoundError when no entities are found.
func (lq *LocationQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = lq.Limit(2).IDs(setContextOp(ctx, lq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{location.Label}
	default:
		err = &NotSingularError{location.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *LocationQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Locations.
func (lq *LocationQuery) All(ctx context.Context) ([]*Location, error) {
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryAll)
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Location, *LocationQuery]()
	return withInterceptors[[]*Location](ctx, lq, qr, lq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lq *LocationQuery) AllX(ctx context.Context) []*Location {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Location IDs.
func (lq *LocationQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if lq.ctx.Unique == nil && lq.path != nil {
		lq.Unique(true)
	}
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryIDs)
	if err = lq.Select(location.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *LocationQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *LocationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryCount)
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lq, querierCount[*LocationQuery](), lq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lq *LocationQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *LocationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lq.ctx, ent.OpQueryExist)
	switch _, err := lq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *LocationQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LocationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *LocationQuery) Clone() *LocationQuery {
	if lq == nil {
		return nil
	}
	return &LocationQuery{
		config:               lq.config,
		ctx:                  lq.ctx.Clone(),
		order:                append([]location.OrderOption{}, lq.order...),
		inters:               append([]Interceptor{}, lq.inters...),
		predicates:           append([]predicate.Location{}, lq.predicates...),
		withTenant:           lq.withTenant.Clone(),
		withAddress:          lq.withAddress.Clone(),
		withLocationTags:     lq.withLocationTags.Clone(),
		withSenderConnection: lq.withSenderConnection.Clone(),
		withPickupConnection: lq.withPickupConnection.Clone(),
		withReturnConnection: lq.withReturnConnection.Clone(),
		withSellerConnection: lq.withSellerConnection.Clone(),
		withReturnPortal:     lq.withReturnPortal.Clone(),
		withDeliveryOption:   lq.withDeliveryOption.Clone(),
		withColli:            lq.withColli.Clone(),
		// clone intermediate query.
		sql:  lq.sql.Clone(),
		path: lq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithTenant(opts ...func(*TenantQuery)) *LocationQuery {
	query := (&TenantClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withTenant = query
	return lq
}

// WithAddress tells the query-builder to eager-load the nodes that are connected to
// the "address" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithAddress(opts ...func(*AddressQuery)) *LocationQuery {
	query := (&AddressClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withAddress = query
	return lq
}

// WithLocationTags tells the query-builder to eager-load the nodes that are connected to
// the "location_tags" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithLocationTags(opts ...func(*LocationTagQuery)) *LocationQuery {
	query := (&LocationTagClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withLocationTags = query
	return lq
}

// WithSenderConnection tells the query-builder to eager-load the nodes that are connected to
// the "sender_connection" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithSenderConnection(opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withSenderConnection = query
	return lq
}

// WithPickupConnection tells the query-builder to eager-load the nodes that are connected to
// the "pickup_connection" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithPickupConnection(opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withPickupConnection = query
	return lq
}

// WithReturnConnection tells the query-builder to eager-load the nodes that are connected to
// the "return_connection" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithReturnConnection(opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withReturnConnection = query
	return lq
}

// WithSellerConnection tells the query-builder to eager-load the nodes that are connected to
// the "seller_connection" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithSellerConnection(opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withSellerConnection = query
	return lq
}

// WithReturnPortal tells the query-builder to eager-load the nodes that are connected to
// the "return_portal" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithReturnPortal(opts ...func(*ReturnPortalQuery)) *LocationQuery {
	query := (&ReturnPortalClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withReturnPortal = query
	return lq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *LocationQuery {
	query := (&DeliveryOptionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withDeliveryOption = query
	return lq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithColli(opts ...func(*ColliQuery)) *LocationQuery {
	query := (&ColliClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withColli = query
	return lq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Location.Query().
//		GroupBy(location.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lq *LocationQuery) GroupBy(field string, fields ...string) *LocationGroupBy {
	lq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LocationGroupBy{build: lq}
	grbuild.flds = &lq.ctx.Fields
	grbuild.label = location.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.Location.Query().
//		Select(location.FieldTenantID).
//		Scan(ctx, &v)
func (lq *LocationQuery) Select(fields ...string) *LocationSelect {
	lq.ctx.Fields = append(lq.ctx.Fields, fields...)
	sbuild := &LocationSelect{LocationQuery: lq}
	sbuild.label = location.Label
	sbuild.flds, sbuild.scan = &lq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LocationSelect configured with the given aggregations.
func (lq *LocationQuery) Aggregate(fns ...AggregateFunc) *LocationSelect {
	return lq.Select().Aggregate(fns...)
}

func (lq *LocationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lq); err != nil {
				return err
			}
		}
	}
	for _, f := range lq.ctx.Fields {
		if !location.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	if location.Policy == nil {
		return errors.New("ent: uninitialized location.Policy (forgotten import ent/runtime?)")
	}
	if err := location.Policy.EvalQuery(ctx, lq); err != nil {
		return err
	}
	return nil
}

func (lq *LocationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Location, error) {
	var (
		nodes       = []*Location{}
		withFKs     = lq.withFKs
		_spec       = lq.querySpec()
		loadedTypes = [10]bool{
			lq.withTenant != nil,
			lq.withAddress != nil,
			lq.withLocationTags != nil,
			lq.withSenderConnection != nil,
			lq.withPickupConnection != nil,
			lq.withReturnConnection != nil,
			lq.withSellerConnection != nil,
			lq.withReturnPortal != nil,
			lq.withDeliveryOption != nil,
			lq.withColli != nil,
		}
	)
	if lq.withAddress != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, location.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Location).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Location{config: lq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(lq.modifiers) > 0 {
		_spec.Modifiers = lq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lq.withTenant; query != nil {
		if err := lq.loadTenant(ctx, query, nodes, nil,
			func(n *Location, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withAddress; query != nil {
		if err := lq.loadAddress(ctx, query, nodes, nil,
			func(n *Location, e *Address) { n.Edges.Address = e }); err != nil {
			return nil, err
		}
	}
	if query := lq.withLocationTags; query != nil {
		if err := lq.loadLocationTags(ctx, query, nodes,
			func(n *Location) { n.Edges.LocationTags = []*LocationTag{} },
			func(n *Location, e *LocationTag) { n.Edges.LocationTags = append(n.Edges.LocationTags, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withSenderConnection; query != nil {
		if err := lq.loadSenderConnection(ctx, query, nodes,
			func(n *Location) { n.Edges.SenderConnection = []*Connection{} },
			func(n *Location, e *Connection) { n.Edges.SenderConnection = append(n.Edges.SenderConnection, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withPickupConnection; query != nil {
		if err := lq.loadPickupConnection(ctx, query, nodes,
			func(n *Location) { n.Edges.PickupConnection = []*Connection{} },
			func(n *Location, e *Connection) { n.Edges.PickupConnection = append(n.Edges.PickupConnection, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withReturnConnection; query != nil {
		if err := lq.loadReturnConnection(ctx, query, nodes,
			func(n *Location) { n.Edges.ReturnConnection = []*Connection{} },
			func(n *Location, e *Connection) { n.Edges.ReturnConnection = append(n.Edges.ReturnConnection, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withSellerConnection; query != nil {
		if err := lq.loadSellerConnection(ctx, query, nodes,
			func(n *Location) { n.Edges.SellerConnection = []*Connection{} },
			func(n *Location, e *Connection) { n.Edges.SellerConnection = append(n.Edges.SellerConnection, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withReturnPortal; query != nil {
		if err := lq.loadReturnPortal(ctx, query, nodes,
			func(n *Location) { n.Edges.ReturnPortal = []*ReturnPortal{} },
			func(n *Location, e *ReturnPortal) { n.Edges.ReturnPortal = append(n.Edges.ReturnPortal, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withDeliveryOption; query != nil {
		if err := lq.loadDeliveryOption(ctx, query, nodes,
			func(n *Location) { n.Edges.DeliveryOption = []*DeliveryOption{} },
			func(n *Location, e *DeliveryOption) { n.Edges.DeliveryOption = append(n.Edges.DeliveryOption, e) }); err != nil {
			return nil, err
		}
	}
	if query := lq.withColli; query != nil {
		if err := lq.loadColli(ctx, query, nodes,
			func(n *Location) { n.Edges.Colli = []*Colli{} },
			func(n *Location, e *Colli) { n.Edges.Colli = append(n.Edges.Colli, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedLocationTags {
		if err := lq.loadLocationTags(ctx, query, nodes,
			func(n *Location) { n.appendNamedLocationTags(name) },
			func(n *Location, e *LocationTag) { n.appendNamedLocationTags(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedSenderConnection {
		if err := lq.loadSenderConnection(ctx, query, nodes,
			func(n *Location) { n.appendNamedSenderConnection(name) },
			func(n *Location, e *Connection) { n.appendNamedSenderConnection(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedPickupConnection {
		if err := lq.loadPickupConnection(ctx, query, nodes,
			func(n *Location) { n.appendNamedPickupConnection(name) },
			func(n *Location, e *Connection) { n.appendNamedPickupConnection(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedReturnConnection {
		if err := lq.loadReturnConnection(ctx, query, nodes,
			func(n *Location) { n.appendNamedReturnConnection(name) },
			func(n *Location, e *Connection) { n.appendNamedReturnConnection(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedSellerConnection {
		if err := lq.loadSellerConnection(ctx, query, nodes,
			func(n *Location) { n.appendNamedSellerConnection(name) },
			func(n *Location, e *Connection) { n.appendNamedSellerConnection(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedReturnPortal {
		if err := lq.loadReturnPortal(ctx, query, nodes,
			func(n *Location) { n.appendNamedReturnPortal(name) },
			func(n *Location, e *ReturnPortal) { n.appendNamedReturnPortal(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedDeliveryOption {
		if err := lq.loadDeliveryOption(ctx, query, nodes,
			func(n *Location) { n.appendNamedDeliveryOption(name) },
			func(n *Location, e *DeliveryOption) { n.appendNamedDeliveryOption(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range lq.withNamedColli {
		if err := lq.loadColli(ctx, query, nodes,
			func(n *Location) { n.appendNamedColli(name) },
			func(n *Location, e *Colli) { n.appendNamedColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range lq.loadTotal {
		if err := lq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lq *LocationQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*Location, init func(*Location), assign func(*Location, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Location)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lq *LocationQuery) loadAddress(ctx context.Context, query *AddressQuery, nodes []*Location, init func(*Location), assign func(*Location, *Address)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*Location)
	for i := range nodes {
		if nodes[i].location_address == nil {
			continue
		}
		fk := *nodes[i].location_address
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(address.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "location_address" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (lq *LocationQuery) loadLocationTags(ctx context.Context, query *LocationTagQuery, nodes []*Location, init func(*Location), assign func(*Location, *LocationTag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Location)
	nids := make(map[pulid.ID]map[*Location]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(location.LocationTagsTable)
		s.Join(joinT).On(s.C(locationtag.FieldID), joinT.C(location.LocationTagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(location.LocationTagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(location.LocationTagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Location]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*LocationTag](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "location_tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lq *LocationQuery) loadSenderConnection(ctx context.Context, query *ConnectionQuery, nodes []*Location, init func(*Location), assign func(*Location, *Connection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Connection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.SenderConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_sender_location
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_sender_location" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_sender_location" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadPickupConnection(ctx context.Context, query *ConnectionQuery, nodes []*Location, init func(*Location), assign func(*Location, *Connection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Connection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.PickupConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_pickup_location
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_pickup_location" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_pickup_location" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadReturnConnection(ctx context.Context, query *ConnectionQuery, nodes []*Location, init func(*Location), assign func(*Location, *Connection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Connection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.ReturnConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_return_location
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_return_location" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_return_location" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadSellerConnection(ctx context.Context, query *ConnectionQuery, nodes []*Location, init func(*Location), assign func(*Location, *Connection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Connection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.SellerConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.connection_seller_location
		if fk == nil {
			return fmt.Errorf(`foreign-key "connection_seller_location" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "connection_seller_location" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (lq *LocationQuery) loadReturnPortal(ctx context.Context, query *ReturnPortalQuery, nodes []*Location, init func(*Location), assign func(*Location, *ReturnPortal)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Location)
	nids := make(map[pulid.ID]map[*Location]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(location.ReturnPortalTable)
		s.Join(joinT).On(s.C(returnportal.FieldID), joinT.C(location.ReturnPortalPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(location.ReturnPortalPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(location.ReturnPortalPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Location]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ReturnPortal](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "return_portal" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lq *LocationQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*Location, init func(*Location), assign func(*Location, *DeliveryOption)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*Location)
	nids := make(map[pulid.ID]map[*Location]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(location.DeliveryOptionTable)
		s.Join(joinT).On(s.C(deliveryoption.FieldID), joinT.C(location.DeliveryOptionPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(location.DeliveryOptionPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(location.DeliveryOptionPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*Location]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOption](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (lq *LocationQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*Location, init func(*Location), assign func(*Location, *Colli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*Location)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Colli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(location.ColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_click_collect_location
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_click_collect_location" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_click_collect_location" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lq *LocationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	if len(lq.modifiers) > 0 {
		_spec.Modifiers = lq.modifiers
	}
	_spec.Node.Columns = lq.ctx.Fields
	if len(lq.ctx.Fields) > 0 {
		_spec.Unique = lq.ctx.Unique != nil && *lq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *LocationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(location.Table, location.Columns, sqlgraph.NewFieldSpec(location.FieldID, field.TypeString))
	_spec.From = lq.sql
	if unique := lq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lq.path != nil {
		_spec.Unique = true
	}
	if fields := lq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, location.FieldID)
		for i := range fields {
			if fields[i] != location.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if lq.withTenant != nil {
			_spec.Node.AddColumnOnce(location.FieldTenantID)
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lq *LocationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(location.Table)
	columns := lq.ctx.Fields
	if len(columns) == 0 {
		columns = location.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.ctx.Unique != nil && *lq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedLocationTags tells the query-builder to eager-load the nodes that are connected to the "location_tags"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedLocationTags(name string, opts ...func(*LocationTagQuery)) *LocationQuery {
	query := (&LocationTagClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedLocationTags == nil {
		lq.withNamedLocationTags = make(map[string]*LocationTagQuery)
	}
	lq.withNamedLocationTags[name] = query
	return lq
}

// WithNamedSenderConnection tells the query-builder to eager-load the nodes that are connected to the "sender_connection"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedSenderConnection(name string, opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedSenderConnection == nil {
		lq.withNamedSenderConnection = make(map[string]*ConnectionQuery)
	}
	lq.withNamedSenderConnection[name] = query
	return lq
}

// WithNamedPickupConnection tells the query-builder to eager-load the nodes that are connected to the "pickup_connection"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedPickupConnection(name string, opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedPickupConnection == nil {
		lq.withNamedPickupConnection = make(map[string]*ConnectionQuery)
	}
	lq.withNamedPickupConnection[name] = query
	return lq
}

// WithNamedReturnConnection tells the query-builder to eager-load the nodes that are connected to the "return_connection"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedReturnConnection(name string, opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedReturnConnection == nil {
		lq.withNamedReturnConnection = make(map[string]*ConnectionQuery)
	}
	lq.withNamedReturnConnection[name] = query
	return lq
}

// WithNamedSellerConnection tells the query-builder to eager-load the nodes that are connected to the "seller_connection"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedSellerConnection(name string, opts ...func(*ConnectionQuery)) *LocationQuery {
	query := (&ConnectionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedSellerConnection == nil {
		lq.withNamedSellerConnection = make(map[string]*ConnectionQuery)
	}
	lq.withNamedSellerConnection[name] = query
	return lq
}

// WithNamedReturnPortal tells the query-builder to eager-load the nodes that are connected to the "return_portal"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedReturnPortal(name string, opts ...func(*ReturnPortalQuery)) *LocationQuery {
	query := (&ReturnPortalClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedReturnPortal == nil {
		lq.withNamedReturnPortal = make(map[string]*ReturnPortalQuery)
	}
	lq.withNamedReturnPortal[name] = query
	return lq
}

// WithNamedDeliveryOption tells the query-builder to eager-load the nodes that are connected to the "delivery_option"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedDeliveryOption(name string, opts ...func(*DeliveryOptionQuery)) *LocationQuery {
	query := (&DeliveryOptionClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedDeliveryOption == nil {
		lq.withNamedDeliveryOption = make(map[string]*DeliveryOptionQuery)
	}
	lq.withNamedDeliveryOption[name] = query
	return lq
}

// WithNamedColli tells the query-builder to eager-load the nodes that are connected to the "colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (lq *LocationQuery) WithNamedColli(name string, opts ...func(*ColliQuery)) *LocationQuery {
	query := (&ColliClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if lq.withNamedColli == nil {
		lq.withNamedColli = make(map[string]*ColliQuery)
	}
	lq.withNamedColli[name] = query
	return lq
}

// LocationGroupBy is the group-by builder for Location entities.
type LocationGroupBy struct {
	selector
	build *LocationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *LocationGroupBy) Aggregate(fns ...AggregateFunc) *LocationGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the selector query and scans the result into the given value.
func (lgb *LocationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lgb.build.ctx, ent.OpQueryGroupBy)
	if err := lgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocationQuery, *LocationGroupBy](ctx, lgb.build, lgb, lgb.build.inters, v)
}

func (lgb *LocationGroupBy) sqlScan(ctx context.Context, root *LocationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lgb.flds)+len(lgb.fns))
		for _, f := range *lgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LocationSelect is the builder for selecting fields of Location entities.
type LocationSelect struct {
	*LocationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ls *LocationSelect) Aggregate(fns ...AggregateFunc) *LocationSelect {
	ls.fns = append(ls.fns, fns...)
	return ls
}

// Scan applies the selector query and scans the result into the given value.
func (ls *LocationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ls.ctx, ent.OpQuerySelect)
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LocationQuery, *LocationSelect](ctx, ls.LocationQuery, ls, ls.inters, v)
}

func (ls *LocationSelect) sqlScan(ctx context.Context, root *LocationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ls.fns))
	for _, fn := range ls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
