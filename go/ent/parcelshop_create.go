// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopCreate is the builder for creating a ParcelShop entity.
type ParcelShopCreate struct {
	config
	mutation *ParcelShopMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (psc *ParcelShopCreate) SetName(s string) *ParcelShopCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetLastUpdated sets the "last_updated" field.
func (psc *ParcelShopCreate) SetLastUpdated(t time.Time) *ParcelShopCreate {
	psc.mutation.SetLastUpdated(t)
	return psc
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (psc *ParcelShopCreate) SetNillableLastUpdated(t *time.Time) *ParcelShopCreate {
	if t != nil {
		psc.SetLastUpdated(*t)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *ParcelShopCreate) SetID(pu pulid.ID) *ParcelShopCreate {
	psc.mutation.SetID(pu)
	return psc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psc *ParcelShopCreate) SetNillableID(pu *pulid.ID) *ParcelShopCreate {
	if pu != nil {
		psc.SetID(*pu)
	}
	return psc
}

// SetParcelShopDAOID sets the "parcel_shop_dao" edge to the ParcelShopDAO entity by ID.
func (psc *ParcelShopCreate) SetParcelShopDAOID(id pulid.ID) *ParcelShopCreate {
	psc.mutation.SetParcelShopDAOID(id)
	return psc
}

// SetNillableParcelShopDAOID sets the "parcel_shop_dao" edge to the ParcelShopDAO entity by ID if the given value is not nil.
func (psc *ParcelShopCreate) SetNillableParcelShopDAOID(id *pulid.ID) *ParcelShopCreate {
	if id != nil {
		psc = psc.SetParcelShopDAOID(*id)
	}
	return psc
}

// SetParcelShopDAO sets the "parcel_shop_dao" edge to the ParcelShopDAO entity.
func (psc *ParcelShopCreate) SetParcelShopDAO(p *ParcelShopDAO) *ParcelShopCreate {
	return psc.SetParcelShopDAOID(p.ID)
}

// SetParcelShopPostNordID sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity by ID.
func (psc *ParcelShopCreate) SetParcelShopPostNordID(id pulid.ID) *ParcelShopCreate {
	psc.mutation.SetParcelShopPostNordID(id)
	return psc
}

// SetNillableParcelShopPostNordID sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity by ID if the given value is not nil.
func (psc *ParcelShopCreate) SetNillableParcelShopPostNordID(id *pulid.ID) *ParcelShopCreate {
	if id != nil {
		psc = psc.SetParcelShopPostNordID(*id)
	}
	return psc
}

// SetParcelShopPostNord sets the "parcel_shop_post_nord" edge to the ParcelShopPostNord entity.
func (psc *ParcelShopCreate) SetParcelShopPostNord(p *ParcelShopPostNord) *ParcelShopCreate {
	return psc.SetParcelShopPostNordID(p.ID)
}

// SetParcelShopGLSID sets the "parcel_shop_gls" edge to the ParcelShopGLS entity by ID.
func (psc *ParcelShopCreate) SetParcelShopGLSID(id pulid.ID) *ParcelShopCreate {
	psc.mutation.SetParcelShopGLSID(id)
	return psc
}

// SetNillableParcelShopGLSID sets the "parcel_shop_gls" edge to the ParcelShopGLS entity by ID if the given value is not nil.
func (psc *ParcelShopCreate) SetNillableParcelShopGLSID(id *pulid.ID) *ParcelShopCreate {
	if id != nil {
		psc = psc.SetParcelShopGLSID(*id)
	}
	return psc
}

// SetParcelShopGLS sets the "parcel_shop_gls" edge to the ParcelShopGLS entity.
func (psc *ParcelShopCreate) SetParcelShopGLS(p *ParcelShopGLS) *ParcelShopCreate {
	return psc.SetParcelShopGLSID(p.ID)
}

// SetParcelShopBringID sets the "parcel_shop_bring" edge to the ParcelShopBring entity by ID.
func (psc *ParcelShopCreate) SetParcelShopBringID(id pulid.ID) *ParcelShopCreate {
	psc.mutation.SetParcelShopBringID(id)
	return psc
}

// SetNillableParcelShopBringID sets the "parcel_shop_bring" edge to the ParcelShopBring entity by ID if the given value is not nil.
func (psc *ParcelShopCreate) SetNillableParcelShopBringID(id *pulid.ID) *ParcelShopCreate {
	if id != nil {
		psc = psc.SetParcelShopBringID(*id)
	}
	return psc
}

// SetParcelShopBring sets the "parcel_shop_bring" edge to the ParcelShopBring entity.
func (psc *ParcelShopCreate) SetParcelShopBring(p *ParcelShopBring) *ParcelShopCreate {
	return psc.SetParcelShopBringID(p.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (psc *ParcelShopCreate) SetCarrierBrandID(id pulid.ID) *ParcelShopCreate {
	psc.mutation.SetCarrierBrandID(id)
	return psc
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (psc *ParcelShopCreate) SetCarrierBrand(c *CarrierBrand) *ParcelShopCreate {
	return psc.SetCarrierBrandID(c.ID)
}

// SetAddressID sets the "address" edge to the AddressGlobal entity by ID.
func (psc *ParcelShopCreate) SetAddressID(id pulid.ID) *ParcelShopCreate {
	psc.mutation.SetAddressID(id)
	return psc
}

// SetAddress sets the "address" edge to the AddressGlobal entity.
func (psc *ParcelShopCreate) SetAddress(a *AddressGlobal) *ParcelShopCreate {
	return psc.SetAddressID(a.ID)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (psc *ParcelShopCreate) AddColliIDs(ids ...pulid.ID) *ParcelShopCreate {
	psc.mutation.AddColliIDs(ids...)
	return psc
}

// AddColli adds the "colli" edges to the Colli entity.
func (psc *ParcelShopCreate) AddColli(c ...*Colli) *ParcelShopCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return psc.AddColliIDs(ids...)
}

// AddBusinessHoursPeriodIDs adds the "business_hours_period" edge to the BusinessHoursPeriod entity by IDs.
func (psc *ParcelShopCreate) AddBusinessHoursPeriodIDs(ids ...pulid.ID) *ParcelShopCreate {
	psc.mutation.AddBusinessHoursPeriodIDs(ids...)
	return psc
}

// AddBusinessHoursPeriod adds the "business_hours_period" edges to the BusinessHoursPeriod entity.
func (psc *ParcelShopCreate) AddBusinessHoursPeriod(b ...*BusinessHoursPeriod) *ParcelShopCreate {
	ids := make([]pulid.ID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return psc.AddBusinessHoursPeriodIDs(ids...)
}

// Mutation returns the ParcelShopMutation object of the builder.
func (psc *ParcelShopCreate) Mutation() *ParcelShopMutation {
	return psc.mutation
}

// Save creates the ParcelShop in the database.
func (psc *ParcelShopCreate) Save(ctx context.Context) (*ParcelShop, error) {
	if err := psc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *ParcelShopCreate) SaveX(ctx context.Context) *ParcelShop {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *ParcelShopCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *ParcelShopCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *ParcelShopCreate) defaults() error {
	if _, ok := psc.mutation.LastUpdated(); !ok {
		if parcelshop.DefaultLastUpdated == nil {
			return fmt.Errorf("ent: uninitialized parcelshop.DefaultLastUpdated (forgotten import ent/runtime?)")
		}
		v := parcelshop.DefaultLastUpdated()
		psc.mutation.SetLastUpdated(v)
	}
	if _, ok := psc.mutation.ID(); !ok {
		if parcelshop.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized parcelshop.DefaultID (forgotten import ent/runtime?)")
		}
		v := parcelshop.DefaultID()
		psc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (psc *ParcelShopCreate) check() error {
	if _, ok := psc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ParcelShop.name"`)}
	}
	if _, ok := psc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "last_updated", err: errors.New(`ent: missing required field "ParcelShop.last_updated"`)}
	}
	if len(psc.mutation.CarrierBrandIDs()) == 0 {
		return &ValidationError{Name: "carrier_brand", err: errors.New(`ent: missing required edge "ParcelShop.carrier_brand"`)}
	}
	if len(psc.mutation.AddressIDs()) == 0 {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required edge "ParcelShop.address"`)}
	}
	return nil
}

func (psc *ParcelShopCreate) sqlSave(ctx context.Context) (*ParcelShop, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *ParcelShopCreate) createSpec() (*ParcelShop, *sqlgraph.CreateSpec) {
	var (
		_node = &ParcelShop{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(parcelshop.Table, sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString))
	)
	_spec.OnConflict = psc.conflict
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := psc.mutation.Name(); ok {
		_spec.SetField(parcelshop.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := psc.mutation.LastUpdated(); ok {
		_spec.SetField(parcelshop.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if nodes := psc.mutation.ParcelShopDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopDAOTable,
			Columns: []string{parcelshop.ParcelShopDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopdao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ParcelShopPostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopPostNordTable,
			Columns: []string{parcelshop.ParcelShopPostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ParcelShopGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopGLSTable,
			Columns: []string{parcelshop.ParcelShopGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopgls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ParcelShopBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopBringTable,
			Columns: []string{parcelshop.ParcelShopBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshopbring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parcelshop.CarrierBrandTable,
			Columns: []string{parcelshop.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_carrier_brand = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.AddressTable,
			Columns: []string{parcelshop.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.BusinessHoursPeriodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShop.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (psc *ParcelShopCreate) OnConflict(opts ...sql.ConflictOption) *ParcelShopUpsertOne {
	psc.conflict = opts
	return &ParcelShopUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShop.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *ParcelShopCreate) OnConflictColumns(columns ...string) *ParcelShopUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopUpsertOne{
		create: psc,
	}
}

type (
	// ParcelShopUpsertOne is the builder for "upsert"-ing
	//  one ParcelShop node.
	ParcelShopUpsertOne struct {
		create *ParcelShopCreate
	}

	// ParcelShopUpsert is the "OnConflict" setter.
	ParcelShopUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ParcelShopUpsert) SetName(v string) *ParcelShopUpsert {
	u.Set(parcelshop.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ParcelShopUpsert) UpdateName() *ParcelShopUpsert {
	u.SetExcluded(parcelshop.FieldName)
	return u
}

// SetLastUpdated sets the "last_updated" field.
func (u *ParcelShopUpsert) SetLastUpdated(v time.Time) *ParcelShopUpsert {
	u.Set(parcelshop.FieldLastUpdated, v)
	return u
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *ParcelShopUpsert) UpdateLastUpdated() *ParcelShopUpsert {
	u.SetExcluded(parcelshop.FieldLastUpdated)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ParcelShop.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshop.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopUpsertOne) UpdateNewValues() *ParcelShopUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(parcelshop.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShop.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ParcelShopUpsertOne) Ignore() *ParcelShopUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopUpsertOne) DoNothing() *ParcelShopUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopCreate.OnConflict
// documentation for more info.
func (u *ParcelShopUpsertOne) Update(set func(*ParcelShopUpsert)) *ParcelShopUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ParcelShopUpsertOne) SetName(v string) *ParcelShopUpsertOne {
	return u.Update(func(s *ParcelShopUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ParcelShopUpsertOne) UpdateName() *ParcelShopUpsertOne {
	return u.Update(func(s *ParcelShopUpsert) {
		s.UpdateName()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *ParcelShopUpsertOne) SetLastUpdated(v time.Time) *ParcelShopUpsertOne {
	return u.Update(func(s *ParcelShopUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *ParcelShopUpsertOne) UpdateLastUpdated() *ParcelShopUpsertOne {
	return u.Update(func(s *ParcelShopUpsert) {
		s.UpdateLastUpdated()
	})
}

// Exec executes the query.
func (u *ParcelShopUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ParcelShopUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ParcelShopUpsertOne.ID is not supported by MySQL driver. Use ParcelShopUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ParcelShopUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ParcelShopCreateBulk is the builder for creating many ParcelShop entities in bulk.
type ParcelShopCreateBulk struct {
	config
	err      error
	builders []*ParcelShopCreate
	conflict []sql.ConflictOption
}

// Save creates the ParcelShop entities in the database.
func (pscb *ParcelShopCreateBulk) Save(ctx context.Context) ([]*ParcelShop, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*ParcelShop, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParcelShopMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *ParcelShopCreateBulk) SaveX(ctx context.Context) []*ParcelShop {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *ParcelShopCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *ParcelShopCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShop.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pscb *ParcelShopCreateBulk) OnConflict(opts ...sql.ConflictOption) *ParcelShopUpsertBulk {
	pscb.conflict = opts
	return &ParcelShopUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShop.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *ParcelShopCreateBulk) OnConflictColumns(columns ...string) *ParcelShopUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopUpsertBulk{
		create: pscb,
	}
}

// ParcelShopUpsertBulk is the builder for "upsert"-ing
// a bulk of ParcelShop nodes.
type ParcelShopUpsertBulk struct {
	create *ParcelShopCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ParcelShop.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshop.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopUpsertBulk) UpdateNewValues() *ParcelShopUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(parcelshop.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShop.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ParcelShopUpsertBulk) Ignore() *ParcelShopUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopUpsertBulk) DoNothing() *ParcelShopUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopCreateBulk.OnConflict
// documentation for more info.
func (u *ParcelShopUpsertBulk) Update(set func(*ParcelShopUpsert)) *ParcelShopUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ParcelShopUpsertBulk) SetName(v string) *ParcelShopUpsertBulk {
	return u.Update(func(s *ParcelShopUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ParcelShopUpsertBulk) UpdateName() *ParcelShopUpsertBulk {
	return u.Update(func(s *ParcelShopUpsert) {
		s.UpdateName()
	})
}

// SetLastUpdated sets the "last_updated" field.
func (u *ParcelShopUpsertBulk) SetLastUpdated(v time.Time) *ParcelShopUpsertBulk {
	return u.Update(func(s *ParcelShopUpsert) {
		s.SetLastUpdated(v)
	})
}

// UpdateLastUpdated sets the "last_updated" field to the value that was provided on create.
func (u *ParcelShopUpsertBulk) UpdateLastUpdated() *ParcelShopUpsertBulk {
	return u.Update(func(s *ParcelShopUpsert) {
		s.UpdateLastUpdated()
	})
}

// Exec executes the query.
func (u *ParcelShopUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ParcelShopCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
