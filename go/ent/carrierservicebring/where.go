// Code generated by ent, DO NOT EDIT.

package carrierservicebring

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldLTE(FieldID, id))
}

// APIServiceCode applies equality check predicate on the "api_service_code" field. It's identical to APIServiceCodeEQ.
func APIServiceCode(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEQ(FieldAPIServiceCode, v))
}

// APIRequest applies equality check predicate on the "api_request" field. It's identical to APIRequestEQ.
func APIRequest(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEQ(FieldAPIRequest, v))
}

// APIServiceCodeEQ applies the EQ predicate on the "api_service_code" field.
func APIServiceCodeEQ(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEQ(FieldAPIServiceCode, v))
}

// APIServiceCodeNEQ applies the NEQ predicate on the "api_service_code" field.
func APIServiceCodeNEQ(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldNEQ(FieldAPIServiceCode, v))
}

// APIServiceCodeIn applies the In predicate on the "api_service_code" field.
func APIServiceCodeIn(vs ...string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldIn(FieldAPIServiceCode, vs...))
}

// APIServiceCodeNotIn applies the NotIn predicate on the "api_service_code" field.
func APIServiceCodeNotIn(vs ...string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldNotIn(FieldAPIServiceCode, vs...))
}

// APIServiceCodeGT applies the GT predicate on the "api_service_code" field.
func APIServiceCodeGT(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldGT(FieldAPIServiceCode, v))
}

// APIServiceCodeGTE applies the GTE predicate on the "api_service_code" field.
func APIServiceCodeGTE(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldGTE(FieldAPIServiceCode, v))
}

// APIServiceCodeLT applies the LT predicate on the "api_service_code" field.
func APIServiceCodeLT(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldLT(FieldAPIServiceCode, v))
}

// APIServiceCodeLTE applies the LTE predicate on the "api_service_code" field.
func APIServiceCodeLTE(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldLTE(FieldAPIServiceCode, v))
}

// APIServiceCodeContains applies the Contains predicate on the "api_service_code" field.
func APIServiceCodeContains(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldContains(FieldAPIServiceCode, v))
}

// APIServiceCodeHasPrefix applies the HasPrefix predicate on the "api_service_code" field.
func APIServiceCodeHasPrefix(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldHasPrefix(FieldAPIServiceCode, v))
}

// APIServiceCodeHasSuffix applies the HasSuffix predicate on the "api_service_code" field.
func APIServiceCodeHasSuffix(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldHasSuffix(FieldAPIServiceCode, v))
}

// APIServiceCodeEqualFold applies the EqualFold predicate on the "api_service_code" field.
func APIServiceCodeEqualFold(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEqualFold(FieldAPIServiceCode, v))
}

// APIServiceCodeContainsFold applies the ContainsFold predicate on the "api_service_code" field.
func APIServiceCodeContainsFold(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldContainsFold(FieldAPIServiceCode, v))
}

// APIRequestEQ applies the EQ predicate on the "api_request" field.
func APIRequestEQ(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEQ(FieldAPIRequest, v))
}

// APIRequestNEQ applies the NEQ predicate on the "api_request" field.
func APIRequestNEQ(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldNEQ(FieldAPIRequest, v))
}

// APIRequestIn applies the In predicate on the "api_request" field.
func APIRequestIn(vs ...string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldIn(FieldAPIRequest, vs...))
}

// APIRequestNotIn applies the NotIn predicate on the "api_request" field.
func APIRequestNotIn(vs ...string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldNotIn(FieldAPIRequest, vs...))
}

// APIRequestGT applies the GT predicate on the "api_request" field.
func APIRequestGT(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldGT(FieldAPIRequest, v))
}

// APIRequestGTE applies the GTE predicate on the "api_request" field.
func APIRequestGTE(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldGTE(FieldAPIRequest, v))
}

// APIRequestLT applies the LT predicate on the "api_request" field.
func APIRequestLT(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldLT(FieldAPIRequest, v))
}

// APIRequestLTE applies the LTE predicate on the "api_request" field.
func APIRequestLTE(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldLTE(FieldAPIRequest, v))
}

// APIRequestContains applies the Contains predicate on the "api_request" field.
func APIRequestContains(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldContains(FieldAPIRequest, v))
}

// APIRequestHasPrefix applies the HasPrefix predicate on the "api_request" field.
func APIRequestHasPrefix(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldHasPrefix(FieldAPIRequest, v))
}

// APIRequestHasSuffix applies the HasSuffix predicate on the "api_request" field.
func APIRequestHasSuffix(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldHasSuffix(FieldAPIRequest, v))
}

// APIRequestEqualFold applies the EqualFold predicate on the "api_request" field.
func APIRequestEqualFold(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldEqualFold(FieldAPIRequest, v))
}

// APIRequestContainsFold applies the ContainsFold predicate on the "api_request" field.
func APIRequestContainsFold(v string) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.FieldContainsFold(FieldAPIRequest, v))
}

// HasCarrierService applies the HasEdge predicate on the "carrier_service" edge.
func HasCarrierService() predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CarrierServiceTable, CarrierServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierServiceWith applies the HasEdge predicate on the "carrier_service" edge with a given conditions (other predicates).
func HasCarrierServiceWith(preds ...predicate.CarrierService) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(func(s *sql.Selector) {
		step := newCarrierServiceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrierAdditionalServiceBring applies the HasEdge predicate on the "carrier_additional_service_bring" edge.
func HasCarrierAdditionalServiceBring() predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CarrierAdditionalServiceBringTable, CarrierAdditionalServiceBringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierAdditionalServiceBringWith applies the HasEdge predicate on the "carrier_additional_service_bring" edge with a given conditions (other predicates).
func HasCarrierAdditionalServiceBringWith(preds ...predicate.CarrierAdditionalServiceBring) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(func(s *sql.Selector) {
		step := newCarrierAdditionalServiceBringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierServiceBring) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierServiceBring) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierServiceBring) predicate.CarrierServiceBring {
	return predicate.CarrierServiceBring(sql.NotPredicates(p))
}
