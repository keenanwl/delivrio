// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectOptionPlatformDelete is the builder for deleting a ConnectOptionPlatform entity.
type ConnectOptionPlatformDelete struct {
	config
	hooks    []Hook
	mutation *ConnectOptionPlatformMutation
}

// Where appends a list predicates to the ConnectOptionPlatformDelete builder.
func (copd *ConnectOptionPlatformDelete) Where(ps ...predicate.ConnectOptionPlatform) *ConnectOptionPlatformDelete {
	copd.mutation.Where(ps...)
	return copd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (copd *ConnectOptionPlatformDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, copd.sqlExec, copd.mutation, copd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (copd *ConnectOptionPlatformDelete) ExecX(ctx context.Context) int {
	n, err := copd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (copd *ConnectOptionPlatformDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(connectoptionplatform.Table, sqlgraph.NewFieldSpec(connectoptionplatform.FieldID, field.TypeString))
	if ps := copd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, copd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	copd.mutation.done = true
	return affected, err
}

// ConnectOptionPlatformDeleteOne is the builder for deleting a single ConnectOptionPlatform entity.
type ConnectOptionPlatformDeleteOne struct {
	copd *ConnectOptionPlatformDelete
}

// Where appends a list predicates to the ConnectOptionPlatformDelete builder.
func (copdo *ConnectOptionPlatformDeleteOne) Where(ps ...predicate.ConnectOptionPlatform) *ConnectOptionPlatformDeleteOne {
	copdo.copd.mutation.Where(ps...)
	return copdo
}

// Exec executes the deletion query.
func (copdo *ConnectOptionPlatformDeleteOne) Exec(ctx context.Context) error {
	n, err := copdo.copd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{connectoptionplatform.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (copdo *ConnectOptionPlatformDeleteOne) ExecX(ctx context.Context) {
	if err := copdo.Exec(ctx); err != nil {
		panic(err)
	}
}
