// Code generated by ent, DO NOT EDIT.

package shipment

import (
	"time"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTenantID, v))
}

// ShipmentPublicID applies equality check predicate on the "shipment_public_id" field. It's identical to ShipmentPublicIDEQ.
func ShipmentPublicID(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldShipmentPublicID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCreatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.Shipment {
	vc := string(v)
	return predicate.Shipment(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.Shipment {
	vc := string(v)
	return predicate.Shipment(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.Shipment {
	vc := string(v)
	return predicate.Shipment(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.Shipment {
	vc := string(v)
	return predicate.Shipment(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.Shipment {
	vc := string(v)
	return predicate.Shipment(sql.FieldContainsFold(FieldTenantID, vc))
}

// ShipmentPublicIDEQ applies the EQ predicate on the "shipment_public_id" field.
func ShipmentPublicIDEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldShipmentPublicID, v))
}

// ShipmentPublicIDNEQ applies the NEQ predicate on the "shipment_public_id" field.
func ShipmentPublicIDNEQ(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldShipmentPublicID, v))
}

// ShipmentPublicIDIn applies the In predicate on the "shipment_public_id" field.
func ShipmentPublicIDIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldShipmentPublicID, vs...))
}

// ShipmentPublicIDNotIn applies the NotIn predicate on the "shipment_public_id" field.
func ShipmentPublicIDNotIn(vs ...string) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldShipmentPublicID, vs...))
}

// ShipmentPublicIDGT applies the GT predicate on the "shipment_public_id" field.
func ShipmentPublicIDGT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldShipmentPublicID, v))
}

// ShipmentPublicIDGTE applies the GTE predicate on the "shipment_public_id" field.
func ShipmentPublicIDGTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldShipmentPublicID, v))
}

// ShipmentPublicIDLT applies the LT predicate on the "shipment_public_id" field.
func ShipmentPublicIDLT(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldShipmentPublicID, v))
}

// ShipmentPublicIDLTE applies the LTE predicate on the "shipment_public_id" field.
func ShipmentPublicIDLTE(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldShipmentPublicID, v))
}

// ShipmentPublicIDContains applies the Contains predicate on the "shipment_public_id" field.
func ShipmentPublicIDContains(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContains(FieldShipmentPublicID, v))
}

// ShipmentPublicIDHasPrefix applies the HasPrefix predicate on the "shipment_public_id" field.
func ShipmentPublicIDHasPrefix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasPrefix(FieldShipmentPublicID, v))
}

// ShipmentPublicIDHasSuffix applies the HasSuffix predicate on the "shipment_public_id" field.
func ShipmentPublicIDHasSuffix(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldHasSuffix(FieldShipmentPublicID, v))
}

// ShipmentPublicIDEqualFold applies the EqualFold predicate on the "shipment_public_id" field.
func ShipmentPublicIDEqualFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldEqualFold(FieldShipmentPublicID, v))
}

// ShipmentPublicIDContainsFold applies the ContainsFold predicate on the "shipment_public_id" field.
func ShipmentPublicIDContainsFold(v string) predicate.Shipment {
	return predicate.Shipment(sql.FieldContainsFold(FieldShipmentPublicID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Shipment {
	return predicate.Shipment(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Shipment {
	return predicate.Shipment(sql.FieldNotIn(FieldStatus, vs...))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrier applies the HasEdge predicate on the "carrier" edge.
func HasCarrier() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CarrierTable, CarrierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierWith applies the HasEdge predicate on the "carrier" edge with a given conditions (other predicates).
func HasCarrierWith(preds ...predicate.Carrier) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newCarrierStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentHistory applies the HasEdge predicate on the "shipment_history" edge.
func HasShipmentHistory() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShipmentHistoryTable, ShipmentHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentHistoryWith applies the HasEdge predicate on the "shipment_history" edge with a given conditions (other predicates).
func HasShipmentHistoryWith(preds ...predicate.ShipmentHistory) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentBring applies the HasEdge predicate on the "shipment_bring" edge.
func HasShipmentBring() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentBringTable, ShipmentBringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentBringWith applies the HasEdge predicate on the "shipment_bring" edge with a given conditions (other predicates).
func HasShipmentBringWith(preds ...predicate.ShipmentBring) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentBringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentDAO applies the HasEdge predicate on the "shipment_dao" edge.
func HasShipmentDAO() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentDAOTable, ShipmentDAOColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentDAOWith applies the HasEdge predicate on the "shipment_dao" edge with a given conditions (other predicates).
func HasShipmentDAOWith(preds ...predicate.ShipmentDAO) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentDAOStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentDF applies the HasEdge predicate on the "shipment_df" edge.
func HasShipmentDF() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentDFTable, ShipmentDFColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentDFWith applies the HasEdge predicate on the "shipment_df" edge with a given conditions (other predicates).
func HasShipmentDFWith(preds ...predicate.ShipmentDF) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentDFStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentDSV applies the HasEdge predicate on the "shipment_dsv" edge.
func HasShipmentDSV() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentDSVTable, ShipmentDSVColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentDSVWith applies the HasEdge predicate on the "shipment_dsv" edge with a given conditions (other predicates).
func HasShipmentDSVWith(preds ...predicate.ShipmentDSV) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentDSVStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentEasyPost applies the HasEdge predicate on the "shipment_easy_post" edge.
func HasShipmentEasyPost() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentEasyPostTable, ShipmentEasyPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentEasyPostWith applies the HasEdge predicate on the "shipment_easy_post" edge with a given conditions (other predicates).
func HasShipmentEasyPostWith(preds ...predicate.ShipmentEasyPost) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentEasyPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentPostNord applies the HasEdge predicate on the "shipment_post_nord" edge.
func HasShipmentPostNord() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentPostNordTable, ShipmentPostNordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentPostNordWith applies the HasEdge predicate on the "shipment_post_nord" edge with a given conditions (other predicates).
func HasShipmentPostNordWith(preds ...predicate.ShipmentPostNord) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentPostNordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentGLS applies the HasEdge predicate on the "shipment_gls" edge.
func HasShipmentGLS() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentGLSTable, ShipmentGLSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentGLSWith applies the HasEdge predicate on the "shipment_gls" edge with a given conditions (other predicates).
func HasShipmentGLSWith(preds ...predicate.ShipmentGLS) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentGLSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentUSPS applies the HasEdge predicate on the "shipment_usps" edge.
func HasShipmentUSPS() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ShipmentUSPSTable, ShipmentUSPSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentUSPSWith applies the HasEdge predicate on the "shipment_usps" edge with a given conditions (other predicates).
func HasShipmentUSPSWith(preds ...predicate.ShipmentUSPS) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentUSPSStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasConsolidation applies the HasEdge predicate on the "consolidation" edge.
func HasConsolidation() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ConsolidationTable, ConsolidationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConsolidationWith applies the HasEdge predicate on the "consolidation" edge with a given conditions (other predicates).
func HasConsolidationWith(preds ...predicate.Consolidation) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newConsolidationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOldConsolidation applies the HasEdge predicate on the "old_consolidation" edge.
func HasOldConsolidation() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OldConsolidationTable, OldConsolidationPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOldConsolidationWith applies the HasEdge predicate on the "old_consolidation" edge with a given conditions (other predicates).
func HasOldConsolidationWith(preds ...predicate.Consolidation) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newOldConsolidationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentParcel applies the HasEdge predicate on the "shipment_parcel" edge.
func HasShipmentParcel() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShipmentParcelTable, ShipmentParcelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentParcelWith applies the HasEdge predicate on the "shipment_parcel" edge with a given conditions (other predicates).
func HasShipmentParcelWith(preds ...predicate.ShipmentParcel) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentParcelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShipmentPallet applies the HasEdge predicate on the "shipment_pallet" edge.
func HasShipmentPallet() predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShipmentPalletTable, ShipmentPalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShipmentPalletWith applies the HasEdge predicate on the "shipment_pallet" edge with a given conditions (other predicates).
func HasShipmentPalletWith(preds ...predicate.ShipmentPallet) predicate.Shipment {
	return predicate.Shipment(func(s *sql.Selector) {
		step := newShipmentPalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Shipment) predicate.Shipment {
	return predicate.Shipment(sql.NotPredicates(p))
}
