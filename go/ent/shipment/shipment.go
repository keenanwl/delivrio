// Code generated by ent, DO NOT EDIT.

package shipment

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the shipment type in the database.
	Label = "shipment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldShipmentPublicID holds the string denoting the shipment_public_id field in the database.
	FieldShipmentPublicID = "shipment_public_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrier holds the string denoting the carrier edge name in mutations.
	EdgeCarrier = "carrier"
	// EdgeShipmentHistory holds the string denoting the shipment_history edge name in mutations.
	EdgeShipmentHistory = "shipment_history"
	// EdgeShipmentBring holds the string denoting the shipment_bring edge name in mutations.
	EdgeShipmentBring = "shipment_bring"
	// EdgeShipmentDAO holds the string denoting the shipment_dao edge name in mutations.
	EdgeShipmentDAO = "shipment_dao"
	// EdgeShipmentDF holds the string denoting the shipment_df edge name in mutations.
	EdgeShipmentDF = "shipment_df"
	// EdgeShipmentDSV holds the string denoting the shipment_dsv edge name in mutations.
	EdgeShipmentDSV = "shipment_dsv"
	// EdgeShipmentEasyPost holds the string denoting the shipment_easy_post edge name in mutations.
	EdgeShipmentEasyPost = "shipment_easy_post"
	// EdgeShipmentPostNord holds the string denoting the shipment_post_nord edge name in mutations.
	EdgeShipmentPostNord = "shipment_post_nord"
	// EdgeShipmentGLS holds the string denoting the shipment_gls edge name in mutations.
	EdgeShipmentGLS = "shipment_gls"
	// EdgeShipmentUSPS holds the string denoting the shipment_usps edge name in mutations.
	EdgeShipmentUSPS = "shipment_usps"
	// EdgeConsolidation holds the string denoting the consolidation edge name in mutations.
	EdgeConsolidation = "consolidation"
	// EdgeOldConsolidation holds the string denoting the old_consolidation edge name in mutations.
	EdgeOldConsolidation = "old_consolidation"
	// EdgeShipmentParcel holds the string denoting the shipment_parcel edge name in mutations.
	EdgeShipmentParcel = "shipment_parcel"
	// EdgeShipmentPallet holds the string denoting the shipment_pallet edge name in mutations.
	EdgeShipmentPallet = "shipment_pallet"
	// Table holds the table name of the shipment in the database.
	Table = "shipments"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "shipments"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierTable is the table that holds the carrier relation/edge.
	CarrierTable = "shipments"
	// CarrierInverseTable is the table name for the Carrier entity.
	// It exists in this package in order to avoid circular dependency with the "carrier" package.
	CarrierInverseTable = "carriers"
	// CarrierColumn is the table column denoting the carrier relation/edge.
	CarrierColumn = "shipment_carrier"
	// ShipmentHistoryTable is the table that holds the shipment_history relation/edge.
	ShipmentHistoryTable = "shipment_histories"
	// ShipmentHistoryInverseTable is the table name for the ShipmentHistory entity.
	// It exists in this package in order to avoid circular dependency with the "shipmenthistory" package.
	ShipmentHistoryInverseTable = "shipment_histories"
	// ShipmentHistoryColumn is the table column denoting the shipment_history relation/edge.
	ShipmentHistoryColumn = "shipment_shipment_history"
	// ShipmentBringTable is the table that holds the shipment_bring relation/edge.
	ShipmentBringTable = "shipment_brings"
	// ShipmentBringInverseTable is the table name for the ShipmentBring entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentbring" package.
	ShipmentBringInverseTable = "shipment_brings"
	// ShipmentBringColumn is the table column denoting the shipment_bring relation/edge.
	ShipmentBringColumn = "shipment_shipment_bring"
	// ShipmentDAOTable is the table that holds the shipment_dao relation/edge.
	ShipmentDAOTable = "shipment_da_os"
	// ShipmentDAOInverseTable is the table name for the ShipmentDAO entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentdao" package.
	ShipmentDAOInverseTable = "shipment_da_os"
	// ShipmentDAOColumn is the table column denoting the shipment_dao relation/edge.
	ShipmentDAOColumn = "shipment_shipment_dao"
	// ShipmentDFTable is the table that holds the shipment_df relation/edge.
	ShipmentDFTable = "shipment_dfs"
	// ShipmentDFInverseTable is the table name for the ShipmentDF entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentdf" package.
	ShipmentDFInverseTable = "shipment_dfs"
	// ShipmentDFColumn is the table column denoting the shipment_df relation/edge.
	ShipmentDFColumn = "shipment_shipment_df"
	// ShipmentDSVTable is the table that holds the shipment_dsv relation/edge.
	ShipmentDSVTable = "shipment_ds_vs"
	// ShipmentDSVInverseTable is the table name for the ShipmentDSV entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentdsv" package.
	ShipmentDSVInverseTable = "shipment_ds_vs"
	// ShipmentDSVColumn is the table column denoting the shipment_dsv relation/edge.
	ShipmentDSVColumn = "shipment_shipment_dsv"
	// ShipmentEasyPostTable is the table that holds the shipment_easy_post relation/edge.
	ShipmentEasyPostTable = "shipment_easy_posts"
	// ShipmentEasyPostInverseTable is the table name for the ShipmentEasyPost entity.
	// It exists in this package in order to avoid circular dependency with the "shipmenteasypost" package.
	ShipmentEasyPostInverseTable = "shipment_easy_posts"
	// ShipmentEasyPostColumn is the table column denoting the shipment_easy_post relation/edge.
	ShipmentEasyPostColumn = "shipment_shipment_easy_post"
	// ShipmentPostNordTable is the table that holds the shipment_post_nord relation/edge.
	ShipmentPostNordTable = "shipment_post_nords"
	// ShipmentPostNordInverseTable is the table name for the ShipmentPostNord entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentpostnord" package.
	ShipmentPostNordInverseTable = "shipment_post_nords"
	// ShipmentPostNordColumn is the table column denoting the shipment_post_nord relation/edge.
	ShipmentPostNordColumn = "shipment_shipment_post_nord"
	// ShipmentGLSTable is the table that holds the shipment_gls relation/edge.
	ShipmentGLSTable = "shipment_gl_ss"
	// ShipmentGLSInverseTable is the table name for the ShipmentGLS entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentgls" package.
	ShipmentGLSInverseTable = "shipment_gl_ss"
	// ShipmentGLSColumn is the table column denoting the shipment_gls relation/edge.
	ShipmentGLSColumn = "shipment_shipment_gls"
	// ShipmentUSPSTable is the table that holds the shipment_usps relation/edge.
	ShipmentUSPSTable = "shipment_usp_ss"
	// ShipmentUSPSInverseTable is the table name for the ShipmentUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentusps" package.
	ShipmentUSPSInverseTable = "shipment_usp_ss"
	// ShipmentUSPSColumn is the table column denoting the shipment_usps relation/edge.
	ShipmentUSPSColumn = "shipment_shipment_usps"
	// ConsolidationTable is the table that holds the consolidation relation/edge.
	ConsolidationTable = "consolidations"
	// ConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	ConsolidationInverseTable = "consolidations"
	// ConsolidationColumn is the table column denoting the consolidation relation/edge.
	ConsolidationColumn = "shipment_consolidation"
	// OldConsolidationTable is the table that holds the old_consolidation relation/edge. The primary key declared below.
	OldConsolidationTable = "shipment_old_consolidation"
	// OldConsolidationInverseTable is the table name for the Consolidation entity.
	// It exists in this package in order to avoid circular dependency with the "consolidation" package.
	OldConsolidationInverseTable = "consolidations"
	// ShipmentParcelTable is the table that holds the shipment_parcel relation/edge.
	ShipmentParcelTable = "shipment_parcels"
	// ShipmentParcelInverseTable is the table name for the ShipmentParcel entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentparcel" package.
	ShipmentParcelInverseTable = "shipment_parcels"
	// ShipmentParcelColumn is the table column denoting the shipment_parcel relation/edge.
	ShipmentParcelColumn = "shipment_shipment_parcel"
	// ShipmentPalletTable is the table that holds the shipment_pallet relation/edge.
	ShipmentPalletTable = "shipment_pallets"
	// ShipmentPalletInverseTable is the table name for the ShipmentPallet entity.
	// It exists in this package in order to avoid circular dependency with the "shipmentpallet" package.
	ShipmentPalletInverseTable = "shipment_pallets"
	// ShipmentPalletColumn is the table column denoting the shipment_pallet relation/edge.
	ShipmentPalletColumn = "shipment_shipment_pallet"
)

// Columns holds all SQL columns for shipment fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldShipmentPublicID,
	FieldCreatedAt,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shipments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"shipment_carrier",
}

var (
	// OldConsolidationPrimaryKey and OldConsolidationColumn2 are the table columns denoting the
	// primary key for the old_consolidation relation (M2M).
	OldConsolidationPrimaryKey = []string{"shipment_id", "consolidation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending              Status = "Pending"
	StatusPrebooked            Status = "Prebooked"
	StatusBooked               Status = "Booked"
	StatusPartially_dispatched Status = "Partially_dispatched"
	StatusDispatched           Status = "Dispatched"
	StatusDeleted              Status = "Deleted"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusPrebooked, StatusBooked, StatusPartially_dispatched, StatusDispatched, StatusDeleted:
		return nil
	default:
		return fmt.Errorf("shipment: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Shipment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByShipmentPublicID orders the results by the shipment_public_id field.
func ByShipmentPublicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShipmentPublicID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierField orders the results by carrier field.
func ByCarrierField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentHistoryCount orders the results by shipment_history count.
func ByShipmentHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentHistoryStep(), opts...)
	}
}

// ByShipmentHistory orders the results by shipment_history terms.
func ByShipmentHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentBringField orders the results by shipment_bring field.
func ByShipmentBringField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentBringStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentDAOField orders the results by shipment_dao field.
func ByShipmentDAOField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentDAOStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentDFField orders the results by shipment_df field.
func ByShipmentDFField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentDFStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentDSVField orders the results by shipment_dsv field.
func ByShipmentDSVField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentDSVStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentEasyPostField orders the results by shipment_easy_post field.
func ByShipmentEasyPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentEasyPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentPostNordField orders the results by shipment_post_nord field.
func ByShipmentPostNordField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentPostNordStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentGLSField orders the results by shipment_gls field.
func ByShipmentGLSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentGLSStep(), sql.OrderByField(field, opts...))
	}
}

// ByShipmentUSPSField orders the results by shipment_usps field.
func ByShipmentUSPSField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentUSPSStep(), sql.OrderByField(field, opts...))
	}
}

// ByConsolidationField orders the results by consolidation field.
func ByConsolidationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConsolidationStep(), sql.OrderByField(field, opts...))
	}
}

// ByOldConsolidationCount orders the results by old_consolidation count.
func ByOldConsolidationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOldConsolidationStep(), opts...)
	}
}

// ByOldConsolidation orders the results by old_consolidation terms.
func ByOldConsolidation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOldConsolidationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentParcelCount orders the results by shipment_parcel count.
func ByShipmentParcelCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentParcelStep(), opts...)
	}
}

// ByShipmentParcel orders the results by shipment_parcel terms.
func ByShipmentParcel(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentParcelStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShipmentPalletCount orders the results by shipment_pallet count.
func ByShipmentPalletCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShipmentPalletStep(), opts...)
	}
}

// ByShipmentPallet orders the results by shipment_pallet terms.
func ByShipmentPallet(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShipmentPalletStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CarrierTable, CarrierColumn),
	)
}
func newShipmentHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentHistoryTable, ShipmentHistoryColumn),
	)
}
func newShipmentBringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentBringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentBringTable, ShipmentBringColumn),
	)
}
func newShipmentDAOStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentDAOInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentDAOTable, ShipmentDAOColumn),
	)
}
func newShipmentDFStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentDFInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentDFTable, ShipmentDFColumn),
	)
}
func newShipmentDSVStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentDSVInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentDSVTable, ShipmentDSVColumn),
	)
}
func newShipmentEasyPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentEasyPostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentEasyPostTable, ShipmentEasyPostColumn),
	)
}
func newShipmentPostNordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentPostNordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentPostNordTable, ShipmentPostNordColumn),
	)
}
func newShipmentGLSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentGLSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentGLSTable, ShipmentGLSColumn),
	)
}
func newShipmentUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ShipmentUSPSTable, ShipmentUSPSColumn),
	)
}
func newConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ConsolidationTable, ConsolidationColumn),
	)
}
func newOldConsolidationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OldConsolidationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OldConsolidationTable, OldConsolidationPrimaryKey...),
	)
}
func newShipmentParcelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentParcelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentParcelTable, ShipmentParcelColumn),
	)
}
func newShipmentPalletStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShipmentPalletInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShipmentPalletTable, ShipmentPalletColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
