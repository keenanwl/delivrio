// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Consolidation is the model entity for the Consolidation schema.
type Consolidation struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// PublicID holds the value of the "public_id" field.
	PublicID string `json:"public_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status consolidation.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConsolidationQuery when eager-loading is set.
	Edges                         ConsolidationEdges `json:"edges"`
	consolidation_delivery_option *pulid.ID
	shipment_consolidation        *pulid.ID
	selectValues                  sql.SelectValues
}

// ConsolidationEdges holds the relations/edges for other nodes in the graph.
type ConsolidationEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Pallets holds the value of the pallets edge.
	Pallets []*Pallet `json:"pallets,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// Recipient holds the value of the recipient edge.
	Recipient *Address `json:"recipient,omitempty"`
	// Sender holds the value of the sender edge.
	Sender *Address `json:"sender,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment *Shipment `json:"shipment,omitempty"`
	// CancelledShipments holds the value of the cancelled_shipments edge.
	CancelledShipments []*Shipment `json:"cancelled_shipments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedPallets            map[string][]*Pallet
	namedOrders             map[string][]*Order
	namedCancelledShipments map[string][]*Shipment
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConsolidationEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PalletsOrErr returns the Pallets value or an error if the edge
// was not loaded in eager-loading.
func (e ConsolidationEdges) PalletsOrErr() ([]*Pallet, error) {
	if e.loadedTypes[1] {
		return e.Pallets, nil
	}
	return nil, &NotLoadedError{edge: "pallets"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e ConsolidationEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[2] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConsolidationEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// RecipientOrErr returns the Recipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConsolidationEdges) RecipientOrErr() (*Address, error) {
	if e.Recipient != nil {
		return e.Recipient, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "recipient"}
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConsolidationEdges) SenderOrErr() (*Address, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConsolidationEdges) ShipmentOrErr() (*Shipment, error) {
	if e.Shipment != nil {
		return e.Shipment, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: shipment.Label}
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// CancelledShipmentsOrErr returns the CancelledShipments value or an error if the edge
// was not loaded in eager-loading.
func (e ConsolidationEdges) CancelledShipmentsOrErr() ([]*Shipment, error) {
	if e.loadedTypes[7] {
		return e.CancelledShipments, nil
	}
	return nil, &NotLoadedError{edge: "cancelled_shipments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Consolidation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case consolidation.FieldID, consolidation.FieldTenantID:
			values[i] = new(pulid.ID)
		case consolidation.FieldPublicID, consolidation.FieldDescription, consolidation.FieldStatus:
			values[i] = new(sql.NullString)
		case consolidation.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case consolidation.ForeignKeys[0]: // consolidation_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case consolidation.ForeignKeys[1]: // shipment_consolidation
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Consolidation fields.
func (c *Consolidation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case consolidation.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case consolidation.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				c.TenantID = *value
			}
		case consolidation.FieldPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_id", values[i])
			} else if value.Valid {
				c.PublicID = value.String
			}
		case consolidation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case consolidation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = consolidation.Status(value.String)
			}
		case consolidation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case consolidation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field consolidation_delivery_option", values[i])
			} else if value.Valid {
				c.consolidation_delivery_option = new(pulid.ID)
				*c.consolidation_delivery_option = *value.S.(*pulid.ID)
			}
		case consolidation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field shipment_consolidation", values[i])
			} else if value.Valid {
				c.shipment_consolidation = new(pulid.ID)
				*c.shipment_consolidation = *value.S.(*pulid.ID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Consolidation.
// This includes values selected through modifiers, order, etc.
func (c *Consolidation) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Consolidation entity.
func (c *Consolidation) QueryTenant() *TenantQuery {
	return NewConsolidationClient(c.config).QueryTenant(c)
}

// QueryPallets queries the "pallets" edge of the Consolidation entity.
func (c *Consolidation) QueryPallets() *PalletQuery {
	return NewConsolidationClient(c.config).QueryPallets(c)
}

// QueryOrders queries the "orders" edge of the Consolidation entity.
func (c *Consolidation) QueryOrders() *OrderQuery {
	return NewConsolidationClient(c.config).QueryOrders(c)
}

// QueryDeliveryOption queries the "delivery_option" edge of the Consolidation entity.
func (c *Consolidation) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewConsolidationClient(c.config).QueryDeliveryOption(c)
}

// QueryRecipient queries the "recipient" edge of the Consolidation entity.
func (c *Consolidation) QueryRecipient() *AddressQuery {
	return NewConsolidationClient(c.config).QueryRecipient(c)
}

// QuerySender queries the "sender" edge of the Consolidation entity.
func (c *Consolidation) QuerySender() *AddressQuery {
	return NewConsolidationClient(c.config).QuerySender(c)
}

// QueryShipment queries the "shipment" edge of the Consolidation entity.
func (c *Consolidation) QueryShipment() *ShipmentQuery {
	return NewConsolidationClient(c.config).QueryShipment(c)
}

// QueryCancelledShipments queries the "cancelled_shipments" edge of the Consolidation entity.
func (c *Consolidation) QueryCancelledShipments() *ShipmentQuery {
	return NewConsolidationClient(c.config).QueryCancelledShipments(c)
}

// Update returns a builder for updating this Consolidation.
// Note that you need to call Consolidation.Unwrap() before calling this method if this Consolidation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Consolidation) Update() *ConsolidationUpdateOne {
	return NewConsolidationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Consolidation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Consolidation) Unwrap() *Consolidation {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Consolidation is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Consolidation) String() string {
	var builder strings.Builder
	builder.WriteString("Consolidation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantID))
	builder.WriteString(", ")
	builder.WriteString("public_id=")
	builder.WriteString(c.PublicID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPallets returns the Pallets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Consolidation) NamedPallets(name string) ([]*Pallet, error) {
	if c.Edges.namedPallets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPallets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Consolidation) appendNamedPallets(name string, edges ...*Pallet) {
	if c.Edges.namedPallets == nil {
		c.Edges.namedPallets = make(map[string][]*Pallet)
	}
	if len(edges) == 0 {
		c.Edges.namedPallets[name] = []*Pallet{}
	} else {
		c.Edges.namedPallets[name] = append(c.Edges.namedPallets[name], edges...)
	}
}

// NamedOrders returns the Orders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Consolidation) NamedOrders(name string) ([]*Order, error) {
	if c.Edges.namedOrders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedOrders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Consolidation) appendNamedOrders(name string, edges ...*Order) {
	if c.Edges.namedOrders == nil {
		c.Edges.namedOrders = make(map[string][]*Order)
	}
	if len(edges) == 0 {
		c.Edges.namedOrders[name] = []*Order{}
	} else {
		c.Edges.namedOrders[name] = append(c.Edges.namedOrders[name], edges...)
	}
}

// NamedCancelledShipments returns the CancelledShipments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Consolidation) NamedCancelledShipments(name string) ([]*Shipment, error) {
	if c.Edges.namedCancelledShipments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCancelledShipments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Consolidation) appendNamedCancelledShipments(name string, edges ...*Shipment) {
	if c.Edges.namedCancelledShipments == nil {
		c.Edges.namedCancelledShipments = make(map[string][]*Shipment)
	}
	if len(edges) == 0 {
		c.Edges.namedCancelledShipments[name] = []*Shipment{}
	} else {
		c.Edges.namedCancelledShipments[name] = append(c.Edges.namedCancelledShipments[name], edges...)
	}
}

// Consolidations is a parsable slice of Consolidation.
type Consolidations []*Consolidation
