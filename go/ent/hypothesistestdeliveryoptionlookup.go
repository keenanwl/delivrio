// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HypothesisTestDeliveryOptionLookup is the model entity for the HypothesisTestDeliveryOptionLookup schema.
type HypothesisTestDeliveryOptionLookup struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HypothesisTestDeliveryOptionLookupQuery when eager-loading is set.
	Edges                                                                          HypothesisTestDeliveryOptionLookupEdges `json:"edges"`
	hypothesis_test_delivery_option_lookup_delivery_option                         *pulid.ID
	hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup *pulid.ID
	selectValues                                                                   sql.SelectValues
}

// HypothesisTestDeliveryOptionLookupEdges holds the relations/edges for other nodes in the graph.
type HypothesisTestDeliveryOptionLookupEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// HypothesisTestDeliveryOptionRequest holds the value of the hypothesis_test_delivery_option_request edge.
	HypothesisTestDeliveryOptionRequest *HypothesisTestDeliveryOptionRequest `json:"hypothesis_test_delivery_option_request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionLookupEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionLookupEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// HypothesisTestDeliveryOptionRequestOrErr returns the HypothesisTestDeliveryOptionRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionLookupEdges) HypothesisTestDeliveryOptionRequestOrErr() (*HypothesisTestDeliveryOptionRequest, error) {
	if e.HypothesisTestDeliveryOptionRequest != nil {
		return e.HypothesisTestDeliveryOptionRequest, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: hypothesistestdeliveryoptionrequest.Label}
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option_request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HypothesisTestDeliveryOptionLookup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hypothesistestdeliveryoptionlookup.FieldID, hypothesistestdeliveryoptionlookup.FieldTenantID:
			values[i] = new(pulid.ID)
		case hypothesistestdeliveryoptionlookup.ForeignKeys[0]: // hypothesis_test_delivery_option_lookup_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case hypothesistestdeliveryoptionlookup.ForeignKeys[1]: // hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HypothesisTestDeliveryOptionLookup fields.
func (htdol *HypothesisTestDeliveryOptionLookup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hypothesistestdeliveryoptionlookup.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				htdol.ID = *value
			}
		case hypothesistestdeliveryoptionlookup.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				htdol.TenantID = *value
			}
		case hypothesistestdeliveryoptionlookup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field hypothesis_test_delivery_option_lookup_delivery_option", values[i])
			} else if value.Valid {
				htdol.hypothesis_test_delivery_option_lookup_delivery_option = new(pulid.ID)
				*htdol.hypothesis_test_delivery_option_lookup_delivery_option = *value.S.(*pulid.ID)
			}
		case hypothesistestdeliveryoptionlookup.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup", values[i])
			} else if value.Valid {
				htdol.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup = new(pulid.ID)
				*htdol.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option_lookup = *value.S.(*pulid.ID)
			}
		default:
			htdol.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HypothesisTestDeliveryOptionLookup.
// This includes values selected through modifiers, order, etc.
func (htdol *HypothesisTestDeliveryOptionLookup) Value(name string) (ent.Value, error) {
	return htdol.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the HypothesisTestDeliveryOptionLookup entity.
func (htdol *HypothesisTestDeliveryOptionLookup) QueryTenant() *TenantQuery {
	return NewHypothesisTestDeliveryOptionLookupClient(htdol.config).QueryTenant(htdol)
}

// QueryDeliveryOption queries the "delivery_option" edge of the HypothesisTestDeliveryOptionLookup entity.
func (htdol *HypothesisTestDeliveryOptionLookup) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewHypothesisTestDeliveryOptionLookupClient(htdol.config).QueryDeliveryOption(htdol)
}

// QueryHypothesisTestDeliveryOptionRequest queries the "hypothesis_test_delivery_option_request" edge of the HypothesisTestDeliveryOptionLookup entity.
func (htdol *HypothesisTestDeliveryOptionLookup) QueryHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionRequestQuery {
	return NewHypothesisTestDeliveryOptionLookupClient(htdol.config).QueryHypothesisTestDeliveryOptionRequest(htdol)
}

// Update returns a builder for updating this HypothesisTestDeliveryOptionLookup.
// Note that you need to call HypothesisTestDeliveryOptionLookup.Unwrap() before calling this method if this HypothesisTestDeliveryOptionLookup
// was returned from a transaction, and the transaction was committed or rolled back.
func (htdol *HypothesisTestDeliveryOptionLookup) Update() *HypothesisTestDeliveryOptionLookupUpdateOne {
	return NewHypothesisTestDeliveryOptionLookupClient(htdol.config).UpdateOne(htdol)
}

// Unwrap unwraps the HypothesisTestDeliveryOptionLookup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (htdol *HypothesisTestDeliveryOptionLookup) Unwrap() *HypothesisTestDeliveryOptionLookup {
	_tx, ok := htdol.config.driver.(*txDriver)
	if !ok {
		panic("ent: HypothesisTestDeliveryOptionLookup is not a transactional entity")
	}
	htdol.config.driver = _tx.drv
	return htdol
}

// String implements the fmt.Stringer.
func (htdol *HypothesisTestDeliveryOptionLookup) String() string {
	var builder strings.Builder
	builder.WriteString("HypothesisTestDeliveryOptionLookup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", htdol.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", htdol.TenantID))
	builder.WriteByte(')')
	return builder.String()
}

// HypothesisTestDeliveryOptionLookups is a parsable slice of HypothesisTestDeliveryOptionLookup.
type HypothesisTestDeliveryOptionLookups []*HypothesisTestDeliveryOptionLookup
