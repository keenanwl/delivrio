// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkspaceRecentScan is the model entity for the WorkspaceRecentScan schema.
type WorkspaceRecentScan struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkspaceRecentScanQuery when eager-loading is set.
	Edges                                 WorkspaceRecentScanEdges `json:"edges"`
	workspace_recent_scan_shipment_parcel *pulid.ID
	workspace_recent_scan_user            *pulid.ID
	selectValues                          sql.SelectValues
}

// WorkspaceRecentScanEdges holds the relations/edges for other nodes in the graph.
type WorkspaceRecentScanEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ShipmentParcel holds the value of the shipment_parcel edge.
	ShipmentParcel *ShipmentParcel `json:"shipment_parcel,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkspaceRecentScanEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShipmentParcelOrErr returns the ShipmentParcel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkspaceRecentScanEdges) ShipmentParcelOrErr() (*ShipmentParcel, error) {
	if e.ShipmentParcel != nil {
		return e.ShipmentParcel, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: shipmentparcel.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_parcel"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkspaceRecentScanEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkspaceRecentScan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workspacerecentscan.FieldID, workspacerecentscan.FieldTenantID:
			values[i] = new(pulid.ID)
		case workspacerecentscan.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case workspacerecentscan.ForeignKeys[0]: // workspace_recent_scan_shipment_parcel
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case workspacerecentscan.ForeignKeys[1]: // workspace_recent_scan_user
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkspaceRecentScan fields.
func (wrs *WorkspaceRecentScan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workspacerecentscan.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wrs.ID = *value
			}
		case workspacerecentscan.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				wrs.TenantID = *value
			}
		case workspacerecentscan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wrs.CreatedAt = value.Time
			}
		case workspacerecentscan.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_recent_scan_shipment_parcel", values[i])
			} else if value.Valid {
				wrs.workspace_recent_scan_shipment_parcel = new(pulid.ID)
				*wrs.workspace_recent_scan_shipment_parcel = *value.S.(*pulid.ID)
			}
		case workspacerecentscan.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_recent_scan_user", values[i])
			} else if value.Valid {
				wrs.workspace_recent_scan_user = new(pulid.ID)
				*wrs.workspace_recent_scan_user = *value.S.(*pulid.ID)
			}
		default:
			wrs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkspaceRecentScan.
// This includes values selected through modifiers, order, etc.
func (wrs *WorkspaceRecentScan) Value(name string) (ent.Value, error) {
	return wrs.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the WorkspaceRecentScan entity.
func (wrs *WorkspaceRecentScan) QueryTenant() *TenantQuery {
	return NewWorkspaceRecentScanClient(wrs.config).QueryTenant(wrs)
}

// QueryShipmentParcel queries the "shipment_parcel" edge of the WorkspaceRecentScan entity.
func (wrs *WorkspaceRecentScan) QueryShipmentParcel() *ShipmentParcelQuery {
	return NewWorkspaceRecentScanClient(wrs.config).QueryShipmentParcel(wrs)
}

// QueryUser queries the "user" edge of the WorkspaceRecentScan entity.
func (wrs *WorkspaceRecentScan) QueryUser() *UserQuery {
	return NewWorkspaceRecentScanClient(wrs.config).QueryUser(wrs)
}

// Update returns a builder for updating this WorkspaceRecentScan.
// Note that you need to call WorkspaceRecentScan.Unwrap() before calling this method if this WorkspaceRecentScan
// was returned from a transaction, and the transaction was committed or rolled back.
func (wrs *WorkspaceRecentScan) Update() *WorkspaceRecentScanUpdateOne {
	return NewWorkspaceRecentScanClient(wrs.config).UpdateOne(wrs)
}

// Unwrap unwraps the WorkspaceRecentScan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wrs *WorkspaceRecentScan) Unwrap() *WorkspaceRecentScan {
	_tx, ok := wrs.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkspaceRecentScan is not a transactional entity")
	}
	wrs.config.driver = _tx.drv
	return wrs
}

// String implements the fmt.Stringer.
func (wrs *WorkspaceRecentScan) String() string {
	var builder strings.Builder
	builder.WriteString("WorkspaceRecentScan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wrs.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", wrs.TenantID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wrs.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkspaceRecentScans is a parsable slice of WorkspaceRecentScan.
type WorkspaceRecentScans []*WorkspaceRecentScan
