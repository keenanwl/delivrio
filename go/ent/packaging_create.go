// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingCreate is the builder for creating a Packaging entity.
type PackagingCreate struct {
	config
	mutation *PackagingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (pc *PackagingCreate) SetTenantID(pu pulid.ID) *PackagingCreate {
	pc.mutation.SetTenantID(pu)
	return pc
}

// SetArchivedAt sets the "archived_at" field.
func (pc *PackagingCreate) SetArchivedAt(t time.Time) *PackagingCreate {
	pc.mutation.SetArchivedAt(t)
	return pc
}

// SetNillableArchivedAt sets the "archived_at" field if the given value is not nil.
func (pc *PackagingCreate) SetNillableArchivedAt(t *time.Time) *PackagingCreate {
	if t != nil {
		pc.SetArchivedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PackagingCreate) SetName(s string) *PackagingCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetHeightCm sets the "height_cm" field.
func (pc *PackagingCreate) SetHeightCm(i int) *PackagingCreate {
	pc.mutation.SetHeightCm(i)
	return pc
}

// SetWidthCm sets the "width_cm" field.
func (pc *PackagingCreate) SetWidthCm(i int) *PackagingCreate {
	pc.mutation.SetWidthCm(i)
	return pc
}

// SetLengthCm sets the "length_cm" field.
func (pc *PackagingCreate) SetLengthCm(i int) *PackagingCreate {
	pc.mutation.SetLengthCm(i)
	return pc
}

// SetID sets the "id" field.
func (pc *PackagingCreate) SetID(pu pulid.ID) *PackagingCreate {
	pc.mutation.SetID(pu)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PackagingCreate) SetNillableID(pu *pulid.ID) *PackagingCreate {
	if pu != nil {
		pc.SetID(*pu)
	}
	return pc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pc *PackagingCreate) SetTenant(t *Tenant) *PackagingCreate {
	return pc.SetTenantID(t.ID)
}

// AddShipmentParcelIDs adds the "shipment_parcel" edge to the ShipmentParcel entity by IDs.
func (pc *PackagingCreate) AddShipmentParcelIDs(ids ...pulid.ID) *PackagingCreate {
	pc.mutation.AddShipmentParcelIDs(ids...)
	return pc
}

// AddShipmentParcel adds the "shipment_parcel" edges to the ShipmentParcel entity.
func (pc *PackagingCreate) AddShipmentParcel(s ...*ShipmentParcel) *PackagingCreate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddShipmentParcelIDs(ids...)
}

// AddPalletIDs adds the "pallet" edge to the Pallet entity by IDs.
func (pc *PackagingCreate) AddPalletIDs(ids ...pulid.ID) *PackagingCreate {
	pc.mutation.AddPalletIDs(ids...)
	return pc
}

// AddPallet adds the "pallet" edges to the Pallet entity.
func (pc *PackagingCreate) AddPallet(p ...*Pallet) *PackagingCreate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPalletIDs(ids...)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (pc *PackagingCreate) AddColliIDs(ids ...pulid.ID) *PackagingCreate {
	pc.mutation.AddColliIDs(ids...)
	return pc
}

// AddColli adds the "colli" edges to the Colli entity.
func (pc *PackagingCreate) AddColli(c ...*Colli) *PackagingCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (pc *PackagingCreate) AddReturnColliIDs(ids ...pulid.ID) *PackagingCreate {
	pc.mutation.AddReturnColliIDs(ids...)
	return pc
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (pc *PackagingCreate) AddReturnColli(r ...*ReturnColli) *PackagingCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReturnColliIDs(ids...)
}

// SetPackagingDFID sets the "packaging_df" edge to the PackagingDF entity by ID.
func (pc *PackagingCreate) SetPackagingDFID(id pulid.ID) *PackagingCreate {
	pc.mutation.SetPackagingDFID(id)
	return pc
}

// SetNillablePackagingDFID sets the "packaging_df" edge to the PackagingDF entity by ID if the given value is not nil.
func (pc *PackagingCreate) SetNillablePackagingDFID(id *pulid.ID) *PackagingCreate {
	if id != nil {
		pc = pc.SetPackagingDFID(*id)
	}
	return pc
}

// SetPackagingDF sets the "packaging_df" edge to the PackagingDF entity.
func (pc *PackagingCreate) SetPackagingDF(p *PackagingDF) *PackagingCreate {
	return pc.SetPackagingDFID(p.ID)
}

// SetPackagingUSPSID sets the "packaging_usps" edge to the PackagingUSPS entity by ID.
func (pc *PackagingCreate) SetPackagingUSPSID(id pulid.ID) *PackagingCreate {
	pc.mutation.SetPackagingUSPSID(id)
	return pc
}

// SetNillablePackagingUSPSID sets the "packaging_usps" edge to the PackagingUSPS entity by ID if the given value is not nil.
func (pc *PackagingCreate) SetNillablePackagingUSPSID(id *pulid.ID) *PackagingCreate {
	if id != nil {
		pc = pc.SetPackagingUSPSID(*id)
	}
	return pc
}

// SetPackagingUSPS sets the "packaging_usps" edge to the PackagingUSPS entity.
func (pc *PackagingCreate) SetPackagingUSPS(p *PackagingUSPS) *PackagingCreate {
	return pc.SetPackagingUSPSID(p.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (pc *PackagingCreate) SetCarrierBrandID(id pulid.ID) *PackagingCreate {
	pc.mutation.SetCarrierBrandID(id)
	return pc
}

// SetNillableCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID if the given value is not nil.
func (pc *PackagingCreate) SetNillableCarrierBrandID(id *pulid.ID) *PackagingCreate {
	if id != nil {
		pc = pc.SetCarrierBrandID(*id)
	}
	return pc
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (pc *PackagingCreate) SetCarrierBrand(c *CarrierBrand) *PackagingCreate {
	return pc.SetCarrierBrandID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (pc *PackagingCreate) AddDeliveryOptionIDs(ids ...pulid.ID) *PackagingCreate {
	pc.mutation.AddDeliveryOptionIDs(ids...)
	return pc
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (pc *PackagingCreate) AddDeliveryOption(d ...*DeliveryOption) *PackagingCreate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDeliveryOptionIDs(ids...)
}

// Mutation returns the PackagingMutation object of the builder.
func (pc *PackagingCreate) Mutation() *PackagingMutation {
	return pc.mutation
}

// Save creates the Packaging in the database.
func (pc *PackagingCreate) Save(ctx context.Context) (*Packaging, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PackagingCreate) SaveX(ctx context.Context) *Packaging {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PackagingCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PackagingCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PackagingCreate) defaults() error {
	if _, ok := pc.mutation.ID(); !ok {
		if packaging.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized packaging.DefaultID (forgotten import ent/runtime?)")
		}
		v := packaging.DefaultID()
		pc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PackagingCreate) check() error {
	if _, ok := pc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Packaging.tenant_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Packaging.name"`)}
	}
	if _, ok := pc.mutation.HeightCm(); !ok {
		return &ValidationError{Name: "height_cm", err: errors.New(`ent: missing required field "Packaging.height_cm"`)}
	}
	if _, ok := pc.mutation.WidthCm(); !ok {
		return &ValidationError{Name: "width_cm", err: errors.New(`ent: missing required field "Packaging.width_cm"`)}
	}
	if _, ok := pc.mutation.LengthCm(); !ok {
		return &ValidationError{Name: "length_cm", err: errors.New(`ent: missing required field "Packaging.length_cm"`)}
	}
	if len(pc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Packaging.tenant"`)}
	}
	return nil
}

func (pc *PackagingCreate) sqlSave(ctx context.Context) (*Packaging, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PackagingCreate) createSpec() (*Packaging, *sqlgraph.CreateSpec) {
	var (
		_node = &Packaging{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(packaging.Table, sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.ArchivedAt(); ok {
		_spec.SetField(packaging.FieldArchivedAt, field.TypeTime, value)
		_node.ArchivedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(packaging.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.HeightCm(); ok {
		_spec.SetField(packaging.FieldHeightCm, field.TypeInt, value)
		_node.HeightCm = value
	}
	if value, ok := pc.mutation.WidthCm(); ok {
		_spec.SetField(packaging.FieldWidthCm, field.TypeInt, value)
		_node.WidthCm = value
	}
	if value, ok := pc.mutation.LengthCm(); ok {
		_spec.SetField(packaging.FieldLengthCm, field.TypeInt, value)
		_node.LengthCm = value
	}
	if nodes := pc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.TenantTable,
			Columns: []string{packaging.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ShipmentParcelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipmentparcel.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PackagingDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingDFTable,
			Columns: []string{packaging.PackagingDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PackagingUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingUSPSTable,
			Columns: []string{packaging.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.CarrierBrandTable,
			Columns: []string{packaging.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.packaging_carrier_brand = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Packaging.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pc *PackagingCreate) OnConflict(opts ...sql.ConflictOption) *PackagingUpsertOne {
	pc.conflict = opts
	return &PackagingUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Packaging.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PackagingCreate) OnConflictColumns(columns ...string) *PackagingUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PackagingUpsertOne{
		create: pc,
	}
}

type (
	// PackagingUpsertOne is the builder for "upsert"-ing
	//  one Packaging node.
	PackagingUpsertOne struct {
		create *PackagingCreate
	}

	// PackagingUpsert is the "OnConflict" setter.
	PackagingUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *PackagingUpsert) SetTenantID(v pulid.ID) *PackagingUpsert {
	u.Set(packaging.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingUpsert) UpdateTenantID() *PackagingUpsert {
	u.SetExcluded(packaging.FieldTenantID)
	return u
}

// SetArchivedAt sets the "archived_at" field.
func (u *PackagingUpsert) SetArchivedAt(v time.Time) *PackagingUpsert {
	u.Set(packaging.FieldArchivedAt, v)
	return u
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *PackagingUpsert) UpdateArchivedAt() *PackagingUpsert {
	u.SetExcluded(packaging.FieldArchivedAt)
	return u
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *PackagingUpsert) ClearArchivedAt() *PackagingUpsert {
	u.SetNull(packaging.FieldArchivedAt)
	return u
}

// SetName sets the "name" field.
func (u *PackagingUpsert) SetName(v string) *PackagingUpsert {
	u.Set(packaging.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUpsert) UpdateName() *PackagingUpsert {
	u.SetExcluded(packaging.FieldName)
	return u
}

// SetHeightCm sets the "height_cm" field.
func (u *PackagingUpsert) SetHeightCm(v int) *PackagingUpsert {
	u.Set(packaging.FieldHeightCm, v)
	return u
}

// UpdateHeightCm sets the "height_cm" field to the value that was provided on create.
func (u *PackagingUpsert) UpdateHeightCm() *PackagingUpsert {
	u.SetExcluded(packaging.FieldHeightCm)
	return u
}

// AddHeightCm adds v to the "height_cm" field.
func (u *PackagingUpsert) AddHeightCm(v int) *PackagingUpsert {
	u.Add(packaging.FieldHeightCm, v)
	return u
}

// SetWidthCm sets the "width_cm" field.
func (u *PackagingUpsert) SetWidthCm(v int) *PackagingUpsert {
	u.Set(packaging.FieldWidthCm, v)
	return u
}

// UpdateWidthCm sets the "width_cm" field to the value that was provided on create.
func (u *PackagingUpsert) UpdateWidthCm() *PackagingUpsert {
	u.SetExcluded(packaging.FieldWidthCm)
	return u
}

// AddWidthCm adds v to the "width_cm" field.
func (u *PackagingUpsert) AddWidthCm(v int) *PackagingUpsert {
	u.Add(packaging.FieldWidthCm, v)
	return u
}

// SetLengthCm sets the "length_cm" field.
func (u *PackagingUpsert) SetLengthCm(v int) *PackagingUpsert {
	u.Set(packaging.FieldLengthCm, v)
	return u
}

// UpdateLengthCm sets the "length_cm" field to the value that was provided on create.
func (u *PackagingUpsert) UpdateLengthCm() *PackagingUpsert {
	u.SetExcluded(packaging.FieldLengthCm)
	return u
}

// AddLengthCm adds v to the "length_cm" field.
func (u *PackagingUpsert) AddLengthCm(v int) *PackagingUpsert {
	u.Add(packaging.FieldLengthCm, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Packaging.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packaging.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUpsertOne) UpdateNewValues() *PackagingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(packaging.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Packaging.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackagingUpsertOne) Ignore() *PackagingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUpsertOne) DoNothing() *PackagingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingCreate.OnConflict
// documentation for more info.
func (u *PackagingUpsertOne) Update(set func(*PackagingUpsert)) *PackagingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PackagingUpsertOne) SetTenantID(v pulid.ID) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingUpsertOne) UpdateTenantID() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *PackagingUpsertOne) SetArchivedAt(v time.Time) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *PackagingUpsertOne) UpdateArchivedAt() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *PackagingUpsertOne) ClearArchivedAt() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.ClearArchivedAt()
	})
}

// SetName sets the "name" field.
func (u *PackagingUpsertOne) SetName(v string) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUpsertOne) UpdateName() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateName()
	})
}

// SetHeightCm sets the "height_cm" field.
func (u *PackagingUpsertOne) SetHeightCm(v int) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.SetHeightCm(v)
	})
}

// AddHeightCm adds v to the "height_cm" field.
func (u *PackagingUpsertOne) AddHeightCm(v int) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.AddHeightCm(v)
	})
}

// UpdateHeightCm sets the "height_cm" field to the value that was provided on create.
func (u *PackagingUpsertOne) UpdateHeightCm() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateHeightCm()
	})
}

// SetWidthCm sets the "width_cm" field.
func (u *PackagingUpsertOne) SetWidthCm(v int) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.SetWidthCm(v)
	})
}

// AddWidthCm adds v to the "width_cm" field.
func (u *PackagingUpsertOne) AddWidthCm(v int) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.AddWidthCm(v)
	})
}

// UpdateWidthCm sets the "width_cm" field to the value that was provided on create.
func (u *PackagingUpsertOne) UpdateWidthCm() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateWidthCm()
	})
}

// SetLengthCm sets the "length_cm" field.
func (u *PackagingUpsertOne) SetLengthCm(v int) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.SetLengthCm(v)
	})
}

// AddLengthCm adds v to the "length_cm" field.
func (u *PackagingUpsertOne) AddLengthCm(v int) *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.AddLengthCm(v)
	})
}

// UpdateLengthCm sets the "length_cm" field to the value that was provided on create.
func (u *PackagingUpsertOne) UpdateLengthCm() *PackagingUpsertOne {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateLengthCm()
	})
}

// Exec executes the query.
func (u *PackagingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackagingUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PackagingUpsertOne.ID is not supported by MySQL driver. Use PackagingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackagingUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackagingCreateBulk is the builder for creating many Packaging entities in bulk.
type PackagingCreateBulk struct {
	config
	err      error
	builders []*PackagingCreate
	conflict []sql.ConflictOption
}

// Save creates the Packaging entities in the database.
func (pcb *PackagingCreateBulk) Save(ctx context.Context) ([]*Packaging, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Packaging, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackagingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PackagingCreateBulk) SaveX(ctx context.Context) []*Packaging {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PackagingCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PackagingCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Packaging.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (pcb *PackagingCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackagingUpsertBulk {
	pcb.conflict = opts
	return &PackagingUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Packaging.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PackagingCreateBulk) OnConflictColumns(columns ...string) *PackagingUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PackagingUpsertBulk{
		create: pcb,
	}
}

// PackagingUpsertBulk is the builder for "upsert"-ing
// a bulk of Packaging nodes.
type PackagingUpsertBulk struct {
	create *PackagingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Packaging.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packaging.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUpsertBulk) UpdateNewValues() *PackagingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(packaging.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Packaging.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackagingUpsertBulk) Ignore() *PackagingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUpsertBulk) DoNothing() *PackagingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingCreateBulk.OnConflict
// documentation for more info.
func (u *PackagingUpsertBulk) Update(set func(*PackagingUpsert)) *PackagingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *PackagingUpsertBulk) SetTenantID(v pulid.ID) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *PackagingUpsertBulk) UpdateTenantID() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateTenantID()
	})
}

// SetArchivedAt sets the "archived_at" field.
func (u *PackagingUpsertBulk) SetArchivedAt(v time.Time) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.SetArchivedAt(v)
	})
}

// UpdateArchivedAt sets the "archived_at" field to the value that was provided on create.
func (u *PackagingUpsertBulk) UpdateArchivedAt() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateArchivedAt()
	})
}

// ClearArchivedAt clears the value of the "archived_at" field.
func (u *PackagingUpsertBulk) ClearArchivedAt() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.ClearArchivedAt()
	})
}

// SetName sets the "name" field.
func (u *PackagingUpsertBulk) SetName(v string) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUpsertBulk) UpdateName() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateName()
	})
}

// SetHeightCm sets the "height_cm" field.
func (u *PackagingUpsertBulk) SetHeightCm(v int) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.SetHeightCm(v)
	})
}

// AddHeightCm adds v to the "height_cm" field.
func (u *PackagingUpsertBulk) AddHeightCm(v int) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.AddHeightCm(v)
	})
}

// UpdateHeightCm sets the "height_cm" field to the value that was provided on create.
func (u *PackagingUpsertBulk) UpdateHeightCm() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateHeightCm()
	})
}

// SetWidthCm sets the "width_cm" field.
func (u *PackagingUpsertBulk) SetWidthCm(v int) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.SetWidthCm(v)
	})
}

// AddWidthCm adds v to the "width_cm" field.
func (u *PackagingUpsertBulk) AddWidthCm(v int) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.AddWidthCm(v)
	})
}

// UpdateWidthCm sets the "width_cm" field to the value that was provided on create.
func (u *PackagingUpsertBulk) UpdateWidthCm() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateWidthCm()
	})
}

// SetLengthCm sets the "length_cm" field.
func (u *PackagingUpsertBulk) SetLengthCm(v int) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.SetLengthCm(v)
	})
}

// AddLengthCm adds v to the "length_cm" field.
func (u *PackagingUpsertBulk) AddLengthCm(v int) *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.AddLengthCm(v)
	})
}

// UpdateLengthCm sets the "length_cm" field to the value that was provided on create.
func (u *PackagingUpsertBulk) UpdateLengthCm() *PackagingUpsertBulk {
	return u.Update(func(s *PackagingUpsert) {
		s.UpdateLengthCm()
	})
}

// Exec executes the query.
func (u *PackagingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackagingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
