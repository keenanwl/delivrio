// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PackagingUSPS is the model entity for the PackagingUSPS schema.
type PackagingUSPS struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackagingUSPSQuery when eager-loading is set.
	Edges                                             PackagingUSPSEdges `json:"edges"`
	packaging_packaging_usps                          *pulid.ID
	packaging_usps_packaging_usps_rate_indicator      *pulid.ID
	packaging_usps_packaging_usps_processing_category *pulid.ID
	selectValues                                      sql.SelectValues
}

// PackagingUSPSEdges holds the relations/edges for other nodes in the graph.
type PackagingUSPSEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Packaging holds the value of the packaging edge.
	Packaging *Packaging `json:"packaging,omitempty"`
	// PackagingUSPSRateIndicator holds the value of the packaging_usps_rate_indicator edge.
	PackagingUSPSRateIndicator *PackagingUSPSRateIndicator `json:"packaging_usps_rate_indicator,omitempty"`
	// PackagingUSPSProcessingCategory holds the value of the packaging_usps_processing_category edge.
	PackagingUSPSProcessingCategory *PackagingUSPSProcessingCategory `json:"packaging_usps_processing_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingUSPSEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingUSPSEdges) PackagingOrErr() (*Packaging, error) {
	if e.Packaging != nil {
		return e.Packaging, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// PackagingUSPSRateIndicatorOrErr returns the PackagingUSPSRateIndicator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingUSPSEdges) PackagingUSPSRateIndicatorOrErr() (*PackagingUSPSRateIndicator, error) {
	if e.PackagingUSPSRateIndicator != nil {
		return e.PackagingUSPSRateIndicator, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: packaginguspsrateindicator.Label}
	}
	return nil, &NotLoadedError{edge: "packaging_usps_rate_indicator"}
}

// PackagingUSPSProcessingCategoryOrErr returns the PackagingUSPSProcessingCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingUSPSEdges) PackagingUSPSProcessingCategoryOrErr() (*PackagingUSPSProcessingCategory, error) {
	if e.PackagingUSPSProcessingCategory != nil {
		return e.PackagingUSPSProcessingCategory, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: packaginguspsprocessingcategory.Label}
	}
	return nil, &NotLoadedError{edge: "packaging_usps_processing_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackagingUSPS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packagingusps.FieldID, packagingusps.FieldTenantID:
			values[i] = new(pulid.ID)
		case packagingusps.ForeignKeys[0]: // packaging_packaging_usps
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case packagingusps.ForeignKeys[1]: // packaging_usps_packaging_usps_rate_indicator
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case packagingusps.ForeignKeys[2]: // packaging_usps_packaging_usps_processing_category
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackagingUSPS fields.
func (pu *PackagingUSPS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packagingusps.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pu.ID = *value
			}
		case packagingusps.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pu.TenantID = *value
			}
		case packagingusps.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field packaging_packaging_usps", values[i])
			} else if value.Valid {
				pu.packaging_packaging_usps = new(pulid.ID)
				*pu.packaging_packaging_usps = *value.S.(*pulid.ID)
			}
		case packagingusps.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field packaging_usps_packaging_usps_rate_indicator", values[i])
			} else if value.Valid {
				pu.packaging_usps_packaging_usps_rate_indicator = new(pulid.ID)
				*pu.packaging_usps_packaging_usps_rate_indicator = *value.S.(*pulid.ID)
			}
		case packagingusps.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field packaging_usps_packaging_usps_processing_category", values[i])
			} else if value.Valid {
				pu.packaging_usps_packaging_usps_processing_category = new(pulid.ID)
				*pu.packaging_usps_packaging_usps_processing_category = *value.S.(*pulid.ID)
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackagingUSPS.
// This includes values selected through modifiers, order, etc.
func (pu *PackagingUSPS) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the PackagingUSPS entity.
func (pu *PackagingUSPS) QueryTenant() *TenantQuery {
	return NewPackagingUSPSClient(pu.config).QueryTenant(pu)
}

// QueryPackaging queries the "packaging" edge of the PackagingUSPS entity.
func (pu *PackagingUSPS) QueryPackaging() *PackagingQuery {
	return NewPackagingUSPSClient(pu.config).QueryPackaging(pu)
}

// QueryPackagingUSPSRateIndicator queries the "packaging_usps_rate_indicator" edge of the PackagingUSPS entity.
func (pu *PackagingUSPS) QueryPackagingUSPSRateIndicator() *PackagingUSPSRateIndicatorQuery {
	return NewPackagingUSPSClient(pu.config).QueryPackagingUSPSRateIndicator(pu)
}

// QueryPackagingUSPSProcessingCategory queries the "packaging_usps_processing_category" edge of the PackagingUSPS entity.
func (pu *PackagingUSPS) QueryPackagingUSPSProcessingCategory() *PackagingUSPSProcessingCategoryQuery {
	return NewPackagingUSPSClient(pu.config).QueryPackagingUSPSProcessingCategory(pu)
}

// Update returns a builder for updating this PackagingUSPS.
// Note that you need to call PackagingUSPS.Unwrap() before calling this method if this PackagingUSPS
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *PackagingUSPS) Update() *PackagingUSPSUpdateOne {
	return NewPackagingUSPSClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the PackagingUSPS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *PackagingUSPS) Unwrap() *PackagingUSPS {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackagingUSPS is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *PackagingUSPS) String() string {
	var builder strings.Builder
	builder.WriteString("PackagingUSPS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pu.TenantID))
	builder.WriteByte(')')
	return builder.String()
}

// PackagingUSPSs is a parsable slice of PackagingUSPS.
type PackagingUSPSs []*PackagingUSPS
