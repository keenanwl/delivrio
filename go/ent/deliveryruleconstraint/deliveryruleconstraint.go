// Code generated by ent, DO NOT EDIT.

package deliveryruleconstraint

import (
	"fmt"
	"io"
	"strconv"

	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the deliveryruleconstraint type in the database.
	Label = "delivery_rule_constraint"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldPropertyType holds the string denoting the property_type field in the database.
	FieldPropertyType = "property_type"
	// FieldComparison holds the string denoting the comparison field in the database.
	FieldComparison = "comparison"
	// FieldSelectedValue holds the string denoting the selected_value field in the database.
	FieldSelectedValue = "selected_value"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeDeliveryRuleConstraintGroup holds the string denoting the delivery_rule_constraint_group edge name in mutations.
	EdgeDeliveryRuleConstraintGroup = "delivery_rule_constraint_group"
	// Table holds the table name of the deliveryruleconstraint in the database.
	Table = "delivery_rule_constraints"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "delivery_rule_constraints"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// DeliveryRuleConstraintGroupTable is the table that holds the delivery_rule_constraint_group relation/edge.
	DeliveryRuleConstraintGroupTable = "delivery_rule_constraints"
	// DeliveryRuleConstraintGroupInverseTable is the table name for the DeliveryRuleConstraintGroup entity.
	// It exists in this package in order to avoid circular dependency with the "deliveryruleconstraintgroup" package.
	DeliveryRuleConstraintGroupInverseTable = "delivery_rule_constraint_groups"
	// DeliveryRuleConstraintGroupColumn is the table column denoting the delivery_rule_constraint_group relation/edge.
	DeliveryRuleConstraintGroupColumn = "delivery_rule_constraint_group_delivery_rule_constraints"
)

// Columns holds all SQL columns for deliveryruleconstraint fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldPropertyType,
	FieldComparison,
	FieldSelectedValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "delivery_rule_constraints"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"delivery_rule_constraint_group_delivery_rule_constraints",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [4]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// PropertyType defines the type for the "property_type" enum field.
type PropertyType string

// PropertyType values.
const (
	PropertyTypeTotalWeight       PropertyType = "total_weight"
	PropertyTypeCartTotal         PropertyType = "cart_total"
	PropertyTypeDayOfWeek         PropertyType = "day_of_week"
	PropertyTypeTimeOfDay         PropertyType = "time_of_day"
	PropertyTypeProductTag        PropertyType = "product_tag"
	PropertyTypeAllProductsTagged PropertyType = "all_products_tagged"
	PropertyTypeSku               PropertyType = "sku"
	PropertyTypeOrderLines        PropertyType = "order_lines"
	PropertyTypePostalCodeNumeric PropertyType = "postal_code_numeric"
	PropertyTypePostalCodeString  PropertyType = "postal_code_string"
)

func (pt PropertyType) String() string {
	return string(pt)
}

// PropertyTypeValidator is a validator for the "property_type" field enum values. It is called by the builders before save.
func PropertyTypeValidator(pt PropertyType) error {
	switch pt {
	case PropertyTypeTotalWeight, PropertyTypeCartTotal, PropertyTypeDayOfWeek, PropertyTypeTimeOfDay, PropertyTypeProductTag, PropertyTypeAllProductsTagged, PropertyTypeSku, PropertyTypeOrderLines, PropertyTypePostalCodeNumeric, PropertyTypePostalCodeString:
		return nil
	default:
		return fmt.Errorf("deliveryruleconstraint: invalid enum value for property_type field: %q", pt)
	}
}

// Comparison defines the type for the "comparison" enum field.
type Comparison string

// Comparison values.
const (
	ComparisonEquals      Comparison = "equals"
	ComparisonNotEquals   Comparison = "not_equals"
	ComparisonBetween     Comparison = "between"
	ComparisonOutside     Comparison = "outside"
	ComparisonLessThan    Comparison = "less_than"
	ComparisonGreaterThan Comparison = "greater_than"
	ComparisonContains    Comparison = "contains"
	ComparisonPrefix      Comparison = "prefix"
	ComparisonSuffix      Comparison = "suffix"
)

func (c Comparison) String() string {
	return string(c)
}

// ComparisonValidator is a validator for the "comparison" field enum values. It is called by the builders before save.
func ComparisonValidator(c Comparison) error {
	switch c {
	case ComparisonEquals, ComparisonNotEquals, ComparisonBetween, ComparisonOutside, ComparisonLessThan, ComparisonGreaterThan, ComparisonContains, ComparisonPrefix, ComparisonSuffix:
		return nil
	default:
		return fmt.Errorf("deliveryruleconstraint: invalid enum value for comparison field: %q", c)
	}
}

// OrderOption defines the ordering options for the DeliveryRuleConstraint queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByPropertyType orders the results by the property_type field.
func ByPropertyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPropertyType, opts...).ToFunc()
}

// ByComparison orders the results by the comparison field.
func ByComparison(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComparison, opts...).ToFunc()
}

// BySelectedValue orders the results by the selected_value field.
func BySelectedValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedValue, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeliveryRuleConstraintGroupField orders the results by delivery_rule_constraint_group field.
func ByDeliveryRuleConstraintGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveryRuleConstraintGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newDeliveryRuleConstraintGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveryRuleConstraintGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeliveryRuleConstraintGroupTable, DeliveryRuleConstraintGroupColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PropertyType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PropertyType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PropertyType(str)
	if err := PropertyTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PropertyType", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Comparison) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Comparison) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Comparison(str)
	if err := ComparisonValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Comparison", str)
	}
	return nil
}
