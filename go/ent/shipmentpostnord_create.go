// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShipmentPostNordCreate is the builder for creating a ShipmentPostNord entity.
type ShipmentPostNordCreate struct {
	config
	mutation *ShipmentPostNordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (spnc *ShipmentPostNordCreate) SetTenantID(pu pulid.ID) *ShipmentPostNordCreate {
	spnc.mutation.SetTenantID(pu)
	return spnc
}

// SetBookingID sets the "booking_id" field.
func (spnc *ShipmentPostNordCreate) SetBookingID(s string) *ShipmentPostNordCreate {
	spnc.mutation.SetBookingID(s)
	return spnc
}

// SetItemID sets the "item_id" field.
func (spnc *ShipmentPostNordCreate) SetItemID(s string) *ShipmentPostNordCreate {
	spnc.mutation.SetItemID(s)
	return spnc
}

// SetShipmentReferenceNo sets the "shipment_reference_no" field.
func (spnc *ShipmentPostNordCreate) SetShipmentReferenceNo(s string) *ShipmentPostNordCreate {
	spnc.mutation.SetShipmentReferenceNo(s)
	return spnc
}

// SetID sets the "id" field.
func (spnc *ShipmentPostNordCreate) SetID(pu pulid.ID) *ShipmentPostNordCreate {
	spnc.mutation.SetID(pu)
	return spnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spnc *ShipmentPostNordCreate) SetNillableID(pu *pulid.ID) *ShipmentPostNordCreate {
	if pu != nil {
		spnc.SetID(*pu)
	}
	return spnc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (spnc *ShipmentPostNordCreate) SetTenant(t *Tenant) *ShipmentPostNordCreate {
	return spnc.SetTenantID(t.ID)
}

// SetShipmentID sets the "shipment" edge to the Shipment entity by ID.
func (spnc *ShipmentPostNordCreate) SetShipmentID(id pulid.ID) *ShipmentPostNordCreate {
	spnc.mutation.SetShipmentID(id)
	return spnc
}

// SetShipment sets the "shipment" edge to the Shipment entity.
func (spnc *ShipmentPostNordCreate) SetShipment(s *Shipment) *ShipmentPostNordCreate {
	return spnc.SetShipmentID(s.ID)
}

// Mutation returns the ShipmentPostNordMutation object of the builder.
func (spnc *ShipmentPostNordCreate) Mutation() *ShipmentPostNordMutation {
	return spnc.mutation
}

// Save creates the ShipmentPostNord in the database.
func (spnc *ShipmentPostNordCreate) Save(ctx context.Context) (*ShipmentPostNord, error) {
	if err := spnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, spnc.sqlSave, spnc.mutation, spnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spnc *ShipmentPostNordCreate) SaveX(ctx context.Context) *ShipmentPostNord {
	v, err := spnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spnc *ShipmentPostNordCreate) Exec(ctx context.Context) error {
	_, err := spnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spnc *ShipmentPostNordCreate) ExecX(ctx context.Context) {
	if err := spnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spnc *ShipmentPostNordCreate) defaults() error {
	if _, ok := spnc.mutation.ID(); !ok {
		if shipmentpostnord.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized shipmentpostnord.DefaultID (forgotten import ent/runtime?)")
		}
		v := shipmentpostnord.DefaultID()
		spnc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spnc *ShipmentPostNordCreate) check() error {
	if _, ok := spnc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ShipmentPostNord.tenant_id"`)}
	}
	if _, ok := spnc.mutation.BookingID(); !ok {
		return &ValidationError{Name: "booking_id", err: errors.New(`ent: missing required field "ShipmentPostNord.booking_id"`)}
	}
	if _, ok := spnc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "ShipmentPostNord.item_id"`)}
	}
	if _, ok := spnc.mutation.ShipmentReferenceNo(); !ok {
		return &ValidationError{Name: "shipment_reference_no", err: errors.New(`ent: missing required field "ShipmentPostNord.shipment_reference_no"`)}
	}
	if len(spnc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ShipmentPostNord.tenant"`)}
	}
	if len(spnc.mutation.ShipmentIDs()) == 0 {
		return &ValidationError{Name: "shipment", err: errors.New(`ent: missing required edge "ShipmentPostNord.shipment"`)}
	}
	return nil
}

func (spnc *ShipmentPostNordCreate) sqlSave(ctx context.Context) (*ShipmentPostNord, error) {
	if err := spnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spnc.mutation.id = &_node.ID
	spnc.mutation.done = true
	return _node, nil
}

func (spnc *ShipmentPostNordCreate) createSpec() (*ShipmentPostNord, *sqlgraph.CreateSpec) {
	var (
		_node = &ShipmentPostNord{config: spnc.config}
		_spec = sqlgraph.NewCreateSpec(shipmentpostnord.Table, sqlgraph.NewFieldSpec(shipmentpostnord.FieldID, field.TypeString))
	)
	_spec.OnConflict = spnc.conflict
	if id, ok := spnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spnc.mutation.BookingID(); ok {
		_spec.SetField(shipmentpostnord.FieldBookingID, field.TypeString, value)
		_node.BookingID = value
	}
	if value, ok := spnc.mutation.ItemID(); ok {
		_spec.SetField(shipmentpostnord.FieldItemID, field.TypeString, value)
		_node.ItemID = value
	}
	if value, ok := spnc.mutation.ShipmentReferenceNo(); ok {
		_spec.SetField(shipmentpostnord.FieldShipmentReferenceNo, field.TypeString, value)
		_node.ShipmentReferenceNo = value
	}
	if nodes := spnc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpostnord.TenantTable,
			Columns: []string{shipmentpostnord.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spnc.mutation.ShipmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpostnord.ShipmentTable,
			Columns: []string{shipmentpostnord.ShipmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shipment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shipment_shipment_post_nord = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentPostNord.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentPostNordUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (spnc *ShipmentPostNordCreate) OnConflict(opts ...sql.ConflictOption) *ShipmentPostNordUpsertOne {
	spnc.conflict = opts
	return &ShipmentPostNordUpsertOne{
		create: spnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentPostNord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spnc *ShipmentPostNordCreate) OnConflictColumns(columns ...string) *ShipmentPostNordUpsertOne {
	spnc.conflict = append(spnc.conflict, sql.ConflictColumns(columns...))
	return &ShipmentPostNordUpsertOne{
		create: spnc,
	}
}

type (
	// ShipmentPostNordUpsertOne is the builder for "upsert"-ing
	//  one ShipmentPostNord node.
	ShipmentPostNordUpsertOne struct {
		create *ShipmentPostNordCreate
	}

	// ShipmentPostNordUpsert is the "OnConflict" setter.
	ShipmentPostNordUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentPostNordUpsert) SetTenantID(v pulid.ID) *ShipmentPostNordUpsert {
	u.Set(shipmentpostnord.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsert) UpdateTenantID() *ShipmentPostNordUpsert {
	u.SetExcluded(shipmentpostnord.FieldTenantID)
	return u
}

// SetBookingID sets the "booking_id" field.
func (u *ShipmentPostNordUpsert) SetBookingID(v string) *ShipmentPostNordUpsert {
	u.Set(shipmentpostnord.FieldBookingID, v)
	return u
}

// UpdateBookingID sets the "booking_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsert) UpdateBookingID() *ShipmentPostNordUpsert {
	u.SetExcluded(shipmentpostnord.FieldBookingID)
	return u
}

// SetItemID sets the "item_id" field.
func (u *ShipmentPostNordUpsert) SetItemID(v string) *ShipmentPostNordUpsert {
	u.Set(shipmentpostnord.FieldItemID, v)
	return u
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsert) UpdateItemID() *ShipmentPostNordUpsert {
	u.SetExcluded(shipmentpostnord.FieldItemID)
	return u
}

// SetShipmentReferenceNo sets the "shipment_reference_no" field.
func (u *ShipmentPostNordUpsert) SetShipmentReferenceNo(v string) *ShipmentPostNordUpsert {
	u.Set(shipmentpostnord.FieldShipmentReferenceNo, v)
	return u
}

// UpdateShipmentReferenceNo sets the "shipment_reference_no" field to the value that was provided on create.
func (u *ShipmentPostNordUpsert) UpdateShipmentReferenceNo() *ShipmentPostNordUpsert {
	u.SetExcluded(shipmentpostnord.FieldShipmentReferenceNo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ShipmentPostNord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentpostnord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentPostNordUpsertOne) UpdateNewValues() *ShipmentPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(shipmentpostnord.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentPostNord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ShipmentPostNordUpsertOne) Ignore() *ShipmentPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentPostNordUpsertOne) DoNothing() *ShipmentPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentPostNordCreate.OnConflict
// documentation for more info.
func (u *ShipmentPostNordUpsertOne) Update(set func(*ShipmentPostNordUpsert)) *ShipmentPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentPostNordUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentPostNordUpsertOne) SetTenantID(v pulid.ID) *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertOne) UpdateTenantID() *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateTenantID()
	})
}

// SetBookingID sets the "booking_id" field.
func (u *ShipmentPostNordUpsertOne) SetBookingID(v string) *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetBookingID(v)
	})
}

// UpdateBookingID sets the "booking_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertOne) UpdateBookingID() *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateBookingID()
	})
}

// SetItemID sets the "item_id" field.
func (u *ShipmentPostNordUpsertOne) SetItemID(v string) *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertOne) UpdateItemID() *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateItemID()
	})
}

// SetShipmentReferenceNo sets the "shipment_reference_no" field.
func (u *ShipmentPostNordUpsertOne) SetShipmentReferenceNo(v string) *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetShipmentReferenceNo(v)
	})
}

// UpdateShipmentReferenceNo sets the "shipment_reference_no" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertOne) UpdateShipmentReferenceNo() *ShipmentPostNordUpsertOne {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateShipmentReferenceNo()
	})
}

// Exec executes the query.
func (u *ShipmentPostNordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentPostNordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentPostNordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ShipmentPostNordUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ShipmentPostNordUpsertOne.ID is not supported by MySQL driver. Use ShipmentPostNordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ShipmentPostNordUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ShipmentPostNordCreateBulk is the builder for creating many ShipmentPostNord entities in bulk.
type ShipmentPostNordCreateBulk struct {
	config
	err      error
	builders []*ShipmentPostNordCreate
	conflict []sql.ConflictOption
}

// Save creates the ShipmentPostNord entities in the database.
func (spncb *ShipmentPostNordCreateBulk) Save(ctx context.Context) ([]*ShipmentPostNord, error) {
	if spncb.err != nil {
		return nil, spncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spncb.builders))
	nodes := make([]*ShipmentPostNord, len(spncb.builders))
	mutators := make([]Mutator, len(spncb.builders))
	for i := range spncb.builders {
		func(i int, root context.Context) {
			builder := spncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShipmentPostNordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spncb *ShipmentPostNordCreateBulk) SaveX(ctx context.Context) []*ShipmentPostNord {
	v, err := spncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spncb *ShipmentPostNordCreateBulk) Exec(ctx context.Context) error {
	_, err := spncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spncb *ShipmentPostNordCreateBulk) ExecX(ctx context.Context) {
	if err := spncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ShipmentPostNord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ShipmentPostNordUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (spncb *ShipmentPostNordCreateBulk) OnConflict(opts ...sql.ConflictOption) *ShipmentPostNordUpsertBulk {
	spncb.conflict = opts
	return &ShipmentPostNordUpsertBulk{
		create: spncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ShipmentPostNord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spncb *ShipmentPostNordCreateBulk) OnConflictColumns(columns ...string) *ShipmentPostNordUpsertBulk {
	spncb.conflict = append(spncb.conflict, sql.ConflictColumns(columns...))
	return &ShipmentPostNordUpsertBulk{
		create: spncb,
	}
}

// ShipmentPostNordUpsertBulk is the builder for "upsert"-ing
// a bulk of ShipmentPostNord nodes.
type ShipmentPostNordUpsertBulk struct {
	create *ShipmentPostNordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ShipmentPostNord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(shipmentpostnord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ShipmentPostNordUpsertBulk) UpdateNewValues() *ShipmentPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(shipmentpostnord.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ShipmentPostNord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ShipmentPostNordUpsertBulk) Ignore() *ShipmentPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ShipmentPostNordUpsertBulk) DoNothing() *ShipmentPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ShipmentPostNordCreateBulk.OnConflict
// documentation for more info.
func (u *ShipmentPostNordUpsertBulk) Update(set func(*ShipmentPostNordUpsert)) *ShipmentPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ShipmentPostNordUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ShipmentPostNordUpsertBulk) SetTenantID(v pulid.ID) *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertBulk) UpdateTenantID() *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateTenantID()
	})
}

// SetBookingID sets the "booking_id" field.
func (u *ShipmentPostNordUpsertBulk) SetBookingID(v string) *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetBookingID(v)
	})
}

// UpdateBookingID sets the "booking_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertBulk) UpdateBookingID() *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateBookingID()
	})
}

// SetItemID sets the "item_id" field.
func (u *ShipmentPostNordUpsertBulk) SetItemID(v string) *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetItemID(v)
	})
}

// UpdateItemID sets the "item_id" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertBulk) UpdateItemID() *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateItemID()
	})
}

// SetShipmentReferenceNo sets the "shipment_reference_no" field.
func (u *ShipmentPostNordUpsertBulk) SetShipmentReferenceNo(v string) *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.SetShipmentReferenceNo(v)
	})
}

// UpdateShipmentReferenceNo sets the "shipment_reference_no" field to the value that was provided on create.
func (u *ShipmentPostNordUpsertBulk) UpdateShipmentReferenceNo() *ShipmentPostNordUpsertBulk {
	return u.Update(func(s *ShipmentPostNordUpsert) {
		s.UpdateShipmentReferenceNo()
	})
}

// Exec executes the query.
func (u *ShipmentPostNordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ShipmentPostNordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ShipmentPostNordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ShipmentPostNordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
