// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSRateIndicatorUpdate is the builder for updating PackagingUSPSRateIndicator entities.
type PackagingUSPSRateIndicatorUpdate struct {
	config
	hooks    []Hook
	mutation *PackagingUSPSRateIndicatorMutation
}

// Where appends a list predicates to the PackagingUSPSRateIndicatorUpdate builder.
func (puriu *PackagingUSPSRateIndicatorUpdate) Where(ps ...predicate.PackagingUSPSRateIndicator) *PackagingUSPSRateIndicatorUpdate {
	puriu.mutation.Where(ps...)
	return puriu
}

// SetCode sets the "code" field.
func (puriu *PackagingUSPSRateIndicatorUpdate) SetCode(s string) *PackagingUSPSRateIndicatorUpdate {
	puriu.mutation.SetCode(s)
	return puriu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puriu *PackagingUSPSRateIndicatorUpdate) SetNillableCode(s *string) *PackagingUSPSRateIndicatorUpdate {
	if s != nil {
		puriu.SetCode(*s)
	}
	return puriu
}

// SetName sets the "name" field.
func (puriu *PackagingUSPSRateIndicatorUpdate) SetName(s string) *PackagingUSPSRateIndicatorUpdate {
	puriu.mutation.SetName(s)
	return puriu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puriu *PackagingUSPSRateIndicatorUpdate) SetNillableName(s *string) *PackagingUSPSRateIndicatorUpdate {
	if s != nil {
		puriu.SetName(*s)
	}
	return puriu
}

// AddPackagingUspIDs adds the "packaging_usps" edge to the PackagingUSPS entity by IDs.
func (puriu *PackagingUSPSRateIndicatorUpdate) AddPackagingUspIDs(ids ...pulid.ID) *PackagingUSPSRateIndicatorUpdate {
	puriu.mutation.AddPackagingUspIDs(ids...)
	return puriu
}

// AddPackagingUSPS adds the "packaging_usps" edges to the PackagingUSPS entity.
func (puriu *PackagingUSPSRateIndicatorUpdate) AddPackagingUSPS(p ...*PackagingUSPS) *PackagingUSPSRateIndicatorUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puriu.AddPackagingUspIDs(ids...)
}

// Mutation returns the PackagingUSPSRateIndicatorMutation object of the builder.
func (puriu *PackagingUSPSRateIndicatorUpdate) Mutation() *PackagingUSPSRateIndicatorMutation {
	return puriu.mutation
}

// ClearPackagingUSPS clears all "packaging_usps" edges to the PackagingUSPS entity.
func (puriu *PackagingUSPSRateIndicatorUpdate) ClearPackagingUSPS() *PackagingUSPSRateIndicatorUpdate {
	puriu.mutation.ClearPackagingUSPS()
	return puriu
}

// RemovePackagingUspIDs removes the "packaging_usps" edge to PackagingUSPS entities by IDs.
func (puriu *PackagingUSPSRateIndicatorUpdate) RemovePackagingUspIDs(ids ...pulid.ID) *PackagingUSPSRateIndicatorUpdate {
	puriu.mutation.RemovePackagingUspIDs(ids...)
	return puriu
}

// RemovePackagingUSPS removes "packaging_usps" edges to PackagingUSPS entities.
func (puriu *PackagingUSPSRateIndicatorUpdate) RemovePackagingUSPS(p ...*PackagingUSPS) *PackagingUSPSRateIndicatorUpdate {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puriu.RemovePackagingUspIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (puriu *PackagingUSPSRateIndicatorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, puriu.sqlSave, puriu.mutation, puriu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puriu *PackagingUSPSRateIndicatorUpdate) SaveX(ctx context.Context) int {
	affected, err := puriu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puriu *PackagingUSPSRateIndicatorUpdate) Exec(ctx context.Context) error {
	_, err := puriu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puriu *PackagingUSPSRateIndicatorUpdate) ExecX(ctx context.Context) {
	if err := puriu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puriu *PackagingUSPSRateIndicatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(packaginguspsrateindicator.Table, packaginguspsrateindicator.Columns, sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString))
	if ps := puriu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puriu.mutation.Code(); ok {
		_spec.SetField(packaginguspsrateindicator.FieldCode, field.TypeString, value)
	}
	if value, ok := puriu.mutation.Name(); ok {
		_spec.SetField(packaginguspsrateindicator.FieldName, field.TypeString, value)
	}
	if puriu.mutation.PackagingUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puriu.mutation.RemovedPackagingUSPSIDs(); len(nodes) > 0 && !puriu.mutation.PackagingUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puriu.mutation.PackagingUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puriu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packaginguspsrateindicator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	puriu.mutation.done = true
	return n, nil
}

// PackagingUSPSRateIndicatorUpdateOne is the builder for updating a single PackagingUSPSRateIndicator entity.
type PackagingUSPSRateIndicatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackagingUSPSRateIndicatorMutation
}

// SetCode sets the "code" field.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) SetCode(s string) *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.mutation.SetCode(s)
	return puriuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) SetNillableCode(s *string) *PackagingUSPSRateIndicatorUpdateOne {
	if s != nil {
		puriuo.SetCode(*s)
	}
	return puriuo
}

// SetName sets the "name" field.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) SetName(s string) *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.mutation.SetName(s)
	return puriuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) SetNillableName(s *string) *PackagingUSPSRateIndicatorUpdateOne {
	if s != nil {
		puriuo.SetName(*s)
	}
	return puriuo
}

// AddPackagingUspIDs adds the "packaging_usps" edge to the PackagingUSPS entity by IDs.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) AddPackagingUspIDs(ids ...pulid.ID) *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.mutation.AddPackagingUspIDs(ids...)
	return puriuo
}

// AddPackagingUSPS adds the "packaging_usps" edges to the PackagingUSPS entity.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) AddPackagingUSPS(p ...*PackagingUSPS) *PackagingUSPSRateIndicatorUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puriuo.AddPackagingUspIDs(ids...)
}

// Mutation returns the PackagingUSPSRateIndicatorMutation object of the builder.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) Mutation() *PackagingUSPSRateIndicatorMutation {
	return puriuo.mutation
}

// ClearPackagingUSPS clears all "packaging_usps" edges to the PackagingUSPS entity.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) ClearPackagingUSPS() *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.mutation.ClearPackagingUSPS()
	return puriuo
}

// RemovePackagingUspIDs removes the "packaging_usps" edge to PackagingUSPS entities by IDs.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) RemovePackagingUspIDs(ids ...pulid.ID) *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.mutation.RemovePackagingUspIDs(ids...)
	return puriuo
}

// RemovePackagingUSPS removes "packaging_usps" edges to PackagingUSPS entities.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) RemovePackagingUSPS(p ...*PackagingUSPS) *PackagingUSPSRateIndicatorUpdateOne {
	ids := make([]pulid.ID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puriuo.RemovePackagingUspIDs(ids...)
}

// Where appends a list predicates to the PackagingUSPSRateIndicatorUpdate builder.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) Where(ps ...predicate.PackagingUSPSRateIndicator) *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.mutation.Where(ps...)
	return puriuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) Select(field string, fields ...string) *PackagingUSPSRateIndicatorUpdateOne {
	puriuo.fields = append([]string{field}, fields...)
	return puriuo
}

// Save executes the query and returns the updated PackagingUSPSRateIndicator entity.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) Save(ctx context.Context) (*PackagingUSPSRateIndicator, error) {
	return withHooks(ctx, puriuo.sqlSave, puriuo.mutation, puriuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) SaveX(ctx context.Context) *PackagingUSPSRateIndicator {
	node, err := puriuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) Exec(ctx context.Context) error {
	_, err := puriuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puriuo *PackagingUSPSRateIndicatorUpdateOne) ExecX(ctx context.Context) {
	if err := puriuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puriuo *PackagingUSPSRateIndicatorUpdateOne) sqlSave(ctx context.Context) (_node *PackagingUSPSRateIndicator, err error) {
	_spec := sqlgraph.NewUpdateSpec(packaginguspsrateindicator.Table, packaginguspsrateindicator.Columns, sqlgraph.NewFieldSpec(packaginguspsrateindicator.FieldID, field.TypeString))
	id, ok := puriuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackagingUSPSRateIndicator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puriuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packaginguspsrateindicator.FieldID)
		for _, f := range fields {
			if !packaginguspsrateindicator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packaginguspsrateindicator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puriuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puriuo.mutation.Code(); ok {
		_spec.SetField(packaginguspsrateindicator.FieldCode, field.TypeString, value)
	}
	if value, ok := puriuo.mutation.Name(); ok {
		_spec.SetField(packaginguspsrateindicator.FieldName, field.TypeString, value)
	}
	if puriuo.mutation.PackagingUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puriuo.mutation.RemovedPackagingUSPSIDs(); len(nodes) > 0 && !puriuo.mutation.PackagingUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puriuo.mutation.PackagingUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packagingusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PackagingUSPSRateIndicator{config: puriuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puriuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packaginguspsrateindicator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puriuo.mutation.done = true
	return _node, nil
}
