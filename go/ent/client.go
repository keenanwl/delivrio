// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"delivrio.io/go/ent/migrate"
	"delivrio.io/shared-utils/pulid"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gocloud.dev/blob"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APIToken is the client for interacting with the APIToken builders.
	APIToken *APITokenClient
	// AccessRight is the client for interacting with the AccessRight builders.
	AccessRight *AccessRightClient
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// AddressGlobal is the client for interacting with the AddressGlobal builders.
	AddressGlobal *AddressGlobalClient
	// BusinessHoursPeriod is the client for interacting with the BusinessHoursPeriod builders.
	BusinessHoursPeriod *BusinessHoursPeriodClient
	// Carrier is the client for interacting with the Carrier builders.
	Carrier *CarrierClient
	// CarrierAdditionalServiceBring is the client for interacting with the CarrierAdditionalServiceBring builders.
	CarrierAdditionalServiceBring *CarrierAdditionalServiceBringClient
	// CarrierAdditionalServiceDAO is the client for interacting with the CarrierAdditionalServiceDAO builders.
	CarrierAdditionalServiceDAO *CarrierAdditionalServiceDAOClient
	// CarrierAdditionalServiceDF is the client for interacting with the CarrierAdditionalServiceDF builders.
	CarrierAdditionalServiceDF *CarrierAdditionalServiceDFClient
	// CarrierAdditionalServiceDSV is the client for interacting with the CarrierAdditionalServiceDSV builders.
	CarrierAdditionalServiceDSV *CarrierAdditionalServiceDSVClient
	// CarrierAdditionalServiceEasyPost is the client for interacting with the CarrierAdditionalServiceEasyPost builders.
	CarrierAdditionalServiceEasyPost *CarrierAdditionalServiceEasyPostClient
	// CarrierAdditionalServiceGLS is the client for interacting with the CarrierAdditionalServiceGLS builders.
	CarrierAdditionalServiceGLS *CarrierAdditionalServiceGLSClient
	// CarrierAdditionalServicePostNord is the client for interacting with the CarrierAdditionalServicePostNord builders.
	CarrierAdditionalServicePostNord *CarrierAdditionalServicePostNordClient
	// CarrierAdditionalServiceUSPS is the client for interacting with the CarrierAdditionalServiceUSPS builders.
	CarrierAdditionalServiceUSPS *CarrierAdditionalServiceUSPSClient
	// CarrierBrand is the client for interacting with the CarrierBrand builders.
	CarrierBrand *CarrierBrandClient
	// CarrierBring is the client for interacting with the CarrierBring builders.
	CarrierBring *CarrierBringClient
	// CarrierDAO is the client for interacting with the CarrierDAO builders.
	CarrierDAO *CarrierDAOClient
	// CarrierDF is the client for interacting with the CarrierDF builders.
	CarrierDF *CarrierDFClient
	// CarrierDSV is the client for interacting with the CarrierDSV builders.
	CarrierDSV *CarrierDSVClient
	// CarrierEasyPost is the client for interacting with the CarrierEasyPost builders.
	CarrierEasyPost *CarrierEasyPostClient
	// CarrierGLS is the client for interacting with the CarrierGLS builders.
	CarrierGLS *CarrierGLSClient
	// CarrierPostNord is the client for interacting with the CarrierPostNord builders.
	CarrierPostNord *CarrierPostNordClient
	// CarrierService is the client for interacting with the CarrierService builders.
	CarrierService *CarrierServiceClient
	// CarrierServiceBring is the client for interacting with the CarrierServiceBring builders.
	CarrierServiceBring *CarrierServiceBringClient
	// CarrierServiceDAO is the client for interacting with the CarrierServiceDAO builders.
	CarrierServiceDAO *CarrierServiceDAOClient
	// CarrierServiceDF is the client for interacting with the CarrierServiceDF builders.
	CarrierServiceDF *CarrierServiceDFClient
	// CarrierServiceDSV is the client for interacting with the CarrierServiceDSV builders.
	CarrierServiceDSV *CarrierServiceDSVClient
	// CarrierServiceEasyPost is the client for interacting with the CarrierServiceEasyPost builders.
	CarrierServiceEasyPost *CarrierServiceEasyPostClient
	// CarrierServiceGLS is the client for interacting with the CarrierServiceGLS builders.
	CarrierServiceGLS *CarrierServiceGLSClient
	// CarrierServicePostNord is the client for interacting with the CarrierServicePostNord builders.
	CarrierServicePostNord *CarrierServicePostNordClient
	// CarrierServiceUSPS is the client for interacting with the CarrierServiceUSPS builders.
	CarrierServiceUSPS *CarrierServiceUSPSClient
	// CarrierUSPS is the client for interacting with the CarrierUSPS builders.
	CarrierUSPS *CarrierUSPSClient
	// ChangeHistory is the client for interacting with the ChangeHistory builders.
	ChangeHistory *ChangeHistoryClient
	// Colli is the client for interacting with the Colli builders.
	Colli *ColliClient
	// ConnectOptionCarrier is the client for interacting with the ConnectOptionCarrier builders.
	ConnectOptionCarrier *ConnectOptionCarrierClient
	// ConnectOptionPlatform is the client for interacting with the ConnectOptionPlatform builders.
	ConnectOptionPlatform *ConnectOptionPlatformClient
	// Connection is the client for interacting with the Connection builders.
	Connection *ConnectionClient
	// ConnectionBrand is the client for interacting with the ConnectionBrand builders.
	ConnectionBrand *ConnectionBrandClient
	// ConnectionLookup is the client for interacting with the ConnectionLookup builders.
	ConnectionLookup *ConnectionLookupClient
	// ConnectionShopify is the client for interacting with the ConnectionShopify builders.
	ConnectionShopify *ConnectionShopifyClient
	// Consolidation is the client for interacting with the Consolidation builders.
	Consolidation *ConsolidationClient
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// Country is the client for interacting with the Country builders.
	Country *CountryClient
	// CountryHarmonizedCode is the client for interacting with the CountryHarmonizedCode builders.
	CountryHarmonizedCode *CountryHarmonizedCodeClient
	// Currency is the client for interacting with the Currency builders.
	Currency *CurrencyClient
	// DeliveryOption is the client for interacting with the DeliveryOption builders.
	DeliveryOption *DeliveryOptionClient
	// DeliveryOptionBring is the client for interacting with the DeliveryOptionBring builders.
	DeliveryOptionBring *DeliveryOptionBringClient
	// DeliveryOptionDAO is the client for interacting with the DeliveryOptionDAO builders.
	DeliveryOptionDAO *DeliveryOptionDAOClient
	// DeliveryOptionDF is the client for interacting with the DeliveryOptionDF builders.
	DeliveryOptionDF *DeliveryOptionDFClient
	// DeliveryOptionDSV is the client for interacting with the DeliveryOptionDSV builders.
	DeliveryOptionDSV *DeliveryOptionDSVClient
	// DeliveryOptionEasyPost is the client for interacting with the DeliveryOptionEasyPost builders.
	DeliveryOptionEasyPost *DeliveryOptionEasyPostClient
	// DeliveryOptionGLS is the client for interacting with the DeliveryOptionGLS builders.
	DeliveryOptionGLS *DeliveryOptionGLSClient
	// DeliveryOptionPostNord is the client for interacting with the DeliveryOptionPostNord builders.
	DeliveryOptionPostNord *DeliveryOptionPostNordClient
	// DeliveryOptionUSPS is the client for interacting with the DeliveryOptionUSPS builders.
	DeliveryOptionUSPS *DeliveryOptionUSPSClient
	// DeliveryRule is the client for interacting with the DeliveryRule builders.
	DeliveryRule *DeliveryRuleClient
	// DeliveryRuleConstraint is the client for interacting with the DeliveryRuleConstraint builders.
	DeliveryRuleConstraint *DeliveryRuleConstraintClient
	// DeliveryRuleConstraintGroup is the client for interacting with the DeliveryRuleConstraintGroup builders.
	DeliveryRuleConstraintGroup *DeliveryRuleConstraintGroupClient
	// Document is the client for interacting with the Document builders.
	Document *DocumentClient
	// DocumentFile is the client for interacting with the DocumentFile builders.
	DocumentFile *DocumentFileClient
	// EmailTemplate is the client for interacting with the EmailTemplate builders.
	EmailTemplate *EmailTemplateClient
	// HypothesisTest is the client for interacting with the HypothesisTest builders.
	HypothesisTest *HypothesisTestClient
	// HypothesisTestDeliveryOption is the client for interacting with the HypothesisTestDeliveryOption builders.
	HypothesisTestDeliveryOption *HypothesisTestDeliveryOptionClient
	// HypothesisTestDeliveryOptionLookup is the client for interacting with the HypothesisTestDeliveryOptionLookup builders.
	HypothesisTestDeliveryOptionLookup *HypothesisTestDeliveryOptionLookupClient
	// HypothesisTestDeliveryOptionRequest is the client for interacting with the HypothesisTestDeliveryOptionRequest builders.
	HypothesisTestDeliveryOptionRequest *HypothesisTestDeliveryOptionRequestClient
	// InventoryItem is the client for interacting with the InventoryItem builders.
	InventoryItem *InventoryItemClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// LocationTag is the client for interacting with the LocationTag builders.
	LocationTag *LocationTagClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// OTKRequests is the client for interacting with the OTKRequests builders.
	OTKRequests *OTKRequestsClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderHistory is the client for interacting with the OrderHistory builders.
	OrderHistory *OrderHistoryClient
	// OrderLine is the client for interacting with the OrderLine builders.
	OrderLine *OrderLineClient
	// OrderSender is the client for interacting with the OrderSender builders.
	OrderSender *OrderSenderClient
	// Packaging is the client for interacting with the Packaging builders.
	Packaging *PackagingClient
	// PackagingDF is the client for interacting with the PackagingDF builders.
	PackagingDF *PackagingDFClient
	// PackagingUSPS is the client for interacting with the PackagingUSPS builders.
	PackagingUSPS *PackagingUSPSClient
	// PackagingUSPSProcessingCategory is the client for interacting with the PackagingUSPSProcessingCategory builders.
	PackagingUSPSProcessingCategory *PackagingUSPSProcessingCategoryClient
	// PackagingUSPSRateIndicator is the client for interacting with the PackagingUSPSRateIndicator builders.
	PackagingUSPSRateIndicator *PackagingUSPSRateIndicatorClient
	// Pallet is the client for interacting with the Pallet builders.
	Pallet *PalletClient
	// ParcelShop is the client for interacting with the ParcelShop builders.
	ParcelShop *ParcelShopClient
	// ParcelShopBring is the client for interacting with the ParcelShopBring builders.
	ParcelShopBring *ParcelShopBringClient
	// ParcelShopDAO is the client for interacting with the ParcelShopDAO builders.
	ParcelShopDAO *ParcelShopDAOClient
	// ParcelShopGLS is the client for interacting with the ParcelShopGLS builders.
	ParcelShopGLS *ParcelShopGLSClient
	// ParcelShopPostNord is the client for interacting with the ParcelShopPostNord builders.
	ParcelShopPostNord *ParcelShopPostNordClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanHistory is the client for interacting with the PlanHistory builders.
	PlanHistory *PlanHistoryClient
	// PrintJob is the client for interacting with the PrintJob builders.
	PrintJob *PrintJobClient
	// Printer is the client for interacting with the Printer builders.
	Printer *PrinterClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductImage is the client for interacting with the ProductImage builders.
	ProductImage *ProductImageClient
	// ProductTag is the client for interacting with the ProductTag builders.
	ProductTag *ProductTagClient
	// ProductVariant is the client for interacting with the ProductVariant builders.
	ProductVariant *ProductVariantClient
	// ReturnColli is the client for interacting with the ReturnColli builders.
	ReturnColli *ReturnColliClient
	// ReturnColliHistory is the client for interacting with the ReturnColliHistory builders.
	ReturnColliHistory *ReturnColliHistoryClient
	// ReturnOrderLine is the client for interacting with the ReturnOrderLine builders.
	ReturnOrderLine *ReturnOrderLineClient
	// ReturnPortal is the client for interacting with the ReturnPortal builders.
	ReturnPortal *ReturnPortalClient
	// ReturnPortalClaim is the client for interacting with the ReturnPortalClaim builders.
	ReturnPortalClaim *ReturnPortalClaimClient
	// SeatGroup is the client for interacting with the SeatGroup builders.
	SeatGroup *SeatGroupClient
	// SeatGroupAccessRight is the client for interacting with the SeatGroupAccessRight builders.
	SeatGroupAccessRight *SeatGroupAccessRightClient
	// Shipment is the client for interacting with the Shipment builders.
	Shipment *ShipmentClient
	// ShipmentBring is the client for interacting with the ShipmentBring builders.
	ShipmentBring *ShipmentBringClient
	// ShipmentDAO is the client for interacting with the ShipmentDAO builders.
	ShipmentDAO *ShipmentDAOClient
	// ShipmentDF is the client for interacting with the ShipmentDF builders.
	ShipmentDF *ShipmentDFClient
	// ShipmentDSV is the client for interacting with the ShipmentDSV builders.
	ShipmentDSV *ShipmentDSVClient
	// ShipmentEasyPost is the client for interacting with the ShipmentEasyPost builders.
	ShipmentEasyPost *ShipmentEasyPostClient
	// ShipmentGLS is the client for interacting with the ShipmentGLS builders.
	ShipmentGLS *ShipmentGLSClient
	// ShipmentHistory is the client for interacting with the ShipmentHistory builders.
	ShipmentHistory *ShipmentHistoryClient
	// ShipmentPallet is the client for interacting with the ShipmentPallet builders.
	ShipmentPallet *ShipmentPalletClient
	// ShipmentParcel is the client for interacting with the ShipmentParcel builders.
	ShipmentParcel *ShipmentParcelClient
	// ShipmentPostNord is the client for interacting with the ShipmentPostNord builders.
	ShipmentPostNord *ShipmentPostNordClient
	// ShipmentUSPS is the client for interacting with the ShipmentUSPS builders.
	ShipmentUSPS *ShipmentUSPSClient
	// SignupOptions is the client for interacting with the SignupOptions builders.
	SignupOptions *SignupOptionsClient
	// SystemEvents is the client for interacting with the SystemEvents builders.
	SystemEvents *SystemEventsClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserSeat is the client for interacting with the UserSeat builders.
	UserSeat *UserSeatClient
	// WorkspaceRecentScan is the client for interacting with the WorkspaceRecentScan builders.
	WorkspaceRecentScan *WorkspaceRecentScanClient
	// Workstation is the client for interacting with the Workstation builders.
	Workstation *WorkstationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APIToken = NewAPITokenClient(c.config)
	c.AccessRight = NewAccessRightClient(c.config)
	c.Address = NewAddressClient(c.config)
	c.AddressGlobal = NewAddressGlobalClient(c.config)
	c.BusinessHoursPeriod = NewBusinessHoursPeriodClient(c.config)
	c.Carrier = NewCarrierClient(c.config)
	c.CarrierAdditionalServiceBring = NewCarrierAdditionalServiceBringClient(c.config)
	c.CarrierAdditionalServiceDAO = NewCarrierAdditionalServiceDAOClient(c.config)
	c.CarrierAdditionalServiceDF = NewCarrierAdditionalServiceDFClient(c.config)
	c.CarrierAdditionalServiceDSV = NewCarrierAdditionalServiceDSVClient(c.config)
	c.CarrierAdditionalServiceEasyPost = NewCarrierAdditionalServiceEasyPostClient(c.config)
	c.CarrierAdditionalServiceGLS = NewCarrierAdditionalServiceGLSClient(c.config)
	c.CarrierAdditionalServicePostNord = NewCarrierAdditionalServicePostNordClient(c.config)
	c.CarrierAdditionalServiceUSPS = NewCarrierAdditionalServiceUSPSClient(c.config)
	c.CarrierBrand = NewCarrierBrandClient(c.config)
	c.CarrierBring = NewCarrierBringClient(c.config)
	c.CarrierDAO = NewCarrierDAOClient(c.config)
	c.CarrierDF = NewCarrierDFClient(c.config)
	c.CarrierDSV = NewCarrierDSVClient(c.config)
	c.CarrierEasyPost = NewCarrierEasyPostClient(c.config)
	c.CarrierGLS = NewCarrierGLSClient(c.config)
	c.CarrierPostNord = NewCarrierPostNordClient(c.config)
	c.CarrierService = NewCarrierServiceClient(c.config)
	c.CarrierServiceBring = NewCarrierServiceBringClient(c.config)
	c.CarrierServiceDAO = NewCarrierServiceDAOClient(c.config)
	c.CarrierServiceDF = NewCarrierServiceDFClient(c.config)
	c.CarrierServiceDSV = NewCarrierServiceDSVClient(c.config)
	c.CarrierServiceEasyPost = NewCarrierServiceEasyPostClient(c.config)
	c.CarrierServiceGLS = NewCarrierServiceGLSClient(c.config)
	c.CarrierServicePostNord = NewCarrierServicePostNordClient(c.config)
	c.CarrierServiceUSPS = NewCarrierServiceUSPSClient(c.config)
	c.CarrierUSPS = NewCarrierUSPSClient(c.config)
	c.ChangeHistory = NewChangeHistoryClient(c.config)
	c.Colli = NewColliClient(c.config)
	c.ConnectOptionCarrier = NewConnectOptionCarrierClient(c.config)
	c.ConnectOptionPlatform = NewConnectOptionPlatformClient(c.config)
	c.Connection = NewConnectionClient(c.config)
	c.ConnectionBrand = NewConnectionBrandClient(c.config)
	c.ConnectionLookup = NewConnectionLookupClient(c.config)
	c.ConnectionShopify = NewConnectionShopifyClient(c.config)
	c.Consolidation = NewConsolidationClient(c.config)
	c.Contact = NewContactClient(c.config)
	c.Country = NewCountryClient(c.config)
	c.CountryHarmonizedCode = NewCountryHarmonizedCodeClient(c.config)
	c.Currency = NewCurrencyClient(c.config)
	c.DeliveryOption = NewDeliveryOptionClient(c.config)
	c.DeliveryOptionBring = NewDeliveryOptionBringClient(c.config)
	c.DeliveryOptionDAO = NewDeliveryOptionDAOClient(c.config)
	c.DeliveryOptionDF = NewDeliveryOptionDFClient(c.config)
	c.DeliveryOptionDSV = NewDeliveryOptionDSVClient(c.config)
	c.DeliveryOptionEasyPost = NewDeliveryOptionEasyPostClient(c.config)
	c.DeliveryOptionGLS = NewDeliveryOptionGLSClient(c.config)
	c.DeliveryOptionPostNord = NewDeliveryOptionPostNordClient(c.config)
	c.DeliveryOptionUSPS = NewDeliveryOptionUSPSClient(c.config)
	c.DeliveryRule = NewDeliveryRuleClient(c.config)
	c.DeliveryRuleConstraint = NewDeliveryRuleConstraintClient(c.config)
	c.DeliveryRuleConstraintGroup = NewDeliveryRuleConstraintGroupClient(c.config)
	c.Document = NewDocumentClient(c.config)
	c.DocumentFile = NewDocumentFileClient(c.config)
	c.EmailTemplate = NewEmailTemplateClient(c.config)
	c.HypothesisTest = NewHypothesisTestClient(c.config)
	c.HypothesisTestDeliveryOption = NewHypothesisTestDeliveryOptionClient(c.config)
	c.HypothesisTestDeliveryOptionLookup = NewHypothesisTestDeliveryOptionLookupClient(c.config)
	c.HypothesisTestDeliveryOptionRequest = NewHypothesisTestDeliveryOptionRequestClient(c.config)
	c.InventoryItem = NewInventoryItemClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.Location = NewLocationClient(c.config)
	c.LocationTag = NewLocationTagClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.OTKRequests = NewOTKRequestsClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderHistory = NewOrderHistoryClient(c.config)
	c.OrderLine = NewOrderLineClient(c.config)
	c.OrderSender = NewOrderSenderClient(c.config)
	c.Packaging = NewPackagingClient(c.config)
	c.PackagingDF = NewPackagingDFClient(c.config)
	c.PackagingUSPS = NewPackagingUSPSClient(c.config)
	c.PackagingUSPSProcessingCategory = NewPackagingUSPSProcessingCategoryClient(c.config)
	c.PackagingUSPSRateIndicator = NewPackagingUSPSRateIndicatorClient(c.config)
	c.Pallet = NewPalletClient(c.config)
	c.ParcelShop = NewParcelShopClient(c.config)
	c.ParcelShopBring = NewParcelShopBringClient(c.config)
	c.ParcelShopDAO = NewParcelShopDAOClient(c.config)
	c.ParcelShopGLS = NewParcelShopGLSClient(c.config)
	c.ParcelShopPostNord = NewParcelShopPostNordClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.PlanHistory = NewPlanHistoryClient(c.config)
	c.PrintJob = NewPrintJobClient(c.config)
	c.Printer = NewPrinterClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductImage = NewProductImageClient(c.config)
	c.ProductTag = NewProductTagClient(c.config)
	c.ProductVariant = NewProductVariantClient(c.config)
	c.ReturnColli = NewReturnColliClient(c.config)
	c.ReturnColliHistory = NewReturnColliHistoryClient(c.config)
	c.ReturnOrderLine = NewReturnOrderLineClient(c.config)
	c.ReturnPortal = NewReturnPortalClient(c.config)
	c.ReturnPortalClaim = NewReturnPortalClaimClient(c.config)
	c.SeatGroup = NewSeatGroupClient(c.config)
	c.SeatGroupAccessRight = NewSeatGroupAccessRightClient(c.config)
	c.Shipment = NewShipmentClient(c.config)
	c.ShipmentBring = NewShipmentBringClient(c.config)
	c.ShipmentDAO = NewShipmentDAOClient(c.config)
	c.ShipmentDF = NewShipmentDFClient(c.config)
	c.ShipmentDSV = NewShipmentDSVClient(c.config)
	c.ShipmentEasyPost = NewShipmentEasyPostClient(c.config)
	c.ShipmentGLS = NewShipmentGLSClient(c.config)
	c.ShipmentHistory = NewShipmentHistoryClient(c.config)
	c.ShipmentPallet = NewShipmentPalletClient(c.config)
	c.ShipmentParcel = NewShipmentParcelClient(c.config)
	c.ShipmentPostNord = NewShipmentPostNordClient(c.config)
	c.ShipmentUSPS = NewShipmentUSPSClient(c.config)
	c.SignupOptions = NewSignupOptionsClient(c.config)
	c.SystemEvents = NewSystemEventsClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserSeat = NewUserSeatClient(c.config)
	c.WorkspaceRecentScan = NewWorkspaceRecentScanClient(c.config)
	c.Workstation = NewWorkstationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
		Bucket *blob.Bucket
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Bucket configures the Bucket.
func Bucket(v *blob.Bucket) Option {
	return func(c *config) {
		c.Bucket = v
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                                 ctx,
		config:                              cfg,
		APIToken:                            NewAPITokenClient(cfg),
		AccessRight:                         NewAccessRightClient(cfg),
		Address:                             NewAddressClient(cfg),
		AddressGlobal:                       NewAddressGlobalClient(cfg),
		BusinessHoursPeriod:                 NewBusinessHoursPeriodClient(cfg),
		Carrier:                             NewCarrierClient(cfg),
		CarrierAdditionalServiceBring:       NewCarrierAdditionalServiceBringClient(cfg),
		CarrierAdditionalServiceDAO:         NewCarrierAdditionalServiceDAOClient(cfg),
		CarrierAdditionalServiceDF:          NewCarrierAdditionalServiceDFClient(cfg),
		CarrierAdditionalServiceDSV:         NewCarrierAdditionalServiceDSVClient(cfg),
		CarrierAdditionalServiceEasyPost:    NewCarrierAdditionalServiceEasyPostClient(cfg),
		CarrierAdditionalServiceGLS:         NewCarrierAdditionalServiceGLSClient(cfg),
		CarrierAdditionalServicePostNord:    NewCarrierAdditionalServicePostNordClient(cfg),
		CarrierAdditionalServiceUSPS:        NewCarrierAdditionalServiceUSPSClient(cfg),
		CarrierBrand:                        NewCarrierBrandClient(cfg),
		CarrierBring:                        NewCarrierBringClient(cfg),
		CarrierDAO:                          NewCarrierDAOClient(cfg),
		CarrierDF:                           NewCarrierDFClient(cfg),
		CarrierDSV:                          NewCarrierDSVClient(cfg),
		CarrierEasyPost:                     NewCarrierEasyPostClient(cfg),
		CarrierGLS:                          NewCarrierGLSClient(cfg),
		CarrierPostNord:                     NewCarrierPostNordClient(cfg),
		CarrierService:                      NewCarrierServiceClient(cfg),
		CarrierServiceBring:                 NewCarrierServiceBringClient(cfg),
		CarrierServiceDAO:                   NewCarrierServiceDAOClient(cfg),
		CarrierServiceDF:                    NewCarrierServiceDFClient(cfg),
		CarrierServiceDSV:                   NewCarrierServiceDSVClient(cfg),
		CarrierServiceEasyPost:              NewCarrierServiceEasyPostClient(cfg),
		CarrierServiceGLS:                   NewCarrierServiceGLSClient(cfg),
		CarrierServicePostNord:              NewCarrierServicePostNordClient(cfg),
		CarrierServiceUSPS:                  NewCarrierServiceUSPSClient(cfg),
		CarrierUSPS:                         NewCarrierUSPSClient(cfg),
		ChangeHistory:                       NewChangeHistoryClient(cfg),
		Colli:                               NewColliClient(cfg),
		ConnectOptionCarrier:                NewConnectOptionCarrierClient(cfg),
		ConnectOptionPlatform:               NewConnectOptionPlatformClient(cfg),
		Connection:                          NewConnectionClient(cfg),
		ConnectionBrand:                     NewConnectionBrandClient(cfg),
		ConnectionLookup:                    NewConnectionLookupClient(cfg),
		ConnectionShopify:                   NewConnectionShopifyClient(cfg),
		Consolidation:                       NewConsolidationClient(cfg),
		Contact:                             NewContactClient(cfg),
		Country:                             NewCountryClient(cfg),
		CountryHarmonizedCode:               NewCountryHarmonizedCodeClient(cfg),
		Currency:                            NewCurrencyClient(cfg),
		DeliveryOption:                      NewDeliveryOptionClient(cfg),
		DeliveryOptionBring:                 NewDeliveryOptionBringClient(cfg),
		DeliveryOptionDAO:                   NewDeliveryOptionDAOClient(cfg),
		DeliveryOptionDF:                    NewDeliveryOptionDFClient(cfg),
		DeliveryOptionDSV:                   NewDeliveryOptionDSVClient(cfg),
		DeliveryOptionEasyPost:              NewDeliveryOptionEasyPostClient(cfg),
		DeliveryOptionGLS:                   NewDeliveryOptionGLSClient(cfg),
		DeliveryOptionPostNord:              NewDeliveryOptionPostNordClient(cfg),
		DeliveryOptionUSPS:                  NewDeliveryOptionUSPSClient(cfg),
		DeliveryRule:                        NewDeliveryRuleClient(cfg),
		DeliveryRuleConstraint:              NewDeliveryRuleConstraintClient(cfg),
		DeliveryRuleConstraintGroup:         NewDeliveryRuleConstraintGroupClient(cfg),
		Document:                            NewDocumentClient(cfg),
		DocumentFile:                        NewDocumentFileClient(cfg),
		EmailTemplate:                       NewEmailTemplateClient(cfg),
		HypothesisTest:                      NewHypothesisTestClient(cfg),
		HypothesisTestDeliveryOption:        NewHypothesisTestDeliveryOptionClient(cfg),
		HypothesisTestDeliveryOptionLookup:  NewHypothesisTestDeliveryOptionLookupClient(cfg),
		HypothesisTestDeliveryOptionRequest: NewHypothesisTestDeliveryOptionRequestClient(cfg),
		InventoryItem:                       NewInventoryItemClient(cfg),
		Language:                            NewLanguageClient(cfg),
		Location:                            NewLocationClient(cfg),
		LocationTag:                         NewLocationTagClient(cfg),
		Notification:                        NewNotificationClient(cfg),
		OTKRequests:                         NewOTKRequestsClient(cfg),
		Order:                               NewOrderClient(cfg),
		OrderHistory:                        NewOrderHistoryClient(cfg),
		OrderLine:                           NewOrderLineClient(cfg),
		OrderSender:                         NewOrderSenderClient(cfg),
		Packaging:                           NewPackagingClient(cfg),
		PackagingDF:                         NewPackagingDFClient(cfg),
		PackagingUSPS:                       NewPackagingUSPSClient(cfg),
		PackagingUSPSProcessingCategory:     NewPackagingUSPSProcessingCategoryClient(cfg),
		PackagingUSPSRateIndicator:          NewPackagingUSPSRateIndicatorClient(cfg),
		Pallet:                              NewPalletClient(cfg),
		ParcelShop:                          NewParcelShopClient(cfg),
		ParcelShopBring:                     NewParcelShopBringClient(cfg),
		ParcelShopDAO:                       NewParcelShopDAOClient(cfg),
		ParcelShopGLS:                       NewParcelShopGLSClient(cfg),
		ParcelShopPostNord:                  NewParcelShopPostNordClient(cfg),
		Plan:                                NewPlanClient(cfg),
		PlanHistory:                         NewPlanHistoryClient(cfg),
		PrintJob:                            NewPrintJobClient(cfg),
		Printer:                             NewPrinterClient(cfg),
		Product:                             NewProductClient(cfg),
		ProductImage:                        NewProductImageClient(cfg),
		ProductTag:                          NewProductTagClient(cfg),
		ProductVariant:                      NewProductVariantClient(cfg),
		ReturnColli:                         NewReturnColliClient(cfg),
		ReturnColliHistory:                  NewReturnColliHistoryClient(cfg),
		ReturnOrderLine:                     NewReturnOrderLineClient(cfg),
		ReturnPortal:                        NewReturnPortalClient(cfg),
		ReturnPortalClaim:                   NewReturnPortalClaimClient(cfg),
		SeatGroup:                           NewSeatGroupClient(cfg),
		SeatGroupAccessRight:                NewSeatGroupAccessRightClient(cfg),
		Shipment:                            NewShipmentClient(cfg),
		ShipmentBring:                       NewShipmentBringClient(cfg),
		ShipmentDAO:                         NewShipmentDAOClient(cfg),
		ShipmentDF:                          NewShipmentDFClient(cfg),
		ShipmentDSV:                         NewShipmentDSVClient(cfg),
		ShipmentEasyPost:                    NewShipmentEasyPostClient(cfg),
		ShipmentGLS:                         NewShipmentGLSClient(cfg),
		ShipmentHistory:                     NewShipmentHistoryClient(cfg),
		ShipmentPallet:                      NewShipmentPalletClient(cfg),
		ShipmentParcel:                      NewShipmentParcelClient(cfg),
		ShipmentPostNord:                    NewShipmentPostNordClient(cfg),
		ShipmentUSPS:                        NewShipmentUSPSClient(cfg),
		SignupOptions:                       NewSignupOptionsClient(cfg),
		SystemEvents:                        NewSystemEventsClient(cfg),
		Tenant:                              NewTenantClient(cfg),
		User:                                NewUserClient(cfg),
		UserSeat:                            NewUserSeatClient(cfg),
		WorkspaceRecentScan:                 NewWorkspaceRecentScanClient(cfg),
		Workstation:                         NewWorkstationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                                 ctx,
		config:                              cfg,
		APIToken:                            NewAPITokenClient(cfg),
		AccessRight:                         NewAccessRightClient(cfg),
		Address:                             NewAddressClient(cfg),
		AddressGlobal:                       NewAddressGlobalClient(cfg),
		BusinessHoursPeriod:                 NewBusinessHoursPeriodClient(cfg),
		Carrier:                             NewCarrierClient(cfg),
		CarrierAdditionalServiceBring:       NewCarrierAdditionalServiceBringClient(cfg),
		CarrierAdditionalServiceDAO:         NewCarrierAdditionalServiceDAOClient(cfg),
		CarrierAdditionalServiceDF:          NewCarrierAdditionalServiceDFClient(cfg),
		CarrierAdditionalServiceDSV:         NewCarrierAdditionalServiceDSVClient(cfg),
		CarrierAdditionalServiceEasyPost:    NewCarrierAdditionalServiceEasyPostClient(cfg),
		CarrierAdditionalServiceGLS:         NewCarrierAdditionalServiceGLSClient(cfg),
		CarrierAdditionalServicePostNord:    NewCarrierAdditionalServicePostNordClient(cfg),
		CarrierAdditionalServiceUSPS:        NewCarrierAdditionalServiceUSPSClient(cfg),
		CarrierBrand:                        NewCarrierBrandClient(cfg),
		CarrierBring:                        NewCarrierBringClient(cfg),
		CarrierDAO:                          NewCarrierDAOClient(cfg),
		CarrierDF:                           NewCarrierDFClient(cfg),
		CarrierDSV:                          NewCarrierDSVClient(cfg),
		CarrierEasyPost:                     NewCarrierEasyPostClient(cfg),
		CarrierGLS:                          NewCarrierGLSClient(cfg),
		CarrierPostNord:                     NewCarrierPostNordClient(cfg),
		CarrierService:                      NewCarrierServiceClient(cfg),
		CarrierServiceBring:                 NewCarrierServiceBringClient(cfg),
		CarrierServiceDAO:                   NewCarrierServiceDAOClient(cfg),
		CarrierServiceDF:                    NewCarrierServiceDFClient(cfg),
		CarrierServiceDSV:                   NewCarrierServiceDSVClient(cfg),
		CarrierServiceEasyPost:              NewCarrierServiceEasyPostClient(cfg),
		CarrierServiceGLS:                   NewCarrierServiceGLSClient(cfg),
		CarrierServicePostNord:              NewCarrierServicePostNordClient(cfg),
		CarrierServiceUSPS:                  NewCarrierServiceUSPSClient(cfg),
		CarrierUSPS:                         NewCarrierUSPSClient(cfg),
		ChangeHistory:                       NewChangeHistoryClient(cfg),
		Colli:                               NewColliClient(cfg),
		ConnectOptionCarrier:                NewConnectOptionCarrierClient(cfg),
		ConnectOptionPlatform:               NewConnectOptionPlatformClient(cfg),
		Connection:                          NewConnectionClient(cfg),
		ConnectionBrand:                     NewConnectionBrandClient(cfg),
		ConnectionLookup:                    NewConnectionLookupClient(cfg),
		ConnectionShopify:                   NewConnectionShopifyClient(cfg),
		Consolidation:                       NewConsolidationClient(cfg),
		Contact:                             NewContactClient(cfg),
		Country:                             NewCountryClient(cfg),
		CountryHarmonizedCode:               NewCountryHarmonizedCodeClient(cfg),
		Currency:                            NewCurrencyClient(cfg),
		DeliveryOption:                      NewDeliveryOptionClient(cfg),
		DeliveryOptionBring:                 NewDeliveryOptionBringClient(cfg),
		DeliveryOptionDAO:                   NewDeliveryOptionDAOClient(cfg),
		DeliveryOptionDF:                    NewDeliveryOptionDFClient(cfg),
		DeliveryOptionDSV:                   NewDeliveryOptionDSVClient(cfg),
		DeliveryOptionEasyPost:              NewDeliveryOptionEasyPostClient(cfg),
		DeliveryOptionGLS:                   NewDeliveryOptionGLSClient(cfg),
		DeliveryOptionPostNord:              NewDeliveryOptionPostNordClient(cfg),
		DeliveryOptionUSPS:                  NewDeliveryOptionUSPSClient(cfg),
		DeliveryRule:                        NewDeliveryRuleClient(cfg),
		DeliveryRuleConstraint:              NewDeliveryRuleConstraintClient(cfg),
		DeliveryRuleConstraintGroup:         NewDeliveryRuleConstraintGroupClient(cfg),
		Document:                            NewDocumentClient(cfg),
		DocumentFile:                        NewDocumentFileClient(cfg),
		EmailTemplate:                       NewEmailTemplateClient(cfg),
		HypothesisTest:                      NewHypothesisTestClient(cfg),
		HypothesisTestDeliveryOption:        NewHypothesisTestDeliveryOptionClient(cfg),
		HypothesisTestDeliveryOptionLookup:  NewHypothesisTestDeliveryOptionLookupClient(cfg),
		HypothesisTestDeliveryOptionRequest: NewHypothesisTestDeliveryOptionRequestClient(cfg),
		InventoryItem:                       NewInventoryItemClient(cfg),
		Language:                            NewLanguageClient(cfg),
		Location:                            NewLocationClient(cfg),
		LocationTag:                         NewLocationTagClient(cfg),
		Notification:                        NewNotificationClient(cfg),
		OTKRequests:                         NewOTKRequestsClient(cfg),
		Order:                               NewOrderClient(cfg),
		OrderHistory:                        NewOrderHistoryClient(cfg),
		OrderLine:                           NewOrderLineClient(cfg),
		OrderSender:                         NewOrderSenderClient(cfg),
		Packaging:                           NewPackagingClient(cfg),
		PackagingDF:                         NewPackagingDFClient(cfg),
		PackagingUSPS:                       NewPackagingUSPSClient(cfg),
		PackagingUSPSProcessingCategory:     NewPackagingUSPSProcessingCategoryClient(cfg),
		PackagingUSPSRateIndicator:          NewPackagingUSPSRateIndicatorClient(cfg),
		Pallet:                              NewPalletClient(cfg),
		ParcelShop:                          NewParcelShopClient(cfg),
		ParcelShopBring:                     NewParcelShopBringClient(cfg),
		ParcelShopDAO:                       NewParcelShopDAOClient(cfg),
		ParcelShopGLS:                       NewParcelShopGLSClient(cfg),
		ParcelShopPostNord:                  NewParcelShopPostNordClient(cfg),
		Plan:                                NewPlanClient(cfg),
		PlanHistory:                         NewPlanHistoryClient(cfg),
		PrintJob:                            NewPrintJobClient(cfg),
		Printer:                             NewPrinterClient(cfg),
		Product:                             NewProductClient(cfg),
		ProductImage:                        NewProductImageClient(cfg),
		ProductTag:                          NewProductTagClient(cfg),
		ProductVariant:                      NewProductVariantClient(cfg),
		ReturnColli:                         NewReturnColliClient(cfg),
		ReturnColliHistory:                  NewReturnColliHistoryClient(cfg),
		ReturnOrderLine:                     NewReturnOrderLineClient(cfg),
		ReturnPortal:                        NewReturnPortalClient(cfg),
		ReturnPortalClaim:                   NewReturnPortalClaimClient(cfg),
		SeatGroup:                           NewSeatGroupClient(cfg),
		SeatGroupAccessRight:                NewSeatGroupAccessRightClient(cfg),
		Shipment:                            NewShipmentClient(cfg),
		ShipmentBring:                       NewShipmentBringClient(cfg),
		ShipmentDAO:                         NewShipmentDAOClient(cfg),
		ShipmentDF:                          NewShipmentDFClient(cfg),
		ShipmentDSV:                         NewShipmentDSVClient(cfg),
		ShipmentEasyPost:                    NewShipmentEasyPostClient(cfg),
		ShipmentGLS:                         NewShipmentGLSClient(cfg),
		ShipmentHistory:                     NewShipmentHistoryClient(cfg),
		ShipmentPallet:                      NewShipmentPalletClient(cfg),
		ShipmentParcel:                      NewShipmentParcelClient(cfg),
		ShipmentPostNord:                    NewShipmentPostNordClient(cfg),
		ShipmentUSPS:                        NewShipmentUSPSClient(cfg),
		SignupOptions:                       NewSignupOptionsClient(cfg),
		SystemEvents:                        NewSystemEventsClient(cfg),
		Tenant:                              NewTenantClient(cfg),
		User:                                NewUserClient(cfg),
		UserSeat:                            NewUserSeatClient(cfg),
		WorkspaceRecentScan:                 NewWorkspaceRecentScanClient(cfg),
		Workstation:                         NewWorkstationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APIToken.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.APIToken, c.AccessRight, c.Address, c.AddressGlobal, c.BusinessHoursPeriod,
		c.Carrier, c.CarrierAdditionalServiceBring, c.CarrierAdditionalServiceDAO,
		c.CarrierAdditionalServiceDF, c.CarrierAdditionalServiceDSV,
		c.CarrierAdditionalServiceEasyPost, c.CarrierAdditionalServiceGLS,
		c.CarrierAdditionalServicePostNord, c.CarrierAdditionalServiceUSPS,
		c.CarrierBrand, c.CarrierBring, c.CarrierDAO, c.CarrierDF, c.CarrierDSV,
		c.CarrierEasyPost, c.CarrierGLS, c.CarrierPostNord, c.CarrierService,
		c.CarrierServiceBring, c.CarrierServiceDAO, c.CarrierServiceDF,
		c.CarrierServiceDSV, c.CarrierServiceEasyPost, c.CarrierServiceGLS,
		c.CarrierServicePostNord, c.CarrierServiceUSPS, c.CarrierUSPS, c.ChangeHistory,
		c.Colli, c.ConnectOptionCarrier, c.ConnectOptionPlatform, c.Connection,
		c.ConnectionBrand, c.ConnectionLookup, c.ConnectionShopify, c.Consolidation,
		c.Contact, c.Country, c.CountryHarmonizedCode, c.Currency, c.DeliveryOption,
		c.DeliveryOptionBring, c.DeliveryOptionDAO, c.DeliveryOptionDF,
		c.DeliveryOptionDSV, c.DeliveryOptionEasyPost, c.DeliveryOptionGLS,
		c.DeliveryOptionPostNord, c.DeliveryOptionUSPS, c.DeliveryRule,
		c.DeliveryRuleConstraint, c.DeliveryRuleConstraintGroup, c.Document,
		c.DocumentFile, c.EmailTemplate, c.HypothesisTest,
		c.HypothesisTestDeliveryOption, c.HypothesisTestDeliveryOptionLookup,
		c.HypothesisTestDeliveryOptionRequest, c.InventoryItem, c.Language, c.Location,
		c.LocationTag, c.Notification, c.OTKRequests, c.Order, c.OrderHistory,
		c.OrderLine, c.OrderSender, c.Packaging, c.PackagingDF, c.PackagingUSPS,
		c.PackagingUSPSProcessingCategory, c.PackagingUSPSRateIndicator, c.Pallet,
		c.ParcelShop, c.ParcelShopBring, c.ParcelShopDAO, c.ParcelShopGLS,
		c.ParcelShopPostNord, c.Plan, c.PlanHistory, c.PrintJob, c.Printer, c.Product,
		c.ProductImage, c.ProductTag, c.ProductVariant, c.ReturnColli,
		c.ReturnColliHistory, c.ReturnOrderLine, c.ReturnPortal, c.ReturnPortalClaim,
		c.SeatGroup, c.SeatGroupAccessRight, c.Shipment, c.ShipmentBring,
		c.ShipmentDAO, c.ShipmentDF, c.ShipmentDSV, c.ShipmentEasyPost, c.ShipmentGLS,
		c.ShipmentHistory, c.ShipmentPallet, c.ShipmentParcel, c.ShipmentPostNord,
		c.ShipmentUSPS, c.SignupOptions, c.SystemEvents, c.Tenant, c.User, c.UserSeat,
		c.WorkspaceRecentScan, c.Workstation,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.APIToken, c.AccessRight, c.Address, c.AddressGlobal, c.BusinessHoursPeriod,
		c.Carrier, c.CarrierAdditionalServiceBring, c.CarrierAdditionalServiceDAO,
		c.CarrierAdditionalServiceDF, c.CarrierAdditionalServiceDSV,
		c.CarrierAdditionalServiceEasyPost, c.CarrierAdditionalServiceGLS,
		c.CarrierAdditionalServicePostNord, c.CarrierAdditionalServiceUSPS,
		c.CarrierBrand, c.CarrierBring, c.CarrierDAO, c.CarrierDF, c.CarrierDSV,
		c.CarrierEasyPost, c.CarrierGLS, c.CarrierPostNord, c.CarrierService,
		c.CarrierServiceBring, c.CarrierServiceDAO, c.CarrierServiceDF,
		c.CarrierServiceDSV, c.CarrierServiceEasyPost, c.CarrierServiceGLS,
		c.CarrierServicePostNord, c.CarrierServiceUSPS, c.CarrierUSPS, c.ChangeHistory,
		c.Colli, c.ConnectOptionCarrier, c.ConnectOptionPlatform, c.Connection,
		c.ConnectionBrand, c.ConnectionLookup, c.ConnectionShopify, c.Consolidation,
		c.Contact, c.Country, c.CountryHarmonizedCode, c.Currency, c.DeliveryOption,
		c.DeliveryOptionBring, c.DeliveryOptionDAO, c.DeliveryOptionDF,
		c.DeliveryOptionDSV, c.DeliveryOptionEasyPost, c.DeliveryOptionGLS,
		c.DeliveryOptionPostNord, c.DeliveryOptionUSPS, c.DeliveryRule,
		c.DeliveryRuleConstraint, c.DeliveryRuleConstraintGroup, c.Document,
		c.DocumentFile, c.EmailTemplate, c.HypothesisTest,
		c.HypothesisTestDeliveryOption, c.HypothesisTestDeliveryOptionLookup,
		c.HypothesisTestDeliveryOptionRequest, c.InventoryItem, c.Language, c.Location,
		c.LocationTag, c.Notification, c.OTKRequests, c.Order, c.OrderHistory,
		c.OrderLine, c.OrderSender, c.Packaging, c.PackagingDF, c.PackagingUSPS,
		c.PackagingUSPSProcessingCategory, c.PackagingUSPSRateIndicator, c.Pallet,
		c.ParcelShop, c.ParcelShopBring, c.ParcelShopDAO, c.ParcelShopGLS,
		c.ParcelShopPostNord, c.Plan, c.PlanHistory, c.PrintJob, c.Printer, c.Product,
		c.ProductImage, c.ProductTag, c.ProductVariant, c.ReturnColli,
		c.ReturnColliHistory, c.ReturnOrderLine, c.ReturnPortal, c.ReturnPortalClaim,
		c.SeatGroup, c.SeatGroupAccessRight, c.Shipment, c.ShipmentBring,
		c.ShipmentDAO, c.ShipmentDF, c.ShipmentDSV, c.ShipmentEasyPost, c.ShipmentGLS,
		c.ShipmentHistory, c.ShipmentPallet, c.ShipmentParcel, c.ShipmentPostNord,
		c.ShipmentUSPS, c.SignupOptions, c.SystemEvents, c.Tenant, c.User, c.UserSeat,
		c.WorkspaceRecentScan, c.Workstation,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APITokenMutation:
		return c.APIToken.mutate(ctx, m)
	case *AccessRightMutation:
		return c.AccessRight.mutate(ctx, m)
	case *AddressMutation:
		return c.Address.mutate(ctx, m)
	case *AddressGlobalMutation:
		return c.AddressGlobal.mutate(ctx, m)
	case *BusinessHoursPeriodMutation:
		return c.BusinessHoursPeriod.mutate(ctx, m)
	case *CarrierMutation:
		return c.Carrier.mutate(ctx, m)
	case *CarrierAdditionalServiceBringMutation:
		return c.CarrierAdditionalServiceBring.mutate(ctx, m)
	case *CarrierAdditionalServiceDAOMutation:
		return c.CarrierAdditionalServiceDAO.mutate(ctx, m)
	case *CarrierAdditionalServiceDFMutation:
		return c.CarrierAdditionalServiceDF.mutate(ctx, m)
	case *CarrierAdditionalServiceDSVMutation:
		return c.CarrierAdditionalServiceDSV.mutate(ctx, m)
	case *CarrierAdditionalServiceEasyPostMutation:
		return c.CarrierAdditionalServiceEasyPost.mutate(ctx, m)
	case *CarrierAdditionalServiceGLSMutation:
		return c.CarrierAdditionalServiceGLS.mutate(ctx, m)
	case *CarrierAdditionalServicePostNordMutation:
		return c.CarrierAdditionalServicePostNord.mutate(ctx, m)
	case *CarrierAdditionalServiceUSPSMutation:
		return c.CarrierAdditionalServiceUSPS.mutate(ctx, m)
	case *CarrierBrandMutation:
		return c.CarrierBrand.mutate(ctx, m)
	case *CarrierBringMutation:
		return c.CarrierBring.mutate(ctx, m)
	case *CarrierDAOMutation:
		return c.CarrierDAO.mutate(ctx, m)
	case *CarrierDFMutation:
		return c.CarrierDF.mutate(ctx, m)
	case *CarrierDSVMutation:
		return c.CarrierDSV.mutate(ctx, m)
	case *CarrierEasyPostMutation:
		return c.CarrierEasyPost.mutate(ctx, m)
	case *CarrierGLSMutation:
		return c.CarrierGLS.mutate(ctx, m)
	case *CarrierPostNordMutation:
		return c.CarrierPostNord.mutate(ctx, m)
	case *CarrierServiceMutation:
		return c.CarrierService.mutate(ctx, m)
	case *CarrierServiceBringMutation:
		return c.CarrierServiceBring.mutate(ctx, m)
	case *CarrierServiceDAOMutation:
		return c.CarrierServiceDAO.mutate(ctx, m)
	case *CarrierServiceDFMutation:
		return c.CarrierServiceDF.mutate(ctx, m)
	case *CarrierServiceDSVMutation:
		return c.CarrierServiceDSV.mutate(ctx, m)
	case *CarrierServiceEasyPostMutation:
		return c.CarrierServiceEasyPost.mutate(ctx, m)
	case *CarrierServiceGLSMutation:
		return c.CarrierServiceGLS.mutate(ctx, m)
	case *CarrierServicePostNordMutation:
		return c.CarrierServicePostNord.mutate(ctx, m)
	case *CarrierServiceUSPSMutation:
		return c.CarrierServiceUSPS.mutate(ctx, m)
	case *CarrierUSPSMutation:
		return c.CarrierUSPS.mutate(ctx, m)
	case *ChangeHistoryMutation:
		return c.ChangeHistory.mutate(ctx, m)
	case *ColliMutation:
		return c.Colli.mutate(ctx, m)
	case *ConnectOptionCarrierMutation:
		return c.ConnectOptionCarrier.mutate(ctx, m)
	case *ConnectOptionPlatformMutation:
		return c.ConnectOptionPlatform.mutate(ctx, m)
	case *ConnectionMutation:
		return c.Connection.mutate(ctx, m)
	case *ConnectionBrandMutation:
		return c.ConnectionBrand.mutate(ctx, m)
	case *ConnectionLookupMutation:
		return c.ConnectionLookup.mutate(ctx, m)
	case *ConnectionShopifyMutation:
		return c.ConnectionShopify.mutate(ctx, m)
	case *ConsolidationMutation:
		return c.Consolidation.mutate(ctx, m)
	case *ContactMutation:
		return c.Contact.mutate(ctx, m)
	case *CountryMutation:
		return c.Country.mutate(ctx, m)
	case *CountryHarmonizedCodeMutation:
		return c.CountryHarmonizedCode.mutate(ctx, m)
	case *CurrencyMutation:
		return c.Currency.mutate(ctx, m)
	case *DeliveryOptionMutation:
		return c.DeliveryOption.mutate(ctx, m)
	case *DeliveryOptionBringMutation:
		return c.DeliveryOptionBring.mutate(ctx, m)
	case *DeliveryOptionDAOMutation:
		return c.DeliveryOptionDAO.mutate(ctx, m)
	case *DeliveryOptionDFMutation:
		return c.DeliveryOptionDF.mutate(ctx, m)
	case *DeliveryOptionDSVMutation:
		return c.DeliveryOptionDSV.mutate(ctx, m)
	case *DeliveryOptionEasyPostMutation:
		return c.DeliveryOptionEasyPost.mutate(ctx, m)
	case *DeliveryOptionGLSMutation:
		return c.DeliveryOptionGLS.mutate(ctx, m)
	case *DeliveryOptionPostNordMutation:
		return c.DeliveryOptionPostNord.mutate(ctx, m)
	case *DeliveryOptionUSPSMutation:
		return c.DeliveryOptionUSPS.mutate(ctx, m)
	case *DeliveryRuleMutation:
		return c.DeliveryRule.mutate(ctx, m)
	case *DeliveryRuleConstraintMutation:
		return c.DeliveryRuleConstraint.mutate(ctx, m)
	case *DeliveryRuleConstraintGroupMutation:
		return c.DeliveryRuleConstraintGroup.mutate(ctx, m)
	case *DocumentMutation:
		return c.Document.mutate(ctx, m)
	case *DocumentFileMutation:
		return c.DocumentFile.mutate(ctx, m)
	case *EmailTemplateMutation:
		return c.EmailTemplate.mutate(ctx, m)
	case *HypothesisTestMutation:
		return c.HypothesisTest.mutate(ctx, m)
	case *HypothesisTestDeliveryOptionMutation:
		return c.HypothesisTestDeliveryOption.mutate(ctx, m)
	case *HypothesisTestDeliveryOptionLookupMutation:
		return c.HypothesisTestDeliveryOptionLookup.mutate(ctx, m)
	case *HypothesisTestDeliveryOptionRequestMutation:
		return c.HypothesisTestDeliveryOptionRequest.mutate(ctx, m)
	case *InventoryItemMutation:
		return c.InventoryItem.mutate(ctx, m)
	case *LanguageMutation:
		return c.Language.mutate(ctx, m)
	case *LocationMutation:
		return c.Location.mutate(ctx, m)
	case *LocationTagMutation:
		return c.LocationTag.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *OTKRequestsMutation:
		return c.OTKRequests.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderHistoryMutation:
		return c.OrderHistory.mutate(ctx, m)
	case *OrderLineMutation:
		return c.OrderLine.mutate(ctx, m)
	case *OrderSenderMutation:
		return c.OrderSender.mutate(ctx, m)
	case *PackagingMutation:
		return c.Packaging.mutate(ctx, m)
	case *PackagingDFMutation:
		return c.PackagingDF.mutate(ctx, m)
	case *PackagingUSPSMutation:
		return c.PackagingUSPS.mutate(ctx, m)
	case *PackagingUSPSProcessingCategoryMutation:
		return c.PackagingUSPSProcessingCategory.mutate(ctx, m)
	case *PackagingUSPSRateIndicatorMutation:
		return c.PackagingUSPSRateIndicator.mutate(ctx, m)
	case *PalletMutation:
		return c.Pallet.mutate(ctx, m)
	case *ParcelShopMutation:
		return c.ParcelShop.mutate(ctx, m)
	case *ParcelShopBringMutation:
		return c.ParcelShopBring.mutate(ctx, m)
	case *ParcelShopDAOMutation:
		return c.ParcelShopDAO.mutate(ctx, m)
	case *ParcelShopGLSMutation:
		return c.ParcelShopGLS.mutate(ctx, m)
	case *ParcelShopPostNordMutation:
		return c.ParcelShopPostNord.mutate(ctx, m)
	case *PlanMutation:
		return c.Plan.mutate(ctx, m)
	case *PlanHistoryMutation:
		return c.PlanHistory.mutate(ctx, m)
	case *PrintJobMutation:
		return c.PrintJob.mutate(ctx, m)
	case *PrinterMutation:
		return c.Printer.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *ProductImageMutation:
		return c.ProductImage.mutate(ctx, m)
	case *ProductTagMutation:
		return c.ProductTag.mutate(ctx, m)
	case *ProductVariantMutation:
		return c.ProductVariant.mutate(ctx, m)
	case *ReturnColliMutation:
		return c.ReturnColli.mutate(ctx, m)
	case *ReturnColliHistoryMutation:
		return c.ReturnColliHistory.mutate(ctx, m)
	case *ReturnOrderLineMutation:
		return c.ReturnOrderLine.mutate(ctx, m)
	case *ReturnPortalMutation:
		return c.ReturnPortal.mutate(ctx, m)
	case *ReturnPortalClaimMutation:
		return c.ReturnPortalClaim.mutate(ctx, m)
	case *SeatGroupMutation:
		return c.SeatGroup.mutate(ctx, m)
	case *SeatGroupAccessRightMutation:
		return c.SeatGroupAccessRight.mutate(ctx, m)
	case *ShipmentMutation:
		return c.Shipment.mutate(ctx, m)
	case *ShipmentBringMutation:
		return c.ShipmentBring.mutate(ctx, m)
	case *ShipmentDAOMutation:
		return c.ShipmentDAO.mutate(ctx, m)
	case *ShipmentDFMutation:
		return c.ShipmentDF.mutate(ctx, m)
	case *ShipmentDSVMutation:
		return c.ShipmentDSV.mutate(ctx, m)
	case *ShipmentEasyPostMutation:
		return c.ShipmentEasyPost.mutate(ctx, m)
	case *ShipmentGLSMutation:
		return c.ShipmentGLS.mutate(ctx, m)
	case *ShipmentHistoryMutation:
		return c.ShipmentHistory.mutate(ctx, m)
	case *ShipmentPalletMutation:
		return c.ShipmentPallet.mutate(ctx, m)
	case *ShipmentParcelMutation:
		return c.ShipmentParcel.mutate(ctx, m)
	case *ShipmentPostNordMutation:
		return c.ShipmentPostNord.mutate(ctx, m)
	case *ShipmentUSPSMutation:
		return c.ShipmentUSPS.mutate(ctx, m)
	case *SignupOptionsMutation:
		return c.SignupOptions.mutate(ctx, m)
	case *SystemEventsMutation:
		return c.SystemEvents.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserSeatMutation:
		return c.UserSeat.mutate(ctx, m)
	case *WorkspaceRecentScanMutation:
		return c.WorkspaceRecentScan.mutate(ctx, m)
	case *WorkstationMutation:
		return c.Workstation.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APITokenClient is a client for the APIToken schema.
type APITokenClient struct {
	config
}

// NewAPITokenClient returns a client for the APIToken from the given config.
func NewAPITokenClient(c config) *APITokenClient {
	return &APITokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apitoken.Hooks(f(g(h())))`.
func (c *APITokenClient) Use(hooks ...Hook) {
	c.hooks.APIToken = append(c.hooks.APIToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apitoken.Intercept(f(g(h())))`.
func (c *APITokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.APIToken = append(c.inters.APIToken, interceptors...)
}

// Create returns a builder for creating a APIToken entity.
func (c *APITokenClient) Create() *APITokenCreate {
	mutation := newAPITokenMutation(c.config, OpCreate)
	return &APITokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APIToken entities.
func (c *APITokenClient) CreateBulk(builders ...*APITokenCreate) *APITokenCreateBulk {
	return &APITokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *APITokenClient) MapCreateBulk(slice any, setFunc func(*APITokenCreate, int)) *APITokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &APITokenCreateBulk{err: fmt.Errorf("calling to APITokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*APITokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &APITokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APIToken.
func (c *APITokenClient) Update() *APITokenUpdate {
	mutation := newAPITokenMutation(c.config, OpUpdate)
	return &APITokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APITokenClient) UpdateOne(at *APIToken) *APITokenUpdateOne {
	mutation := newAPITokenMutation(c.config, OpUpdateOne, withAPIToken(at))
	return &APITokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APITokenClient) UpdateOneID(id pulid.ID) *APITokenUpdateOne {
	mutation := newAPITokenMutation(c.config, OpUpdateOne, withAPITokenID(id))
	return &APITokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APIToken.
func (c *APITokenClient) Delete() *APITokenDelete {
	mutation := newAPITokenMutation(c.config, OpDelete)
	return &APITokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APITokenClient) DeleteOne(at *APIToken) *APITokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APITokenClient) DeleteOneID(id pulid.ID) *APITokenDeleteOne {
	builder := c.Delete().Where(apitoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APITokenDeleteOne{builder}
}

// Query returns a query builder for APIToken.
func (c *APITokenClient) Query() *APITokenQuery {
	return &APITokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPIToken},
		inters: c.Interceptors(),
	}
}

// Get returns a APIToken entity by its id.
func (c *APITokenClient) Get(ctx context.Context, id pulid.ID) (*APIToken, error) {
	return c.Query().Where(apitoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APITokenClient) GetX(ctx context.Context, id pulid.ID) *APIToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a APIToken.
func (c *APITokenClient) QueryTenant(at *APIToken) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, apitoken.TenantTable, apitoken.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a APIToken.
func (c *APITokenClient) QueryUser(at *APIToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apitoken.Table, apitoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, apitoken.UserTable, apitoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *APITokenClient) Hooks() []Hook {
	hooks := c.hooks.APIToken
	return append(hooks[:len(hooks):len(hooks)], apitoken.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *APITokenClient) Interceptors() []Interceptor {
	return c.inters.APIToken
}

func (c *APITokenClient) mutate(ctx context.Context, m *APITokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APITokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APITokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APITokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APITokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APIToken mutation op: %q", m.Op())
	}
}

// AccessRightClient is a client for the AccessRight schema.
type AccessRightClient struct {
	config
}

// NewAccessRightClient returns a client for the AccessRight from the given config.
func NewAccessRightClient(c config) *AccessRightClient {
	return &AccessRightClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accessright.Hooks(f(g(h())))`.
func (c *AccessRightClient) Use(hooks ...Hook) {
	c.hooks.AccessRight = append(c.hooks.AccessRight, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accessright.Intercept(f(g(h())))`.
func (c *AccessRightClient) Intercept(interceptors ...Interceptor) {
	c.inters.AccessRight = append(c.inters.AccessRight, interceptors...)
}

// Create returns a builder for creating a AccessRight entity.
func (c *AccessRightClient) Create() *AccessRightCreate {
	mutation := newAccessRightMutation(c.config, OpCreate)
	return &AccessRightCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccessRight entities.
func (c *AccessRightClient) CreateBulk(builders ...*AccessRightCreate) *AccessRightCreateBulk {
	return &AccessRightCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AccessRightClient) MapCreateBulk(slice any, setFunc func(*AccessRightCreate, int)) *AccessRightCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AccessRightCreateBulk{err: fmt.Errorf("calling to AccessRightClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AccessRightCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AccessRightCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessRight.
func (c *AccessRightClient) Update() *AccessRightUpdate {
	mutation := newAccessRightMutation(c.config, OpUpdate)
	return &AccessRightUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessRightClient) UpdateOne(ar *AccessRight) *AccessRightUpdateOne {
	mutation := newAccessRightMutation(c.config, OpUpdateOne, withAccessRight(ar))
	return &AccessRightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessRightClient) UpdateOneID(id pulid.ID) *AccessRightUpdateOne {
	mutation := newAccessRightMutation(c.config, OpUpdateOne, withAccessRightID(id))
	return &AccessRightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessRight.
func (c *AccessRightClient) Delete() *AccessRightDelete {
	mutation := newAccessRightMutation(c.config, OpDelete)
	return &AccessRightDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccessRightClient) DeleteOne(ar *AccessRight) *AccessRightDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccessRightClient) DeleteOneID(id pulid.ID) *AccessRightDeleteOne {
	builder := c.Delete().Where(accessright.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessRightDeleteOne{builder}
}

// Query returns a query builder for AccessRight.
func (c *AccessRightClient) Query() *AccessRightQuery {
	return &AccessRightQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccessRight},
		inters: c.Interceptors(),
	}
}

// Get returns a AccessRight entity by its id.
func (c *AccessRightClient) Get(ctx context.Context, id pulid.ID) (*AccessRight, error) {
	return c.Query().Where(accessright.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessRightClient) GetX(ctx context.Context, id pulid.ID) *AccessRight {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssignedAccessRight queries the assigned_access_right edge of a AccessRight.
func (c *AccessRightClient) QueryAssignedAccessRight(ar *AccessRight) *SeatGroupQuery {
	query := (&SeatGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accessright.Table, accessright.FieldID, id),
			sqlgraph.To(seatgroup.Table, seatgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, accessright.AssignedAccessRightTable, accessright.AssignedAccessRightPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeatGroupAccessRight queries the seat_group_access_right edge of a AccessRight.
func (c *AccessRightClient) QuerySeatGroupAccessRight(ar *AccessRight) *SeatGroupAccessRightQuery {
	query := (&SeatGroupAccessRightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accessright.Table, accessright.FieldID, id),
			sqlgraph.To(seatgroupaccessright.Table, seatgroupaccessright.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, accessright.SeatGroupAccessRightTable, accessright.SeatGroupAccessRightColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccessRightClient) Hooks() []Hook {
	hooks := c.hooks.AccessRight
	return append(hooks[:len(hooks):len(hooks)], accessright.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AccessRightClient) Interceptors() []Interceptor {
	return c.inters.AccessRight
}

func (c *AccessRightClient) mutate(ctx context.Context, m *AccessRightMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccessRightCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccessRightUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccessRightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccessRightDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AccessRight mutation op: %q", m.Op())
	}
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `address.Intercept(f(g(h())))`.
func (c *AddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.Address = append(c.inters.Address, interceptors...)
}

// Create returns a builder for creating a Address entity.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddressClient) MapCreateBulk(slice any, setFunc func(*AddressCreate, int)) *AddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddressCreateBulk{err: fmt.Errorf("calling to AddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id pulid.ID) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressClient) DeleteOneID(id pulid.ID) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id pulid.ID) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id pulid.ID) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Address.
func (c *AddressClient) QueryTenant(a *Address) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, address.TenantTable, address.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipientColli queries the recipient_colli edge of a Address.
func (c *AddressClient) QueryRecipientColli(a *Address) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.RecipientColliTable, address.RecipientColliColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipientConsolidation queries the recipient_consolidation edge of a Address.
func (c *AddressClient) QueryRecipientConsolidation(a *Address) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, address.RecipientConsolidationTable, address.RecipientConsolidationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompanyAddress queries the company_address edge of a Address.
func (c *AddressClient) QueryCompanyAddress(a *Address) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.CompanyAddressTable, address.CompanyAddressColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Address.
func (c *AddressClient) QueryLocation(a *Address) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.LocationTable, address.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySenderColli queries the sender_colli edge of a Address.
func (c *AddressClient) QuerySenderColli(a *Address) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.SenderColliTable, address.SenderColliColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySenderConsolidation queries the sender_consolidation edge of a Address.
func (c *AddressClient) QuerySenderConsolidation(a *Address) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, address.SenderConsolidationTable, address.SenderConsolidationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnSenderColli queries the return_sender_colli edge of a Address.
func (c *AddressClient) QueryReturnSenderColli(a *Address) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.ReturnSenderColliTable, address.ReturnSenderColliColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnRecipientColli queries the return_recipient_colli edge of a Address.
func (c *AddressClient) QueryReturnRecipientColli(a *Address) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, address.ReturnRecipientColliTable, address.ReturnRecipientColliColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountry queries the country edge of a Address.
func (c *AddressClient) QueryCountry(a *Address) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, address.CountryTable, address.CountryColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	hooks := c.hooks.Address
	return append(hooks[:len(hooks):len(hooks)], address.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AddressClient) Interceptors() []Interceptor {
	return c.inters.Address
}

func (c *AddressClient) mutate(ctx context.Context, m *AddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Address mutation op: %q", m.Op())
	}
}

// AddressGlobalClient is a client for the AddressGlobal schema.
type AddressGlobalClient struct {
	config
}

// NewAddressGlobalClient returns a client for the AddressGlobal from the given config.
func NewAddressGlobalClient(c config) *AddressGlobalClient {
	return &AddressGlobalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `addressglobal.Hooks(f(g(h())))`.
func (c *AddressGlobalClient) Use(hooks ...Hook) {
	c.hooks.AddressGlobal = append(c.hooks.AddressGlobal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `addressglobal.Intercept(f(g(h())))`.
func (c *AddressGlobalClient) Intercept(interceptors ...Interceptor) {
	c.inters.AddressGlobal = append(c.inters.AddressGlobal, interceptors...)
}

// Create returns a builder for creating a AddressGlobal entity.
func (c *AddressGlobalClient) Create() *AddressGlobalCreate {
	mutation := newAddressGlobalMutation(c.config, OpCreate)
	return &AddressGlobalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AddressGlobal entities.
func (c *AddressGlobalClient) CreateBulk(builders ...*AddressGlobalCreate) *AddressGlobalCreateBulk {
	return &AddressGlobalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddressGlobalClient) MapCreateBulk(slice any, setFunc func(*AddressGlobalCreate, int)) *AddressGlobalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddressGlobalCreateBulk{err: fmt.Errorf("calling to AddressGlobalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddressGlobalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddressGlobalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AddressGlobal.
func (c *AddressGlobalClient) Update() *AddressGlobalUpdate {
	mutation := newAddressGlobalMutation(c.config, OpUpdate)
	return &AddressGlobalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressGlobalClient) UpdateOne(ag *AddressGlobal) *AddressGlobalUpdateOne {
	mutation := newAddressGlobalMutation(c.config, OpUpdateOne, withAddressGlobal(ag))
	return &AddressGlobalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressGlobalClient) UpdateOneID(id pulid.ID) *AddressGlobalUpdateOne {
	mutation := newAddressGlobalMutation(c.config, OpUpdateOne, withAddressGlobalID(id))
	return &AddressGlobalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AddressGlobal.
func (c *AddressGlobalClient) Delete() *AddressGlobalDelete {
	mutation := newAddressGlobalMutation(c.config, OpDelete)
	return &AddressGlobalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressGlobalClient) DeleteOne(ag *AddressGlobal) *AddressGlobalDeleteOne {
	return c.DeleteOneID(ag.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressGlobalClient) DeleteOneID(id pulid.ID) *AddressGlobalDeleteOne {
	builder := c.Delete().Where(addressglobal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressGlobalDeleteOne{builder}
}

// Query returns a query builder for AddressGlobal.
func (c *AddressGlobalClient) Query() *AddressGlobalQuery {
	return &AddressGlobalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddressGlobal},
		inters: c.Interceptors(),
	}
}

// Get returns a AddressGlobal entity by its id.
func (c *AddressGlobalClient) Get(ctx context.Context, id pulid.ID) (*AddressGlobal, error) {
	return c.Query().Where(addressglobal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressGlobalClient) GetX(ctx context.Context, id pulid.ID) *AddressGlobal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShopPostNordDelivery queries the parcel_shop_post_nord_delivery edge of a AddressGlobal.
func (c *AddressGlobalClient) QueryParcelShopPostNordDelivery(ag *AddressGlobal) *ParcelShopPostNordQuery {
	query := (&ParcelShopPostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addressglobal.Table, addressglobal.FieldID, id),
			sqlgraph.To(parcelshoppostnord.Table, parcelshoppostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, addressglobal.ParcelShopPostNordDeliveryTable, addressglobal.ParcelShopPostNordDeliveryColumn),
		)
		fromV = sqlgraph.Neighbors(ag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShopBringDelivery queries the parcel_shop_bring_delivery edge of a AddressGlobal.
func (c *AddressGlobalClient) QueryParcelShopBringDelivery(ag *AddressGlobal) *ParcelShopBringQuery {
	query := (&ParcelShopBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addressglobal.Table, addressglobal.FieldID, id),
			sqlgraph.To(parcelshopbring.Table, parcelshopbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, addressglobal.ParcelShopBringDeliveryTable, addressglobal.ParcelShopBringDeliveryColumn),
		)
		fromV = sqlgraph.Neighbors(ag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShop queries the parcel_shop edge of a AddressGlobal.
func (c *AddressGlobalClient) QueryParcelShop(ag *AddressGlobal) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addressglobal.Table, addressglobal.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, addressglobal.ParcelShopTable, addressglobal.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(ag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountry queries the country edge of a AddressGlobal.
func (c *AddressGlobalClient) QueryCountry(ag *AddressGlobal) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ag.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(addressglobal.Table, addressglobal.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, addressglobal.CountryTable, addressglobal.CountryColumn),
		)
		fromV = sqlgraph.Neighbors(ag.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressGlobalClient) Hooks() []Hook {
	hooks := c.hooks.AddressGlobal
	return append(hooks[:len(hooks):len(hooks)], addressglobal.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AddressGlobalClient) Interceptors() []Interceptor {
	return c.inters.AddressGlobal
}

func (c *AddressGlobalClient) mutate(ctx context.Context, m *AddressGlobalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressGlobalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressGlobalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressGlobalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressGlobalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AddressGlobal mutation op: %q", m.Op())
	}
}

// BusinessHoursPeriodClient is a client for the BusinessHoursPeriod schema.
type BusinessHoursPeriodClient struct {
	config
}

// NewBusinessHoursPeriodClient returns a client for the BusinessHoursPeriod from the given config.
func NewBusinessHoursPeriodClient(c config) *BusinessHoursPeriodClient {
	return &BusinessHoursPeriodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `businesshoursperiod.Hooks(f(g(h())))`.
func (c *BusinessHoursPeriodClient) Use(hooks ...Hook) {
	c.hooks.BusinessHoursPeriod = append(c.hooks.BusinessHoursPeriod, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `businesshoursperiod.Intercept(f(g(h())))`.
func (c *BusinessHoursPeriodClient) Intercept(interceptors ...Interceptor) {
	c.inters.BusinessHoursPeriod = append(c.inters.BusinessHoursPeriod, interceptors...)
}

// Create returns a builder for creating a BusinessHoursPeriod entity.
func (c *BusinessHoursPeriodClient) Create() *BusinessHoursPeriodCreate {
	mutation := newBusinessHoursPeriodMutation(c.config, OpCreate)
	return &BusinessHoursPeriodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BusinessHoursPeriod entities.
func (c *BusinessHoursPeriodClient) CreateBulk(builders ...*BusinessHoursPeriodCreate) *BusinessHoursPeriodCreateBulk {
	return &BusinessHoursPeriodCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusinessHoursPeriodClient) MapCreateBulk(slice any, setFunc func(*BusinessHoursPeriodCreate, int)) *BusinessHoursPeriodCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusinessHoursPeriodCreateBulk{err: fmt.Errorf("calling to BusinessHoursPeriodClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusinessHoursPeriodCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusinessHoursPeriodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BusinessHoursPeriod.
func (c *BusinessHoursPeriodClient) Update() *BusinessHoursPeriodUpdate {
	mutation := newBusinessHoursPeriodMutation(c.config, OpUpdate)
	return &BusinessHoursPeriodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessHoursPeriodClient) UpdateOne(bhp *BusinessHoursPeriod) *BusinessHoursPeriodUpdateOne {
	mutation := newBusinessHoursPeriodMutation(c.config, OpUpdateOne, withBusinessHoursPeriod(bhp))
	return &BusinessHoursPeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessHoursPeriodClient) UpdateOneID(id pulid.ID) *BusinessHoursPeriodUpdateOne {
	mutation := newBusinessHoursPeriodMutation(c.config, OpUpdateOne, withBusinessHoursPeriodID(id))
	return &BusinessHoursPeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BusinessHoursPeriod.
func (c *BusinessHoursPeriodClient) Delete() *BusinessHoursPeriodDelete {
	mutation := newBusinessHoursPeriodMutation(c.config, OpDelete)
	return &BusinessHoursPeriodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessHoursPeriodClient) DeleteOne(bhp *BusinessHoursPeriod) *BusinessHoursPeriodDeleteOne {
	return c.DeleteOneID(bhp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessHoursPeriodClient) DeleteOneID(id pulid.ID) *BusinessHoursPeriodDeleteOne {
	builder := c.Delete().Where(businesshoursperiod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessHoursPeriodDeleteOne{builder}
}

// Query returns a query builder for BusinessHoursPeriod.
func (c *BusinessHoursPeriodClient) Query() *BusinessHoursPeriodQuery {
	return &BusinessHoursPeriodQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusinessHoursPeriod},
		inters: c.Interceptors(),
	}
}

// Get returns a BusinessHoursPeriod entity by its id.
func (c *BusinessHoursPeriodClient) Get(ctx context.Context, id pulid.ID) (*BusinessHoursPeriod, error) {
	return c.Query().Where(businesshoursperiod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessHoursPeriodClient) GetX(ctx context.Context, id pulid.ID) *BusinessHoursPeriod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShop queries the parcel_shop edge of a BusinessHoursPeriod.
func (c *BusinessHoursPeriodClient) QueryParcelShop(bhp *BusinessHoursPeriod) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bhp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(businesshoursperiod.Table, businesshoursperiod.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, businesshoursperiod.ParcelShopTable, businesshoursperiod.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(bhp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessHoursPeriodClient) Hooks() []Hook {
	hooks := c.hooks.BusinessHoursPeriod
	return append(hooks[:len(hooks):len(hooks)], businesshoursperiod.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BusinessHoursPeriodClient) Interceptors() []Interceptor {
	return c.inters.BusinessHoursPeriod
}

func (c *BusinessHoursPeriodClient) mutate(ctx context.Context, m *BusinessHoursPeriodMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessHoursPeriodCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessHoursPeriodUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessHoursPeriodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessHoursPeriodDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BusinessHoursPeriod mutation op: %q", m.Op())
	}
}

// CarrierClient is a client for the Carrier schema.
type CarrierClient struct {
	config
}

// NewCarrierClient returns a client for the Carrier from the given config.
func NewCarrierClient(c config) *CarrierClient {
	return &CarrierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrier.Hooks(f(g(h())))`.
func (c *CarrierClient) Use(hooks ...Hook) {
	c.hooks.Carrier = append(c.hooks.Carrier, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrier.Intercept(f(g(h())))`.
func (c *CarrierClient) Intercept(interceptors ...Interceptor) {
	c.inters.Carrier = append(c.inters.Carrier, interceptors...)
}

// Create returns a builder for creating a Carrier entity.
func (c *CarrierClient) Create() *CarrierCreate {
	mutation := newCarrierMutation(c.config, OpCreate)
	return &CarrierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Carrier entities.
func (c *CarrierClient) CreateBulk(builders ...*CarrierCreate) *CarrierCreateBulk {
	return &CarrierCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierClient) MapCreateBulk(slice any, setFunc func(*CarrierCreate, int)) *CarrierCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierCreateBulk{err: fmt.Errorf("calling to CarrierClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Carrier.
func (c *CarrierClient) Update() *CarrierUpdate {
	mutation := newCarrierMutation(c.config, OpUpdate)
	return &CarrierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierClient) UpdateOne(ca *Carrier) *CarrierUpdateOne {
	mutation := newCarrierMutation(c.config, OpUpdateOne, withCarrier(ca))
	return &CarrierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierClient) UpdateOneID(id pulid.ID) *CarrierUpdateOne {
	mutation := newCarrierMutation(c.config, OpUpdateOne, withCarrierID(id))
	return &CarrierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Carrier.
func (c *CarrierClient) Delete() *CarrierDelete {
	mutation := newCarrierMutation(c.config, OpDelete)
	return &CarrierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierClient) DeleteOne(ca *Carrier) *CarrierDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierClient) DeleteOneID(id pulid.ID) *CarrierDeleteOne {
	builder := c.Delete().Where(carrier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierDeleteOne{builder}
}

// Query returns a query builder for Carrier.
func (c *CarrierClient) Query() *CarrierQuery {
	return &CarrierQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrier},
		inters: c.Interceptors(),
	}
}

// Get returns a Carrier entity by its id.
func (c *CarrierClient) Get(ctx context.Context, id pulid.ID) (*Carrier, error) {
	return c.Query().Where(carrier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierClient) GetX(ctx context.Context, id pulid.ID) *Carrier {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Carrier.
func (c *CarrierClient) QueryTenant(ca *Carrier) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrier.TenantTable, carrier.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierBrand queries the carrier_brand edge of a Carrier.
func (c *CarrierClient) QueryCarrierBrand(ca *Carrier) *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrier.CarrierBrandTable, carrier.CarrierBrandColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierDAO queries the carrier_dao edge of a Carrier.
func (c *CarrierClient) QueryCarrierDAO(ca *Carrier) *CarrierDAOQuery {
	query := (&CarrierDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierdao.Table, carrierdao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierDAOTable, carrier.CarrierDAOColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierDF queries the carrier_df edge of a Carrier.
func (c *CarrierClient) QueryCarrierDF(ca *Carrier) *CarrierDFQuery {
	query := (&CarrierDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierdf.Table, carrierdf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierDFTable, carrier.CarrierDFColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierDSV queries the carrier_dsv edge of a Carrier.
func (c *CarrierClient) QueryCarrierDSV(ca *Carrier) *CarrierDSVQuery {
	query := (&CarrierDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierdsv.Table, carrierdsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierDSVTable, carrier.CarrierDSVColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierEasyPost queries the carrier_easy_post edge of a Carrier.
func (c *CarrierClient) QueryCarrierEasyPost(ca *Carrier) *CarrierEasyPostQuery {
	query := (&CarrierEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carriereasypost.Table, carriereasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierEasyPostTable, carrier.CarrierEasyPostColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierGLS queries the carrier_gls edge of a Carrier.
func (c *CarrierClient) QueryCarrierGLS(ca *Carrier) *CarrierGLSQuery {
	query := (&CarrierGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carriergls.Table, carriergls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierGLSTable, carrier.CarrierGLSColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierPostNord queries the carrier_post_nord edge of a Carrier.
func (c *CarrierClient) QueryCarrierPostNord(ca *Carrier) *CarrierPostNordQuery {
	query := (&CarrierPostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierpostnord.Table, carrierpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierPostNordTable, carrier.CarrierPostNordColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierUSPS queries the carrier_usps edge of a Carrier.
func (c *CarrierClient) QueryCarrierUSPS(ca *Carrier) *CarrierUSPSQuery {
	query := (&CarrierUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierusps.Table, carrierusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierUSPSTable, carrier.CarrierUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierBring queries the carrier_bring edge of a Carrier.
func (c *CarrierClient) QueryCarrierBring(ca *Carrier) *CarrierBringQuery {
	query := (&CarrierBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(carrierbring.Table, carrierbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrier.CarrierBringTable, carrier.CarrierBringColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a Carrier.
func (c *CarrierClient) QueryDeliveryOption(ca *Carrier) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrier.DeliveryOptionTable, carrier.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a Carrier.
func (c *CarrierClient) QueryShipment(ca *Carrier) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrier.Table, carrier.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrier.ShipmentTable, carrier.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierClient) Hooks() []Hook {
	hooks := c.hooks.Carrier
	return append(hooks[:len(hooks):len(hooks)], carrier.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierClient) Interceptors() []Interceptor {
	return c.inters.Carrier
}

func (c *CarrierClient) mutate(ctx context.Context, m *CarrierMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Carrier mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceBringClient is a client for the CarrierAdditionalServiceBring schema.
type CarrierAdditionalServiceBringClient struct {
	config
}

// NewCarrierAdditionalServiceBringClient returns a client for the CarrierAdditionalServiceBring from the given config.
func NewCarrierAdditionalServiceBringClient(c config) *CarrierAdditionalServiceBringClient {
	return &CarrierAdditionalServiceBringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalservicebring.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceBringClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceBring = append(c.hooks.CarrierAdditionalServiceBring, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalservicebring.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceBringClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceBring = append(c.inters.CarrierAdditionalServiceBring, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceBring entity.
func (c *CarrierAdditionalServiceBringClient) Create() *CarrierAdditionalServiceBringCreate {
	mutation := newCarrierAdditionalServiceBringMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceBringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceBring entities.
func (c *CarrierAdditionalServiceBringClient) CreateBulk(builders ...*CarrierAdditionalServiceBringCreate) *CarrierAdditionalServiceBringCreateBulk {
	return &CarrierAdditionalServiceBringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceBringClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceBringCreate, int)) *CarrierAdditionalServiceBringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceBringCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceBringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceBringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceBringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceBring.
func (c *CarrierAdditionalServiceBringClient) Update() *CarrierAdditionalServiceBringUpdate {
	mutation := newCarrierAdditionalServiceBringMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceBringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceBringClient) UpdateOne(casb *CarrierAdditionalServiceBring) *CarrierAdditionalServiceBringUpdateOne {
	mutation := newCarrierAdditionalServiceBringMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceBring(casb))
	return &CarrierAdditionalServiceBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceBringClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceBringUpdateOne {
	mutation := newCarrierAdditionalServiceBringMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceBringID(id))
	return &CarrierAdditionalServiceBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceBring.
func (c *CarrierAdditionalServiceBringClient) Delete() *CarrierAdditionalServiceBringDelete {
	mutation := newCarrierAdditionalServiceBringMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceBringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceBringClient) DeleteOne(casb *CarrierAdditionalServiceBring) *CarrierAdditionalServiceBringDeleteOne {
	return c.DeleteOneID(casb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceBringClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceBringDeleteOne {
	builder := c.Delete().Where(carrieradditionalservicebring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceBringDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceBring.
func (c *CarrierAdditionalServiceBringClient) Query() *CarrierAdditionalServiceBringQuery {
	return &CarrierAdditionalServiceBringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceBring},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceBring entity by its id.
func (c *CarrierAdditionalServiceBringClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceBring, error) {
	return c.Query().Where(carrieradditionalservicebring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceBringClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceBring {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceBring queries the carrier_service_bring edge of a CarrierAdditionalServiceBring.
func (c *CarrierAdditionalServiceBringClient) QueryCarrierServiceBring(casb *CarrierAdditionalServiceBring) *CarrierServiceBringQuery {
	query := (&CarrierServiceBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicebring.Table, carrieradditionalservicebring.FieldID, id),
			sqlgraph.To(carrierservicebring.Table, carrierservicebring.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalservicebring.CarrierServiceBringTable, carrieradditionalservicebring.CarrierServiceBringColumn),
		)
		fromV = sqlgraph.Neighbors(casb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionBring queries the delivery_option_bring edge of a CarrierAdditionalServiceBring.
func (c *CarrierAdditionalServiceBringClient) QueryDeliveryOptionBring(casb *CarrierAdditionalServiceBring) *DeliveryOptionBringQuery {
	query := (&DeliveryOptionBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicebring.Table, carrieradditionalservicebring.FieldID, id),
			sqlgraph.To(deliveryoptionbring.Table, deliveryoptionbring.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicebring.DeliveryOptionBringTable, carrieradditionalservicebring.DeliveryOptionBringPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceBringClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceBring
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalservicebring.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceBringClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceBring
}

func (c *CarrierAdditionalServiceBringClient) mutate(ctx context.Context, m *CarrierAdditionalServiceBringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceBringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceBringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceBringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceBring mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceDAOClient is a client for the CarrierAdditionalServiceDAO schema.
type CarrierAdditionalServiceDAOClient struct {
	config
}

// NewCarrierAdditionalServiceDAOClient returns a client for the CarrierAdditionalServiceDAO from the given config.
func NewCarrierAdditionalServiceDAOClient(c config) *CarrierAdditionalServiceDAOClient {
	return &CarrierAdditionalServiceDAOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalservicedao.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceDAOClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceDAO = append(c.hooks.CarrierAdditionalServiceDAO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalservicedao.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceDAOClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceDAO = append(c.inters.CarrierAdditionalServiceDAO, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceDAO entity.
func (c *CarrierAdditionalServiceDAOClient) Create() *CarrierAdditionalServiceDAOCreate {
	mutation := newCarrierAdditionalServiceDAOMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceDAOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceDAO entities.
func (c *CarrierAdditionalServiceDAOClient) CreateBulk(builders ...*CarrierAdditionalServiceDAOCreate) *CarrierAdditionalServiceDAOCreateBulk {
	return &CarrierAdditionalServiceDAOCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceDAOClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceDAOCreate, int)) *CarrierAdditionalServiceDAOCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceDAOCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceDAOClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceDAOCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceDAOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceDAO.
func (c *CarrierAdditionalServiceDAOClient) Update() *CarrierAdditionalServiceDAOUpdate {
	mutation := newCarrierAdditionalServiceDAOMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceDAOClient) UpdateOne(casd *CarrierAdditionalServiceDAO) *CarrierAdditionalServiceDAOUpdateOne {
	mutation := newCarrierAdditionalServiceDAOMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceDAO(casd))
	return &CarrierAdditionalServiceDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceDAOClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceDAOUpdateOne {
	mutation := newCarrierAdditionalServiceDAOMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceDAOID(id))
	return &CarrierAdditionalServiceDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceDAO.
func (c *CarrierAdditionalServiceDAOClient) Delete() *CarrierAdditionalServiceDAODelete {
	mutation := newCarrierAdditionalServiceDAOMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceDAODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceDAOClient) DeleteOne(casd *CarrierAdditionalServiceDAO) *CarrierAdditionalServiceDAODeleteOne {
	return c.DeleteOneID(casd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceDAOClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceDAODeleteOne {
	builder := c.Delete().Where(carrieradditionalservicedao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceDAODeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceDAO.
func (c *CarrierAdditionalServiceDAOClient) Query() *CarrierAdditionalServiceDAOQuery {
	return &CarrierAdditionalServiceDAOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceDAO},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceDAO entity by its id.
func (c *CarrierAdditionalServiceDAOClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceDAO, error) {
	return c.Query().Where(carrieradditionalservicedao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceDAOClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceDAO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceDAO queries the carrier_service_dao edge of a CarrierAdditionalServiceDAO.
func (c *CarrierAdditionalServiceDAOClient) QueryCarrierServiceDAO(casd *CarrierAdditionalServiceDAO) *CarrierServiceDAOQuery {
	query := (&CarrierServiceDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedao.Table, carrieradditionalservicedao.FieldID, id),
			sqlgraph.To(carrierservicedao.Table, carrierservicedao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedao.CarrierServiceDAOTable, carrieradditionalservicedao.CarrierServiceDAOPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionDAO queries the delivery_option_dao edge of a CarrierAdditionalServiceDAO.
func (c *CarrierAdditionalServiceDAOClient) QueryDeliveryOptionDAO(casd *CarrierAdditionalServiceDAO) *DeliveryOptionDAOQuery {
	query := (&DeliveryOptionDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedao.Table, carrieradditionalservicedao.FieldID, id),
			sqlgraph.To(deliveryoptiondao.Table, deliveryoptiondao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedao.DeliveryOptionDAOTable, carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceDAOClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceDAO
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalservicedao.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceDAOClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceDAO
}

func (c *CarrierAdditionalServiceDAOClient) mutate(ctx context.Context, m *CarrierAdditionalServiceDAOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceDAOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceDAODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceDAO mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceDFClient is a client for the CarrierAdditionalServiceDF schema.
type CarrierAdditionalServiceDFClient struct {
	config
}

// NewCarrierAdditionalServiceDFClient returns a client for the CarrierAdditionalServiceDF from the given config.
func NewCarrierAdditionalServiceDFClient(c config) *CarrierAdditionalServiceDFClient {
	return &CarrierAdditionalServiceDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalservicedf.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceDFClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceDF = append(c.hooks.CarrierAdditionalServiceDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalservicedf.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceDF = append(c.inters.CarrierAdditionalServiceDF, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceDF entity.
func (c *CarrierAdditionalServiceDFClient) Create() *CarrierAdditionalServiceDFCreate {
	mutation := newCarrierAdditionalServiceDFMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceDF entities.
func (c *CarrierAdditionalServiceDFClient) CreateBulk(builders ...*CarrierAdditionalServiceDFCreate) *CarrierAdditionalServiceDFCreateBulk {
	return &CarrierAdditionalServiceDFCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceDFClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceDFCreate, int)) *CarrierAdditionalServiceDFCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceDFCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceDFClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceDFCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceDF.
func (c *CarrierAdditionalServiceDFClient) Update() *CarrierAdditionalServiceDFUpdate {
	mutation := newCarrierAdditionalServiceDFMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceDFClient) UpdateOne(casd *CarrierAdditionalServiceDF) *CarrierAdditionalServiceDFUpdateOne {
	mutation := newCarrierAdditionalServiceDFMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceDF(casd))
	return &CarrierAdditionalServiceDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceDFClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceDFUpdateOne {
	mutation := newCarrierAdditionalServiceDFMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceDFID(id))
	return &CarrierAdditionalServiceDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceDF.
func (c *CarrierAdditionalServiceDFClient) Delete() *CarrierAdditionalServiceDFDelete {
	mutation := newCarrierAdditionalServiceDFMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceDFClient) DeleteOne(casd *CarrierAdditionalServiceDF) *CarrierAdditionalServiceDFDeleteOne {
	return c.DeleteOneID(casd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceDFClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceDFDeleteOne {
	builder := c.Delete().Where(carrieradditionalservicedf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceDFDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceDF.
func (c *CarrierAdditionalServiceDFClient) Query() *CarrierAdditionalServiceDFQuery {
	return &CarrierAdditionalServiceDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceDF},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceDF entity by its id.
func (c *CarrierAdditionalServiceDFClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceDF, error) {
	return c.Query().Where(carrieradditionalservicedf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceDFClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceDF queries the carrier_service_df edge of a CarrierAdditionalServiceDF.
func (c *CarrierAdditionalServiceDFClient) QueryCarrierServiceDF(casd *CarrierAdditionalServiceDF) *CarrierServiceDFQuery {
	query := (&CarrierServiceDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID, id),
			sqlgraph.To(carrierservicedf.Table, carrierservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedf.CarrierServiceDFTable, carrieradditionalservicedf.CarrierServiceDFPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionDF queries the delivery_option_df edge of a CarrierAdditionalServiceDF.
func (c *CarrierAdditionalServiceDFClient) QueryDeliveryOptionDF(casd *CarrierAdditionalServiceDF) *DeliveryOptionDFQuery {
	query := (&DeliveryOptionDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID, id),
			sqlgraph.To(deliveryoptiondf.Table, deliveryoptiondf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedf.DeliveryOptionDFTable, carrieradditionalservicedf.DeliveryOptionDFPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceDFClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceDF
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalservicedf.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceDFClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceDF
}

func (c *CarrierAdditionalServiceDFClient) mutate(ctx context.Context, m *CarrierAdditionalServiceDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceDF mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceDSVClient is a client for the CarrierAdditionalServiceDSV schema.
type CarrierAdditionalServiceDSVClient struct {
	config
}

// NewCarrierAdditionalServiceDSVClient returns a client for the CarrierAdditionalServiceDSV from the given config.
func NewCarrierAdditionalServiceDSVClient(c config) *CarrierAdditionalServiceDSVClient {
	return &CarrierAdditionalServiceDSVClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalservicedsv.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceDSVClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceDSV = append(c.hooks.CarrierAdditionalServiceDSV, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalservicedsv.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceDSVClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceDSV = append(c.inters.CarrierAdditionalServiceDSV, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceDSV entity.
func (c *CarrierAdditionalServiceDSVClient) Create() *CarrierAdditionalServiceDSVCreate {
	mutation := newCarrierAdditionalServiceDSVMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceDSVCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceDSV entities.
func (c *CarrierAdditionalServiceDSVClient) CreateBulk(builders ...*CarrierAdditionalServiceDSVCreate) *CarrierAdditionalServiceDSVCreateBulk {
	return &CarrierAdditionalServiceDSVCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceDSVClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceDSVCreate, int)) *CarrierAdditionalServiceDSVCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceDSVCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceDSVClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceDSVCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceDSVCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceDSV.
func (c *CarrierAdditionalServiceDSVClient) Update() *CarrierAdditionalServiceDSVUpdate {
	mutation := newCarrierAdditionalServiceDSVMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceDSVClient) UpdateOne(casd *CarrierAdditionalServiceDSV) *CarrierAdditionalServiceDSVUpdateOne {
	mutation := newCarrierAdditionalServiceDSVMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceDSV(casd))
	return &CarrierAdditionalServiceDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceDSVClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceDSVUpdateOne {
	mutation := newCarrierAdditionalServiceDSVMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceDSVID(id))
	return &CarrierAdditionalServiceDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceDSV.
func (c *CarrierAdditionalServiceDSVClient) Delete() *CarrierAdditionalServiceDSVDelete {
	mutation := newCarrierAdditionalServiceDSVMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceDSVDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceDSVClient) DeleteOne(casd *CarrierAdditionalServiceDSV) *CarrierAdditionalServiceDSVDeleteOne {
	return c.DeleteOneID(casd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceDSVClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceDSVDeleteOne {
	builder := c.Delete().Where(carrieradditionalservicedsv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceDSVDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceDSV.
func (c *CarrierAdditionalServiceDSVClient) Query() *CarrierAdditionalServiceDSVQuery {
	return &CarrierAdditionalServiceDSVQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceDSV},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceDSV entity by its id.
func (c *CarrierAdditionalServiceDSVClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceDSV, error) {
	return c.Query().Where(carrieradditionalservicedsv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceDSVClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceDSV {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceDSV queries the carrier_service_dsv edge of a CarrierAdditionalServiceDSV.
func (c *CarrierAdditionalServiceDSVClient) QueryCarrierServiceDSV(casd *CarrierAdditionalServiceDSV) *CarrierServiceDSVQuery {
	query := (&CarrierServiceDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.FieldID, id),
			sqlgraph.To(carrierservicedsv.Table, carrierservicedsv.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedsv.CarrierServiceDSVTable, carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionDSV queries the delivery_option_dsv edge of a CarrierAdditionalServiceDSV.
func (c *CarrierAdditionalServiceDSVClient) QueryDeliveryOptionDSV(casd *CarrierAdditionalServiceDSV) *DeliveryOptionDSVQuery {
	query := (&DeliveryOptionDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.FieldID, id),
			sqlgraph.To(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedsv.DeliveryOptionDSVTable, carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceDSVClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceDSV
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalservicedsv.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceDSVClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceDSV
}

func (c *CarrierAdditionalServiceDSVClient) mutate(ctx context.Context, m *CarrierAdditionalServiceDSVMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceDSVCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceDSVDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceDSV mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceEasyPostClient is a client for the CarrierAdditionalServiceEasyPost schema.
type CarrierAdditionalServiceEasyPostClient struct {
	config
}

// NewCarrierAdditionalServiceEasyPostClient returns a client for the CarrierAdditionalServiceEasyPost from the given config.
func NewCarrierAdditionalServiceEasyPostClient(c config) *CarrierAdditionalServiceEasyPostClient {
	return &CarrierAdditionalServiceEasyPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalserviceeasypost.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceEasyPostClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceEasyPost = append(c.hooks.CarrierAdditionalServiceEasyPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalserviceeasypost.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceEasyPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceEasyPost = append(c.inters.CarrierAdditionalServiceEasyPost, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceEasyPost entity.
func (c *CarrierAdditionalServiceEasyPostClient) Create() *CarrierAdditionalServiceEasyPostCreate {
	mutation := newCarrierAdditionalServiceEasyPostMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceEasyPost entities.
func (c *CarrierAdditionalServiceEasyPostClient) CreateBulk(builders ...*CarrierAdditionalServiceEasyPostCreate) *CarrierAdditionalServiceEasyPostCreateBulk {
	return &CarrierAdditionalServiceEasyPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceEasyPostClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceEasyPostCreate, int)) *CarrierAdditionalServiceEasyPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceEasyPostCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceEasyPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceEasyPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceEasyPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceEasyPost.
func (c *CarrierAdditionalServiceEasyPostClient) Update() *CarrierAdditionalServiceEasyPostUpdate {
	mutation := newCarrierAdditionalServiceEasyPostMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceEasyPostClient) UpdateOne(casep *CarrierAdditionalServiceEasyPost) *CarrierAdditionalServiceEasyPostUpdateOne {
	mutation := newCarrierAdditionalServiceEasyPostMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceEasyPost(casep))
	return &CarrierAdditionalServiceEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceEasyPostClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceEasyPostUpdateOne {
	mutation := newCarrierAdditionalServiceEasyPostMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceEasyPostID(id))
	return &CarrierAdditionalServiceEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceEasyPost.
func (c *CarrierAdditionalServiceEasyPostClient) Delete() *CarrierAdditionalServiceEasyPostDelete {
	mutation := newCarrierAdditionalServiceEasyPostMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceEasyPostClient) DeleteOne(casep *CarrierAdditionalServiceEasyPost) *CarrierAdditionalServiceEasyPostDeleteOne {
	return c.DeleteOneID(casep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceEasyPostClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceEasyPostDeleteOne {
	builder := c.Delete().Where(carrieradditionalserviceeasypost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceEasyPostDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceEasyPost.
func (c *CarrierAdditionalServiceEasyPostClient) Query() *CarrierAdditionalServiceEasyPostQuery {
	return &CarrierAdditionalServiceEasyPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceEasyPost},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceEasyPost entity by its id.
func (c *CarrierAdditionalServiceEasyPostClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceEasyPost, error) {
	return c.Query().Where(carrieradditionalserviceeasypost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceEasyPostClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceEasyPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceEasyPost queries the carrier_service_easy_post edge of a CarrierAdditionalServiceEasyPost.
func (c *CarrierAdditionalServiceEasyPostClient) QueryCarrierServiceEasyPost(casep *CarrierAdditionalServiceEasyPost) *CarrierServiceEasyPostQuery {
	query := (&CarrierServiceEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalserviceeasypost.Table, carrieradditionalserviceeasypost.FieldID, id),
			sqlgraph.To(carrierserviceeasypost.Table, carrierserviceeasypost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalserviceeasypost.CarrierServiceEasyPostTable, carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionEasyPost queries the delivery_option_easy_post edge of a CarrierAdditionalServiceEasyPost.
func (c *CarrierAdditionalServiceEasyPostClient) QueryDeliveryOptionEasyPost(casep *CarrierAdditionalServiceEasyPost) *DeliveryOptionEasyPostQuery {
	query := (&DeliveryOptionEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalserviceeasypost.Table, carrieradditionalserviceeasypost.FieldID, id),
			sqlgraph.To(deliveryoptioneasypost.Table, deliveryoptioneasypost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable, carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceEasyPostClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceEasyPost
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalserviceeasypost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceEasyPostClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceEasyPost
}

func (c *CarrierAdditionalServiceEasyPostClient) mutate(ctx context.Context, m *CarrierAdditionalServiceEasyPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceEasyPost mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceGLSClient is a client for the CarrierAdditionalServiceGLS schema.
type CarrierAdditionalServiceGLSClient struct {
	config
}

// NewCarrierAdditionalServiceGLSClient returns a client for the CarrierAdditionalServiceGLS from the given config.
func NewCarrierAdditionalServiceGLSClient(c config) *CarrierAdditionalServiceGLSClient {
	return &CarrierAdditionalServiceGLSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalservicegls.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceGLSClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceGLS = append(c.hooks.CarrierAdditionalServiceGLS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalservicegls.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceGLSClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceGLS = append(c.inters.CarrierAdditionalServiceGLS, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceGLS entity.
func (c *CarrierAdditionalServiceGLSClient) Create() *CarrierAdditionalServiceGLSCreate {
	mutation := newCarrierAdditionalServiceGLSMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceGLSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceGLS entities.
func (c *CarrierAdditionalServiceGLSClient) CreateBulk(builders ...*CarrierAdditionalServiceGLSCreate) *CarrierAdditionalServiceGLSCreateBulk {
	return &CarrierAdditionalServiceGLSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceGLSClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceGLSCreate, int)) *CarrierAdditionalServiceGLSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceGLSCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceGLSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceGLSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceGLSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) Update() *CarrierAdditionalServiceGLSUpdate {
	mutation := newCarrierAdditionalServiceGLSMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceGLSClient) UpdateOne(casg *CarrierAdditionalServiceGLS) *CarrierAdditionalServiceGLSUpdateOne {
	mutation := newCarrierAdditionalServiceGLSMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceGLS(casg))
	return &CarrierAdditionalServiceGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceGLSClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceGLSUpdateOne {
	mutation := newCarrierAdditionalServiceGLSMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceGLSID(id))
	return &CarrierAdditionalServiceGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) Delete() *CarrierAdditionalServiceGLSDelete {
	mutation := newCarrierAdditionalServiceGLSMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceGLSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceGLSClient) DeleteOne(casg *CarrierAdditionalServiceGLS) *CarrierAdditionalServiceGLSDeleteOne {
	return c.DeleteOneID(casg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceGLSClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceGLSDeleteOne {
	builder := c.Delete().Where(carrieradditionalservicegls.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceGLSDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) Query() *CarrierAdditionalServiceGLSQuery {
	return &CarrierAdditionalServiceGLSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceGLS},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceGLS entity by its id.
func (c *CarrierAdditionalServiceGLSClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceGLS, error) {
	return c.Query().Where(carrieradditionalservicegls.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceGLSClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceGLS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceGLS queries the carrier_service_gls edge of a CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) QueryCarrierServiceGLS(casg *CarrierAdditionalServiceGLS) *CarrierServiceGLSQuery {
	query := (&CarrierServiceGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, id),
			sqlgraph.To(carrierservicegls.Table, carrierservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalservicegls.CarrierServiceGLSTable, carrieradditionalservicegls.CarrierServiceGLSColumn),
		)
		fromV = sqlgraph.Neighbors(casg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionGLS queries the delivery_option_gls edge of a CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) QueryDeliveryOptionGLS(casg *CarrierAdditionalServiceGLS) *DeliveryOptionGLSQuery {
	query := (&DeliveryOptionGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, id),
			sqlgraph.To(deliveryoptiongls.Table, deliveryoptiongls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicegls.DeliveryOptionGLSTable, carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountriesConsignee queries the countries_consignee edge of a CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) QueryCountriesConsignee(casg *CarrierAdditionalServiceGLS) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicegls.CountriesConsigneeTable, carrieradditionalservicegls.CountriesConsigneePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountriesConsignor queries the countries_consignor edge of a CarrierAdditionalServiceGLS.
func (c *CarrierAdditionalServiceGLSClient) QueryCountriesConsignor(casg *CarrierAdditionalServiceGLS) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicegls.CountriesConsignorTable, carrieradditionalservicegls.CountriesConsignorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceGLSClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceGLS
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalservicegls.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceGLSClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceGLS
}

func (c *CarrierAdditionalServiceGLSClient) mutate(ctx context.Context, m *CarrierAdditionalServiceGLSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceGLSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceGLSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceGLS mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServicePostNordClient is a client for the CarrierAdditionalServicePostNord schema.
type CarrierAdditionalServicePostNordClient struct {
	config
}

// NewCarrierAdditionalServicePostNordClient returns a client for the CarrierAdditionalServicePostNord from the given config.
func NewCarrierAdditionalServicePostNordClient(c config) *CarrierAdditionalServicePostNordClient {
	return &CarrierAdditionalServicePostNordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalservicepostnord.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServicePostNordClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServicePostNord = append(c.hooks.CarrierAdditionalServicePostNord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalservicepostnord.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServicePostNordClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServicePostNord = append(c.inters.CarrierAdditionalServicePostNord, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServicePostNord entity.
func (c *CarrierAdditionalServicePostNordClient) Create() *CarrierAdditionalServicePostNordCreate {
	mutation := newCarrierAdditionalServicePostNordMutation(c.config, OpCreate)
	return &CarrierAdditionalServicePostNordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServicePostNord entities.
func (c *CarrierAdditionalServicePostNordClient) CreateBulk(builders ...*CarrierAdditionalServicePostNordCreate) *CarrierAdditionalServicePostNordCreateBulk {
	return &CarrierAdditionalServicePostNordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServicePostNordClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServicePostNordCreate, int)) *CarrierAdditionalServicePostNordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServicePostNordCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServicePostNordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServicePostNordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServicePostNordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) Update() *CarrierAdditionalServicePostNordUpdate {
	mutation := newCarrierAdditionalServicePostNordMutation(c.config, OpUpdate)
	return &CarrierAdditionalServicePostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServicePostNordClient) UpdateOne(caspn *CarrierAdditionalServicePostNord) *CarrierAdditionalServicePostNordUpdateOne {
	mutation := newCarrierAdditionalServicePostNordMutation(c.config, OpUpdateOne, withCarrierAdditionalServicePostNord(caspn))
	return &CarrierAdditionalServicePostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServicePostNordClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServicePostNordUpdateOne {
	mutation := newCarrierAdditionalServicePostNordMutation(c.config, OpUpdateOne, withCarrierAdditionalServicePostNordID(id))
	return &CarrierAdditionalServicePostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) Delete() *CarrierAdditionalServicePostNordDelete {
	mutation := newCarrierAdditionalServicePostNordMutation(c.config, OpDelete)
	return &CarrierAdditionalServicePostNordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServicePostNordClient) DeleteOne(caspn *CarrierAdditionalServicePostNord) *CarrierAdditionalServicePostNordDeleteOne {
	return c.DeleteOneID(caspn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServicePostNordClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServicePostNordDeleteOne {
	builder := c.Delete().Where(carrieradditionalservicepostnord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServicePostNordDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) Query() *CarrierAdditionalServicePostNordQuery {
	return &CarrierAdditionalServicePostNordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServicePostNord},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServicePostNord entity by its id.
func (c *CarrierAdditionalServicePostNordClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServicePostNord, error) {
	return c.Query().Where(carrieradditionalservicepostnord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServicePostNordClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServicePostNord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServicePostNord queries the carrier_service_post_nord edge of a CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) QueryCarrierServicePostNord(caspn *CarrierAdditionalServicePostNord) *CarrierServicePostNordQuery {
	query := (&CarrierServicePostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := caspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, id),
			sqlgraph.To(carrierservicepostnord.Table, carrierservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalservicepostnord.CarrierServicePostNordTable, carrieradditionalservicepostnord.CarrierServicePostNordColumn),
		)
		fromV = sqlgraph.Neighbors(caspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionPostNord queries the delivery_option_post_nord edge of a CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) QueryDeliveryOptionPostNord(caspn *CarrierAdditionalServicePostNord) *DeliveryOptionPostNordQuery {
	query := (&DeliveryOptionPostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := caspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, id),
			sqlgraph.To(deliveryoptionpostnord.Table, deliveryoptionpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicepostnord.DeliveryOptionPostNordTable, carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(caspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountriesConsignee queries the countries_consignee edge of a CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) QueryCountriesConsignee(caspn *CarrierAdditionalServicePostNord) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := caspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicepostnord.CountriesConsigneeTable, carrieradditionalservicepostnord.CountriesConsigneePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(caspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountriesConsignor queries the countries_consignor edge of a CarrierAdditionalServicePostNord.
func (c *CarrierAdditionalServicePostNordClient) QueryCountriesConsignor(caspn *CarrierAdditionalServicePostNord) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := caspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrieradditionalservicepostnord.CountriesConsignorTable, carrieradditionalservicepostnord.CountriesConsignorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(caspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServicePostNordClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServicePostNord
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalservicepostnord.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServicePostNordClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServicePostNord
}

func (c *CarrierAdditionalServicePostNordClient) mutate(ctx context.Context, m *CarrierAdditionalServicePostNordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServicePostNordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServicePostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServicePostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServicePostNordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServicePostNord mutation op: %q", m.Op())
	}
}

// CarrierAdditionalServiceUSPSClient is a client for the CarrierAdditionalServiceUSPS schema.
type CarrierAdditionalServiceUSPSClient struct {
	config
}

// NewCarrierAdditionalServiceUSPSClient returns a client for the CarrierAdditionalServiceUSPS from the given config.
func NewCarrierAdditionalServiceUSPSClient(c config) *CarrierAdditionalServiceUSPSClient {
	return &CarrierAdditionalServiceUSPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrieradditionalserviceusps.Hooks(f(g(h())))`.
func (c *CarrierAdditionalServiceUSPSClient) Use(hooks ...Hook) {
	c.hooks.CarrierAdditionalServiceUSPS = append(c.hooks.CarrierAdditionalServiceUSPS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrieradditionalserviceusps.Intercept(f(g(h())))`.
func (c *CarrierAdditionalServiceUSPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierAdditionalServiceUSPS = append(c.inters.CarrierAdditionalServiceUSPS, interceptors...)
}

// Create returns a builder for creating a CarrierAdditionalServiceUSPS entity.
func (c *CarrierAdditionalServiceUSPSClient) Create() *CarrierAdditionalServiceUSPSCreate {
	mutation := newCarrierAdditionalServiceUSPSMutation(c.config, OpCreate)
	return &CarrierAdditionalServiceUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierAdditionalServiceUSPS entities.
func (c *CarrierAdditionalServiceUSPSClient) CreateBulk(builders ...*CarrierAdditionalServiceUSPSCreate) *CarrierAdditionalServiceUSPSCreateBulk {
	return &CarrierAdditionalServiceUSPSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierAdditionalServiceUSPSClient) MapCreateBulk(slice any, setFunc func(*CarrierAdditionalServiceUSPSCreate, int)) *CarrierAdditionalServiceUSPSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierAdditionalServiceUSPSCreateBulk{err: fmt.Errorf("calling to CarrierAdditionalServiceUSPSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierAdditionalServiceUSPSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierAdditionalServiceUSPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierAdditionalServiceUSPS.
func (c *CarrierAdditionalServiceUSPSClient) Update() *CarrierAdditionalServiceUSPSUpdate {
	mutation := newCarrierAdditionalServiceUSPSMutation(c.config, OpUpdate)
	return &CarrierAdditionalServiceUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierAdditionalServiceUSPSClient) UpdateOne(casu *CarrierAdditionalServiceUSPS) *CarrierAdditionalServiceUSPSUpdateOne {
	mutation := newCarrierAdditionalServiceUSPSMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceUSPS(casu))
	return &CarrierAdditionalServiceUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierAdditionalServiceUSPSClient) UpdateOneID(id pulid.ID) *CarrierAdditionalServiceUSPSUpdateOne {
	mutation := newCarrierAdditionalServiceUSPSMutation(c.config, OpUpdateOne, withCarrierAdditionalServiceUSPSID(id))
	return &CarrierAdditionalServiceUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierAdditionalServiceUSPS.
func (c *CarrierAdditionalServiceUSPSClient) Delete() *CarrierAdditionalServiceUSPSDelete {
	mutation := newCarrierAdditionalServiceUSPSMutation(c.config, OpDelete)
	return &CarrierAdditionalServiceUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierAdditionalServiceUSPSClient) DeleteOne(casu *CarrierAdditionalServiceUSPS) *CarrierAdditionalServiceUSPSDeleteOne {
	return c.DeleteOneID(casu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierAdditionalServiceUSPSClient) DeleteOneID(id pulid.ID) *CarrierAdditionalServiceUSPSDeleteOne {
	builder := c.Delete().Where(carrieradditionalserviceusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierAdditionalServiceUSPSDeleteOne{builder}
}

// Query returns a query builder for CarrierAdditionalServiceUSPS.
func (c *CarrierAdditionalServiceUSPSClient) Query() *CarrierAdditionalServiceUSPSQuery {
	return &CarrierAdditionalServiceUSPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierAdditionalServiceUSPS},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierAdditionalServiceUSPS entity by its id.
func (c *CarrierAdditionalServiceUSPSClient) Get(ctx context.Context, id pulid.ID) (*CarrierAdditionalServiceUSPS, error) {
	return c.Query().Where(carrieradditionalserviceusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierAdditionalServiceUSPSClient) GetX(ctx context.Context, id pulid.ID) *CarrierAdditionalServiceUSPS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServiceUSPS queries the carrier_service_usps edge of a CarrierAdditionalServiceUSPS.
func (c *CarrierAdditionalServiceUSPSClient) QueryCarrierServiceUSPS(casu *CarrierAdditionalServiceUSPS) *CarrierServiceUSPSQuery {
	query := (&CarrierServiceUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID, id),
			sqlgraph.To(carrierserviceusps.Table, carrierserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalserviceusps.CarrierServiceUSPSTable, carrieradditionalserviceusps.CarrierServiceUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(casu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionUSPS queries the delivery_option_usps edge of a CarrierAdditionalServiceUSPS.
func (c *CarrierAdditionalServiceUSPSClient) QueryDeliveryOptionUSPS(casu *CarrierAdditionalServiceUSPS) *DeliveryOptionUSPSQuery {
	query := (&DeliveryOptionUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := casu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID, id),
			sqlgraph.To(deliveryoptionusps.Table, deliveryoptionusps.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalserviceusps.DeliveryOptionUSPSTable, carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(casu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierAdditionalServiceUSPSClient) Hooks() []Hook {
	hooks := c.hooks.CarrierAdditionalServiceUSPS
	return append(hooks[:len(hooks):len(hooks)], carrieradditionalserviceusps.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierAdditionalServiceUSPSClient) Interceptors() []Interceptor {
	return c.inters.CarrierAdditionalServiceUSPS
}

func (c *CarrierAdditionalServiceUSPSClient) mutate(ctx context.Context, m *CarrierAdditionalServiceUSPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierAdditionalServiceUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierAdditionalServiceUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierAdditionalServiceUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierAdditionalServiceUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierAdditionalServiceUSPS mutation op: %q", m.Op())
	}
}

// CarrierBrandClient is a client for the CarrierBrand schema.
type CarrierBrandClient struct {
	config
}

// NewCarrierBrandClient returns a client for the CarrierBrand from the given config.
func NewCarrierBrandClient(c config) *CarrierBrandClient {
	return &CarrierBrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierbrand.Hooks(f(g(h())))`.
func (c *CarrierBrandClient) Use(hooks ...Hook) {
	c.hooks.CarrierBrand = append(c.hooks.CarrierBrand, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierbrand.Intercept(f(g(h())))`.
func (c *CarrierBrandClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierBrand = append(c.inters.CarrierBrand, interceptors...)
}

// Create returns a builder for creating a CarrierBrand entity.
func (c *CarrierBrandClient) Create() *CarrierBrandCreate {
	mutation := newCarrierBrandMutation(c.config, OpCreate)
	return &CarrierBrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierBrand entities.
func (c *CarrierBrandClient) CreateBulk(builders ...*CarrierBrandCreate) *CarrierBrandCreateBulk {
	return &CarrierBrandCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierBrandClient) MapCreateBulk(slice any, setFunc func(*CarrierBrandCreate, int)) *CarrierBrandCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierBrandCreateBulk{err: fmt.Errorf("calling to CarrierBrandClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierBrandCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierBrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierBrand.
func (c *CarrierBrandClient) Update() *CarrierBrandUpdate {
	mutation := newCarrierBrandMutation(c.config, OpUpdate)
	return &CarrierBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierBrandClient) UpdateOne(cb *CarrierBrand) *CarrierBrandUpdateOne {
	mutation := newCarrierBrandMutation(c.config, OpUpdateOne, withCarrierBrand(cb))
	return &CarrierBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierBrandClient) UpdateOneID(id pulid.ID) *CarrierBrandUpdateOne {
	mutation := newCarrierBrandMutation(c.config, OpUpdateOne, withCarrierBrandID(id))
	return &CarrierBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierBrand.
func (c *CarrierBrandClient) Delete() *CarrierBrandDelete {
	mutation := newCarrierBrandMutation(c.config, OpDelete)
	return &CarrierBrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierBrandClient) DeleteOne(cb *CarrierBrand) *CarrierBrandDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierBrandClient) DeleteOneID(id pulid.ID) *CarrierBrandDeleteOne {
	builder := c.Delete().Where(carrierbrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierBrandDeleteOne{builder}
}

// Query returns a query builder for CarrierBrand.
func (c *CarrierBrandClient) Query() *CarrierBrandQuery {
	return &CarrierBrandQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierBrand},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierBrand entity by its id.
func (c *CarrierBrandClient) Get(ctx context.Context, id pulid.ID) (*CarrierBrand, error) {
	return c.Query().Where(carrierbrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierBrandClient) GetX(ctx context.Context, id pulid.ID) *CarrierBrand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierBrand.
func (c *CarrierBrandClient) QueryCarrierService(cb *CarrierBrand) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierbrand.CarrierServiceTable, carrierbrand.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierBrand.
func (c *CarrierBrandClient) QueryCarrier(cb *CarrierBrand) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.CarrierTable, carrierbrand.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShop queries the parcel_shop edge of a CarrierBrand.
func (c *CarrierBrandClient) QueryParcelShop(cb *CarrierBrand) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.ParcelShopTable, carrierbrand.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a CarrierBrand.
func (c *CarrierBrandClient) QueryPackaging(cb *CarrierBrand) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.PackagingTable, carrierbrand.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocument queries the document edge of a CarrierBrand.
func (c *CarrierBrandClient) QueryDocument(cb *CarrierBrand) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbrand.Table, carrierbrand.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierbrand.DocumentTable, carrierbrand.DocumentColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierBrandClient) Hooks() []Hook {
	hooks := c.hooks.CarrierBrand
	return append(hooks[:len(hooks):len(hooks)], carrierbrand.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierBrandClient) Interceptors() []Interceptor {
	return c.inters.CarrierBrand
}

func (c *CarrierBrandClient) mutate(ctx context.Context, m *CarrierBrandMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierBrandCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierBrandDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierBrand mutation op: %q", m.Op())
	}
}

// CarrierBringClient is a client for the CarrierBring schema.
type CarrierBringClient struct {
	config
}

// NewCarrierBringClient returns a client for the CarrierBring from the given config.
func NewCarrierBringClient(c config) *CarrierBringClient {
	return &CarrierBringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierbring.Hooks(f(g(h())))`.
func (c *CarrierBringClient) Use(hooks ...Hook) {
	c.hooks.CarrierBring = append(c.hooks.CarrierBring, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierbring.Intercept(f(g(h())))`.
func (c *CarrierBringClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierBring = append(c.inters.CarrierBring, interceptors...)
}

// Create returns a builder for creating a CarrierBring entity.
func (c *CarrierBringClient) Create() *CarrierBringCreate {
	mutation := newCarrierBringMutation(c.config, OpCreate)
	return &CarrierBringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierBring entities.
func (c *CarrierBringClient) CreateBulk(builders ...*CarrierBringCreate) *CarrierBringCreateBulk {
	return &CarrierBringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierBringClient) MapCreateBulk(slice any, setFunc func(*CarrierBringCreate, int)) *CarrierBringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierBringCreateBulk{err: fmt.Errorf("calling to CarrierBringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierBringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierBringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierBring.
func (c *CarrierBringClient) Update() *CarrierBringUpdate {
	mutation := newCarrierBringMutation(c.config, OpUpdate)
	return &CarrierBringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierBringClient) UpdateOne(cb *CarrierBring) *CarrierBringUpdateOne {
	mutation := newCarrierBringMutation(c.config, OpUpdateOne, withCarrierBring(cb))
	return &CarrierBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierBringClient) UpdateOneID(id pulid.ID) *CarrierBringUpdateOne {
	mutation := newCarrierBringMutation(c.config, OpUpdateOne, withCarrierBringID(id))
	return &CarrierBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierBring.
func (c *CarrierBringClient) Delete() *CarrierBringDelete {
	mutation := newCarrierBringMutation(c.config, OpDelete)
	return &CarrierBringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierBringClient) DeleteOne(cb *CarrierBring) *CarrierBringDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierBringClient) DeleteOneID(id pulid.ID) *CarrierBringDeleteOne {
	builder := c.Delete().Where(carrierbring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierBringDeleteOne{builder}
}

// Query returns a query builder for CarrierBring.
func (c *CarrierBringClient) Query() *CarrierBringQuery {
	return &CarrierBringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierBring},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierBring entity by its id.
func (c *CarrierBringClient) Get(ctx context.Context, id pulid.ID) (*CarrierBring, error) {
	return c.Query().Where(carrierbring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierBringClient) GetX(ctx context.Context, id pulid.ID) *CarrierBring {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierBring.
func (c *CarrierBringClient) QueryTenant(cb *CarrierBring) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbring.Table, carrierbring.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierbring.TenantTable, carrierbring.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierBring.
func (c *CarrierBringClient) QueryCarrier(cb *CarrierBring) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierbring.Table, carrierbring.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierbring.CarrierTable, carrierbring.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierBringClient) Hooks() []Hook {
	hooks := c.hooks.CarrierBring
	return append(hooks[:len(hooks):len(hooks)], carrierbring.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierBringClient) Interceptors() []Interceptor {
	return c.inters.CarrierBring
}

func (c *CarrierBringClient) mutate(ctx context.Context, m *CarrierBringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierBringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierBringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierBringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierBring mutation op: %q", m.Op())
	}
}

// CarrierDAOClient is a client for the CarrierDAO schema.
type CarrierDAOClient struct {
	config
}

// NewCarrierDAOClient returns a client for the CarrierDAO from the given config.
func NewCarrierDAOClient(c config) *CarrierDAOClient {
	return &CarrierDAOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierdao.Hooks(f(g(h())))`.
func (c *CarrierDAOClient) Use(hooks ...Hook) {
	c.hooks.CarrierDAO = append(c.hooks.CarrierDAO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierdao.Intercept(f(g(h())))`.
func (c *CarrierDAOClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierDAO = append(c.inters.CarrierDAO, interceptors...)
}

// Create returns a builder for creating a CarrierDAO entity.
func (c *CarrierDAOClient) Create() *CarrierDAOCreate {
	mutation := newCarrierDAOMutation(c.config, OpCreate)
	return &CarrierDAOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierDAO entities.
func (c *CarrierDAOClient) CreateBulk(builders ...*CarrierDAOCreate) *CarrierDAOCreateBulk {
	return &CarrierDAOCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierDAOClient) MapCreateBulk(slice any, setFunc func(*CarrierDAOCreate, int)) *CarrierDAOCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierDAOCreateBulk{err: fmt.Errorf("calling to CarrierDAOClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierDAOCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierDAOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierDAO.
func (c *CarrierDAOClient) Update() *CarrierDAOUpdate {
	mutation := newCarrierDAOMutation(c.config, OpUpdate)
	return &CarrierDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierDAOClient) UpdateOne(cd *CarrierDAO) *CarrierDAOUpdateOne {
	mutation := newCarrierDAOMutation(c.config, OpUpdateOne, withCarrierDAO(cd))
	return &CarrierDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierDAOClient) UpdateOneID(id pulid.ID) *CarrierDAOUpdateOne {
	mutation := newCarrierDAOMutation(c.config, OpUpdateOne, withCarrierDAOID(id))
	return &CarrierDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierDAO.
func (c *CarrierDAOClient) Delete() *CarrierDAODelete {
	mutation := newCarrierDAOMutation(c.config, OpDelete)
	return &CarrierDAODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierDAOClient) DeleteOne(cd *CarrierDAO) *CarrierDAODeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierDAOClient) DeleteOneID(id pulid.ID) *CarrierDAODeleteOne {
	builder := c.Delete().Where(carrierdao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierDAODeleteOne{builder}
}

// Query returns a query builder for CarrierDAO.
func (c *CarrierDAOClient) Query() *CarrierDAOQuery {
	return &CarrierDAOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierDAO},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierDAO entity by its id.
func (c *CarrierDAOClient) Get(ctx context.Context, id pulid.ID) (*CarrierDAO, error) {
	return c.Query().Where(carrierdao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierDAOClient) GetX(ctx context.Context, id pulid.ID) *CarrierDAO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierDAO.
func (c *CarrierDAOClient) QueryTenant(cd *CarrierDAO) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierdao.Table, carrierdao.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierdao.TenantTable, carrierdao.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierDAO.
func (c *CarrierDAOClient) QueryCarrier(cd *CarrierDAO) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierdao.Table, carrierdao.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierdao.CarrierTable, carrierdao.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierDAOClient) Hooks() []Hook {
	hooks := c.hooks.CarrierDAO
	return append(hooks[:len(hooks):len(hooks)], carrierdao.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierDAOClient) Interceptors() []Interceptor {
	return c.inters.CarrierDAO
}

func (c *CarrierDAOClient) mutate(ctx context.Context, m *CarrierDAOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierDAOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierDAODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierDAO mutation op: %q", m.Op())
	}
}

// CarrierDFClient is a client for the CarrierDF schema.
type CarrierDFClient struct {
	config
}

// NewCarrierDFClient returns a client for the CarrierDF from the given config.
func NewCarrierDFClient(c config) *CarrierDFClient {
	return &CarrierDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierdf.Hooks(f(g(h())))`.
func (c *CarrierDFClient) Use(hooks ...Hook) {
	c.hooks.CarrierDF = append(c.hooks.CarrierDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierdf.Intercept(f(g(h())))`.
func (c *CarrierDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierDF = append(c.inters.CarrierDF, interceptors...)
}

// Create returns a builder for creating a CarrierDF entity.
func (c *CarrierDFClient) Create() *CarrierDFCreate {
	mutation := newCarrierDFMutation(c.config, OpCreate)
	return &CarrierDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierDF entities.
func (c *CarrierDFClient) CreateBulk(builders ...*CarrierDFCreate) *CarrierDFCreateBulk {
	return &CarrierDFCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierDFClient) MapCreateBulk(slice any, setFunc func(*CarrierDFCreate, int)) *CarrierDFCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierDFCreateBulk{err: fmt.Errorf("calling to CarrierDFClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierDFCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierDF.
func (c *CarrierDFClient) Update() *CarrierDFUpdate {
	mutation := newCarrierDFMutation(c.config, OpUpdate)
	return &CarrierDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierDFClient) UpdateOne(cd *CarrierDF) *CarrierDFUpdateOne {
	mutation := newCarrierDFMutation(c.config, OpUpdateOne, withCarrierDF(cd))
	return &CarrierDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierDFClient) UpdateOneID(id pulid.ID) *CarrierDFUpdateOne {
	mutation := newCarrierDFMutation(c.config, OpUpdateOne, withCarrierDFID(id))
	return &CarrierDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierDF.
func (c *CarrierDFClient) Delete() *CarrierDFDelete {
	mutation := newCarrierDFMutation(c.config, OpDelete)
	return &CarrierDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierDFClient) DeleteOne(cd *CarrierDF) *CarrierDFDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierDFClient) DeleteOneID(id pulid.ID) *CarrierDFDeleteOne {
	builder := c.Delete().Where(carrierdf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierDFDeleteOne{builder}
}

// Query returns a query builder for CarrierDF.
func (c *CarrierDFClient) Query() *CarrierDFQuery {
	return &CarrierDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierDF},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierDF entity by its id.
func (c *CarrierDFClient) Get(ctx context.Context, id pulid.ID) (*CarrierDF, error) {
	return c.Query().Where(carrierdf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierDFClient) GetX(ctx context.Context, id pulid.ID) *CarrierDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierDF.
func (c *CarrierDFClient) QueryTenant(cd *CarrierDF) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierdf.Table, carrierdf.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierdf.TenantTable, carrierdf.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierDF.
func (c *CarrierDFClient) QueryCarrier(cd *CarrierDF) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierdf.Table, carrierdf.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierdf.CarrierTable, carrierdf.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierDFClient) Hooks() []Hook {
	hooks := c.hooks.CarrierDF
	return append(hooks[:len(hooks):len(hooks)], carrierdf.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierDFClient) Interceptors() []Interceptor {
	return c.inters.CarrierDF
}

func (c *CarrierDFClient) mutate(ctx context.Context, m *CarrierDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierDF mutation op: %q", m.Op())
	}
}

// CarrierDSVClient is a client for the CarrierDSV schema.
type CarrierDSVClient struct {
	config
}

// NewCarrierDSVClient returns a client for the CarrierDSV from the given config.
func NewCarrierDSVClient(c config) *CarrierDSVClient {
	return &CarrierDSVClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierdsv.Hooks(f(g(h())))`.
func (c *CarrierDSVClient) Use(hooks ...Hook) {
	c.hooks.CarrierDSV = append(c.hooks.CarrierDSV, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierdsv.Intercept(f(g(h())))`.
func (c *CarrierDSVClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierDSV = append(c.inters.CarrierDSV, interceptors...)
}

// Create returns a builder for creating a CarrierDSV entity.
func (c *CarrierDSVClient) Create() *CarrierDSVCreate {
	mutation := newCarrierDSVMutation(c.config, OpCreate)
	return &CarrierDSVCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierDSV entities.
func (c *CarrierDSVClient) CreateBulk(builders ...*CarrierDSVCreate) *CarrierDSVCreateBulk {
	return &CarrierDSVCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierDSVClient) MapCreateBulk(slice any, setFunc func(*CarrierDSVCreate, int)) *CarrierDSVCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierDSVCreateBulk{err: fmt.Errorf("calling to CarrierDSVClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierDSVCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierDSVCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierDSV.
func (c *CarrierDSVClient) Update() *CarrierDSVUpdate {
	mutation := newCarrierDSVMutation(c.config, OpUpdate)
	return &CarrierDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierDSVClient) UpdateOne(cd *CarrierDSV) *CarrierDSVUpdateOne {
	mutation := newCarrierDSVMutation(c.config, OpUpdateOne, withCarrierDSV(cd))
	return &CarrierDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierDSVClient) UpdateOneID(id pulid.ID) *CarrierDSVUpdateOne {
	mutation := newCarrierDSVMutation(c.config, OpUpdateOne, withCarrierDSVID(id))
	return &CarrierDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierDSV.
func (c *CarrierDSVClient) Delete() *CarrierDSVDelete {
	mutation := newCarrierDSVMutation(c.config, OpDelete)
	return &CarrierDSVDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierDSVClient) DeleteOne(cd *CarrierDSV) *CarrierDSVDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierDSVClient) DeleteOneID(id pulid.ID) *CarrierDSVDeleteOne {
	builder := c.Delete().Where(carrierdsv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierDSVDeleteOne{builder}
}

// Query returns a query builder for CarrierDSV.
func (c *CarrierDSVClient) Query() *CarrierDSVQuery {
	return &CarrierDSVQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierDSV},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierDSV entity by its id.
func (c *CarrierDSVClient) Get(ctx context.Context, id pulid.ID) (*CarrierDSV, error) {
	return c.Query().Where(carrierdsv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierDSVClient) GetX(ctx context.Context, id pulid.ID) *CarrierDSV {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierDSV.
func (c *CarrierDSVClient) QueryTenant(cd *CarrierDSV) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierdsv.Table, carrierdsv.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierdsv.TenantTable, carrierdsv.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierDSV.
func (c *CarrierDSVClient) QueryCarrier(cd *CarrierDSV) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierdsv.Table, carrierdsv.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierdsv.CarrierTable, carrierdsv.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierDSVClient) Hooks() []Hook {
	hooks := c.hooks.CarrierDSV
	return append(hooks[:len(hooks):len(hooks)], carrierdsv.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierDSVClient) Interceptors() []Interceptor {
	return c.inters.CarrierDSV
}

func (c *CarrierDSVClient) mutate(ctx context.Context, m *CarrierDSVMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierDSVCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierDSVDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierDSV mutation op: %q", m.Op())
	}
}

// CarrierEasyPostClient is a client for the CarrierEasyPost schema.
type CarrierEasyPostClient struct {
	config
}

// NewCarrierEasyPostClient returns a client for the CarrierEasyPost from the given config.
func NewCarrierEasyPostClient(c config) *CarrierEasyPostClient {
	return &CarrierEasyPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carriereasypost.Hooks(f(g(h())))`.
func (c *CarrierEasyPostClient) Use(hooks ...Hook) {
	c.hooks.CarrierEasyPost = append(c.hooks.CarrierEasyPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carriereasypost.Intercept(f(g(h())))`.
func (c *CarrierEasyPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierEasyPost = append(c.inters.CarrierEasyPost, interceptors...)
}

// Create returns a builder for creating a CarrierEasyPost entity.
func (c *CarrierEasyPostClient) Create() *CarrierEasyPostCreate {
	mutation := newCarrierEasyPostMutation(c.config, OpCreate)
	return &CarrierEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierEasyPost entities.
func (c *CarrierEasyPostClient) CreateBulk(builders ...*CarrierEasyPostCreate) *CarrierEasyPostCreateBulk {
	return &CarrierEasyPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierEasyPostClient) MapCreateBulk(slice any, setFunc func(*CarrierEasyPostCreate, int)) *CarrierEasyPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierEasyPostCreateBulk{err: fmt.Errorf("calling to CarrierEasyPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierEasyPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierEasyPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierEasyPost.
func (c *CarrierEasyPostClient) Update() *CarrierEasyPostUpdate {
	mutation := newCarrierEasyPostMutation(c.config, OpUpdate)
	return &CarrierEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierEasyPostClient) UpdateOne(cep *CarrierEasyPost) *CarrierEasyPostUpdateOne {
	mutation := newCarrierEasyPostMutation(c.config, OpUpdateOne, withCarrierEasyPost(cep))
	return &CarrierEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierEasyPostClient) UpdateOneID(id pulid.ID) *CarrierEasyPostUpdateOne {
	mutation := newCarrierEasyPostMutation(c.config, OpUpdateOne, withCarrierEasyPostID(id))
	return &CarrierEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierEasyPost.
func (c *CarrierEasyPostClient) Delete() *CarrierEasyPostDelete {
	mutation := newCarrierEasyPostMutation(c.config, OpDelete)
	return &CarrierEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierEasyPostClient) DeleteOne(cep *CarrierEasyPost) *CarrierEasyPostDeleteOne {
	return c.DeleteOneID(cep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierEasyPostClient) DeleteOneID(id pulid.ID) *CarrierEasyPostDeleteOne {
	builder := c.Delete().Where(carriereasypost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierEasyPostDeleteOne{builder}
}

// Query returns a query builder for CarrierEasyPost.
func (c *CarrierEasyPostClient) Query() *CarrierEasyPostQuery {
	return &CarrierEasyPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierEasyPost},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierEasyPost entity by its id.
func (c *CarrierEasyPostClient) Get(ctx context.Context, id pulid.ID) (*CarrierEasyPost, error) {
	return c.Query().Where(carriereasypost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierEasyPostClient) GetX(ctx context.Context, id pulid.ID) *CarrierEasyPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierEasyPost.
func (c *CarrierEasyPostClient) QueryTenant(cep *CarrierEasyPost) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carriereasypost.Table, carriereasypost.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carriereasypost.TenantTable, carriereasypost.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierEasyPost.
func (c *CarrierEasyPostClient) QueryCarrier(cep *CarrierEasyPost) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carriereasypost.Table, carriereasypost.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carriereasypost.CarrierTable, carriereasypost.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierEasyPostClient) Hooks() []Hook {
	hooks := c.hooks.CarrierEasyPost
	return append(hooks[:len(hooks):len(hooks)], carriereasypost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierEasyPostClient) Interceptors() []Interceptor {
	return c.inters.CarrierEasyPost
}

func (c *CarrierEasyPostClient) mutate(ctx context.Context, m *CarrierEasyPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierEasyPost mutation op: %q", m.Op())
	}
}

// CarrierGLSClient is a client for the CarrierGLS schema.
type CarrierGLSClient struct {
	config
}

// NewCarrierGLSClient returns a client for the CarrierGLS from the given config.
func NewCarrierGLSClient(c config) *CarrierGLSClient {
	return &CarrierGLSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carriergls.Hooks(f(g(h())))`.
func (c *CarrierGLSClient) Use(hooks ...Hook) {
	c.hooks.CarrierGLS = append(c.hooks.CarrierGLS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carriergls.Intercept(f(g(h())))`.
func (c *CarrierGLSClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierGLS = append(c.inters.CarrierGLS, interceptors...)
}

// Create returns a builder for creating a CarrierGLS entity.
func (c *CarrierGLSClient) Create() *CarrierGLSCreate {
	mutation := newCarrierGLSMutation(c.config, OpCreate)
	return &CarrierGLSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierGLS entities.
func (c *CarrierGLSClient) CreateBulk(builders ...*CarrierGLSCreate) *CarrierGLSCreateBulk {
	return &CarrierGLSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierGLSClient) MapCreateBulk(slice any, setFunc func(*CarrierGLSCreate, int)) *CarrierGLSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierGLSCreateBulk{err: fmt.Errorf("calling to CarrierGLSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierGLSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierGLSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierGLS.
func (c *CarrierGLSClient) Update() *CarrierGLSUpdate {
	mutation := newCarrierGLSMutation(c.config, OpUpdate)
	return &CarrierGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierGLSClient) UpdateOne(cg *CarrierGLS) *CarrierGLSUpdateOne {
	mutation := newCarrierGLSMutation(c.config, OpUpdateOne, withCarrierGLS(cg))
	return &CarrierGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierGLSClient) UpdateOneID(id pulid.ID) *CarrierGLSUpdateOne {
	mutation := newCarrierGLSMutation(c.config, OpUpdateOne, withCarrierGLSID(id))
	return &CarrierGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierGLS.
func (c *CarrierGLSClient) Delete() *CarrierGLSDelete {
	mutation := newCarrierGLSMutation(c.config, OpDelete)
	return &CarrierGLSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierGLSClient) DeleteOne(cg *CarrierGLS) *CarrierGLSDeleteOne {
	return c.DeleteOneID(cg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierGLSClient) DeleteOneID(id pulid.ID) *CarrierGLSDeleteOne {
	builder := c.Delete().Where(carriergls.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierGLSDeleteOne{builder}
}

// Query returns a query builder for CarrierGLS.
func (c *CarrierGLSClient) Query() *CarrierGLSQuery {
	return &CarrierGLSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierGLS},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierGLS entity by its id.
func (c *CarrierGLSClient) Get(ctx context.Context, id pulid.ID) (*CarrierGLS, error) {
	return c.Query().Where(carriergls.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierGLSClient) GetX(ctx context.Context, id pulid.ID) *CarrierGLS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierGLS.
func (c *CarrierGLSClient) QueryTenant(cg *CarrierGLS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carriergls.Table, carriergls.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carriergls.TenantTable, carriergls.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierGLS.
func (c *CarrierGLSClient) QueryCarrier(cg *CarrierGLS) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carriergls.Table, carriergls.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carriergls.CarrierTable, carriergls.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierGLSClient) Hooks() []Hook {
	hooks := c.hooks.CarrierGLS
	return append(hooks[:len(hooks):len(hooks)], carriergls.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierGLSClient) Interceptors() []Interceptor {
	return c.inters.CarrierGLS
}

func (c *CarrierGLSClient) mutate(ctx context.Context, m *CarrierGLSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierGLSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierGLSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierGLS mutation op: %q", m.Op())
	}
}

// CarrierPostNordClient is a client for the CarrierPostNord schema.
type CarrierPostNordClient struct {
	config
}

// NewCarrierPostNordClient returns a client for the CarrierPostNord from the given config.
func NewCarrierPostNordClient(c config) *CarrierPostNordClient {
	return &CarrierPostNordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierpostnord.Hooks(f(g(h())))`.
func (c *CarrierPostNordClient) Use(hooks ...Hook) {
	c.hooks.CarrierPostNord = append(c.hooks.CarrierPostNord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierpostnord.Intercept(f(g(h())))`.
func (c *CarrierPostNordClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierPostNord = append(c.inters.CarrierPostNord, interceptors...)
}

// Create returns a builder for creating a CarrierPostNord entity.
func (c *CarrierPostNordClient) Create() *CarrierPostNordCreate {
	mutation := newCarrierPostNordMutation(c.config, OpCreate)
	return &CarrierPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierPostNord entities.
func (c *CarrierPostNordClient) CreateBulk(builders ...*CarrierPostNordCreate) *CarrierPostNordCreateBulk {
	return &CarrierPostNordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierPostNordClient) MapCreateBulk(slice any, setFunc func(*CarrierPostNordCreate, int)) *CarrierPostNordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierPostNordCreateBulk{err: fmt.Errorf("calling to CarrierPostNordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierPostNordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierPostNordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierPostNord.
func (c *CarrierPostNordClient) Update() *CarrierPostNordUpdate {
	mutation := newCarrierPostNordMutation(c.config, OpUpdate)
	return &CarrierPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierPostNordClient) UpdateOne(cpn *CarrierPostNord) *CarrierPostNordUpdateOne {
	mutation := newCarrierPostNordMutation(c.config, OpUpdateOne, withCarrierPostNord(cpn))
	return &CarrierPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierPostNordClient) UpdateOneID(id pulid.ID) *CarrierPostNordUpdateOne {
	mutation := newCarrierPostNordMutation(c.config, OpUpdateOne, withCarrierPostNordID(id))
	return &CarrierPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierPostNord.
func (c *CarrierPostNordClient) Delete() *CarrierPostNordDelete {
	mutation := newCarrierPostNordMutation(c.config, OpDelete)
	return &CarrierPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierPostNordClient) DeleteOne(cpn *CarrierPostNord) *CarrierPostNordDeleteOne {
	return c.DeleteOneID(cpn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierPostNordClient) DeleteOneID(id pulid.ID) *CarrierPostNordDeleteOne {
	builder := c.Delete().Where(carrierpostnord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierPostNordDeleteOne{builder}
}

// Query returns a query builder for CarrierPostNord.
func (c *CarrierPostNordClient) Query() *CarrierPostNordQuery {
	return &CarrierPostNordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierPostNord},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierPostNord entity by its id.
func (c *CarrierPostNordClient) Get(ctx context.Context, id pulid.ID) (*CarrierPostNord, error) {
	return c.Query().Where(carrierpostnord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierPostNordClient) GetX(ctx context.Context, id pulid.ID) *CarrierPostNord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierPostNord.
func (c *CarrierPostNordClient) QueryTenant(cpn *CarrierPostNord) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cpn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierpostnord.Table, carrierpostnord.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierpostnord.TenantTable, carrierpostnord.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cpn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierPostNord.
func (c *CarrierPostNordClient) QueryCarrier(cpn *CarrierPostNord) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cpn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierpostnord.Table, carrierpostnord.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierpostnord.CarrierTable, carrierpostnord.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cpn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierPostNordClient) Hooks() []Hook {
	hooks := c.hooks.CarrierPostNord
	return append(hooks[:len(hooks):len(hooks)], carrierpostnord.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierPostNordClient) Interceptors() []Interceptor {
	return c.inters.CarrierPostNord
}

func (c *CarrierPostNordClient) mutate(ctx context.Context, m *CarrierPostNordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierPostNord mutation op: %q", m.Op())
	}
}

// CarrierServiceClient is a client for the CarrierService schema.
type CarrierServiceClient struct {
	config
}

// NewCarrierServiceClient returns a client for the CarrierService from the given config.
func NewCarrierServiceClient(c config) *CarrierServiceClient {
	return &CarrierServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservice.Hooks(f(g(h())))`.
func (c *CarrierServiceClient) Use(hooks ...Hook) {
	c.hooks.CarrierService = append(c.hooks.CarrierService, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservice.Intercept(f(g(h())))`.
func (c *CarrierServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierService = append(c.inters.CarrierService, interceptors...)
}

// Create returns a builder for creating a CarrierService entity.
func (c *CarrierServiceClient) Create() *CarrierServiceCreate {
	mutation := newCarrierServiceMutation(c.config, OpCreate)
	return &CarrierServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierService entities.
func (c *CarrierServiceClient) CreateBulk(builders ...*CarrierServiceCreate) *CarrierServiceCreateBulk {
	return &CarrierServiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceCreate, int)) *CarrierServiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceCreateBulk{err: fmt.Errorf("calling to CarrierServiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierService.
func (c *CarrierServiceClient) Update() *CarrierServiceUpdate {
	mutation := newCarrierServiceMutation(c.config, OpUpdate)
	return &CarrierServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceClient) UpdateOne(cs *CarrierService) *CarrierServiceUpdateOne {
	mutation := newCarrierServiceMutation(c.config, OpUpdateOne, withCarrierService(cs))
	return &CarrierServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceClient) UpdateOneID(id pulid.ID) *CarrierServiceUpdateOne {
	mutation := newCarrierServiceMutation(c.config, OpUpdateOne, withCarrierServiceID(id))
	return &CarrierServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierService.
func (c *CarrierServiceClient) Delete() *CarrierServiceDelete {
	mutation := newCarrierServiceMutation(c.config, OpDelete)
	return &CarrierServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceClient) DeleteOne(cs *CarrierService) *CarrierServiceDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceClient) DeleteOneID(id pulid.ID) *CarrierServiceDeleteOne {
	builder := c.Delete().Where(carrierservice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceDeleteOne{builder}
}

// Query returns a query builder for CarrierService.
func (c *CarrierServiceClient) Query() *CarrierServiceQuery {
	return &CarrierServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierService},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierService entity by its id.
func (c *CarrierServiceClient) Get(ctx context.Context, id pulid.ID) (*CarrierService, error) {
	return c.Query().Where(carrierservice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceClient) GetX(ctx context.Context, id pulid.ID) *CarrierService {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierServicePostNord queries the carrier_service_post_nord edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServicePostNord(cs *CarrierService) *CarrierServicePostNordQuery {
	query := (&CarrierServicePostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierservicepostnord.Table, carrierservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServicePostNordTable, carrierservice.CarrierServicePostNordColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServiceDAO queries the carrier_service_dao edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServiceDAO(cs *CarrierService) *CarrierServiceDAOQuery {
	query := (&CarrierServiceDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierservicedao.Table, carrierservicedao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceDAOTable, carrierservice.CarrierServiceDAOColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServiceDF queries the carrier_service_df edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServiceDF(cs *CarrierService) *CarrierServiceDFQuery {
	query := (&CarrierServiceDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierservicedf.Table, carrierservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceDFTable, carrierservice.CarrierServiceDFColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServiceDSV queries the carrier_service_dsv edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServiceDSV(cs *CarrierService) *CarrierServiceDSVQuery {
	query := (&CarrierServiceDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierservicedsv.Table, carrierservicedsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceDSVTable, carrierservice.CarrierServiceDSVColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServEasyPost queries the carrier_serv_easy_post edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServEasyPost(cs *CarrierService) *CarrierServiceEasyPostQuery {
	query := (&CarrierServiceEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierserviceeasypost.Table, carrierserviceeasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServEasyPostTable, carrierservice.CarrierServEasyPostColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServiceGLS queries the carrier_service_gls edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServiceGLS(cs *CarrierService) *CarrierServiceGLSQuery {
	query := (&CarrierServiceGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierservicegls.Table, carrierservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceGLSTable, carrierservice.CarrierServiceGLSColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServiceUSPS queries the carrier_service_usps edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServiceUSPS(cs *CarrierService) *CarrierServiceUSPSQuery {
	query := (&CarrierServiceUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierserviceusps.Table, carrierserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceUSPSTable, carrierservice.CarrierServiceUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierServiceBring queries the carrier_service_bring edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierServiceBring(cs *CarrierService) *CarrierServiceBringQuery {
	query := (&CarrierServiceBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierservicebring.Table, carrierservicebring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, carrierservice.CarrierServiceBringTable, carrierservice.CarrierServiceBringColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierBrand queries the carrier_brand edge of a CarrierService.
func (c *CarrierServiceClient) QueryCarrierBrand(cs *CarrierService) *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrierservice.CarrierBrandTable, carrierservice.CarrierBrandColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a CarrierService.
func (c *CarrierServiceClient) QueryDeliveryOption(cs *CarrierService) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservice.Table, carrierservice.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, carrierservice.DeliveryOptionTable, carrierservice.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceClient) Hooks() []Hook {
	hooks := c.hooks.CarrierService
	return append(hooks[:len(hooks):len(hooks)], carrierservice.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceClient) Interceptors() []Interceptor {
	return c.inters.CarrierService
}

func (c *CarrierServiceClient) mutate(ctx context.Context, m *CarrierServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierService mutation op: %q", m.Op())
	}
}

// CarrierServiceBringClient is a client for the CarrierServiceBring schema.
type CarrierServiceBringClient struct {
	config
}

// NewCarrierServiceBringClient returns a client for the CarrierServiceBring from the given config.
func NewCarrierServiceBringClient(c config) *CarrierServiceBringClient {
	return &CarrierServiceBringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservicebring.Hooks(f(g(h())))`.
func (c *CarrierServiceBringClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceBring = append(c.hooks.CarrierServiceBring, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservicebring.Intercept(f(g(h())))`.
func (c *CarrierServiceBringClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceBring = append(c.inters.CarrierServiceBring, interceptors...)
}

// Create returns a builder for creating a CarrierServiceBring entity.
func (c *CarrierServiceBringClient) Create() *CarrierServiceBringCreate {
	mutation := newCarrierServiceBringMutation(c.config, OpCreate)
	return &CarrierServiceBringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceBring entities.
func (c *CarrierServiceBringClient) CreateBulk(builders ...*CarrierServiceBringCreate) *CarrierServiceBringCreateBulk {
	return &CarrierServiceBringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceBringClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceBringCreate, int)) *CarrierServiceBringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceBringCreateBulk{err: fmt.Errorf("calling to CarrierServiceBringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceBringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceBringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceBring.
func (c *CarrierServiceBringClient) Update() *CarrierServiceBringUpdate {
	mutation := newCarrierServiceBringMutation(c.config, OpUpdate)
	return &CarrierServiceBringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceBringClient) UpdateOne(csb *CarrierServiceBring) *CarrierServiceBringUpdateOne {
	mutation := newCarrierServiceBringMutation(c.config, OpUpdateOne, withCarrierServiceBring(csb))
	return &CarrierServiceBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceBringClient) UpdateOneID(id pulid.ID) *CarrierServiceBringUpdateOne {
	mutation := newCarrierServiceBringMutation(c.config, OpUpdateOne, withCarrierServiceBringID(id))
	return &CarrierServiceBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceBring.
func (c *CarrierServiceBringClient) Delete() *CarrierServiceBringDelete {
	mutation := newCarrierServiceBringMutation(c.config, OpDelete)
	return &CarrierServiceBringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceBringClient) DeleteOne(csb *CarrierServiceBring) *CarrierServiceBringDeleteOne {
	return c.DeleteOneID(csb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceBringClient) DeleteOneID(id pulid.ID) *CarrierServiceBringDeleteOne {
	builder := c.Delete().Where(carrierservicebring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceBringDeleteOne{builder}
}

// Query returns a query builder for CarrierServiceBring.
func (c *CarrierServiceBringClient) Query() *CarrierServiceBringQuery {
	return &CarrierServiceBringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceBring},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceBring entity by its id.
func (c *CarrierServiceBringClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceBring, error) {
	return c.Query().Where(carrierservicebring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceBringClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceBring {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceBring.
func (c *CarrierServiceBringClient) QueryCarrierService(csb *CarrierServiceBring) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicebring.Table, carrierservicebring.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicebring.CarrierServiceTable, carrierservicebring.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceBring queries the carrier_additional_service_bring edge of a CarrierServiceBring.
func (c *CarrierServiceBringClient) QueryCarrierAdditionalServiceBring(csb *CarrierServiceBring) *CarrierAdditionalServiceBringQuery {
	query := (&CarrierAdditionalServiceBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicebring.Table, carrierservicebring.FieldID, id),
			sqlgraph.To(carrieradditionalservicebring.Table, carrieradditionalservicebring.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierservicebring.CarrierAdditionalServiceBringTable, carrierservicebring.CarrierAdditionalServiceBringColumn),
		)
		fromV = sqlgraph.Neighbors(csb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceBringClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceBring
	return append(hooks[:len(hooks):len(hooks)], carrierservicebring.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceBringClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceBring
}

func (c *CarrierServiceBringClient) mutate(ctx context.Context, m *CarrierServiceBringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceBringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceBringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceBringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceBring mutation op: %q", m.Op())
	}
}

// CarrierServiceDAOClient is a client for the CarrierServiceDAO schema.
type CarrierServiceDAOClient struct {
	config
}

// NewCarrierServiceDAOClient returns a client for the CarrierServiceDAO from the given config.
func NewCarrierServiceDAOClient(c config) *CarrierServiceDAOClient {
	return &CarrierServiceDAOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservicedao.Hooks(f(g(h())))`.
func (c *CarrierServiceDAOClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceDAO = append(c.hooks.CarrierServiceDAO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservicedao.Intercept(f(g(h())))`.
func (c *CarrierServiceDAOClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceDAO = append(c.inters.CarrierServiceDAO, interceptors...)
}

// Create returns a builder for creating a CarrierServiceDAO entity.
func (c *CarrierServiceDAOClient) Create() *CarrierServiceDAOCreate {
	mutation := newCarrierServiceDAOMutation(c.config, OpCreate)
	return &CarrierServiceDAOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceDAO entities.
func (c *CarrierServiceDAOClient) CreateBulk(builders ...*CarrierServiceDAOCreate) *CarrierServiceDAOCreateBulk {
	return &CarrierServiceDAOCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceDAOClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceDAOCreate, int)) *CarrierServiceDAOCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceDAOCreateBulk{err: fmt.Errorf("calling to CarrierServiceDAOClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceDAOCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceDAOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceDAO.
func (c *CarrierServiceDAOClient) Update() *CarrierServiceDAOUpdate {
	mutation := newCarrierServiceDAOMutation(c.config, OpUpdate)
	return &CarrierServiceDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceDAOClient) UpdateOne(csd *CarrierServiceDAO) *CarrierServiceDAOUpdateOne {
	mutation := newCarrierServiceDAOMutation(c.config, OpUpdateOne, withCarrierServiceDAO(csd))
	return &CarrierServiceDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceDAOClient) UpdateOneID(id pulid.ID) *CarrierServiceDAOUpdateOne {
	mutation := newCarrierServiceDAOMutation(c.config, OpUpdateOne, withCarrierServiceDAOID(id))
	return &CarrierServiceDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceDAO.
func (c *CarrierServiceDAOClient) Delete() *CarrierServiceDAODelete {
	mutation := newCarrierServiceDAOMutation(c.config, OpDelete)
	return &CarrierServiceDAODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceDAOClient) DeleteOne(csd *CarrierServiceDAO) *CarrierServiceDAODeleteOne {
	return c.DeleteOneID(csd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceDAOClient) DeleteOneID(id pulid.ID) *CarrierServiceDAODeleteOne {
	builder := c.Delete().Where(carrierservicedao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceDAODeleteOne{builder}
}

// Query returns a query builder for CarrierServiceDAO.
func (c *CarrierServiceDAOClient) Query() *CarrierServiceDAOQuery {
	return &CarrierServiceDAOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceDAO},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceDAO entity by its id.
func (c *CarrierServiceDAOClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceDAO, error) {
	return c.Query().Where(carrierservicedao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceDAOClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceDAO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceDAO.
func (c *CarrierServiceDAOClient) QueryCarrierService(csd *CarrierServiceDAO) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedao.Table, carrierservicedao.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicedao.CarrierServiceTable, carrierservicedao.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDAO queries the carrier_additional_service_dao edge of a CarrierServiceDAO.
func (c *CarrierServiceDAOClient) QueryCarrierAdditionalServiceDAO(csd *CarrierServiceDAO) *CarrierAdditionalServiceDAOQuery {
	query := (&CarrierAdditionalServiceDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedao.Table, carrierservicedao.FieldID, id),
			sqlgraph.To(carrieradditionalservicedao.Table, carrieradditionalservicedao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrierservicedao.CarrierAdditionalServiceDAOTable, carrierservicedao.CarrierAdditionalServiceDAOPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(csd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceDAOClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceDAO
	return append(hooks[:len(hooks):len(hooks)], carrierservicedao.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceDAOClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceDAO
}

func (c *CarrierServiceDAOClient) mutate(ctx context.Context, m *CarrierServiceDAOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceDAOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceDAODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceDAO mutation op: %q", m.Op())
	}
}

// CarrierServiceDFClient is a client for the CarrierServiceDF schema.
type CarrierServiceDFClient struct {
	config
}

// NewCarrierServiceDFClient returns a client for the CarrierServiceDF from the given config.
func NewCarrierServiceDFClient(c config) *CarrierServiceDFClient {
	return &CarrierServiceDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservicedf.Hooks(f(g(h())))`.
func (c *CarrierServiceDFClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceDF = append(c.hooks.CarrierServiceDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservicedf.Intercept(f(g(h())))`.
func (c *CarrierServiceDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceDF = append(c.inters.CarrierServiceDF, interceptors...)
}

// Create returns a builder for creating a CarrierServiceDF entity.
func (c *CarrierServiceDFClient) Create() *CarrierServiceDFCreate {
	mutation := newCarrierServiceDFMutation(c.config, OpCreate)
	return &CarrierServiceDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceDF entities.
func (c *CarrierServiceDFClient) CreateBulk(builders ...*CarrierServiceDFCreate) *CarrierServiceDFCreateBulk {
	return &CarrierServiceDFCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceDFClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceDFCreate, int)) *CarrierServiceDFCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceDFCreateBulk{err: fmt.Errorf("calling to CarrierServiceDFClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceDFCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceDF.
func (c *CarrierServiceDFClient) Update() *CarrierServiceDFUpdate {
	mutation := newCarrierServiceDFMutation(c.config, OpUpdate)
	return &CarrierServiceDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceDFClient) UpdateOne(csd *CarrierServiceDF) *CarrierServiceDFUpdateOne {
	mutation := newCarrierServiceDFMutation(c.config, OpUpdateOne, withCarrierServiceDF(csd))
	return &CarrierServiceDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceDFClient) UpdateOneID(id pulid.ID) *CarrierServiceDFUpdateOne {
	mutation := newCarrierServiceDFMutation(c.config, OpUpdateOne, withCarrierServiceDFID(id))
	return &CarrierServiceDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceDF.
func (c *CarrierServiceDFClient) Delete() *CarrierServiceDFDelete {
	mutation := newCarrierServiceDFMutation(c.config, OpDelete)
	return &CarrierServiceDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceDFClient) DeleteOne(csd *CarrierServiceDF) *CarrierServiceDFDeleteOne {
	return c.DeleteOneID(csd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceDFClient) DeleteOneID(id pulid.ID) *CarrierServiceDFDeleteOne {
	builder := c.Delete().Where(carrierservicedf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceDFDeleteOne{builder}
}

// Query returns a query builder for CarrierServiceDF.
func (c *CarrierServiceDFClient) Query() *CarrierServiceDFQuery {
	return &CarrierServiceDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceDF},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceDF entity by its id.
func (c *CarrierServiceDFClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceDF, error) {
	return c.Query().Where(carrierservicedf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceDFClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceDF.
func (c *CarrierServiceDFClient) QueryCarrierService(csd *CarrierServiceDF) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedf.Table, carrierservicedf.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicedf.CarrierServiceTable, carrierservicedf.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDF queries the carrier_additional_service_df edge of a CarrierServiceDF.
func (c *CarrierServiceDFClient) QueryCarrierAdditionalServiceDF(csd *CarrierServiceDF) *CarrierAdditionalServiceDFQuery {
	query := (&CarrierAdditionalServiceDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedf.Table, carrierservicedf.FieldID, id),
			sqlgraph.To(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrierservicedf.CarrierAdditionalServiceDFTable, carrierservicedf.CarrierAdditionalServiceDFPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(csd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceDFClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceDF
	return append(hooks[:len(hooks):len(hooks)], carrierservicedf.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceDFClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceDF
}

func (c *CarrierServiceDFClient) mutate(ctx context.Context, m *CarrierServiceDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceDF mutation op: %q", m.Op())
	}
}

// CarrierServiceDSVClient is a client for the CarrierServiceDSV schema.
type CarrierServiceDSVClient struct {
	config
}

// NewCarrierServiceDSVClient returns a client for the CarrierServiceDSV from the given config.
func NewCarrierServiceDSVClient(c config) *CarrierServiceDSVClient {
	return &CarrierServiceDSVClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservicedsv.Hooks(f(g(h())))`.
func (c *CarrierServiceDSVClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceDSV = append(c.hooks.CarrierServiceDSV, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservicedsv.Intercept(f(g(h())))`.
func (c *CarrierServiceDSVClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceDSV = append(c.inters.CarrierServiceDSV, interceptors...)
}

// Create returns a builder for creating a CarrierServiceDSV entity.
func (c *CarrierServiceDSVClient) Create() *CarrierServiceDSVCreate {
	mutation := newCarrierServiceDSVMutation(c.config, OpCreate)
	return &CarrierServiceDSVCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceDSV entities.
func (c *CarrierServiceDSVClient) CreateBulk(builders ...*CarrierServiceDSVCreate) *CarrierServiceDSVCreateBulk {
	return &CarrierServiceDSVCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceDSVClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceDSVCreate, int)) *CarrierServiceDSVCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceDSVCreateBulk{err: fmt.Errorf("calling to CarrierServiceDSVClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceDSVCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceDSVCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceDSV.
func (c *CarrierServiceDSVClient) Update() *CarrierServiceDSVUpdate {
	mutation := newCarrierServiceDSVMutation(c.config, OpUpdate)
	return &CarrierServiceDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceDSVClient) UpdateOne(csd *CarrierServiceDSV) *CarrierServiceDSVUpdateOne {
	mutation := newCarrierServiceDSVMutation(c.config, OpUpdateOne, withCarrierServiceDSV(csd))
	return &CarrierServiceDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceDSVClient) UpdateOneID(id pulid.ID) *CarrierServiceDSVUpdateOne {
	mutation := newCarrierServiceDSVMutation(c.config, OpUpdateOne, withCarrierServiceDSVID(id))
	return &CarrierServiceDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceDSV.
func (c *CarrierServiceDSVClient) Delete() *CarrierServiceDSVDelete {
	mutation := newCarrierServiceDSVMutation(c.config, OpDelete)
	return &CarrierServiceDSVDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceDSVClient) DeleteOne(csd *CarrierServiceDSV) *CarrierServiceDSVDeleteOne {
	return c.DeleteOneID(csd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceDSVClient) DeleteOneID(id pulid.ID) *CarrierServiceDSVDeleteOne {
	builder := c.Delete().Where(carrierservicedsv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceDSVDeleteOne{builder}
}

// Query returns a query builder for CarrierServiceDSV.
func (c *CarrierServiceDSVClient) Query() *CarrierServiceDSVQuery {
	return &CarrierServiceDSVQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceDSV},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceDSV entity by its id.
func (c *CarrierServiceDSVClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceDSV, error) {
	return c.Query().Where(carrierservicedsv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceDSVClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceDSV {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceDSV.
func (c *CarrierServiceDSVClient) QueryCarrierService(csd *CarrierServiceDSV) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedsv.Table, carrierservicedsv.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicedsv.CarrierServiceTable, carrierservicedsv.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDSV queries the carrier_additional_service_dsv edge of a CarrierServiceDSV.
func (c *CarrierServiceDSVClient) QueryCarrierAdditionalServiceDSV(csd *CarrierServiceDSV) *CarrierAdditionalServiceDSVQuery {
	query := (&CarrierAdditionalServiceDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicedsv.Table, carrierservicedsv.FieldID, id),
			sqlgraph.To(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrierservicedsv.CarrierAdditionalServiceDSVTable, carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(csd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceDSVClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceDSV
	return append(hooks[:len(hooks):len(hooks)], carrierservicedsv.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceDSVClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceDSV
}

func (c *CarrierServiceDSVClient) mutate(ctx context.Context, m *CarrierServiceDSVMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceDSVCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceDSVDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceDSV mutation op: %q", m.Op())
	}
}

// CarrierServiceEasyPostClient is a client for the CarrierServiceEasyPost schema.
type CarrierServiceEasyPostClient struct {
	config
}

// NewCarrierServiceEasyPostClient returns a client for the CarrierServiceEasyPost from the given config.
func NewCarrierServiceEasyPostClient(c config) *CarrierServiceEasyPostClient {
	return &CarrierServiceEasyPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierserviceeasypost.Hooks(f(g(h())))`.
func (c *CarrierServiceEasyPostClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceEasyPost = append(c.hooks.CarrierServiceEasyPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierserviceeasypost.Intercept(f(g(h())))`.
func (c *CarrierServiceEasyPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceEasyPost = append(c.inters.CarrierServiceEasyPost, interceptors...)
}

// Create returns a builder for creating a CarrierServiceEasyPost entity.
func (c *CarrierServiceEasyPostClient) Create() *CarrierServiceEasyPostCreate {
	mutation := newCarrierServiceEasyPostMutation(c.config, OpCreate)
	return &CarrierServiceEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceEasyPost entities.
func (c *CarrierServiceEasyPostClient) CreateBulk(builders ...*CarrierServiceEasyPostCreate) *CarrierServiceEasyPostCreateBulk {
	return &CarrierServiceEasyPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceEasyPostClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceEasyPostCreate, int)) *CarrierServiceEasyPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceEasyPostCreateBulk{err: fmt.Errorf("calling to CarrierServiceEasyPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceEasyPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceEasyPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceEasyPost.
func (c *CarrierServiceEasyPostClient) Update() *CarrierServiceEasyPostUpdate {
	mutation := newCarrierServiceEasyPostMutation(c.config, OpUpdate)
	return &CarrierServiceEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceEasyPostClient) UpdateOne(csep *CarrierServiceEasyPost) *CarrierServiceEasyPostUpdateOne {
	mutation := newCarrierServiceEasyPostMutation(c.config, OpUpdateOne, withCarrierServiceEasyPost(csep))
	return &CarrierServiceEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceEasyPostClient) UpdateOneID(id pulid.ID) *CarrierServiceEasyPostUpdateOne {
	mutation := newCarrierServiceEasyPostMutation(c.config, OpUpdateOne, withCarrierServiceEasyPostID(id))
	return &CarrierServiceEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceEasyPost.
func (c *CarrierServiceEasyPostClient) Delete() *CarrierServiceEasyPostDelete {
	mutation := newCarrierServiceEasyPostMutation(c.config, OpDelete)
	return &CarrierServiceEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceEasyPostClient) DeleteOne(csep *CarrierServiceEasyPost) *CarrierServiceEasyPostDeleteOne {
	return c.DeleteOneID(csep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceEasyPostClient) DeleteOneID(id pulid.ID) *CarrierServiceEasyPostDeleteOne {
	builder := c.Delete().Where(carrierserviceeasypost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceEasyPostDeleteOne{builder}
}

// Query returns a query builder for CarrierServiceEasyPost.
func (c *CarrierServiceEasyPostClient) Query() *CarrierServiceEasyPostQuery {
	return &CarrierServiceEasyPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceEasyPost},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceEasyPost entity by its id.
func (c *CarrierServiceEasyPostClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceEasyPost, error) {
	return c.Query().Where(carrierserviceeasypost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceEasyPostClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceEasyPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceEasyPost.
func (c *CarrierServiceEasyPostClient) QueryCarrierService(csep *CarrierServiceEasyPost) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierserviceeasypost.Table, carrierserviceeasypost.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierserviceeasypost.CarrierServiceTable, carrierserviceeasypost.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAddServEasyPost queries the carrier_add_serv_easy_post edge of a CarrierServiceEasyPost.
func (c *CarrierServiceEasyPostClient) QueryCarrierAddServEasyPost(csep *CarrierServiceEasyPost) *CarrierAdditionalServiceEasyPostQuery {
	query := (&CarrierAdditionalServiceEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierserviceeasypost.Table, carrierserviceeasypost.FieldID, id),
			sqlgraph.To(carrieradditionalserviceeasypost.Table, carrieradditionalserviceeasypost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, carrierserviceeasypost.CarrierAddServEasyPostTable, carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(csep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceEasyPostClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceEasyPost
	return append(hooks[:len(hooks):len(hooks)], carrierserviceeasypost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceEasyPostClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceEasyPost
}

func (c *CarrierServiceEasyPostClient) mutate(ctx context.Context, m *CarrierServiceEasyPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceEasyPost mutation op: %q", m.Op())
	}
}

// CarrierServiceGLSClient is a client for the CarrierServiceGLS schema.
type CarrierServiceGLSClient struct {
	config
}

// NewCarrierServiceGLSClient returns a client for the CarrierServiceGLS from the given config.
func NewCarrierServiceGLSClient(c config) *CarrierServiceGLSClient {
	return &CarrierServiceGLSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservicegls.Hooks(f(g(h())))`.
func (c *CarrierServiceGLSClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceGLS = append(c.hooks.CarrierServiceGLS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservicegls.Intercept(f(g(h())))`.
func (c *CarrierServiceGLSClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceGLS = append(c.inters.CarrierServiceGLS, interceptors...)
}

// Create returns a builder for creating a CarrierServiceGLS entity.
func (c *CarrierServiceGLSClient) Create() *CarrierServiceGLSCreate {
	mutation := newCarrierServiceGLSMutation(c.config, OpCreate)
	return &CarrierServiceGLSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceGLS entities.
func (c *CarrierServiceGLSClient) CreateBulk(builders ...*CarrierServiceGLSCreate) *CarrierServiceGLSCreateBulk {
	return &CarrierServiceGLSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceGLSClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceGLSCreate, int)) *CarrierServiceGLSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceGLSCreateBulk{err: fmt.Errorf("calling to CarrierServiceGLSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceGLSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceGLSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceGLS.
func (c *CarrierServiceGLSClient) Update() *CarrierServiceGLSUpdate {
	mutation := newCarrierServiceGLSMutation(c.config, OpUpdate)
	return &CarrierServiceGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceGLSClient) UpdateOne(csg *CarrierServiceGLS) *CarrierServiceGLSUpdateOne {
	mutation := newCarrierServiceGLSMutation(c.config, OpUpdateOne, withCarrierServiceGLS(csg))
	return &CarrierServiceGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceGLSClient) UpdateOneID(id pulid.ID) *CarrierServiceGLSUpdateOne {
	mutation := newCarrierServiceGLSMutation(c.config, OpUpdateOne, withCarrierServiceGLSID(id))
	return &CarrierServiceGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceGLS.
func (c *CarrierServiceGLSClient) Delete() *CarrierServiceGLSDelete {
	mutation := newCarrierServiceGLSMutation(c.config, OpDelete)
	return &CarrierServiceGLSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceGLSClient) DeleteOne(csg *CarrierServiceGLS) *CarrierServiceGLSDeleteOne {
	return c.DeleteOneID(csg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceGLSClient) DeleteOneID(id pulid.ID) *CarrierServiceGLSDeleteOne {
	builder := c.Delete().Where(carrierservicegls.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceGLSDeleteOne{builder}
}

// Query returns a query builder for CarrierServiceGLS.
func (c *CarrierServiceGLSClient) Query() *CarrierServiceGLSQuery {
	return &CarrierServiceGLSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceGLS},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceGLS entity by its id.
func (c *CarrierServiceGLSClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceGLS, error) {
	return c.Query().Where(carrierservicegls.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceGLSClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceGLS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceGLS.
func (c *CarrierServiceGLSClient) QueryCarrierService(csg *CarrierServiceGLS) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicegls.Table, carrierservicegls.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicegls.CarrierServiceTable, carrierservicegls.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLS queries the carrier_additional_service_gls edge of a CarrierServiceGLS.
func (c *CarrierServiceGLSClient) QueryCarrierAdditionalServiceGLS(csg *CarrierServiceGLS) *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicegls.Table, carrierservicegls.FieldID, id),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierservicegls.CarrierAdditionalServiceGLSTable, carrierservicegls.CarrierAdditionalServiceGLSColumn),
		)
		fromV = sqlgraph.Neighbors(csg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceGLSClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceGLS
	return append(hooks[:len(hooks):len(hooks)], carrierservicegls.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceGLSClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceGLS
}

func (c *CarrierServiceGLSClient) mutate(ctx context.Context, m *CarrierServiceGLSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceGLSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceGLSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceGLS mutation op: %q", m.Op())
	}
}

// CarrierServicePostNordClient is a client for the CarrierServicePostNord schema.
type CarrierServicePostNordClient struct {
	config
}

// NewCarrierServicePostNordClient returns a client for the CarrierServicePostNord from the given config.
func NewCarrierServicePostNordClient(c config) *CarrierServicePostNordClient {
	return &CarrierServicePostNordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierservicepostnord.Hooks(f(g(h())))`.
func (c *CarrierServicePostNordClient) Use(hooks ...Hook) {
	c.hooks.CarrierServicePostNord = append(c.hooks.CarrierServicePostNord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierservicepostnord.Intercept(f(g(h())))`.
func (c *CarrierServicePostNordClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServicePostNord = append(c.inters.CarrierServicePostNord, interceptors...)
}

// Create returns a builder for creating a CarrierServicePostNord entity.
func (c *CarrierServicePostNordClient) Create() *CarrierServicePostNordCreate {
	mutation := newCarrierServicePostNordMutation(c.config, OpCreate)
	return &CarrierServicePostNordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServicePostNord entities.
func (c *CarrierServicePostNordClient) CreateBulk(builders ...*CarrierServicePostNordCreate) *CarrierServicePostNordCreateBulk {
	return &CarrierServicePostNordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServicePostNordClient) MapCreateBulk(slice any, setFunc func(*CarrierServicePostNordCreate, int)) *CarrierServicePostNordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServicePostNordCreateBulk{err: fmt.Errorf("calling to CarrierServicePostNordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServicePostNordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServicePostNordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServicePostNord.
func (c *CarrierServicePostNordClient) Update() *CarrierServicePostNordUpdate {
	mutation := newCarrierServicePostNordMutation(c.config, OpUpdate)
	return &CarrierServicePostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServicePostNordClient) UpdateOne(cspn *CarrierServicePostNord) *CarrierServicePostNordUpdateOne {
	mutation := newCarrierServicePostNordMutation(c.config, OpUpdateOne, withCarrierServicePostNord(cspn))
	return &CarrierServicePostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServicePostNordClient) UpdateOneID(id pulid.ID) *CarrierServicePostNordUpdateOne {
	mutation := newCarrierServicePostNordMutation(c.config, OpUpdateOne, withCarrierServicePostNordID(id))
	return &CarrierServicePostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServicePostNord.
func (c *CarrierServicePostNordClient) Delete() *CarrierServicePostNordDelete {
	mutation := newCarrierServicePostNordMutation(c.config, OpDelete)
	return &CarrierServicePostNordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServicePostNordClient) DeleteOne(cspn *CarrierServicePostNord) *CarrierServicePostNordDeleteOne {
	return c.DeleteOneID(cspn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServicePostNordClient) DeleteOneID(id pulid.ID) *CarrierServicePostNordDeleteOne {
	builder := c.Delete().Where(carrierservicepostnord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServicePostNordDeleteOne{builder}
}

// Query returns a query builder for CarrierServicePostNord.
func (c *CarrierServicePostNordClient) Query() *CarrierServicePostNordQuery {
	return &CarrierServicePostNordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServicePostNord},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServicePostNord entity by its id.
func (c *CarrierServicePostNordClient) Get(ctx context.Context, id pulid.ID) (*CarrierServicePostNord, error) {
	return c.Query().Where(carrierservicepostnord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServicePostNordClient) GetX(ctx context.Context, id pulid.ID) *CarrierServicePostNord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServicePostNord.
func (c *CarrierServicePostNordClient) QueryCarrierService(cspn *CarrierServicePostNord) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicepostnord.Table, carrierservicepostnord.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierservicepostnord.CarrierServiceTable, carrierservicepostnord.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(cspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAddServPostNord queries the carrier_add_serv_post_nord edge of a CarrierServicePostNord.
func (c *CarrierServicePostNordClient) QueryCarrierAddServPostNord(cspn *CarrierServicePostNord) *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierservicepostnord.Table, carrierservicepostnord.FieldID, id),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierservicepostnord.CarrierAddServPostNordTable, carrierservicepostnord.CarrierAddServPostNordColumn),
		)
		fromV = sqlgraph.Neighbors(cspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServicePostNordClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServicePostNord
	return append(hooks[:len(hooks):len(hooks)], carrierservicepostnord.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServicePostNordClient) Interceptors() []Interceptor {
	return c.inters.CarrierServicePostNord
}

func (c *CarrierServicePostNordClient) mutate(ctx context.Context, m *CarrierServicePostNordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServicePostNordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServicePostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServicePostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServicePostNordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServicePostNord mutation op: %q", m.Op())
	}
}

// CarrierServiceUSPSClient is a client for the CarrierServiceUSPS schema.
type CarrierServiceUSPSClient struct {
	config
}

// NewCarrierServiceUSPSClient returns a client for the CarrierServiceUSPS from the given config.
func NewCarrierServiceUSPSClient(c config) *CarrierServiceUSPSClient {
	return &CarrierServiceUSPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierserviceusps.Hooks(f(g(h())))`.
func (c *CarrierServiceUSPSClient) Use(hooks ...Hook) {
	c.hooks.CarrierServiceUSPS = append(c.hooks.CarrierServiceUSPS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierserviceusps.Intercept(f(g(h())))`.
func (c *CarrierServiceUSPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierServiceUSPS = append(c.inters.CarrierServiceUSPS, interceptors...)
}

// Create returns a builder for creating a CarrierServiceUSPS entity.
func (c *CarrierServiceUSPSClient) Create() *CarrierServiceUSPSCreate {
	mutation := newCarrierServiceUSPSMutation(c.config, OpCreate)
	return &CarrierServiceUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierServiceUSPS entities.
func (c *CarrierServiceUSPSClient) CreateBulk(builders ...*CarrierServiceUSPSCreate) *CarrierServiceUSPSCreateBulk {
	return &CarrierServiceUSPSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierServiceUSPSClient) MapCreateBulk(slice any, setFunc func(*CarrierServiceUSPSCreate, int)) *CarrierServiceUSPSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierServiceUSPSCreateBulk{err: fmt.Errorf("calling to CarrierServiceUSPSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierServiceUSPSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierServiceUSPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierServiceUSPS.
func (c *CarrierServiceUSPSClient) Update() *CarrierServiceUSPSUpdate {
	mutation := newCarrierServiceUSPSMutation(c.config, OpUpdate)
	return &CarrierServiceUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierServiceUSPSClient) UpdateOne(csu *CarrierServiceUSPS) *CarrierServiceUSPSUpdateOne {
	mutation := newCarrierServiceUSPSMutation(c.config, OpUpdateOne, withCarrierServiceUSPS(csu))
	return &CarrierServiceUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierServiceUSPSClient) UpdateOneID(id pulid.ID) *CarrierServiceUSPSUpdateOne {
	mutation := newCarrierServiceUSPSMutation(c.config, OpUpdateOne, withCarrierServiceUSPSID(id))
	return &CarrierServiceUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierServiceUSPS.
func (c *CarrierServiceUSPSClient) Delete() *CarrierServiceUSPSDelete {
	mutation := newCarrierServiceUSPSMutation(c.config, OpDelete)
	return &CarrierServiceUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierServiceUSPSClient) DeleteOne(csu *CarrierServiceUSPS) *CarrierServiceUSPSDeleteOne {
	return c.DeleteOneID(csu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierServiceUSPSClient) DeleteOneID(id pulid.ID) *CarrierServiceUSPSDeleteOne {
	builder := c.Delete().Where(carrierserviceusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierServiceUSPSDeleteOne{builder}
}

// Query returns a query builder for CarrierServiceUSPS.
func (c *CarrierServiceUSPSClient) Query() *CarrierServiceUSPSQuery {
	return &CarrierServiceUSPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierServiceUSPS},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierServiceUSPS entity by its id.
func (c *CarrierServiceUSPSClient) Get(ctx context.Context, id pulid.ID) (*CarrierServiceUSPS, error) {
	return c.Query().Where(carrierserviceusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierServiceUSPSClient) GetX(ctx context.Context, id pulid.ID) *CarrierServiceUSPS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCarrierService queries the carrier_service edge of a CarrierServiceUSPS.
func (c *CarrierServiceUSPSClient) QueryCarrierService(csu *CarrierServiceUSPS) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierserviceusps.Table, carrierserviceusps.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierserviceusps.CarrierServiceTable, carrierserviceusps.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(csu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceUSPS queries the carrier_additional_service_usps edge of a CarrierServiceUSPS.
func (c *CarrierServiceUSPSClient) QueryCarrierAdditionalServiceUSPS(csu *CarrierServiceUSPS) *CarrierAdditionalServiceUSPSQuery {
	query := (&CarrierAdditionalServiceUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := csu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierserviceusps.Table, carrierserviceusps.FieldID, id),
			sqlgraph.To(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierserviceusps.CarrierAdditionalServiceUSPSTable, carrierserviceusps.CarrierAdditionalServiceUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(csu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierServiceUSPSClient) Hooks() []Hook {
	hooks := c.hooks.CarrierServiceUSPS
	return append(hooks[:len(hooks):len(hooks)], carrierserviceusps.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierServiceUSPSClient) Interceptors() []Interceptor {
	return c.inters.CarrierServiceUSPS
}

func (c *CarrierServiceUSPSClient) mutate(ctx context.Context, m *CarrierServiceUSPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierServiceUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierServiceUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierServiceUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierServiceUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierServiceUSPS mutation op: %q", m.Op())
	}
}

// CarrierUSPSClient is a client for the CarrierUSPS schema.
type CarrierUSPSClient struct {
	config
}

// NewCarrierUSPSClient returns a client for the CarrierUSPS from the given config.
func NewCarrierUSPSClient(c config) *CarrierUSPSClient {
	return &CarrierUSPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrierusps.Hooks(f(g(h())))`.
func (c *CarrierUSPSClient) Use(hooks ...Hook) {
	c.hooks.CarrierUSPS = append(c.hooks.CarrierUSPS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `carrierusps.Intercept(f(g(h())))`.
func (c *CarrierUSPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarrierUSPS = append(c.inters.CarrierUSPS, interceptors...)
}

// Create returns a builder for creating a CarrierUSPS entity.
func (c *CarrierUSPSClient) Create() *CarrierUSPSCreate {
	mutation := newCarrierUSPSMutation(c.config, OpCreate)
	return &CarrierUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarrierUSPS entities.
func (c *CarrierUSPSClient) CreateBulk(builders ...*CarrierUSPSCreate) *CarrierUSPSCreateBulk {
	return &CarrierUSPSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarrierUSPSClient) MapCreateBulk(slice any, setFunc func(*CarrierUSPSCreate, int)) *CarrierUSPSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarrierUSPSCreateBulk{err: fmt.Errorf("calling to CarrierUSPSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarrierUSPSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarrierUSPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarrierUSPS.
func (c *CarrierUSPSClient) Update() *CarrierUSPSUpdate {
	mutation := newCarrierUSPSMutation(c.config, OpUpdate)
	return &CarrierUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarrierUSPSClient) UpdateOne(cu *CarrierUSPS) *CarrierUSPSUpdateOne {
	mutation := newCarrierUSPSMutation(c.config, OpUpdateOne, withCarrierUSPS(cu))
	return &CarrierUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarrierUSPSClient) UpdateOneID(id pulid.ID) *CarrierUSPSUpdateOne {
	mutation := newCarrierUSPSMutation(c.config, OpUpdateOne, withCarrierUSPSID(id))
	return &CarrierUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarrierUSPS.
func (c *CarrierUSPSClient) Delete() *CarrierUSPSDelete {
	mutation := newCarrierUSPSMutation(c.config, OpDelete)
	return &CarrierUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarrierUSPSClient) DeleteOne(cu *CarrierUSPS) *CarrierUSPSDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarrierUSPSClient) DeleteOneID(id pulid.ID) *CarrierUSPSDeleteOne {
	builder := c.Delete().Where(carrierusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarrierUSPSDeleteOne{builder}
}

// Query returns a query builder for CarrierUSPS.
func (c *CarrierUSPSClient) Query() *CarrierUSPSQuery {
	return &CarrierUSPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarrierUSPS},
		inters: c.Interceptors(),
	}
}

// Get returns a CarrierUSPS entity by its id.
func (c *CarrierUSPSClient) Get(ctx context.Context, id pulid.ID) (*CarrierUSPS, error) {
	return c.Query().Where(carrierusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarrierUSPSClient) GetX(ctx context.Context, id pulid.ID) *CarrierUSPS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarrierUSPS.
func (c *CarrierUSPSClient) QueryTenant(cu *CarrierUSPS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierusps.Table, carrierusps.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, carrierusps.TenantTable, carrierusps.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a CarrierUSPS.
func (c *CarrierUSPSClient) QueryCarrier(cu *CarrierUSPS) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierusps.Table, carrierusps.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierusps.CarrierTable, carrierusps.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarrierUSPSClient) Hooks() []Hook {
	hooks := c.hooks.CarrierUSPS
	return append(hooks[:len(hooks):len(hooks)], carrierusps.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CarrierUSPSClient) Interceptors() []Interceptor {
	return c.inters.CarrierUSPS
}

func (c *CarrierUSPSClient) mutate(ctx context.Context, m *CarrierUSPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarrierUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarrierUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarrierUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarrierUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CarrierUSPS mutation op: %q", m.Op())
	}
}

// ChangeHistoryClient is a client for the ChangeHistory schema.
type ChangeHistoryClient struct {
	config
}

// NewChangeHistoryClient returns a client for the ChangeHistory from the given config.
func NewChangeHistoryClient(c config) *ChangeHistoryClient {
	return &ChangeHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `changehistory.Hooks(f(g(h())))`.
func (c *ChangeHistoryClient) Use(hooks ...Hook) {
	c.hooks.ChangeHistory = append(c.hooks.ChangeHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `changehistory.Intercept(f(g(h())))`.
func (c *ChangeHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ChangeHistory = append(c.inters.ChangeHistory, interceptors...)
}

// Create returns a builder for creating a ChangeHistory entity.
func (c *ChangeHistoryClient) Create() *ChangeHistoryCreate {
	mutation := newChangeHistoryMutation(c.config, OpCreate)
	return &ChangeHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ChangeHistory entities.
func (c *ChangeHistoryClient) CreateBulk(builders ...*ChangeHistoryCreate) *ChangeHistoryCreateBulk {
	return &ChangeHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChangeHistoryClient) MapCreateBulk(slice any, setFunc func(*ChangeHistoryCreate, int)) *ChangeHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChangeHistoryCreateBulk{err: fmt.Errorf("calling to ChangeHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChangeHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChangeHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ChangeHistory.
func (c *ChangeHistoryClient) Update() *ChangeHistoryUpdate {
	mutation := newChangeHistoryMutation(c.config, OpUpdate)
	return &ChangeHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChangeHistoryClient) UpdateOne(ch *ChangeHistory) *ChangeHistoryUpdateOne {
	mutation := newChangeHistoryMutation(c.config, OpUpdateOne, withChangeHistory(ch))
	return &ChangeHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChangeHistoryClient) UpdateOneID(id pulid.ID) *ChangeHistoryUpdateOne {
	mutation := newChangeHistoryMutation(c.config, OpUpdateOne, withChangeHistoryID(id))
	return &ChangeHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ChangeHistory.
func (c *ChangeHistoryClient) Delete() *ChangeHistoryDelete {
	mutation := newChangeHistoryMutation(c.config, OpDelete)
	return &ChangeHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChangeHistoryClient) DeleteOne(ch *ChangeHistory) *ChangeHistoryDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChangeHistoryClient) DeleteOneID(id pulid.ID) *ChangeHistoryDeleteOne {
	builder := c.Delete().Where(changehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChangeHistoryDeleteOne{builder}
}

// Query returns a query builder for ChangeHistory.
func (c *ChangeHistoryClient) Query() *ChangeHistoryQuery {
	return &ChangeHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChangeHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a ChangeHistory entity by its id.
func (c *ChangeHistoryClient) Get(ctx context.Context, id pulid.ID) (*ChangeHistory, error) {
	return c.Query().Where(changehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChangeHistoryClient) GetX(ctx context.Context, id pulid.ID) *ChangeHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ChangeHistory.
func (c *ChangeHistoryClient) QueryTenant(ch *ChangeHistory) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, changehistory.TenantTable, changehistory.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanHistory queries the plan_history edge of a ChangeHistory.
func (c *ChangeHistoryClient) QueryPlanHistory(ch *ChangeHistory) *PlanHistoryQuery {
	query := (&PlanHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, id),
			sqlgraph.To(planhistory.Table, planhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.PlanHistoryTable, changehistory.PlanHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ChangeHistory.
func (c *ChangeHistoryClient) QueryUser(ch *ChangeHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, changehistory.UserTable, changehistory.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHistory queries the order_history edge of a ChangeHistory.
func (c *ChangeHistoryClient) QueryOrderHistory(ch *ChangeHistory) *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, id),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.OrderHistoryTable, changehistory.OrderHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentHistory queries the shipment_history edge of a ChangeHistory.
func (c *ChangeHistoryClient) QueryShipmentHistory(ch *ChangeHistory) *ShipmentHistoryQuery {
	query := (&ShipmentHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, id),
			sqlgraph.To(shipmenthistory.Table, shipmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.ShipmentHistoryTable, changehistory.ShipmentHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColliHistory queries the return_colli_history edge of a ChangeHistory.
func (c *ChangeHistoryClient) QueryReturnColliHistory(ch *ChangeHistory) *ReturnColliHistoryQuery {
	query := (&ReturnColliHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(changehistory.Table, changehistory.FieldID, id),
			sqlgraph.To(returncollihistory.Table, returncollihistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, changehistory.ReturnColliHistoryTable, changehistory.ReturnColliHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChangeHistoryClient) Hooks() []Hook {
	hooks := c.hooks.ChangeHistory
	return append(hooks[:len(hooks):len(hooks)], changehistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ChangeHistoryClient) Interceptors() []Interceptor {
	return c.inters.ChangeHistory
}

func (c *ChangeHistoryClient) mutate(ctx context.Context, m *ChangeHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChangeHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChangeHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChangeHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChangeHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ChangeHistory mutation op: %q", m.Op())
	}
}

// ColliClient is a client for the Colli schema.
type ColliClient struct {
	config
}

// NewColliClient returns a client for the Colli from the given config.
func NewColliClient(c config) *ColliClient {
	return &ColliClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `colli.Hooks(f(g(h())))`.
func (c *ColliClient) Use(hooks ...Hook) {
	c.hooks.Colli = append(c.hooks.Colli, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `colli.Intercept(f(g(h())))`.
func (c *ColliClient) Intercept(interceptors ...Interceptor) {
	c.inters.Colli = append(c.inters.Colli, interceptors...)
}

// Create returns a builder for creating a Colli entity.
func (c *ColliClient) Create() *ColliCreate {
	mutation := newColliMutation(c.config, OpCreate)
	return &ColliCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Colli entities.
func (c *ColliClient) CreateBulk(builders ...*ColliCreate) *ColliCreateBulk {
	return &ColliCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ColliClient) MapCreateBulk(slice any, setFunc func(*ColliCreate, int)) *ColliCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ColliCreateBulk{err: fmt.Errorf("calling to ColliClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ColliCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ColliCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Colli.
func (c *ColliClient) Update() *ColliUpdate {
	mutation := newColliMutation(c.config, OpUpdate)
	return &ColliUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ColliClient) UpdateOne(co *Colli) *ColliUpdateOne {
	mutation := newColliMutation(c.config, OpUpdateOne, withColli(co))
	return &ColliUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ColliClient) UpdateOneID(id pulid.ID) *ColliUpdateOne {
	mutation := newColliMutation(c.config, OpUpdateOne, withColliID(id))
	return &ColliUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Colli.
func (c *ColliClient) Delete() *ColliDelete {
	mutation := newColliMutation(c.config, OpDelete)
	return &ColliDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ColliClient) DeleteOne(co *Colli) *ColliDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ColliClient) DeleteOneID(id pulid.ID) *ColliDeleteOne {
	builder := c.Delete().Where(colli.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ColliDeleteOne{builder}
}

// Query returns a query builder for Colli.
func (c *ColliClient) Query() *ColliQuery {
	return &ColliQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeColli},
		inters: c.Interceptors(),
	}
}

// Get returns a Colli entity by its id.
func (c *ColliClient) Get(ctx context.Context, id pulid.ID) (*Colli, error) {
	return c.Query().Where(colli.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ColliClient) GetX(ctx context.Context, id pulid.ID) *Colli {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Colli.
func (c *ColliClient) QueryTenant(co *Colli) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.TenantTable, colli.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipient queries the recipient edge of a Colli.
func (c *ColliClient) QueryRecipient(co *Colli) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.RecipientTable, colli.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySender queries the sender edge of a Colli.
func (c *ColliClient) QuerySender(co *Colli) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.SenderTable, colli.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShop queries the parcel_shop edge of a Colli.
func (c *ColliClient) QueryParcelShop(co *Colli) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.ParcelShopTable, colli.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClickCollectLocation queries the click_collect_location edge of a Colli.
func (c *ColliClient) QueryClickCollectLocation(co *Colli) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.ClickCollectLocationTable, colli.ClickCollectLocationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderLines queries the order_lines edge of a Colli.
func (c *ColliClient) QueryOrderLines(co *Colli) *OrderLineQuery {
	query := (&OrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(orderline.Table, orderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, colli.OrderLinesTable, colli.OrderLinesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a Colli.
func (c *ColliClient) QueryDeliveryOption(co *Colli) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.DeliveryOptionTable, colli.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocumentFile queries the document_file edge of a Colli.
func (c *ColliClient) QueryDocumentFile(co *Colli) *DocumentFileQuery {
	query := (&DocumentFileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(documentfile.Table, documentfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, colli.DocumentFileTable, colli.DocumentFileColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentParcel queries the shipment_parcel edge of a Colli.
func (c *ColliClient) QueryShipmentParcel(co *Colli) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, colli.ShipmentParcelTable, colli.ShipmentParcelColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCancelledShipmentParcel queries the cancelled_shipment_parcel edge of a Colli.
func (c *ColliClient) QueryCancelledShipmentParcel(co *Colli) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, colli.CancelledShipmentParcelTable, colli.CancelledShipmentParcelPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Colli.
func (c *ColliClient) QueryOrder(co *Colli) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, colli.OrderTable, colli.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a Colli.
func (c *ColliClient) QueryPackaging(co *Colli) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, colli.PackagingTable, colli.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrintJob queries the print_job edge of a Colli.
func (c *ColliClient) QueryPrintJob(co *Colli) *PrintJobQuery {
	query := (&PrintJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(colli.Table, colli.FieldID, id),
			sqlgraph.To(printjob.Table, printjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, colli.PrintJobTable, colli.PrintJobColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ColliClient) Hooks() []Hook {
	hooks := c.hooks.Colli
	return append(hooks[:len(hooks):len(hooks)], colli.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ColliClient) Interceptors() []Interceptor {
	return c.inters.Colli
}

func (c *ColliClient) mutate(ctx context.Context, m *ColliMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ColliCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ColliUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ColliUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ColliDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Colli mutation op: %q", m.Op())
	}
}

// ConnectOptionCarrierClient is a client for the ConnectOptionCarrier schema.
type ConnectOptionCarrierClient struct {
	config
}

// NewConnectOptionCarrierClient returns a client for the ConnectOptionCarrier from the given config.
func NewConnectOptionCarrierClient(c config) *ConnectOptionCarrierClient {
	return &ConnectOptionCarrierClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectoptioncarrier.Hooks(f(g(h())))`.
func (c *ConnectOptionCarrierClient) Use(hooks ...Hook) {
	c.hooks.ConnectOptionCarrier = append(c.hooks.ConnectOptionCarrier, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectoptioncarrier.Intercept(f(g(h())))`.
func (c *ConnectOptionCarrierClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectOptionCarrier = append(c.inters.ConnectOptionCarrier, interceptors...)
}

// Create returns a builder for creating a ConnectOptionCarrier entity.
func (c *ConnectOptionCarrierClient) Create() *ConnectOptionCarrierCreate {
	mutation := newConnectOptionCarrierMutation(c.config, OpCreate)
	return &ConnectOptionCarrierCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectOptionCarrier entities.
func (c *ConnectOptionCarrierClient) CreateBulk(builders ...*ConnectOptionCarrierCreate) *ConnectOptionCarrierCreateBulk {
	return &ConnectOptionCarrierCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectOptionCarrierClient) MapCreateBulk(slice any, setFunc func(*ConnectOptionCarrierCreate, int)) *ConnectOptionCarrierCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectOptionCarrierCreateBulk{err: fmt.Errorf("calling to ConnectOptionCarrierClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectOptionCarrierCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectOptionCarrierCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectOptionCarrier.
func (c *ConnectOptionCarrierClient) Update() *ConnectOptionCarrierUpdate {
	mutation := newConnectOptionCarrierMutation(c.config, OpUpdate)
	return &ConnectOptionCarrierUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectOptionCarrierClient) UpdateOne(coc *ConnectOptionCarrier) *ConnectOptionCarrierUpdateOne {
	mutation := newConnectOptionCarrierMutation(c.config, OpUpdateOne, withConnectOptionCarrier(coc))
	return &ConnectOptionCarrierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectOptionCarrierClient) UpdateOneID(id pulid.ID) *ConnectOptionCarrierUpdateOne {
	mutation := newConnectOptionCarrierMutation(c.config, OpUpdateOne, withConnectOptionCarrierID(id))
	return &ConnectOptionCarrierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectOptionCarrier.
func (c *ConnectOptionCarrierClient) Delete() *ConnectOptionCarrierDelete {
	mutation := newConnectOptionCarrierMutation(c.config, OpDelete)
	return &ConnectOptionCarrierDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectOptionCarrierClient) DeleteOne(coc *ConnectOptionCarrier) *ConnectOptionCarrierDeleteOne {
	return c.DeleteOneID(coc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectOptionCarrierClient) DeleteOneID(id pulid.ID) *ConnectOptionCarrierDeleteOne {
	builder := c.Delete().Where(connectoptioncarrier.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectOptionCarrierDeleteOne{builder}
}

// Query returns a query builder for ConnectOptionCarrier.
func (c *ConnectOptionCarrierClient) Query() *ConnectOptionCarrierQuery {
	return &ConnectOptionCarrierQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectOptionCarrier},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectOptionCarrier entity by its id.
func (c *ConnectOptionCarrierClient) Get(ctx context.Context, id pulid.ID) (*ConnectOptionCarrier, error) {
	return c.Query().Where(connectoptioncarrier.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectOptionCarrierClient) GetX(ctx context.Context, id pulid.ID) *ConnectOptionCarrier {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ConnectOptionCarrier.
func (c *ConnectOptionCarrierClient) QueryTenant(coc *ConnectOptionCarrier) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := coc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectoptioncarrier.Table, connectoptioncarrier.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, connectoptioncarrier.TenantTable, connectoptioncarrier.TenantPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(coc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectOptionCarrierClient) Hooks() []Hook {
	hooks := c.hooks.ConnectOptionCarrier
	return append(hooks[:len(hooks):len(hooks)], connectoptioncarrier.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectOptionCarrierClient) Interceptors() []Interceptor {
	return c.inters.ConnectOptionCarrier
}

func (c *ConnectOptionCarrierClient) mutate(ctx context.Context, m *ConnectOptionCarrierMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectOptionCarrierCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectOptionCarrierUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectOptionCarrierUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectOptionCarrierDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectOptionCarrier mutation op: %q", m.Op())
	}
}

// ConnectOptionPlatformClient is a client for the ConnectOptionPlatform schema.
type ConnectOptionPlatformClient struct {
	config
}

// NewConnectOptionPlatformClient returns a client for the ConnectOptionPlatform from the given config.
func NewConnectOptionPlatformClient(c config) *ConnectOptionPlatformClient {
	return &ConnectOptionPlatformClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectoptionplatform.Hooks(f(g(h())))`.
func (c *ConnectOptionPlatformClient) Use(hooks ...Hook) {
	c.hooks.ConnectOptionPlatform = append(c.hooks.ConnectOptionPlatform, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectoptionplatform.Intercept(f(g(h())))`.
func (c *ConnectOptionPlatformClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectOptionPlatform = append(c.inters.ConnectOptionPlatform, interceptors...)
}

// Create returns a builder for creating a ConnectOptionPlatform entity.
func (c *ConnectOptionPlatformClient) Create() *ConnectOptionPlatformCreate {
	mutation := newConnectOptionPlatformMutation(c.config, OpCreate)
	return &ConnectOptionPlatformCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectOptionPlatform entities.
func (c *ConnectOptionPlatformClient) CreateBulk(builders ...*ConnectOptionPlatformCreate) *ConnectOptionPlatformCreateBulk {
	return &ConnectOptionPlatformCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectOptionPlatformClient) MapCreateBulk(slice any, setFunc func(*ConnectOptionPlatformCreate, int)) *ConnectOptionPlatformCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectOptionPlatformCreateBulk{err: fmt.Errorf("calling to ConnectOptionPlatformClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectOptionPlatformCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectOptionPlatformCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectOptionPlatform.
func (c *ConnectOptionPlatformClient) Update() *ConnectOptionPlatformUpdate {
	mutation := newConnectOptionPlatformMutation(c.config, OpUpdate)
	return &ConnectOptionPlatformUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectOptionPlatformClient) UpdateOne(cop *ConnectOptionPlatform) *ConnectOptionPlatformUpdateOne {
	mutation := newConnectOptionPlatformMutation(c.config, OpUpdateOne, withConnectOptionPlatform(cop))
	return &ConnectOptionPlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectOptionPlatformClient) UpdateOneID(id pulid.ID) *ConnectOptionPlatformUpdateOne {
	mutation := newConnectOptionPlatformMutation(c.config, OpUpdateOne, withConnectOptionPlatformID(id))
	return &ConnectOptionPlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectOptionPlatform.
func (c *ConnectOptionPlatformClient) Delete() *ConnectOptionPlatformDelete {
	mutation := newConnectOptionPlatformMutation(c.config, OpDelete)
	return &ConnectOptionPlatformDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectOptionPlatformClient) DeleteOne(cop *ConnectOptionPlatform) *ConnectOptionPlatformDeleteOne {
	return c.DeleteOneID(cop.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectOptionPlatformClient) DeleteOneID(id pulid.ID) *ConnectOptionPlatformDeleteOne {
	builder := c.Delete().Where(connectoptionplatform.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectOptionPlatformDeleteOne{builder}
}

// Query returns a query builder for ConnectOptionPlatform.
func (c *ConnectOptionPlatformClient) Query() *ConnectOptionPlatformQuery {
	return &ConnectOptionPlatformQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectOptionPlatform},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectOptionPlatform entity by its id.
func (c *ConnectOptionPlatformClient) Get(ctx context.Context, id pulid.ID) (*ConnectOptionPlatform, error) {
	return c.Query().Where(connectoptionplatform.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectOptionPlatformClient) GetX(ctx context.Context, id pulid.ID) *ConnectOptionPlatform {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ConnectOptionPlatform.
func (c *ConnectOptionPlatformClient) QueryTenant(cop *ConnectOptionPlatform) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cop.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectoptionplatform.Table, connectoptionplatform.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, connectoptionplatform.TenantTable, connectoptionplatform.TenantPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cop.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectOptionPlatformClient) Hooks() []Hook {
	hooks := c.hooks.ConnectOptionPlatform
	return append(hooks[:len(hooks):len(hooks)], connectoptionplatform.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectOptionPlatformClient) Interceptors() []Interceptor {
	return c.inters.ConnectOptionPlatform
}

func (c *ConnectOptionPlatformClient) mutate(ctx context.Context, m *ConnectOptionPlatformMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectOptionPlatformCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectOptionPlatformUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectOptionPlatformUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectOptionPlatformDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectOptionPlatform mutation op: %q", m.Op())
	}
}

// ConnectionClient is a client for the Connection schema.
type ConnectionClient struct {
	config
}

// NewConnectionClient returns a client for the Connection from the given config.
func NewConnectionClient(c config) *ConnectionClient {
	return &ConnectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connection.Hooks(f(g(h())))`.
func (c *ConnectionClient) Use(hooks ...Hook) {
	c.hooks.Connection = append(c.hooks.Connection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connection.Intercept(f(g(h())))`.
func (c *ConnectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Connection = append(c.inters.Connection, interceptors...)
}

// Create returns a builder for creating a Connection entity.
func (c *ConnectionClient) Create() *ConnectionCreate {
	mutation := newConnectionMutation(c.config, OpCreate)
	return &ConnectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Connection entities.
func (c *ConnectionClient) CreateBulk(builders ...*ConnectionCreate) *ConnectionCreateBulk {
	return &ConnectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectionClient) MapCreateBulk(slice any, setFunc func(*ConnectionCreate, int)) *ConnectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectionCreateBulk{err: fmt.Errorf("calling to ConnectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Connection.
func (c *ConnectionClient) Update() *ConnectionUpdate {
	mutation := newConnectionMutation(c.config, OpUpdate)
	return &ConnectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectionClient) UpdateOne(co *Connection) *ConnectionUpdateOne {
	mutation := newConnectionMutation(c.config, OpUpdateOne, withConnection(co))
	return &ConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectionClient) UpdateOneID(id pulid.ID) *ConnectionUpdateOne {
	mutation := newConnectionMutation(c.config, OpUpdateOne, withConnectionID(id))
	return &ConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Connection.
func (c *ConnectionClient) Delete() *ConnectionDelete {
	mutation := newConnectionMutation(c.config, OpDelete)
	return &ConnectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectionClient) DeleteOne(co *Connection) *ConnectionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectionClient) DeleteOneID(id pulid.ID) *ConnectionDeleteOne {
	builder := c.Delete().Where(connection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectionDeleteOne{builder}
}

// Query returns a query builder for Connection.
func (c *ConnectionClient) Query() *ConnectionQuery {
	return &ConnectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnection},
		inters: c.Interceptors(),
	}
}

// Get returns a Connection entity by its id.
func (c *ConnectionClient) Get(ctx context.Context, id pulid.ID) (*Connection, error) {
	return c.Query().Where(connection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectionClient) GetX(ctx context.Context, id pulid.ID) *Connection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Connection.
func (c *ConnectionClient) QueryTenant(co *Connection) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.TenantTable, connection.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectionBrand queries the connection_brand edge of a Connection.
func (c *ConnectionClient) QueryConnectionBrand(co *Connection) *ConnectionBrandQuery {
	query := (&ConnectionBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(connectionbrand.Table, connectionbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.ConnectionBrandTable, connection.ConnectionBrandColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectionShopify queries the connection_shopify edge of a Connection.
func (c *ConnectionClient) QueryConnectionShopify(co *Connection) *ConnectionShopifyQuery {
	query := (&ConnectionShopifyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(connectionshopify.Table, connectionshopify.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, connection.ConnectionShopifyTable, connection.ConnectionShopifyColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Connection.
func (c *ConnectionClient) QueryOrders(co *Connection) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connection.OrdersTable, connection.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySenderLocation queries the sender_location edge of a Connection.
func (c *ConnectionClient) QuerySenderLocation(co *Connection) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.SenderLocationTable, connection.SenderLocationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPickupLocation queries the pickup_location edge of a Connection.
func (c *ConnectionClient) QueryPickupLocation(co *Connection) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.PickupLocationTable, connection.PickupLocationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnLocation queries the return_location edge of a Connection.
func (c *ConnectionClient) QueryReturnLocation(co *Connection) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.ReturnLocationTable, connection.ReturnLocationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerLocation queries the seller_location edge of a Connection.
func (c *ConnectionClient) QuerySellerLocation(co *Connection) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.SellerLocationTable, connection.SellerLocationColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a Connection.
func (c *ConnectionClient) QueryDeliveryOption(co *Connection) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, connection.DeliveryOptionTable, connection.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultDeliveryOption queries the default_delivery_option edge of a Connection.
func (c *ConnectionClient) QueryDefaultDeliveryOption(co *Connection) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, connection.DefaultDeliveryOptionTable, connection.DefaultDeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortal queries the return_portal edge of a Connection.
func (c *ConnectionClient) QueryReturnPortal(co *Connection) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, connection.ReturnPortalTable, connection.ReturnPortalColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTest queries the hypothesis_test edge of a Connection.
func (c *ConnectionClient) QueryHypothesisTest(co *Connection) *HypothesisTestQuery {
	query := (&HypothesisTestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(hypothesistest.Table, hypothesistest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connection.HypothesisTestTable, connection.HypothesisTestColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a Connection.
func (c *ConnectionClient) QueryNotifications(co *Connection) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connection.NotificationsTable, connection.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrency queries the currency edge of a Connection.
func (c *ConnectionClient) QueryCurrency(co *Connection) *CurrencyQuery {
	query := (&CurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.CurrencyTable, connection.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackingSlipTemplate queries the packing_slip_template edge of a Connection.
func (c *ConnectionClient) QueryPackingSlipTemplate(co *Connection) *DocumentQuery {
	query := (&DocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connection.PackingSlipTemplateTable, connection.PackingSlipTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectionLookup queries the connection_lookup edge of a Connection.
func (c *ConnectionClient) QueryConnectionLookup(co *Connection) *ConnectionLookupQuery {
	query := (&ConnectionLookupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connection.Table, connection.FieldID, id),
			sqlgraph.To(connectionlookup.Table, connectionlookup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connection.ConnectionLookupTable, connection.ConnectionLookupColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectionClient) Hooks() []Hook {
	hooks := c.hooks.Connection
	return append(hooks[:len(hooks):len(hooks)], connection.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectionClient) Interceptors() []Interceptor {
	return c.inters.Connection
}

func (c *ConnectionClient) mutate(ctx context.Context, m *ConnectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Connection mutation op: %q", m.Op())
	}
}

// ConnectionBrandClient is a client for the ConnectionBrand schema.
type ConnectionBrandClient struct {
	config
}

// NewConnectionBrandClient returns a client for the ConnectionBrand from the given config.
func NewConnectionBrandClient(c config) *ConnectionBrandClient {
	return &ConnectionBrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectionbrand.Hooks(f(g(h())))`.
func (c *ConnectionBrandClient) Use(hooks ...Hook) {
	c.hooks.ConnectionBrand = append(c.hooks.ConnectionBrand, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectionbrand.Intercept(f(g(h())))`.
func (c *ConnectionBrandClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectionBrand = append(c.inters.ConnectionBrand, interceptors...)
}

// Create returns a builder for creating a ConnectionBrand entity.
func (c *ConnectionBrandClient) Create() *ConnectionBrandCreate {
	mutation := newConnectionBrandMutation(c.config, OpCreate)
	return &ConnectionBrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectionBrand entities.
func (c *ConnectionBrandClient) CreateBulk(builders ...*ConnectionBrandCreate) *ConnectionBrandCreateBulk {
	return &ConnectionBrandCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectionBrandClient) MapCreateBulk(slice any, setFunc func(*ConnectionBrandCreate, int)) *ConnectionBrandCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectionBrandCreateBulk{err: fmt.Errorf("calling to ConnectionBrandClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectionBrandCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectionBrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectionBrand.
func (c *ConnectionBrandClient) Update() *ConnectionBrandUpdate {
	mutation := newConnectionBrandMutation(c.config, OpUpdate)
	return &ConnectionBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectionBrandClient) UpdateOne(cb *ConnectionBrand) *ConnectionBrandUpdateOne {
	mutation := newConnectionBrandMutation(c.config, OpUpdateOne, withConnectionBrand(cb))
	return &ConnectionBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectionBrandClient) UpdateOneID(id pulid.ID) *ConnectionBrandUpdateOne {
	mutation := newConnectionBrandMutation(c.config, OpUpdateOne, withConnectionBrandID(id))
	return &ConnectionBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectionBrand.
func (c *ConnectionBrandClient) Delete() *ConnectionBrandDelete {
	mutation := newConnectionBrandMutation(c.config, OpDelete)
	return &ConnectionBrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectionBrandClient) DeleteOne(cb *ConnectionBrand) *ConnectionBrandDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectionBrandClient) DeleteOneID(id pulid.ID) *ConnectionBrandDeleteOne {
	builder := c.Delete().Where(connectionbrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectionBrandDeleteOne{builder}
}

// Query returns a query builder for ConnectionBrand.
func (c *ConnectionBrandClient) Query() *ConnectionBrandQuery {
	return &ConnectionBrandQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectionBrand},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectionBrand entity by its id.
func (c *ConnectionBrandClient) Get(ctx context.Context, id pulid.ID) (*ConnectionBrand, error) {
	return c.Query().Where(connectionbrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectionBrandClient) GetX(ctx context.Context, id pulid.ID) *ConnectionBrand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConnection queries the connection edge of a ConnectionBrand.
func (c *ConnectionBrandClient) QueryConnection(cb *ConnectionBrand) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionbrand.Table, connectionbrand.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, connectionbrand.ConnectionTable, connectionbrand.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectionBrandClient) Hooks() []Hook {
	hooks := c.hooks.ConnectionBrand
	return append(hooks[:len(hooks):len(hooks)], connectionbrand.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectionBrandClient) Interceptors() []Interceptor {
	return c.inters.ConnectionBrand
}

func (c *ConnectionBrandClient) mutate(ctx context.Context, m *ConnectionBrandMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectionBrandCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectionBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectionBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectionBrandDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectionBrand mutation op: %q", m.Op())
	}
}

// ConnectionLookupClient is a client for the ConnectionLookup schema.
type ConnectionLookupClient struct {
	config
}

// NewConnectionLookupClient returns a client for the ConnectionLookup from the given config.
func NewConnectionLookupClient(c config) *ConnectionLookupClient {
	return &ConnectionLookupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectionlookup.Hooks(f(g(h())))`.
func (c *ConnectionLookupClient) Use(hooks ...Hook) {
	c.hooks.ConnectionLookup = append(c.hooks.ConnectionLookup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectionlookup.Intercept(f(g(h())))`.
func (c *ConnectionLookupClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectionLookup = append(c.inters.ConnectionLookup, interceptors...)
}

// Create returns a builder for creating a ConnectionLookup entity.
func (c *ConnectionLookupClient) Create() *ConnectionLookupCreate {
	mutation := newConnectionLookupMutation(c.config, OpCreate)
	return &ConnectionLookupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectionLookup entities.
func (c *ConnectionLookupClient) CreateBulk(builders ...*ConnectionLookupCreate) *ConnectionLookupCreateBulk {
	return &ConnectionLookupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectionLookupClient) MapCreateBulk(slice any, setFunc func(*ConnectionLookupCreate, int)) *ConnectionLookupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectionLookupCreateBulk{err: fmt.Errorf("calling to ConnectionLookupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectionLookupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectionLookupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectionLookup.
func (c *ConnectionLookupClient) Update() *ConnectionLookupUpdate {
	mutation := newConnectionLookupMutation(c.config, OpUpdate)
	return &ConnectionLookupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectionLookupClient) UpdateOne(cl *ConnectionLookup) *ConnectionLookupUpdateOne {
	mutation := newConnectionLookupMutation(c.config, OpUpdateOne, withConnectionLookup(cl))
	return &ConnectionLookupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectionLookupClient) UpdateOneID(id pulid.ID) *ConnectionLookupUpdateOne {
	mutation := newConnectionLookupMutation(c.config, OpUpdateOne, withConnectionLookupID(id))
	return &ConnectionLookupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectionLookup.
func (c *ConnectionLookupClient) Delete() *ConnectionLookupDelete {
	mutation := newConnectionLookupMutation(c.config, OpDelete)
	return &ConnectionLookupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectionLookupClient) DeleteOne(cl *ConnectionLookup) *ConnectionLookupDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectionLookupClient) DeleteOneID(id pulid.ID) *ConnectionLookupDeleteOne {
	builder := c.Delete().Where(connectionlookup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectionLookupDeleteOne{builder}
}

// Query returns a query builder for ConnectionLookup.
func (c *ConnectionLookupClient) Query() *ConnectionLookupQuery {
	return &ConnectionLookupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectionLookup},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectionLookup entity by its id.
func (c *ConnectionLookupClient) Get(ctx context.Context, id pulid.ID) (*ConnectionLookup, error) {
	return c.Query().Where(connectionlookup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectionLookupClient) GetX(ctx context.Context, id pulid.ID) *ConnectionLookup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ConnectionLookup.
func (c *ConnectionLookupClient) QueryTenant(cl *ConnectionLookup) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionlookup.Table, connectionlookup.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connectionlookup.TenantTable, connectionlookup.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnections queries the connections edge of a ConnectionLookup.
func (c *ConnectionLookupClient) QueryConnections(cl *ConnectionLookup) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionlookup.Table, connectionlookup.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connectionlookup.ConnectionsTable, connectionlookup.ConnectionsColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectionLookupClient) Hooks() []Hook {
	hooks := c.hooks.ConnectionLookup
	return append(hooks[:len(hooks):len(hooks)], connectionlookup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectionLookupClient) Interceptors() []Interceptor {
	return c.inters.ConnectionLookup
}

func (c *ConnectionLookupClient) mutate(ctx context.Context, m *ConnectionLookupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectionLookupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectionLookupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectionLookupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectionLookupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectionLookup mutation op: %q", m.Op())
	}
}

// ConnectionShopifyClient is a client for the ConnectionShopify schema.
type ConnectionShopifyClient struct {
	config
}

// NewConnectionShopifyClient returns a client for the ConnectionShopify from the given config.
func NewConnectionShopifyClient(c config) *ConnectionShopifyClient {
	return &ConnectionShopifyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `connectionshopify.Hooks(f(g(h())))`.
func (c *ConnectionShopifyClient) Use(hooks ...Hook) {
	c.hooks.ConnectionShopify = append(c.hooks.ConnectionShopify, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `connectionshopify.Intercept(f(g(h())))`.
func (c *ConnectionShopifyClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConnectionShopify = append(c.inters.ConnectionShopify, interceptors...)
}

// Create returns a builder for creating a ConnectionShopify entity.
func (c *ConnectionShopifyClient) Create() *ConnectionShopifyCreate {
	mutation := newConnectionShopifyMutation(c.config, OpCreate)
	return &ConnectionShopifyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConnectionShopify entities.
func (c *ConnectionShopifyClient) CreateBulk(builders ...*ConnectionShopifyCreate) *ConnectionShopifyCreateBulk {
	return &ConnectionShopifyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConnectionShopifyClient) MapCreateBulk(slice any, setFunc func(*ConnectionShopifyCreate, int)) *ConnectionShopifyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConnectionShopifyCreateBulk{err: fmt.Errorf("calling to ConnectionShopifyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConnectionShopifyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConnectionShopifyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConnectionShopify.
func (c *ConnectionShopifyClient) Update() *ConnectionShopifyUpdate {
	mutation := newConnectionShopifyMutation(c.config, OpUpdate)
	return &ConnectionShopifyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConnectionShopifyClient) UpdateOne(cs *ConnectionShopify) *ConnectionShopifyUpdateOne {
	mutation := newConnectionShopifyMutation(c.config, OpUpdateOne, withConnectionShopify(cs))
	return &ConnectionShopifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConnectionShopifyClient) UpdateOneID(id pulid.ID) *ConnectionShopifyUpdateOne {
	mutation := newConnectionShopifyMutation(c.config, OpUpdateOne, withConnectionShopifyID(id))
	return &ConnectionShopifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConnectionShopify.
func (c *ConnectionShopifyClient) Delete() *ConnectionShopifyDelete {
	mutation := newConnectionShopifyMutation(c.config, OpDelete)
	return &ConnectionShopifyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConnectionShopifyClient) DeleteOne(cs *ConnectionShopify) *ConnectionShopifyDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConnectionShopifyClient) DeleteOneID(id pulid.ID) *ConnectionShopifyDeleteOne {
	builder := c.Delete().Where(connectionshopify.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConnectionShopifyDeleteOne{builder}
}

// Query returns a query builder for ConnectionShopify.
func (c *ConnectionShopifyClient) Query() *ConnectionShopifyQuery {
	return &ConnectionShopifyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConnectionShopify},
		inters: c.Interceptors(),
	}
}

// Get returns a ConnectionShopify entity by its id.
func (c *ConnectionShopifyClient) Get(ctx context.Context, id pulid.ID) (*ConnectionShopify, error) {
	return c.Query().Where(connectionshopify.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConnectionShopifyClient) GetX(ctx context.Context, id pulid.ID) *ConnectionShopify {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ConnectionShopify.
func (c *ConnectionShopifyClient) QueryTenant(cs *ConnectionShopify) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionshopify.Table, connectionshopify.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, connectionshopify.TenantTable, connectionshopify.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnection queries the connection edge of a ConnectionShopify.
func (c *ConnectionShopifyClient) QueryConnection(cs *ConnectionShopify) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(connectionshopify.Table, connectionshopify.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, connectionshopify.ConnectionTable, connectionshopify.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConnectionShopifyClient) Hooks() []Hook {
	hooks := c.hooks.ConnectionShopify
	return append(hooks[:len(hooks):len(hooks)], connectionshopify.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConnectionShopifyClient) Interceptors() []Interceptor {
	return c.inters.ConnectionShopify
}

func (c *ConnectionShopifyClient) mutate(ctx context.Context, m *ConnectionShopifyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConnectionShopifyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConnectionShopifyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConnectionShopifyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConnectionShopifyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConnectionShopify mutation op: %q", m.Op())
	}
}

// ConsolidationClient is a client for the Consolidation schema.
type ConsolidationClient struct {
	config
}

// NewConsolidationClient returns a client for the Consolidation from the given config.
func NewConsolidationClient(c config) *ConsolidationClient {
	return &ConsolidationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `consolidation.Hooks(f(g(h())))`.
func (c *ConsolidationClient) Use(hooks ...Hook) {
	c.hooks.Consolidation = append(c.hooks.Consolidation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `consolidation.Intercept(f(g(h())))`.
func (c *ConsolidationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Consolidation = append(c.inters.Consolidation, interceptors...)
}

// Create returns a builder for creating a Consolidation entity.
func (c *ConsolidationClient) Create() *ConsolidationCreate {
	mutation := newConsolidationMutation(c.config, OpCreate)
	return &ConsolidationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Consolidation entities.
func (c *ConsolidationClient) CreateBulk(builders ...*ConsolidationCreate) *ConsolidationCreateBulk {
	return &ConsolidationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConsolidationClient) MapCreateBulk(slice any, setFunc func(*ConsolidationCreate, int)) *ConsolidationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConsolidationCreateBulk{err: fmt.Errorf("calling to ConsolidationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConsolidationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConsolidationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Consolidation.
func (c *ConsolidationClient) Update() *ConsolidationUpdate {
	mutation := newConsolidationMutation(c.config, OpUpdate)
	return &ConsolidationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConsolidationClient) UpdateOne(co *Consolidation) *ConsolidationUpdateOne {
	mutation := newConsolidationMutation(c.config, OpUpdateOne, withConsolidation(co))
	return &ConsolidationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConsolidationClient) UpdateOneID(id pulid.ID) *ConsolidationUpdateOne {
	mutation := newConsolidationMutation(c.config, OpUpdateOne, withConsolidationID(id))
	return &ConsolidationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Consolidation.
func (c *ConsolidationClient) Delete() *ConsolidationDelete {
	mutation := newConsolidationMutation(c.config, OpDelete)
	return &ConsolidationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConsolidationClient) DeleteOne(co *Consolidation) *ConsolidationDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConsolidationClient) DeleteOneID(id pulid.ID) *ConsolidationDeleteOne {
	builder := c.Delete().Where(consolidation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConsolidationDeleteOne{builder}
}

// Query returns a query builder for Consolidation.
func (c *ConsolidationClient) Query() *ConsolidationQuery {
	return &ConsolidationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConsolidation},
		inters: c.Interceptors(),
	}
}

// Get returns a Consolidation entity by its id.
func (c *ConsolidationClient) Get(ctx context.Context, id pulid.ID) (*Consolidation, error) {
	return c.Query().Where(consolidation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConsolidationClient) GetX(ctx context.Context, id pulid.ID) *Consolidation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Consolidation.
func (c *ConsolidationClient) QueryTenant(co *Consolidation) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, consolidation.TenantTable, consolidation.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPallets queries the pallets edge of a Consolidation.
func (c *ConsolidationClient) QueryPallets(co *Consolidation) *PalletQuery {
	query := (&PalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, consolidation.PalletsTable, consolidation.PalletsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Consolidation.
func (c *ConsolidationClient) QueryOrders(co *Consolidation) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, consolidation.OrdersTable, consolidation.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a Consolidation.
func (c *ConsolidationClient) QueryDeliveryOption(co *Consolidation) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, consolidation.DeliveryOptionTable, consolidation.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipient queries the recipient edge of a Consolidation.
func (c *ConsolidationClient) QueryRecipient(co *Consolidation) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, consolidation.RecipientTable, consolidation.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySender queries the sender edge of a Consolidation.
func (c *ConsolidationClient) QuerySender(co *Consolidation) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, consolidation.SenderTable, consolidation.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a Consolidation.
func (c *ConsolidationClient) QueryShipment(co *Consolidation) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, consolidation.ShipmentTable, consolidation.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCancelledShipments queries the cancelled_shipments edge of a Consolidation.
func (c *ConsolidationClient) QueryCancelledShipments(co *Consolidation) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consolidation.Table, consolidation.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, consolidation.CancelledShipmentsTable, consolidation.CancelledShipmentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConsolidationClient) Hooks() []Hook {
	hooks := c.hooks.Consolidation
	return append(hooks[:len(hooks):len(hooks)], consolidation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ConsolidationClient) Interceptors() []Interceptor {
	return c.inters.Consolidation
}

func (c *ConsolidationClient) mutate(ctx context.Context, m *ConsolidationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConsolidationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConsolidationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConsolidationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConsolidationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Consolidation mutation op: %q", m.Op())
	}
}

// ContactClient is a client for the Contact schema.
type ContactClient struct {
	config
}

// NewContactClient returns a client for the Contact from the given config.
func NewContactClient(c config) *ContactClient {
	return &ContactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contact.Hooks(f(g(h())))`.
func (c *ContactClient) Use(hooks ...Hook) {
	c.hooks.Contact = append(c.hooks.Contact, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contact.Intercept(f(g(h())))`.
func (c *ContactClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contact = append(c.inters.Contact, interceptors...)
}

// Create returns a builder for creating a Contact entity.
func (c *ContactClient) Create() *ContactCreate {
	mutation := newContactMutation(c.config, OpCreate)
	return &ContactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contact entities.
func (c *ContactClient) CreateBulk(builders ...*ContactCreate) *ContactCreateBulk {
	return &ContactCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContactClient) MapCreateBulk(slice any, setFunc func(*ContactCreate, int)) *ContactCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContactCreateBulk{err: fmt.Errorf("calling to ContactClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContactCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contact.
func (c *ContactClient) Update() *ContactUpdate {
	mutation := newContactMutation(c.config, OpUpdate)
	return &ContactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContactClient) UpdateOne(co *Contact) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContact(co))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContactClient) UpdateOneID(id pulid.ID) *ContactUpdateOne {
	mutation := newContactMutation(c.config, OpUpdateOne, withContactID(id))
	return &ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contact.
func (c *ContactClient) Delete() *ContactDelete {
	mutation := newContactMutation(c.config, OpDelete)
	return &ContactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContactClient) DeleteOne(co *Contact) *ContactDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContactClient) DeleteOneID(id pulid.ID) *ContactDeleteOne {
	builder := c.Delete().Where(contact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContactDeleteOne{builder}
}

// Query returns a query builder for Contact.
func (c *ContactClient) Query() *ContactQuery {
	return &ContactQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContact},
		inters: c.Interceptors(),
	}
}

// Get returns a Contact entity by its id.
func (c *ContactClient) Get(ctx context.Context, id pulid.ID) (*Contact, error) {
	return c.Query().Where(contact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContactClient) GetX(ctx context.Context, id pulid.ID) *Contact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Contact.
func (c *ContactClient) QueryTenant(co *Contact) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contact.Table, contact.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contact.TenantTable, contact.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingContact queries the billing_contact edge of a Contact.
func (c *ContactClient) QueryBillingContact(co *Contact) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contact.Table, contact.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, contact.BillingContactTable, contact.BillingContactColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminContact queries the admin_contact edge of a Contact.
func (c *ContactClient) QueryAdminContact(co *Contact) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contact.Table, contact.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, contact.AdminContactTable, contact.AdminContactColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContactClient) Hooks() []Hook {
	hooks := c.hooks.Contact
	return append(hooks[:len(hooks):len(hooks)], contact.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ContactClient) Interceptors() []Interceptor {
	return c.inters.Contact
}

func (c *ContactClient) mutate(ctx context.Context, m *ContactMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContactCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContactUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContactDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contact mutation op: %q", m.Op())
	}
}

// CountryClient is a client for the Country schema.
type CountryClient struct {
	config
}

// NewCountryClient returns a client for the Country from the given config.
func NewCountryClient(c config) *CountryClient {
	return &CountryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `country.Hooks(f(g(h())))`.
func (c *CountryClient) Use(hooks ...Hook) {
	c.hooks.Country = append(c.hooks.Country, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `country.Intercept(f(g(h())))`.
func (c *CountryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Country = append(c.inters.Country, interceptors...)
}

// Create returns a builder for creating a Country entity.
func (c *CountryClient) Create() *CountryCreate {
	mutation := newCountryMutation(c.config, OpCreate)
	return &CountryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Country entities.
func (c *CountryClient) CreateBulk(builders ...*CountryCreate) *CountryCreateBulk {
	return &CountryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CountryClient) MapCreateBulk(slice any, setFunc func(*CountryCreate, int)) *CountryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CountryCreateBulk{err: fmt.Errorf("calling to CountryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CountryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CountryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Country.
func (c *CountryClient) Update() *CountryUpdate {
	mutation := newCountryMutation(c.config, OpUpdate)
	return &CountryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CountryClient) UpdateOne(co *Country) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountry(co))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CountryClient) UpdateOneID(id pulid.ID) *CountryUpdateOne {
	mutation := newCountryMutation(c.config, OpUpdateOne, withCountryID(id))
	return &CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Country.
func (c *CountryClient) Delete() *CountryDelete {
	mutation := newCountryMutation(c.config, OpDelete)
	return &CountryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CountryClient) DeleteOne(co *Country) *CountryDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CountryClient) DeleteOneID(id pulid.ID) *CountryDeleteOne {
	builder := c.Delete().Where(country.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CountryDeleteOne{builder}
}

// Query returns a query builder for Country.
func (c *CountryClient) Query() *CountryQuery {
	return &CountryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCountry},
		inters: c.Interceptors(),
	}
}

// Get returns a Country entity by its id.
func (c *CountryClient) Get(ctx context.Context, id pulid.ID) (*Country, error) {
	return c.Query().Where(country.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CountryClient) GetX(ctx context.Context, id pulid.ID) *Country {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDeliveryRule queries the delivery_rule edge of a Country.
func (c *CountryClient) QueryDeliveryRule(co *Country) *DeliveryRuleQuery {
	query := (&DeliveryRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(deliveryrule.Table, deliveryrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, country.DeliveryRuleTable, country.DeliveryRulePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddress queries the address edge of a Country.
func (c *CountryClient) QueryAddress(co *Country) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.AddressTable, country.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressGlobal queries the address_global edge of a Country.
func (c *CountryClient) QueryAddressGlobal(co *Country) *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.AddressGlobalTable, country.AddressGlobalColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServicePostNordConsignee queries the carrier_additional_service_post_nord_consignee edge of a Country.
func (c *CountryClient) QueryCarrierAdditionalServicePostNordConsignee(co *Country) *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServicePostNordConsigneeTable, country.CarrierAdditionalServicePostNordConsigneePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServicePostNordConsignor queries the carrier_additional_service_post_nord_consignor edge of a Country.
func (c *CountryClient) QueryCarrierAdditionalServicePostNordConsignor(co *Country) *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServicePostNordConsignorTable, country.CarrierAdditionalServicePostNordConsignorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLSConsignee queries the carrier_additional_service_gls_consignee edge of a Country.
func (c *CountryClient) QueryCarrierAdditionalServiceGLSConsignee(co *Country) *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServiceGLSConsigneeTable, country.CarrierAdditionalServiceGLSConsigneePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLSConsignor queries the carrier_additional_service_gls_consignor edge of a Country.
func (c *CountryClient) QueryCarrierAdditionalServiceGLSConsignor(co *Country) *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, country.CarrierAdditionalServiceGLSConsignorTable, country.CarrierAdditionalServiceGLSConsignorPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountryHarmonizedCode queries the country_harmonized_code edge of a Country.
func (c *CountryClient) QueryCountryHarmonizedCode(co *Country) *CountryHarmonizedCodeQuery {
	query := (&CountryHarmonizedCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(countryharmonizedcode.Table, countryharmonizedcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.CountryHarmonizedCodeTable, country.CountryHarmonizedCodeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInventoryItem queries the inventory_item edge of a Country.
func (c *CountryClient) QueryInventoryItem(co *Country) *InventoryItemQuery {
	query := (&InventoryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(country.Table, country.FieldID, id),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, country.InventoryItemTable, country.InventoryItemColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CountryClient) Hooks() []Hook {
	hooks := c.hooks.Country
	return append(hooks[:len(hooks):len(hooks)], country.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CountryClient) Interceptors() []Interceptor {
	return c.inters.Country
}

func (c *CountryClient) mutate(ctx context.Context, m *CountryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CountryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CountryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CountryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CountryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Country mutation op: %q", m.Op())
	}
}

// CountryHarmonizedCodeClient is a client for the CountryHarmonizedCode schema.
type CountryHarmonizedCodeClient struct {
	config
}

// NewCountryHarmonizedCodeClient returns a client for the CountryHarmonizedCode from the given config.
func NewCountryHarmonizedCodeClient(c config) *CountryHarmonizedCodeClient {
	return &CountryHarmonizedCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `countryharmonizedcode.Hooks(f(g(h())))`.
func (c *CountryHarmonizedCodeClient) Use(hooks ...Hook) {
	c.hooks.CountryHarmonizedCode = append(c.hooks.CountryHarmonizedCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `countryharmonizedcode.Intercept(f(g(h())))`.
func (c *CountryHarmonizedCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CountryHarmonizedCode = append(c.inters.CountryHarmonizedCode, interceptors...)
}

// Create returns a builder for creating a CountryHarmonizedCode entity.
func (c *CountryHarmonizedCodeClient) Create() *CountryHarmonizedCodeCreate {
	mutation := newCountryHarmonizedCodeMutation(c.config, OpCreate)
	return &CountryHarmonizedCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CountryHarmonizedCode entities.
func (c *CountryHarmonizedCodeClient) CreateBulk(builders ...*CountryHarmonizedCodeCreate) *CountryHarmonizedCodeCreateBulk {
	return &CountryHarmonizedCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CountryHarmonizedCodeClient) MapCreateBulk(slice any, setFunc func(*CountryHarmonizedCodeCreate, int)) *CountryHarmonizedCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CountryHarmonizedCodeCreateBulk{err: fmt.Errorf("calling to CountryHarmonizedCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CountryHarmonizedCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CountryHarmonizedCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CountryHarmonizedCode.
func (c *CountryHarmonizedCodeClient) Update() *CountryHarmonizedCodeUpdate {
	mutation := newCountryHarmonizedCodeMutation(c.config, OpUpdate)
	return &CountryHarmonizedCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CountryHarmonizedCodeClient) UpdateOne(chc *CountryHarmonizedCode) *CountryHarmonizedCodeUpdateOne {
	mutation := newCountryHarmonizedCodeMutation(c.config, OpUpdateOne, withCountryHarmonizedCode(chc))
	return &CountryHarmonizedCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CountryHarmonizedCodeClient) UpdateOneID(id pulid.ID) *CountryHarmonizedCodeUpdateOne {
	mutation := newCountryHarmonizedCodeMutation(c.config, OpUpdateOne, withCountryHarmonizedCodeID(id))
	return &CountryHarmonizedCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CountryHarmonizedCode.
func (c *CountryHarmonizedCodeClient) Delete() *CountryHarmonizedCodeDelete {
	mutation := newCountryHarmonizedCodeMutation(c.config, OpDelete)
	return &CountryHarmonizedCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CountryHarmonizedCodeClient) DeleteOne(chc *CountryHarmonizedCode) *CountryHarmonizedCodeDeleteOne {
	return c.DeleteOneID(chc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CountryHarmonizedCodeClient) DeleteOneID(id pulid.ID) *CountryHarmonizedCodeDeleteOne {
	builder := c.Delete().Where(countryharmonizedcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CountryHarmonizedCodeDeleteOne{builder}
}

// Query returns a query builder for CountryHarmonizedCode.
func (c *CountryHarmonizedCodeClient) Query() *CountryHarmonizedCodeQuery {
	return &CountryHarmonizedCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCountryHarmonizedCode},
		inters: c.Interceptors(),
	}
}

// Get returns a CountryHarmonizedCode entity by its id.
func (c *CountryHarmonizedCodeClient) Get(ctx context.Context, id pulid.ID) (*CountryHarmonizedCode, error) {
	return c.Query().Where(countryharmonizedcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CountryHarmonizedCodeClient) GetX(ctx context.Context, id pulid.ID) *CountryHarmonizedCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CountryHarmonizedCode.
func (c *CountryHarmonizedCodeClient) QueryTenant(chc *CountryHarmonizedCode) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := chc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(countryharmonizedcode.Table, countryharmonizedcode.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, countryharmonizedcode.TenantTable, countryharmonizedcode.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(chc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInventoryItem queries the inventory_item edge of a CountryHarmonizedCode.
func (c *CountryHarmonizedCodeClient) QueryInventoryItem(chc *CountryHarmonizedCode) *InventoryItemQuery {
	query := (&InventoryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := chc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(countryharmonizedcode.Table, countryharmonizedcode.FieldID, id),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, countryharmonizedcode.InventoryItemTable, countryharmonizedcode.InventoryItemColumn),
		)
		fromV = sqlgraph.Neighbors(chc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountry queries the country edge of a CountryHarmonizedCode.
func (c *CountryHarmonizedCodeClient) QueryCountry(chc *CountryHarmonizedCode) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := chc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(countryharmonizedcode.Table, countryharmonizedcode.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, countryharmonizedcode.CountryTable, countryharmonizedcode.CountryColumn),
		)
		fromV = sqlgraph.Neighbors(chc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CountryHarmonizedCodeClient) Hooks() []Hook {
	hooks := c.hooks.CountryHarmonizedCode
	return append(hooks[:len(hooks):len(hooks)], countryharmonizedcode.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CountryHarmonizedCodeClient) Interceptors() []Interceptor {
	return c.inters.CountryHarmonizedCode
}

func (c *CountryHarmonizedCodeClient) mutate(ctx context.Context, m *CountryHarmonizedCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CountryHarmonizedCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CountryHarmonizedCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CountryHarmonizedCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CountryHarmonizedCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CountryHarmonizedCode mutation op: %q", m.Op())
	}
}

// CurrencyClient is a client for the Currency schema.
type CurrencyClient struct {
	config
}

// NewCurrencyClient returns a client for the Currency from the given config.
func NewCurrencyClient(c config) *CurrencyClient {
	return &CurrencyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currency.Hooks(f(g(h())))`.
func (c *CurrencyClient) Use(hooks ...Hook) {
	c.hooks.Currency = append(c.hooks.Currency, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currency.Intercept(f(g(h())))`.
func (c *CurrencyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Currency = append(c.inters.Currency, interceptors...)
}

// Create returns a builder for creating a Currency entity.
func (c *CurrencyClient) Create() *CurrencyCreate {
	mutation := newCurrencyMutation(c.config, OpCreate)
	return &CurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Currency entities.
func (c *CurrencyClient) CreateBulk(builders ...*CurrencyCreate) *CurrencyCreateBulk {
	return &CurrencyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyClient) MapCreateBulk(slice any, setFunc func(*CurrencyCreate, int)) *CurrencyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyCreateBulk{err: fmt.Errorf("calling to CurrencyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Currency.
func (c *CurrencyClient) Update() *CurrencyUpdate {
	mutation := newCurrencyMutation(c.config, OpUpdate)
	return &CurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyClient) UpdateOne(cu *Currency) *CurrencyUpdateOne {
	mutation := newCurrencyMutation(c.config, OpUpdateOne, withCurrency(cu))
	return &CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyClient) UpdateOneID(id pulid.ID) *CurrencyUpdateOne {
	mutation := newCurrencyMutation(c.config, OpUpdateOne, withCurrencyID(id))
	return &CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Currency.
func (c *CurrencyClient) Delete() *CurrencyDelete {
	mutation := newCurrencyMutation(c.config, OpDelete)
	return &CurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyClient) DeleteOne(cu *Currency) *CurrencyDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyClient) DeleteOneID(id pulid.ID) *CurrencyDeleteOne {
	builder := c.Delete().Where(currency.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyDeleteOne{builder}
}

// Query returns a query builder for Currency.
func (c *CurrencyClient) Query() *CurrencyQuery {
	return &CurrencyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrency},
		inters: c.Interceptors(),
	}
}

// Get returns a Currency entity by its id.
func (c *CurrencyClient) Get(ctx context.Context, id pulid.ID) (*Currency, error) {
	return c.Query().Where(currency.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyClient) GetX(ctx context.Context, id pulid.ID) *Currency {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderLine queries the order_line edge of a Currency.
func (c *CurrencyClient) QueryOrderLine(cu *Currency) *OrderLineQuery {
	query := (&OrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(currency.Table, currency.FieldID, id),
			sqlgraph.To(orderline.Table, orderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, currency.OrderLineTable, currency.OrderLineColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryRule queries the delivery_rule edge of a Currency.
func (c *CurrencyClient) QueryDeliveryRule(cu *Currency) *DeliveryRuleQuery {
	query := (&DeliveryRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(currency.Table, currency.FieldID, id),
			sqlgraph.To(deliveryrule.Table, deliveryrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, currency.DeliveryRuleTable, currency.DeliveryRuleColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CurrencyClient) Hooks() []Hook {
	hooks := c.hooks.Currency
	return append(hooks[:len(hooks):len(hooks)], currency.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CurrencyClient) Interceptors() []Interceptor {
	return c.inters.Currency
}

func (c *CurrencyClient) mutate(ctx context.Context, m *CurrencyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Currency mutation op: %q", m.Op())
	}
}

// DeliveryOptionClient is a client for the DeliveryOption schema.
type DeliveryOptionClient struct {
	config
}

// NewDeliveryOptionClient returns a client for the DeliveryOption from the given config.
func NewDeliveryOptionClient(c config) *DeliveryOptionClient {
	return &DeliveryOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoption.Hooks(f(g(h())))`.
func (c *DeliveryOptionClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOption = append(c.hooks.DeliveryOption, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoption.Intercept(f(g(h())))`.
func (c *DeliveryOptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOption = append(c.inters.DeliveryOption, interceptors...)
}

// Create returns a builder for creating a DeliveryOption entity.
func (c *DeliveryOptionClient) Create() *DeliveryOptionCreate {
	mutation := newDeliveryOptionMutation(c.config, OpCreate)
	return &DeliveryOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOption entities.
func (c *DeliveryOptionClient) CreateBulk(builders ...*DeliveryOptionCreate) *DeliveryOptionCreateBulk {
	return &DeliveryOptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionCreate, int)) *DeliveryOptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionCreateBulk{err: fmt.Errorf("calling to DeliveryOptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOption.
func (c *DeliveryOptionClient) Update() *DeliveryOptionUpdate {
	mutation := newDeliveryOptionMutation(c.config, OpUpdate)
	return &DeliveryOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionClient) UpdateOne(do *DeliveryOption) *DeliveryOptionUpdateOne {
	mutation := newDeliveryOptionMutation(c.config, OpUpdateOne, withDeliveryOption(do))
	return &DeliveryOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionClient) UpdateOneID(id pulid.ID) *DeliveryOptionUpdateOne {
	mutation := newDeliveryOptionMutation(c.config, OpUpdateOne, withDeliveryOptionID(id))
	return &DeliveryOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOption.
func (c *DeliveryOptionClient) Delete() *DeliveryOptionDelete {
	mutation := newDeliveryOptionMutation(c.config, OpDelete)
	return &DeliveryOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionClient) DeleteOne(do *DeliveryOption) *DeliveryOptionDeleteOne {
	return c.DeleteOneID(do.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionClient) DeleteOneID(id pulid.ID) *DeliveryOptionDeleteOne {
	builder := c.Delete().Where(deliveryoption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionDeleteOne{builder}
}

// Query returns a query builder for DeliveryOption.
func (c *DeliveryOptionClient) Query() *DeliveryOptionQuery {
	return &DeliveryOptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOption},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOption entity by its id.
func (c *DeliveryOptionClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOption, error) {
	return c.Query().Where(deliveryoption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryTenant(do *DeliveryOption) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoption.TenantTable, deliveryoption.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryCarrier(do *DeliveryOption) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoption.CarrierTable, deliveryoption.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryRule queries the delivery_rule edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryRule(do *DeliveryOption) *DeliveryRuleQuery {
	query := (&DeliveryRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryrule.Table, deliveryrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryoption.DeliveryRuleTable, deliveryoption.DeliveryRuleColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionDAO queries the delivery_option_dao edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionDAO(do *DeliveryOption) *DeliveryOptionDAOQuery {
	query := (&DeliveryOptionDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptiondao.Table, deliveryoptiondao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionDAOTable, deliveryoption.DeliveryOptionDAOColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionDF queries the delivery_option_df edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionDF(do *DeliveryOption) *DeliveryOptionDFQuery {
	query := (&DeliveryOptionDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptiondf.Table, deliveryoptiondf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionDFTable, deliveryoption.DeliveryOptionDFColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionDSV queries the delivery_option_dsv edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionDSV(do *DeliveryOption) *DeliveryOptionDSVQuery {
	query := (&DeliveryOptionDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionDSVTable, deliveryoption.DeliveryOptionDSVColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionEasyPost queries the delivery_option_easy_post edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionEasyPost(do *DeliveryOption) *DeliveryOptionEasyPostQuery {
	query := (&DeliveryOptionEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptioneasypost.Table, deliveryoptioneasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionEasyPostTable, deliveryoption.DeliveryOptionEasyPostColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionGLS queries the delivery_option_gls edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionGLS(do *DeliveryOption) *DeliveryOptionGLSQuery {
	query := (&DeliveryOptionGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptiongls.Table, deliveryoptiongls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionGLSTable, deliveryoption.DeliveryOptionGLSColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionPostNord queries the delivery_option_post_nord edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionPostNord(do *DeliveryOption) *DeliveryOptionPostNordQuery {
	query := (&DeliveryOptionPostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptionpostnord.Table, deliveryoptionpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionPostNordTable, deliveryoption.DeliveryOptionPostNordColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionUSPS queries the delivery_option_usps edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionUSPS(do *DeliveryOption) *DeliveryOptionUSPSQuery {
	query := (&DeliveryOptionUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptionusps.Table, deliveryoptionusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionUSPSTable, deliveryoption.DeliveryOptionUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionBring queries the delivery_option_bring edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDeliveryOptionBring(do *DeliveryOption) *DeliveryOptionBringQuery {
	query := (&DeliveryOptionBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(deliveryoptionbring.Table, deliveryoptionbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, deliveryoption.DeliveryOptionBringTable, deliveryoption.DeliveryOptionBringColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortals queries the return_portals edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryReturnPortals(do *DeliveryOption) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deliveryoption.ReturnPortalsTable, deliveryoption.ReturnPortalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryColli(do *DeliveryOption) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, deliveryoption.ColliTable, deliveryoption.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColli queries the return_colli edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryReturnColli(do *DeliveryOption) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, deliveryoption.ReturnColliTable, deliveryoption.ReturnColliColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierService queries the carrier_service edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryCarrierService(do *DeliveryOption) *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoption.CarrierServiceTable, deliveryoption.CarrierServiceColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnection queries the connection edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryConnection(do *DeliveryOption) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryoption.ConnectionTable, deliveryoption.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectionDefault queries the connection_default edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryConnectionDefault(do *DeliveryOption) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoption.ConnectionDefaultTable, deliveryoption.ConnectionDefaultColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionGroupOne queries the hypothesis_test_delivery_option_group_one edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryHypothesisTestDeliveryOptionGroupOne(do *DeliveryOption) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deliveryoption.HypothesisTestDeliveryOptionGroupOneTable, deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionGroupTwo queries the hypothesis_test_delivery_option_group_two edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryHypothesisTestDeliveryOptionGroupTwo(do *DeliveryOption) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable, deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionLookup queries the hypothesis_test_delivery_option_lookup edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryHypothesisTestDeliveryOptionLookup(do *DeliveryOption) *HypothesisTestDeliveryOptionLookupQuery {
	query := (&HypothesisTestDeliveryOptionLookupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, deliveryoption.HypothesisTestDeliveryOptionLookupTable, deliveryoption.HypothesisTestDeliveryOptionLookupColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClickCollectLocation queries the click_collect_location edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryClickCollectLocation(do *DeliveryOption) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoption.ClickCollectLocationTable, deliveryoption.ClickCollectLocationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailClickCollectAtStore queries the email_click_collect_at_store edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryEmailClickCollectAtStore(do *DeliveryOption) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoption.EmailClickCollectAtStoreTable, deliveryoption.EmailClickCollectAtStoreColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConsolidation queries the consolidation edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryConsolidation(do *DeliveryOption) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, deliveryoption.ConsolidationTable, deliveryoption.ConsolidationColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultPackaging queries the default_packaging edge of a DeliveryOption.
func (c *DeliveryOptionClient) QueryDefaultPackaging(do *DeliveryOption) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := do.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoption.Table, deliveryoption.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoption.DefaultPackagingTable, deliveryoption.DefaultPackagingColumn),
		)
		fromV = sqlgraph.Neighbors(do.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOption
	return append(hooks[:len(hooks):len(hooks)], deliveryoption.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionClient) Interceptors() []Interceptor {
	inters := c.inters.DeliveryOption
	return append(inters[:len(inters):len(inters)], deliveryoption.Interceptors[:]...)
}

func (c *DeliveryOptionClient) mutate(ctx context.Context, m *DeliveryOptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOption mutation op: %q", m.Op())
	}
}

// DeliveryOptionBringClient is a client for the DeliveryOptionBring schema.
type DeliveryOptionBringClient struct {
	config
}

// NewDeliveryOptionBringClient returns a client for the DeliveryOptionBring from the given config.
func NewDeliveryOptionBringClient(c config) *DeliveryOptionBringClient {
	return &DeliveryOptionBringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptionbring.Hooks(f(g(h())))`.
func (c *DeliveryOptionBringClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionBring = append(c.hooks.DeliveryOptionBring, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptionbring.Intercept(f(g(h())))`.
func (c *DeliveryOptionBringClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionBring = append(c.inters.DeliveryOptionBring, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionBring entity.
func (c *DeliveryOptionBringClient) Create() *DeliveryOptionBringCreate {
	mutation := newDeliveryOptionBringMutation(c.config, OpCreate)
	return &DeliveryOptionBringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionBring entities.
func (c *DeliveryOptionBringClient) CreateBulk(builders ...*DeliveryOptionBringCreate) *DeliveryOptionBringCreateBulk {
	return &DeliveryOptionBringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionBringClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionBringCreate, int)) *DeliveryOptionBringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionBringCreateBulk{err: fmt.Errorf("calling to DeliveryOptionBringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionBringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionBringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionBring.
func (c *DeliveryOptionBringClient) Update() *DeliveryOptionBringUpdate {
	mutation := newDeliveryOptionBringMutation(c.config, OpUpdate)
	return &DeliveryOptionBringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionBringClient) UpdateOne(dob *DeliveryOptionBring) *DeliveryOptionBringUpdateOne {
	mutation := newDeliveryOptionBringMutation(c.config, OpUpdateOne, withDeliveryOptionBring(dob))
	return &DeliveryOptionBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionBringClient) UpdateOneID(id pulid.ID) *DeliveryOptionBringUpdateOne {
	mutation := newDeliveryOptionBringMutation(c.config, OpUpdateOne, withDeliveryOptionBringID(id))
	return &DeliveryOptionBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionBring.
func (c *DeliveryOptionBringClient) Delete() *DeliveryOptionBringDelete {
	mutation := newDeliveryOptionBringMutation(c.config, OpDelete)
	return &DeliveryOptionBringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionBringClient) DeleteOne(dob *DeliveryOptionBring) *DeliveryOptionBringDeleteOne {
	return c.DeleteOneID(dob.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionBringClient) DeleteOneID(id pulid.ID) *DeliveryOptionBringDeleteOne {
	builder := c.Delete().Where(deliveryoptionbring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionBringDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionBring.
func (c *DeliveryOptionBringClient) Query() *DeliveryOptionBringQuery {
	return &DeliveryOptionBringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionBring},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionBring entity by its id.
func (c *DeliveryOptionBringClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionBring, error) {
	return c.Query().Where(deliveryoptionbring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionBringClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionBring {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionBring.
func (c *DeliveryOptionBringClient) QueryTenant(dob *DeliveryOptionBring) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dob.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionbring.Table, deliveryoptionbring.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptionbring.TenantTable, deliveryoptionbring.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dob.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionBring.
func (c *DeliveryOptionBringClient) QueryDeliveryOption(dob *DeliveryOptionBring) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dob.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionbring.Table, deliveryoptionbring.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptionbring.DeliveryOptionTable, deliveryoptionbring.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dob.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceBring queries the carrier_additional_service_bring edge of a DeliveryOptionBring.
func (c *DeliveryOptionBringClient) QueryCarrierAdditionalServiceBring(dob *DeliveryOptionBring) *CarrierAdditionalServiceBringQuery {
	query := (&CarrierAdditionalServiceBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dob.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionbring.Table, deliveryoptionbring.FieldID, id),
			sqlgraph.To(carrieradditionalservicebring.Table, carrieradditionalservicebring.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptionbring.CarrierAdditionalServiceBringTable, deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dob.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionBringClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionBring
	return append(hooks[:len(hooks):len(hooks)], deliveryoptionbring.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionBringClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionBring
}

func (c *DeliveryOptionBringClient) mutate(ctx context.Context, m *DeliveryOptionBringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionBringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionBringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionBringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionBring mutation op: %q", m.Op())
	}
}

// DeliveryOptionDAOClient is a client for the DeliveryOptionDAO schema.
type DeliveryOptionDAOClient struct {
	config
}

// NewDeliveryOptionDAOClient returns a client for the DeliveryOptionDAO from the given config.
func NewDeliveryOptionDAOClient(c config) *DeliveryOptionDAOClient {
	return &DeliveryOptionDAOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptiondao.Hooks(f(g(h())))`.
func (c *DeliveryOptionDAOClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionDAO = append(c.hooks.DeliveryOptionDAO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptiondao.Intercept(f(g(h())))`.
func (c *DeliveryOptionDAOClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionDAO = append(c.inters.DeliveryOptionDAO, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionDAO entity.
func (c *DeliveryOptionDAOClient) Create() *DeliveryOptionDAOCreate {
	mutation := newDeliveryOptionDAOMutation(c.config, OpCreate)
	return &DeliveryOptionDAOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionDAO entities.
func (c *DeliveryOptionDAOClient) CreateBulk(builders ...*DeliveryOptionDAOCreate) *DeliveryOptionDAOCreateBulk {
	return &DeliveryOptionDAOCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionDAOClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionDAOCreate, int)) *DeliveryOptionDAOCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionDAOCreateBulk{err: fmt.Errorf("calling to DeliveryOptionDAOClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionDAOCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionDAOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionDAO.
func (c *DeliveryOptionDAOClient) Update() *DeliveryOptionDAOUpdate {
	mutation := newDeliveryOptionDAOMutation(c.config, OpUpdate)
	return &DeliveryOptionDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionDAOClient) UpdateOne(dod *DeliveryOptionDAO) *DeliveryOptionDAOUpdateOne {
	mutation := newDeliveryOptionDAOMutation(c.config, OpUpdateOne, withDeliveryOptionDAO(dod))
	return &DeliveryOptionDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionDAOClient) UpdateOneID(id pulid.ID) *DeliveryOptionDAOUpdateOne {
	mutation := newDeliveryOptionDAOMutation(c.config, OpUpdateOne, withDeliveryOptionDAOID(id))
	return &DeliveryOptionDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionDAO.
func (c *DeliveryOptionDAOClient) Delete() *DeliveryOptionDAODelete {
	mutation := newDeliveryOptionDAOMutation(c.config, OpDelete)
	return &DeliveryOptionDAODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionDAOClient) DeleteOne(dod *DeliveryOptionDAO) *DeliveryOptionDAODeleteOne {
	return c.DeleteOneID(dod.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionDAOClient) DeleteOneID(id pulid.ID) *DeliveryOptionDAODeleteOne {
	builder := c.Delete().Where(deliveryoptiondao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionDAODeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionDAO.
func (c *DeliveryOptionDAOClient) Query() *DeliveryOptionDAOQuery {
	return &DeliveryOptionDAOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionDAO},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionDAO entity by its id.
func (c *DeliveryOptionDAOClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionDAO, error) {
	return c.Query().Where(deliveryoptiondao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionDAOClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionDAO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionDAO.
func (c *DeliveryOptionDAOClient) QueryTenant(dod *DeliveryOptionDAO) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondao.Table, deliveryoptiondao.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptiondao.TenantTable, deliveryoptiondao.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionDAO.
func (c *DeliveryOptionDAOClient) QueryDeliveryOption(dod *DeliveryOptionDAO) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondao.Table, deliveryoptiondao.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptiondao.DeliveryOptionTable, deliveryoptiondao.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDAO queries the carrier_additional_service_dao edge of a DeliveryOptionDAO.
func (c *DeliveryOptionDAOClient) QueryCarrierAdditionalServiceDAO(dod *DeliveryOptionDAO) *CarrierAdditionalServiceDAOQuery {
	query := (&CarrierAdditionalServiceDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondao.Table, deliveryoptiondao.FieldID, id),
			sqlgraph.To(carrieradditionalservicedao.Table, carrieradditionalservicedao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptiondao.CarrierAdditionalServiceDAOTable, deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionDAOClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionDAO
	return append(hooks[:len(hooks):len(hooks)], deliveryoptiondao.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionDAOClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionDAO
}

func (c *DeliveryOptionDAOClient) mutate(ctx context.Context, m *DeliveryOptionDAOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionDAOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionDAODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionDAO mutation op: %q", m.Op())
	}
}

// DeliveryOptionDFClient is a client for the DeliveryOptionDF schema.
type DeliveryOptionDFClient struct {
	config
}

// NewDeliveryOptionDFClient returns a client for the DeliveryOptionDF from the given config.
func NewDeliveryOptionDFClient(c config) *DeliveryOptionDFClient {
	return &DeliveryOptionDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptiondf.Hooks(f(g(h())))`.
func (c *DeliveryOptionDFClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionDF = append(c.hooks.DeliveryOptionDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptiondf.Intercept(f(g(h())))`.
func (c *DeliveryOptionDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionDF = append(c.inters.DeliveryOptionDF, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionDF entity.
func (c *DeliveryOptionDFClient) Create() *DeliveryOptionDFCreate {
	mutation := newDeliveryOptionDFMutation(c.config, OpCreate)
	return &DeliveryOptionDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionDF entities.
func (c *DeliveryOptionDFClient) CreateBulk(builders ...*DeliveryOptionDFCreate) *DeliveryOptionDFCreateBulk {
	return &DeliveryOptionDFCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionDFClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionDFCreate, int)) *DeliveryOptionDFCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionDFCreateBulk{err: fmt.Errorf("calling to DeliveryOptionDFClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionDFCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionDF.
func (c *DeliveryOptionDFClient) Update() *DeliveryOptionDFUpdate {
	mutation := newDeliveryOptionDFMutation(c.config, OpUpdate)
	return &DeliveryOptionDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionDFClient) UpdateOne(dod *DeliveryOptionDF) *DeliveryOptionDFUpdateOne {
	mutation := newDeliveryOptionDFMutation(c.config, OpUpdateOne, withDeliveryOptionDF(dod))
	return &DeliveryOptionDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionDFClient) UpdateOneID(id pulid.ID) *DeliveryOptionDFUpdateOne {
	mutation := newDeliveryOptionDFMutation(c.config, OpUpdateOne, withDeliveryOptionDFID(id))
	return &DeliveryOptionDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionDF.
func (c *DeliveryOptionDFClient) Delete() *DeliveryOptionDFDelete {
	mutation := newDeliveryOptionDFMutation(c.config, OpDelete)
	return &DeliveryOptionDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionDFClient) DeleteOne(dod *DeliveryOptionDF) *DeliveryOptionDFDeleteOne {
	return c.DeleteOneID(dod.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionDFClient) DeleteOneID(id pulid.ID) *DeliveryOptionDFDeleteOne {
	builder := c.Delete().Where(deliveryoptiondf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionDFDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionDF.
func (c *DeliveryOptionDFClient) Query() *DeliveryOptionDFQuery {
	return &DeliveryOptionDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionDF},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionDF entity by its id.
func (c *DeliveryOptionDFClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionDF, error) {
	return c.Query().Where(deliveryoptiondf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionDFClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionDF.
func (c *DeliveryOptionDFClient) QueryTenant(dod *DeliveryOptionDF) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondf.Table, deliveryoptiondf.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptiondf.TenantTable, deliveryoptiondf.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionDF.
func (c *DeliveryOptionDFClient) QueryDeliveryOption(dod *DeliveryOptionDF) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondf.Table, deliveryoptiondf.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptiondf.DeliveryOptionTable, deliveryoptiondf.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDF queries the carrier_additional_service_df edge of a DeliveryOptionDF.
func (c *DeliveryOptionDFClient) QueryCarrierAdditionalServiceDF(dod *DeliveryOptionDF) *CarrierAdditionalServiceDFQuery {
	query := (&CarrierAdditionalServiceDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondf.Table, deliveryoptiondf.FieldID, id),
			sqlgraph.To(carrieradditionalservicedf.Table, carrieradditionalservicedf.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptiondf.CarrierAdditionalServiceDFTable, deliveryoptiondf.CarrierAdditionalServiceDFPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionDFClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionDF
	return append(hooks[:len(hooks):len(hooks)], deliveryoptiondf.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionDFClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionDF
}

func (c *DeliveryOptionDFClient) mutate(ctx context.Context, m *DeliveryOptionDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionDF mutation op: %q", m.Op())
	}
}

// DeliveryOptionDSVClient is a client for the DeliveryOptionDSV schema.
type DeliveryOptionDSVClient struct {
	config
}

// NewDeliveryOptionDSVClient returns a client for the DeliveryOptionDSV from the given config.
func NewDeliveryOptionDSVClient(c config) *DeliveryOptionDSVClient {
	return &DeliveryOptionDSVClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptiondsv.Hooks(f(g(h())))`.
func (c *DeliveryOptionDSVClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionDSV = append(c.hooks.DeliveryOptionDSV, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptiondsv.Intercept(f(g(h())))`.
func (c *DeliveryOptionDSVClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionDSV = append(c.inters.DeliveryOptionDSV, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionDSV entity.
func (c *DeliveryOptionDSVClient) Create() *DeliveryOptionDSVCreate {
	mutation := newDeliveryOptionDSVMutation(c.config, OpCreate)
	return &DeliveryOptionDSVCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionDSV entities.
func (c *DeliveryOptionDSVClient) CreateBulk(builders ...*DeliveryOptionDSVCreate) *DeliveryOptionDSVCreateBulk {
	return &DeliveryOptionDSVCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionDSVClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionDSVCreate, int)) *DeliveryOptionDSVCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionDSVCreateBulk{err: fmt.Errorf("calling to DeliveryOptionDSVClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionDSVCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionDSVCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionDSV.
func (c *DeliveryOptionDSVClient) Update() *DeliveryOptionDSVUpdate {
	mutation := newDeliveryOptionDSVMutation(c.config, OpUpdate)
	return &DeliveryOptionDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionDSVClient) UpdateOne(dod *DeliveryOptionDSV) *DeliveryOptionDSVUpdateOne {
	mutation := newDeliveryOptionDSVMutation(c.config, OpUpdateOne, withDeliveryOptionDSV(dod))
	return &DeliveryOptionDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionDSVClient) UpdateOneID(id pulid.ID) *DeliveryOptionDSVUpdateOne {
	mutation := newDeliveryOptionDSVMutation(c.config, OpUpdateOne, withDeliveryOptionDSVID(id))
	return &DeliveryOptionDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionDSV.
func (c *DeliveryOptionDSVClient) Delete() *DeliveryOptionDSVDelete {
	mutation := newDeliveryOptionDSVMutation(c.config, OpDelete)
	return &DeliveryOptionDSVDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionDSVClient) DeleteOne(dod *DeliveryOptionDSV) *DeliveryOptionDSVDeleteOne {
	return c.DeleteOneID(dod.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionDSVClient) DeleteOneID(id pulid.ID) *DeliveryOptionDSVDeleteOne {
	builder := c.Delete().Where(deliveryoptiondsv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionDSVDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionDSV.
func (c *DeliveryOptionDSVClient) Query() *DeliveryOptionDSVQuery {
	return &DeliveryOptionDSVQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionDSV},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionDSV entity by its id.
func (c *DeliveryOptionDSVClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionDSV, error) {
	return c.Query().Where(deliveryoptiondsv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionDSVClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionDSV {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionDSV.
func (c *DeliveryOptionDSVClient) QueryTenant(dod *DeliveryOptionDSV) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptiondsv.TenantTable, deliveryoptiondsv.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionDSV.
func (c *DeliveryOptionDSVClient) QueryDeliveryOption(dod *DeliveryOptionDSV) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptiondsv.DeliveryOptionTable, deliveryoptiondsv.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceDSV queries the carrier_additional_service_dsv edge of a DeliveryOptionDSV.
func (c *DeliveryOptionDSVClient) QueryCarrierAdditionalServiceDSV(dod *DeliveryOptionDSV) *CarrierAdditionalServiceDSVQuery {
	query := (&CarrierAdditionalServiceDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dod.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiondsv.Table, deliveryoptiondsv.FieldID, id),
			sqlgraph.To(carrieradditionalservicedsv.Table, carrieradditionalservicedsv.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptiondsv.CarrierAdditionalServiceDSVTable, deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dod.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionDSVClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionDSV
	return append(hooks[:len(hooks):len(hooks)], deliveryoptiondsv.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionDSVClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionDSV
}

func (c *DeliveryOptionDSVClient) mutate(ctx context.Context, m *DeliveryOptionDSVMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionDSVCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionDSVDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionDSV mutation op: %q", m.Op())
	}
}

// DeliveryOptionEasyPostClient is a client for the DeliveryOptionEasyPost schema.
type DeliveryOptionEasyPostClient struct {
	config
}

// NewDeliveryOptionEasyPostClient returns a client for the DeliveryOptionEasyPost from the given config.
func NewDeliveryOptionEasyPostClient(c config) *DeliveryOptionEasyPostClient {
	return &DeliveryOptionEasyPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptioneasypost.Hooks(f(g(h())))`.
func (c *DeliveryOptionEasyPostClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionEasyPost = append(c.hooks.DeliveryOptionEasyPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptioneasypost.Intercept(f(g(h())))`.
func (c *DeliveryOptionEasyPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionEasyPost = append(c.inters.DeliveryOptionEasyPost, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionEasyPost entity.
func (c *DeliveryOptionEasyPostClient) Create() *DeliveryOptionEasyPostCreate {
	mutation := newDeliveryOptionEasyPostMutation(c.config, OpCreate)
	return &DeliveryOptionEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionEasyPost entities.
func (c *DeliveryOptionEasyPostClient) CreateBulk(builders ...*DeliveryOptionEasyPostCreate) *DeliveryOptionEasyPostCreateBulk {
	return &DeliveryOptionEasyPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionEasyPostClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionEasyPostCreate, int)) *DeliveryOptionEasyPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionEasyPostCreateBulk{err: fmt.Errorf("calling to DeliveryOptionEasyPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionEasyPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionEasyPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionEasyPost.
func (c *DeliveryOptionEasyPostClient) Update() *DeliveryOptionEasyPostUpdate {
	mutation := newDeliveryOptionEasyPostMutation(c.config, OpUpdate)
	return &DeliveryOptionEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionEasyPostClient) UpdateOne(doep *DeliveryOptionEasyPost) *DeliveryOptionEasyPostUpdateOne {
	mutation := newDeliveryOptionEasyPostMutation(c.config, OpUpdateOne, withDeliveryOptionEasyPost(doep))
	return &DeliveryOptionEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionEasyPostClient) UpdateOneID(id pulid.ID) *DeliveryOptionEasyPostUpdateOne {
	mutation := newDeliveryOptionEasyPostMutation(c.config, OpUpdateOne, withDeliveryOptionEasyPostID(id))
	return &DeliveryOptionEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionEasyPost.
func (c *DeliveryOptionEasyPostClient) Delete() *DeliveryOptionEasyPostDelete {
	mutation := newDeliveryOptionEasyPostMutation(c.config, OpDelete)
	return &DeliveryOptionEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionEasyPostClient) DeleteOne(doep *DeliveryOptionEasyPost) *DeliveryOptionEasyPostDeleteOne {
	return c.DeleteOneID(doep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionEasyPostClient) DeleteOneID(id pulid.ID) *DeliveryOptionEasyPostDeleteOne {
	builder := c.Delete().Where(deliveryoptioneasypost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionEasyPostDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionEasyPost.
func (c *DeliveryOptionEasyPostClient) Query() *DeliveryOptionEasyPostQuery {
	return &DeliveryOptionEasyPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionEasyPost},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionEasyPost entity by its id.
func (c *DeliveryOptionEasyPostClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionEasyPost, error) {
	return c.Query().Where(deliveryoptioneasypost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionEasyPostClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionEasyPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionEasyPost.
func (c *DeliveryOptionEasyPostClient) QueryTenant(doep *DeliveryOptionEasyPost) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := doep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptioneasypost.Table, deliveryoptioneasypost.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptioneasypost.TenantTable, deliveryoptioneasypost.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(doep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionEasyPost.
func (c *DeliveryOptionEasyPostClient) QueryDeliveryOption(doep *DeliveryOptionEasyPost) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := doep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptioneasypost.Table, deliveryoptioneasypost.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptioneasypost.DeliveryOptionTable, deliveryoptioneasypost.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(doep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAddServEasyPost queries the carrier_add_serv_easy_post edge of a DeliveryOptionEasyPost.
func (c *DeliveryOptionEasyPostClient) QueryCarrierAddServEasyPost(doep *DeliveryOptionEasyPost) *CarrierAdditionalServiceEasyPostQuery {
	query := (&CarrierAdditionalServiceEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := doep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptioneasypost.Table, deliveryoptioneasypost.FieldID, id),
			sqlgraph.To(carrieradditionalserviceeasypost.Table, carrieradditionalserviceeasypost.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptioneasypost.CarrierAddServEasyPostTable, deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(doep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionEasyPostClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionEasyPost
	return append(hooks[:len(hooks):len(hooks)], deliveryoptioneasypost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionEasyPostClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionEasyPost
}

func (c *DeliveryOptionEasyPostClient) mutate(ctx context.Context, m *DeliveryOptionEasyPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionEasyPost mutation op: %q", m.Op())
	}
}

// DeliveryOptionGLSClient is a client for the DeliveryOptionGLS schema.
type DeliveryOptionGLSClient struct {
	config
}

// NewDeliveryOptionGLSClient returns a client for the DeliveryOptionGLS from the given config.
func NewDeliveryOptionGLSClient(c config) *DeliveryOptionGLSClient {
	return &DeliveryOptionGLSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptiongls.Hooks(f(g(h())))`.
func (c *DeliveryOptionGLSClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionGLS = append(c.hooks.DeliveryOptionGLS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptiongls.Intercept(f(g(h())))`.
func (c *DeliveryOptionGLSClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionGLS = append(c.inters.DeliveryOptionGLS, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionGLS entity.
func (c *DeliveryOptionGLSClient) Create() *DeliveryOptionGLSCreate {
	mutation := newDeliveryOptionGLSMutation(c.config, OpCreate)
	return &DeliveryOptionGLSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionGLS entities.
func (c *DeliveryOptionGLSClient) CreateBulk(builders ...*DeliveryOptionGLSCreate) *DeliveryOptionGLSCreateBulk {
	return &DeliveryOptionGLSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionGLSClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionGLSCreate, int)) *DeliveryOptionGLSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionGLSCreateBulk{err: fmt.Errorf("calling to DeliveryOptionGLSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionGLSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionGLSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionGLS.
func (c *DeliveryOptionGLSClient) Update() *DeliveryOptionGLSUpdate {
	mutation := newDeliveryOptionGLSMutation(c.config, OpUpdate)
	return &DeliveryOptionGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionGLSClient) UpdateOne(dog *DeliveryOptionGLS) *DeliveryOptionGLSUpdateOne {
	mutation := newDeliveryOptionGLSMutation(c.config, OpUpdateOne, withDeliveryOptionGLS(dog))
	return &DeliveryOptionGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionGLSClient) UpdateOneID(id pulid.ID) *DeliveryOptionGLSUpdateOne {
	mutation := newDeliveryOptionGLSMutation(c.config, OpUpdateOne, withDeliveryOptionGLSID(id))
	return &DeliveryOptionGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionGLS.
func (c *DeliveryOptionGLSClient) Delete() *DeliveryOptionGLSDelete {
	mutation := newDeliveryOptionGLSMutation(c.config, OpDelete)
	return &DeliveryOptionGLSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionGLSClient) DeleteOne(dog *DeliveryOptionGLS) *DeliveryOptionGLSDeleteOne {
	return c.DeleteOneID(dog.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionGLSClient) DeleteOneID(id pulid.ID) *DeliveryOptionGLSDeleteOne {
	builder := c.Delete().Where(deliveryoptiongls.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionGLSDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionGLS.
func (c *DeliveryOptionGLSClient) Query() *DeliveryOptionGLSQuery {
	return &DeliveryOptionGLSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionGLS},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionGLS entity by its id.
func (c *DeliveryOptionGLSClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionGLS, error) {
	return c.Query().Where(deliveryoptiongls.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionGLSClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionGLS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionGLS.
func (c *DeliveryOptionGLSClient) QueryTenant(dog *DeliveryOptionGLS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dog.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiongls.Table, deliveryoptiongls.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptiongls.TenantTable, deliveryoptiongls.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dog.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionGLS.
func (c *DeliveryOptionGLSClient) QueryDeliveryOption(dog *DeliveryOptionGLS) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dog.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiongls.Table, deliveryoptiongls.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptiongls.DeliveryOptionTable, deliveryoptiongls.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dog.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceGLS queries the carrier_additional_service_gls edge of a DeliveryOptionGLS.
func (c *DeliveryOptionGLSClient) QueryCarrierAdditionalServiceGLS(dog *DeliveryOptionGLS) *CarrierAdditionalServiceGLSQuery {
	query := (&CarrierAdditionalServiceGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dog.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptiongls.Table, deliveryoptiongls.FieldID, id),
			sqlgraph.To(carrieradditionalservicegls.Table, carrieradditionalservicegls.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptiongls.CarrierAdditionalServiceGLSTable, deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dog.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionGLSClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionGLS
	return append(hooks[:len(hooks):len(hooks)], deliveryoptiongls.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionGLSClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionGLS
}

func (c *DeliveryOptionGLSClient) mutate(ctx context.Context, m *DeliveryOptionGLSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionGLSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionGLSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionGLS mutation op: %q", m.Op())
	}
}

// DeliveryOptionPostNordClient is a client for the DeliveryOptionPostNord schema.
type DeliveryOptionPostNordClient struct {
	config
}

// NewDeliveryOptionPostNordClient returns a client for the DeliveryOptionPostNord from the given config.
func NewDeliveryOptionPostNordClient(c config) *DeliveryOptionPostNordClient {
	return &DeliveryOptionPostNordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptionpostnord.Hooks(f(g(h())))`.
func (c *DeliveryOptionPostNordClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionPostNord = append(c.hooks.DeliveryOptionPostNord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptionpostnord.Intercept(f(g(h())))`.
func (c *DeliveryOptionPostNordClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionPostNord = append(c.inters.DeliveryOptionPostNord, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionPostNord entity.
func (c *DeliveryOptionPostNordClient) Create() *DeliveryOptionPostNordCreate {
	mutation := newDeliveryOptionPostNordMutation(c.config, OpCreate)
	return &DeliveryOptionPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionPostNord entities.
func (c *DeliveryOptionPostNordClient) CreateBulk(builders ...*DeliveryOptionPostNordCreate) *DeliveryOptionPostNordCreateBulk {
	return &DeliveryOptionPostNordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionPostNordClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionPostNordCreate, int)) *DeliveryOptionPostNordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionPostNordCreateBulk{err: fmt.Errorf("calling to DeliveryOptionPostNordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionPostNordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionPostNordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionPostNord.
func (c *DeliveryOptionPostNordClient) Update() *DeliveryOptionPostNordUpdate {
	mutation := newDeliveryOptionPostNordMutation(c.config, OpUpdate)
	return &DeliveryOptionPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionPostNordClient) UpdateOne(dopn *DeliveryOptionPostNord) *DeliveryOptionPostNordUpdateOne {
	mutation := newDeliveryOptionPostNordMutation(c.config, OpUpdateOne, withDeliveryOptionPostNord(dopn))
	return &DeliveryOptionPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionPostNordClient) UpdateOneID(id pulid.ID) *DeliveryOptionPostNordUpdateOne {
	mutation := newDeliveryOptionPostNordMutation(c.config, OpUpdateOne, withDeliveryOptionPostNordID(id))
	return &DeliveryOptionPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionPostNord.
func (c *DeliveryOptionPostNordClient) Delete() *DeliveryOptionPostNordDelete {
	mutation := newDeliveryOptionPostNordMutation(c.config, OpDelete)
	return &DeliveryOptionPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionPostNordClient) DeleteOne(dopn *DeliveryOptionPostNord) *DeliveryOptionPostNordDeleteOne {
	return c.DeleteOneID(dopn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionPostNordClient) DeleteOneID(id pulid.ID) *DeliveryOptionPostNordDeleteOne {
	builder := c.Delete().Where(deliveryoptionpostnord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionPostNordDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionPostNord.
func (c *DeliveryOptionPostNordClient) Query() *DeliveryOptionPostNordQuery {
	return &DeliveryOptionPostNordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionPostNord},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionPostNord entity by its id.
func (c *DeliveryOptionPostNordClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionPostNord, error) {
	return c.Query().Where(deliveryoptionpostnord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionPostNordClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionPostNord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionPostNord.
func (c *DeliveryOptionPostNordClient) QueryTenant(dopn *DeliveryOptionPostNord) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dopn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionpostnord.Table, deliveryoptionpostnord.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptionpostnord.TenantTable, deliveryoptionpostnord.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dopn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionPostNord.
func (c *DeliveryOptionPostNordClient) QueryDeliveryOption(dopn *DeliveryOptionPostNord) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dopn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionpostnord.Table, deliveryoptionpostnord.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptionpostnord.DeliveryOptionTable, deliveryoptionpostnord.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dopn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAddServPostNord queries the carrier_add_serv_post_nord edge of a DeliveryOptionPostNord.
func (c *DeliveryOptionPostNordClient) QueryCarrierAddServPostNord(dopn *DeliveryOptionPostNord) *CarrierAdditionalServicePostNordQuery {
	query := (&CarrierAdditionalServicePostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dopn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionpostnord.Table, deliveryoptionpostnord.FieldID, id),
			sqlgraph.To(carrieradditionalservicepostnord.Table, carrieradditionalservicepostnord.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptionpostnord.CarrierAddServPostNordTable, deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dopn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionPostNordClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionPostNord
	return append(hooks[:len(hooks):len(hooks)], deliveryoptionpostnord.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionPostNordClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionPostNord
}

func (c *DeliveryOptionPostNordClient) mutate(ctx context.Context, m *DeliveryOptionPostNordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionPostNord mutation op: %q", m.Op())
	}
}

// DeliveryOptionUSPSClient is a client for the DeliveryOptionUSPS schema.
type DeliveryOptionUSPSClient struct {
	config
}

// NewDeliveryOptionUSPSClient returns a client for the DeliveryOptionUSPS from the given config.
func NewDeliveryOptionUSPSClient(c config) *DeliveryOptionUSPSClient {
	return &DeliveryOptionUSPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryoptionusps.Hooks(f(g(h())))`.
func (c *DeliveryOptionUSPSClient) Use(hooks ...Hook) {
	c.hooks.DeliveryOptionUSPS = append(c.hooks.DeliveryOptionUSPS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryoptionusps.Intercept(f(g(h())))`.
func (c *DeliveryOptionUSPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryOptionUSPS = append(c.inters.DeliveryOptionUSPS, interceptors...)
}

// Create returns a builder for creating a DeliveryOptionUSPS entity.
func (c *DeliveryOptionUSPSClient) Create() *DeliveryOptionUSPSCreate {
	mutation := newDeliveryOptionUSPSMutation(c.config, OpCreate)
	return &DeliveryOptionUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryOptionUSPS entities.
func (c *DeliveryOptionUSPSClient) CreateBulk(builders ...*DeliveryOptionUSPSCreate) *DeliveryOptionUSPSCreateBulk {
	return &DeliveryOptionUSPSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryOptionUSPSClient) MapCreateBulk(slice any, setFunc func(*DeliveryOptionUSPSCreate, int)) *DeliveryOptionUSPSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryOptionUSPSCreateBulk{err: fmt.Errorf("calling to DeliveryOptionUSPSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryOptionUSPSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryOptionUSPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryOptionUSPS.
func (c *DeliveryOptionUSPSClient) Update() *DeliveryOptionUSPSUpdate {
	mutation := newDeliveryOptionUSPSMutation(c.config, OpUpdate)
	return &DeliveryOptionUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryOptionUSPSClient) UpdateOne(dou *DeliveryOptionUSPS) *DeliveryOptionUSPSUpdateOne {
	mutation := newDeliveryOptionUSPSMutation(c.config, OpUpdateOne, withDeliveryOptionUSPS(dou))
	return &DeliveryOptionUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryOptionUSPSClient) UpdateOneID(id pulid.ID) *DeliveryOptionUSPSUpdateOne {
	mutation := newDeliveryOptionUSPSMutation(c.config, OpUpdateOne, withDeliveryOptionUSPSID(id))
	return &DeliveryOptionUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryOptionUSPS.
func (c *DeliveryOptionUSPSClient) Delete() *DeliveryOptionUSPSDelete {
	mutation := newDeliveryOptionUSPSMutation(c.config, OpDelete)
	return &DeliveryOptionUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryOptionUSPSClient) DeleteOne(dou *DeliveryOptionUSPS) *DeliveryOptionUSPSDeleteOne {
	return c.DeleteOneID(dou.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryOptionUSPSClient) DeleteOneID(id pulid.ID) *DeliveryOptionUSPSDeleteOne {
	builder := c.Delete().Where(deliveryoptionusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryOptionUSPSDeleteOne{builder}
}

// Query returns a query builder for DeliveryOptionUSPS.
func (c *DeliveryOptionUSPSClient) Query() *DeliveryOptionUSPSQuery {
	return &DeliveryOptionUSPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryOptionUSPS},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryOptionUSPS entity by its id.
func (c *DeliveryOptionUSPSClient) Get(ctx context.Context, id pulid.ID) (*DeliveryOptionUSPS, error) {
	return c.Query().Where(deliveryoptionusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryOptionUSPSClient) GetX(ctx context.Context, id pulid.ID) *DeliveryOptionUSPS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryOptionUSPS.
func (c *DeliveryOptionUSPSClient) QueryTenant(dou *DeliveryOptionUSPS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionusps.Table, deliveryoptionusps.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryoptionusps.TenantTable, deliveryoptionusps.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryOptionUSPS.
func (c *DeliveryOptionUSPSClient) QueryDeliveryOption(dou *DeliveryOptionUSPS) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionusps.Table, deliveryoptionusps.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, deliveryoptionusps.DeliveryOptionTable, deliveryoptionusps.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierAdditionalServiceUSPS queries the carrier_additional_service_usps edge of a DeliveryOptionUSPS.
func (c *DeliveryOptionUSPSClient) QueryCarrierAdditionalServiceUSPS(dou *DeliveryOptionUSPS) *CarrierAdditionalServiceUSPSQuery {
	query := (&CarrierAdditionalServiceUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dou.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryoptionusps.Table, deliveryoptionusps.FieldID, id),
			sqlgraph.To(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, deliveryoptionusps.CarrierAdditionalServiceUSPSTable, deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dou.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryOptionUSPSClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryOptionUSPS
	return append(hooks[:len(hooks):len(hooks)], deliveryoptionusps.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryOptionUSPSClient) Interceptors() []Interceptor {
	return c.inters.DeliveryOptionUSPS
}

func (c *DeliveryOptionUSPSClient) mutate(ctx context.Context, m *DeliveryOptionUSPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryOptionUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryOptionUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryOptionUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryOptionUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryOptionUSPS mutation op: %q", m.Op())
	}
}

// DeliveryRuleClient is a client for the DeliveryRule schema.
type DeliveryRuleClient struct {
	config
}

// NewDeliveryRuleClient returns a client for the DeliveryRule from the given config.
func NewDeliveryRuleClient(c config) *DeliveryRuleClient {
	return &DeliveryRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryrule.Hooks(f(g(h())))`.
func (c *DeliveryRuleClient) Use(hooks ...Hook) {
	c.hooks.DeliveryRule = append(c.hooks.DeliveryRule, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryrule.Intercept(f(g(h())))`.
func (c *DeliveryRuleClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryRule = append(c.inters.DeliveryRule, interceptors...)
}

// Create returns a builder for creating a DeliveryRule entity.
func (c *DeliveryRuleClient) Create() *DeliveryRuleCreate {
	mutation := newDeliveryRuleMutation(c.config, OpCreate)
	return &DeliveryRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryRule entities.
func (c *DeliveryRuleClient) CreateBulk(builders ...*DeliveryRuleCreate) *DeliveryRuleCreateBulk {
	return &DeliveryRuleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryRuleClient) MapCreateBulk(slice any, setFunc func(*DeliveryRuleCreate, int)) *DeliveryRuleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryRuleCreateBulk{err: fmt.Errorf("calling to DeliveryRuleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryRuleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryRule.
func (c *DeliveryRuleClient) Update() *DeliveryRuleUpdate {
	mutation := newDeliveryRuleMutation(c.config, OpUpdate)
	return &DeliveryRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryRuleClient) UpdateOne(dr *DeliveryRule) *DeliveryRuleUpdateOne {
	mutation := newDeliveryRuleMutation(c.config, OpUpdateOne, withDeliveryRule(dr))
	return &DeliveryRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryRuleClient) UpdateOneID(id pulid.ID) *DeliveryRuleUpdateOne {
	mutation := newDeliveryRuleMutation(c.config, OpUpdateOne, withDeliveryRuleID(id))
	return &DeliveryRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryRule.
func (c *DeliveryRuleClient) Delete() *DeliveryRuleDelete {
	mutation := newDeliveryRuleMutation(c.config, OpDelete)
	return &DeliveryRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryRuleClient) DeleteOne(dr *DeliveryRule) *DeliveryRuleDeleteOne {
	return c.DeleteOneID(dr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryRuleClient) DeleteOneID(id pulid.ID) *DeliveryRuleDeleteOne {
	builder := c.Delete().Where(deliveryrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryRuleDeleteOne{builder}
}

// Query returns a query builder for DeliveryRule.
func (c *DeliveryRuleClient) Query() *DeliveryRuleQuery {
	return &DeliveryRuleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryRule},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryRule entity by its id.
func (c *DeliveryRuleClient) Get(ctx context.Context, id pulid.ID) (*DeliveryRule, error) {
	return c.Query().Where(deliveryrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryRuleClient) GetX(ctx context.Context, id pulid.ID) *DeliveryRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryRule.
func (c *DeliveryRuleClient) QueryTenant(dr *DeliveryRule) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryrule.TenantTable, deliveryrule.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryRuleConstraintGroup queries the delivery_rule_constraint_group edge of a DeliveryRule.
func (c *DeliveryRuleClient) QueryDeliveryRuleConstraintGroup(dr *DeliveryRule) *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, id),
			sqlgraph.To(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryrule.DeliveryRuleConstraintGroupTable, deliveryrule.DeliveryRuleConstraintGroupColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a DeliveryRule.
func (c *DeliveryRuleClient) QueryDeliveryOption(dr *DeliveryRule) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryrule.DeliveryOptionTable, deliveryrule.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountry queries the country edge of a DeliveryRule.
func (c *DeliveryRuleClient) QueryCountry(dr *DeliveryRule) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deliveryrule.CountryTable, deliveryrule.CountryPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrency queries the currency edge of a DeliveryRule.
func (c *DeliveryRuleClient) QueryCurrency(dr *DeliveryRule) *CurrencyQuery {
	query := (&CurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, id),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryrule.CurrencyTable, deliveryrule.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(dr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryRuleClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryRule
	return append(hooks[:len(hooks):len(hooks)], deliveryrule.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryRuleClient) Interceptors() []Interceptor {
	return c.inters.DeliveryRule
}

func (c *DeliveryRuleClient) mutate(ctx context.Context, m *DeliveryRuleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryRuleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryRuleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryRule mutation op: %q", m.Op())
	}
}

// DeliveryRuleConstraintClient is a client for the DeliveryRuleConstraint schema.
type DeliveryRuleConstraintClient struct {
	config
}

// NewDeliveryRuleConstraintClient returns a client for the DeliveryRuleConstraint from the given config.
func NewDeliveryRuleConstraintClient(c config) *DeliveryRuleConstraintClient {
	return &DeliveryRuleConstraintClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryruleconstraint.Hooks(f(g(h())))`.
func (c *DeliveryRuleConstraintClient) Use(hooks ...Hook) {
	c.hooks.DeliveryRuleConstraint = append(c.hooks.DeliveryRuleConstraint, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryruleconstraint.Intercept(f(g(h())))`.
func (c *DeliveryRuleConstraintClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryRuleConstraint = append(c.inters.DeliveryRuleConstraint, interceptors...)
}

// Create returns a builder for creating a DeliveryRuleConstraint entity.
func (c *DeliveryRuleConstraintClient) Create() *DeliveryRuleConstraintCreate {
	mutation := newDeliveryRuleConstraintMutation(c.config, OpCreate)
	return &DeliveryRuleConstraintCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryRuleConstraint entities.
func (c *DeliveryRuleConstraintClient) CreateBulk(builders ...*DeliveryRuleConstraintCreate) *DeliveryRuleConstraintCreateBulk {
	return &DeliveryRuleConstraintCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryRuleConstraintClient) MapCreateBulk(slice any, setFunc func(*DeliveryRuleConstraintCreate, int)) *DeliveryRuleConstraintCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryRuleConstraintCreateBulk{err: fmt.Errorf("calling to DeliveryRuleConstraintClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryRuleConstraintCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryRuleConstraintCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryRuleConstraint.
func (c *DeliveryRuleConstraintClient) Update() *DeliveryRuleConstraintUpdate {
	mutation := newDeliveryRuleConstraintMutation(c.config, OpUpdate)
	return &DeliveryRuleConstraintUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryRuleConstraintClient) UpdateOne(drc *DeliveryRuleConstraint) *DeliveryRuleConstraintUpdateOne {
	mutation := newDeliveryRuleConstraintMutation(c.config, OpUpdateOne, withDeliveryRuleConstraint(drc))
	return &DeliveryRuleConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryRuleConstraintClient) UpdateOneID(id pulid.ID) *DeliveryRuleConstraintUpdateOne {
	mutation := newDeliveryRuleConstraintMutation(c.config, OpUpdateOne, withDeliveryRuleConstraintID(id))
	return &DeliveryRuleConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryRuleConstraint.
func (c *DeliveryRuleConstraintClient) Delete() *DeliveryRuleConstraintDelete {
	mutation := newDeliveryRuleConstraintMutation(c.config, OpDelete)
	return &DeliveryRuleConstraintDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryRuleConstraintClient) DeleteOne(drc *DeliveryRuleConstraint) *DeliveryRuleConstraintDeleteOne {
	return c.DeleteOneID(drc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryRuleConstraintClient) DeleteOneID(id pulid.ID) *DeliveryRuleConstraintDeleteOne {
	builder := c.Delete().Where(deliveryruleconstraint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryRuleConstraintDeleteOne{builder}
}

// Query returns a query builder for DeliveryRuleConstraint.
func (c *DeliveryRuleConstraintClient) Query() *DeliveryRuleConstraintQuery {
	return &DeliveryRuleConstraintQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryRuleConstraint},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryRuleConstraint entity by its id.
func (c *DeliveryRuleConstraintClient) Get(ctx context.Context, id pulid.ID) (*DeliveryRuleConstraint, error) {
	return c.Query().Where(deliveryruleconstraint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryRuleConstraintClient) GetX(ctx context.Context, id pulid.ID) *DeliveryRuleConstraint {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryRuleConstraint.
func (c *DeliveryRuleConstraintClient) QueryTenant(drc *DeliveryRuleConstraint) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := drc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraint.Table, deliveryruleconstraint.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryruleconstraint.TenantTable, deliveryruleconstraint.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(drc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryRuleConstraintGroup queries the delivery_rule_constraint_group edge of a DeliveryRuleConstraint.
func (c *DeliveryRuleConstraintClient) QueryDeliveryRuleConstraintGroup(drc *DeliveryRuleConstraint) *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := drc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraint.Table, deliveryruleconstraint.FieldID, id),
			sqlgraph.To(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryruleconstraint.DeliveryRuleConstraintGroupTable, deliveryruleconstraint.DeliveryRuleConstraintGroupColumn),
		)
		fromV = sqlgraph.Neighbors(drc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryRuleConstraintClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryRuleConstraint
	return append(hooks[:len(hooks):len(hooks)], deliveryruleconstraint.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryRuleConstraintClient) Interceptors() []Interceptor {
	return c.inters.DeliveryRuleConstraint
}

func (c *DeliveryRuleConstraintClient) mutate(ctx context.Context, m *DeliveryRuleConstraintMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryRuleConstraintCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryRuleConstraintUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryRuleConstraintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryRuleConstraintDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryRuleConstraint mutation op: %q", m.Op())
	}
}

// DeliveryRuleConstraintGroupClient is a client for the DeliveryRuleConstraintGroup schema.
type DeliveryRuleConstraintGroupClient struct {
	config
}

// NewDeliveryRuleConstraintGroupClient returns a client for the DeliveryRuleConstraintGroup from the given config.
func NewDeliveryRuleConstraintGroupClient(c config) *DeliveryRuleConstraintGroupClient {
	return &DeliveryRuleConstraintGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliveryruleconstraintgroup.Hooks(f(g(h())))`.
func (c *DeliveryRuleConstraintGroupClient) Use(hooks ...Hook) {
	c.hooks.DeliveryRuleConstraintGroup = append(c.hooks.DeliveryRuleConstraintGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deliveryruleconstraintgroup.Intercept(f(g(h())))`.
func (c *DeliveryRuleConstraintGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeliveryRuleConstraintGroup = append(c.inters.DeliveryRuleConstraintGroup, interceptors...)
}

// Create returns a builder for creating a DeliveryRuleConstraintGroup entity.
func (c *DeliveryRuleConstraintGroupClient) Create() *DeliveryRuleConstraintGroupCreate {
	mutation := newDeliveryRuleConstraintGroupMutation(c.config, OpCreate)
	return &DeliveryRuleConstraintGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeliveryRuleConstraintGroup entities.
func (c *DeliveryRuleConstraintGroupClient) CreateBulk(builders ...*DeliveryRuleConstraintGroupCreate) *DeliveryRuleConstraintGroupCreateBulk {
	return &DeliveryRuleConstraintGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeliveryRuleConstraintGroupClient) MapCreateBulk(slice any, setFunc func(*DeliveryRuleConstraintGroupCreate, int)) *DeliveryRuleConstraintGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeliveryRuleConstraintGroupCreateBulk{err: fmt.Errorf("calling to DeliveryRuleConstraintGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeliveryRuleConstraintGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeliveryRuleConstraintGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeliveryRuleConstraintGroup.
func (c *DeliveryRuleConstraintGroupClient) Update() *DeliveryRuleConstraintGroupUpdate {
	mutation := newDeliveryRuleConstraintGroupMutation(c.config, OpUpdate)
	return &DeliveryRuleConstraintGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliveryRuleConstraintGroupClient) UpdateOne(drcg *DeliveryRuleConstraintGroup) *DeliveryRuleConstraintGroupUpdateOne {
	mutation := newDeliveryRuleConstraintGroupMutation(c.config, OpUpdateOne, withDeliveryRuleConstraintGroup(drcg))
	return &DeliveryRuleConstraintGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliveryRuleConstraintGroupClient) UpdateOneID(id pulid.ID) *DeliveryRuleConstraintGroupUpdateOne {
	mutation := newDeliveryRuleConstraintGroupMutation(c.config, OpUpdateOne, withDeliveryRuleConstraintGroupID(id))
	return &DeliveryRuleConstraintGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeliveryRuleConstraintGroup.
func (c *DeliveryRuleConstraintGroupClient) Delete() *DeliveryRuleConstraintGroupDelete {
	mutation := newDeliveryRuleConstraintGroupMutation(c.config, OpDelete)
	return &DeliveryRuleConstraintGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeliveryRuleConstraintGroupClient) DeleteOne(drcg *DeliveryRuleConstraintGroup) *DeliveryRuleConstraintGroupDeleteOne {
	return c.DeleteOneID(drcg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeliveryRuleConstraintGroupClient) DeleteOneID(id pulid.ID) *DeliveryRuleConstraintGroupDeleteOne {
	builder := c.Delete().Where(deliveryruleconstraintgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliveryRuleConstraintGroupDeleteOne{builder}
}

// Query returns a query builder for DeliveryRuleConstraintGroup.
func (c *DeliveryRuleConstraintGroupClient) Query() *DeliveryRuleConstraintGroupQuery {
	return &DeliveryRuleConstraintGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeliveryRuleConstraintGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a DeliveryRuleConstraintGroup entity by its id.
func (c *DeliveryRuleConstraintGroupClient) Get(ctx context.Context, id pulid.ID) (*DeliveryRuleConstraintGroup, error) {
	return c.Query().Where(deliveryruleconstraintgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliveryRuleConstraintGroupClient) GetX(ctx context.Context, id pulid.ID) *DeliveryRuleConstraintGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DeliveryRuleConstraintGroup.
func (c *DeliveryRuleConstraintGroupClient) QueryTenant(drcg *DeliveryRuleConstraintGroup) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := drcg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryruleconstraintgroup.TenantTable, deliveryruleconstraintgroup.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(drcg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryRuleConstraints queries the delivery_rule_constraints edge of a DeliveryRuleConstraintGroup.
func (c *DeliveryRuleConstraintGroupClient) QueryDeliveryRuleConstraints(drcg *DeliveryRuleConstraintGroup) *DeliveryRuleConstraintQuery {
	query := (&DeliveryRuleConstraintClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := drcg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID, id),
			sqlgraph.To(deliveryruleconstraint.Table, deliveryruleconstraint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryruleconstraintgroup.DeliveryRuleConstraintsTable, deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn),
		)
		fromV = sqlgraph.Neighbors(drcg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryRule queries the delivery_rule edge of a DeliveryRuleConstraintGroup.
func (c *DeliveryRuleConstraintGroupClient) QueryDeliveryRule(drcg *DeliveryRuleConstraintGroup) *DeliveryRuleQuery {
	query := (&DeliveryRuleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := drcg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID, id),
			sqlgraph.To(deliveryrule.Table, deliveryrule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryruleconstraintgroup.DeliveryRuleTable, deliveryruleconstraintgroup.DeliveryRuleColumn),
		)
		fromV = sqlgraph.Neighbors(drcg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DeliveryRuleConstraintGroupClient) Hooks() []Hook {
	hooks := c.hooks.DeliveryRuleConstraintGroup
	return append(hooks[:len(hooks):len(hooks)], deliveryruleconstraintgroup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DeliveryRuleConstraintGroupClient) Interceptors() []Interceptor {
	return c.inters.DeliveryRuleConstraintGroup
}

func (c *DeliveryRuleConstraintGroupClient) mutate(ctx context.Context, m *DeliveryRuleConstraintGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeliveryRuleConstraintGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeliveryRuleConstraintGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeliveryRuleConstraintGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeliveryRuleConstraintGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeliveryRuleConstraintGroup mutation op: %q", m.Op())
	}
}

// DocumentClient is a client for the Document schema.
type DocumentClient struct {
	config
}

// NewDocumentClient returns a client for the Document from the given config.
func NewDocumentClient(c config) *DocumentClient {
	return &DocumentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `document.Hooks(f(g(h())))`.
func (c *DocumentClient) Use(hooks ...Hook) {
	c.hooks.Document = append(c.hooks.Document, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `document.Intercept(f(g(h())))`.
func (c *DocumentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Document = append(c.inters.Document, interceptors...)
}

// Create returns a builder for creating a Document entity.
func (c *DocumentClient) Create() *DocumentCreate {
	mutation := newDocumentMutation(c.config, OpCreate)
	return &DocumentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Document entities.
func (c *DocumentClient) CreateBulk(builders ...*DocumentCreate) *DocumentCreateBulk {
	return &DocumentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DocumentClient) MapCreateBulk(slice any, setFunc func(*DocumentCreate, int)) *DocumentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DocumentCreateBulk{err: fmt.Errorf("calling to DocumentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DocumentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DocumentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Document.
func (c *DocumentClient) Update() *DocumentUpdate {
	mutation := newDocumentMutation(c.config, OpUpdate)
	return &DocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DocumentClient) UpdateOne(d *Document) *DocumentUpdateOne {
	mutation := newDocumentMutation(c.config, OpUpdateOne, withDocument(d))
	return &DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DocumentClient) UpdateOneID(id pulid.ID) *DocumentUpdateOne {
	mutation := newDocumentMutation(c.config, OpUpdateOne, withDocumentID(id))
	return &DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Document.
func (c *DocumentClient) Delete() *DocumentDelete {
	mutation := newDocumentMutation(c.config, OpDelete)
	return &DocumentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DocumentClient) DeleteOne(d *Document) *DocumentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DocumentClient) DeleteOneID(id pulid.ID) *DocumentDeleteOne {
	builder := c.Delete().Where(document.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DocumentDeleteOne{builder}
}

// Query returns a query builder for Document.
func (c *DocumentClient) Query() *DocumentQuery {
	return &DocumentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDocument},
		inters: c.Interceptors(),
	}
}

// Get returns a Document entity by its id.
func (c *DocumentClient) Get(ctx context.Context, id pulid.ID) (*Document, error) {
	return c.Query().Where(document.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DocumentClient) GetX(ctx context.Context, id pulid.ID) *Document {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Document.
func (c *DocumentClient) QueryTenant(d *Document) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, document.TenantTable, document.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierBrand queries the carrier_brand edge of a Document.
func (c *DocumentClient) QueryCarrierBrand(d *Document) *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, document.CarrierBrandTable, document.CarrierBrandColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectionPackingSlip queries the connection_packing_slip edge of a Document.
func (c *DocumentClient) QueryConnectionPackingSlip(d *Document) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(document.Table, document.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, document.ConnectionPackingSlipTable, document.ConnectionPackingSlipColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DocumentClient) Hooks() []Hook {
	hooks := c.hooks.Document
	return append(hooks[:len(hooks):len(hooks)], document.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DocumentClient) Interceptors() []Interceptor {
	return c.inters.Document
}

func (c *DocumentClient) mutate(ctx context.Context, m *DocumentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DocumentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DocumentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Document mutation op: %q", m.Op())
	}
}

// DocumentFileClient is a client for the DocumentFile schema.
type DocumentFileClient struct {
	config
}

// NewDocumentFileClient returns a client for the DocumentFile from the given config.
func NewDocumentFileClient(c config) *DocumentFileClient {
	return &DocumentFileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `documentfile.Hooks(f(g(h())))`.
func (c *DocumentFileClient) Use(hooks ...Hook) {
	c.hooks.DocumentFile = append(c.hooks.DocumentFile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `documentfile.Intercept(f(g(h())))`.
func (c *DocumentFileClient) Intercept(interceptors ...Interceptor) {
	c.inters.DocumentFile = append(c.inters.DocumentFile, interceptors...)
}

// Create returns a builder for creating a DocumentFile entity.
func (c *DocumentFileClient) Create() *DocumentFileCreate {
	mutation := newDocumentFileMutation(c.config, OpCreate)
	return &DocumentFileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DocumentFile entities.
func (c *DocumentFileClient) CreateBulk(builders ...*DocumentFileCreate) *DocumentFileCreateBulk {
	return &DocumentFileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DocumentFileClient) MapCreateBulk(slice any, setFunc func(*DocumentFileCreate, int)) *DocumentFileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DocumentFileCreateBulk{err: fmt.Errorf("calling to DocumentFileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DocumentFileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DocumentFileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DocumentFile.
func (c *DocumentFileClient) Update() *DocumentFileUpdate {
	mutation := newDocumentFileMutation(c.config, OpUpdate)
	return &DocumentFileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DocumentFileClient) UpdateOne(df *DocumentFile) *DocumentFileUpdateOne {
	mutation := newDocumentFileMutation(c.config, OpUpdateOne, withDocumentFile(df))
	return &DocumentFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DocumentFileClient) UpdateOneID(id pulid.ID) *DocumentFileUpdateOne {
	mutation := newDocumentFileMutation(c.config, OpUpdateOne, withDocumentFileID(id))
	return &DocumentFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DocumentFile.
func (c *DocumentFileClient) Delete() *DocumentFileDelete {
	mutation := newDocumentFileMutation(c.config, OpDelete)
	return &DocumentFileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DocumentFileClient) DeleteOne(df *DocumentFile) *DocumentFileDeleteOne {
	return c.DeleteOneID(df.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DocumentFileClient) DeleteOneID(id pulid.ID) *DocumentFileDeleteOne {
	builder := c.Delete().Where(documentfile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DocumentFileDeleteOne{builder}
}

// Query returns a query builder for DocumentFile.
func (c *DocumentFileClient) Query() *DocumentFileQuery {
	return &DocumentFileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDocumentFile},
		inters: c.Interceptors(),
	}
}

// Get returns a DocumentFile entity by its id.
func (c *DocumentFileClient) Get(ctx context.Context, id pulid.ID) (*DocumentFile, error) {
	return c.Query().Where(documentfile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DocumentFileClient) GetX(ctx context.Context, id pulid.ID) *DocumentFile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a DocumentFile.
func (c *DocumentFileClient) QueryTenant(df *DocumentFile) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(documentfile.Table, documentfile.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentfile.TenantTable, documentfile.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a DocumentFile.
func (c *DocumentFileClient) QueryColli(df *DocumentFile) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(documentfile.Table, documentfile.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, documentfile.ColliTable, documentfile.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentParcel queries the shipment_parcel edge of a DocumentFile.
func (c *DocumentFileClient) QueryShipmentParcel(df *DocumentFile) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := df.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(documentfile.Table, documentfile.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, documentfile.ShipmentParcelTable, documentfile.ShipmentParcelColumn),
		)
		fromV = sqlgraph.Neighbors(df.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DocumentFileClient) Hooks() []Hook {
	hooks := c.hooks.DocumentFile
	return append(hooks[:len(hooks):len(hooks)], documentfile.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *DocumentFileClient) Interceptors() []Interceptor {
	return c.inters.DocumentFile
}

func (c *DocumentFileClient) mutate(ctx context.Context, m *DocumentFileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DocumentFileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DocumentFileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DocumentFileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DocumentFileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DocumentFile mutation op: %q", m.Op())
	}
}

// EmailTemplateClient is a client for the EmailTemplate schema.
type EmailTemplateClient struct {
	config
}

// NewEmailTemplateClient returns a client for the EmailTemplate from the given config.
func NewEmailTemplateClient(c config) *EmailTemplateClient {
	return &EmailTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailtemplate.Hooks(f(g(h())))`.
func (c *EmailTemplateClient) Use(hooks ...Hook) {
	c.hooks.EmailTemplate = append(c.hooks.EmailTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailtemplate.Intercept(f(g(h())))`.
func (c *EmailTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailTemplate = append(c.inters.EmailTemplate, interceptors...)
}

// Create returns a builder for creating a EmailTemplate entity.
func (c *EmailTemplateClient) Create() *EmailTemplateCreate {
	mutation := newEmailTemplateMutation(c.config, OpCreate)
	return &EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailTemplate entities.
func (c *EmailTemplateClient) CreateBulk(builders ...*EmailTemplateCreate) *EmailTemplateCreateBulk {
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailTemplateClient) MapCreateBulk(slice any, setFunc func(*EmailTemplateCreate, int)) *EmailTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailTemplateCreateBulk{err: fmt.Errorf("calling to EmailTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailTemplate.
func (c *EmailTemplateClient) Update() *EmailTemplateUpdate {
	mutation := newEmailTemplateMutation(c.config, OpUpdate)
	return &EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailTemplateClient) UpdateOne(et *EmailTemplate) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplate(et))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailTemplateClient) UpdateOneID(id pulid.ID) *EmailTemplateUpdateOne {
	mutation := newEmailTemplateMutation(c.config, OpUpdateOne, withEmailTemplateID(id))
	return &EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailTemplate.
func (c *EmailTemplateClient) Delete() *EmailTemplateDelete {
	mutation := newEmailTemplateMutation(c.config, OpDelete)
	return &EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailTemplateClient) DeleteOne(et *EmailTemplate) *EmailTemplateDeleteOne {
	return c.DeleteOneID(et.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailTemplateClient) DeleteOneID(id pulid.ID) *EmailTemplateDeleteOne {
	builder := c.Delete().Where(emailtemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailTemplateDeleteOne{builder}
}

// Query returns a query builder for EmailTemplate.
func (c *EmailTemplateClient) Query() *EmailTemplateQuery {
	return &EmailTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailTemplate entity by its id.
func (c *EmailTemplateClient) Get(ctx context.Context, id pulid.ID) (*EmailTemplate, error) {
	return c.Query().Where(emailtemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailTemplateClient) GetX(ctx context.Context, id pulid.ID) *EmailTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryTenant(et *EmailTemplate) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, emailtemplate.TenantTable, emailtemplate.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortalConfirmationLabel queries the return_portal_confirmation_label edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryReturnPortalConfirmationLabel(et *EmailTemplate) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.ReturnPortalConfirmationLabelTable, emailtemplate.ReturnPortalConfirmationLabelColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortalConfirmationQrCode queries the return_portal_confirmation_qr_code edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryReturnPortalConfirmationQrCode(et *EmailTemplate) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.ReturnPortalConfirmationQrCodeTable, emailtemplate.ReturnPortalConfirmationQrCodeColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortalReceived queries the return_portal_received edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryReturnPortalReceived(et *EmailTemplate) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.ReturnPortalReceivedTable, emailtemplate.ReturnPortalReceivedColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortalAccepted queries the return_portal_accepted edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryReturnPortalAccepted(et *EmailTemplate) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.ReturnPortalAcceptedTable, emailtemplate.ReturnPortalAcceptedColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionClickCollectAtStore queries the delivery_option_click_collect_at_store edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryDeliveryOptionClickCollectAtStore(et *EmailTemplate) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.DeliveryOptionClickCollectAtStoreTable, emailtemplate.DeliveryOptionClickCollectAtStoreColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a EmailTemplate.
func (c *EmailTemplateClient) QueryNotifications(et *EmailTemplate) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := et.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailtemplate.Table, emailtemplate.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, emailtemplate.NotificationsTable, emailtemplate.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(et.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailTemplateClient) Hooks() []Hook {
	hooks := c.hooks.EmailTemplate
	return append(hooks[:len(hooks):len(hooks)], emailtemplate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmailTemplateClient) Interceptors() []Interceptor {
	return c.inters.EmailTemplate
}

func (c *EmailTemplateClient) mutate(ctx context.Context, m *EmailTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmailTemplate mutation op: %q", m.Op())
	}
}

// HypothesisTestClient is a client for the HypothesisTest schema.
type HypothesisTestClient struct {
	config
}

// NewHypothesisTestClient returns a client for the HypothesisTest from the given config.
func NewHypothesisTestClient(c config) *HypothesisTestClient {
	return &HypothesisTestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hypothesistest.Hooks(f(g(h())))`.
func (c *HypothesisTestClient) Use(hooks ...Hook) {
	c.hooks.HypothesisTest = append(c.hooks.HypothesisTest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hypothesistest.Intercept(f(g(h())))`.
func (c *HypothesisTestClient) Intercept(interceptors ...Interceptor) {
	c.inters.HypothesisTest = append(c.inters.HypothesisTest, interceptors...)
}

// Create returns a builder for creating a HypothesisTest entity.
func (c *HypothesisTestClient) Create() *HypothesisTestCreate {
	mutation := newHypothesisTestMutation(c.config, OpCreate)
	return &HypothesisTestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HypothesisTest entities.
func (c *HypothesisTestClient) CreateBulk(builders ...*HypothesisTestCreate) *HypothesisTestCreateBulk {
	return &HypothesisTestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HypothesisTestClient) MapCreateBulk(slice any, setFunc func(*HypothesisTestCreate, int)) *HypothesisTestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HypothesisTestCreateBulk{err: fmt.Errorf("calling to HypothesisTestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HypothesisTestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HypothesisTestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HypothesisTest.
func (c *HypothesisTestClient) Update() *HypothesisTestUpdate {
	mutation := newHypothesisTestMutation(c.config, OpUpdate)
	return &HypothesisTestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HypothesisTestClient) UpdateOne(ht *HypothesisTest) *HypothesisTestUpdateOne {
	mutation := newHypothesisTestMutation(c.config, OpUpdateOne, withHypothesisTest(ht))
	return &HypothesisTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HypothesisTestClient) UpdateOneID(id pulid.ID) *HypothesisTestUpdateOne {
	mutation := newHypothesisTestMutation(c.config, OpUpdateOne, withHypothesisTestID(id))
	return &HypothesisTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HypothesisTest.
func (c *HypothesisTestClient) Delete() *HypothesisTestDelete {
	mutation := newHypothesisTestMutation(c.config, OpDelete)
	return &HypothesisTestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HypothesisTestClient) DeleteOne(ht *HypothesisTest) *HypothesisTestDeleteOne {
	return c.DeleteOneID(ht.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HypothesisTestClient) DeleteOneID(id pulid.ID) *HypothesisTestDeleteOne {
	builder := c.Delete().Where(hypothesistest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HypothesisTestDeleteOne{builder}
}

// Query returns a query builder for HypothesisTest.
func (c *HypothesisTestClient) Query() *HypothesisTestQuery {
	return &HypothesisTestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHypothesisTest},
		inters: c.Interceptors(),
	}
}

// Get returns a HypothesisTest entity by its id.
func (c *HypothesisTestClient) Get(ctx context.Context, id pulid.ID) (*HypothesisTest, error) {
	return c.Query().Where(hypothesistest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HypothesisTestClient) GetX(ctx context.Context, id pulid.ID) *HypothesisTest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a HypothesisTest.
func (c *HypothesisTestClient) QueryTenant(ht *HypothesisTest) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistest.Table, hypothesistest.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistest.TenantTable, hypothesistest.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOption queries the hypothesis_test_delivery_option edge of a HypothesisTest.
func (c *HypothesisTestClient) QueryHypothesisTestDeliveryOption(ht *HypothesisTest) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistest.Table, hypothesistest.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hypothesistest.HypothesisTestDeliveryOptionTable, hypothesistest.HypothesisTestDeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnection queries the connection edge of a HypothesisTest.
func (c *HypothesisTestClient) QueryConnection(ht *HypothesisTest) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ht.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistest.Table, hypothesistest.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistest.ConnectionTable, hypothesistest.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(ht.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HypothesisTestClient) Hooks() []Hook {
	hooks := c.hooks.HypothesisTest
	return append(hooks[:len(hooks):len(hooks)], hypothesistest.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HypothesisTestClient) Interceptors() []Interceptor {
	return c.inters.HypothesisTest
}

func (c *HypothesisTestClient) mutate(ctx context.Context, m *HypothesisTestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HypothesisTestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HypothesisTestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HypothesisTestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HypothesisTestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HypothesisTest mutation op: %q", m.Op())
	}
}

// HypothesisTestDeliveryOptionClient is a client for the HypothesisTestDeliveryOption schema.
type HypothesisTestDeliveryOptionClient struct {
	config
}

// NewHypothesisTestDeliveryOptionClient returns a client for the HypothesisTestDeliveryOption from the given config.
func NewHypothesisTestDeliveryOptionClient(c config) *HypothesisTestDeliveryOptionClient {
	return &HypothesisTestDeliveryOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hypothesistestdeliveryoption.Hooks(f(g(h())))`.
func (c *HypothesisTestDeliveryOptionClient) Use(hooks ...Hook) {
	c.hooks.HypothesisTestDeliveryOption = append(c.hooks.HypothesisTestDeliveryOption, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hypothesistestdeliveryoption.Intercept(f(g(h())))`.
func (c *HypothesisTestDeliveryOptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.HypothesisTestDeliveryOption = append(c.inters.HypothesisTestDeliveryOption, interceptors...)
}

// Create returns a builder for creating a HypothesisTestDeliveryOption entity.
func (c *HypothesisTestDeliveryOptionClient) Create() *HypothesisTestDeliveryOptionCreate {
	mutation := newHypothesisTestDeliveryOptionMutation(c.config, OpCreate)
	return &HypothesisTestDeliveryOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HypothesisTestDeliveryOption entities.
func (c *HypothesisTestDeliveryOptionClient) CreateBulk(builders ...*HypothesisTestDeliveryOptionCreate) *HypothesisTestDeliveryOptionCreateBulk {
	return &HypothesisTestDeliveryOptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HypothesisTestDeliveryOptionClient) MapCreateBulk(slice any, setFunc func(*HypothesisTestDeliveryOptionCreate, int)) *HypothesisTestDeliveryOptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HypothesisTestDeliveryOptionCreateBulk{err: fmt.Errorf("calling to HypothesisTestDeliveryOptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HypothesisTestDeliveryOptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HypothesisTestDeliveryOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) Update() *HypothesisTestDeliveryOptionUpdate {
	mutation := newHypothesisTestDeliveryOptionMutation(c.config, OpUpdate)
	return &HypothesisTestDeliveryOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HypothesisTestDeliveryOptionClient) UpdateOne(htdo *HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionUpdateOne {
	mutation := newHypothesisTestDeliveryOptionMutation(c.config, OpUpdateOne, withHypothesisTestDeliveryOption(htdo))
	return &HypothesisTestDeliveryOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HypothesisTestDeliveryOptionClient) UpdateOneID(id pulid.ID) *HypothesisTestDeliveryOptionUpdateOne {
	mutation := newHypothesisTestDeliveryOptionMutation(c.config, OpUpdateOne, withHypothesisTestDeliveryOptionID(id))
	return &HypothesisTestDeliveryOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) Delete() *HypothesisTestDeliveryOptionDelete {
	mutation := newHypothesisTestDeliveryOptionMutation(c.config, OpDelete)
	return &HypothesisTestDeliveryOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HypothesisTestDeliveryOptionClient) DeleteOne(htdo *HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionDeleteOne {
	return c.DeleteOneID(htdo.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HypothesisTestDeliveryOptionClient) DeleteOneID(id pulid.ID) *HypothesisTestDeliveryOptionDeleteOne {
	builder := c.Delete().Where(hypothesistestdeliveryoption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HypothesisTestDeliveryOptionDeleteOne{builder}
}

// Query returns a query builder for HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) Query() *HypothesisTestDeliveryOptionQuery {
	return &HypothesisTestDeliveryOptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHypothesisTestDeliveryOption},
		inters: c.Interceptors(),
	}
}

// Get returns a HypothesisTestDeliveryOption entity by its id.
func (c *HypothesisTestDeliveryOptionClient) Get(ctx context.Context, id pulid.ID) (*HypothesisTestDeliveryOption, error) {
	return c.Query().Where(hypothesistestdeliveryoption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HypothesisTestDeliveryOptionClient) GetX(ctx context.Context, id pulid.ID) *HypothesisTestDeliveryOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) QueryTenant(htdo *HypothesisTestDeliveryOption) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoption.TenantTable, hypothesistestdeliveryoption.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(htdo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTest queries the hypothesis_test edge of a HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) QueryHypothesisTest(htdo *HypothesisTestDeliveryOption) *HypothesisTestQuery {
	query := (&HypothesisTestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, id),
			sqlgraph.To(hypothesistest.Table, hypothesistest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hypothesistestdeliveryoption.HypothesisTestTable, hypothesistestdeliveryoption.HypothesisTestColumn),
		)
		fromV = sqlgraph.Neighbors(htdo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionRequest queries the hypothesis_test_delivery_option_request edge of a HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) QueryHypothesisTestDeliveryOptionRequest(htdo *HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable, hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn),
		)
		fromV = sqlgraph.Neighbors(htdo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionGroupOne queries the delivery_option_group_one edge of a HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) QueryDeliveryOptionGroupOne(htdo *HypothesisTestDeliveryOption) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hypothesistestdeliveryoption.DeliveryOptionGroupOneTable, hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(htdo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptionGroupTwo queries the delivery_option_group_two edge of a HypothesisTestDeliveryOption.
func (c *HypothesisTestDeliveryOptionClient) QueryDeliveryOptionGroupTwo(htdo *HypothesisTestDeliveryOption) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdo.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable, hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(htdo.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HypothesisTestDeliveryOptionClient) Hooks() []Hook {
	hooks := c.hooks.HypothesisTestDeliveryOption
	return append(hooks[:len(hooks):len(hooks)], hypothesistestdeliveryoption.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HypothesisTestDeliveryOptionClient) Interceptors() []Interceptor {
	return c.inters.HypothesisTestDeliveryOption
}

func (c *HypothesisTestDeliveryOptionClient) mutate(ctx context.Context, m *HypothesisTestDeliveryOptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HypothesisTestDeliveryOptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HypothesisTestDeliveryOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HypothesisTestDeliveryOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HypothesisTestDeliveryOptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HypothesisTestDeliveryOption mutation op: %q", m.Op())
	}
}

// HypothesisTestDeliveryOptionLookupClient is a client for the HypothesisTestDeliveryOptionLookup schema.
type HypothesisTestDeliveryOptionLookupClient struct {
	config
}

// NewHypothesisTestDeliveryOptionLookupClient returns a client for the HypothesisTestDeliveryOptionLookup from the given config.
func NewHypothesisTestDeliveryOptionLookupClient(c config) *HypothesisTestDeliveryOptionLookupClient {
	return &HypothesisTestDeliveryOptionLookupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hypothesistestdeliveryoptionlookup.Hooks(f(g(h())))`.
func (c *HypothesisTestDeliveryOptionLookupClient) Use(hooks ...Hook) {
	c.hooks.HypothesisTestDeliveryOptionLookup = append(c.hooks.HypothesisTestDeliveryOptionLookup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hypothesistestdeliveryoptionlookup.Intercept(f(g(h())))`.
func (c *HypothesisTestDeliveryOptionLookupClient) Intercept(interceptors ...Interceptor) {
	c.inters.HypothesisTestDeliveryOptionLookup = append(c.inters.HypothesisTestDeliveryOptionLookup, interceptors...)
}

// Create returns a builder for creating a HypothesisTestDeliveryOptionLookup entity.
func (c *HypothesisTestDeliveryOptionLookupClient) Create() *HypothesisTestDeliveryOptionLookupCreate {
	mutation := newHypothesisTestDeliveryOptionLookupMutation(c.config, OpCreate)
	return &HypothesisTestDeliveryOptionLookupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HypothesisTestDeliveryOptionLookup entities.
func (c *HypothesisTestDeliveryOptionLookupClient) CreateBulk(builders ...*HypothesisTestDeliveryOptionLookupCreate) *HypothesisTestDeliveryOptionLookupCreateBulk {
	return &HypothesisTestDeliveryOptionLookupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HypothesisTestDeliveryOptionLookupClient) MapCreateBulk(slice any, setFunc func(*HypothesisTestDeliveryOptionLookupCreate, int)) *HypothesisTestDeliveryOptionLookupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HypothesisTestDeliveryOptionLookupCreateBulk{err: fmt.Errorf("calling to HypothesisTestDeliveryOptionLookupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HypothesisTestDeliveryOptionLookupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HypothesisTestDeliveryOptionLookupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HypothesisTestDeliveryOptionLookup.
func (c *HypothesisTestDeliveryOptionLookupClient) Update() *HypothesisTestDeliveryOptionLookupUpdate {
	mutation := newHypothesisTestDeliveryOptionLookupMutation(c.config, OpUpdate)
	return &HypothesisTestDeliveryOptionLookupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HypothesisTestDeliveryOptionLookupClient) UpdateOne(htdol *HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupUpdateOne {
	mutation := newHypothesisTestDeliveryOptionLookupMutation(c.config, OpUpdateOne, withHypothesisTestDeliveryOptionLookup(htdol))
	return &HypothesisTestDeliveryOptionLookupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HypothesisTestDeliveryOptionLookupClient) UpdateOneID(id pulid.ID) *HypothesisTestDeliveryOptionLookupUpdateOne {
	mutation := newHypothesisTestDeliveryOptionLookupMutation(c.config, OpUpdateOne, withHypothesisTestDeliveryOptionLookupID(id))
	return &HypothesisTestDeliveryOptionLookupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HypothesisTestDeliveryOptionLookup.
func (c *HypothesisTestDeliveryOptionLookupClient) Delete() *HypothesisTestDeliveryOptionLookupDelete {
	mutation := newHypothesisTestDeliveryOptionLookupMutation(c.config, OpDelete)
	return &HypothesisTestDeliveryOptionLookupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HypothesisTestDeliveryOptionLookupClient) DeleteOne(htdol *HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionLookupDeleteOne {
	return c.DeleteOneID(htdol.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HypothesisTestDeliveryOptionLookupClient) DeleteOneID(id pulid.ID) *HypothesisTestDeliveryOptionLookupDeleteOne {
	builder := c.Delete().Where(hypothesistestdeliveryoptionlookup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HypothesisTestDeliveryOptionLookupDeleteOne{builder}
}

// Query returns a query builder for HypothesisTestDeliveryOptionLookup.
func (c *HypothesisTestDeliveryOptionLookupClient) Query() *HypothesisTestDeliveryOptionLookupQuery {
	return &HypothesisTestDeliveryOptionLookupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHypothesisTestDeliveryOptionLookup},
		inters: c.Interceptors(),
	}
}

// Get returns a HypothesisTestDeliveryOptionLookup entity by its id.
func (c *HypothesisTestDeliveryOptionLookupClient) Get(ctx context.Context, id pulid.ID) (*HypothesisTestDeliveryOptionLookup, error) {
	return c.Query().Where(hypothesistestdeliveryoptionlookup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HypothesisTestDeliveryOptionLookupClient) GetX(ctx context.Context, id pulid.ID) *HypothesisTestDeliveryOptionLookup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a HypothesisTestDeliveryOptionLookup.
func (c *HypothesisTestDeliveryOptionLookupClient) QueryTenant(htdol *HypothesisTestDeliveryOptionLookup) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionlookup.TenantTable, hypothesistestdeliveryoptionlookup.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(htdol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a HypothesisTestDeliveryOptionLookup.
func (c *HypothesisTestDeliveryOptionLookupClient) QueryDeliveryOption(htdol *HypothesisTestDeliveryOptionLookup) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionlookup.DeliveryOptionTable, hypothesistestdeliveryoptionlookup.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(htdol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionRequest queries the hypothesis_test_delivery_option_request edge of a HypothesisTestDeliveryOptionLookup.
func (c *HypothesisTestDeliveryOptionLookupClient) QueryHypothesisTestDeliveryOptionRequest(htdol *HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable, hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn),
		)
		fromV = sqlgraph.Neighbors(htdol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HypothesisTestDeliveryOptionLookupClient) Hooks() []Hook {
	hooks := c.hooks.HypothesisTestDeliveryOptionLookup
	return append(hooks[:len(hooks):len(hooks)], hypothesistestdeliveryoptionlookup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HypothesisTestDeliveryOptionLookupClient) Interceptors() []Interceptor {
	return c.inters.HypothesisTestDeliveryOptionLookup
}

func (c *HypothesisTestDeliveryOptionLookupClient) mutate(ctx context.Context, m *HypothesisTestDeliveryOptionLookupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HypothesisTestDeliveryOptionLookupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HypothesisTestDeliveryOptionLookupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HypothesisTestDeliveryOptionLookupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HypothesisTestDeliveryOptionLookupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HypothesisTestDeliveryOptionLookup mutation op: %q", m.Op())
	}
}

// HypothesisTestDeliveryOptionRequestClient is a client for the HypothesisTestDeliveryOptionRequest schema.
type HypothesisTestDeliveryOptionRequestClient struct {
	config
}

// NewHypothesisTestDeliveryOptionRequestClient returns a client for the HypothesisTestDeliveryOptionRequest from the given config.
func NewHypothesisTestDeliveryOptionRequestClient(c config) *HypothesisTestDeliveryOptionRequestClient {
	return &HypothesisTestDeliveryOptionRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hypothesistestdeliveryoptionrequest.Hooks(f(g(h())))`.
func (c *HypothesisTestDeliveryOptionRequestClient) Use(hooks ...Hook) {
	c.hooks.HypothesisTestDeliveryOptionRequest = append(c.hooks.HypothesisTestDeliveryOptionRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hypothesistestdeliveryoptionrequest.Intercept(f(g(h())))`.
func (c *HypothesisTestDeliveryOptionRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.HypothesisTestDeliveryOptionRequest = append(c.inters.HypothesisTestDeliveryOptionRequest, interceptors...)
}

// Create returns a builder for creating a HypothesisTestDeliveryOptionRequest entity.
func (c *HypothesisTestDeliveryOptionRequestClient) Create() *HypothesisTestDeliveryOptionRequestCreate {
	mutation := newHypothesisTestDeliveryOptionRequestMutation(c.config, OpCreate)
	return &HypothesisTestDeliveryOptionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HypothesisTestDeliveryOptionRequest entities.
func (c *HypothesisTestDeliveryOptionRequestClient) CreateBulk(builders ...*HypothesisTestDeliveryOptionRequestCreate) *HypothesisTestDeliveryOptionRequestCreateBulk {
	return &HypothesisTestDeliveryOptionRequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HypothesisTestDeliveryOptionRequestClient) MapCreateBulk(slice any, setFunc func(*HypothesisTestDeliveryOptionRequestCreate, int)) *HypothesisTestDeliveryOptionRequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HypothesisTestDeliveryOptionRequestCreateBulk{err: fmt.Errorf("calling to HypothesisTestDeliveryOptionRequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HypothesisTestDeliveryOptionRequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HypothesisTestDeliveryOptionRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) Update() *HypothesisTestDeliveryOptionRequestUpdate {
	mutation := newHypothesisTestDeliveryOptionRequestMutation(c.config, OpUpdate)
	return &HypothesisTestDeliveryOptionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HypothesisTestDeliveryOptionRequestClient) UpdateOne(htdor *HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionRequestUpdateOne {
	mutation := newHypothesisTestDeliveryOptionRequestMutation(c.config, OpUpdateOne, withHypothesisTestDeliveryOptionRequest(htdor))
	return &HypothesisTestDeliveryOptionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HypothesisTestDeliveryOptionRequestClient) UpdateOneID(id pulid.ID) *HypothesisTestDeliveryOptionRequestUpdateOne {
	mutation := newHypothesisTestDeliveryOptionRequestMutation(c.config, OpUpdateOne, withHypothesisTestDeliveryOptionRequestID(id))
	return &HypothesisTestDeliveryOptionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) Delete() *HypothesisTestDeliveryOptionRequestDelete {
	mutation := newHypothesisTestDeliveryOptionRequestMutation(c.config, OpDelete)
	return &HypothesisTestDeliveryOptionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HypothesisTestDeliveryOptionRequestClient) DeleteOne(htdor *HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionRequestDeleteOne {
	return c.DeleteOneID(htdor.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HypothesisTestDeliveryOptionRequestClient) DeleteOneID(id pulid.ID) *HypothesisTestDeliveryOptionRequestDeleteOne {
	builder := c.Delete().Where(hypothesistestdeliveryoptionrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HypothesisTestDeliveryOptionRequestDeleteOne{builder}
}

// Query returns a query builder for HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) Query() *HypothesisTestDeliveryOptionRequestQuery {
	return &HypothesisTestDeliveryOptionRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHypothesisTestDeliveryOptionRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a HypothesisTestDeliveryOptionRequest entity by its id.
func (c *HypothesisTestDeliveryOptionRequestClient) Get(ctx context.Context, id pulid.ID) (*HypothesisTestDeliveryOptionRequest, error) {
	return c.Query().Where(hypothesistestdeliveryoptionrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HypothesisTestDeliveryOptionRequestClient) GetX(ctx context.Context, id pulid.ID) *HypothesisTestDeliveryOptionRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) QueryTenant(htdor *HypothesisTestDeliveryOptionRequest) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdor.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionrequest.TenantTable, hypothesistestdeliveryoptionrequest.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(htdor.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOption queries the hypothesis_test_delivery_option edge of a HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) QueryHypothesisTestDeliveryOption(htdor *HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdor.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(htdor.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) QueryOrder(htdor *HypothesisTestDeliveryOptionRequest) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdor.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, hypothesistestdeliveryoptionrequest.OrderTable, hypothesistestdeliveryoptionrequest.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(htdor.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionLookup queries the hypothesis_test_delivery_option_lookup edge of a HypothesisTestDeliveryOptionRequest.
func (c *HypothesisTestDeliveryOptionRequestClient) QueryHypothesisTestDeliveryOptionLookup(htdor *HypothesisTestDeliveryOptionRequest) *HypothesisTestDeliveryOptionLookupQuery {
	query := (&HypothesisTestDeliveryOptionLookupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := htdor.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoptionlookup.Table, hypothesistestdeliveryoptionlookup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable, hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn),
		)
		fromV = sqlgraph.Neighbors(htdor.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HypothesisTestDeliveryOptionRequestClient) Hooks() []Hook {
	hooks := c.hooks.HypothesisTestDeliveryOptionRequest
	return append(hooks[:len(hooks):len(hooks)], hypothesistestdeliveryoptionrequest.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *HypothesisTestDeliveryOptionRequestClient) Interceptors() []Interceptor {
	return c.inters.HypothesisTestDeliveryOptionRequest
}

func (c *HypothesisTestDeliveryOptionRequestClient) mutate(ctx context.Context, m *HypothesisTestDeliveryOptionRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HypothesisTestDeliveryOptionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HypothesisTestDeliveryOptionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HypothesisTestDeliveryOptionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HypothesisTestDeliveryOptionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HypothesisTestDeliveryOptionRequest mutation op: %q", m.Op())
	}
}

// InventoryItemClient is a client for the InventoryItem schema.
type InventoryItemClient struct {
	config
}

// NewInventoryItemClient returns a client for the InventoryItem from the given config.
func NewInventoryItemClient(c config) *InventoryItemClient {
	return &InventoryItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventoryitem.Hooks(f(g(h())))`.
func (c *InventoryItemClient) Use(hooks ...Hook) {
	c.hooks.InventoryItem = append(c.hooks.InventoryItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inventoryitem.Intercept(f(g(h())))`.
func (c *InventoryItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.InventoryItem = append(c.inters.InventoryItem, interceptors...)
}

// Create returns a builder for creating a InventoryItem entity.
func (c *InventoryItemClient) Create() *InventoryItemCreate {
	mutation := newInventoryItemMutation(c.config, OpCreate)
	return &InventoryItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InventoryItem entities.
func (c *InventoryItemClient) CreateBulk(builders ...*InventoryItemCreate) *InventoryItemCreateBulk {
	return &InventoryItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InventoryItemClient) MapCreateBulk(slice any, setFunc func(*InventoryItemCreate, int)) *InventoryItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InventoryItemCreateBulk{err: fmt.Errorf("calling to InventoryItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InventoryItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InventoryItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InventoryItem.
func (c *InventoryItemClient) Update() *InventoryItemUpdate {
	mutation := newInventoryItemMutation(c.config, OpUpdate)
	return &InventoryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryItemClient) UpdateOne(ii *InventoryItem) *InventoryItemUpdateOne {
	mutation := newInventoryItemMutation(c.config, OpUpdateOne, withInventoryItem(ii))
	return &InventoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryItemClient) UpdateOneID(id pulid.ID) *InventoryItemUpdateOne {
	mutation := newInventoryItemMutation(c.config, OpUpdateOne, withInventoryItemID(id))
	return &InventoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InventoryItem.
func (c *InventoryItemClient) Delete() *InventoryItemDelete {
	mutation := newInventoryItemMutation(c.config, OpDelete)
	return &InventoryItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InventoryItemClient) DeleteOne(ii *InventoryItem) *InventoryItemDeleteOne {
	return c.DeleteOneID(ii.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InventoryItemClient) DeleteOneID(id pulid.ID) *InventoryItemDeleteOne {
	builder := c.Delete().Where(inventoryitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryItemDeleteOne{builder}
}

// Query returns a query builder for InventoryItem.
func (c *InventoryItemClient) Query() *InventoryItemQuery {
	return &InventoryItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInventoryItem},
		inters: c.Interceptors(),
	}
}

// Get returns a InventoryItem entity by its id.
func (c *InventoryItemClient) Get(ctx context.Context, id pulid.ID) (*InventoryItem, error) {
	return c.Query().Where(inventoryitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryItemClient) GetX(ctx context.Context, id pulid.ID) *InventoryItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a InventoryItem.
func (c *InventoryItemClient) QueryTenant(ii *InventoryItem) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inventoryitem.TenantTable, inventoryitem.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountryHarmonizedCode queries the country_harmonized_code edge of a InventoryItem.
func (c *InventoryItemClient) QueryCountryHarmonizedCode(ii *InventoryItem) *CountryHarmonizedCodeQuery {
	query := (&CountryHarmonizedCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, id),
			sqlgraph.To(countryharmonizedcode.Table, countryharmonizedcode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inventoryitem.CountryHarmonizedCodeTable, inventoryitem.CountryHarmonizedCodeColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCountryOfOrigin queries the country_of_origin edge of a InventoryItem.
func (c *InventoryItemClient) QueryCountryOfOrigin(ii *InventoryItem) *CountryQuery {
	query := (&CountryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, id),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inventoryitem.CountryOfOriginTable, inventoryitem.CountryOfOriginColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductVariant queries the product_variant edge of a InventoryItem.
func (c *InventoryItemClient) QueryProductVariant(ii *InventoryItem) *ProductVariantQuery {
	query := (&ProductVariantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ii.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventoryitem.Table, inventoryitem.FieldID, id),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, inventoryitem.ProductVariantTable, inventoryitem.ProductVariantColumn),
		)
		fromV = sqlgraph.Neighbors(ii.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InventoryItemClient) Hooks() []Hook {
	hooks := c.hooks.InventoryItem
	return append(hooks[:len(hooks):len(hooks)], inventoryitem.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *InventoryItemClient) Interceptors() []Interceptor {
	return c.inters.InventoryItem
}

func (c *InventoryItemClient) mutate(ctx context.Context, m *InventoryItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InventoryItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InventoryItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InventoryItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InventoryItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InventoryItem mutation op: %q", m.Op())
	}
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `language.Intercept(f(g(h())))`.
func (c *LanguageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Language = append(c.inters.Language, interceptors...)
}

// Create returns a builder for creating a Language entity.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LanguageClient) MapCreateBulk(slice any, setFunc func(*LanguageCreate, int)) *LanguageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LanguageCreateBulk{err: fmt.Errorf("calling to LanguageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LanguageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id pulid.ID) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LanguageClient) DeleteOneID(id pulid.ID) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLanguage},
		inters: c.Interceptors(),
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id pulid.ID) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id pulid.ID) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Language.
func (c *LanguageClient) QueryUsers(l *Language) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, language.UsersTable, language.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a Language.
func (c *LanguageClient) QueryLanguage(l *Language) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, language.LanguageTable, language.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	hooks := c.hooks.Language
	return append(hooks[:len(hooks):len(hooks)], language.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *LanguageClient) Interceptors() []Interceptor {
	return c.inters.Language
}

func (c *LanguageClient) mutate(ctx context.Context, m *LanguageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Language mutation op: %q", m.Op())
	}
}

// LocationClient is a client for the Location schema.
type LocationClient struct {
	config
}

// NewLocationClient returns a client for the Location from the given config.
func NewLocationClient(c config) *LocationClient {
	return &LocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `location.Hooks(f(g(h())))`.
func (c *LocationClient) Use(hooks ...Hook) {
	c.hooks.Location = append(c.hooks.Location, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `location.Intercept(f(g(h())))`.
func (c *LocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Location = append(c.inters.Location, interceptors...)
}

// Create returns a builder for creating a Location entity.
func (c *LocationClient) Create() *LocationCreate {
	mutation := newLocationMutation(c.config, OpCreate)
	return &LocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Location entities.
func (c *LocationClient) CreateBulk(builders ...*LocationCreate) *LocationCreateBulk {
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocationClient) MapCreateBulk(slice any, setFunc func(*LocationCreate, int)) *LocationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocationCreateBulk{err: fmt.Errorf("calling to LocationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Location.
func (c *LocationClient) Update() *LocationUpdate {
	mutation := newLocationMutation(c.config, OpUpdate)
	return &LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationClient) UpdateOne(l *Location) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocation(l))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationClient) UpdateOneID(id pulid.ID) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocationID(id))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Location.
func (c *LocationClient) Delete() *LocationDelete {
	mutation := newLocationMutation(c.config, OpDelete)
	return &LocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationClient) DeleteOne(l *Location) *LocationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationClient) DeleteOneID(id pulid.ID) *LocationDeleteOne {
	builder := c.Delete().Where(location.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationDeleteOne{builder}
}

// Query returns a query builder for Location.
func (c *LocationClient) Query() *LocationQuery {
	return &LocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a Location entity by its id.
func (c *LocationClient) Get(ctx context.Context, id pulid.ID) (*Location, error) {
	return c.Query().Where(location.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationClient) GetX(ctx context.Context, id pulid.ID) *Location {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Location.
func (c *LocationClient) QueryTenant(l *Location) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, location.TenantTable, location.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddress queries the address edge of a Location.
func (c *LocationClient) QueryAddress(l *Location) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, location.AddressTable, location.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocationTags queries the location_tags edge of a Location.
func (c *LocationClient) QueryLocationTags(l *Location) *LocationTagQuery {
	query := (&LocationTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(locationtag.Table, locationtag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, location.LocationTagsTable, location.LocationTagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySenderConnection queries the sender_connection edge of a Location.
func (c *LocationClient) QuerySenderConnection(l *Location) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.SenderConnectionTable, location.SenderConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPickupConnection queries the pickup_connection edge of a Location.
func (c *LocationClient) QueryPickupConnection(l *Location) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.PickupConnectionTable, location.PickupConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnConnection queries the return_connection edge of a Location.
func (c *LocationClient) QueryReturnConnection(l *Location) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.ReturnConnectionTable, location.ReturnConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerConnection queries the seller_connection edge of a Location.
func (c *LocationClient) QuerySellerConnection(l *Location) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.SellerConnectionTable, location.SellerConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortal queries the return_portal edge of a Location.
func (c *LocationClient) QueryReturnPortal(l *Location) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, location.ReturnPortalTable, location.ReturnPortalPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a Location.
func (c *LocationClient) QueryDeliveryOption(l *Location) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, location.DeliveryOptionTable, location.DeliveryOptionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a Location.
func (c *LocationClient) QueryColli(l *Location) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.ColliTable, location.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationClient) Hooks() []Hook {
	hooks := c.hooks.Location
	return append(hooks[:len(hooks):len(hooks)], location.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *LocationClient) Interceptors() []Interceptor {
	return c.inters.Location
}

func (c *LocationClient) mutate(ctx context.Context, m *LocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Location mutation op: %q", m.Op())
	}
}

// LocationTagClient is a client for the LocationTag schema.
type LocationTagClient struct {
	config
}

// NewLocationTagClient returns a client for the LocationTag from the given config.
func NewLocationTagClient(c config) *LocationTagClient {
	return &LocationTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `locationtag.Hooks(f(g(h())))`.
func (c *LocationTagClient) Use(hooks ...Hook) {
	c.hooks.LocationTag = append(c.hooks.LocationTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `locationtag.Intercept(f(g(h())))`.
func (c *LocationTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.LocationTag = append(c.inters.LocationTag, interceptors...)
}

// Create returns a builder for creating a LocationTag entity.
func (c *LocationTagClient) Create() *LocationTagCreate {
	mutation := newLocationTagMutation(c.config, OpCreate)
	return &LocationTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocationTag entities.
func (c *LocationTagClient) CreateBulk(builders ...*LocationTagCreate) *LocationTagCreateBulk {
	return &LocationTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocationTagClient) MapCreateBulk(slice any, setFunc func(*LocationTagCreate, int)) *LocationTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocationTagCreateBulk{err: fmt.Errorf("calling to LocationTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocationTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocationTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocationTag.
func (c *LocationTagClient) Update() *LocationTagUpdate {
	mutation := newLocationTagMutation(c.config, OpUpdate)
	return &LocationTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationTagClient) UpdateOne(lt *LocationTag) *LocationTagUpdateOne {
	mutation := newLocationTagMutation(c.config, OpUpdateOne, withLocationTag(lt))
	return &LocationTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationTagClient) UpdateOneID(id pulid.ID) *LocationTagUpdateOne {
	mutation := newLocationTagMutation(c.config, OpUpdateOne, withLocationTagID(id))
	return &LocationTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocationTag.
func (c *LocationTagClient) Delete() *LocationTagDelete {
	mutation := newLocationTagMutation(c.config, OpDelete)
	return &LocationTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationTagClient) DeleteOne(lt *LocationTag) *LocationTagDeleteOne {
	return c.DeleteOneID(lt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationTagClient) DeleteOneID(id pulid.ID) *LocationTagDeleteOne {
	builder := c.Delete().Where(locationtag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationTagDeleteOne{builder}
}

// Query returns a query builder for LocationTag.
func (c *LocationTagClient) Query() *LocationTagQuery {
	return &LocationTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocationTag},
		inters: c.Interceptors(),
	}
}

// Get returns a LocationTag entity by its id.
func (c *LocationTagClient) Get(ctx context.Context, id pulid.ID) (*LocationTag, error) {
	return c.Query().Where(locationtag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationTagClient) GetX(ctx context.Context, id pulid.ID) *LocationTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLocation queries the location edge of a LocationTag.
func (c *LocationTagClient) QueryLocation(lt *LocationTag) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := lt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(locationtag.Table, locationtag.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, locationtag.LocationTable, locationtag.LocationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(lt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationTagClient) Hooks() []Hook {
	hooks := c.hooks.LocationTag
	return append(hooks[:len(hooks):len(hooks)], locationtag.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *LocationTagClient) Interceptors() []Interceptor {
	return c.inters.LocationTag
}

func (c *LocationTagClient) mutate(ctx context.Context, m *LocationTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LocationTag mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationClient) MapCreateBulk(slice any, setFunc func(*NotificationCreate, int)) *NotificationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationCreateBulk{err: fmt.Errorf("calling to NotificationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id pulid.ID) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id pulid.ID) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id pulid.ID) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id pulid.ID) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Notification.
func (c *NotificationClient) QueryTenant(n *Notification) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notification.TenantTable, notification.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnection queries the connection edge of a Notification.
func (c *NotificationClient) QueryConnection(n *Notification) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notification.ConnectionTable, notification.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailTemplate queries the email_template edge of a Notification.
func (c *NotificationClient) QueryEmailTemplate(n *Notification) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, notification.EmailTemplateTable, notification.EmailTemplateColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	hooks := c.hooks.Notification
	return append(hooks[:len(hooks):len(hooks)], notification.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// OTKRequestsClient is a client for the OTKRequests schema.
type OTKRequestsClient struct {
	config
}

// NewOTKRequestsClient returns a client for the OTKRequests from the given config.
func NewOTKRequestsClient(c config) *OTKRequestsClient {
	return &OTKRequestsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `otkrequests.Hooks(f(g(h())))`.
func (c *OTKRequestsClient) Use(hooks ...Hook) {
	c.hooks.OTKRequests = append(c.hooks.OTKRequests, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `otkrequests.Intercept(f(g(h())))`.
func (c *OTKRequestsClient) Intercept(interceptors ...Interceptor) {
	c.inters.OTKRequests = append(c.inters.OTKRequests, interceptors...)
}

// Create returns a builder for creating a OTKRequests entity.
func (c *OTKRequestsClient) Create() *OTKRequestsCreate {
	mutation := newOTKRequestsMutation(c.config, OpCreate)
	return &OTKRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OTKRequests entities.
func (c *OTKRequestsClient) CreateBulk(builders ...*OTKRequestsCreate) *OTKRequestsCreateBulk {
	return &OTKRequestsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OTKRequestsClient) MapCreateBulk(slice any, setFunc func(*OTKRequestsCreate, int)) *OTKRequestsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OTKRequestsCreateBulk{err: fmt.Errorf("calling to OTKRequestsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OTKRequestsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OTKRequestsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OTKRequests.
func (c *OTKRequestsClient) Update() *OTKRequestsUpdate {
	mutation := newOTKRequestsMutation(c.config, OpUpdate)
	return &OTKRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OTKRequestsClient) UpdateOne(or *OTKRequests) *OTKRequestsUpdateOne {
	mutation := newOTKRequestsMutation(c.config, OpUpdateOne, withOTKRequests(or))
	return &OTKRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OTKRequestsClient) UpdateOneID(id pulid.ID) *OTKRequestsUpdateOne {
	mutation := newOTKRequestsMutation(c.config, OpUpdateOne, withOTKRequestsID(id))
	return &OTKRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OTKRequests.
func (c *OTKRequestsClient) Delete() *OTKRequestsDelete {
	mutation := newOTKRequestsMutation(c.config, OpDelete)
	return &OTKRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OTKRequestsClient) DeleteOne(or *OTKRequests) *OTKRequestsDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OTKRequestsClient) DeleteOneID(id pulid.ID) *OTKRequestsDeleteOne {
	builder := c.Delete().Where(otkrequests.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OTKRequestsDeleteOne{builder}
}

// Query returns a query builder for OTKRequests.
func (c *OTKRequestsClient) Query() *OTKRequestsQuery {
	return &OTKRequestsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOTKRequests},
		inters: c.Interceptors(),
	}
}

// Get returns a OTKRequests entity by its id.
func (c *OTKRequestsClient) Get(ctx context.Context, id pulid.ID) (*OTKRequests, error) {
	return c.Query().Where(otkrequests.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OTKRequestsClient) GetX(ctx context.Context, id pulid.ID) *OTKRequests {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a OTKRequests.
func (c *OTKRequestsClient) QueryTenant(or *OTKRequests) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(otkrequests.Table, otkrequests.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, otkrequests.TenantTable, otkrequests.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a OTKRequests.
func (c *OTKRequestsClient) QueryUsers(or *OTKRequests) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(otkrequests.Table, otkrequests.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, otkrequests.UsersTable, otkrequests.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OTKRequestsClient) Hooks() []Hook {
	hooks := c.hooks.OTKRequests
	return append(hooks[:len(hooks):len(hooks)], otkrequests.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OTKRequestsClient) Interceptors() []Interceptor {
	return c.inters.OTKRequests
}

func (c *OTKRequestsClient) mutate(ctx context.Context, m *OTKRequestsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OTKRequestsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OTKRequestsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OTKRequestsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OTKRequestsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OTKRequests mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id pulid.ID) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id pulid.ID) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id pulid.ID) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id pulid.ID) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Order.
func (c *OrderClient) QueryTenant(o *Order) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.TenantTable, order.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderHistory queries the order_history edge of a Order.
func (c *OrderClient) QueryOrderHistory(o *Order) *OrderHistoryQuery {
	query := (&OrderHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderhistory.Table, orderhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderHistoryTable, order.OrderHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnection queries the connection edge of a Order.
func (c *OrderClient) QueryConnection(o *Order) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ConnectionTable, order.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a Order.
func (c *OrderClient) QueryColli(o *Order) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ColliTable, order.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColli queries the return_colli edge of a Order.
func (c *OrderClient) QueryReturnColli(o *Order) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ReturnColliTable, order.ReturnColliColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionRequest queries the hypothesis_test_delivery_option_request edge of a Order.
func (c *OrderClient) QueryHypothesisTestDeliveryOptionRequest(o *Order) *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, order.HypothesisTestDeliveryOptionRequestTable, order.HypothesisTestDeliveryOptionRequestColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPallet queries the pallet edge of a Order.
func (c *OrderClient) QueryPallet(o *Order) *PalletQuery {
	query := (&PalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.PalletTable, order.PalletColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConsolidation queries the consolidation edge of a Order.
func (c *OrderClient) QueryConsolidation(o *Order) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ConsolidationTable, order.ConsolidationColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], order.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	inters := c.inters.Order
	return append(inters[:len(inters):len(inters)], order.Interceptors[:]...)
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderHistoryClient is a client for the OrderHistory schema.
type OrderHistoryClient struct {
	config
}

// NewOrderHistoryClient returns a client for the OrderHistory from the given config.
func NewOrderHistoryClient(c config) *OrderHistoryClient {
	return &OrderHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderhistory.Hooks(f(g(h())))`.
func (c *OrderHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrderHistory = append(c.hooks.OrderHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderhistory.Intercept(f(g(h())))`.
func (c *OrderHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderHistory = append(c.inters.OrderHistory, interceptors...)
}

// Create returns a builder for creating a OrderHistory entity.
func (c *OrderHistoryClient) Create() *OrderHistoryCreate {
	mutation := newOrderHistoryMutation(c.config, OpCreate)
	return &OrderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderHistory entities.
func (c *OrderHistoryClient) CreateBulk(builders ...*OrderHistoryCreate) *OrderHistoryCreateBulk {
	return &OrderHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderHistoryClient) MapCreateBulk(slice any, setFunc func(*OrderHistoryCreate, int)) *OrderHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderHistoryCreateBulk{err: fmt.Errorf("calling to OrderHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderHistory.
func (c *OrderHistoryClient) Update() *OrderHistoryUpdate {
	mutation := newOrderHistoryMutation(c.config, OpUpdate)
	return &OrderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderHistoryClient) UpdateOne(oh *OrderHistory) *OrderHistoryUpdateOne {
	mutation := newOrderHistoryMutation(c.config, OpUpdateOne, withOrderHistory(oh))
	return &OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderHistoryClient) UpdateOneID(id pulid.ID) *OrderHistoryUpdateOne {
	mutation := newOrderHistoryMutation(c.config, OpUpdateOne, withOrderHistoryID(id))
	return &OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderHistory.
func (c *OrderHistoryClient) Delete() *OrderHistoryDelete {
	mutation := newOrderHistoryMutation(c.config, OpDelete)
	return &OrderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderHistoryClient) DeleteOne(oh *OrderHistory) *OrderHistoryDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderHistoryClient) DeleteOneID(id pulid.ID) *OrderHistoryDeleteOne {
	builder := c.Delete().Where(orderhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderHistoryDeleteOne{builder}
}

// Query returns a query builder for OrderHistory.
func (c *OrderHistoryClient) Query() *OrderHistoryQuery {
	return &OrderHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderHistory entity by its id.
func (c *OrderHistoryClient) Get(ctx context.Context, id pulid.ID) (*OrderHistory, error) {
	return c.Query().Where(orderhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderHistoryClient) GetX(ctx context.Context, id pulid.ID) *OrderHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChangeHistory queries the change_history edge of a OrderHistory.
func (c *OrderHistoryClient) QueryChangeHistory(oh *OrderHistory) *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderhistory.ChangeHistoryTable, orderhistory.ChangeHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a OrderHistory.
func (c *OrderHistoryClient) QueryTenant(oh *OrderHistory) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderhistory.TenantTable, orderhistory.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a OrderHistory.
func (c *OrderHistoryClient) QueryOrder(oh *OrderHistory) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderhistory.Table, orderhistory.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderhistory.OrderTable, orderhistory.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(oh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderHistoryClient) Hooks() []Hook {
	hooks := c.hooks.OrderHistory
	return append(hooks[:len(hooks):len(hooks)], orderhistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrderHistory
}

func (c *OrderHistoryClient) mutate(ctx context.Context, m *OrderHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderHistory mutation op: %q", m.Op())
	}
}

// OrderLineClient is a client for the OrderLine schema.
type OrderLineClient struct {
	config
}

// NewOrderLineClient returns a client for the OrderLine from the given config.
func NewOrderLineClient(c config) *OrderLineClient {
	return &OrderLineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderline.Hooks(f(g(h())))`.
func (c *OrderLineClient) Use(hooks ...Hook) {
	c.hooks.OrderLine = append(c.hooks.OrderLine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderline.Intercept(f(g(h())))`.
func (c *OrderLineClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderLine = append(c.inters.OrderLine, interceptors...)
}

// Create returns a builder for creating a OrderLine entity.
func (c *OrderLineClient) Create() *OrderLineCreate {
	mutation := newOrderLineMutation(c.config, OpCreate)
	return &OrderLineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderLine entities.
func (c *OrderLineClient) CreateBulk(builders ...*OrderLineCreate) *OrderLineCreateBulk {
	return &OrderLineCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderLineClient) MapCreateBulk(slice any, setFunc func(*OrderLineCreate, int)) *OrderLineCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderLineCreateBulk{err: fmt.Errorf("calling to OrderLineClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderLineCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderLineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderLine.
func (c *OrderLineClient) Update() *OrderLineUpdate {
	mutation := newOrderLineMutation(c.config, OpUpdate)
	return &OrderLineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderLineClient) UpdateOne(ol *OrderLine) *OrderLineUpdateOne {
	mutation := newOrderLineMutation(c.config, OpUpdateOne, withOrderLine(ol))
	return &OrderLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderLineClient) UpdateOneID(id pulid.ID) *OrderLineUpdateOne {
	mutation := newOrderLineMutation(c.config, OpUpdateOne, withOrderLineID(id))
	return &OrderLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderLine.
func (c *OrderLineClient) Delete() *OrderLineDelete {
	mutation := newOrderLineMutation(c.config, OpDelete)
	return &OrderLineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderLineClient) DeleteOne(ol *OrderLine) *OrderLineDeleteOne {
	return c.DeleteOneID(ol.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderLineClient) DeleteOneID(id pulid.ID) *OrderLineDeleteOne {
	builder := c.Delete().Where(orderline.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderLineDeleteOne{builder}
}

// Query returns a query builder for OrderLine.
func (c *OrderLineClient) Query() *OrderLineQuery {
	return &OrderLineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderLine},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderLine entity by its id.
func (c *OrderLineClient) Get(ctx context.Context, id pulid.ID) (*OrderLine, error) {
	return c.Query().Where(orderline.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderLineClient) GetX(ctx context.Context, id pulid.ID) *OrderLine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a OrderLine.
func (c *OrderLineClient) QueryTenant(ol *OrderLine) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderline.TenantTable, orderline.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductVariant queries the product_variant edge of a OrderLine.
func (c *OrderLineClient) QueryProductVariant(ol *OrderLine) *ProductVariantQuery {
	query := (&ProductVariantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, id),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderline.ProductVariantTable, orderline.ProductVariantColumn),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a OrderLine.
func (c *OrderLineClient) QueryColli(ol *OrderLine) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderline.ColliTable, orderline.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnOrderLine queries the return_order_line edge of a OrderLine.
func (c *OrderLineClient) QueryReturnOrderLine(ol *OrderLine) *ReturnOrderLineQuery {
	query := (&ReturnOrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, id),
			sqlgraph.To(returnorderline.Table, returnorderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, orderline.ReturnOrderLineTable, orderline.ReturnOrderLineColumn),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrency queries the currency edge of a OrderLine.
func (c *OrderLineClient) QueryCurrency(ol *OrderLine) *CurrencyQuery {
	query := (&CurrencyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderline.Table, orderline.FieldID, id),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, orderline.CurrencyTable, orderline.CurrencyColumn),
		)
		fromV = sqlgraph.Neighbors(ol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderLineClient) Hooks() []Hook {
	hooks := c.hooks.OrderLine
	return append(hooks[:len(hooks):len(hooks)], orderline.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderLineClient) Interceptors() []Interceptor {
	return c.inters.OrderLine
}

func (c *OrderLineClient) mutate(ctx context.Context, m *OrderLineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderLineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderLineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderLineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderLine mutation op: %q", m.Op())
	}
}

// OrderSenderClient is a client for the OrderSender schema.
type OrderSenderClient struct {
	config
}

// NewOrderSenderClient returns a client for the OrderSender from the given config.
func NewOrderSenderClient(c config) *OrderSenderClient {
	return &OrderSenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ordersender.Hooks(f(g(h())))`.
func (c *OrderSenderClient) Use(hooks ...Hook) {
	c.hooks.OrderSender = append(c.hooks.OrderSender, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ordersender.Intercept(f(g(h())))`.
func (c *OrderSenderClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderSender = append(c.inters.OrderSender, interceptors...)
}

// Create returns a builder for creating a OrderSender entity.
func (c *OrderSenderClient) Create() *OrderSenderCreate {
	mutation := newOrderSenderMutation(c.config, OpCreate)
	return &OrderSenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderSender entities.
func (c *OrderSenderClient) CreateBulk(builders ...*OrderSenderCreate) *OrderSenderCreateBulk {
	return &OrderSenderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderSenderClient) MapCreateBulk(slice any, setFunc func(*OrderSenderCreate, int)) *OrderSenderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderSenderCreateBulk{err: fmt.Errorf("calling to OrderSenderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderSenderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderSenderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderSender.
func (c *OrderSenderClient) Update() *OrderSenderUpdate {
	mutation := newOrderSenderMutation(c.config, OpUpdate)
	return &OrderSenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderSenderClient) UpdateOne(os *OrderSender) *OrderSenderUpdateOne {
	mutation := newOrderSenderMutation(c.config, OpUpdateOne, withOrderSender(os))
	return &OrderSenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderSenderClient) UpdateOneID(id pulid.ID) *OrderSenderUpdateOne {
	mutation := newOrderSenderMutation(c.config, OpUpdateOne, withOrderSenderID(id))
	return &OrderSenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderSender.
func (c *OrderSenderClient) Delete() *OrderSenderDelete {
	mutation := newOrderSenderMutation(c.config, OpDelete)
	return &OrderSenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderSenderClient) DeleteOne(os *OrderSender) *OrderSenderDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderSenderClient) DeleteOneID(id pulid.ID) *OrderSenderDeleteOne {
	builder := c.Delete().Where(ordersender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderSenderDeleteOne{builder}
}

// Query returns a query builder for OrderSender.
func (c *OrderSenderClient) Query() *OrderSenderQuery {
	return &OrderSenderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderSender},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderSender entity by its id.
func (c *OrderSenderClient) Get(ctx context.Context, id pulid.ID) (*OrderSender, error) {
	return c.Query().Where(ordersender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderSenderClient) GetX(ctx context.Context, id pulid.ID) *OrderSender {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a OrderSender.
func (c *OrderSenderClient) QueryTenant(os *OrderSender) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ordersender.Table, ordersender.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ordersender.TenantTable, ordersender.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderSenderClient) Hooks() []Hook {
	hooks := c.hooks.OrderSender
	return append(hooks[:len(hooks):len(hooks)], ordersender.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderSenderClient) Interceptors() []Interceptor {
	return c.inters.OrderSender
}

func (c *OrderSenderClient) mutate(ctx context.Context, m *OrderSenderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderSenderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderSenderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderSenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderSenderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderSender mutation op: %q", m.Op())
	}
}

// PackagingClient is a client for the Packaging schema.
type PackagingClient struct {
	config
}

// NewPackagingClient returns a client for the Packaging from the given config.
func NewPackagingClient(c config) *PackagingClient {
	return &PackagingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `packaging.Hooks(f(g(h())))`.
func (c *PackagingClient) Use(hooks ...Hook) {
	c.hooks.Packaging = append(c.hooks.Packaging, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `packaging.Intercept(f(g(h())))`.
func (c *PackagingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Packaging = append(c.inters.Packaging, interceptors...)
}

// Create returns a builder for creating a Packaging entity.
func (c *PackagingClient) Create() *PackagingCreate {
	mutation := newPackagingMutation(c.config, OpCreate)
	return &PackagingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Packaging entities.
func (c *PackagingClient) CreateBulk(builders ...*PackagingCreate) *PackagingCreateBulk {
	return &PackagingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PackagingClient) MapCreateBulk(slice any, setFunc func(*PackagingCreate, int)) *PackagingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PackagingCreateBulk{err: fmt.Errorf("calling to PackagingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PackagingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PackagingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Packaging.
func (c *PackagingClient) Update() *PackagingUpdate {
	mutation := newPackagingMutation(c.config, OpUpdate)
	return &PackagingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PackagingClient) UpdateOne(pa *Packaging) *PackagingUpdateOne {
	mutation := newPackagingMutation(c.config, OpUpdateOne, withPackaging(pa))
	return &PackagingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PackagingClient) UpdateOneID(id pulid.ID) *PackagingUpdateOne {
	mutation := newPackagingMutation(c.config, OpUpdateOne, withPackagingID(id))
	return &PackagingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Packaging.
func (c *PackagingClient) Delete() *PackagingDelete {
	mutation := newPackagingMutation(c.config, OpDelete)
	return &PackagingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PackagingClient) DeleteOne(pa *Packaging) *PackagingDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PackagingClient) DeleteOneID(id pulid.ID) *PackagingDeleteOne {
	builder := c.Delete().Where(packaging.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PackagingDeleteOne{builder}
}

// Query returns a query builder for Packaging.
func (c *PackagingClient) Query() *PackagingQuery {
	return &PackagingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePackaging},
		inters: c.Interceptors(),
	}
}

// Get returns a Packaging entity by its id.
func (c *PackagingClient) Get(ctx context.Context, id pulid.ID) (*Packaging, error) {
	return c.Query().Where(packaging.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PackagingClient) GetX(ctx context.Context, id pulid.ID) *Packaging {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Packaging.
func (c *PackagingClient) QueryTenant(pa *Packaging) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packaging.TenantTable, packaging.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentParcel queries the shipment_parcel edge of a Packaging.
func (c *PackagingClient) QueryShipmentParcel(pa *Packaging) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.ShipmentParcelTable, packaging.ShipmentParcelColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPallet queries the pallet edge of a Packaging.
func (c *PackagingClient) QueryPallet(pa *Packaging) *PalletQuery {
	query := (&PalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.PalletTable, packaging.PalletColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a Packaging.
func (c *PackagingClient) QueryColli(pa *Packaging) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.ColliTable, packaging.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColli queries the return_colli edge of a Packaging.
func (c *PackagingClient) QueryReturnColli(pa *Packaging) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.ReturnColliTable, packaging.ReturnColliColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackagingDF queries the packaging_df edge of a Packaging.
func (c *PackagingClient) QueryPackagingDF(pa *Packaging) *PackagingDFQuery {
	query := (&PackagingDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(packagingdf.Table, packagingdf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, packaging.PackagingDFTable, packaging.PackagingDFColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackagingUSPS queries the packaging_usps edge of a Packaging.
func (c *PackagingClient) QueryPackagingUSPS(pa *Packaging) *PackagingUSPSQuery {
	query := (&PackagingUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(packagingusps.Table, packagingusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, packaging.PackagingUSPSTable, packaging.PackagingUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierBrand queries the carrier_brand edge of a Packaging.
func (c *PackagingClient) QueryCarrierBrand(pa *Packaging) *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packaging.CarrierBrandTable, packaging.CarrierBrandColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a Packaging.
func (c *PackagingClient) QueryDeliveryOption(pa *Packaging) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaging.Table, packaging.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaging.DeliveryOptionTable, packaging.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PackagingClient) Hooks() []Hook {
	hooks := c.hooks.Packaging
	return append(hooks[:len(hooks):len(hooks)], packaging.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PackagingClient) Interceptors() []Interceptor {
	inters := c.inters.Packaging
	return append(inters[:len(inters):len(inters)], packaging.Interceptors[:]...)
}

func (c *PackagingClient) mutate(ctx context.Context, m *PackagingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PackagingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PackagingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PackagingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PackagingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Packaging mutation op: %q", m.Op())
	}
}

// PackagingDFClient is a client for the PackagingDF schema.
type PackagingDFClient struct {
	config
}

// NewPackagingDFClient returns a client for the PackagingDF from the given config.
func NewPackagingDFClient(c config) *PackagingDFClient {
	return &PackagingDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `packagingdf.Hooks(f(g(h())))`.
func (c *PackagingDFClient) Use(hooks ...Hook) {
	c.hooks.PackagingDF = append(c.hooks.PackagingDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `packagingdf.Intercept(f(g(h())))`.
func (c *PackagingDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.PackagingDF = append(c.inters.PackagingDF, interceptors...)
}

// Create returns a builder for creating a PackagingDF entity.
func (c *PackagingDFClient) Create() *PackagingDFCreate {
	mutation := newPackagingDFMutation(c.config, OpCreate)
	return &PackagingDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PackagingDF entities.
func (c *PackagingDFClient) CreateBulk(builders ...*PackagingDFCreate) *PackagingDFCreateBulk {
	return &PackagingDFCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PackagingDFClient) MapCreateBulk(slice any, setFunc func(*PackagingDFCreate, int)) *PackagingDFCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PackagingDFCreateBulk{err: fmt.Errorf("calling to PackagingDFClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PackagingDFCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PackagingDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PackagingDF.
func (c *PackagingDFClient) Update() *PackagingDFUpdate {
	mutation := newPackagingDFMutation(c.config, OpUpdate)
	return &PackagingDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PackagingDFClient) UpdateOne(pd *PackagingDF) *PackagingDFUpdateOne {
	mutation := newPackagingDFMutation(c.config, OpUpdateOne, withPackagingDF(pd))
	return &PackagingDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PackagingDFClient) UpdateOneID(id pulid.ID) *PackagingDFUpdateOne {
	mutation := newPackagingDFMutation(c.config, OpUpdateOne, withPackagingDFID(id))
	return &PackagingDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PackagingDF.
func (c *PackagingDFClient) Delete() *PackagingDFDelete {
	mutation := newPackagingDFMutation(c.config, OpDelete)
	return &PackagingDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PackagingDFClient) DeleteOne(pd *PackagingDF) *PackagingDFDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PackagingDFClient) DeleteOneID(id pulid.ID) *PackagingDFDeleteOne {
	builder := c.Delete().Where(packagingdf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PackagingDFDeleteOne{builder}
}

// Query returns a query builder for PackagingDF.
func (c *PackagingDFClient) Query() *PackagingDFQuery {
	return &PackagingDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePackagingDF},
		inters: c.Interceptors(),
	}
}

// Get returns a PackagingDF entity by its id.
func (c *PackagingDFClient) Get(ctx context.Context, id pulid.ID) (*PackagingDF, error) {
	return c.Query().Where(packagingdf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PackagingDFClient) GetX(ctx context.Context, id pulid.ID) *PackagingDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a PackagingDF.
func (c *PackagingDFClient) QueryTenant(pd *PackagingDF) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingdf.Table, packagingdf.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingdf.TenantTable, packagingdf.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a PackagingDF.
func (c *PackagingDFClient) QueryPackaging(pd *PackagingDF) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingdf.Table, packagingdf.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, packagingdf.PackagingTable, packagingdf.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(pd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PackagingDFClient) Hooks() []Hook {
	hooks := c.hooks.PackagingDF
	return append(hooks[:len(hooks):len(hooks)], packagingdf.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PackagingDFClient) Interceptors() []Interceptor {
	return c.inters.PackagingDF
}

func (c *PackagingDFClient) mutate(ctx context.Context, m *PackagingDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PackagingDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PackagingDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PackagingDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PackagingDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PackagingDF mutation op: %q", m.Op())
	}
}

// PackagingUSPSClient is a client for the PackagingUSPS schema.
type PackagingUSPSClient struct {
	config
}

// NewPackagingUSPSClient returns a client for the PackagingUSPS from the given config.
func NewPackagingUSPSClient(c config) *PackagingUSPSClient {
	return &PackagingUSPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `packagingusps.Hooks(f(g(h())))`.
func (c *PackagingUSPSClient) Use(hooks ...Hook) {
	c.hooks.PackagingUSPS = append(c.hooks.PackagingUSPS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `packagingusps.Intercept(f(g(h())))`.
func (c *PackagingUSPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.PackagingUSPS = append(c.inters.PackagingUSPS, interceptors...)
}

// Create returns a builder for creating a PackagingUSPS entity.
func (c *PackagingUSPSClient) Create() *PackagingUSPSCreate {
	mutation := newPackagingUSPSMutation(c.config, OpCreate)
	return &PackagingUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PackagingUSPS entities.
func (c *PackagingUSPSClient) CreateBulk(builders ...*PackagingUSPSCreate) *PackagingUSPSCreateBulk {
	return &PackagingUSPSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PackagingUSPSClient) MapCreateBulk(slice any, setFunc func(*PackagingUSPSCreate, int)) *PackagingUSPSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PackagingUSPSCreateBulk{err: fmt.Errorf("calling to PackagingUSPSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PackagingUSPSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PackagingUSPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PackagingUSPS.
func (c *PackagingUSPSClient) Update() *PackagingUSPSUpdate {
	mutation := newPackagingUSPSMutation(c.config, OpUpdate)
	return &PackagingUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PackagingUSPSClient) UpdateOne(pu *PackagingUSPS) *PackagingUSPSUpdateOne {
	mutation := newPackagingUSPSMutation(c.config, OpUpdateOne, withPackagingUSPS(pu))
	return &PackagingUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PackagingUSPSClient) UpdateOneID(id pulid.ID) *PackagingUSPSUpdateOne {
	mutation := newPackagingUSPSMutation(c.config, OpUpdateOne, withPackagingUSPSID(id))
	return &PackagingUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PackagingUSPS.
func (c *PackagingUSPSClient) Delete() *PackagingUSPSDelete {
	mutation := newPackagingUSPSMutation(c.config, OpDelete)
	return &PackagingUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PackagingUSPSClient) DeleteOne(pu *PackagingUSPS) *PackagingUSPSDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PackagingUSPSClient) DeleteOneID(id pulid.ID) *PackagingUSPSDeleteOne {
	builder := c.Delete().Where(packagingusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PackagingUSPSDeleteOne{builder}
}

// Query returns a query builder for PackagingUSPS.
func (c *PackagingUSPSClient) Query() *PackagingUSPSQuery {
	return &PackagingUSPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePackagingUSPS},
		inters: c.Interceptors(),
	}
}

// Get returns a PackagingUSPS entity by its id.
func (c *PackagingUSPSClient) Get(ctx context.Context, id pulid.ID) (*PackagingUSPS, error) {
	return c.Query().Where(packagingusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PackagingUSPSClient) GetX(ctx context.Context, id pulid.ID) *PackagingUSPS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a PackagingUSPS.
func (c *PackagingUSPSClient) QueryTenant(pu *PackagingUSPS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingusps.TenantTable, packagingusps.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a PackagingUSPS.
func (c *PackagingUSPSClient) QueryPackaging(pu *PackagingUSPS) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, packagingusps.PackagingTable, packagingusps.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackagingUSPSRateIndicator queries the packaging_usps_rate_indicator edge of a PackagingUSPS.
func (c *PackagingUSPSClient) QueryPackagingUSPSRateIndicator(pu *PackagingUSPS) *PackagingUSPSRateIndicatorQuery {
	query := (&PackagingUSPSRateIndicatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, id),
			sqlgraph.To(packaginguspsrateindicator.Table, packaginguspsrateindicator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingusps.PackagingUSPSRateIndicatorTable, packagingusps.PackagingUSPSRateIndicatorColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackagingUSPSProcessingCategory queries the packaging_usps_processing_category edge of a PackagingUSPS.
func (c *PackagingUSPSClient) QueryPackagingUSPSProcessingCategory(pu *PackagingUSPS) *PackagingUSPSProcessingCategoryQuery {
	query := (&PackagingUSPSProcessingCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packagingusps.Table, packagingusps.FieldID, id),
			sqlgraph.To(packaginguspsprocessingcategory.Table, packaginguspsprocessingcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, packagingusps.PackagingUSPSProcessingCategoryTable, packagingusps.PackagingUSPSProcessingCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PackagingUSPSClient) Hooks() []Hook {
	hooks := c.hooks.PackagingUSPS
	return append(hooks[:len(hooks):len(hooks)], packagingusps.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PackagingUSPSClient) Interceptors() []Interceptor {
	return c.inters.PackagingUSPS
}

func (c *PackagingUSPSClient) mutate(ctx context.Context, m *PackagingUSPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PackagingUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PackagingUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PackagingUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PackagingUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PackagingUSPS mutation op: %q", m.Op())
	}
}

// PackagingUSPSProcessingCategoryClient is a client for the PackagingUSPSProcessingCategory schema.
type PackagingUSPSProcessingCategoryClient struct {
	config
}

// NewPackagingUSPSProcessingCategoryClient returns a client for the PackagingUSPSProcessingCategory from the given config.
func NewPackagingUSPSProcessingCategoryClient(c config) *PackagingUSPSProcessingCategoryClient {
	return &PackagingUSPSProcessingCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `packaginguspsprocessingcategory.Hooks(f(g(h())))`.
func (c *PackagingUSPSProcessingCategoryClient) Use(hooks ...Hook) {
	c.hooks.PackagingUSPSProcessingCategory = append(c.hooks.PackagingUSPSProcessingCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `packaginguspsprocessingcategory.Intercept(f(g(h())))`.
func (c *PackagingUSPSProcessingCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PackagingUSPSProcessingCategory = append(c.inters.PackagingUSPSProcessingCategory, interceptors...)
}

// Create returns a builder for creating a PackagingUSPSProcessingCategory entity.
func (c *PackagingUSPSProcessingCategoryClient) Create() *PackagingUSPSProcessingCategoryCreate {
	mutation := newPackagingUSPSProcessingCategoryMutation(c.config, OpCreate)
	return &PackagingUSPSProcessingCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PackagingUSPSProcessingCategory entities.
func (c *PackagingUSPSProcessingCategoryClient) CreateBulk(builders ...*PackagingUSPSProcessingCategoryCreate) *PackagingUSPSProcessingCategoryCreateBulk {
	return &PackagingUSPSProcessingCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PackagingUSPSProcessingCategoryClient) MapCreateBulk(slice any, setFunc func(*PackagingUSPSProcessingCategoryCreate, int)) *PackagingUSPSProcessingCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PackagingUSPSProcessingCategoryCreateBulk{err: fmt.Errorf("calling to PackagingUSPSProcessingCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PackagingUSPSProcessingCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PackagingUSPSProcessingCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PackagingUSPSProcessingCategory.
func (c *PackagingUSPSProcessingCategoryClient) Update() *PackagingUSPSProcessingCategoryUpdate {
	mutation := newPackagingUSPSProcessingCategoryMutation(c.config, OpUpdate)
	return &PackagingUSPSProcessingCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PackagingUSPSProcessingCategoryClient) UpdateOne(pupc *PackagingUSPSProcessingCategory) *PackagingUSPSProcessingCategoryUpdateOne {
	mutation := newPackagingUSPSProcessingCategoryMutation(c.config, OpUpdateOne, withPackagingUSPSProcessingCategory(pupc))
	return &PackagingUSPSProcessingCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PackagingUSPSProcessingCategoryClient) UpdateOneID(id pulid.ID) *PackagingUSPSProcessingCategoryUpdateOne {
	mutation := newPackagingUSPSProcessingCategoryMutation(c.config, OpUpdateOne, withPackagingUSPSProcessingCategoryID(id))
	return &PackagingUSPSProcessingCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PackagingUSPSProcessingCategory.
func (c *PackagingUSPSProcessingCategoryClient) Delete() *PackagingUSPSProcessingCategoryDelete {
	mutation := newPackagingUSPSProcessingCategoryMutation(c.config, OpDelete)
	return &PackagingUSPSProcessingCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PackagingUSPSProcessingCategoryClient) DeleteOne(pupc *PackagingUSPSProcessingCategory) *PackagingUSPSProcessingCategoryDeleteOne {
	return c.DeleteOneID(pupc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PackagingUSPSProcessingCategoryClient) DeleteOneID(id pulid.ID) *PackagingUSPSProcessingCategoryDeleteOne {
	builder := c.Delete().Where(packaginguspsprocessingcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PackagingUSPSProcessingCategoryDeleteOne{builder}
}

// Query returns a query builder for PackagingUSPSProcessingCategory.
func (c *PackagingUSPSProcessingCategoryClient) Query() *PackagingUSPSProcessingCategoryQuery {
	return &PackagingUSPSProcessingCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePackagingUSPSProcessingCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a PackagingUSPSProcessingCategory entity by its id.
func (c *PackagingUSPSProcessingCategoryClient) Get(ctx context.Context, id pulid.ID) (*PackagingUSPSProcessingCategory, error) {
	return c.Query().Where(packaginguspsprocessingcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PackagingUSPSProcessingCategoryClient) GetX(ctx context.Context, id pulid.ID) *PackagingUSPSProcessingCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PackagingUSPSProcessingCategoryClient) Hooks() []Hook {
	hooks := c.hooks.PackagingUSPSProcessingCategory
	return append(hooks[:len(hooks):len(hooks)], packaginguspsprocessingcategory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PackagingUSPSProcessingCategoryClient) Interceptors() []Interceptor {
	return c.inters.PackagingUSPSProcessingCategory
}

func (c *PackagingUSPSProcessingCategoryClient) mutate(ctx context.Context, m *PackagingUSPSProcessingCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PackagingUSPSProcessingCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PackagingUSPSProcessingCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PackagingUSPSProcessingCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PackagingUSPSProcessingCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PackagingUSPSProcessingCategory mutation op: %q", m.Op())
	}
}

// PackagingUSPSRateIndicatorClient is a client for the PackagingUSPSRateIndicator schema.
type PackagingUSPSRateIndicatorClient struct {
	config
}

// NewPackagingUSPSRateIndicatorClient returns a client for the PackagingUSPSRateIndicator from the given config.
func NewPackagingUSPSRateIndicatorClient(c config) *PackagingUSPSRateIndicatorClient {
	return &PackagingUSPSRateIndicatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `packaginguspsrateindicator.Hooks(f(g(h())))`.
func (c *PackagingUSPSRateIndicatorClient) Use(hooks ...Hook) {
	c.hooks.PackagingUSPSRateIndicator = append(c.hooks.PackagingUSPSRateIndicator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `packaginguspsrateindicator.Intercept(f(g(h())))`.
func (c *PackagingUSPSRateIndicatorClient) Intercept(interceptors ...Interceptor) {
	c.inters.PackagingUSPSRateIndicator = append(c.inters.PackagingUSPSRateIndicator, interceptors...)
}

// Create returns a builder for creating a PackagingUSPSRateIndicator entity.
func (c *PackagingUSPSRateIndicatorClient) Create() *PackagingUSPSRateIndicatorCreate {
	mutation := newPackagingUSPSRateIndicatorMutation(c.config, OpCreate)
	return &PackagingUSPSRateIndicatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PackagingUSPSRateIndicator entities.
func (c *PackagingUSPSRateIndicatorClient) CreateBulk(builders ...*PackagingUSPSRateIndicatorCreate) *PackagingUSPSRateIndicatorCreateBulk {
	return &PackagingUSPSRateIndicatorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PackagingUSPSRateIndicatorClient) MapCreateBulk(slice any, setFunc func(*PackagingUSPSRateIndicatorCreate, int)) *PackagingUSPSRateIndicatorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PackagingUSPSRateIndicatorCreateBulk{err: fmt.Errorf("calling to PackagingUSPSRateIndicatorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PackagingUSPSRateIndicatorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PackagingUSPSRateIndicatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PackagingUSPSRateIndicator.
func (c *PackagingUSPSRateIndicatorClient) Update() *PackagingUSPSRateIndicatorUpdate {
	mutation := newPackagingUSPSRateIndicatorMutation(c.config, OpUpdate)
	return &PackagingUSPSRateIndicatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PackagingUSPSRateIndicatorClient) UpdateOne(puri *PackagingUSPSRateIndicator) *PackagingUSPSRateIndicatorUpdateOne {
	mutation := newPackagingUSPSRateIndicatorMutation(c.config, OpUpdateOne, withPackagingUSPSRateIndicator(puri))
	return &PackagingUSPSRateIndicatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PackagingUSPSRateIndicatorClient) UpdateOneID(id pulid.ID) *PackagingUSPSRateIndicatorUpdateOne {
	mutation := newPackagingUSPSRateIndicatorMutation(c.config, OpUpdateOne, withPackagingUSPSRateIndicatorID(id))
	return &PackagingUSPSRateIndicatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PackagingUSPSRateIndicator.
func (c *PackagingUSPSRateIndicatorClient) Delete() *PackagingUSPSRateIndicatorDelete {
	mutation := newPackagingUSPSRateIndicatorMutation(c.config, OpDelete)
	return &PackagingUSPSRateIndicatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PackagingUSPSRateIndicatorClient) DeleteOne(puri *PackagingUSPSRateIndicator) *PackagingUSPSRateIndicatorDeleteOne {
	return c.DeleteOneID(puri.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PackagingUSPSRateIndicatorClient) DeleteOneID(id pulid.ID) *PackagingUSPSRateIndicatorDeleteOne {
	builder := c.Delete().Where(packaginguspsrateindicator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PackagingUSPSRateIndicatorDeleteOne{builder}
}

// Query returns a query builder for PackagingUSPSRateIndicator.
func (c *PackagingUSPSRateIndicatorClient) Query() *PackagingUSPSRateIndicatorQuery {
	return &PackagingUSPSRateIndicatorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePackagingUSPSRateIndicator},
		inters: c.Interceptors(),
	}
}

// Get returns a PackagingUSPSRateIndicator entity by its id.
func (c *PackagingUSPSRateIndicatorClient) Get(ctx context.Context, id pulid.ID) (*PackagingUSPSRateIndicator, error) {
	return c.Query().Where(packaginguspsrateindicator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PackagingUSPSRateIndicatorClient) GetX(ctx context.Context, id pulid.ID) *PackagingUSPSRateIndicator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPackagingUSPS queries the packaging_usps edge of a PackagingUSPSRateIndicator.
func (c *PackagingUSPSRateIndicatorClient) QueryPackagingUSPS(puri *PackagingUSPSRateIndicator) *PackagingUSPSQuery {
	query := (&PackagingUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := puri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(packaginguspsrateindicator.Table, packaginguspsrateindicator.FieldID, id),
			sqlgraph.To(packagingusps.Table, packagingusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, packaginguspsrateindicator.PackagingUSPSTable, packaginguspsrateindicator.PackagingUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(puri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PackagingUSPSRateIndicatorClient) Hooks() []Hook {
	hooks := c.hooks.PackagingUSPSRateIndicator
	return append(hooks[:len(hooks):len(hooks)], packaginguspsrateindicator.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PackagingUSPSRateIndicatorClient) Interceptors() []Interceptor {
	return c.inters.PackagingUSPSRateIndicator
}

func (c *PackagingUSPSRateIndicatorClient) mutate(ctx context.Context, m *PackagingUSPSRateIndicatorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PackagingUSPSRateIndicatorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PackagingUSPSRateIndicatorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PackagingUSPSRateIndicatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PackagingUSPSRateIndicatorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PackagingUSPSRateIndicator mutation op: %q", m.Op())
	}
}

// PalletClient is a client for the Pallet schema.
type PalletClient struct {
	config
}

// NewPalletClient returns a client for the Pallet from the given config.
func NewPalletClient(c config) *PalletClient {
	return &PalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pallet.Hooks(f(g(h())))`.
func (c *PalletClient) Use(hooks ...Hook) {
	c.hooks.Pallet = append(c.hooks.Pallet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pallet.Intercept(f(g(h())))`.
func (c *PalletClient) Intercept(interceptors ...Interceptor) {
	c.inters.Pallet = append(c.inters.Pallet, interceptors...)
}

// Create returns a builder for creating a Pallet entity.
func (c *PalletClient) Create() *PalletCreate {
	mutation := newPalletMutation(c.config, OpCreate)
	return &PalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Pallet entities.
func (c *PalletClient) CreateBulk(builders ...*PalletCreate) *PalletCreateBulk {
	return &PalletCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PalletClient) MapCreateBulk(slice any, setFunc func(*PalletCreate, int)) *PalletCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PalletCreateBulk{err: fmt.Errorf("calling to PalletClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PalletCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Pallet.
func (c *PalletClient) Update() *PalletUpdate {
	mutation := newPalletMutation(c.config, OpUpdate)
	return &PalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PalletClient) UpdateOne(pa *Pallet) *PalletUpdateOne {
	mutation := newPalletMutation(c.config, OpUpdateOne, withPallet(pa))
	return &PalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PalletClient) UpdateOneID(id pulid.ID) *PalletUpdateOne {
	mutation := newPalletMutation(c.config, OpUpdateOne, withPalletID(id))
	return &PalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Pallet.
func (c *PalletClient) Delete() *PalletDelete {
	mutation := newPalletMutation(c.config, OpDelete)
	return &PalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PalletClient) DeleteOne(pa *Pallet) *PalletDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PalletClient) DeleteOneID(id pulid.ID) *PalletDeleteOne {
	builder := c.Delete().Where(pallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PalletDeleteOne{builder}
}

// Query returns a query builder for Pallet.
func (c *PalletClient) Query() *PalletQuery {
	return &PalletQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePallet},
		inters: c.Interceptors(),
	}
}

// Get returns a Pallet entity by its id.
func (c *PalletClient) Get(ctx context.Context, id pulid.ID) (*Pallet, error) {
	return c.Query().Where(pallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PalletClient) GetX(ctx context.Context, id pulid.ID) *Pallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Pallet.
func (c *PalletClient) QueryTenant(pa *Pallet) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pallet.Table, pallet.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pallet.TenantTable, pallet.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Pallet.
func (c *PalletClient) QueryOrders(pa *Pallet) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pallet.Table, pallet.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, pallet.OrdersTable, pallet.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a Pallet.
func (c *PalletClient) QueryPackaging(pa *Pallet) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pallet.Table, pallet.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pallet.PackagingTable, pallet.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConsolidation queries the consolidation edge of a Pallet.
func (c *PalletClient) QueryConsolidation(pa *Pallet) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pallet.Table, pallet.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, pallet.ConsolidationTable, pallet.ConsolidationColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentPallet queries the shipment_pallet edge of a Pallet.
func (c *PalletClient) QueryShipmentPallet(pa *Pallet) *ShipmentPalletQuery {
	query := (&ShipmentPalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pallet.Table, pallet.FieldID, id),
			sqlgraph.To(shipmentpallet.Table, shipmentpallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, pallet.ShipmentPalletTable, pallet.ShipmentPalletColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCancelledShipmentPallet queries the cancelled_shipment_pallet edge of a Pallet.
func (c *PalletClient) QueryCancelledShipmentPallet(pa *Pallet) *ShipmentPalletQuery {
	query := (&ShipmentPalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pallet.Table, pallet.FieldID, id),
			sqlgraph.To(shipmentpallet.Table, shipmentpallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, pallet.CancelledShipmentPalletTable, pallet.CancelledShipmentPalletPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PalletClient) Hooks() []Hook {
	hooks := c.hooks.Pallet
	return append(hooks[:len(hooks):len(hooks)], pallet.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PalletClient) Interceptors() []Interceptor {
	return c.inters.Pallet
}

func (c *PalletClient) mutate(ctx context.Context, m *PalletMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PalletCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PalletUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PalletDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Pallet mutation op: %q", m.Op())
	}
}

// ParcelShopClient is a client for the ParcelShop schema.
type ParcelShopClient struct {
	config
}

// NewParcelShopClient returns a client for the ParcelShop from the given config.
func NewParcelShopClient(c config) *ParcelShopClient {
	return &ParcelShopClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parcelshop.Hooks(f(g(h())))`.
func (c *ParcelShopClient) Use(hooks ...Hook) {
	c.hooks.ParcelShop = append(c.hooks.ParcelShop, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `parcelshop.Intercept(f(g(h())))`.
func (c *ParcelShopClient) Intercept(interceptors ...Interceptor) {
	c.inters.ParcelShop = append(c.inters.ParcelShop, interceptors...)
}

// Create returns a builder for creating a ParcelShop entity.
func (c *ParcelShopClient) Create() *ParcelShopCreate {
	mutation := newParcelShopMutation(c.config, OpCreate)
	return &ParcelShopCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParcelShop entities.
func (c *ParcelShopClient) CreateBulk(builders ...*ParcelShopCreate) *ParcelShopCreateBulk {
	return &ParcelShopCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ParcelShopClient) MapCreateBulk(slice any, setFunc func(*ParcelShopCreate, int)) *ParcelShopCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ParcelShopCreateBulk{err: fmt.Errorf("calling to ParcelShopClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ParcelShopCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ParcelShopCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParcelShop.
func (c *ParcelShopClient) Update() *ParcelShopUpdate {
	mutation := newParcelShopMutation(c.config, OpUpdate)
	return &ParcelShopUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParcelShopClient) UpdateOne(ps *ParcelShop) *ParcelShopUpdateOne {
	mutation := newParcelShopMutation(c.config, OpUpdateOne, withParcelShop(ps))
	return &ParcelShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParcelShopClient) UpdateOneID(id pulid.ID) *ParcelShopUpdateOne {
	mutation := newParcelShopMutation(c.config, OpUpdateOne, withParcelShopID(id))
	return &ParcelShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParcelShop.
func (c *ParcelShopClient) Delete() *ParcelShopDelete {
	mutation := newParcelShopMutation(c.config, OpDelete)
	return &ParcelShopDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ParcelShopClient) DeleteOne(ps *ParcelShop) *ParcelShopDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ParcelShopClient) DeleteOneID(id pulid.ID) *ParcelShopDeleteOne {
	builder := c.Delete().Where(parcelshop.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParcelShopDeleteOne{builder}
}

// Query returns a query builder for ParcelShop.
func (c *ParcelShopClient) Query() *ParcelShopQuery {
	return &ParcelShopQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParcelShop},
		inters: c.Interceptors(),
	}
}

// Get returns a ParcelShop entity by its id.
func (c *ParcelShopClient) Get(ctx context.Context, id pulid.ID) (*ParcelShop, error) {
	return c.Query().Where(parcelshop.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParcelShopClient) GetX(ctx context.Context, id pulid.ID) *ParcelShop {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShopDAO queries the parcel_shop_dao edge of a ParcelShop.
func (c *ParcelShopClient) QueryParcelShopDAO(ps *ParcelShop) *ParcelShopDAOQuery {
	query := (&ParcelShopDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(parcelshopdao.Table, parcelshopdao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopDAOTable, parcelshop.ParcelShopDAOColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShopPostNord queries the parcel_shop_post_nord edge of a ParcelShop.
func (c *ParcelShopClient) QueryParcelShopPostNord(ps *ParcelShop) *ParcelShopPostNordQuery {
	query := (&ParcelShopPostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(parcelshoppostnord.Table, parcelshoppostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopPostNordTable, parcelshop.ParcelShopPostNordColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShopGLS queries the parcel_shop_gls edge of a ParcelShop.
func (c *ParcelShopClient) QueryParcelShopGLS(ps *ParcelShop) *ParcelShopGLSQuery {
	query := (&ParcelShopGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(parcelshopgls.Table, parcelshopgls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopGLSTable, parcelshop.ParcelShopGLSColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParcelShopBring queries the parcel_shop_bring edge of a ParcelShop.
func (c *ParcelShopClient) QueryParcelShopBring(ps *ParcelShop) *ParcelShopBringQuery {
	query := (&ParcelShopBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(parcelshopbring.Table, parcelshopbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopBringTable, parcelshop.ParcelShopBringColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrierBrand queries the carrier_brand edge of a ParcelShop.
func (c *ParcelShopClient) QueryCarrierBrand(ps *ParcelShop) *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, parcelshop.CarrierBrandTable, parcelshop.CarrierBrandColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddress queries the address edge of a ParcelShop.
func (c *ParcelShopClient) QueryAddress(ps *ParcelShop) *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.AddressTable, parcelshop.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a ParcelShop.
func (c *ParcelShopClient) QueryColli(ps *ParcelShop) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, parcelshop.ColliTable, parcelshop.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusinessHoursPeriod queries the business_hours_period edge of a ParcelShop.
func (c *ParcelShopClient) QueryBusinessHoursPeriod(ps *ParcelShop) *BusinessHoursPeriodQuery {
	query := (&BusinessHoursPeriodClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ps.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, id),
			sqlgraph.To(businesshoursperiod.Table, businesshoursperiod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, parcelshop.BusinessHoursPeriodTable, parcelshop.BusinessHoursPeriodColumn),
		)
		fromV = sqlgraph.Neighbors(ps.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParcelShopClient) Hooks() []Hook {
	hooks := c.hooks.ParcelShop
	return append(hooks[:len(hooks):len(hooks)], parcelshop.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ParcelShopClient) Interceptors() []Interceptor {
	return c.inters.ParcelShop
}

func (c *ParcelShopClient) mutate(ctx context.Context, m *ParcelShopMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ParcelShopCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ParcelShopUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ParcelShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ParcelShopDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ParcelShop mutation op: %q", m.Op())
	}
}

// ParcelShopBringClient is a client for the ParcelShopBring schema.
type ParcelShopBringClient struct {
	config
}

// NewParcelShopBringClient returns a client for the ParcelShopBring from the given config.
func NewParcelShopBringClient(c config) *ParcelShopBringClient {
	return &ParcelShopBringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parcelshopbring.Hooks(f(g(h())))`.
func (c *ParcelShopBringClient) Use(hooks ...Hook) {
	c.hooks.ParcelShopBring = append(c.hooks.ParcelShopBring, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `parcelshopbring.Intercept(f(g(h())))`.
func (c *ParcelShopBringClient) Intercept(interceptors ...Interceptor) {
	c.inters.ParcelShopBring = append(c.inters.ParcelShopBring, interceptors...)
}

// Create returns a builder for creating a ParcelShopBring entity.
func (c *ParcelShopBringClient) Create() *ParcelShopBringCreate {
	mutation := newParcelShopBringMutation(c.config, OpCreate)
	return &ParcelShopBringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParcelShopBring entities.
func (c *ParcelShopBringClient) CreateBulk(builders ...*ParcelShopBringCreate) *ParcelShopBringCreateBulk {
	return &ParcelShopBringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ParcelShopBringClient) MapCreateBulk(slice any, setFunc func(*ParcelShopBringCreate, int)) *ParcelShopBringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ParcelShopBringCreateBulk{err: fmt.Errorf("calling to ParcelShopBringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ParcelShopBringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ParcelShopBringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParcelShopBring.
func (c *ParcelShopBringClient) Update() *ParcelShopBringUpdate {
	mutation := newParcelShopBringMutation(c.config, OpUpdate)
	return &ParcelShopBringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParcelShopBringClient) UpdateOne(psb *ParcelShopBring) *ParcelShopBringUpdateOne {
	mutation := newParcelShopBringMutation(c.config, OpUpdateOne, withParcelShopBring(psb))
	return &ParcelShopBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParcelShopBringClient) UpdateOneID(id pulid.ID) *ParcelShopBringUpdateOne {
	mutation := newParcelShopBringMutation(c.config, OpUpdateOne, withParcelShopBringID(id))
	return &ParcelShopBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParcelShopBring.
func (c *ParcelShopBringClient) Delete() *ParcelShopBringDelete {
	mutation := newParcelShopBringMutation(c.config, OpDelete)
	return &ParcelShopBringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ParcelShopBringClient) DeleteOne(psb *ParcelShopBring) *ParcelShopBringDeleteOne {
	return c.DeleteOneID(psb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ParcelShopBringClient) DeleteOneID(id pulid.ID) *ParcelShopBringDeleteOne {
	builder := c.Delete().Where(parcelshopbring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParcelShopBringDeleteOne{builder}
}

// Query returns a query builder for ParcelShopBring.
func (c *ParcelShopBringClient) Query() *ParcelShopBringQuery {
	return &ParcelShopBringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParcelShopBring},
		inters: c.Interceptors(),
	}
}

// Get returns a ParcelShopBring entity by its id.
func (c *ParcelShopBringClient) Get(ctx context.Context, id pulid.ID) (*ParcelShopBring, error) {
	return c.Query().Where(parcelshopbring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParcelShopBringClient) GetX(ctx context.Context, id pulid.ID) *ParcelShopBring {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShop queries the parcel_shop edge of a ParcelShopBring.
func (c *ParcelShopBringClient) QueryParcelShop(psb *ParcelShopBring) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshopbring.Table, parcelshopbring.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, parcelshopbring.ParcelShopTable, parcelshopbring.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(psb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressDelivery queries the address_delivery edge of a ParcelShopBring.
func (c *ParcelShopBringClient) QueryAddressDelivery(psb *ParcelShopBring) *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshopbring.Table, parcelshopbring.FieldID, id),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshopbring.AddressDeliveryTable, parcelshopbring.AddressDeliveryColumn),
		)
		fromV = sqlgraph.Neighbors(psb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParcelShopBringClient) Hooks() []Hook {
	hooks := c.hooks.ParcelShopBring
	return append(hooks[:len(hooks):len(hooks)], parcelshopbring.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ParcelShopBringClient) Interceptors() []Interceptor {
	return c.inters.ParcelShopBring
}

func (c *ParcelShopBringClient) mutate(ctx context.Context, m *ParcelShopBringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ParcelShopBringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ParcelShopBringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ParcelShopBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ParcelShopBringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ParcelShopBring mutation op: %q", m.Op())
	}
}

// ParcelShopDAOClient is a client for the ParcelShopDAO schema.
type ParcelShopDAOClient struct {
	config
}

// NewParcelShopDAOClient returns a client for the ParcelShopDAO from the given config.
func NewParcelShopDAOClient(c config) *ParcelShopDAOClient {
	return &ParcelShopDAOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parcelshopdao.Hooks(f(g(h())))`.
func (c *ParcelShopDAOClient) Use(hooks ...Hook) {
	c.hooks.ParcelShopDAO = append(c.hooks.ParcelShopDAO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `parcelshopdao.Intercept(f(g(h())))`.
func (c *ParcelShopDAOClient) Intercept(interceptors ...Interceptor) {
	c.inters.ParcelShopDAO = append(c.inters.ParcelShopDAO, interceptors...)
}

// Create returns a builder for creating a ParcelShopDAO entity.
func (c *ParcelShopDAOClient) Create() *ParcelShopDAOCreate {
	mutation := newParcelShopDAOMutation(c.config, OpCreate)
	return &ParcelShopDAOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParcelShopDAO entities.
func (c *ParcelShopDAOClient) CreateBulk(builders ...*ParcelShopDAOCreate) *ParcelShopDAOCreateBulk {
	return &ParcelShopDAOCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ParcelShopDAOClient) MapCreateBulk(slice any, setFunc func(*ParcelShopDAOCreate, int)) *ParcelShopDAOCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ParcelShopDAOCreateBulk{err: fmt.Errorf("calling to ParcelShopDAOClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ParcelShopDAOCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ParcelShopDAOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParcelShopDAO.
func (c *ParcelShopDAOClient) Update() *ParcelShopDAOUpdate {
	mutation := newParcelShopDAOMutation(c.config, OpUpdate)
	return &ParcelShopDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParcelShopDAOClient) UpdateOne(psd *ParcelShopDAO) *ParcelShopDAOUpdateOne {
	mutation := newParcelShopDAOMutation(c.config, OpUpdateOne, withParcelShopDAO(psd))
	return &ParcelShopDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParcelShopDAOClient) UpdateOneID(id pulid.ID) *ParcelShopDAOUpdateOne {
	mutation := newParcelShopDAOMutation(c.config, OpUpdateOne, withParcelShopDAOID(id))
	return &ParcelShopDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParcelShopDAO.
func (c *ParcelShopDAOClient) Delete() *ParcelShopDAODelete {
	mutation := newParcelShopDAOMutation(c.config, OpDelete)
	return &ParcelShopDAODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ParcelShopDAOClient) DeleteOne(psd *ParcelShopDAO) *ParcelShopDAODeleteOne {
	return c.DeleteOneID(psd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ParcelShopDAOClient) DeleteOneID(id pulid.ID) *ParcelShopDAODeleteOne {
	builder := c.Delete().Where(parcelshopdao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParcelShopDAODeleteOne{builder}
}

// Query returns a query builder for ParcelShopDAO.
func (c *ParcelShopDAOClient) Query() *ParcelShopDAOQuery {
	return &ParcelShopDAOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParcelShopDAO},
		inters: c.Interceptors(),
	}
}

// Get returns a ParcelShopDAO entity by its id.
func (c *ParcelShopDAOClient) Get(ctx context.Context, id pulid.ID) (*ParcelShopDAO, error) {
	return c.Query().Where(parcelshopdao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParcelShopDAOClient) GetX(ctx context.Context, id pulid.ID) *ParcelShopDAO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShop queries the parcel_shop edge of a ParcelShopDAO.
func (c *ParcelShopDAOClient) QueryParcelShop(psd *ParcelShopDAO) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshopdao.Table, parcelshopdao.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, parcelshopdao.ParcelShopTable, parcelshopdao.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(psd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParcelShopDAOClient) Hooks() []Hook {
	hooks := c.hooks.ParcelShopDAO
	return append(hooks[:len(hooks):len(hooks)], parcelshopdao.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ParcelShopDAOClient) Interceptors() []Interceptor {
	return c.inters.ParcelShopDAO
}

func (c *ParcelShopDAOClient) mutate(ctx context.Context, m *ParcelShopDAOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ParcelShopDAOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ParcelShopDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ParcelShopDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ParcelShopDAODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ParcelShopDAO mutation op: %q", m.Op())
	}
}

// ParcelShopGLSClient is a client for the ParcelShopGLS schema.
type ParcelShopGLSClient struct {
	config
}

// NewParcelShopGLSClient returns a client for the ParcelShopGLS from the given config.
func NewParcelShopGLSClient(c config) *ParcelShopGLSClient {
	return &ParcelShopGLSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parcelshopgls.Hooks(f(g(h())))`.
func (c *ParcelShopGLSClient) Use(hooks ...Hook) {
	c.hooks.ParcelShopGLS = append(c.hooks.ParcelShopGLS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `parcelshopgls.Intercept(f(g(h())))`.
func (c *ParcelShopGLSClient) Intercept(interceptors ...Interceptor) {
	c.inters.ParcelShopGLS = append(c.inters.ParcelShopGLS, interceptors...)
}

// Create returns a builder for creating a ParcelShopGLS entity.
func (c *ParcelShopGLSClient) Create() *ParcelShopGLSCreate {
	mutation := newParcelShopGLSMutation(c.config, OpCreate)
	return &ParcelShopGLSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParcelShopGLS entities.
func (c *ParcelShopGLSClient) CreateBulk(builders ...*ParcelShopGLSCreate) *ParcelShopGLSCreateBulk {
	return &ParcelShopGLSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ParcelShopGLSClient) MapCreateBulk(slice any, setFunc func(*ParcelShopGLSCreate, int)) *ParcelShopGLSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ParcelShopGLSCreateBulk{err: fmt.Errorf("calling to ParcelShopGLSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ParcelShopGLSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ParcelShopGLSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParcelShopGLS.
func (c *ParcelShopGLSClient) Update() *ParcelShopGLSUpdate {
	mutation := newParcelShopGLSMutation(c.config, OpUpdate)
	return &ParcelShopGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParcelShopGLSClient) UpdateOne(psg *ParcelShopGLS) *ParcelShopGLSUpdateOne {
	mutation := newParcelShopGLSMutation(c.config, OpUpdateOne, withParcelShopGLS(psg))
	return &ParcelShopGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParcelShopGLSClient) UpdateOneID(id pulid.ID) *ParcelShopGLSUpdateOne {
	mutation := newParcelShopGLSMutation(c.config, OpUpdateOne, withParcelShopGLSID(id))
	return &ParcelShopGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParcelShopGLS.
func (c *ParcelShopGLSClient) Delete() *ParcelShopGLSDelete {
	mutation := newParcelShopGLSMutation(c.config, OpDelete)
	return &ParcelShopGLSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ParcelShopGLSClient) DeleteOne(psg *ParcelShopGLS) *ParcelShopGLSDeleteOne {
	return c.DeleteOneID(psg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ParcelShopGLSClient) DeleteOneID(id pulid.ID) *ParcelShopGLSDeleteOne {
	builder := c.Delete().Where(parcelshopgls.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParcelShopGLSDeleteOne{builder}
}

// Query returns a query builder for ParcelShopGLS.
func (c *ParcelShopGLSClient) Query() *ParcelShopGLSQuery {
	return &ParcelShopGLSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParcelShopGLS},
		inters: c.Interceptors(),
	}
}

// Get returns a ParcelShopGLS entity by its id.
func (c *ParcelShopGLSClient) Get(ctx context.Context, id pulid.ID) (*ParcelShopGLS, error) {
	return c.Query().Where(parcelshopgls.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParcelShopGLSClient) GetX(ctx context.Context, id pulid.ID) *ParcelShopGLS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShop queries the parcel_shop edge of a ParcelShopGLS.
func (c *ParcelShopGLSClient) QueryParcelShop(psg *ParcelShopGLS) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshopgls.Table, parcelshopgls.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, parcelshopgls.ParcelShopTable, parcelshopgls.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(psg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParcelShopGLSClient) Hooks() []Hook {
	hooks := c.hooks.ParcelShopGLS
	return append(hooks[:len(hooks):len(hooks)], parcelshopgls.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ParcelShopGLSClient) Interceptors() []Interceptor {
	return c.inters.ParcelShopGLS
}

func (c *ParcelShopGLSClient) mutate(ctx context.Context, m *ParcelShopGLSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ParcelShopGLSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ParcelShopGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ParcelShopGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ParcelShopGLSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ParcelShopGLS mutation op: %q", m.Op())
	}
}

// ParcelShopPostNordClient is a client for the ParcelShopPostNord schema.
type ParcelShopPostNordClient struct {
	config
}

// NewParcelShopPostNordClient returns a client for the ParcelShopPostNord from the given config.
func NewParcelShopPostNordClient(c config) *ParcelShopPostNordClient {
	return &ParcelShopPostNordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `parcelshoppostnord.Hooks(f(g(h())))`.
func (c *ParcelShopPostNordClient) Use(hooks ...Hook) {
	c.hooks.ParcelShopPostNord = append(c.hooks.ParcelShopPostNord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `parcelshoppostnord.Intercept(f(g(h())))`.
func (c *ParcelShopPostNordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ParcelShopPostNord = append(c.inters.ParcelShopPostNord, interceptors...)
}

// Create returns a builder for creating a ParcelShopPostNord entity.
func (c *ParcelShopPostNordClient) Create() *ParcelShopPostNordCreate {
	mutation := newParcelShopPostNordMutation(c.config, OpCreate)
	return &ParcelShopPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ParcelShopPostNord entities.
func (c *ParcelShopPostNordClient) CreateBulk(builders ...*ParcelShopPostNordCreate) *ParcelShopPostNordCreateBulk {
	return &ParcelShopPostNordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ParcelShopPostNordClient) MapCreateBulk(slice any, setFunc func(*ParcelShopPostNordCreate, int)) *ParcelShopPostNordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ParcelShopPostNordCreateBulk{err: fmt.Errorf("calling to ParcelShopPostNordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ParcelShopPostNordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ParcelShopPostNordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ParcelShopPostNord.
func (c *ParcelShopPostNordClient) Update() *ParcelShopPostNordUpdate {
	mutation := newParcelShopPostNordMutation(c.config, OpUpdate)
	return &ParcelShopPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ParcelShopPostNordClient) UpdateOne(pspn *ParcelShopPostNord) *ParcelShopPostNordUpdateOne {
	mutation := newParcelShopPostNordMutation(c.config, OpUpdateOne, withParcelShopPostNord(pspn))
	return &ParcelShopPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ParcelShopPostNordClient) UpdateOneID(id pulid.ID) *ParcelShopPostNordUpdateOne {
	mutation := newParcelShopPostNordMutation(c.config, OpUpdateOne, withParcelShopPostNordID(id))
	return &ParcelShopPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ParcelShopPostNord.
func (c *ParcelShopPostNordClient) Delete() *ParcelShopPostNordDelete {
	mutation := newParcelShopPostNordMutation(c.config, OpDelete)
	return &ParcelShopPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ParcelShopPostNordClient) DeleteOne(pspn *ParcelShopPostNord) *ParcelShopPostNordDeleteOne {
	return c.DeleteOneID(pspn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ParcelShopPostNordClient) DeleteOneID(id pulid.ID) *ParcelShopPostNordDeleteOne {
	builder := c.Delete().Where(parcelshoppostnord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ParcelShopPostNordDeleteOne{builder}
}

// Query returns a query builder for ParcelShopPostNord.
func (c *ParcelShopPostNordClient) Query() *ParcelShopPostNordQuery {
	return &ParcelShopPostNordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeParcelShopPostNord},
		inters: c.Interceptors(),
	}
}

// Get returns a ParcelShopPostNord entity by its id.
func (c *ParcelShopPostNordClient) Get(ctx context.Context, id pulid.ID) (*ParcelShopPostNord, error) {
	return c.Query().Where(parcelshoppostnord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ParcelShopPostNordClient) GetX(ctx context.Context, id pulid.ID) *ParcelShopPostNord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParcelShop queries the parcel_shop edge of a ParcelShopPostNord.
func (c *ParcelShopPostNordClient) QueryParcelShop(pspn *ParcelShopPostNord) *ParcelShopQuery {
	query := (&ParcelShopClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshoppostnord.Table, parcelshoppostnord.FieldID, id),
			sqlgraph.To(parcelshop.Table, parcelshop.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, parcelshoppostnord.ParcelShopTable, parcelshoppostnord.ParcelShopColumn),
		)
		fromV = sqlgraph.Neighbors(pspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddressDelivery queries the address_delivery edge of a ParcelShopPostNord.
func (c *ParcelShopPostNordClient) QueryAddressDelivery(pspn *ParcelShopPostNord) *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pspn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshoppostnord.Table, parcelshoppostnord.FieldID, id),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshoppostnord.AddressDeliveryTable, parcelshoppostnord.AddressDeliveryColumn),
		)
		fromV = sqlgraph.Neighbors(pspn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ParcelShopPostNordClient) Hooks() []Hook {
	hooks := c.hooks.ParcelShopPostNord
	return append(hooks[:len(hooks):len(hooks)], parcelshoppostnord.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ParcelShopPostNordClient) Interceptors() []Interceptor {
	return c.inters.ParcelShopPostNord
}

func (c *ParcelShopPostNordClient) mutate(ctx context.Context, m *ParcelShopPostNordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ParcelShopPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ParcelShopPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ParcelShopPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ParcelShopPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ParcelShopPostNord mutation op: %q", m.Op())
	}
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plan.Intercept(f(g(h())))`.
func (c *PlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Plan = append(c.inters.Plan, interceptors...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanClient) MapCreateBulk(slice any, setFunc func(*PlanCreate, int)) *PlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanCreateBulk{err: fmt.Errorf("calling to PlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id pulid.ID) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id pulid.ID) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlan},
		inters: c.Interceptors(),
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id pulid.ID) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id pulid.ID) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Plan.
func (c *PlanClient) QueryTenant(pl *Plan) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.TenantTable, plan.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanHistoryPlan queries the plan_history_plan edge of a Plan.
func (c *PlanClient) QueryPlanHistoryPlan(pl *Plan) *PlanHistoryQuery {
	query := (&PlanHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(planhistory.Table, planhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.PlanHistoryPlanTable, plan.PlanHistoryPlanColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	hooks := c.hooks.Plan
	return append(hooks[:len(hooks):len(hooks)], plan.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PlanClient) Interceptors() []Interceptor {
	return c.inters.Plan
}

func (c *PlanClient) mutate(ctx context.Context, m *PlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Plan mutation op: %q", m.Op())
	}
}

// PlanHistoryClient is a client for the PlanHistory schema.
type PlanHistoryClient struct {
	config
}

// NewPlanHistoryClient returns a client for the PlanHistory from the given config.
func NewPlanHistoryClient(c config) *PlanHistoryClient {
	return &PlanHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planhistory.Hooks(f(g(h())))`.
func (c *PlanHistoryClient) Use(hooks ...Hook) {
	c.hooks.PlanHistory = append(c.hooks.PlanHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `planhistory.Intercept(f(g(h())))`.
func (c *PlanHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlanHistory = append(c.inters.PlanHistory, interceptors...)
}

// Create returns a builder for creating a PlanHistory entity.
func (c *PlanHistoryClient) Create() *PlanHistoryCreate {
	mutation := newPlanHistoryMutation(c.config, OpCreate)
	return &PlanHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanHistory entities.
func (c *PlanHistoryClient) CreateBulk(builders ...*PlanHistoryCreate) *PlanHistoryCreateBulk {
	return &PlanHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanHistoryClient) MapCreateBulk(slice any, setFunc func(*PlanHistoryCreate, int)) *PlanHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanHistoryCreateBulk{err: fmt.Errorf("calling to PlanHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanHistory.
func (c *PlanHistoryClient) Update() *PlanHistoryUpdate {
	mutation := newPlanHistoryMutation(c.config, OpUpdate)
	return &PlanHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanHistoryClient) UpdateOne(ph *PlanHistory) *PlanHistoryUpdateOne {
	mutation := newPlanHistoryMutation(c.config, OpUpdateOne, withPlanHistory(ph))
	return &PlanHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanHistoryClient) UpdateOneID(id pulid.ID) *PlanHistoryUpdateOne {
	mutation := newPlanHistoryMutation(c.config, OpUpdateOne, withPlanHistoryID(id))
	return &PlanHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanHistory.
func (c *PlanHistoryClient) Delete() *PlanHistoryDelete {
	mutation := newPlanHistoryMutation(c.config, OpDelete)
	return &PlanHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanHistoryClient) DeleteOne(ph *PlanHistory) *PlanHistoryDeleteOne {
	return c.DeleteOneID(ph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanHistoryClient) DeleteOneID(id pulid.ID) *PlanHistoryDeleteOne {
	builder := c.Delete().Where(planhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanHistoryDeleteOne{builder}
}

// Query returns a query builder for PlanHistory.
func (c *PlanHistoryClient) Query() *PlanHistoryQuery {
	return &PlanHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlanHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a PlanHistory entity by its id.
func (c *PlanHistoryClient) Get(ctx context.Context, id pulid.ID) (*PlanHistory, error) {
	return c.Query().Where(planhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanHistoryClient) GetX(ctx context.Context, id pulid.ID) *PlanHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChangeHistory queries the change_history edge of a PlanHistory.
func (c *PlanHistoryClient) QueryChangeHistory(ph *PlanHistory) *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, id),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planhistory.ChangeHistoryTable, planhistory.ChangeHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a PlanHistory.
func (c *PlanHistoryClient) QueryTenant(ph *PlanHistory) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, planhistory.TenantTable, planhistory.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangedBy queries the changed_by edge of a PlanHistory.
func (c *PlanHistoryClient) QueryChangedBy(ph *PlanHistory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planhistory.ChangedByTable, planhistory.ChangedByColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangedFrom queries the changed_from edge of a PlanHistory.
func (c *PlanHistoryClient) QueryChangedFrom(ph *PlanHistory) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planhistory.ChangedFromTable, planhistory.ChangedFromColumn),
		)
		fromV = sqlgraph.Neighbors(ph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanHistoryClient) Hooks() []Hook {
	hooks := c.hooks.PlanHistory
	return append(hooks[:len(hooks):len(hooks)], planhistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PlanHistoryClient) Interceptors() []Interceptor {
	return c.inters.PlanHistory
}

func (c *PlanHistoryClient) mutate(ctx context.Context, m *PlanHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlanHistory mutation op: %q", m.Op())
	}
}

// PrintJobClient is a client for the PrintJob schema.
type PrintJobClient struct {
	config
}

// NewPrintJobClient returns a client for the PrintJob from the given config.
func NewPrintJobClient(c config) *PrintJobClient {
	return &PrintJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `printjob.Hooks(f(g(h())))`.
func (c *PrintJobClient) Use(hooks ...Hook) {
	c.hooks.PrintJob = append(c.hooks.PrintJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `printjob.Intercept(f(g(h())))`.
func (c *PrintJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.PrintJob = append(c.inters.PrintJob, interceptors...)
}

// Create returns a builder for creating a PrintJob entity.
func (c *PrintJobClient) Create() *PrintJobCreate {
	mutation := newPrintJobMutation(c.config, OpCreate)
	return &PrintJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PrintJob entities.
func (c *PrintJobClient) CreateBulk(builders ...*PrintJobCreate) *PrintJobCreateBulk {
	return &PrintJobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrintJobClient) MapCreateBulk(slice any, setFunc func(*PrintJobCreate, int)) *PrintJobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrintJobCreateBulk{err: fmt.Errorf("calling to PrintJobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrintJobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrintJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PrintJob.
func (c *PrintJobClient) Update() *PrintJobUpdate {
	mutation := newPrintJobMutation(c.config, OpUpdate)
	return &PrintJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrintJobClient) UpdateOne(pj *PrintJob) *PrintJobUpdateOne {
	mutation := newPrintJobMutation(c.config, OpUpdateOne, withPrintJob(pj))
	return &PrintJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrintJobClient) UpdateOneID(id pulid.ID) *PrintJobUpdateOne {
	mutation := newPrintJobMutation(c.config, OpUpdateOne, withPrintJobID(id))
	return &PrintJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PrintJob.
func (c *PrintJobClient) Delete() *PrintJobDelete {
	mutation := newPrintJobMutation(c.config, OpDelete)
	return &PrintJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrintJobClient) DeleteOne(pj *PrintJob) *PrintJobDeleteOne {
	return c.DeleteOneID(pj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrintJobClient) DeleteOneID(id pulid.ID) *PrintJobDeleteOne {
	builder := c.Delete().Where(printjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrintJobDeleteOne{builder}
}

// Query returns a query builder for PrintJob.
func (c *PrintJobClient) Query() *PrintJobQuery {
	return &PrintJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrintJob},
		inters: c.Interceptors(),
	}
}

// Get returns a PrintJob entity by its id.
func (c *PrintJobClient) Get(ctx context.Context, id pulid.ID) (*PrintJob, error) {
	return c.Query().Where(printjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrintJobClient) GetX(ctx context.Context, id pulid.ID) *PrintJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a PrintJob.
func (c *PrintJobClient) QueryTenant(pj *PrintJob) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printjob.Table, printjob.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, printjob.TenantTable, printjob.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrinter queries the printer edge of a PrintJob.
func (c *PrintJobClient) QueryPrinter(pj *PrintJob) *PrinterQuery {
	query := (&PrinterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printjob.Table, printjob.FieldID, id),
			sqlgraph.To(printer.Table, printer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, printjob.PrinterTable, printjob.PrinterColumn),
		)
		fromV = sqlgraph.Neighbors(pj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a PrintJob.
func (c *PrintJobClient) QueryColli(pj *PrintJob) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printjob.Table, printjob.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, printjob.ColliTable, printjob.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(pj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentParcel queries the shipment_parcel edge of a PrintJob.
func (c *PrintJobClient) QueryShipmentParcel(pj *PrintJob) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printjob.Table, printjob.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, printjob.ShipmentParcelTable, printjob.ShipmentParcelColumn),
		)
		fromV = sqlgraph.Neighbors(pj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrintJobClient) Hooks() []Hook {
	hooks := c.hooks.PrintJob
	return append(hooks[:len(hooks):len(hooks)], printjob.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PrintJobClient) Interceptors() []Interceptor {
	return c.inters.PrintJob
}

func (c *PrintJobClient) mutate(ctx context.Context, m *PrintJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrintJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrintJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrintJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrintJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PrintJob mutation op: %q", m.Op())
	}
}

// PrinterClient is a client for the Printer schema.
type PrinterClient struct {
	config
}

// NewPrinterClient returns a client for the Printer from the given config.
func NewPrinterClient(c config) *PrinterClient {
	return &PrinterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `printer.Hooks(f(g(h())))`.
func (c *PrinterClient) Use(hooks ...Hook) {
	c.hooks.Printer = append(c.hooks.Printer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `printer.Intercept(f(g(h())))`.
func (c *PrinterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Printer = append(c.inters.Printer, interceptors...)
}

// Create returns a builder for creating a Printer entity.
func (c *PrinterClient) Create() *PrinterCreate {
	mutation := newPrinterMutation(c.config, OpCreate)
	return &PrinterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Printer entities.
func (c *PrinterClient) CreateBulk(builders ...*PrinterCreate) *PrinterCreateBulk {
	return &PrinterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrinterClient) MapCreateBulk(slice any, setFunc func(*PrinterCreate, int)) *PrinterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrinterCreateBulk{err: fmt.Errorf("calling to PrinterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrinterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrinterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Printer.
func (c *PrinterClient) Update() *PrinterUpdate {
	mutation := newPrinterMutation(c.config, OpUpdate)
	return &PrinterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrinterClient) UpdateOne(pr *Printer) *PrinterUpdateOne {
	mutation := newPrinterMutation(c.config, OpUpdateOne, withPrinter(pr))
	return &PrinterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrinterClient) UpdateOneID(id pulid.ID) *PrinterUpdateOne {
	mutation := newPrinterMutation(c.config, OpUpdateOne, withPrinterID(id))
	return &PrinterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Printer.
func (c *PrinterClient) Delete() *PrinterDelete {
	mutation := newPrinterMutation(c.config, OpDelete)
	return &PrinterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrinterClient) DeleteOne(pr *Printer) *PrinterDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrinterClient) DeleteOneID(id pulid.ID) *PrinterDeleteOne {
	builder := c.Delete().Where(printer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrinterDeleteOne{builder}
}

// Query returns a query builder for Printer.
func (c *PrinterClient) Query() *PrinterQuery {
	return &PrinterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrinter},
		inters: c.Interceptors(),
	}
}

// Get returns a Printer entity by its id.
func (c *PrinterClient) Get(ctx context.Context, id pulid.ID) (*Printer, error) {
	return c.Query().Where(printer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrinterClient) GetX(ctx context.Context, id pulid.ID) *Printer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Printer.
func (c *PrinterClient) QueryTenant(pr *Printer) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printer.Table, printer.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, printer.TenantTable, printer.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkstation queries the workstation edge of a Printer.
func (c *PrinterClient) QueryWorkstation(pr *Printer) *WorkstationQuery {
	query := (&WorkstationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printer.Table, printer.FieldID, id),
			sqlgraph.To(workstation.Table, workstation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, printer.WorkstationTable, printer.WorkstationColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrintJobs queries the print_jobs edge of a Printer.
func (c *PrinterClient) QueryPrintJobs(pr *Printer) *PrintJobQuery {
	query := (&PrintJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(printer.Table, printer.FieldID, id),
			sqlgraph.To(printjob.Table, printjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, printer.PrintJobsTable, printer.PrintJobsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrinterClient) Hooks() []Hook {
	hooks := c.hooks.Printer
	return append(hooks[:len(hooks):len(hooks)], printer.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PrinterClient) Interceptors() []Interceptor {
	return c.inters.Printer
}

func (c *PrinterClient) mutate(ctx context.Context, m *PrinterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrinterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrinterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrinterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrinterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Printer mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id pulid.ID) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id pulid.ID) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id pulid.ID) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id pulid.ID) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Product.
func (c *ProductClient) QueryTenant(pr *Product) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, product.TenantTable, product.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductTags queries the product_tags edge of a Product.
func (c *ProductClient) QueryProductTags(pr *Product) *ProductTagQuery {
	query := (&ProductTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(producttag.Table, producttag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.ProductTagsTable, product.ProductTagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductVariant queries the product_variant edge of a Product.
func (c *ProductClient) QueryProductVariant(pr *Product) *ProductVariantQuery {
	query := (&ProductVariantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductVariantTable, product.ProductVariantColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductImage queries the product_image edge of a Product.
func (c *ProductClient) QueryProductImage(pr *Product) *ProductImageQuery {
	query := (&ProductImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productimage.Table, productimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, product.ProductImageTable, product.ProductImageColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	hooks := c.hooks.Product
	return append(hooks[:len(hooks):len(hooks)], product.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// ProductImageClient is a client for the ProductImage schema.
type ProductImageClient struct {
	config
}

// NewProductImageClient returns a client for the ProductImage from the given config.
func NewProductImageClient(c config) *ProductImageClient {
	return &ProductImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productimage.Hooks(f(g(h())))`.
func (c *ProductImageClient) Use(hooks ...Hook) {
	c.hooks.ProductImage = append(c.hooks.ProductImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productimage.Intercept(f(g(h())))`.
func (c *ProductImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductImage = append(c.inters.ProductImage, interceptors...)
}

// Create returns a builder for creating a ProductImage entity.
func (c *ProductImageClient) Create() *ProductImageCreate {
	mutation := newProductImageMutation(c.config, OpCreate)
	return &ProductImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductImage entities.
func (c *ProductImageClient) CreateBulk(builders ...*ProductImageCreate) *ProductImageCreateBulk {
	return &ProductImageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductImageClient) MapCreateBulk(slice any, setFunc func(*ProductImageCreate, int)) *ProductImageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductImageCreateBulk{err: fmt.Errorf("calling to ProductImageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductImageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductImage.
func (c *ProductImageClient) Update() *ProductImageUpdate {
	mutation := newProductImageMutation(c.config, OpUpdate)
	return &ProductImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductImageClient) UpdateOne(pi *ProductImage) *ProductImageUpdateOne {
	mutation := newProductImageMutation(c.config, OpUpdateOne, withProductImage(pi))
	return &ProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductImageClient) UpdateOneID(id pulid.ID) *ProductImageUpdateOne {
	mutation := newProductImageMutation(c.config, OpUpdateOne, withProductImageID(id))
	return &ProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductImage.
func (c *ProductImageClient) Delete() *ProductImageDelete {
	mutation := newProductImageMutation(c.config, OpDelete)
	return &ProductImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductImageClient) DeleteOne(pi *ProductImage) *ProductImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductImageClient) DeleteOneID(id pulid.ID) *ProductImageDeleteOne {
	builder := c.Delete().Where(productimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductImageDeleteOne{builder}
}

// Query returns a query builder for ProductImage.
func (c *ProductImageClient) Query() *ProductImageQuery {
	return &ProductImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductImage entity by its id.
func (c *ProductImageClient) Get(ctx context.Context, id pulid.ID) (*ProductImage, error) {
	return c.Query().Where(productimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductImageClient) GetX(ctx context.Context, id pulid.ID) *ProductImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ProductImage.
func (c *ProductImageClient) QueryTenant(pi *ProductImage) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productimage.TenantTable, productimage.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a ProductImage.
func (c *ProductImageClient) QueryProduct(pi *ProductImage) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productimage.ProductTable, productimage.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductVariant queries the product_variant edge of a ProductImage.
func (c *ProductImageClient) QueryProductVariant(pi *ProductImage) *ProductVariantQuery {
	query := (&ProductVariantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, id),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productimage.ProductVariantTable, productimage.ProductVariantPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductImageClient) Hooks() []Hook {
	hooks := c.hooks.ProductImage
	return append(hooks[:len(hooks):len(hooks)], productimage.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProductImageClient) Interceptors() []Interceptor {
	return c.inters.ProductImage
}

func (c *ProductImageClient) mutate(ctx context.Context, m *ProductImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductImage mutation op: %q", m.Op())
	}
}

// ProductTagClient is a client for the ProductTag schema.
type ProductTagClient struct {
	config
}

// NewProductTagClient returns a client for the ProductTag from the given config.
func NewProductTagClient(c config) *ProductTagClient {
	return &ProductTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `producttag.Hooks(f(g(h())))`.
func (c *ProductTagClient) Use(hooks ...Hook) {
	c.hooks.ProductTag = append(c.hooks.ProductTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `producttag.Intercept(f(g(h())))`.
func (c *ProductTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductTag = append(c.inters.ProductTag, interceptors...)
}

// Create returns a builder for creating a ProductTag entity.
func (c *ProductTagClient) Create() *ProductTagCreate {
	mutation := newProductTagMutation(c.config, OpCreate)
	return &ProductTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductTag entities.
func (c *ProductTagClient) CreateBulk(builders ...*ProductTagCreate) *ProductTagCreateBulk {
	return &ProductTagCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductTagClient) MapCreateBulk(slice any, setFunc func(*ProductTagCreate, int)) *ProductTagCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductTagCreateBulk{err: fmt.Errorf("calling to ProductTagClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductTagCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductTag.
func (c *ProductTagClient) Update() *ProductTagUpdate {
	mutation := newProductTagMutation(c.config, OpUpdate)
	return &ProductTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductTagClient) UpdateOne(pt *ProductTag) *ProductTagUpdateOne {
	mutation := newProductTagMutation(c.config, OpUpdateOne, withProductTag(pt))
	return &ProductTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductTagClient) UpdateOneID(id pulid.ID) *ProductTagUpdateOne {
	mutation := newProductTagMutation(c.config, OpUpdateOne, withProductTagID(id))
	return &ProductTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductTag.
func (c *ProductTagClient) Delete() *ProductTagDelete {
	mutation := newProductTagMutation(c.config, OpDelete)
	return &ProductTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductTagClient) DeleteOne(pt *ProductTag) *ProductTagDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductTagClient) DeleteOneID(id pulid.ID) *ProductTagDeleteOne {
	builder := c.Delete().Where(producttag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductTagDeleteOne{builder}
}

// Query returns a query builder for ProductTag.
func (c *ProductTagClient) Query() *ProductTagQuery {
	return &ProductTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductTag},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductTag entity by its id.
func (c *ProductTagClient) Get(ctx context.Context, id pulid.ID) (*ProductTag, error) {
	return c.Query().Where(producttag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductTagClient) GetX(ctx context.Context, id pulid.ID) *ProductTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ProductTag.
func (c *ProductTagClient) QueryTenant(pt *ProductTag) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(producttag.Table, producttag.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, producttag.TenantTable, producttag.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a ProductTag.
func (c *ProductTagClient) QueryProducts(pt *ProductTag) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(producttag.Table, producttag.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, producttag.ProductsTable, producttag.ProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductTagClient) Hooks() []Hook {
	hooks := c.hooks.ProductTag
	return append(hooks[:len(hooks):len(hooks)], producttag.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProductTagClient) Interceptors() []Interceptor {
	return c.inters.ProductTag
}

func (c *ProductTagClient) mutate(ctx context.Context, m *ProductTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductTag mutation op: %q", m.Op())
	}
}

// ProductVariantClient is a client for the ProductVariant schema.
type ProductVariantClient struct {
	config
}

// NewProductVariantClient returns a client for the ProductVariant from the given config.
func NewProductVariantClient(c config) *ProductVariantClient {
	return &ProductVariantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productvariant.Hooks(f(g(h())))`.
func (c *ProductVariantClient) Use(hooks ...Hook) {
	c.hooks.ProductVariant = append(c.hooks.ProductVariant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productvariant.Intercept(f(g(h())))`.
func (c *ProductVariantClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductVariant = append(c.inters.ProductVariant, interceptors...)
}

// Create returns a builder for creating a ProductVariant entity.
func (c *ProductVariantClient) Create() *ProductVariantCreate {
	mutation := newProductVariantMutation(c.config, OpCreate)
	return &ProductVariantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductVariant entities.
func (c *ProductVariantClient) CreateBulk(builders ...*ProductVariantCreate) *ProductVariantCreateBulk {
	return &ProductVariantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductVariantClient) MapCreateBulk(slice any, setFunc func(*ProductVariantCreate, int)) *ProductVariantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductVariantCreateBulk{err: fmt.Errorf("calling to ProductVariantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductVariantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductVariantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductVariant.
func (c *ProductVariantClient) Update() *ProductVariantUpdate {
	mutation := newProductVariantMutation(c.config, OpUpdate)
	return &ProductVariantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductVariantClient) UpdateOne(pv *ProductVariant) *ProductVariantUpdateOne {
	mutation := newProductVariantMutation(c.config, OpUpdateOne, withProductVariant(pv))
	return &ProductVariantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductVariantClient) UpdateOneID(id pulid.ID) *ProductVariantUpdateOne {
	mutation := newProductVariantMutation(c.config, OpUpdateOne, withProductVariantID(id))
	return &ProductVariantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductVariant.
func (c *ProductVariantClient) Delete() *ProductVariantDelete {
	mutation := newProductVariantMutation(c.config, OpDelete)
	return &ProductVariantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductVariantClient) DeleteOne(pv *ProductVariant) *ProductVariantDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductVariantClient) DeleteOneID(id pulid.ID) *ProductVariantDeleteOne {
	builder := c.Delete().Where(productvariant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductVariantDeleteOne{builder}
}

// Query returns a query builder for ProductVariant.
func (c *ProductVariantClient) Query() *ProductVariantQuery {
	return &ProductVariantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductVariant},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductVariant entity by its id.
func (c *ProductVariantClient) Get(ctx context.Context, id pulid.ID) (*ProductVariant, error) {
	return c.Query().Where(productvariant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductVariantClient) GetX(ctx context.Context, id pulid.ID) *ProductVariant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ProductVariant.
func (c *ProductVariantClient) QueryTenant(pv *ProductVariant) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productvariant.Table, productvariant.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productvariant.TenantTable, productvariant.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProduct queries the product edge of a ProductVariant.
func (c *ProductVariantClient) QueryProduct(pv *ProductVariant) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productvariant.Table, productvariant.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productvariant.ProductTable, productvariant.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderLines queries the order_lines edge of a ProductVariant.
func (c *ProductVariantClient) QueryOrderLines(pv *ProductVariant) *OrderLineQuery {
	query := (&OrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productvariant.Table, productvariant.FieldID, id),
			sqlgraph.To(orderline.Table, orderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, productvariant.OrderLinesTable, productvariant.OrderLinesColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductImage queries the product_image edge of a ProductVariant.
func (c *ProductVariantClient) QueryProductImage(pv *ProductVariant) *ProductImageQuery {
	query := (&ProductImageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productvariant.Table, productvariant.FieldID, id),
			sqlgraph.To(productimage.Table, productimage.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, productvariant.ProductImageTable, productvariant.ProductImagePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInventoryItem queries the inventory_item edge of a ProductVariant.
func (c *ProductVariantClient) QueryInventoryItem(pv *ProductVariant) *InventoryItemQuery {
	query := (&InventoryItemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productvariant.Table, productvariant.FieldID, id),
			sqlgraph.To(inventoryitem.Table, inventoryitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, productvariant.InventoryItemTable, productvariant.InventoryItemColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductVariantClient) Hooks() []Hook {
	hooks := c.hooks.ProductVariant
	return append(hooks[:len(hooks):len(hooks)], productvariant.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ProductVariantClient) Interceptors() []Interceptor {
	return c.inters.ProductVariant
}

func (c *ProductVariantClient) mutate(ctx context.Context, m *ProductVariantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductVariantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductVariantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductVariantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductVariantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductVariant mutation op: %q", m.Op())
	}
}

// ReturnColliClient is a client for the ReturnColli schema.
type ReturnColliClient struct {
	config
}

// NewReturnColliClient returns a client for the ReturnColli from the given config.
func NewReturnColliClient(c config) *ReturnColliClient {
	return &ReturnColliClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `returncolli.Hooks(f(g(h())))`.
func (c *ReturnColliClient) Use(hooks ...Hook) {
	c.hooks.ReturnColli = append(c.hooks.ReturnColli, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `returncolli.Intercept(f(g(h())))`.
func (c *ReturnColliClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReturnColli = append(c.inters.ReturnColli, interceptors...)
}

// Create returns a builder for creating a ReturnColli entity.
func (c *ReturnColliClient) Create() *ReturnColliCreate {
	mutation := newReturnColliMutation(c.config, OpCreate)
	return &ReturnColliCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReturnColli entities.
func (c *ReturnColliClient) CreateBulk(builders ...*ReturnColliCreate) *ReturnColliCreateBulk {
	return &ReturnColliCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReturnColliClient) MapCreateBulk(slice any, setFunc func(*ReturnColliCreate, int)) *ReturnColliCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReturnColliCreateBulk{err: fmt.Errorf("calling to ReturnColliClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReturnColliCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReturnColliCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReturnColli.
func (c *ReturnColliClient) Update() *ReturnColliUpdate {
	mutation := newReturnColliMutation(c.config, OpUpdate)
	return &ReturnColliUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReturnColliClient) UpdateOne(rc *ReturnColli) *ReturnColliUpdateOne {
	mutation := newReturnColliMutation(c.config, OpUpdateOne, withReturnColli(rc))
	return &ReturnColliUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReturnColliClient) UpdateOneID(id pulid.ID) *ReturnColliUpdateOne {
	mutation := newReturnColliMutation(c.config, OpUpdateOne, withReturnColliID(id))
	return &ReturnColliUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReturnColli.
func (c *ReturnColliClient) Delete() *ReturnColliDelete {
	mutation := newReturnColliMutation(c.config, OpDelete)
	return &ReturnColliDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReturnColliClient) DeleteOne(rc *ReturnColli) *ReturnColliDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReturnColliClient) DeleteOneID(id pulid.ID) *ReturnColliDeleteOne {
	builder := c.Delete().Where(returncolli.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReturnColliDeleteOne{builder}
}

// Query returns a query builder for ReturnColli.
func (c *ReturnColliClient) Query() *ReturnColliQuery {
	return &ReturnColliQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReturnColli},
		inters: c.Interceptors(),
	}
}

// Get returns a ReturnColli entity by its id.
func (c *ReturnColliClient) Get(ctx context.Context, id pulid.ID) (*ReturnColli, error) {
	return c.Query().Where(returncolli.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReturnColliClient) GetX(ctx context.Context, id pulid.ID) *ReturnColli {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ReturnColli.
func (c *ReturnColliClient) QueryTenant(rc *ReturnColli) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.TenantTable, returncolli.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipient queries the recipient edge of a ReturnColli.
func (c *ReturnColliClient) QueryRecipient(rc *ReturnColli) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.RecipientTable, returncolli.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySender queries the sender edge of a ReturnColli.
func (c *ReturnColliClient) QuerySender(rc *ReturnColli) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.SenderTable, returncolli.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a ReturnColli.
func (c *ReturnColliClient) QueryOrder(rc *ReturnColli) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returncolli.OrderTable, returncolli.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOption queries the delivery_option edge of a ReturnColli.
func (c *ReturnColliClient) QueryDeliveryOption(rc *ReturnColli) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.DeliveryOptionTable, returncolli.DeliveryOptionColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortal queries the return_portal edge of a ReturnColli.
func (c *ReturnColliClient) QueryReturnPortal(rc *ReturnColli) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.ReturnPortalTable, returncolli.ReturnPortalColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a ReturnColli.
func (c *ReturnColliClient) QueryPackaging(rc *ReturnColli) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncolli.PackagingTable, returncolli.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnOrderLine queries the return_order_line edge of a ReturnColli.
func (c *ReturnColliClient) QueryReturnOrderLine(rc *ReturnColli) *ReturnOrderLineQuery {
	query := (&ReturnOrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(returnorderline.Table, returnorderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, returncolli.ReturnOrderLineTable, returncolli.ReturnOrderLineColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColliHistory queries the return_colli_history edge of a ReturnColli.
func (c *ReturnColliClient) QueryReturnColliHistory(rc *ReturnColli) *ReturnColliHistoryQuery {
	query := (&ReturnColliHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncolli.Table, returncolli.FieldID, id),
			sqlgraph.To(returncollihistory.Table, returncollihistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, returncolli.ReturnColliHistoryTable, returncolli.ReturnColliHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReturnColliClient) Hooks() []Hook {
	hooks := c.hooks.ReturnColli
	return append(hooks[:len(hooks):len(hooks)], returncolli.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReturnColliClient) Interceptors() []Interceptor {
	return c.inters.ReturnColli
}

func (c *ReturnColliClient) mutate(ctx context.Context, m *ReturnColliMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReturnColliCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReturnColliUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReturnColliUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReturnColliDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReturnColli mutation op: %q", m.Op())
	}
}

// ReturnColliHistoryClient is a client for the ReturnColliHistory schema.
type ReturnColliHistoryClient struct {
	config
}

// NewReturnColliHistoryClient returns a client for the ReturnColliHistory from the given config.
func NewReturnColliHistoryClient(c config) *ReturnColliHistoryClient {
	return &ReturnColliHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `returncollihistory.Hooks(f(g(h())))`.
func (c *ReturnColliHistoryClient) Use(hooks ...Hook) {
	c.hooks.ReturnColliHistory = append(c.hooks.ReturnColliHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `returncollihistory.Intercept(f(g(h())))`.
func (c *ReturnColliHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReturnColliHistory = append(c.inters.ReturnColliHistory, interceptors...)
}

// Create returns a builder for creating a ReturnColliHistory entity.
func (c *ReturnColliHistoryClient) Create() *ReturnColliHistoryCreate {
	mutation := newReturnColliHistoryMutation(c.config, OpCreate)
	return &ReturnColliHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReturnColliHistory entities.
func (c *ReturnColliHistoryClient) CreateBulk(builders ...*ReturnColliHistoryCreate) *ReturnColliHistoryCreateBulk {
	return &ReturnColliHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReturnColliHistoryClient) MapCreateBulk(slice any, setFunc func(*ReturnColliHistoryCreate, int)) *ReturnColliHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReturnColliHistoryCreateBulk{err: fmt.Errorf("calling to ReturnColliHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReturnColliHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReturnColliHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReturnColliHistory.
func (c *ReturnColliHistoryClient) Update() *ReturnColliHistoryUpdate {
	mutation := newReturnColliHistoryMutation(c.config, OpUpdate)
	return &ReturnColliHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReturnColliHistoryClient) UpdateOne(rch *ReturnColliHistory) *ReturnColliHistoryUpdateOne {
	mutation := newReturnColliHistoryMutation(c.config, OpUpdateOne, withReturnColliHistory(rch))
	return &ReturnColliHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReturnColliHistoryClient) UpdateOneID(id pulid.ID) *ReturnColliHistoryUpdateOne {
	mutation := newReturnColliHistoryMutation(c.config, OpUpdateOne, withReturnColliHistoryID(id))
	return &ReturnColliHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReturnColliHistory.
func (c *ReturnColliHistoryClient) Delete() *ReturnColliHistoryDelete {
	mutation := newReturnColliHistoryMutation(c.config, OpDelete)
	return &ReturnColliHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReturnColliHistoryClient) DeleteOne(rch *ReturnColliHistory) *ReturnColliHistoryDeleteOne {
	return c.DeleteOneID(rch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReturnColliHistoryClient) DeleteOneID(id pulid.ID) *ReturnColliHistoryDeleteOne {
	builder := c.Delete().Where(returncollihistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReturnColliHistoryDeleteOne{builder}
}

// Query returns a query builder for ReturnColliHistory.
func (c *ReturnColliHistoryClient) Query() *ReturnColliHistoryQuery {
	return &ReturnColliHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReturnColliHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a ReturnColliHistory entity by its id.
func (c *ReturnColliHistoryClient) Get(ctx context.Context, id pulid.ID) (*ReturnColliHistory, error) {
	return c.Query().Where(returncollihistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReturnColliHistoryClient) GetX(ctx context.Context, id pulid.ID) *ReturnColliHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChangeHistory queries the change_history edge of a ReturnColliHistory.
func (c *ReturnColliHistoryClient) QueryChangeHistory(rch *ReturnColliHistory) *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncollihistory.Table, returncollihistory.FieldID, id),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returncollihistory.ChangeHistoryTable, returncollihistory.ChangeHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(rch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a ReturnColliHistory.
func (c *ReturnColliHistoryClient) QueryTenant(rch *ReturnColliHistory) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncollihistory.Table, returncollihistory.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returncollihistory.TenantTable, returncollihistory.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(rch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColli queries the return_colli edge of a ReturnColliHistory.
func (c *ReturnColliHistoryClient) QueryReturnColli(rch *ReturnColliHistory) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returncollihistory.Table, returncollihistory.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returncollihistory.ReturnColliTable, returncollihistory.ReturnColliColumn),
		)
		fromV = sqlgraph.Neighbors(rch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReturnColliHistoryClient) Hooks() []Hook {
	hooks := c.hooks.ReturnColliHistory
	return append(hooks[:len(hooks):len(hooks)], returncollihistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReturnColliHistoryClient) Interceptors() []Interceptor {
	return c.inters.ReturnColliHistory
}

func (c *ReturnColliHistoryClient) mutate(ctx context.Context, m *ReturnColliHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReturnColliHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReturnColliHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReturnColliHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReturnColliHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReturnColliHistory mutation op: %q", m.Op())
	}
}

// ReturnOrderLineClient is a client for the ReturnOrderLine schema.
type ReturnOrderLineClient struct {
	config
}

// NewReturnOrderLineClient returns a client for the ReturnOrderLine from the given config.
func NewReturnOrderLineClient(c config) *ReturnOrderLineClient {
	return &ReturnOrderLineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `returnorderline.Hooks(f(g(h())))`.
func (c *ReturnOrderLineClient) Use(hooks ...Hook) {
	c.hooks.ReturnOrderLine = append(c.hooks.ReturnOrderLine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `returnorderline.Intercept(f(g(h())))`.
func (c *ReturnOrderLineClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReturnOrderLine = append(c.inters.ReturnOrderLine, interceptors...)
}

// Create returns a builder for creating a ReturnOrderLine entity.
func (c *ReturnOrderLineClient) Create() *ReturnOrderLineCreate {
	mutation := newReturnOrderLineMutation(c.config, OpCreate)
	return &ReturnOrderLineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReturnOrderLine entities.
func (c *ReturnOrderLineClient) CreateBulk(builders ...*ReturnOrderLineCreate) *ReturnOrderLineCreateBulk {
	return &ReturnOrderLineCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReturnOrderLineClient) MapCreateBulk(slice any, setFunc func(*ReturnOrderLineCreate, int)) *ReturnOrderLineCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReturnOrderLineCreateBulk{err: fmt.Errorf("calling to ReturnOrderLineClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReturnOrderLineCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReturnOrderLineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReturnOrderLine.
func (c *ReturnOrderLineClient) Update() *ReturnOrderLineUpdate {
	mutation := newReturnOrderLineMutation(c.config, OpUpdate)
	return &ReturnOrderLineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReturnOrderLineClient) UpdateOne(rol *ReturnOrderLine) *ReturnOrderLineUpdateOne {
	mutation := newReturnOrderLineMutation(c.config, OpUpdateOne, withReturnOrderLine(rol))
	return &ReturnOrderLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReturnOrderLineClient) UpdateOneID(id pulid.ID) *ReturnOrderLineUpdateOne {
	mutation := newReturnOrderLineMutation(c.config, OpUpdateOne, withReturnOrderLineID(id))
	return &ReturnOrderLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReturnOrderLine.
func (c *ReturnOrderLineClient) Delete() *ReturnOrderLineDelete {
	mutation := newReturnOrderLineMutation(c.config, OpDelete)
	return &ReturnOrderLineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReturnOrderLineClient) DeleteOne(rol *ReturnOrderLine) *ReturnOrderLineDeleteOne {
	return c.DeleteOneID(rol.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReturnOrderLineClient) DeleteOneID(id pulid.ID) *ReturnOrderLineDeleteOne {
	builder := c.Delete().Where(returnorderline.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReturnOrderLineDeleteOne{builder}
}

// Query returns a query builder for ReturnOrderLine.
func (c *ReturnOrderLineClient) Query() *ReturnOrderLineQuery {
	return &ReturnOrderLineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReturnOrderLine},
		inters: c.Interceptors(),
	}
}

// Get returns a ReturnOrderLine entity by its id.
func (c *ReturnOrderLineClient) Get(ctx context.Context, id pulid.ID) (*ReturnOrderLine, error) {
	return c.Query().Where(returnorderline.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReturnOrderLineClient) GetX(ctx context.Context, id pulid.ID) *ReturnOrderLine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ReturnOrderLine.
func (c *ReturnOrderLineClient) QueryTenant(rol *ReturnOrderLine) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnorderline.Table, returnorderline.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnorderline.TenantTable, returnorderline.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(rol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColli queries the return_colli edge of a ReturnOrderLine.
func (c *ReturnOrderLineClient) QueryReturnColli(rol *ReturnOrderLine) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnorderline.Table, returnorderline.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returnorderline.ReturnColliTable, returnorderline.ReturnColliColumn),
		)
		fromV = sqlgraph.Neighbors(rol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderLine queries the order_line edge of a ReturnOrderLine.
func (c *ReturnOrderLineClient) QueryOrderLine(rol *ReturnOrderLine) *OrderLineQuery {
	query := (&OrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnorderline.Table, returnorderline.FieldID, id),
			sqlgraph.To(orderline.Table, orderline.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnorderline.OrderLineTable, returnorderline.OrderLineColumn),
		)
		fromV = sqlgraph.Neighbors(rol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortalClaim queries the return_portal_claim edge of a ReturnOrderLine.
func (c *ReturnOrderLineClient) QueryReturnPortalClaim(rol *ReturnOrderLine) *ReturnPortalClaimQuery {
	query := (&ReturnPortalClaimClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rol.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnorderline.Table, returnorderline.FieldID, id),
			sqlgraph.To(returnportalclaim.Table, returnportalclaim.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnorderline.ReturnPortalClaimTable, returnorderline.ReturnPortalClaimColumn),
		)
		fromV = sqlgraph.Neighbors(rol.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReturnOrderLineClient) Hooks() []Hook {
	hooks := c.hooks.ReturnOrderLine
	return append(hooks[:len(hooks):len(hooks)], returnorderline.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReturnOrderLineClient) Interceptors() []Interceptor {
	return c.inters.ReturnOrderLine
}

func (c *ReturnOrderLineClient) mutate(ctx context.Context, m *ReturnOrderLineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReturnOrderLineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReturnOrderLineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReturnOrderLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReturnOrderLineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReturnOrderLine mutation op: %q", m.Op())
	}
}

// ReturnPortalClient is a client for the ReturnPortal schema.
type ReturnPortalClient struct {
	config
}

// NewReturnPortalClient returns a client for the ReturnPortal from the given config.
func NewReturnPortalClient(c config) *ReturnPortalClient {
	return &ReturnPortalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `returnportal.Hooks(f(g(h())))`.
func (c *ReturnPortalClient) Use(hooks ...Hook) {
	c.hooks.ReturnPortal = append(c.hooks.ReturnPortal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `returnportal.Intercept(f(g(h())))`.
func (c *ReturnPortalClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReturnPortal = append(c.inters.ReturnPortal, interceptors...)
}

// Create returns a builder for creating a ReturnPortal entity.
func (c *ReturnPortalClient) Create() *ReturnPortalCreate {
	mutation := newReturnPortalMutation(c.config, OpCreate)
	return &ReturnPortalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReturnPortal entities.
func (c *ReturnPortalClient) CreateBulk(builders ...*ReturnPortalCreate) *ReturnPortalCreateBulk {
	return &ReturnPortalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReturnPortalClient) MapCreateBulk(slice any, setFunc func(*ReturnPortalCreate, int)) *ReturnPortalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReturnPortalCreateBulk{err: fmt.Errorf("calling to ReturnPortalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReturnPortalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReturnPortalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReturnPortal.
func (c *ReturnPortalClient) Update() *ReturnPortalUpdate {
	mutation := newReturnPortalMutation(c.config, OpUpdate)
	return &ReturnPortalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReturnPortalClient) UpdateOne(rp *ReturnPortal) *ReturnPortalUpdateOne {
	mutation := newReturnPortalMutation(c.config, OpUpdateOne, withReturnPortal(rp))
	return &ReturnPortalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReturnPortalClient) UpdateOneID(id pulid.ID) *ReturnPortalUpdateOne {
	mutation := newReturnPortalMutation(c.config, OpUpdateOne, withReturnPortalID(id))
	return &ReturnPortalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReturnPortal.
func (c *ReturnPortalClient) Delete() *ReturnPortalDelete {
	mutation := newReturnPortalMutation(c.config, OpDelete)
	return &ReturnPortalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReturnPortalClient) DeleteOne(rp *ReturnPortal) *ReturnPortalDeleteOne {
	return c.DeleteOneID(rp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReturnPortalClient) DeleteOneID(id pulid.ID) *ReturnPortalDeleteOne {
	builder := c.Delete().Where(returnportal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReturnPortalDeleteOne{builder}
}

// Query returns a query builder for ReturnPortal.
func (c *ReturnPortalClient) Query() *ReturnPortalQuery {
	return &ReturnPortalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReturnPortal},
		inters: c.Interceptors(),
	}
}

// Get returns a ReturnPortal entity by its id.
func (c *ReturnPortalClient) Get(ctx context.Context, id pulid.ID) (*ReturnPortal, error) {
	return c.Query().Where(returnportal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReturnPortalClient) GetX(ctx context.Context, id pulid.ID) *ReturnPortal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryTenant(rp *ReturnPortal) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.TenantTable, returnportal.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortalClaim queries the return_portal_claim edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryReturnPortalClaim(rp *ReturnPortal) *ReturnPortalClaimQuery {
	query := (&ReturnPortalClaimClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(returnportalclaim.Table, returnportalclaim.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, returnportal.ReturnPortalClaimTable, returnportal.ReturnPortalClaimColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnLocation queries the return_location edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryReturnLocation(rp *ReturnPortal) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, returnportal.ReturnLocationTable, returnportal.ReturnLocationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDeliveryOptions queries the delivery_options edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryDeliveryOptions(rp *ReturnPortal) *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, returnportal.DeliveryOptionsTable, returnportal.DeliveryOptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnection queries the connection edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryConnection(rp *ReturnPortal) *ConnectionQuery {
	query := (&ConnectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, returnportal.ConnectionTable, returnportal.ConnectionColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailConfirmationLabel queries the email_confirmation_label edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryEmailConfirmationLabel(rp *ReturnPortal) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailConfirmationLabelTable, returnportal.EmailConfirmationLabelColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailConfirmationQrCode queries the email_confirmation_qr_code edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryEmailConfirmationQrCode(rp *ReturnPortal) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailConfirmationQrCodeTable, returnportal.EmailConfirmationQrCodeColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailReceived queries the email_received edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryEmailReceived(rp *ReturnPortal) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailReceivedTable, returnportal.EmailReceivedColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailAccepted queries the email_accepted edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryEmailAccepted(rp *ReturnPortal) *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailAcceptedTable, returnportal.EmailAcceptedColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnColli queries the return_colli edge of a ReturnPortal.
func (c *ReturnPortalClient) QueryReturnColli(rp *ReturnPortal) *ReturnColliQuery {
	query := (&ReturnColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, id),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, returnportal.ReturnColliTable, returnportal.ReturnColliColumn),
		)
		fromV = sqlgraph.Neighbors(rp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReturnPortalClient) Hooks() []Hook {
	hooks := c.hooks.ReturnPortal
	return append(hooks[:len(hooks):len(hooks)], returnportal.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReturnPortalClient) Interceptors() []Interceptor {
	return c.inters.ReturnPortal
}

func (c *ReturnPortalClient) mutate(ctx context.Context, m *ReturnPortalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReturnPortalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReturnPortalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReturnPortalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReturnPortalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReturnPortal mutation op: %q", m.Op())
	}
}

// ReturnPortalClaimClient is a client for the ReturnPortalClaim schema.
type ReturnPortalClaimClient struct {
	config
}

// NewReturnPortalClaimClient returns a client for the ReturnPortalClaim from the given config.
func NewReturnPortalClaimClient(c config) *ReturnPortalClaimClient {
	return &ReturnPortalClaimClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `returnportalclaim.Hooks(f(g(h())))`.
func (c *ReturnPortalClaimClient) Use(hooks ...Hook) {
	c.hooks.ReturnPortalClaim = append(c.hooks.ReturnPortalClaim, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `returnportalclaim.Intercept(f(g(h())))`.
func (c *ReturnPortalClaimClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReturnPortalClaim = append(c.inters.ReturnPortalClaim, interceptors...)
}

// Create returns a builder for creating a ReturnPortalClaim entity.
func (c *ReturnPortalClaimClient) Create() *ReturnPortalClaimCreate {
	mutation := newReturnPortalClaimMutation(c.config, OpCreate)
	return &ReturnPortalClaimCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReturnPortalClaim entities.
func (c *ReturnPortalClaimClient) CreateBulk(builders ...*ReturnPortalClaimCreate) *ReturnPortalClaimCreateBulk {
	return &ReturnPortalClaimCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReturnPortalClaimClient) MapCreateBulk(slice any, setFunc func(*ReturnPortalClaimCreate, int)) *ReturnPortalClaimCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReturnPortalClaimCreateBulk{err: fmt.Errorf("calling to ReturnPortalClaimClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReturnPortalClaimCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReturnPortalClaimCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReturnPortalClaim.
func (c *ReturnPortalClaimClient) Update() *ReturnPortalClaimUpdate {
	mutation := newReturnPortalClaimMutation(c.config, OpUpdate)
	return &ReturnPortalClaimUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReturnPortalClaimClient) UpdateOne(rpc *ReturnPortalClaim) *ReturnPortalClaimUpdateOne {
	mutation := newReturnPortalClaimMutation(c.config, OpUpdateOne, withReturnPortalClaim(rpc))
	return &ReturnPortalClaimUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReturnPortalClaimClient) UpdateOneID(id pulid.ID) *ReturnPortalClaimUpdateOne {
	mutation := newReturnPortalClaimMutation(c.config, OpUpdateOne, withReturnPortalClaimID(id))
	return &ReturnPortalClaimUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReturnPortalClaim.
func (c *ReturnPortalClaimClient) Delete() *ReturnPortalClaimDelete {
	mutation := newReturnPortalClaimMutation(c.config, OpDelete)
	return &ReturnPortalClaimDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReturnPortalClaimClient) DeleteOne(rpc *ReturnPortalClaim) *ReturnPortalClaimDeleteOne {
	return c.DeleteOneID(rpc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReturnPortalClaimClient) DeleteOneID(id pulid.ID) *ReturnPortalClaimDeleteOne {
	builder := c.Delete().Where(returnportalclaim.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReturnPortalClaimDeleteOne{builder}
}

// Query returns a query builder for ReturnPortalClaim.
func (c *ReturnPortalClaimClient) Query() *ReturnPortalClaimQuery {
	return &ReturnPortalClaimQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReturnPortalClaim},
		inters: c.Interceptors(),
	}
}

// Get returns a ReturnPortalClaim entity by its id.
func (c *ReturnPortalClaimClient) Get(ctx context.Context, id pulid.ID) (*ReturnPortalClaim, error) {
	return c.Query().Where(returnportalclaim.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReturnPortalClaimClient) GetX(ctx context.Context, id pulid.ID) *ReturnPortalClaim {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ReturnPortalClaim.
func (c *ReturnPortalClaimClient) QueryTenant(rpc *ReturnPortalClaim) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportalclaim.TenantTable, returnportalclaim.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(rpc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnPortal queries the return_portal edge of a ReturnPortalClaim.
func (c *ReturnPortalClaimClient) QueryReturnPortal(rpc *ReturnPortalClaim) *ReturnPortalQuery {
	query := (&ReturnPortalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, id),
			sqlgraph.To(returnportal.Table, returnportal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, returnportalclaim.ReturnPortalTable, returnportalclaim.ReturnPortalColumn),
		)
		fromV = sqlgraph.Neighbors(rpc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnLocation queries the return_location edge of a ReturnPortalClaim.
func (c *ReturnPortalClaimClient) QueryReturnLocation(rpc *ReturnPortalClaim) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportalclaim.ReturnLocationTable, returnportalclaim.ReturnLocationColumn),
		)
		fromV = sqlgraph.Neighbors(rpc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReturnOrderLine queries the return_order_line edge of a ReturnPortalClaim.
func (c *ReturnPortalClaimClient) QueryReturnOrderLine(rpc *ReturnPortalClaim) *ReturnOrderLineQuery {
	query := (&ReturnOrderLineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rpc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportalclaim.Table, returnportalclaim.FieldID, id),
			sqlgraph.To(returnorderline.Table, returnorderline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, returnportalclaim.ReturnOrderLineTable, returnportalclaim.ReturnOrderLineColumn),
		)
		fromV = sqlgraph.Neighbors(rpc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReturnPortalClaimClient) Hooks() []Hook {
	hooks := c.hooks.ReturnPortalClaim
	return append(hooks[:len(hooks):len(hooks)], returnportalclaim.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReturnPortalClaimClient) Interceptors() []Interceptor {
	return c.inters.ReturnPortalClaim
}

func (c *ReturnPortalClaimClient) mutate(ctx context.Context, m *ReturnPortalClaimMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReturnPortalClaimCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReturnPortalClaimUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReturnPortalClaimUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReturnPortalClaimDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReturnPortalClaim mutation op: %q", m.Op())
	}
}

// SeatGroupClient is a client for the SeatGroup schema.
type SeatGroupClient struct {
	config
}

// NewSeatGroupClient returns a client for the SeatGroup from the given config.
func NewSeatGroupClient(c config) *SeatGroupClient {
	return &SeatGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `seatgroup.Hooks(f(g(h())))`.
func (c *SeatGroupClient) Use(hooks ...Hook) {
	c.hooks.SeatGroup = append(c.hooks.SeatGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `seatgroup.Intercept(f(g(h())))`.
func (c *SeatGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.SeatGroup = append(c.inters.SeatGroup, interceptors...)
}

// Create returns a builder for creating a SeatGroup entity.
func (c *SeatGroupClient) Create() *SeatGroupCreate {
	mutation := newSeatGroupMutation(c.config, OpCreate)
	return &SeatGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SeatGroup entities.
func (c *SeatGroupClient) CreateBulk(builders ...*SeatGroupCreate) *SeatGroupCreateBulk {
	return &SeatGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SeatGroupClient) MapCreateBulk(slice any, setFunc func(*SeatGroupCreate, int)) *SeatGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SeatGroupCreateBulk{err: fmt.Errorf("calling to SeatGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SeatGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SeatGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SeatGroup.
func (c *SeatGroupClient) Update() *SeatGroupUpdate {
	mutation := newSeatGroupMutation(c.config, OpUpdate)
	return &SeatGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeatGroupClient) UpdateOne(sg *SeatGroup) *SeatGroupUpdateOne {
	mutation := newSeatGroupMutation(c.config, OpUpdateOne, withSeatGroup(sg))
	return &SeatGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeatGroupClient) UpdateOneID(id pulid.ID) *SeatGroupUpdateOne {
	mutation := newSeatGroupMutation(c.config, OpUpdateOne, withSeatGroupID(id))
	return &SeatGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SeatGroup.
func (c *SeatGroupClient) Delete() *SeatGroupDelete {
	mutation := newSeatGroupMutation(c.config, OpDelete)
	return &SeatGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SeatGroupClient) DeleteOne(sg *SeatGroup) *SeatGroupDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SeatGroupClient) DeleteOneID(id pulid.ID) *SeatGroupDeleteOne {
	builder := c.Delete().Where(seatgroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeatGroupDeleteOne{builder}
}

// Query returns a query builder for SeatGroup.
func (c *SeatGroupClient) Query() *SeatGroupQuery {
	return &SeatGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSeatGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a SeatGroup entity by its id.
func (c *SeatGroupClient) Get(ctx context.Context, id pulid.ID) (*SeatGroup, error) {
	return c.Query().Where(seatgroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeatGroupClient) GetX(ctx context.Context, id pulid.ID) *SeatGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a SeatGroup.
func (c *SeatGroupClient) QueryTenant(sg *SeatGroup) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroup.TenantTable, seatgroup.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a SeatGroup.
func (c *SeatGroupClient) QueryUser(sg *SeatGroup) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, seatgroup.UserTable, seatgroup.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssignedAccessRight queries the assigned_access_right edge of a SeatGroup.
func (c *SeatGroupClient) QueryAssignedAccessRight(sg *SeatGroup) *AccessRightQuery {
	query := (&AccessRightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, id),
			sqlgraph.To(accessright.Table, accessright.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, seatgroup.AssignedAccessRightTable, seatgroup.AssignedAccessRightPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeatGroupAccessRight queries the seat_group_access_right edge of a SeatGroup.
func (c *SeatGroupClient) QuerySeatGroupAccessRight(sg *SeatGroup) *SeatGroupAccessRightQuery {
	query := (&SeatGroupAccessRightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroup.Table, seatgroup.FieldID, id),
			sqlgraph.To(seatgroupaccessright.Table, seatgroupaccessright.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, seatgroup.SeatGroupAccessRightTable, seatgroup.SeatGroupAccessRightColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeatGroupClient) Hooks() []Hook {
	hooks := c.hooks.SeatGroup
	return append(hooks[:len(hooks):len(hooks)], seatgroup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SeatGroupClient) Interceptors() []Interceptor {
	return c.inters.SeatGroup
}

func (c *SeatGroupClient) mutate(ctx context.Context, m *SeatGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SeatGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SeatGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SeatGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SeatGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SeatGroup mutation op: %q", m.Op())
	}
}

// SeatGroupAccessRightClient is a client for the SeatGroupAccessRight schema.
type SeatGroupAccessRightClient struct {
	config
}

// NewSeatGroupAccessRightClient returns a client for the SeatGroupAccessRight from the given config.
func NewSeatGroupAccessRightClient(c config) *SeatGroupAccessRightClient {
	return &SeatGroupAccessRightClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `seatgroupaccessright.Hooks(f(g(h())))`.
func (c *SeatGroupAccessRightClient) Use(hooks ...Hook) {
	c.hooks.SeatGroupAccessRight = append(c.hooks.SeatGroupAccessRight, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `seatgroupaccessright.Intercept(f(g(h())))`.
func (c *SeatGroupAccessRightClient) Intercept(interceptors ...Interceptor) {
	c.inters.SeatGroupAccessRight = append(c.inters.SeatGroupAccessRight, interceptors...)
}

// Create returns a builder for creating a SeatGroupAccessRight entity.
func (c *SeatGroupAccessRightClient) Create() *SeatGroupAccessRightCreate {
	mutation := newSeatGroupAccessRightMutation(c.config, OpCreate)
	return &SeatGroupAccessRightCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SeatGroupAccessRight entities.
func (c *SeatGroupAccessRightClient) CreateBulk(builders ...*SeatGroupAccessRightCreate) *SeatGroupAccessRightCreateBulk {
	return &SeatGroupAccessRightCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SeatGroupAccessRightClient) MapCreateBulk(slice any, setFunc func(*SeatGroupAccessRightCreate, int)) *SeatGroupAccessRightCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SeatGroupAccessRightCreateBulk{err: fmt.Errorf("calling to SeatGroupAccessRightClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SeatGroupAccessRightCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SeatGroupAccessRightCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SeatGroupAccessRight.
func (c *SeatGroupAccessRightClient) Update() *SeatGroupAccessRightUpdate {
	mutation := newSeatGroupAccessRightMutation(c.config, OpUpdate)
	return &SeatGroupAccessRightUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SeatGroupAccessRightClient) UpdateOne(sgar *SeatGroupAccessRight) *SeatGroupAccessRightUpdateOne {
	mutation := newSeatGroupAccessRightMutation(c.config, OpUpdateOne, withSeatGroupAccessRight(sgar))
	return &SeatGroupAccessRightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SeatGroupAccessRightClient) UpdateOneID(id pulid.ID) *SeatGroupAccessRightUpdateOne {
	mutation := newSeatGroupAccessRightMutation(c.config, OpUpdateOne, withSeatGroupAccessRightID(id))
	return &SeatGroupAccessRightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SeatGroupAccessRight.
func (c *SeatGroupAccessRightClient) Delete() *SeatGroupAccessRightDelete {
	mutation := newSeatGroupAccessRightMutation(c.config, OpDelete)
	return &SeatGroupAccessRightDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SeatGroupAccessRightClient) DeleteOne(sgar *SeatGroupAccessRight) *SeatGroupAccessRightDeleteOne {
	return c.DeleteOneID(sgar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SeatGroupAccessRightClient) DeleteOneID(id pulid.ID) *SeatGroupAccessRightDeleteOne {
	builder := c.Delete().Where(seatgroupaccessright.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SeatGroupAccessRightDeleteOne{builder}
}

// Query returns a query builder for SeatGroupAccessRight.
func (c *SeatGroupAccessRightClient) Query() *SeatGroupAccessRightQuery {
	return &SeatGroupAccessRightQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSeatGroupAccessRight},
		inters: c.Interceptors(),
	}
}

// Get returns a SeatGroupAccessRight entity by its id.
func (c *SeatGroupAccessRightClient) Get(ctx context.Context, id pulid.ID) (*SeatGroupAccessRight, error) {
	return c.Query().Where(seatgroupaccessright.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SeatGroupAccessRightClient) GetX(ctx context.Context, id pulid.ID) *SeatGroupAccessRight {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a SeatGroupAccessRight.
func (c *SeatGroupAccessRightClient) QueryTenant(sgar *SeatGroupAccessRight) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sgar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroupaccessright.Table, seatgroupaccessright.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroupaccessright.TenantTable, seatgroupaccessright.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sgar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAccessRight queries the access_right edge of a SeatGroupAccessRight.
func (c *SeatGroupAccessRightClient) QueryAccessRight(sgar *SeatGroupAccessRight) *AccessRightQuery {
	query := (&AccessRightClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sgar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroupaccessright.Table, seatgroupaccessright.FieldID, id),
			sqlgraph.To(accessright.Table, accessright.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroupaccessright.AccessRightTable, seatgroupaccessright.AccessRightColumn),
		)
		fromV = sqlgraph.Neighbors(sgar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeatGroup queries the seat_group edge of a SeatGroupAccessRight.
func (c *SeatGroupAccessRightClient) QuerySeatGroup(sgar *SeatGroupAccessRight) *SeatGroupQuery {
	query := (&SeatGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sgar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(seatgroupaccessright.Table, seatgroupaccessright.FieldID, id),
			sqlgraph.To(seatgroup.Table, seatgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, seatgroupaccessright.SeatGroupTable, seatgroupaccessright.SeatGroupColumn),
		)
		fromV = sqlgraph.Neighbors(sgar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SeatGroupAccessRightClient) Hooks() []Hook {
	hooks := c.hooks.SeatGroupAccessRight
	return append(hooks[:len(hooks):len(hooks)], seatgroupaccessright.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SeatGroupAccessRightClient) Interceptors() []Interceptor {
	return c.inters.SeatGroupAccessRight
}

func (c *SeatGroupAccessRightClient) mutate(ctx context.Context, m *SeatGroupAccessRightMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SeatGroupAccessRightCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SeatGroupAccessRightUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SeatGroupAccessRightUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SeatGroupAccessRightDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SeatGroupAccessRight mutation op: %q", m.Op())
	}
}

// ShipmentClient is a client for the Shipment schema.
type ShipmentClient struct {
	config
}

// NewShipmentClient returns a client for the Shipment from the given config.
func NewShipmentClient(c config) *ShipmentClient {
	return &ShipmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipment.Hooks(f(g(h())))`.
func (c *ShipmentClient) Use(hooks ...Hook) {
	c.hooks.Shipment = append(c.hooks.Shipment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipment.Intercept(f(g(h())))`.
func (c *ShipmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Shipment = append(c.inters.Shipment, interceptors...)
}

// Create returns a builder for creating a Shipment entity.
func (c *ShipmentClient) Create() *ShipmentCreate {
	mutation := newShipmentMutation(c.config, OpCreate)
	return &ShipmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shipment entities.
func (c *ShipmentClient) CreateBulk(builders ...*ShipmentCreate) *ShipmentCreateBulk {
	return &ShipmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentClient) MapCreateBulk(slice any, setFunc func(*ShipmentCreate, int)) *ShipmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentCreateBulk{err: fmt.Errorf("calling to ShipmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shipment.
func (c *ShipmentClient) Update() *ShipmentUpdate {
	mutation := newShipmentMutation(c.config, OpUpdate)
	return &ShipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentClient) UpdateOne(s *Shipment) *ShipmentUpdateOne {
	mutation := newShipmentMutation(c.config, OpUpdateOne, withShipment(s))
	return &ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentClient) UpdateOneID(id pulid.ID) *ShipmentUpdateOne {
	mutation := newShipmentMutation(c.config, OpUpdateOne, withShipmentID(id))
	return &ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shipment.
func (c *ShipmentClient) Delete() *ShipmentDelete {
	mutation := newShipmentMutation(c.config, OpDelete)
	return &ShipmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentClient) DeleteOne(s *Shipment) *ShipmentDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentClient) DeleteOneID(id pulid.ID) *ShipmentDeleteOne {
	builder := c.Delete().Where(shipment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentDeleteOne{builder}
}

// Query returns a query builder for Shipment.
func (c *ShipmentClient) Query() *ShipmentQuery {
	return &ShipmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipment},
		inters: c.Interceptors(),
	}
}

// Get returns a Shipment entity by its id.
func (c *ShipmentClient) Get(ctx context.Context, id pulid.ID) (*Shipment, error) {
	return c.Query().Where(shipment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentClient) GetX(ctx context.Context, id pulid.ID) *Shipment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Shipment.
func (c *ShipmentClient) QueryTenant(s *Shipment) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.TenantTable, shipment.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarrier queries the carrier edge of a Shipment.
func (c *ShipmentClient) QueryCarrier(s *Shipment) *CarrierQuery {
	query := (&CarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(carrier.Table, carrier.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipment.CarrierTable, shipment.CarrierColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentHistory queries the shipment_history edge of a Shipment.
func (c *ShipmentClient) QueryShipmentHistory(s *Shipment) *ShipmentHistoryQuery {
	query := (&ShipmentHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmenthistory.Table, shipmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentHistoryTable, shipment.ShipmentHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentBring queries the shipment_bring edge of a Shipment.
func (c *ShipmentClient) QueryShipmentBring(s *Shipment) *ShipmentBringQuery {
	query := (&ShipmentBringClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentbring.Table, shipmentbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentBringTable, shipment.ShipmentBringColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentDAO queries the shipment_dao edge of a Shipment.
func (c *ShipmentClient) QueryShipmentDAO(s *Shipment) *ShipmentDAOQuery {
	query := (&ShipmentDAOClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentdao.Table, shipmentdao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentDAOTable, shipment.ShipmentDAOColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentDF queries the shipment_df edge of a Shipment.
func (c *ShipmentClient) QueryShipmentDF(s *Shipment) *ShipmentDFQuery {
	query := (&ShipmentDFClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentdf.Table, shipmentdf.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentDFTable, shipment.ShipmentDFColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentDSV queries the shipment_dsv edge of a Shipment.
func (c *ShipmentClient) QueryShipmentDSV(s *Shipment) *ShipmentDSVQuery {
	query := (&ShipmentDSVClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentdsv.Table, shipmentdsv.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentDSVTable, shipment.ShipmentDSVColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentEasyPost queries the shipment_easy_post edge of a Shipment.
func (c *ShipmentClient) QueryShipmentEasyPost(s *Shipment) *ShipmentEasyPostQuery {
	query := (&ShipmentEasyPostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmenteasypost.Table, shipmenteasypost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentEasyPostTable, shipment.ShipmentEasyPostColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentPostNord queries the shipment_post_nord edge of a Shipment.
func (c *ShipmentClient) QueryShipmentPostNord(s *Shipment) *ShipmentPostNordQuery {
	query := (&ShipmentPostNordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentpostnord.Table, shipmentpostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentPostNordTable, shipment.ShipmentPostNordColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentGLS queries the shipment_gls edge of a Shipment.
func (c *ShipmentClient) QueryShipmentGLS(s *Shipment) *ShipmentGLSQuery {
	query := (&ShipmentGLSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentgls.Table, shipmentgls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentGLSTable, shipment.ShipmentGLSColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentUSPS queries the shipment_usps edge of a Shipment.
func (c *ShipmentClient) QueryShipmentUSPS(s *Shipment) *ShipmentUSPSQuery {
	query := (&ShipmentUSPSClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentusps.Table, shipmentusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ShipmentUSPSTable, shipment.ShipmentUSPSColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConsolidation queries the consolidation edge of a Shipment.
func (c *ShipmentClient) QueryConsolidation(s *Shipment) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipment.ConsolidationTable, shipment.ConsolidationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOldConsolidation queries the old_consolidation edge of a Shipment.
func (c *ShipmentClient) QueryOldConsolidation(s *Shipment) *ConsolidationQuery {
	query := (&ConsolidationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(consolidation.Table, consolidation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, shipment.OldConsolidationTable, shipment.OldConsolidationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentParcel queries the shipment_parcel edge of a Shipment.
func (c *ShipmentClient) QueryShipmentParcel(s *Shipment) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentParcelTable, shipment.ShipmentParcelColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentPallet queries the shipment_pallet edge of a Shipment.
func (c *ShipmentClient) QueryShipmentPallet(s *Shipment) *ShipmentPalletQuery {
	query := (&ShipmentPalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipment.Table, shipment.FieldID, id),
			sqlgraph.To(shipmentpallet.Table, shipmentpallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shipment.ShipmentPalletTable, shipment.ShipmentPalletColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentClient) Hooks() []Hook {
	hooks := c.hooks.Shipment
	return append(hooks[:len(hooks):len(hooks)], shipment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentClient) Interceptors() []Interceptor {
	return c.inters.Shipment
}

func (c *ShipmentClient) mutate(ctx context.Context, m *ShipmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Shipment mutation op: %q", m.Op())
	}
}

// ShipmentBringClient is a client for the ShipmentBring schema.
type ShipmentBringClient struct {
	config
}

// NewShipmentBringClient returns a client for the ShipmentBring from the given config.
func NewShipmentBringClient(c config) *ShipmentBringClient {
	return &ShipmentBringClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentbring.Hooks(f(g(h())))`.
func (c *ShipmentBringClient) Use(hooks ...Hook) {
	c.hooks.ShipmentBring = append(c.hooks.ShipmentBring, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentbring.Intercept(f(g(h())))`.
func (c *ShipmentBringClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentBring = append(c.inters.ShipmentBring, interceptors...)
}

// Create returns a builder for creating a ShipmentBring entity.
func (c *ShipmentBringClient) Create() *ShipmentBringCreate {
	mutation := newShipmentBringMutation(c.config, OpCreate)
	return &ShipmentBringCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentBring entities.
func (c *ShipmentBringClient) CreateBulk(builders ...*ShipmentBringCreate) *ShipmentBringCreateBulk {
	return &ShipmentBringCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentBringClient) MapCreateBulk(slice any, setFunc func(*ShipmentBringCreate, int)) *ShipmentBringCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentBringCreateBulk{err: fmt.Errorf("calling to ShipmentBringClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentBringCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentBringCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentBring.
func (c *ShipmentBringClient) Update() *ShipmentBringUpdate {
	mutation := newShipmentBringMutation(c.config, OpUpdate)
	return &ShipmentBringUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentBringClient) UpdateOne(sb *ShipmentBring) *ShipmentBringUpdateOne {
	mutation := newShipmentBringMutation(c.config, OpUpdateOne, withShipmentBring(sb))
	return &ShipmentBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentBringClient) UpdateOneID(id pulid.ID) *ShipmentBringUpdateOne {
	mutation := newShipmentBringMutation(c.config, OpUpdateOne, withShipmentBringID(id))
	return &ShipmentBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentBring.
func (c *ShipmentBringClient) Delete() *ShipmentBringDelete {
	mutation := newShipmentBringMutation(c.config, OpDelete)
	return &ShipmentBringDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentBringClient) DeleteOne(sb *ShipmentBring) *ShipmentBringDeleteOne {
	return c.DeleteOneID(sb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentBringClient) DeleteOneID(id pulid.ID) *ShipmentBringDeleteOne {
	builder := c.Delete().Where(shipmentbring.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentBringDeleteOne{builder}
}

// Query returns a query builder for ShipmentBring.
func (c *ShipmentBringClient) Query() *ShipmentBringQuery {
	return &ShipmentBringQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentBring},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentBring entity by its id.
func (c *ShipmentBringClient) Get(ctx context.Context, id pulid.ID) (*ShipmentBring, error) {
	return c.Query().Where(shipmentbring.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentBringClient) GetX(ctx context.Context, id pulid.ID) *ShipmentBring {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentBring.
func (c *ShipmentBringClient) QueryTenant(sb *ShipmentBring) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentbring.Table, shipmentbring.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentbring.TenantTable, shipmentbring.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentBring.
func (c *ShipmentBringClient) QueryShipment(sb *ShipmentBring) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentbring.Table, shipmentbring.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentbring.ShipmentTable, shipmentbring.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentBringClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentBring
	return append(hooks[:len(hooks):len(hooks)], shipmentbring.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentBringClient) Interceptors() []Interceptor {
	return c.inters.ShipmentBring
}

func (c *ShipmentBringClient) mutate(ctx context.Context, m *ShipmentBringMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentBringCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentBringUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentBringUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentBringDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentBring mutation op: %q", m.Op())
	}
}

// ShipmentDAOClient is a client for the ShipmentDAO schema.
type ShipmentDAOClient struct {
	config
}

// NewShipmentDAOClient returns a client for the ShipmentDAO from the given config.
func NewShipmentDAOClient(c config) *ShipmentDAOClient {
	return &ShipmentDAOClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentdao.Hooks(f(g(h())))`.
func (c *ShipmentDAOClient) Use(hooks ...Hook) {
	c.hooks.ShipmentDAO = append(c.hooks.ShipmentDAO, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentdao.Intercept(f(g(h())))`.
func (c *ShipmentDAOClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentDAO = append(c.inters.ShipmentDAO, interceptors...)
}

// Create returns a builder for creating a ShipmentDAO entity.
func (c *ShipmentDAOClient) Create() *ShipmentDAOCreate {
	mutation := newShipmentDAOMutation(c.config, OpCreate)
	return &ShipmentDAOCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentDAO entities.
func (c *ShipmentDAOClient) CreateBulk(builders ...*ShipmentDAOCreate) *ShipmentDAOCreateBulk {
	return &ShipmentDAOCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentDAOClient) MapCreateBulk(slice any, setFunc func(*ShipmentDAOCreate, int)) *ShipmentDAOCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentDAOCreateBulk{err: fmt.Errorf("calling to ShipmentDAOClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentDAOCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentDAOCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentDAO.
func (c *ShipmentDAOClient) Update() *ShipmentDAOUpdate {
	mutation := newShipmentDAOMutation(c.config, OpUpdate)
	return &ShipmentDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentDAOClient) UpdateOne(sd *ShipmentDAO) *ShipmentDAOUpdateOne {
	mutation := newShipmentDAOMutation(c.config, OpUpdateOne, withShipmentDAO(sd))
	return &ShipmentDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentDAOClient) UpdateOneID(id pulid.ID) *ShipmentDAOUpdateOne {
	mutation := newShipmentDAOMutation(c.config, OpUpdateOne, withShipmentDAOID(id))
	return &ShipmentDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentDAO.
func (c *ShipmentDAOClient) Delete() *ShipmentDAODelete {
	mutation := newShipmentDAOMutation(c.config, OpDelete)
	return &ShipmentDAODelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentDAOClient) DeleteOne(sd *ShipmentDAO) *ShipmentDAODeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentDAOClient) DeleteOneID(id pulid.ID) *ShipmentDAODeleteOne {
	builder := c.Delete().Where(shipmentdao.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentDAODeleteOne{builder}
}

// Query returns a query builder for ShipmentDAO.
func (c *ShipmentDAOClient) Query() *ShipmentDAOQuery {
	return &ShipmentDAOQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentDAO},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentDAO entity by its id.
func (c *ShipmentDAOClient) Get(ctx context.Context, id pulid.ID) (*ShipmentDAO, error) {
	return c.Query().Where(shipmentdao.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentDAOClient) GetX(ctx context.Context, id pulid.ID) *ShipmentDAO {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentDAO.
func (c *ShipmentDAOClient) QueryTenant(sd *ShipmentDAO) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentdao.Table, shipmentdao.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentdao.TenantTable, shipmentdao.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentDAO.
func (c *ShipmentDAOClient) QueryShipment(sd *ShipmentDAO) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentdao.Table, shipmentdao.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentdao.ShipmentTable, shipmentdao.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentDAOClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentDAO
	return append(hooks[:len(hooks):len(hooks)], shipmentdao.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentDAOClient) Interceptors() []Interceptor {
	return c.inters.ShipmentDAO
}

func (c *ShipmentDAOClient) mutate(ctx context.Context, m *ShipmentDAOMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentDAOCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentDAOUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentDAOUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentDAODelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentDAO mutation op: %q", m.Op())
	}
}

// ShipmentDFClient is a client for the ShipmentDF schema.
type ShipmentDFClient struct {
	config
}

// NewShipmentDFClient returns a client for the ShipmentDF from the given config.
func NewShipmentDFClient(c config) *ShipmentDFClient {
	return &ShipmentDFClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentdf.Hooks(f(g(h())))`.
func (c *ShipmentDFClient) Use(hooks ...Hook) {
	c.hooks.ShipmentDF = append(c.hooks.ShipmentDF, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentdf.Intercept(f(g(h())))`.
func (c *ShipmentDFClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentDF = append(c.inters.ShipmentDF, interceptors...)
}

// Create returns a builder for creating a ShipmentDF entity.
func (c *ShipmentDFClient) Create() *ShipmentDFCreate {
	mutation := newShipmentDFMutation(c.config, OpCreate)
	return &ShipmentDFCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentDF entities.
func (c *ShipmentDFClient) CreateBulk(builders ...*ShipmentDFCreate) *ShipmentDFCreateBulk {
	return &ShipmentDFCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentDFClient) MapCreateBulk(slice any, setFunc func(*ShipmentDFCreate, int)) *ShipmentDFCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentDFCreateBulk{err: fmt.Errorf("calling to ShipmentDFClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentDFCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentDFCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentDF.
func (c *ShipmentDFClient) Update() *ShipmentDFUpdate {
	mutation := newShipmentDFMutation(c.config, OpUpdate)
	return &ShipmentDFUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentDFClient) UpdateOne(sd *ShipmentDF) *ShipmentDFUpdateOne {
	mutation := newShipmentDFMutation(c.config, OpUpdateOne, withShipmentDF(sd))
	return &ShipmentDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentDFClient) UpdateOneID(id pulid.ID) *ShipmentDFUpdateOne {
	mutation := newShipmentDFMutation(c.config, OpUpdateOne, withShipmentDFID(id))
	return &ShipmentDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentDF.
func (c *ShipmentDFClient) Delete() *ShipmentDFDelete {
	mutation := newShipmentDFMutation(c.config, OpDelete)
	return &ShipmentDFDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentDFClient) DeleteOne(sd *ShipmentDF) *ShipmentDFDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentDFClient) DeleteOneID(id pulid.ID) *ShipmentDFDeleteOne {
	builder := c.Delete().Where(shipmentdf.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentDFDeleteOne{builder}
}

// Query returns a query builder for ShipmentDF.
func (c *ShipmentDFClient) Query() *ShipmentDFQuery {
	return &ShipmentDFQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentDF},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentDF entity by its id.
func (c *ShipmentDFClient) Get(ctx context.Context, id pulid.ID) (*ShipmentDF, error) {
	return c.Query().Where(shipmentdf.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentDFClient) GetX(ctx context.Context, id pulid.ID) *ShipmentDF {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentDF.
func (c *ShipmentDFClient) QueryTenant(sd *ShipmentDF) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentdf.Table, shipmentdf.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentdf.TenantTable, shipmentdf.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentDF.
func (c *ShipmentDFClient) QueryShipment(sd *ShipmentDF) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentdf.Table, shipmentdf.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentdf.ShipmentTable, shipmentdf.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentDFClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentDF
	return append(hooks[:len(hooks):len(hooks)], shipmentdf.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentDFClient) Interceptors() []Interceptor {
	return c.inters.ShipmentDF
}

func (c *ShipmentDFClient) mutate(ctx context.Context, m *ShipmentDFMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentDFCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentDFUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentDFUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentDFDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentDF mutation op: %q", m.Op())
	}
}

// ShipmentDSVClient is a client for the ShipmentDSV schema.
type ShipmentDSVClient struct {
	config
}

// NewShipmentDSVClient returns a client for the ShipmentDSV from the given config.
func NewShipmentDSVClient(c config) *ShipmentDSVClient {
	return &ShipmentDSVClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentdsv.Hooks(f(g(h())))`.
func (c *ShipmentDSVClient) Use(hooks ...Hook) {
	c.hooks.ShipmentDSV = append(c.hooks.ShipmentDSV, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentdsv.Intercept(f(g(h())))`.
func (c *ShipmentDSVClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentDSV = append(c.inters.ShipmentDSV, interceptors...)
}

// Create returns a builder for creating a ShipmentDSV entity.
func (c *ShipmentDSVClient) Create() *ShipmentDSVCreate {
	mutation := newShipmentDSVMutation(c.config, OpCreate)
	return &ShipmentDSVCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentDSV entities.
func (c *ShipmentDSVClient) CreateBulk(builders ...*ShipmentDSVCreate) *ShipmentDSVCreateBulk {
	return &ShipmentDSVCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentDSVClient) MapCreateBulk(slice any, setFunc func(*ShipmentDSVCreate, int)) *ShipmentDSVCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentDSVCreateBulk{err: fmt.Errorf("calling to ShipmentDSVClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentDSVCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentDSVCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentDSV.
func (c *ShipmentDSVClient) Update() *ShipmentDSVUpdate {
	mutation := newShipmentDSVMutation(c.config, OpUpdate)
	return &ShipmentDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentDSVClient) UpdateOne(sd *ShipmentDSV) *ShipmentDSVUpdateOne {
	mutation := newShipmentDSVMutation(c.config, OpUpdateOne, withShipmentDSV(sd))
	return &ShipmentDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentDSVClient) UpdateOneID(id pulid.ID) *ShipmentDSVUpdateOne {
	mutation := newShipmentDSVMutation(c.config, OpUpdateOne, withShipmentDSVID(id))
	return &ShipmentDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentDSV.
func (c *ShipmentDSVClient) Delete() *ShipmentDSVDelete {
	mutation := newShipmentDSVMutation(c.config, OpDelete)
	return &ShipmentDSVDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentDSVClient) DeleteOne(sd *ShipmentDSV) *ShipmentDSVDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentDSVClient) DeleteOneID(id pulid.ID) *ShipmentDSVDeleteOne {
	builder := c.Delete().Where(shipmentdsv.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentDSVDeleteOne{builder}
}

// Query returns a query builder for ShipmentDSV.
func (c *ShipmentDSVClient) Query() *ShipmentDSVQuery {
	return &ShipmentDSVQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentDSV},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentDSV entity by its id.
func (c *ShipmentDSVClient) Get(ctx context.Context, id pulid.ID) (*ShipmentDSV, error) {
	return c.Query().Where(shipmentdsv.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentDSVClient) GetX(ctx context.Context, id pulid.ID) *ShipmentDSV {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentDSV.
func (c *ShipmentDSVClient) QueryTenant(sd *ShipmentDSV) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentdsv.Table, shipmentdsv.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentdsv.TenantTable, shipmentdsv.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentDSV.
func (c *ShipmentDSVClient) QueryShipment(sd *ShipmentDSV) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentdsv.Table, shipmentdsv.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentdsv.ShipmentTable, shipmentdsv.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentDSVClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentDSV
	return append(hooks[:len(hooks):len(hooks)], shipmentdsv.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentDSVClient) Interceptors() []Interceptor {
	return c.inters.ShipmentDSV
}

func (c *ShipmentDSVClient) mutate(ctx context.Context, m *ShipmentDSVMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentDSVCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentDSVUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentDSVUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentDSVDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentDSV mutation op: %q", m.Op())
	}
}

// ShipmentEasyPostClient is a client for the ShipmentEasyPost schema.
type ShipmentEasyPostClient struct {
	config
}

// NewShipmentEasyPostClient returns a client for the ShipmentEasyPost from the given config.
func NewShipmentEasyPostClient(c config) *ShipmentEasyPostClient {
	return &ShipmentEasyPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmenteasypost.Hooks(f(g(h())))`.
func (c *ShipmentEasyPostClient) Use(hooks ...Hook) {
	c.hooks.ShipmentEasyPost = append(c.hooks.ShipmentEasyPost, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmenteasypost.Intercept(f(g(h())))`.
func (c *ShipmentEasyPostClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentEasyPost = append(c.inters.ShipmentEasyPost, interceptors...)
}

// Create returns a builder for creating a ShipmentEasyPost entity.
func (c *ShipmentEasyPostClient) Create() *ShipmentEasyPostCreate {
	mutation := newShipmentEasyPostMutation(c.config, OpCreate)
	return &ShipmentEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentEasyPost entities.
func (c *ShipmentEasyPostClient) CreateBulk(builders ...*ShipmentEasyPostCreate) *ShipmentEasyPostCreateBulk {
	return &ShipmentEasyPostCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentEasyPostClient) MapCreateBulk(slice any, setFunc func(*ShipmentEasyPostCreate, int)) *ShipmentEasyPostCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentEasyPostCreateBulk{err: fmt.Errorf("calling to ShipmentEasyPostClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentEasyPostCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentEasyPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentEasyPost.
func (c *ShipmentEasyPostClient) Update() *ShipmentEasyPostUpdate {
	mutation := newShipmentEasyPostMutation(c.config, OpUpdate)
	return &ShipmentEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentEasyPostClient) UpdateOne(sep *ShipmentEasyPost) *ShipmentEasyPostUpdateOne {
	mutation := newShipmentEasyPostMutation(c.config, OpUpdateOne, withShipmentEasyPost(sep))
	return &ShipmentEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentEasyPostClient) UpdateOneID(id pulid.ID) *ShipmentEasyPostUpdateOne {
	mutation := newShipmentEasyPostMutation(c.config, OpUpdateOne, withShipmentEasyPostID(id))
	return &ShipmentEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentEasyPost.
func (c *ShipmentEasyPostClient) Delete() *ShipmentEasyPostDelete {
	mutation := newShipmentEasyPostMutation(c.config, OpDelete)
	return &ShipmentEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentEasyPostClient) DeleteOne(sep *ShipmentEasyPost) *ShipmentEasyPostDeleteOne {
	return c.DeleteOneID(sep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentEasyPostClient) DeleteOneID(id pulid.ID) *ShipmentEasyPostDeleteOne {
	builder := c.Delete().Where(shipmenteasypost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentEasyPostDeleteOne{builder}
}

// Query returns a query builder for ShipmentEasyPost.
func (c *ShipmentEasyPostClient) Query() *ShipmentEasyPostQuery {
	return &ShipmentEasyPostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentEasyPost},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentEasyPost entity by its id.
func (c *ShipmentEasyPostClient) Get(ctx context.Context, id pulid.ID) (*ShipmentEasyPost, error) {
	return c.Query().Where(shipmenteasypost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentEasyPostClient) GetX(ctx context.Context, id pulid.ID) *ShipmentEasyPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentEasyPost.
func (c *ShipmentEasyPostClient) QueryTenant(sep *ShipmentEasyPost) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenteasypost.Table, shipmenteasypost.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenteasypost.TenantTable, shipmenteasypost.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentEasyPost.
func (c *ShipmentEasyPostClient) QueryShipment(sep *ShipmentEasyPost) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenteasypost.Table, shipmenteasypost.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmenteasypost.ShipmentTable, shipmenteasypost.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentEasyPostClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentEasyPost
	return append(hooks[:len(hooks):len(hooks)], shipmenteasypost.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentEasyPostClient) Interceptors() []Interceptor {
	return c.inters.ShipmentEasyPost
}

func (c *ShipmentEasyPostClient) mutate(ctx context.Context, m *ShipmentEasyPostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentEasyPostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentEasyPostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentEasyPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentEasyPostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentEasyPost mutation op: %q", m.Op())
	}
}

// ShipmentGLSClient is a client for the ShipmentGLS schema.
type ShipmentGLSClient struct {
	config
}

// NewShipmentGLSClient returns a client for the ShipmentGLS from the given config.
func NewShipmentGLSClient(c config) *ShipmentGLSClient {
	return &ShipmentGLSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentgls.Hooks(f(g(h())))`.
func (c *ShipmentGLSClient) Use(hooks ...Hook) {
	c.hooks.ShipmentGLS = append(c.hooks.ShipmentGLS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentgls.Intercept(f(g(h())))`.
func (c *ShipmentGLSClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentGLS = append(c.inters.ShipmentGLS, interceptors...)
}

// Create returns a builder for creating a ShipmentGLS entity.
func (c *ShipmentGLSClient) Create() *ShipmentGLSCreate {
	mutation := newShipmentGLSMutation(c.config, OpCreate)
	return &ShipmentGLSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentGLS entities.
func (c *ShipmentGLSClient) CreateBulk(builders ...*ShipmentGLSCreate) *ShipmentGLSCreateBulk {
	return &ShipmentGLSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentGLSClient) MapCreateBulk(slice any, setFunc func(*ShipmentGLSCreate, int)) *ShipmentGLSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentGLSCreateBulk{err: fmt.Errorf("calling to ShipmentGLSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentGLSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentGLSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentGLS.
func (c *ShipmentGLSClient) Update() *ShipmentGLSUpdate {
	mutation := newShipmentGLSMutation(c.config, OpUpdate)
	return &ShipmentGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentGLSClient) UpdateOne(sg *ShipmentGLS) *ShipmentGLSUpdateOne {
	mutation := newShipmentGLSMutation(c.config, OpUpdateOne, withShipmentGLS(sg))
	return &ShipmentGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentGLSClient) UpdateOneID(id pulid.ID) *ShipmentGLSUpdateOne {
	mutation := newShipmentGLSMutation(c.config, OpUpdateOne, withShipmentGLSID(id))
	return &ShipmentGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentGLS.
func (c *ShipmentGLSClient) Delete() *ShipmentGLSDelete {
	mutation := newShipmentGLSMutation(c.config, OpDelete)
	return &ShipmentGLSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentGLSClient) DeleteOne(sg *ShipmentGLS) *ShipmentGLSDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentGLSClient) DeleteOneID(id pulid.ID) *ShipmentGLSDeleteOne {
	builder := c.Delete().Where(shipmentgls.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentGLSDeleteOne{builder}
}

// Query returns a query builder for ShipmentGLS.
func (c *ShipmentGLSClient) Query() *ShipmentGLSQuery {
	return &ShipmentGLSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentGLS},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentGLS entity by its id.
func (c *ShipmentGLSClient) Get(ctx context.Context, id pulid.ID) (*ShipmentGLS, error) {
	return c.Query().Where(shipmentgls.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentGLSClient) GetX(ctx context.Context, id pulid.ID) *ShipmentGLS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentGLS.
func (c *ShipmentGLSClient) QueryTenant(sg *ShipmentGLS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgls.Table, shipmentgls.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentgls.TenantTable, shipmentgls.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentGLS.
func (c *ShipmentGLSClient) QueryShipment(sg *ShipmentGLS) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentgls.Table, shipmentgls.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentgls.ShipmentTable, shipmentgls.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentGLSClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentGLS
	return append(hooks[:len(hooks):len(hooks)], shipmentgls.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentGLSClient) Interceptors() []Interceptor {
	return c.inters.ShipmentGLS
}

func (c *ShipmentGLSClient) mutate(ctx context.Context, m *ShipmentGLSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentGLSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentGLSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentGLSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentGLSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentGLS mutation op: %q", m.Op())
	}
}

// ShipmentHistoryClient is a client for the ShipmentHistory schema.
type ShipmentHistoryClient struct {
	config
}

// NewShipmentHistoryClient returns a client for the ShipmentHistory from the given config.
func NewShipmentHistoryClient(c config) *ShipmentHistoryClient {
	return &ShipmentHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmenthistory.Hooks(f(g(h())))`.
func (c *ShipmentHistoryClient) Use(hooks ...Hook) {
	c.hooks.ShipmentHistory = append(c.hooks.ShipmentHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmenthistory.Intercept(f(g(h())))`.
func (c *ShipmentHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentHistory = append(c.inters.ShipmentHistory, interceptors...)
}

// Create returns a builder for creating a ShipmentHistory entity.
func (c *ShipmentHistoryClient) Create() *ShipmentHistoryCreate {
	mutation := newShipmentHistoryMutation(c.config, OpCreate)
	return &ShipmentHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentHistory entities.
func (c *ShipmentHistoryClient) CreateBulk(builders ...*ShipmentHistoryCreate) *ShipmentHistoryCreateBulk {
	return &ShipmentHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentHistoryClient) MapCreateBulk(slice any, setFunc func(*ShipmentHistoryCreate, int)) *ShipmentHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentHistoryCreateBulk{err: fmt.Errorf("calling to ShipmentHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentHistory.
func (c *ShipmentHistoryClient) Update() *ShipmentHistoryUpdate {
	mutation := newShipmentHistoryMutation(c.config, OpUpdate)
	return &ShipmentHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentHistoryClient) UpdateOne(sh *ShipmentHistory) *ShipmentHistoryUpdateOne {
	mutation := newShipmentHistoryMutation(c.config, OpUpdateOne, withShipmentHistory(sh))
	return &ShipmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentHistoryClient) UpdateOneID(id pulid.ID) *ShipmentHistoryUpdateOne {
	mutation := newShipmentHistoryMutation(c.config, OpUpdateOne, withShipmentHistoryID(id))
	return &ShipmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentHistory.
func (c *ShipmentHistoryClient) Delete() *ShipmentHistoryDelete {
	mutation := newShipmentHistoryMutation(c.config, OpDelete)
	return &ShipmentHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentHistoryClient) DeleteOne(sh *ShipmentHistory) *ShipmentHistoryDeleteOne {
	return c.DeleteOneID(sh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentHistoryClient) DeleteOneID(id pulid.ID) *ShipmentHistoryDeleteOne {
	builder := c.Delete().Where(shipmenthistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentHistoryDeleteOne{builder}
}

// Query returns a query builder for ShipmentHistory.
func (c *ShipmentHistoryClient) Query() *ShipmentHistoryQuery {
	return &ShipmentHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentHistory entity by its id.
func (c *ShipmentHistoryClient) Get(ctx context.Context, id pulid.ID) (*ShipmentHistory, error) {
	return c.Query().Where(shipmenthistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentHistoryClient) GetX(ctx context.Context, id pulid.ID) *ShipmentHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChangeHistory queries the change_history edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryChangeHistory(sh *ShipmentHistory) *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmenthistory.ChangeHistoryTable, shipmenthistory.ChangeHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTenant queries the tenant edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryTenant(sh *ShipmentHistory) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmenthistory.TenantTable, shipmenthistory.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentHistory.
func (c *ShipmentHistoryClient) QueryShipment(sh *ShipmentHistory) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmenthistory.Table, shipmenthistory.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmenthistory.ShipmentTable, shipmenthistory.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentHistoryClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentHistory
	return append(hooks[:len(hooks):len(hooks)], shipmenthistory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentHistoryClient) Interceptors() []Interceptor {
	return c.inters.ShipmentHistory
}

func (c *ShipmentHistoryClient) mutate(ctx context.Context, m *ShipmentHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentHistory mutation op: %q", m.Op())
	}
}

// ShipmentPalletClient is a client for the ShipmentPallet schema.
type ShipmentPalletClient struct {
	config
}

// NewShipmentPalletClient returns a client for the ShipmentPallet from the given config.
func NewShipmentPalletClient(c config) *ShipmentPalletClient {
	return &ShipmentPalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentpallet.Hooks(f(g(h())))`.
func (c *ShipmentPalletClient) Use(hooks ...Hook) {
	c.hooks.ShipmentPallet = append(c.hooks.ShipmentPallet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentpallet.Intercept(f(g(h())))`.
func (c *ShipmentPalletClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentPallet = append(c.inters.ShipmentPallet, interceptors...)
}

// Create returns a builder for creating a ShipmentPallet entity.
func (c *ShipmentPalletClient) Create() *ShipmentPalletCreate {
	mutation := newShipmentPalletMutation(c.config, OpCreate)
	return &ShipmentPalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentPallet entities.
func (c *ShipmentPalletClient) CreateBulk(builders ...*ShipmentPalletCreate) *ShipmentPalletCreateBulk {
	return &ShipmentPalletCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentPalletClient) MapCreateBulk(slice any, setFunc func(*ShipmentPalletCreate, int)) *ShipmentPalletCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentPalletCreateBulk{err: fmt.Errorf("calling to ShipmentPalletClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentPalletCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentPalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentPallet.
func (c *ShipmentPalletClient) Update() *ShipmentPalletUpdate {
	mutation := newShipmentPalletMutation(c.config, OpUpdate)
	return &ShipmentPalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentPalletClient) UpdateOne(sp *ShipmentPallet) *ShipmentPalletUpdateOne {
	mutation := newShipmentPalletMutation(c.config, OpUpdateOne, withShipmentPallet(sp))
	return &ShipmentPalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentPalletClient) UpdateOneID(id pulid.ID) *ShipmentPalletUpdateOne {
	mutation := newShipmentPalletMutation(c.config, OpUpdateOne, withShipmentPalletID(id))
	return &ShipmentPalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentPallet.
func (c *ShipmentPalletClient) Delete() *ShipmentPalletDelete {
	mutation := newShipmentPalletMutation(c.config, OpDelete)
	return &ShipmentPalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentPalletClient) DeleteOne(sp *ShipmentPallet) *ShipmentPalletDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentPalletClient) DeleteOneID(id pulid.ID) *ShipmentPalletDeleteOne {
	builder := c.Delete().Where(shipmentpallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentPalletDeleteOne{builder}
}

// Query returns a query builder for ShipmentPallet.
func (c *ShipmentPalletClient) Query() *ShipmentPalletQuery {
	return &ShipmentPalletQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentPallet},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentPallet entity by its id.
func (c *ShipmentPalletClient) Get(ctx context.Context, id pulid.ID) (*ShipmentPallet, error) {
	return c.Query().Where(shipmentpallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentPalletClient) GetX(ctx context.Context, id pulid.ID) *ShipmentPallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentPallet.
func (c *ShipmentPalletClient) QueryTenant(sp *ShipmentPallet) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentpallet.TenantTable, shipmentpallet.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPallet queries the pallet edge of a ShipmentPallet.
func (c *ShipmentPalletClient) QueryPallet(sp *ShipmentPallet) *PalletQuery {
	query := (&PalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, id),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentpallet.PalletTable, shipmentpallet.PalletColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOldPallet queries the old_pallet edge of a ShipmentPallet.
func (c *ShipmentPalletClient) QueryOldPallet(sp *ShipmentPallet) *PalletQuery {
	query := (&PalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, id),
			sqlgraph.To(pallet.Table, pallet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, shipmentpallet.OldPalletTable, shipmentpallet.OldPalletPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentPallet.
func (c *ShipmentPalletClient) QueryShipment(sp *ShipmentPallet) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpallet.Table, shipmentpallet.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentpallet.ShipmentTable, shipmentpallet.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentPalletClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentPallet
	return append(hooks[:len(hooks):len(hooks)], shipmentpallet.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentPalletClient) Interceptors() []Interceptor {
	return c.inters.ShipmentPallet
}

func (c *ShipmentPalletClient) mutate(ctx context.Context, m *ShipmentPalletMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentPalletCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentPalletUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentPalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentPalletDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentPallet mutation op: %q", m.Op())
	}
}

// ShipmentParcelClient is a client for the ShipmentParcel schema.
type ShipmentParcelClient struct {
	config
}

// NewShipmentParcelClient returns a client for the ShipmentParcel from the given config.
func NewShipmentParcelClient(c config) *ShipmentParcelClient {
	return &ShipmentParcelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentparcel.Hooks(f(g(h())))`.
func (c *ShipmentParcelClient) Use(hooks ...Hook) {
	c.hooks.ShipmentParcel = append(c.hooks.ShipmentParcel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentparcel.Intercept(f(g(h())))`.
func (c *ShipmentParcelClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentParcel = append(c.inters.ShipmentParcel, interceptors...)
}

// Create returns a builder for creating a ShipmentParcel entity.
func (c *ShipmentParcelClient) Create() *ShipmentParcelCreate {
	mutation := newShipmentParcelMutation(c.config, OpCreate)
	return &ShipmentParcelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentParcel entities.
func (c *ShipmentParcelClient) CreateBulk(builders ...*ShipmentParcelCreate) *ShipmentParcelCreateBulk {
	return &ShipmentParcelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentParcelClient) MapCreateBulk(slice any, setFunc func(*ShipmentParcelCreate, int)) *ShipmentParcelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentParcelCreateBulk{err: fmt.Errorf("calling to ShipmentParcelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentParcelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentParcelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentParcel.
func (c *ShipmentParcelClient) Update() *ShipmentParcelUpdate {
	mutation := newShipmentParcelMutation(c.config, OpUpdate)
	return &ShipmentParcelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentParcelClient) UpdateOne(sp *ShipmentParcel) *ShipmentParcelUpdateOne {
	mutation := newShipmentParcelMutation(c.config, OpUpdateOne, withShipmentParcel(sp))
	return &ShipmentParcelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentParcelClient) UpdateOneID(id pulid.ID) *ShipmentParcelUpdateOne {
	mutation := newShipmentParcelMutation(c.config, OpUpdateOne, withShipmentParcelID(id))
	return &ShipmentParcelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentParcel.
func (c *ShipmentParcelClient) Delete() *ShipmentParcelDelete {
	mutation := newShipmentParcelMutation(c.config, OpDelete)
	return &ShipmentParcelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentParcelClient) DeleteOne(sp *ShipmentParcel) *ShipmentParcelDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentParcelClient) DeleteOneID(id pulid.ID) *ShipmentParcelDeleteOne {
	builder := c.Delete().Where(shipmentparcel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentParcelDeleteOne{builder}
}

// Query returns a query builder for ShipmentParcel.
func (c *ShipmentParcelClient) Query() *ShipmentParcelQuery {
	return &ShipmentParcelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentParcel},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentParcel entity by its id.
func (c *ShipmentParcelClient) Get(ctx context.Context, id pulid.ID) (*ShipmentParcel, error) {
	return c.Query().Where(shipmentparcel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentParcelClient) GetX(ctx context.Context, id pulid.ID) *ShipmentParcel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryTenant(sp *ShipmentParcel) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentparcel.TenantTable, shipmentparcel.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryShipment(sp *ShipmentParcel) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shipmentparcel.ShipmentTable, shipmentparcel.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryColli queries the colli edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryColli(sp *ShipmentParcel) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentparcel.ColliTable, shipmentparcel.ColliColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOldColli queries the old_colli edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryOldColli(sp *ShipmentParcel) *ColliQuery {
	query := (&ColliClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, shipmentparcel.OldColliTable, shipmentparcel.OldColliPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceRecentScan queries the workspace_recent_scan edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryWorkspaceRecentScan(sp *ShipmentParcel) *WorkspaceRecentScanQuery {
	query := (&WorkspaceRecentScanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(workspacerecentscan.Table, workspacerecentscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, shipmentparcel.WorkspaceRecentScanTable, shipmentparcel.WorkspaceRecentScanColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPackaging queries the packaging edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryPackaging(sp *ShipmentParcel) *PackagingQuery {
	query := (&PackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(packaging.Table, packaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentparcel.PackagingTable, shipmentparcel.PackagingColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrintJob queries the print_job edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryPrintJob(sp *ShipmentParcel) *PrintJobQuery {
	query := (&PrintJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(printjob.Table, printjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, shipmentparcel.PrintJobTable, shipmentparcel.PrintJobColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDocumentFile queries the document_file edge of a ShipmentParcel.
func (c *ShipmentParcelClient) QueryDocumentFile(sp *ShipmentParcel) *DocumentFileQuery {
	query := (&DocumentFileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentparcel.Table, shipmentparcel.FieldID, id),
			sqlgraph.To(documentfile.Table, documentfile.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, shipmentparcel.DocumentFileTable, shipmentparcel.DocumentFileColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentParcelClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentParcel
	return append(hooks[:len(hooks):len(hooks)], shipmentparcel.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentParcelClient) Interceptors() []Interceptor {
	return c.inters.ShipmentParcel
}

func (c *ShipmentParcelClient) mutate(ctx context.Context, m *ShipmentParcelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentParcelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentParcelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentParcelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentParcelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentParcel mutation op: %q", m.Op())
	}
}

// ShipmentPostNordClient is a client for the ShipmentPostNord schema.
type ShipmentPostNordClient struct {
	config
}

// NewShipmentPostNordClient returns a client for the ShipmentPostNord from the given config.
func NewShipmentPostNordClient(c config) *ShipmentPostNordClient {
	return &ShipmentPostNordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentpostnord.Hooks(f(g(h())))`.
func (c *ShipmentPostNordClient) Use(hooks ...Hook) {
	c.hooks.ShipmentPostNord = append(c.hooks.ShipmentPostNord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentpostnord.Intercept(f(g(h())))`.
func (c *ShipmentPostNordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentPostNord = append(c.inters.ShipmentPostNord, interceptors...)
}

// Create returns a builder for creating a ShipmentPostNord entity.
func (c *ShipmentPostNordClient) Create() *ShipmentPostNordCreate {
	mutation := newShipmentPostNordMutation(c.config, OpCreate)
	return &ShipmentPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentPostNord entities.
func (c *ShipmentPostNordClient) CreateBulk(builders ...*ShipmentPostNordCreate) *ShipmentPostNordCreateBulk {
	return &ShipmentPostNordCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentPostNordClient) MapCreateBulk(slice any, setFunc func(*ShipmentPostNordCreate, int)) *ShipmentPostNordCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentPostNordCreateBulk{err: fmt.Errorf("calling to ShipmentPostNordClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentPostNordCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentPostNordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentPostNord.
func (c *ShipmentPostNordClient) Update() *ShipmentPostNordUpdate {
	mutation := newShipmentPostNordMutation(c.config, OpUpdate)
	return &ShipmentPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentPostNordClient) UpdateOne(spn *ShipmentPostNord) *ShipmentPostNordUpdateOne {
	mutation := newShipmentPostNordMutation(c.config, OpUpdateOne, withShipmentPostNord(spn))
	return &ShipmentPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentPostNordClient) UpdateOneID(id pulid.ID) *ShipmentPostNordUpdateOne {
	mutation := newShipmentPostNordMutation(c.config, OpUpdateOne, withShipmentPostNordID(id))
	return &ShipmentPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentPostNord.
func (c *ShipmentPostNordClient) Delete() *ShipmentPostNordDelete {
	mutation := newShipmentPostNordMutation(c.config, OpDelete)
	return &ShipmentPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentPostNordClient) DeleteOne(spn *ShipmentPostNord) *ShipmentPostNordDeleteOne {
	return c.DeleteOneID(spn.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentPostNordClient) DeleteOneID(id pulid.ID) *ShipmentPostNordDeleteOne {
	builder := c.Delete().Where(shipmentpostnord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentPostNordDeleteOne{builder}
}

// Query returns a query builder for ShipmentPostNord.
func (c *ShipmentPostNordClient) Query() *ShipmentPostNordQuery {
	return &ShipmentPostNordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentPostNord},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentPostNord entity by its id.
func (c *ShipmentPostNordClient) Get(ctx context.Context, id pulid.ID) (*ShipmentPostNord, error) {
	return c.Query().Where(shipmentpostnord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentPostNordClient) GetX(ctx context.Context, id pulid.ID) *ShipmentPostNord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentPostNord.
func (c *ShipmentPostNordClient) QueryTenant(spn *ShipmentPostNord) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := spn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpostnord.Table, shipmentpostnord.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentpostnord.TenantTable, shipmentpostnord.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(spn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentPostNord.
func (c *ShipmentPostNordClient) QueryShipment(spn *ShipmentPostNord) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := spn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentpostnord.Table, shipmentpostnord.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentpostnord.ShipmentTable, shipmentpostnord.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(spn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentPostNordClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentPostNord
	return append(hooks[:len(hooks):len(hooks)], shipmentpostnord.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentPostNordClient) Interceptors() []Interceptor {
	return c.inters.ShipmentPostNord
}

func (c *ShipmentPostNordClient) mutate(ctx context.Context, m *ShipmentPostNordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentPostNordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentPostNordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentPostNordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentPostNordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentPostNord mutation op: %q", m.Op())
	}
}

// ShipmentUSPSClient is a client for the ShipmentUSPS schema.
type ShipmentUSPSClient struct {
	config
}

// NewShipmentUSPSClient returns a client for the ShipmentUSPS from the given config.
func NewShipmentUSPSClient(c config) *ShipmentUSPSClient {
	return &ShipmentUSPSClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shipmentusps.Hooks(f(g(h())))`.
func (c *ShipmentUSPSClient) Use(hooks ...Hook) {
	c.hooks.ShipmentUSPS = append(c.hooks.ShipmentUSPS, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shipmentusps.Intercept(f(g(h())))`.
func (c *ShipmentUSPSClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShipmentUSPS = append(c.inters.ShipmentUSPS, interceptors...)
}

// Create returns a builder for creating a ShipmentUSPS entity.
func (c *ShipmentUSPSClient) Create() *ShipmentUSPSCreate {
	mutation := newShipmentUSPSMutation(c.config, OpCreate)
	return &ShipmentUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShipmentUSPS entities.
func (c *ShipmentUSPSClient) CreateBulk(builders ...*ShipmentUSPSCreate) *ShipmentUSPSCreateBulk {
	return &ShipmentUSPSCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShipmentUSPSClient) MapCreateBulk(slice any, setFunc func(*ShipmentUSPSCreate, int)) *ShipmentUSPSCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShipmentUSPSCreateBulk{err: fmt.Errorf("calling to ShipmentUSPSClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShipmentUSPSCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShipmentUSPSCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShipmentUSPS.
func (c *ShipmentUSPSClient) Update() *ShipmentUSPSUpdate {
	mutation := newShipmentUSPSMutation(c.config, OpUpdate)
	return &ShipmentUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShipmentUSPSClient) UpdateOne(su *ShipmentUSPS) *ShipmentUSPSUpdateOne {
	mutation := newShipmentUSPSMutation(c.config, OpUpdateOne, withShipmentUSPS(su))
	return &ShipmentUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShipmentUSPSClient) UpdateOneID(id pulid.ID) *ShipmentUSPSUpdateOne {
	mutation := newShipmentUSPSMutation(c.config, OpUpdateOne, withShipmentUSPSID(id))
	return &ShipmentUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShipmentUSPS.
func (c *ShipmentUSPSClient) Delete() *ShipmentUSPSDelete {
	mutation := newShipmentUSPSMutation(c.config, OpDelete)
	return &ShipmentUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShipmentUSPSClient) DeleteOne(su *ShipmentUSPS) *ShipmentUSPSDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShipmentUSPSClient) DeleteOneID(id pulid.ID) *ShipmentUSPSDeleteOne {
	builder := c.Delete().Where(shipmentusps.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShipmentUSPSDeleteOne{builder}
}

// Query returns a query builder for ShipmentUSPS.
func (c *ShipmentUSPSClient) Query() *ShipmentUSPSQuery {
	return &ShipmentUSPSQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShipmentUSPS},
		inters: c.Interceptors(),
	}
}

// Get returns a ShipmentUSPS entity by its id.
func (c *ShipmentUSPSClient) Get(ctx context.Context, id pulid.ID) (*ShipmentUSPS, error) {
	return c.Query().Where(shipmentusps.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShipmentUSPSClient) GetX(ctx context.Context, id pulid.ID) *ShipmentUSPS {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a ShipmentUSPS.
func (c *ShipmentUSPSClient) QueryTenant(su *ShipmentUSPS) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentusps.Table, shipmentusps.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, shipmentusps.TenantTable, shipmentusps.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipment queries the shipment edge of a ShipmentUSPS.
func (c *ShipmentUSPSClient) QueryShipment(su *ShipmentUSPS) *ShipmentQuery {
	query := (&ShipmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := su.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shipmentusps.Table, shipmentusps.FieldID, id),
			sqlgraph.To(shipment.Table, shipment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, shipmentusps.ShipmentTable, shipmentusps.ShipmentColumn),
		)
		fromV = sqlgraph.Neighbors(su.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShipmentUSPSClient) Hooks() []Hook {
	hooks := c.hooks.ShipmentUSPS
	return append(hooks[:len(hooks):len(hooks)], shipmentusps.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ShipmentUSPSClient) Interceptors() []Interceptor {
	return c.inters.ShipmentUSPS
}

func (c *ShipmentUSPSClient) mutate(ctx context.Context, m *ShipmentUSPSMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShipmentUSPSCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShipmentUSPSUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShipmentUSPSUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShipmentUSPSDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShipmentUSPS mutation op: %q", m.Op())
	}
}

// SignupOptionsClient is a client for the SignupOptions schema.
type SignupOptionsClient struct {
	config
}

// NewSignupOptionsClient returns a client for the SignupOptions from the given config.
func NewSignupOptionsClient(c config) *SignupOptionsClient {
	return &SignupOptionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `signupoptions.Hooks(f(g(h())))`.
func (c *SignupOptionsClient) Use(hooks ...Hook) {
	c.hooks.SignupOptions = append(c.hooks.SignupOptions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `signupoptions.Intercept(f(g(h())))`.
func (c *SignupOptionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SignupOptions = append(c.inters.SignupOptions, interceptors...)
}

// Create returns a builder for creating a SignupOptions entity.
func (c *SignupOptionsClient) Create() *SignupOptionsCreate {
	mutation := newSignupOptionsMutation(c.config, OpCreate)
	return &SignupOptionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SignupOptions entities.
func (c *SignupOptionsClient) CreateBulk(builders ...*SignupOptionsCreate) *SignupOptionsCreateBulk {
	return &SignupOptionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SignupOptionsClient) MapCreateBulk(slice any, setFunc func(*SignupOptionsCreate, int)) *SignupOptionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SignupOptionsCreateBulk{err: fmt.Errorf("calling to SignupOptionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SignupOptionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SignupOptionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SignupOptions.
func (c *SignupOptionsClient) Update() *SignupOptionsUpdate {
	mutation := newSignupOptionsMutation(c.config, OpUpdate)
	return &SignupOptionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SignupOptionsClient) UpdateOne(so *SignupOptions) *SignupOptionsUpdateOne {
	mutation := newSignupOptionsMutation(c.config, OpUpdateOne, withSignupOptions(so))
	return &SignupOptionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SignupOptionsClient) UpdateOneID(id pulid.ID) *SignupOptionsUpdateOne {
	mutation := newSignupOptionsMutation(c.config, OpUpdateOne, withSignupOptionsID(id))
	return &SignupOptionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SignupOptions.
func (c *SignupOptionsClient) Delete() *SignupOptionsDelete {
	mutation := newSignupOptionsMutation(c.config, OpDelete)
	return &SignupOptionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SignupOptionsClient) DeleteOne(so *SignupOptions) *SignupOptionsDeleteOne {
	return c.DeleteOneID(so.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SignupOptionsClient) DeleteOneID(id pulid.ID) *SignupOptionsDeleteOne {
	builder := c.Delete().Where(signupoptions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SignupOptionsDeleteOne{builder}
}

// Query returns a query builder for SignupOptions.
func (c *SignupOptionsClient) Query() *SignupOptionsQuery {
	return &SignupOptionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSignupOptions},
		inters: c.Interceptors(),
	}
}

// Get returns a SignupOptions entity by its id.
func (c *SignupOptionsClient) Get(ctx context.Context, id pulid.ID) (*SignupOptions, error) {
	return c.Query().Where(signupoptions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SignupOptionsClient) GetX(ctx context.Context, id pulid.ID) *SignupOptions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a SignupOptions.
func (c *SignupOptionsClient) QueryUsers(so *SignupOptions) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := so.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(signupoptions.Table, signupoptions.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, signupoptions.UsersTable, signupoptions.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(so.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SignupOptionsClient) Hooks() []Hook {
	hooks := c.hooks.SignupOptions
	return append(hooks[:len(hooks):len(hooks)], signupoptions.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SignupOptionsClient) Interceptors() []Interceptor {
	return c.inters.SignupOptions
}

func (c *SignupOptionsClient) mutate(ctx context.Context, m *SignupOptionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SignupOptionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SignupOptionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SignupOptionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SignupOptionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SignupOptions mutation op: %q", m.Op())
	}
}

// SystemEventsClient is a client for the SystemEvents schema.
type SystemEventsClient struct {
	config
}

// NewSystemEventsClient returns a client for the SystemEvents from the given config.
func NewSystemEventsClient(c config) *SystemEventsClient {
	return &SystemEventsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `systemevents.Hooks(f(g(h())))`.
func (c *SystemEventsClient) Use(hooks ...Hook) {
	c.hooks.SystemEvents = append(c.hooks.SystemEvents, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `systemevents.Intercept(f(g(h())))`.
func (c *SystemEventsClient) Intercept(interceptors ...Interceptor) {
	c.inters.SystemEvents = append(c.inters.SystemEvents, interceptors...)
}

// Create returns a builder for creating a SystemEvents entity.
func (c *SystemEventsClient) Create() *SystemEventsCreate {
	mutation := newSystemEventsMutation(c.config, OpCreate)
	return &SystemEventsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SystemEvents entities.
func (c *SystemEventsClient) CreateBulk(builders ...*SystemEventsCreate) *SystemEventsCreateBulk {
	return &SystemEventsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SystemEventsClient) MapCreateBulk(slice any, setFunc func(*SystemEventsCreate, int)) *SystemEventsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SystemEventsCreateBulk{err: fmt.Errorf("calling to SystemEventsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SystemEventsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SystemEventsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SystemEvents.
func (c *SystemEventsClient) Update() *SystemEventsUpdate {
	mutation := newSystemEventsMutation(c.config, OpUpdate)
	return &SystemEventsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SystemEventsClient) UpdateOne(se *SystemEvents) *SystemEventsUpdateOne {
	mutation := newSystemEventsMutation(c.config, OpUpdateOne, withSystemEvents(se))
	return &SystemEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SystemEventsClient) UpdateOneID(id pulid.ID) *SystemEventsUpdateOne {
	mutation := newSystemEventsMutation(c.config, OpUpdateOne, withSystemEventsID(id))
	return &SystemEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SystemEvents.
func (c *SystemEventsClient) Delete() *SystemEventsDelete {
	mutation := newSystemEventsMutation(c.config, OpDelete)
	return &SystemEventsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SystemEventsClient) DeleteOne(se *SystemEvents) *SystemEventsDeleteOne {
	return c.DeleteOneID(se.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SystemEventsClient) DeleteOneID(id pulid.ID) *SystemEventsDeleteOne {
	builder := c.Delete().Where(systemevents.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SystemEventsDeleteOne{builder}
}

// Query returns a query builder for SystemEvents.
func (c *SystemEventsClient) Query() *SystemEventsQuery {
	return &SystemEventsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSystemEvents},
		inters: c.Interceptors(),
	}
}

// Get returns a SystemEvents entity by its id.
func (c *SystemEventsClient) Get(ctx context.Context, id pulid.ID) (*SystemEvents, error) {
	return c.Query().Where(systemevents.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SystemEventsClient) GetX(ctx context.Context, id pulid.ID) *SystemEvents {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a SystemEvents.
func (c *SystemEventsClient) QueryTenant(se *SystemEvents) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := se.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(systemevents.Table, systemevents.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systemevents.TenantTable, systemevents.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(se.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SystemEventsClient) Hooks() []Hook {
	hooks := c.hooks.SystemEvents
	return append(hooks[:len(hooks):len(hooks)], systemevents.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SystemEventsClient) Interceptors() []Interceptor {
	return c.inters.SystemEvents
}

func (c *SystemEventsClient) mutate(ctx context.Context, m *SystemEventsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SystemEventsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SystemEventsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SystemEventsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SystemEventsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SystemEvents mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id pulid.ID) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id pulid.ID) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id pulid.ID) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id pulid.ID) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConnectOptionCarriers queries the connect_option_carriers edge of a Tenant.
func (c *TenantClient) QueryConnectOptionCarriers(t *Tenant) *ConnectOptionCarrierQuery {
	query := (&ConnectOptionCarrierClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(connectoptioncarrier.Table, connectoptioncarrier.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tenant.ConnectOptionCarriersTable, tenant.ConnectOptionCarriersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConnectOptionPlatforms queries the connect_option_platforms edge of a Tenant.
func (c *TenantClient) QueryConnectOptionPlatforms(t *Tenant) *ConnectOptionPlatformQuery {
	query := (&ConnectOptionPlatformClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(connectoptionplatform.Table, connectoptionplatform.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, tenant.ConnectOptionPlatformsTable, tenant.ConnectOptionPlatformsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Tenant.
func (c *TenantClient) QueryPlan(t *Tenant) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tenant.PlanTable, tenant.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompanyAddress queries the company_address edge of a Tenant.
func (c *TenantClient) QueryCompanyAddress(t *Tenant) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenant.CompanyAddressTable, tenant.CompanyAddressColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDefaultLanguage queries the default_language edge of a Tenant.
func (c *TenantClient) QueryDefaultLanguage(t *Tenant) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenant.DefaultLanguageTable, tenant.DefaultLanguageColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBillingContact queries the billing_contact edge of a Tenant.
func (c *TenantClient) QueryBillingContact(t *Tenant) *ContactQuery {
	query := (&ContactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenant.BillingContactTable, tenant.BillingContactColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdminContact queries the admin_contact edge of a Tenant.
func (c *TenantClient) QueryAdminContact(t *Tenant) *ContactQuery {
	query := (&ContactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(contact.Table, contact.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, tenant.AdminContactTable, tenant.AdminContactColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	hooks := c.hooks.Tenant
	return append(hooks[:len(hooks):len(hooks)], tenant.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id pulid.ID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id pulid.ID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id pulid.ID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id pulid.ID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a User.
func (c *UserClient) QueryTenant(u *User) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.TenantTable, user.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOtkRequests queries the otk_requests edge of a User.
func (c *UserClient) QueryOtkRequests(u *User) *OTKRequestsQuery {
	query := (&OTKRequestsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(otkrequests.Table, otkrequests.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OtkRequestsTable, user.OtkRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySignupOptions queries the signup_options edge of a User.
func (c *UserClient) QuerySignupOptions(u *User) *SignupOptionsQuery {
	query := (&SignupOptionsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(signupoptions.Table, signupoptions.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SignupOptionsTable, user.SignupOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a User.
func (c *UserClient) QueryLanguage(u *User) *LanguageQuery {
	query := (&LanguageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.LanguageTable, user.LanguageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChangeHistory queries the change_history edge of a User.
func (c *UserClient) QueryChangeHistory(u *User) *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ChangeHistoryTable, user.ChangeHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlanHistoryUser queries the plan_history_user edge of a User.
func (c *UserClient) QueryPlanHistoryUser(u *User) *PlanHistoryQuery {
	query := (&PlanHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(planhistory.Table, planhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PlanHistoryUserTable, user.PlanHistoryUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAPIToken queries the api_token edge of a User.
func (c *UserClient) QueryAPIToken(u *User) *APITokenQuery {
	query := (&APITokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.APITokenTable, user.APITokenColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySelectedWorkstation queries the selected_workstation edge of a User.
func (c *UserClient) QuerySelectedWorkstation(u *User) *WorkstationQuery {
	query := (&WorkstationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workstation.Table, workstation.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SelectedWorkstationTable, user.SelectedWorkstationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeatGroup queries the seat_group edge of a User.
func (c *UserClient) QuerySeatGroup(u *User) *SeatGroupQuery {
	query := (&SeatGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(seatgroup.Table, seatgroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.SeatGroupTable, user.SeatGroupColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkspaceRecentScan queries the workspace_recent_scan edge of a User.
func (c *UserClient) QueryWorkspaceRecentScan(u *User) *WorkspaceRecentScanQuery {
	query := (&WorkspaceRecentScanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workspacerecentscan.Table, workspacerecentscan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.WorkspaceRecentScanTable, user.WorkspaceRecentScanColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserSeatClient is a client for the UserSeat schema.
type UserSeatClient struct {
	config
}

// NewUserSeatClient returns a client for the UserSeat from the given config.
func NewUserSeatClient(c config) *UserSeatClient {
	return &UserSeatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userseat.Hooks(f(g(h())))`.
func (c *UserSeatClient) Use(hooks ...Hook) {
	c.hooks.UserSeat = append(c.hooks.UserSeat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userseat.Intercept(f(g(h())))`.
func (c *UserSeatClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSeat = append(c.inters.UserSeat, interceptors...)
}

// Create returns a builder for creating a UserSeat entity.
func (c *UserSeatClient) Create() *UserSeatCreate {
	mutation := newUserSeatMutation(c.config, OpCreate)
	return &UserSeatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSeat entities.
func (c *UserSeatClient) CreateBulk(builders ...*UserSeatCreate) *UserSeatCreateBulk {
	return &UserSeatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSeatClient) MapCreateBulk(slice any, setFunc func(*UserSeatCreate, int)) *UserSeatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSeatCreateBulk{err: fmt.Errorf("calling to UserSeatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSeatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSeatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSeat.
func (c *UserSeatClient) Update() *UserSeatUpdate {
	mutation := newUserSeatMutation(c.config, OpUpdate)
	return &UserSeatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSeatClient) UpdateOne(us *UserSeat) *UserSeatUpdateOne {
	mutation := newUserSeatMutation(c.config, OpUpdateOne, withUserSeat(us))
	return &UserSeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSeatClient) UpdateOneID(id pulid.ID) *UserSeatUpdateOne {
	mutation := newUserSeatMutation(c.config, OpUpdateOne, withUserSeatID(id))
	return &UserSeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSeat.
func (c *UserSeatClient) Delete() *UserSeatDelete {
	mutation := newUserSeatMutation(c.config, OpDelete)
	return &UserSeatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSeatClient) DeleteOne(us *UserSeat) *UserSeatDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSeatClient) DeleteOneID(id pulid.ID) *UserSeatDeleteOne {
	builder := c.Delete().Where(userseat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSeatDeleteOne{builder}
}

// Query returns a query builder for UserSeat.
func (c *UserSeatClient) Query() *UserSeatQuery {
	return &UserSeatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSeat},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSeat entity by its id.
func (c *UserSeatClient) Get(ctx context.Context, id pulid.ID) (*UserSeat, error) {
	return c.Query().Where(userseat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSeatClient) GetX(ctx context.Context, id pulid.ID) *UserSeat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a UserSeat.
func (c *UserSeatClient) QueryTenant(us *UserSeat) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userseat.Table, userseat.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userseat.TenantTable, userseat.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSeatClient) Hooks() []Hook {
	hooks := c.hooks.UserSeat
	return append(hooks[:len(hooks):len(hooks)], userseat.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserSeatClient) Interceptors() []Interceptor {
	return c.inters.UserSeat
}

func (c *UserSeatClient) mutate(ctx context.Context, m *UserSeatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSeatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSeatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSeatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSeatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserSeat mutation op: %q", m.Op())
	}
}

// WorkspaceRecentScanClient is a client for the WorkspaceRecentScan schema.
type WorkspaceRecentScanClient struct {
	config
}

// NewWorkspaceRecentScanClient returns a client for the WorkspaceRecentScan from the given config.
func NewWorkspaceRecentScanClient(c config) *WorkspaceRecentScanClient {
	return &WorkspaceRecentScanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workspacerecentscan.Hooks(f(g(h())))`.
func (c *WorkspaceRecentScanClient) Use(hooks ...Hook) {
	c.hooks.WorkspaceRecentScan = append(c.hooks.WorkspaceRecentScan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workspacerecentscan.Intercept(f(g(h())))`.
func (c *WorkspaceRecentScanClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkspaceRecentScan = append(c.inters.WorkspaceRecentScan, interceptors...)
}

// Create returns a builder for creating a WorkspaceRecentScan entity.
func (c *WorkspaceRecentScanClient) Create() *WorkspaceRecentScanCreate {
	mutation := newWorkspaceRecentScanMutation(c.config, OpCreate)
	return &WorkspaceRecentScanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkspaceRecentScan entities.
func (c *WorkspaceRecentScanClient) CreateBulk(builders ...*WorkspaceRecentScanCreate) *WorkspaceRecentScanCreateBulk {
	return &WorkspaceRecentScanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkspaceRecentScanClient) MapCreateBulk(slice any, setFunc func(*WorkspaceRecentScanCreate, int)) *WorkspaceRecentScanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkspaceRecentScanCreateBulk{err: fmt.Errorf("calling to WorkspaceRecentScanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkspaceRecentScanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkspaceRecentScanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkspaceRecentScan.
func (c *WorkspaceRecentScanClient) Update() *WorkspaceRecentScanUpdate {
	mutation := newWorkspaceRecentScanMutation(c.config, OpUpdate)
	return &WorkspaceRecentScanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkspaceRecentScanClient) UpdateOne(wrs *WorkspaceRecentScan) *WorkspaceRecentScanUpdateOne {
	mutation := newWorkspaceRecentScanMutation(c.config, OpUpdateOne, withWorkspaceRecentScan(wrs))
	return &WorkspaceRecentScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkspaceRecentScanClient) UpdateOneID(id pulid.ID) *WorkspaceRecentScanUpdateOne {
	mutation := newWorkspaceRecentScanMutation(c.config, OpUpdateOne, withWorkspaceRecentScanID(id))
	return &WorkspaceRecentScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkspaceRecentScan.
func (c *WorkspaceRecentScanClient) Delete() *WorkspaceRecentScanDelete {
	mutation := newWorkspaceRecentScanMutation(c.config, OpDelete)
	return &WorkspaceRecentScanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkspaceRecentScanClient) DeleteOne(wrs *WorkspaceRecentScan) *WorkspaceRecentScanDeleteOne {
	return c.DeleteOneID(wrs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkspaceRecentScanClient) DeleteOneID(id pulid.ID) *WorkspaceRecentScanDeleteOne {
	builder := c.Delete().Where(workspacerecentscan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkspaceRecentScanDeleteOne{builder}
}

// Query returns a query builder for WorkspaceRecentScan.
func (c *WorkspaceRecentScanClient) Query() *WorkspaceRecentScanQuery {
	return &WorkspaceRecentScanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkspaceRecentScan},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkspaceRecentScan entity by its id.
func (c *WorkspaceRecentScanClient) Get(ctx context.Context, id pulid.ID) (*WorkspaceRecentScan, error) {
	return c.Query().Where(workspacerecentscan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkspaceRecentScanClient) GetX(ctx context.Context, id pulid.ID) *WorkspaceRecentScan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a WorkspaceRecentScan.
func (c *WorkspaceRecentScanClient) QueryTenant(wrs *WorkspaceRecentScan) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wrs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspacerecentscan.Table, workspacerecentscan.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workspacerecentscan.TenantTable, workspacerecentscan.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(wrs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShipmentParcel queries the shipment_parcel edge of a WorkspaceRecentScan.
func (c *WorkspaceRecentScanClient) QueryShipmentParcel(wrs *WorkspaceRecentScan) *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wrs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspacerecentscan.Table, workspacerecentscan.FieldID, id),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workspacerecentscan.ShipmentParcelTable, workspacerecentscan.ShipmentParcelColumn),
		)
		fromV = sqlgraph.Neighbors(wrs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a WorkspaceRecentScan.
func (c *WorkspaceRecentScanClient) QueryUser(wrs *WorkspaceRecentScan) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wrs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workspacerecentscan.Table, workspacerecentscan.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workspacerecentscan.UserTable, workspacerecentscan.UserColumn),
		)
		fromV = sqlgraph.Neighbors(wrs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkspaceRecentScanClient) Hooks() []Hook {
	hooks := c.hooks.WorkspaceRecentScan
	return append(hooks[:len(hooks):len(hooks)], workspacerecentscan.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *WorkspaceRecentScanClient) Interceptors() []Interceptor {
	return c.inters.WorkspaceRecentScan
}

func (c *WorkspaceRecentScanClient) mutate(ctx context.Context, m *WorkspaceRecentScanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkspaceRecentScanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkspaceRecentScanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkspaceRecentScanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkspaceRecentScanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkspaceRecentScan mutation op: %q", m.Op())
	}
}

// WorkstationClient is a client for the Workstation schema.
type WorkstationClient struct {
	config
}

// NewWorkstationClient returns a client for the Workstation from the given config.
func NewWorkstationClient(c config) *WorkstationClient {
	return &WorkstationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workstation.Hooks(f(g(h())))`.
func (c *WorkstationClient) Use(hooks ...Hook) {
	c.hooks.Workstation = append(c.hooks.Workstation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workstation.Intercept(f(g(h())))`.
func (c *WorkstationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Workstation = append(c.inters.Workstation, interceptors...)
}

// Create returns a builder for creating a Workstation entity.
func (c *WorkstationClient) Create() *WorkstationCreate {
	mutation := newWorkstationMutation(c.config, OpCreate)
	return &WorkstationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workstation entities.
func (c *WorkstationClient) CreateBulk(builders ...*WorkstationCreate) *WorkstationCreateBulk {
	return &WorkstationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkstationClient) MapCreateBulk(slice any, setFunc func(*WorkstationCreate, int)) *WorkstationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkstationCreateBulk{err: fmt.Errorf("calling to WorkstationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkstationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkstationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workstation.
func (c *WorkstationClient) Update() *WorkstationUpdate {
	mutation := newWorkstationMutation(c.config, OpUpdate)
	return &WorkstationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkstationClient) UpdateOne(w *Workstation) *WorkstationUpdateOne {
	mutation := newWorkstationMutation(c.config, OpUpdateOne, withWorkstation(w))
	return &WorkstationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkstationClient) UpdateOneID(id pulid.ID) *WorkstationUpdateOne {
	mutation := newWorkstationMutation(c.config, OpUpdateOne, withWorkstationID(id))
	return &WorkstationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workstation.
func (c *WorkstationClient) Delete() *WorkstationDelete {
	mutation := newWorkstationMutation(c.config, OpDelete)
	return &WorkstationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkstationClient) DeleteOne(w *Workstation) *WorkstationDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkstationClient) DeleteOneID(id pulid.ID) *WorkstationDeleteOne {
	builder := c.Delete().Where(workstation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkstationDeleteOne{builder}
}

// Query returns a query builder for Workstation.
func (c *WorkstationClient) Query() *WorkstationQuery {
	return &WorkstationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkstation},
		inters: c.Interceptors(),
	}
}

// Get returns a Workstation entity by its id.
func (c *WorkstationClient) Get(ctx context.Context, id pulid.ID) (*Workstation, error) {
	return c.Query().Where(workstation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkstationClient) GetX(ctx context.Context, id pulid.ID) *Workstation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Workstation.
func (c *WorkstationClient) QueryTenant(w *Workstation) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workstation.TenantTable, workstation.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrinter queries the printer edge of a Workstation.
func (c *WorkstationClient) QueryPrinter(w *Workstation) *PrinterQuery {
	query := (&PrinterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, id),
			sqlgraph.To(printer.Table, printer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workstation.PrinterTable, workstation.PrinterColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Workstation.
func (c *WorkstationClient) QueryUser(w *Workstation) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workstation.UserTable, workstation.UserColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySelectedUser queries the selected_user edge of a Workstation.
func (c *WorkstationClient) QuerySelectedUser(w *Workstation) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workstation.Table, workstation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, workstation.SelectedUserTable, workstation.SelectedUserColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkstationClient) Hooks() []Hook {
	hooks := c.hooks.Workstation
	return append(hooks[:len(hooks):len(hooks)], workstation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *WorkstationClient) Interceptors() []Interceptor {
	inters := c.inters.Workstation
	return append(inters[:len(inters):len(inters)], workstation.Interceptors[:]...)
}

func (c *WorkstationClient) mutate(ctx context.Context, m *WorkstationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkstationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkstationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkstationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkstationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Workstation mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APIToken, AccessRight, Address, AddressGlobal, BusinessHoursPeriod, Carrier,
		CarrierAdditionalServiceBring, CarrierAdditionalServiceDAO,
		CarrierAdditionalServiceDF, CarrierAdditionalServiceDSV,
		CarrierAdditionalServiceEasyPost, CarrierAdditionalServiceGLS,
		CarrierAdditionalServicePostNord, CarrierAdditionalServiceUSPS, CarrierBrand,
		CarrierBring, CarrierDAO, CarrierDF, CarrierDSV, CarrierEasyPost, CarrierGLS,
		CarrierPostNord, CarrierService, CarrierServiceBring, CarrierServiceDAO,
		CarrierServiceDF, CarrierServiceDSV, CarrierServiceEasyPost, CarrierServiceGLS,
		CarrierServicePostNord, CarrierServiceUSPS, CarrierUSPS, ChangeHistory, Colli,
		ConnectOptionCarrier, ConnectOptionPlatform, Connection, ConnectionBrand,
		ConnectionLookup, ConnectionShopify, Consolidation, Contact, Country,
		CountryHarmonizedCode, Currency, DeliveryOption, DeliveryOptionBring,
		DeliveryOptionDAO, DeliveryOptionDF, DeliveryOptionDSV, DeliveryOptionEasyPost,
		DeliveryOptionGLS, DeliveryOptionPostNord, DeliveryOptionUSPS, DeliveryRule,
		DeliveryRuleConstraint, DeliveryRuleConstraintGroup, Document, DocumentFile,
		EmailTemplate, HypothesisTest, HypothesisTestDeliveryOption,
		HypothesisTestDeliveryOptionLookup, HypothesisTestDeliveryOptionRequest,
		InventoryItem, Language, Location, LocationTag, Notification, OTKRequests,
		Order, OrderHistory, OrderLine, OrderSender, Packaging, PackagingDF,
		PackagingUSPS, PackagingUSPSProcessingCategory, PackagingUSPSRateIndicator,
		Pallet, ParcelShop, ParcelShopBring, ParcelShopDAO, ParcelShopGLS,
		ParcelShopPostNord, Plan, PlanHistory, PrintJob, Printer, Product,
		ProductImage, ProductTag, ProductVariant, ReturnColli, ReturnColliHistory,
		ReturnOrderLine, ReturnPortal, ReturnPortalClaim, SeatGroup,
		SeatGroupAccessRight, Shipment, ShipmentBring, ShipmentDAO, ShipmentDF,
		ShipmentDSV, ShipmentEasyPost, ShipmentGLS, ShipmentHistory, ShipmentPallet,
		ShipmentParcel, ShipmentPostNord, ShipmentUSPS, SignupOptions, SystemEvents,
		Tenant, User, UserSeat, WorkspaceRecentScan, Workstation []ent.Hook
	}
	inters struct {
		APIToken, AccessRight, Address, AddressGlobal, BusinessHoursPeriod, Carrier,
		CarrierAdditionalServiceBring, CarrierAdditionalServiceDAO,
		CarrierAdditionalServiceDF, CarrierAdditionalServiceDSV,
		CarrierAdditionalServiceEasyPost, CarrierAdditionalServiceGLS,
		CarrierAdditionalServicePostNord, CarrierAdditionalServiceUSPS, CarrierBrand,
		CarrierBring, CarrierDAO, CarrierDF, CarrierDSV, CarrierEasyPost, CarrierGLS,
		CarrierPostNord, CarrierService, CarrierServiceBring, CarrierServiceDAO,
		CarrierServiceDF, CarrierServiceDSV, CarrierServiceEasyPost, CarrierServiceGLS,
		CarrierServicePostNord, CarrierServiceUSPS, CarrierUSPS, ChangeHistory, Colli,
		ConnectOptionCarrier, ConnectOptionPlatform, Connection, ConnectionBrand,
		ConnectionLookup, ConnectionShopify, Consolidation, Contact, Country,
		CountryHarmonizedCode, Currency, DeliveryOption, DeliveryOptionBring,
		DeliveryOptionDAO, DeliveryOptionDF, DeliveryOptionDSV, DeliveryOptionEasyPost,
		DeliveryOptionGLS, DeliveryOptionPostNord, DeliveryOptionUSPS, DeliveryRule,
		DeliveryRuleConstraint, DeliveryRuleConstraintGroup, Document, DocumentFile,
		EmailTemplate, HypothesisTest, HypothesisTestDeliveryOption,
		HypothesisTestDeliveryOptionLookup, HypothesisTestDeliveryOptionRequest,
		InventoryItem, Language, Location, LocationTag, Notification, OTKRequests,
		Order, OrderHistory, OrderLine, OrderSender, Packaging, PackagingDF,
		PackagingUSPS, PackagingUSPSProcessingCategory, PackagingUSPSRateIndicator,
		Pallet, ParcelShop, ParcelShopBring, ParcelShopDAO, ParcelShopGLS,
		ParcelShopPostNord, Plan, PlanHistory, PrintJob, Printer, Product,
		ProductImage, ProductTag, ProductVariant, ReturnColli, ReturnColliHistory,
		ReturnOrderLine, ReturnPortal, ReturnPortalClaim, SeatGroup,
		SeatGroupAccessRight, Shipment, ShipmentBring, ShipmentDAO, ShipmentDF,
		ShipmentDSV, ShipmentEasyPost, ShipmentGLS, ShipmentHistory, ShipmentPallet,
		ShipmentParcel, ShipmentPostNord, ShipmentUSPS, SignupOptions, SystemEvents,
		Tenant, User, UserSeat, WorkspaceRecentScan, Workstation []ent.Interceptor
	}
)
