// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnPortalQuery is the builder for querying ReturnPortal entities.
type ReturnPortalQuery struct {
	config
	ctx                         *QueryContext
	order                       []returnportal.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.ReturnPortal
	withTenant                  *TenantQuery
	withReturnPortalClaim       *ReturnPortalClaimQuery
	withReturnLocation          *LocationQuery
	withDeliveryOptions         *DeliveryOptionQuery
	withConnection              *ConnectionQuery
	withEmailConfirmationLabel  *EmailTemplateQuery
	withEmailConfirmationQrCode *EmailTemplateQuery
	withEmailReceived           *EmailTemplateQuery
	withEmailAccepted           *EmailTemplateQuery
	withReturnColli             *ReturnColliQuery
	withFKs                     bool
	modifiers                   []func(*sql.Selector)
	loadTotal                   []func(context.Context, []*ReturnPortal) error
	withNamedReturnPortalClaim  map[string]*ReturnPortalClaimQuery
	withNamedReturnLocation     map[string]*LocationQuery
	withNamedDeliveryOptions    map[string]*DeliveryOptionQuery
	withNamedReturnColli        map[string]*ReturnColliQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ReturnPortalQuery builder.
func (rpq *ReturnPortalQuery) Where(ps ...predicate.ReturnPortal) *ReturnPortalQuery {
	rpq.predicates = append(rpq.predicates, ps...)
	return rpq
}

// Limit the number of records to be returned by this query.
func (rpq *ReturnPortalQuery) Limit(limit int) *ReturnPortalQuery {
	rpq.ctx.Limit = &limit
	return rpq
}

// Offset to start from.
func (rpq *ReturnPortalQuery) Offset(offset int) *ReturnPortalQuery {
	rpq.ctx.Offset = &offset
	return rpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rpq *ReturnPortalQuery) Unique(unique bool) *ReturnPortalQuery {
	rpq.ctx.Unique = &unique
	return rpq
}

// Order specifies how the records should be ordered.
func (rpq *ReturnPortalQuery) Order(o ...returnportal.OrderOption) *ReturnPortalQuery {
	rpq.order = append(rpq.order, o...)
	return rpq
}

// QueryTenant chains the current query on the "tenant" edge.
func (rpq *ReturnPortalQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.TenantTable, returnportal.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnPortalClaim chains the current query on the "return_portal_claim" edge.
func (rpq *ReturnPortalQuery) QueryReturnPortalClaim() *ReturnPortalClaimQuery {
	query := (&ReturnPortalClaimClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(returnportalclaim.Table, returnportalclaim.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, returnportal.ReturnPortalClaimTable, returnportal.ReturnPortalClaimColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnLocation chains the current query on the "return_location" edge.
func (rpq *ReturnPortalQuery) QueryReturnLocation() *LocationQuery {
	query := (&LocationClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, returnportal.ReturnLocationTable, returnportal.ReturnLocationPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptions chains the current query on the "delivery_options" edge.
func (rpq *ReturnPortalQuery) QueryDeliveryOptions() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, returnportal.DeliveryOptionsTable, returnportal.DeliveryOptionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConnection chains the current query on the "connection" edge.
func (rpq *ReturnPortalQuery) QueryConnection() *ConnectionQuery {
	query := (&ConnectionClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(connection.Table, connection.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, returnportal.ConnectionTable, returnportal.ConnectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailConfirmationLabel chains the current query on the "email_confirmation_label" edge.
func (rpq *ReturnPortalQuery) QueryEmailConfirmationLabel() *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailConfirmationLabelTable, returnportal.EmailConfirmationLabelColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailConfirmationQrCode chains the current query on the "email_confirmation_qr_code" edge.
func (rpq *ReturnPortalQuery) QueryEmailConfirmationQrCode() *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailConfirmationQrCodeTable, returnportal.EmailConfirmationQrCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailReceived chains the current query on the "email_received" edge.
func (rpq *ReturnPortalQuery) QueryEmailReceived() *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailReceivedTable, returnportal.EmailReceivedColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailAccepted chains the current query on the "email_accepted" edge.
func (rpq *ReturnPortalQuery) QueryEmailAccepted() *EmailTemplateQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(emailtemplate.Table, emailtemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, returnportal.EmailAcceptedTable, returnportal.EmailAcceptedColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReturnColli chains the current query on the "return_colli" edge.
func (rpq *ReturnPortalQuery) QueryReturnColli() *ReturnColliQuery {
	query := (&ReturnColliClient{config: rpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(returnportal.Table, returnportal.FieldID, selector),
			sqlgraph.To(returncolli.Table, returncolli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, returnportal.ReturnColliTable, returnportal.ReturnColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(rpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ReturnPortal entity from the query.
// Returns a *NotFoundError when no ReturnPortal was found.
func (rpq *ReturnPortalQuery) First(ctx context.Context) (*ReturnPortal, error) {
	nodes, err := rpq.Limit(1).All(setContextOp(ctx, rpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{returnportal.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rpq *ReturnPortalQuery) FirstX(ctx context.Context) *ReturnPortal {
	node, err := rpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ReturnPortal ID from the query.
// Returns a *NotFoundError when no ReturnPortal ID was found.
func (rpq *ReturnPortalQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = rpq.Limit(1).IDs(setContextOp(ctx, rpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{returnportal.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rpq *ReturnPortalQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := rpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ReturnPortal entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ReturnPortal entity is found.
// Returns a *NotFoundError when no ReturnPortal entities are found.
func (rpq *ReturnPortalQuery) Only(ctx context.Context) (*ReturnPortal, error) {
	nodes, err := rpq.Limit(2).All(setContextOp(ctx, rpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{returnportal.Label}
	default:
		return nil, &NotSingularError{returnportal.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rpq *ReturnPortalQuery) OnlyX(ctx context.Context) *ReturnPortal {
	node, err := rpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ReturnPortal ID in the query.
// Returns a *NotSingularError when more than one ReturnPortal ID is found.
// Returns a *NotFoundError when no entities are found.
func (rpq *ReturnPortalQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = rpq.Limit(2).IDs(setContextOp(ctx, rpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{returnportal.Label}
	default:
		err = &NotSingularError{returnportal.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rpq *ReturnPortalQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := rpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ReturnPortals.
func (rpq *ReturnPortalQuery) All(ctx context.Context) ([]*ReturnPortal, error) {
	ctx = setContextOp(ctx, rpq.ctx, ent.OpQueryAll)
	if err := rpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ReturnPortal, *ReturnPortalQuery]()
	return withInterceptors[[]*ReturnPortal](ctx, rpq, qr, rpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rpq *ReturnPortalQuery) AllX(ctx context.Context) []*ReturnPortal {
	nodes, err := rpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ReturnPortal IDs.
func (rpq *ReturnPortalQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if rpq.ctx.Unique == nil && rpq.path != nil {
		rpq.Unique(true)
	}
	ctx = setContextOp(ctx, rpq.ctx, ent.OpQueryIDs)
	if err = rpq.Select(returnportal.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rpq *ReturnPortalQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := rpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rpq *ReturnPortalQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rpq.ctx, ent.OpQueryCount)
	if err := rpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rpq, querierCount[*ReturnPortalQuery](), rpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rpq *ReturnPortalQuery) CountX(ctx context.Context) int {
	count, err := rpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rpq *ReturnPortalQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rpq.ctx, ent.OpQueryExist)
	switch _, err := rpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rpq *ReturnPortalQuery) ExistX(ctx context.Context) bool {
	exist, err := rpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ReturnPortalQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rpq *ReturnPortalQuery) Clone() *ReturnPortalQuery {
	if rpq == nil {
		return nil
	}
	return &ReturnPortalQuery{
		config:                      rpq.config,
		ctx:                         rpq.ctx.Clone(),
		order:                       append([]returnportal.OrderOption{}, rpq.order...),
		inters:                      append([]Interceptor{}, rpq.inters...),
		predicates:                  append([]predicate.ReturnPortal{}, rpq.predicates...),
		withTenant:                  rpq.withTenant.Clone(),
		withReturnPortalClaim:       rpq.withReturnPortalClaim.Clone(),
		withReturnLocation:          rpq.withReturnLocation.Clone(),
		withDeliveryOptions:         rpq.withDeliveryOptions.Clone(),
		withConnection:              rpq.withConnection.Clone(),
		withEmailConfirmationLabel:  rpq.withEmailConfirmationLabel.Clone(),
		withEmailConfirmationQrCode: rpq.withEmailConfirmationQrCode.Clone(),
		withEmailReceived:           rpq.withEmailReceived.Clone(),
		withEmailAccepted:           rpq.withEmailAccepted.Clone(),
		withReturnColli:             rpq.withReturnColli.Clone(),
		// clone intermediate query.
		sql:  rpq.sql.Clone(),
		path: rpq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithTenant(opts ...func(*TenantQuery)) *ReturnPortalQuery {
	query := (&TenantClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withTenant = query
	return rpq
}

// WithReturnPortalClaim tells the query-builder to eager-load the nodes that are connected to
// the "return_portal_claim" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithReturnPortalClaim(opts ...func(*ReturnPortalClaimQuery)) *ReturnPortalQuery {
	query := (&ReturnPortalClaimClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withReturnPortalClaim = query
	return rpq
}

// WithReturnLocation tells the query-builder to eager-load the nodes that are connected to
// the "return_location" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithReturnLocation(opts ...func(*LocationQuery)) *ReturnPortalQuery {
	query := (&LocationClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withReturnLocation = query
	return rpq
}

// WithDeliveryOptions tells the query-builder to eager-load the nodes that are connected to
// the "delivery_options" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithDeliveryOptions(opts ...func(*DeliveryOptionQuery)) *ReturnPortalQuery {
	query := (&DeliveryOptionClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withDeliveryOptions = query
	return rpq
}

// WithConnection tells the query-builder to eager-load the nodes that are connected to
// the "connection" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithConnection(opts ...func(*ConnectionQuery)) *ReturnPortalQuery {
	query := (&ConnectionClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withConnection = query
	return rpq
}

// WithEmailConfirmationLabel tells the query-builder to eager-load the nodes that are connected to
// the "email_confirmation_label" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithEmailConfirmationLabel(opts ...func(*EmailTemplateQuery)) *ReturnPortalQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withEmailConfirmationLabel = query
	return rpq
}

// WithEmailConfirmationQrCode tells the query-builder to eager-load the nodes that are connected to
// the "email_confirmation_qr_code" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithEmailConfirmationQrCode(opts ...func(*EmailTemplateQuery)) *ReturnPortalQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withEmailConfirmationQrCode = query
	return rpq
}

// WithEmailReceived tells the query-builder to eager-load the nodes that are connected to
// the "email_received" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithEmailReceived(opts ...func(*EmailTemplateQuery)) *ReturnPortalQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withEmailReceived = query
	return rpq
}

// WithEmailAccepted tells the query-builder to eager-load the nodes that are connected to
// the "email_accepted" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithEmailAccepted(opts ...func(*EmailTemplateQuery)) *ReturnPortalQuery {
	query := (&EmailTemplateClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withEmailAccepted = query
	return rpq
}

// WithReturnColli tells the query-builder to eager-load the nodes that are connected to
// the "return_colli" edge. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithReturnColli(opts ...func(*ReturnColliQuery)) *ReturnPortalQuery {
	query := (&ReturnColliClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rpq.withReturnColli = query
	return rpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ReturnPortal.Query().
//		GroupBy(returnportal.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rpq *ReturnPortalQuery) GroupBy(field string, fields ...string) *ReturnPortalGroupBy {
	rpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ReturnPortalGroupBy{build: rpq}
	grbuild.flds = &rpq.ctx.Fields
	grbuild.label = returnportal.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ReturnPortal.Query().
//		Select(returnportal.FieldTenantID).
//		Scan(ctx, &v)
func (rpq *ReturnPortalQuery) Select(fields ...string) *ReturnPortalSelect {
	rpq.ctx.Fields = append(rpq.ctx.Fields, fields...)
	sbuild := &ReturnPortalSelect{ReturnPortalQuery: rpq}
	sbuild.label = returnportal.Label
	sbuild.flds, sbuild.scan = &rpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ReturnPortalSelect configured with the given aggregations.
func (rpq *ReturnPortalQuery) Aggregate(fns ...AggregateFunc) *ReturnPortalSelect {
	return rpq.Select().Aggregate(fns...)
}

func (rpq *ReturnPortalQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rpq); err != nil {
				return err
			}
		}
	}
	for _, f := range rpq.ctx.Fields {
		if !returnportal.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rpq.path != nil {
		prev, err := rpq.path(ctx)
		if err != nil {
			return err
		}
		rpq.sql = prev
	}
	if returnportal.Policy == nil {
		return errors.New("ent: uninitialized returnportal.Policy (forgotten import ent/runtime?)")
	}
	if err := returnportal.Policy.EvalQuery(ctx, rpq); err != nil {
		return err
	}
	return nil
}

func (rpq *ReturnPortalQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ReturnPortal, error) {
	var (
		nodes       = []*ReturnPortal{}
		withFKs     = rpq.withFKs
		_spec       = rpq.querySpec()
		loadedTypes = [10]bool{
			rpq.withTenant != nil,
			rpq.withReturnPortalClaim != nil,
			rpq.withReturnLocation != nil,
			rpq.withDeliveryOptions != nil,
			rpq.withConnection != nil,
			rpq.withEmailConfirmationLabel != nil,
			rpq.withEmailConfirmationQrCode != nil,
			rpq.withEmailReceived != nil,
			rpq.withEmailAccepted != nil,
			rpq.withReturnColli != nil,
		}
	)
	if rpq.withEmailConfirmationLabel != nil || rpq.withEmailConfirmationQrCode != nil || rpq.withEmailReceived != nil || rpq.withEmailAccepted != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, returnportal.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ReturnPortal).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ReturnPortal{config: rpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rpq.modifiers) > 0 {
		_spec.Modifiers = rpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rpq.withTenant; query != nil {
		if err := rpq.loadTenant(ctx, query, nodes, nil,
			func(n *ReturnPortal, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withReturnPortalClaim; query != nil {
		if err := rpq.loadReturnPortalClaim(ctx, query, nodes,
			func(n *ReturnPortal) { n.Edges.ReturnPortalClaim = []*ReturnPortalClaim{} },
			func(n *ReturnPortal, e *ReturnPortalClaim) {
				n.Edges.ReturnPortalClaim = append(n.Edges.ReturnPortalClaim, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := rpq.withReturnLocation; query != nil {
		if err := rpq.loadReturnLocation(ctx, query, nodes,
			func(n *ReturnPortal) { n.Edges.ReturnLocation = []*Location{} },
			func(n *ReturnPortal, e *Location) { n.Edges.ReturnLocation = append(n.Edges.ReturnLocation, e) }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withDeliveryOptions; query != nil {
		if err := rpq.loadDeliveryOptions(ctx, query, nodes,
			func(n *ReturnPortal) { n.Edges.DeliveryOptions = []*DeliveryOption{} },
			func(n *ReturnPortal, e *DeliveryOption) { n.Edges.DeliveryOptions = append(n.Edges.DeliveryOptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withConnection; query != nil {
		if err := rpq.loadConnection(ctx, query, nodes, nil,
			func(n *ReturnPortal, e *Connection) { n.Edges.Connection = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withEmailConfirmationLabel; query != nil {
		if err := rpq.loadEmailConfirmationLabel(ctx, query, nodes, nil,
			func(n *ReturnPortal, e *EmailTemplate) { n.Edges.EmailConfirmationLabel = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withEmailConfirmationQrCode; query != nil {
		if err := rpq.loadEmailConfirmationQrCode(ctx, query, nodes, nil,
			func(n *ReturnPortal, e *EmailTemplate) { n.Edges.EmailConfirmationQrCode = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withEmailReceived; query != nil {
		if err := rpq.loadEmailReceived(ctx, query, nodes, nil,
			func(n *ReturnPortal, e *EmailTemplate) { n.Edges.EmailReceived = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withEmailAccepted; query != nil {
		if err := rpq.loadEmailAccepted(ctx, query, nodes, nil,
			func(n *ReturnPortal, e *EmailTemplate) { n.Edges.EmailAccepted = e }); err != nil {
			return nil, err
		}
	}
	if query := rpq.withReturnColli; query != nil {
		if err := rpq.loadReturnColli(ctx, query, nodes,
			func(n *ReturnPortal) { n.Edges.ReturnColli = []*ReturnColli{} },
			func(n *ReturnPortal, e *ReturnColli) { n.Edges.ReturnColli = append(n.Edges.ReturnColli, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rpq.withNamedReturnPortalClaim {
		if err := rpq.loadReturnPortalClaim(ctx, query, nodes,
			func(n *ReturnPortal) { n.appendNamedReturnPortalClaim(name) },
			func(n *ReturnPortal, e *ReturnPortalClaim) { n.appendNamedReturnPortalClaim(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rpq.withNamedReturnLocation {
		if err := rpq.loadReturnLocation(ctx, query, nodes,
			func(n *ReturnPortal) { n.appendNamedReturnLocation(name) },
			func(n *ReturnPortal, e *Location) { n.appendNamedReturnLocation(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rpq.withNamedDeliveryOptions {
		if err := rpq.loadDeliveryOptions(ctx, query, nodes,
			func(n *ReturnPortal) { n.appendNamedDeliveryOptions(name) },
			func(n *ReturnPortal, e *DeliveryOption) { n.appendNamedDeliveryOptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range rpq.withNamedReturnColli {
		if err := rpq.loadReturnColli(ctx, query, nodes,
			func(n *ReturnPortal) { n.appendNamedReturnColli(name) },
			func(n *ReturnPortal, e *ReturnColli) { n.appendNamedReturnColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range rpq.loadTotal {
		if err := rpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rpq *ReturnPortalQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortal)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadReturnPortalClaim(ctx context.Context, query *ReturnPortalClaimQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *ReturnPortalClaim)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ReturnPortal)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnPortalClaim(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(returnportal.ReturnPortalClaimColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_portal_return_portal_claim
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_portal_return_portal_claim" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_portal_return_portal_claim" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadReturnLocation(ctx context.Context, query *LocationQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *Location)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*ReturnPortal)
	nids := make(map[pulid.ID]map[*ReturnPortal]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(returnportal.ReturnLocationTable)
		s.Join(joinT).On(s.C(location.FieldID), joinT.C(returnportal.ReturnLocationPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(returnportal.ReturnLocationPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(returnportal.ReturnLocationPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ReturnPortal]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Location](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "return_location" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadDeliveryOptions(ctx context.Context, query *DeliveryOptionQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *DeliveryOption)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*ReturnPortal)
	nids := make(map[pulid.ID]map[*ReturnPortal]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(returnportal.DeliveryOptionsTable)
		s.Join(joinT).On(s.C(deliveryoption.FieldID), joinT.C(returnportal.DeliveryOptionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(returnportal.DeliveryOptionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(returnportal.DeliveryOptionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ReturnPortal]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOption](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_options" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadConnection(ctx context.Context, query *ConnectionQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *Connection)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ReturnPortal)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Connection(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(returnportal.ConnectionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_portal_connection
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_portal_connection" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_portal_connection" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadEmailConfirmationLabel(ctx context.Context, query *EmailTemplateQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *EmailTemplate)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortal)
	for i := range nodes {
		if nodes[i].return_portal_email_confirmation_label == nil {
			continue
		}
		fk := *nodes[i].return_portal_email_confirmation_label
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailtemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_email_confirmation_label" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadEmailConfirmationQrCode(ctx context.Context, query *EmailTemplateQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *EmailTemplate)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortal)
	for i := range nodes {
		if nodes[i].return_portal_email_confirmation_qr_code == nil {
			continue
		}
		fk := *nodes[i].return_portal_email_confirmation_qr_code
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailtemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_email_confirmation_qr_code" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadEmailReceived(ctx context.Context, query *EmailTemplateQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *EmailTemplate)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortal)
	for i := range nodes {
		if nodes[i].return_portal_email_received == nil {
			continue
		}
		fk := *nodes[i].return_portal_email_received
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailtemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_email_received" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadEmailAccepted(ctx context.Context, query *EmailTemplateQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *EmailTemplate)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ReturnPortal)
	for i := range nodes {
		if nodes[i].return_portal_email_accepted == nil {
			continue
		}
		fk := *nodes[i].return_portal_email_accepted
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(emailtemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "return_portal_email_accepted" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rpq *ReturnPortalQuery) loadReturnColli(ctx context.Context, query *ReturnColliQuery, nodes []*ReturnPortal, init func(*ReturnPortal), assign func(*ReturnPortal, *ReturnColli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ReturnPortal)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReturnColli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(returnportal.ReturnColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.return_colli_return_portal
		if fk == nil {
			return fmt.Errorf(`foreign-key "return_colli_return_portal" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "return_colli_return_portal" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rpq *ReturnPortalQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rpq.querySpec()
	if len(rpq.modifiers) > 0 {
		_spec.Modifiers = rpq.modifiers
	}
	_spec.Node.Columns = rpq.ctx.Fields
	if len(rpq.ctx.Fields) > 0 {
		_spec.Unique = rpq.ctx.Unique != nil && *rpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rpq.driver, _spec)
}

func (rpq *ReturnPortalQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(returnportal.Table, returnportal.Columns, sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString))
	_spec.From = rpq.sql
	if unique := rpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rpq.path != nil {
		_spec.Unique = true
	}
	if fields := rpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, returnportal.FieldID)
		for i := range fields {
			if fields[i] != returnportal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if rpq.withTenant != nil {
			_spec.Node.AddColumnOnce(returnportal.FieldTenantID)
		}
	}
	if ps := rpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rpq *ReturnPortalQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rpq.driver.Dialect())
	t1 := builder.Table(returnportal.Table)
	columns := rpq.ctx.Fields
	if len(columns) == 0 {
		columns = returnportal.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rpq.sql != nil {
		selector = rpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rpq.ctx.Unique != nil && *rpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rpq.predicates {
		p(selector)
	}
	for _, p := range rpq.order {
		p(selector)
	}
	if offset := rpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedReturnPortalClaim tells the query-builder to eager-load the nodes that are connected to the "return_portal_claim"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithNamedReturnPortalClaim(name string, opts ...func(*ReturnPortalClaimQuery)) *ReturnPortalQuery {
	query := (&ReturnPortalClaimClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rpq.withNamedReturnPortalClaim == nil {
		rpq.withNamedReturnPortalClaim = make(map[string]*ReturnPortalClaimQuery)
	}
	rpq.withNamedReturnPortalClaim[name] = query
	return rpq
}

// WithNamedReturnLocation tells the query-builder to eager-load the nodes that are connected to the "return_location"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithNamedReturnLocation(name string, opts ...func(*LocationQuery)) *ReturnPortalQuery {
	query := (&LocationClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rpq.withNamedReturnLocation == nil {
		rpq.withNamedReturnLocation = make(map[string]*LocationQuery)
	}
	rpq.withNamedReturnLocation[name] = query
	return rpq
}

// WithNamedDeliveryOptions tells the query-builder to eager-load the nodes that are connected to the "delivery_options"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithNamedDeliveryOptions(name string, opts ...func(*DeliveryOptionQuery)) *ReturnPortalQuery {
	query := (&DeliveryOptionClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rpq.withNamedDeliveryOptions == nil {
		rpq.withNamedDeliveryOptions = make(map[string]*DeliveryOptionQuery)
	}
	rpq.withNamedDeliveryOptions[name] = query
	return rpq
}

// WithNamedReturnColli tells the query-builder to eager-load the nodes that are connected to the "return_colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (rpq *ReturnPortalQuery) WithNamedReturnColli(name string, opts ...func(*ReturnColliQuery)) *ReturnPortalQuery {
	query := (&ReturnColliClient{config: rpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if rpq.withNamedReturnColli == nil {
		rpq.withNamedReturnColli = make(map[string]*ReturnColliQuery)
	}
	rpq.withNamedReturnColli[name] = query
	return rpq
}

// ReturnPortalGroupBy is the group-by builder for ReturnPortal entities.
type ReturnPortalGroupBy struct {
	selector
	build *ReturnPortalQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rpgb *ReturnPortalGroupBy) Aggregate(fns ...AggregateFunc) *ReturnPortalGroupBy {
	rpgb.fns = append(rpgb.fns, fns...)
	return rpgb
}

// Scan applies the selector query and scans the result into the given value.
func (rpgb *ReturnPortalGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rpgb.build.ctx, ent.OpQueryGroupBy)
	if err := rpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReturnPortalQuery, *ReturnPortalGroupBy](ctx, rpgb.build, rpgb, rpgb.build.inters, v)
}

func (rpgb *ReturnPortalGroupBy) sqlScan(ctx context.Context, root *ReturnPortalQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rpgb.fns))
	for _, fn := range rpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rpgb.flds)+len(rpgb.fns))
		for _, f := range *rpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ReturnPortalSelect is the builder for selecting fields of ReturnPortal entities.
type ReturnPortalSelect struct {
	*ReturnPortalQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rps *ReturnPortalSelect) Aggregate(fns ...AggregateFunc) *ReturnPortalSelect {
	rps.fns = append(rps.fns, fns...)
	return rps
}

// Scan applies the selector query and scans the result into the given value.
func (rps *ReturnPortalSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rps.ctx, ent.OpQuerySelect)
	if err := rps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ReturnPortalQuery, *ReturnPortalSelect](ctx, rps.ReturnPortalQuery, rps, rps.inters, v)
}

func (rps *ReturnPortalSelect) sqlScan(ctx context.Context, root *ReturnPortalQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rps.fns))
	for _, fn := range rps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
