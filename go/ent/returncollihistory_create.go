// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReturnColliHistoryCreate is the builder for creating a ReturnColliHistory entity.
type ReturnColliHistoryCreate struct {
	config
	mutation *ReturnColliHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (rchc *ReturnColliHistoryCreate) SetTenantID(pu pulid.ID) *ReturnColliHistoryCreate {
	rchc.mutation.SetTenantID(pu)
	return rchc
}

// SetDescription sets the "description" field.
func (rchc *ReturnColliHistoryCreate) SetDescription(s string) *ReturnColliHistoryCreate {
	rchc.mutation.SetDescription(s)
	return rchc
}

// SetType sets the "type" field.
func (rchc *ReturnColliHistoryCreate) SetType(r returncollihistory.Type) *ReturnColliHistoryCreate {
	rchc.mutation.SetType(r)
	return rchc
}

// SetID sets the "id" field.
func (rchc *ReturnColliHistoryCreate) SetID(pu pulid.ID) *ReturnColliHistoryCreate {
	rchc.mutation.SetID(pu)
	return rchc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rchc *ReturnColliHistoryCreate) SetNillableID(pu *pulid.ID) *ReturnColliHistoryCreate {
	if pu != nil {
		rchc.SetID(*pu)
	}
	return rchc
}

// SetChangeHistoryID sets the "change_history" edge to the ChangeHistory entity by ID.
func (rchc *ReturnColliHistoryCreate) SetChangeHistoryID(id pulid.ID) *ReturnColliHistoryCreate {
	rchc.mutation.SetChangeHistoryID(id)
	return rchc
}

// SetChangeHistory sets the "change_history" edge to the ChangeHistory entity.
func (rchc *ReturnColliHistoryCreate) SetChangeHistory(c *ChangeHistory) *ReturnColliHistoryCreate {
	return rchc.SetChangeHistoryID(c.ID)
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rchc *ReturnColliHistoryCreate) SetTenant(t *Tenant) *ReturnColliHistoryCreate {
	return rchc.SetTenantID(t.ID)
}

// SetReturnColliID sets the "return_colli" edge to the ReturnColli entity by ID.
func (rchc *ReturnColliHistoryCreate) SetReturnColliID(id pulid.ID) *ReturnColliHistoryCreate {
	rchc.mutation.SetReturnColliID(id)
	return rchc
}

// SetReturnColli sets the "return_colli" edge to the ReturnColli entity.
func (rchc *ReturnColliHistoryCreate) SetReturnColli(r *ReturnColli) *ReturnColliHistoryCreate {
	return rchc.SetReturnColliID(r.ID)
}

// Mutation returns the ReturnColliHistoryMutation object of the builder.
func (rchc *ReturnColliHistoryCreate) Mutation() *ReturnColliHistoryMutation {
	return rchc.mutation
}

// Save creates the ReturnColliHistory in the database.
func (rchc *ReturnColliHistoryCreate) Save(ctx context.Context) (*ReturnColliHistory, error) {
	if err := rchc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rchc.sqlSave, rchc.mutation, rchc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rchc *ReturnColliHistoryCreate) SaveX(ctx context.Context) *ReturnColliHistory {
	v, err := rchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rchc *ReturnColliHistoryCreate) Exec(ctx context.Context) error {
	_, err := rchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rchc *ReturnColliHistoryCreate) ExecX(ctx context.Context) {
	if err := rchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rchc *ReturnColliHistoryCreate) defaults() error {
	if _, ok := rchc.mutation.ID(); !ok {
		if returncollihistory.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized returncollihistory.DefaultID (forgotten import ent/runtime?)")
		}
		v := returncollihistory.DefaultID()
		rchc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rchc *ReturnColliHistoryCreate) check() error {
	if _, ok := rchc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ReturnColliHistory.tenant_id"`)}
	}
	if _, ok := rchc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ReturnColliHistory.description"`)}
	}
	if _, ok := rchc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ReturnColliHistory.type"`)}
	}
	if v, ok := rchc.mutation.GetType(); ok {
		if err := returncollihistory.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ReturnColliHistory.type": %w`, err)}
		}
	}
	if len(rchc.mutation.ChangeHistoryIDs()) == 0 {
		return &ValidationError{Name: "change_history", err: errors.New(`ent: missing required edge "ReturnColliHistory.change_history"`)}
	}
	if len(rchc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "ReturnColliHistory.tenant"`)}
	}
	if len(rchc.mutation.ReturnColliIDs()) == 0 {
		return &ValidationError{Name: "return_colli", err: errors.New(`ent: missing required edge "ReturnColliHistory.return_colli"`)}
	}
	return nil
}

func (rchc *ReturnColliHistoryCreate) sqlSave(ctx context.Context) (*ReturnColliHistory, error) {
	if err := rchc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rchc.mutation.id = &_node.ID
	rchc.mutation.done = true
	return _node, nil
}

func (rchc *ReturnColliHistoryCreate) createSpec() (*ReturnColliHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ReturnColliHistory{config: rchc.config}
		_spec = sqlgraph.NewCreateSpec(returncollihistory.Table, sqlgraph.NewFieldSpec(returncollihistory.FieldID, field.TypeString))
	)
	_spec.OnConflict = rchc.conflict
	if id, ok := rchc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rchc.mutation.Description(); ok {
		_spec.SetField(returncollihistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := rchc.mutation.GetType(); ok {
		_spec.SetField(returncollihistory.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := rchc.mutation.ChangeHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ChangeHistoryTable,
			Columns: []string{returncollihistory.ChangeHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changehistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.change_history_return_colli_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rchc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncollihistory.TenantTable,
			Columns: []string{returncollihistory.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rchc.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ReturnColliTable,
			Columns: []string{returncollihistory.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.return_colli_return_colli_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnColliHistory.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnColliHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rchc *ReturnColliHistoryCreate) OnConflict(opts ...sql.ConflictOption) *ReturnColliHistoryUpsertOne {
	rchc.conflict = opts
	return &ReturnColliHistoryUpsertOne{
		create: rchc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnColliHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rchc *ReturnColliHistoryCreate) OnConflictColumns(columns ...string) *ReturnColliHistoryUpsertOne {
	rchc.conflict = append(rchc.conflict, sql.ConflictColumns(columns...))
	return &ReturnColliHistoryUpsertOne{
		create: rchc,
	}
}

type (
	// ReturnColliHistoryUpsertOne is the builder for "upsert"-ing
	//  one ReturnColliHistory node.
	ReturnColliHistoryUpsertOne struct {
		create *ReturnColliHistoryCreate
	}

	// ReturnColliHistoryUpsert is the "OnConflict" setter.
	ReturnColliHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *ReturnColliHistoryUpsert) SetTenantID(v pulid.ID) *ReturnColliHistoryUpsert {
	u.Set(returncollihistory.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnColliHistoryUpsert) UpdateTenantID() *ReturnColliHistoryUpsert {
	u.SetExcluded(returncollihistory.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReturnColliHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returncollihistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnColliHistoryUpsertOne) UpdateNewValues() *ReturnColliHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(returncollihistory.FieldID)
		}
		if _, exists := u.create.mutation.Description(); exists {
			s.SetIgnore(returncollihistory.FieldDescription)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(returncollihistory.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnColliHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReturnColliHistoryUpsertOne) Ignore() *ReturnColliHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnColliHistoryUpsertOne) DoNothing() *ReturnColliHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnColliHistoryCreate.OnConflict
// documentation for more info.
func (u *ReturnColliHistoryUpsertOne) Update(set func(*ReturnColliHistoryUpsert)) *ReturnColliHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnColliHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnColliHistoryUpsertOne) SetTenantID(v pulid.ID) *ReturnColliHistoryUpsertOne {
	return u.Update(func(s *ReturnColliHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnColliHistoryUpsertOne) UpdateTenantID() *ReturnColliHistoryUpsertOne {
	return u.Update(func(s *ReturnColliHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *ReturnColliHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnColliHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnColliHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReturnColliHistoryUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReturnColliHistoryUpsertOne.ID is not supported by MySQL driver. Use ReturnColliHistoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReturnColliHistoryUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReturnColliHistoryCreateBulk is the builder for creating many ReturnColliHistory entities in bulk.
type ReturnColliHistoryCreateBulk struct {
	config
	err      error
	builders []*ReturnColliHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the ReturnColliHistory entities in the database.
func (rchcb *ReturnColliHistoryCreateBulk) Save(ctx context.Context) ([]*ReturnColliHistory, error) {
	if rchcb.err != nil {
		return nil, rchcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rchcb.builders))
	nodes := make([]*ReturnColliHistory, len(rchcb.builders))
	mutators := make([]Mutator, len(rchcb.builders))
	for i := range rchcb.builders {
		func(i int, root context.Context) {
			builder := rchcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReturnColliHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rchcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rchcb *ReturnColliHistoryCreateBulk) SaveX(ctx context.Context) []*ReturnColliHistory {
	v, err := rchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rchcb *ReturnColliHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := rchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rchcb *ReturnColliHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := rchcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReturnColliHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReturnColliHistoryUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (rchcb *ReturnColliHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReturnColliHistoryUpsertBulk {
	rchcb.conflict = opts
	return &ReturnColliHistoryUpsertBulk{
		create: rchcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReturnColliHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rchcb *ReturnColliHistoryCreateBulk) OnConflictColumns(columns ...string) *ReturnColliHistoryUpsertBulk {
	rchcb.conflict = append(rchcb.conflict, sql.ConflictColumns(columns...))
	return &ReturnColliHistoryUpsertBulk{
		create: rchcb,
	}
}

// ReturnColliHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of ReturnColliHistory nodes.
type ReturnColliHistoryUpsertBulk struct {
	create *ReturnColliHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReturnColliHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(returncollihistory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ReturnColliHistoryUpsertBulk) UpdateNewValues() *ReturnColliHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(returncollihistory.FieldID)
			}
			if _, exists := b.mutation.Description(); exists {
				s.SetIgnore(returncollihistory.FieldDescription)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(returncollihistory.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReturnColliHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReturnColliHistoryUpsertBulk) Ignore() *ReturnColliHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReturnColliHistoryUpsertBulk) DoNothing() *ReturnColliHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReturnColliHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *ReturnColliHistoryUpsertBulk) Update(set func(*ReturnColliHistoryUpsert)) *ReturnColliHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReturnColliHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *ReturnColliHistoryUpsertBulk) SetTenantID(v pulid.ID) *ReturnColliHistoryUpsertBulk {
	return u.Update(func(s *ReturnColliHistoryUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *ReturnColliHistoryUpsertBulk) UpdateTenantID() *ReturnColliHistoryUpsertBulk {
	return u.Update(func(s *ReturnColliHistoryUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *ReturnColliHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReturnColliHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReturnColliHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReturnColliHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
