// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanHistoryQuery is the builder for querying PlanHistory entities.
type PlanHistoryQuery struct {
	config
	ctx               *QueryContext
	order             []planhistory.OrderOption
	inters            []Interceptor
	predicates        []predicate.PlanHistory
	withChangeHistory *ChangeHistoryQuery
	withTenant        *TenantQuery
	withChangedBy     *UserQuery
	withChangedFrom   *PlanQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*PlanHistory) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlanHistoryQuery builder.
func (phq *PlanHistoryQuery) Where(ps ...predicate.PlanHistory) *PlanHistoryQuery {
	phq.predicates = append(phq.predicates, ps...)
	return phq
}

// Limit the number of records to be returned by this query.
func (phq *PlanHistoryQuery) Limit(limit int) *PlanHistoryQuery {
	phq.ctx.Limit = &limit
	return phq
}

// Offset to start from.
func (phq *PlanHistoryQuery) Offset(offset int) *PlanHistoryQuery {
	phq.ctx.Offset = &offset
	return phq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phq *PlanHistoryQuery) Unique(unique bool) *PlanHistoryQuery {
	phq.ctx.Unique = &unique
	return phq
}

// Order specifies how the records should be ordered.
func (phq *PlanHistoryQuery) Order(o ...planhistory.OrderOption) *PlanHistoryQuery {
	phq.order = append(phq.order, o...)
	return phq
}

// QueryChangeHistory chains the current query on the "change_history" edge.
func (phq *PlanHistoryQuery) QueryChangeHistory() *ChangeHistoryQuery {
	query := (&ChangeHistoryClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, selector),
			sqlgraph.To(changehistory.Table, changehistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planhistory.ChangeHistoryTable, planhistory.ChangeHistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTenant chains the current query on the "tenant" edge.
func (phq *PlanHistoryQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, planhistory.TenantTable, planhistory.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChangedBy chains the current query on the "changed_by" edge.
func (phq *PlanHistoryQuery) QueryChangedBy() *UserQuery {
	query := (&UserClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planhistory.ChangedByTable, planhistory.ChangedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChangedFrom chains the current query on the "changed_from" edge.
func (phq *PlanHistoryQuery) QueryChangedFrom() *PlanQuery {
	query := (&PlanClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(planhistory.Table, planhistory.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, planhistory.ChangedFromTable, planhistory.ChangedFromColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlanHistory entity from the query.
// Returns a *NotFoundError when no PlanHistory was found.
func (phq *PlanHistoryQuery) First(ctx context.Context) (*PlanHistory, error) {
	nodes, err := phq.Limit(1).All(setContextOp(ctx, phq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{planhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phq *PlanHistoryQuery) FirstX(ctx context.Context) *PlanHistory {
	node, err := phq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlanHistory ID from the query.
// Returns a *NotFoundError when no PlanHistory ID was found.
func (phq *PlanHistoryQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = phq.Limit(1).IDs(setContextOp(ctx, phq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{planhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phq *PlanHistoryQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := phq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlanHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlanHistory entity is found.
// Returns a *NotFoundError when no PlanHistory entities are found.
func (phq *PlanHistoryQuery) Only(ctx context.Context) (*PlanHistory, error) {
	nodes, err := phq.Limit(2).All(setContextOp(ctx, phq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{planhistory.Label}
	default:
		return nil, &NotSingularError{planhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phq *PlanHistoryQuery) OnlyX(ctx context.Context) *PlanHistory {
	node, err := phq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlanHistory ID in the query.
// Returns a *NotSingularError when more than one PlanHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (phq *PlanHistoryQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = phq.Limit(2).IDs(setContextOp(ctx, phq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{planhistory.Label}
	default:
		err = &NotSingularError{planhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phq *PlanHistoryQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := phq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlanHistories.
func (phq *PlanHistoryQuery) All(ctx context.Context) ([]*PlanHistory, error) {
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryAll)
	if err := phq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlanHistory, *PlanHistoryQuery]()
	return withInterceptors[[]*PlanHistory](ctx, phq, qr, phq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phq *PlanHistoryQuery) AllX(ctx context.Context) []*PlanHistory {
	nodes, err := phq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlanHistory IDs.
func (phq *PlanHistoryQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if phq.ctx.Unique == nil && phq.path != nil {
		phq.Unique(true)
	}
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryIDs)
	if err = phq.Select(planhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phq *PlanHistoryQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := phq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phq *PlanHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryCount)
	if err := phq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phq, querierCount[*PlanHistoryQuery](), phq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phq *PlanHistoryQuery) CountX(ctx context.Context) int {
	count, err := phq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phq *PlanHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phq.ctx, ent.OpQueryExist)
	switch _, err := phq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phq *PlanHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := phq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlanHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phq *PlanHistoryQuery) Clone() *PlanHistoryQuery {
	if phq == nil {
		return nil
	}
	return &PlanHistoryQuery{
		config:            phq.config,
		ctx:               phq.ctx.Clone(),
		order:             append([]planhistory.OrderOption{}, phq.order...),
		inters:            append([]Interceptor{}, phq.inters...),
		predicates:        append([]predicate.PlanHistory{}, phq.predicates...),
		withChangeHistory: phq.withChangeHistory.Clone(),
		withTenant:        phq.withTenant.Clone(),
		withChangedBy:     phq.withChangedBy.Clone(),
		withChangedFrom:   phq.withChangedFrom.Clone(),
		// clone intermediate query.
		sql:  phq.sql.Clone(),
		path: phq.path,
	}
}

// WithChangeHistory tells the query-builder to eager-load the nodes that are connected to
// the "change_history" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PlanHistoryQuery) WithChangeHistory(opts ...func(*ChangeHistoryQuery)) *PlanHistoryQuery {
	query := (&ChangeHistoryClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withChangeHistory = query
	return phq
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PlanHistoryQuery) WithTenant(opts ...func(*TenantQuery)) *PlanHistoryQuery {
	query := (&TenantClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withTenant = query
	return phq
}

// WithChangedBy tells the query-builder to eager-load the nodes that are connected to
// the "changed_by" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PlanHistoryQuery) WithChangedBy(opts ...func(*UserQuery)) *PlanHistoryQuery {
	query := (&UserClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withChangedBy = query
	return phq
}

// WithChangedFrom tells the query-builder to eager-load the nodes that are connected to
// the "changed_from" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PlanHistoryQuery) WithChangedFrom(opts ...func(*PlanQuery)) *PlanHistoryQuery {
	query := (&PlanClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withChangedFrom = query
	return phq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlanHistory.Query().
//		GroupBy(planhistory.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (phq *PlanHistoryQuery) GroupBy(field string, fields ...string) *PlanHistoryGroupBy {
	phq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlanHistoryGroupBy{build: phq}
	grbuild.flds = &phq.ctx.Fields
	grbuild.label = planhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.PlanHistory.Query().
//		Select(planhistory.FieldTenantID).
//		Scan(ctx, &v)
func (phq *PlanHistoryQuery) Select(fields ...string) *PlanHistorySelect {
	phq.ctx.Fields = append(phq.ctx.Fields, fields...)
	sbuild := &PlanHistorySelect{PlanHistoryQuery: phq}
	sbuild.label = planhistory.Label
	sbuild.flds, sbuild.scan = &phq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlanHistorySelect configured with the given aggregations.
func (phq *PlanHistoryQuery) Aggregate(fns ...AggregateFunc) *PlanHistorySelect {
	return phq.Select().Aggregate(fns...)
}

func (phq *PlanHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phq); err != nil {
				return err
			}
		}
	}
	for _, f := range phq.ctx.Fields {
		if !planhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phq.path != nil {
		prev, err := phq.path(ctx)
		if err != nil {
			return err
		}
		phq.sql = prev
	}
	if planhistory.Policy == nil {
		return errors.New("ent: uninitialized planhistory.Policy (forgotten import ent/runtime?)")
	}
	if err := planhistory.Policy.EvalQuery(ctx, phq); err != nil {
		return err
	}
	return nil
}

func (phq *PlanHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlanHistory, error) {
	var (
		nodes       = []*PlanHistory{}
		withFKs     = phq.withFKs
		_spec       = phq.querySpec()
		loadedTypes = [4]bool{
			phq.withChangeHistory != nil,
			phq.withTenant != nil,
			phq.withChangedBy != nil,
			phq.withChangedFrom != nil,
		}
	)
	if phq.withChangeHistory != nil || phq.withChangedBy != nil || phq.withChangedFrom != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, planhistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlanHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlanHistory{config: phq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(phq.modifiers) > 0 {
		_spec.Modifiers = phq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phq.withChangeHistory; query != nil {
		if err := phq.loadChangeHistory(ctx, query, nodes, nil,
			func(n *PlanHistory, e *ChangeHistory) { n.Edges.ChangeHistory = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withTenant; query != nil {
		if err := phq.loadTenant(ctx, query, nodes, nil,
			func(n *PlanHistory, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withChangedBy; query != nil {
		if err := phq.loadChangedBy(ctx, query, nodes, nil,
			func(n *PlanHistory, e *User) { n.Edges.ChangedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withChangedFrom; query != nil {
		if err := phq.loadChangedFrom(ctx, query, nodes, nil,
			func(n *PlanHistory, e *Plan) { n.Edges.ChangedFrom = e }); err != nil {
			return nil, err
		}
	}
	for i := range phq.loadTotal {
		if err := phq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phq *PlanHistoryQuery) loadChangeHistory(ctx context.Context, query *ChangeHistoryQuery, nodes []*PlanHistory, init func(*PlanHistory), assign func(*PlanHistory, *ChangeHistory)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PlanHistory)
	for i := range nodes {
		if nodes[i].change_history_plan_history == nil {
			continue
		}
		fk := *nodes[i].change_history_plan_history
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(changehistory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "change_history_plan_history" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PlanHistoryQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*PlanHistory, init func(*PlanHistory), assign func(*PlanHistory, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PlanHistory)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PlanHistoryQuery) loadChangedBy(ctx context.Context, query *UserQuery, nodes []*PlanHistory, init func(*PlanHistory), assign func(*PlanHistory, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PlanHistory)
	for i := range nodes {
		if nodes[i].user_plan_history_user == nil {
			continue
		}
		fk := *nodes[i].user_plan_history_user
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_plan_history_user" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PlanHistoryQuery) loadChangedFrom(ctx context.Context, query *PlanQuery, nodes []*PlanHistory, init func(*PlanHistory), assign func(*PlanHistory, *Plan)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*PlanHistory)
	for i := range nodes {
		if nodes[i].plan_plan_history_plan == nil {
			continue
		}
		fk := *nodes[i].plan_plan_history_plan
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_plan_history_plan" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phq *PlanHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phq.querySpec()
	if len(phq.modifiers) > 0 {
		_spec.Modifiers = phq.modifiers
	}
	_spec.Node.Columns = phq.ctx.Fields
	if len(phq.ctx.Fields) > 0 {
		_spec.Unique = phq.ctx.Unique != nil && *phq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phq.driver, _spec)
}

func (phq *PlanHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(planhistory.Table, planhistory.Columns, sqlgraph.NewFieldSpec(planhistory.FieldID, field.TypeString))
	_spec.From = phq.sql
	if unique := phq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phq.path != nil {
		_spec.Unique = true
	}
	if fields := phq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planhistory.FieldID)
		for i := range fields {
			if fields[i] != planhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if phq.withTenant != nil {
			_spec.Node.AddColumnOnce(planhistory.FieldTenantID)
		}
	}
	if ps := phq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phq *PlanHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phq.driver.Dialect())
	t1 := builder.Table(planhistory.Table)
	columns := phq.ctx.Fields
	if len(columns) == 0 {
		columns = planhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phq.sql != nil {
		selector = phq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phq.ctx.Unique != nil && *phq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phq.predicates {
		p(selector)
	}
	for _, p := range phq.order {
		p(selector)
	}
	if offset := phq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlanHistoryGroupBy is the group-by builder for PlanHistory entities.
type PlanHistoryGroupBy struct {
	selector
	build *PlanHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phgb *PlanHistoryGroupBy) Aggregate(fns ...AggregateFunc) *PlanHistoryGroupBy {
	phgb.fns = append(phgb.fns, fns...)
	return phgb
}

// Scan applies the selector query and scans the result into the given value.
func (phgb *PlanHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phgb.build.ctx, ent.OpQueryGroupBy)
	if err := phgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlanHistoryQuery, *PlanHistoryGroupBy](ctx, phgb.build, phgb, phgb.build.inters, v)
}

func (phgb *PlanHistoryGroupBy) sqlScan(ctx context.Context, root *PlanHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phgb.fns))
	for _, fn := range phgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phgb.flds)+len(phgb.fns))
		for _, f := range *phgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlanHistorySelect is the builder for selecting fields of PlanHistory entities.
type PlanHistorySelect struct {
	*PlanHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phs *PlanHistorySelect) Aggregate(fns ...AggregateFunc) *PlanHistorySelect {
	phs.fns = append(phs.fns, fns...)
	return phs
}

// Scan applies the selector query and scans the result into the given value.
func (phs *PlanHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phs.ctx, ent.OpQuerySelect)
	if err := phs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlanHistoryQuery, *PlanHistorySelect](ctx, phs.PlanHistoryQuery, phs, phs.inters, v)
}

func (phs *PlanHistorySelect) sqlScan(ctx context.Context, root *PlanHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phs.fns))
	for _, fn := range phs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
