// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingUSPSProcessingCategoryCreate is the builder for creating a PackagingUSPSProcessingCategory entity.
type PackagingUSPSProcessingCategoryCreate struct {
	config
	mutation *PackagingUSPSProcessingCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pupcc *PackagingUSPSProcessingCategoryCreate) SetName(s string) *PackagingUSPSProcessingCategoryCreate {
	pupcc.mutation.SetName(s)
	return pupcc
}

// SetProcessingCategory sets the "processing_category" field.
func (pupcc *PackagingUSPSProcessingCategoryCreate) SetProcessingCategory(pc packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryCreate {
	pupcc.mutation.SetProcessingCategory(pc)
	return pupcc
}

// SetID sets the "id" field.
func (pupcc *PackagingUSPSProcessingCategoryCreate) SetID(pu pulid.ID) *PackagingUSPSProcessingCategoryCreate {
	pupcc.mutation.SetID(pu)
	return pupcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pupcc *PackagingUSPSProcessingCategoryCreate) SetNillableID(pu *pulid.ID) *PackagingUSPSProcessingCategoryCreate {
	if pu != nil {
		pupcc.SetID(*pu)
	}
	return pupcc
}

// Mutation returns the PackagingUSPSProcessingCategoryMutation object of the builder.
func (pupcc *PackagingUSPSProcessingCategoryCreate) Mutation() *PackagingUSPSProcessingCategoryMutation {
	return pupcc.mutation
}

// Save creates the PackagingUSPSProcessingCategory in the database.
func (pupcc *PackagingUSPSProcessingCategoryCreate) Save(ctx context.Context) (*PackagingUSPSProcessingCategory, error) {
	if err := pupcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pupcc.sqlSave, pupcc.mutation, pupcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pupcc *PackagingUSPSProcessingCategoryCreate) SaveX(ctx context.Context) *PackagingUSPSProcessingCategory {
	v, err := pupcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pupcc *PackagingUSPSProcessingCategoryCreate) Exec(ctx context.Context) error {
	_, err := pupcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pupcc *PackagingUSPSProcessingCategoryCreate) ExecX(ctx context.Context) {
	if err := pupcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pupcc *PackagingUSPSProcessingCategoryCreate) defaults() error {
	if _, ok := pupcc.mutation.ID(); !ok {
		if packaginguspsprocessingcategory.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized packaginguspsprocessingcategory.DefaultID (forgotten import ent/runtime?)")
		}
		v := packaginguspsprocessingcategory.DefaultID()
		pupcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pupcc *PackagingUSPSProcessingCategoryCreate) check() error {
	if _, ok := pupcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PackagingUSPSProcessingCategory.name"`)}
	}
	if _, ok := pupcc.mutation.ProcessingCategory(); !ok {
		return &ValidationError{Name: "processing_category", err: errors.New(`ent: missing required field "PackagingUSPSProcessingCategory.processing_category"`)}
	}
	if v, ok := pupcc.mutation.ProcessingCategory(); ok {
		if err := packaginguspsprocessingcategory.ProcessingCategoryValidator(v); err != nil {
			return &ValidationError{Name: "processing_category", err: fmt.Errorf(`ent: validator failed for field "PackagingUSPSProcessingCategory.processing_category": %w`, err)}
		}
	}
	return nil
}

func (pupcc *PackagingUSPSProcessingCategoryCreate) sqlSave(ctx context.Context) (*PackagingUSPSProcessingCategory, error) {
	if err := pupcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pupcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pupcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pupcc.mutation.id = &_node.ID
	pupcc.mutation.done = true
	return _node, nil
}

func (pupcc *PackagingUSPSProcessingCategoryCreate) createSpec() (*PackagingUSPSProcessingCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &PackagingUSPSProcessingCategory{config: pupcc.config}
		_spec = sqlgraph.NewCreateSpec(packaginguspsprocessingcategory.Table, sqlgraph.NewFieldSpec(packaginguspsprocessingcategory.FieldID, field.TypeString))
	)
	_spec.OnConflict = pupcc.conflict
	if id, ok := pupcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pupcc.mutation.Name(); ok {
		_spec.SetField(packaginguspsprocessingcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pupcc.mutation.ProcessingCategory(); ok {
		_spec.SetField(packaginguspsprocessingcategory.FieldProcessingCategory, field.TypeEnum, value)
		_node.ProcessingCategory = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingUSPSProcessingCategory.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUSPSProcessingCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pupcc *PackagingUSPSProcessingCategoryCreate) OnConflict(opts ...sql.ConflictOption) *PackagingUSPSProcessingCategoryUpsertOne {
	pupcc.conflict = opts
	return &PackagingUSPSProcessingCategoryUpsertOne{
		create: pupcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingUSPSProcessingCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pupcc *PackagingUSPSProcessingCategoryCreate) OnConflictColumns(columns ...string) *PackagingUSPSProcessingCategoryUpsertOne {
	pupcc.conflict = append(pupcc.conflict, sql.ConflictColumns(columns...))
	return &PackagingUSPSProcessingCategoryUpsertOne{
		create: pupcc,
	}
}

type (
	// PackagingUSPSProcessingCategoryUpsertOne is the builder for "upsert"-ing
	//  one PackagingUSPSProcessingCategory node.
	PackagingUSPSProcessingCategoryUpsertOne struct {
		create *PackagingUSPSProcessingCategoryCreate
	}

	// PackagingUSPSProcessingCategoryUpsert is the "OnConflict" setter.
	PackagingUSPSProcessingCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *PackagingUSPSProcessingCategoryUpsert) SetName(v string) *PackagingUSPSProcessingCategoryUpsert {
	u.Set(packaginguspsprocessingcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUSPSProcessingCategoryUpsert) UpdateName() *PackagingUSPSProcessingCategoryUpsert {
	u.SetExcluded(packaginguspsprocessingcategory.FieldName)
	return u
}

// SetProcessingCategory sets the "processing_category" field.
func (u *PackagingUSPSProcessingCategoryUpsert) SetProcessingCategory(v packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpsert {
	u.Set(packaginguspsprocessingcategory.FieldProcessingCategory, v)
	return u
}

// UpdateProcessingCategory sets the "processing_category" field to the value that was provided on create.
func (u *PackagingUSPSProcessingCategoryUpsert) UpdateProcessingCategory() *PackagingUSPSProcessingCategoryUpsert {
	u.SetExcluded(packaginguspsprocessingcategory.FieldProcessingCategory)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PackagingUSPSProcessingCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packaginguspsprocessingcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUSPSProcessingCategoryUpsertOne) UpdateNewValues() *PackagingUSPSProcessingCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(packaginguspsprocessingcategory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingUSPSProcessingCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PackagingUSPSProcessingCategoryUpsertOne) Ignore() *PackagingUSPSProcessingCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUSPSProcessingCategoryUpsertOne) DoNothing() *PackagingUSPSProcessingCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingUSPSProcessingCategoryCreate.OnConflict
// documentation for more info.
func (u *PackagingUSPSProcessingCategoryUpsertOne) Update(set func(*PackagingUSPSProcessingCategoryUpsert)) *PackagingUSPSProcessingCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUSPSProcessingCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PackagingUSPSProcessingCategoryUpsertOne) SetName(v string) *PackagingUSPSProcessingCategoryUpsertOne {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUSPSProcessingCategoryUpsertOne) UpdateName() *PackagingUSPSProcessingCategoryUpsertOne {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.UpdateName()
	})
}

// SetProcessingCategory sets the "processing_category" field.
func (u *PackagingUSPSProcessingCategoryUpsertOne) SetProcessingCategory(v packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpsertOne {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.SetProcessingCategory(v)
	})
}

// UpdateProcessingCategory sets the "processing_category" field to the value that was provided on create.
func (u *PackagingUSPSProcessingCategoryUpsertOne) UpdateProcessingCategory() *PackagingUSPSProcessingCategoryUpsertOne {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.UpdateProcessingCategory()
	})
}

// Exec executes the query.
func (u *PackagingUSPSProcessingCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingUSPSProcessingCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUSPSProcessingCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PackagingUSPSProcessingCategoryUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PackagingUSPSProcessingCategoryUpsertOne.ID is not supported by MySQL driver. Use PackagingUSPSProcessingCategoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PackagingUSPSProcessingCategoryUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PackagingUSPSProcessingCategoryCreateBulk is the builder for creating many PackagingUSPSProcessingCategory entities in bulk.
type PackagingUSPSProcessingCategoryCreateBulk struct {
	config
	err      error
	builders []*PackagingUSPSProcessingCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the PackagingUSPSProcessingCategory entities in the database.
func (pupccb *PackagingUSPSProcessingCategoryCreateBulk) Save(ctx context.Context) ([]*PackagingUSPSProcessingCategory, error) {
	if pupccb.err != nil {
		return nil, pupccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pupccb.builders))
	nodes := make([]*PackagingUSPSProcessingCategory, len(pupccb.builders))
	mutators := make([]Mutator, len(pupccb.builders))
	for i := range pupccb.builders {
		func(i int, root context.Context) {
			builder := pupccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PackagingUSPSProcessingCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pupccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pupccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pupccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pupccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pupccb *PackagingUSPSProcessingCategoryCreateBulk) SaveX(ctx context.Context) []*PackagingUSPSProcessingCategory {
	v, err := pupccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pupccb *PackagingUSPSProcessingCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pupccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pupccb *PackagingUSPSProcessingCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := pupccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PackagingUSPSProcessingCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PackagingUSPSProcessingCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pupccb *PackagingUSPSProcessingCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *PackagingUSPSProcessingCategoryUpsertBulk {
	pupccb.conflict = opts
	return &PackagingUSPSProcessingCategoryUpsertBulk{
		create: pupccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PackagingUSPSProcessingCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pupccb *PackagingUSPSProcessingCategoryCreateBulk) OnConflictColumns(columns ...string) *PackagingUSPSProcessingCategoryUpsertBulk {
	pupccb.conflict = append(pupccb.conflict, sql.ConflictColumns(columns...))
	return &PackagingUSPSProcessingCategoryUpsertBulk{
		create: pupccb,
	}
}

// PackagingUSPSProcessingCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of PackagingUSPSProcessingCategory nodes.
type PackagingUSPSProcessingCategoryUpsertBulk struct {
	create *PackagingUSPSProcessingCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PackagingUSPSProcessingCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(packaginguspsprocessingcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PackagingUSPSProcessingCategoryUpsertBulk) UpdateNewValues() *PackagingUSPSProcessingCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(packaginguspsprocessingcategory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PackagingUSPSProcessingCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PackagingUSPSProcessingCategoryUpsertBulk) Ignore() *PackagingUSPSProcessingCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) DoNothing() *PackagingUSPSProcessingCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PackagingUSPSProcessingCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) Update(set func(*PackagingUSPSProcessingCategoryUpsert)) *PackagingUSPSProcessingCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PackagingUSPSProcessingCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) SetName(v string) *PackagingUSPSProcessingCategoryUpsertBulk {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) UpdateName() *PackagingUSPSProcessingCategoryUpsertBulk {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.UpdateName()
	})
}

// SetProcessingCategory sets the "processing_category" field.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) SetProcessingCategory(v packaginguspsprocessingcategory.ProcessingCategory) *PackagingUSPSProcessingCategoryUpsertBulk {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.SetProcessingCategory(v)
	})
}

// UpdateProcessingCategory sets the "processing_category" field to the value that was provided on create.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) UpdateProcessingCategory() *PackagingUSPSProcessingCategoryUpsertBulk {
	return u.Update(func(s *PackagingUSPSProcessingCategoryUpsert) {
		s.UpdateProcessingCategory()
	})
}

// Exec executes the query.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PackagingUSPSProcessingCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PackagingUSPSProcessingCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PackagingUSPSProcessingCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
