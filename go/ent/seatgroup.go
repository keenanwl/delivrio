// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SeatGroup is the model entity for the SeatGroup schema.
type SeatGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SeatGroupQuery when eager-loading is set.
	Edges        SeatGroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SeatGroupEdges holds the relations/edges for other nodes in the graph.
type SeatGroupEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// AssignedAccessRight holds the value of the assigned_access_right edge.
	AssignedAccessRight []*AccessRight `json:"assigned_access_right,omitempty"`
	// SeatGroupAccessRight holds the value of the seat_group_access_right edge.
	SeatGroupAccessRight []*SeatGroupAccessRight `json:"seat_group_access_right,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedUser                 map[string][]*User
	namedAssignedAccessRight  map[string][]*AccessRight
	namedSeatGroupAccessRight map[string][]*SeatGroupAccessRight
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SeatGroupEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e SeatGroupEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AssignedAccessRightOrErr returns the AssignedAccessRight value or an error if the edge
// was not loaded in eager-loading.
func (e SeatGroupEdges) AssignedAccessRightOrErr() ([]*AccessRight, error) {
	if e.loadedTypes[2] {
		return e.AssignedAccessRight, nil
	}
	return nil, &NotLoadedError{edge: "assigned_access_right"}
}

// SeatGroupAccessRightOrErr returns the SeatGroupAccessRight value or an error if the edge
// was not loaded in eager-loading.
func (e SeatGroupEdges) SeatGroupAccessRightOrErr() ([]*SeatGroupAccessRight, error) {
	if e.loadedTypes[3] {
		return e.SeatGroupAccessRight, nil
	}
	return nil, &NotLoadedError{edge: "seat_group_access_right"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SeatGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case seatgroup.FieldID, seatgroup.FieldTenantID:
			values[i] = new(pulid.ID)
		case seatgroup.FieldName:
			values[i] = new(sql.NullString)
		case seatgroup.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SeatGroup fields.
func (sg *SeatGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case seatgroup.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sg.ID = *value
			}
		case seatgroup.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				sg.TenantID = *value
			}
		case seatgroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sg.Name = value.String
			}
		case seatgroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sg.CreatedAt = value.Time
			}
		default:
			sg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SeatGroup.
// This includes values selected through modifiers, order, etc.
func (sg *SeatGroup) Value(name string) (ent.Value, error) {
	return sg.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the SeatGroup entity.
func (sg *SeatGroup) QueryTenant() *TenantQuery {
	return NewSeatGroupClient(sg.config).QueryTenant(sg)
}

// QueryUser queries the "user" edge of the SeatGroup entity.
func (sg *SeatGroup) QueryUser() *UserQuery {
	return NewSeatGroupClient(sg.config).QueryUser(sg)
}

// QueryAssignedAccessRight queries the "assigned_access_right" edge of the SeatGroup entity.
func (sg *SeatGroup) QueryAssignedAccessRight() *AccessRightQuery {
	return NewSeatGroupClient(sg.config).QueryAssignedAccessRight(sg)
}

// QuerySeatGroupAccessRight queries the "seat_group_access_right" edge of the SeatGroup entity.
func (sg *SeatGroup) QuerySeatGroupAccessRight() *SeatGroupAccessRightQuery {
	return NewSeatGroupClient(sg.config).QuerySeatGroupAccessRight(sg)
}

// Update returns a builder for updating this SeatGroup.
// Note that you need to call SeatGroup.Unwrap() before calling this method if this SeatGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (sg *SeatGroup) Update() *SeatGroupUpdateOne {
	return NewSeatGroupClient(sg.config).UpdateOne(sg)
}

// Unwrap unwraps the SeatGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sg *SeatGroup) Unwrap() *SeatGroup {
	_tx, ok := sg.config.driver.(*txDriver)
	if !ok {
		panic("ent: SeatGroup is not a transactional entity")
	}
	sg.config.driver = _tx.drv
	return sg
}

// String implements the fmt.Stringer.
func (sg *SeatGroup) String() string {
	var builder strings.Builder
	builder.WriteString("SeatGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sg.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", sg.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sg.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sg.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUser returns the User named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sg *SeatGroup) NamedUser(name string) ([]*User, error) {
	if sg.Edges.namedUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sg.Edges.namedUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sg *SeatGroup) appendNamedUser(name string, edges ...*User) {
	if sg.Edges.namedUser == nil {
		sg.Edges.namedUser = make(map[string][]*User)
	}
	if len(edges) == 0 {
		sg.Edges.namedUser[name] = []*User{}
	} else {
		sg.Edges.namedUser[name] = append(sg.Edges.namedUser[name], edges...)
	}
}

// NamedAssignedAccessRight returns the AssignedAccessRight named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sg *SeatGroup) NamedAssignedAccessRight(name string) ([]*AccessRight, error) {
	if sg.Edges.namedAssignedAccessRight == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sg.Edges.namedAssignedAccessRight[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sg *SeatGroup) appendNamedAssignedAccessRight(name string, edges ...*AccessRight) {
	if sg.Edges.namedAssignedAccessRight == nil {
		sg.Edges.namedAssignedAccessRight = make(map[string][]*AccessRight)
	}
	if len(edges) == 0 {
		sg.Edges.namedAssignedAccessRight[name] = []*AccessRight{}
	} else {
		sg.Edges.namedAssignedAccessRight[name] = append(sg.Edges.namedAssignedAccessRight[name], edges...)
	}
}

// NamedSeatGroupAccessRight returns the SeatGroupAccessRight named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sg *SeatGroup) NamedSeatGroupAccessRight(name string) ([]*SeatGroupAccessRight, error) {
	if sg.Edges.namedSeatGroupAccessRight == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sg.Edges.namedSeatGroupAccessRight[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sg *SeatGroup) appendNamedSeatGroupAccessRight(name string, edges ...*SeatGroupAccessRight) {
	if sg.Edges.namedSeatGroupAccessRight == nil {
		sg.Edges.namedSeatGroupAccessRight = make(map[string][]*SeatGroupAccessRight)
	}
	if len(edges) == 0 {
		sg.Edges.namedSeatGroupAccessRight[name] = []*SeatGroupAccessRight{}
	} else {
		sg.Edges.namedSeatGroupAccessRight[name] = append(sg.Edges.namedSeatGroupAccessRight[name], edges...)
	}
}

// SeatGroups is a parsable slice of SeatGroup.
type SeatGroups []*SeatGroup
