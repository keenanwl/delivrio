// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryOptionDAOUpdate is the builder for updating DeliveryOptionDAO entities.
type DeliveryOptionDAOUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryOptionDAOMutation
}

// Where appends a list predicates to the DeliveryOptionDAOUpdate builder.
func (dodu *DeliveryOptionDAOUpdate) Where(ps ...predicate.DeliveryOptionDAO) *DeliveryOptionDAOUpdate {
	dodu.mutation.Where(ps...)
	return dodu
}

// SetTenantID sets the "tenant_id" field.
func (dodu *DeliveryOptionDAOUpdate) SetTenantID(pu pulid.ID) *DeliveryOptionDAOUpdate {
	dodu.mutation.SetTenantID(pu)
	return dodu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dodu *DeliveryOptionDAOUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionDAOUpdate {
	if pu != nil {
		dodu.SetTenantID(*pu)
	}
	return dodu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dodu *DeliveryOptionDAOUpdate) SetTenant(t *Tenant) *DeliveryOptionDAOUpdate {
	return dodu.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dodu *DeliveryOptionDAOUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionDAOUpdate {
	dodu.mutation.SetDeliveryOptionID(id)
	return dodu
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dodu *DeliveryOptionDAOUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionDAOUpdate {
	return dodu.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceDAOIDs adds the "carrier_additional_service_dao" edge to the CarrierAdditionalServiceDAO entity by IDs.
func (dodu *DeliveryOptionDAOUpdate) AddCarrierAdditionalServiceDAOIDs(ids ...pulid.ID) *DeliveryOptionDAOUpdate {
	dodu.mutation.AddCarrierAdditionalServiceDAOIDs(ids...)
	return dodu
}

// AddCarrierAdditionalServiceDAO adds the "carrier_additional_service_dao" edges to the CarrierAdditionalServiceDAO entity.
func (dodu *DeliveryOptionDAOUpdate) AddCarrierAdditionalServiceDAO(c ...*CarrierAdditionalServiceDAO) *DeliveryOptionDAOUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dodu.AddCarrierAdditionalServiceDAOIDs(ids...)
}

// Mutation returns the DeliveryOptionDAOMutation object of the builder.
func (dodu *DeliveryOptionDAOUpdate) Mutation() *DeliveryOptionDAOMutation {
	return dodu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dodu *DeliveryOptionDAOUpdate) ClearTenant() *DeliveryOptionDAOUpdate {
	dodu.mutation.ClearTenant()
	return dodu
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dodu *DeliveryOptionDAOUpdate) ClearDeliveryOption() *DeliveryOptionDAOUpdate {
	dodu.mutation.ClearDeliveryOption()
	return dodu
}

// ClearCarrierAdditionalServiceDAO clears all "carrier_additional_service_dao" edges to the CarrierAdditionalServiceDAO entity.
func (dodu *DeliveryOptionDAOUpdate) ClearCarrierAdditionalServiceDAO() *DeliveryOptionDAOUpdate {
	dodu.mutation.ClearCarrierAdditionalServiceDAO()
	return dodu
}

// RemoveCarrierAdditionalServiceDAOIDs removes the "carrier_additional_service_dao" edge to CarrierAdditionalServiceDAO entities by IDs.
func (dodu *DeliveryOptionDAOUpdate) RemoveCarrierAdditionalServiceDAOIDs(ids ...pulid.ID) *DeliveryOptionDAOUpdate {
	dodu.mutation.RemoveCarrierAdditionalServiceDAOIDs(ids...)
	return dodu
}

// RemoveCarrierAdditionalServiceDAO removes "carrier_additional_service_dao" edges to CarrierAdditionalServiceDAO entities.
func (dodu *DeliveryOptionDAOUpdate) RemoveCarrierAdditionalServiceDAO(c ...*CarrierAdditionalServiceDAO) *DeliveryOptionDAOUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dodu.RemoveCarrierAdditionalServiceDAOIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dodu *DeliveryOptionDAOUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dodu.sqlSave, dodu.mutation, dodu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dodu *DeliveryOptionDAOUpdate) SaveX(ctx context.Context) int {
	affected, err := dodu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dodu *DeliveryOptionDAOUpdate) Exec(ctx context.Context) error {
	_, err := dodu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dodu *DeliveryOptionDAOUpdate) ExecX(ctx context.Context) {
	if err := dodu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dodu *DeliveryOptionDAOUpdate) check() error {
	if dodu.mutation.TenantCleared() && len(dodu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionDAO.tenant"`)
	}
	if dodu.mutation.DeliveryOptionCleared() && len(dodu.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionDAO.delivery_option"`)
	}
	return nil
}

func (dodu *DeliveryOptionDAOUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dodu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptiondao.Table, deliveryoptiondao.Columns, sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString))
	if ps := dodu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if dodu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondao.TenantTable,
			Columns: []string{deliveryoptiondao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dodu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondao.TenantTable,
			Columns: []string{deliveryoptiondao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dodu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondao.DeliveryOptionTable,
			Columns: []string{deliveryoptiondao.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dodu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondao.DeliveryOptionTable,
			Columns: []string{deliveryoptiondao.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dodu.mutation.CarrierAdditionalServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dodu.mutation.RemovedCarrierAdditionalServiceDAOIDs(); len(nodes) > 0 && !dodu.mutation.CarrierAdditionalServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dodu.mutation.CarrierAdditionalServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dodu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptiondao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dodu.mutation.done = true
	return n, nil
}

// DeliveryOptionDAOUpdateOne is the builder for updating a single DeliveryOptionDAO entity.
type DeliveryOptionDAOUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryOptionDAOMutation
}

// SetTenantID sets the "tenant_id" field.
func (doduo *DeliveryOptionDAOUpdateOne) SetTenantID(pu pulid.ID) *DeliveryOptionDAOUpdateOne {
	doduo.mutation.SetTenantID(pu)
	return doduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (doduo *DeliveryOptionDAOUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryOptionDAOUpdateOne {
	if pu != nil {
		doduo.SetTenantID(*pu)
	}
	return doduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (doduo *DeliveryOptionDAOUpdateOne) SetTenant(t *Tenant) *DeliveryOptionDAOUpdateOne {
	return doduo.SetTenantID(t.ID)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (doduo *DeliveryOptionDAOUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryOptionDAOUpdateOne {
	doduo.mutation.SetDeliveryOptionID(id)
	return doduo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (doduo *DeliveryOptionDAOUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryOptionDAOUpdateOne {
	return doduo.SetDeliveryOptionID(d.ID)
}

// AddCarrierAdditionalServiceDAOIDs adds the "carrier_additional_service_dao" edge to the CarrierAdditionalServiceDAO entity by IDs.
func (doduo *DeliveryOptionDAOUpdateOne) AddCarrierAdditionalServiceDAOIDs(ids ...pulid.ID) *DeliveryOptionDAOUpdateOne {
	doduo.mutation.AddCarrierAdditionalServiceDAOIDs(ids...)
	return doduo
}

// AddCarrierAdditionalServiceDAO adds the "carrier_additional_service_dao" edges to the CarrierAdditionalServiceDAO entity.
func (doduo *DeliveryOptionDAOUpdateOne) AddCarrierAdditionalServiceDAO(c ...*CarrierAdditionalServiceDAO) *DeliveryOptionDAOUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doduo.AddCarrierAdditionalServiceDAOIDs(ids...)
}

// Mutation returns the DeliveryOptionDAOMutation object of the builder.
func (doduo *DeliveryOptionDAOUpdateOne) Mutation() *DeliveryOptionDAOMutation {
	return doduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (doduo *DeliveryOptionDAOUpdateOne) ClearTenant() *DeliveryOptionDAOUpdateOne {
	doduo.mutation.ClearTenant()
	return doduo
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (doduo *DeliveryOptionDAOUpdateOne) ClearDeliveryOption() *DeliveryOptionDAOUpdateOne {
	doduo.mutation.ClearDeliveryOption()
	return doduo
}

// ClearCarrierAdditionalServiceDAO clears all "carrier_additional_service_dao" edges to the CarrierAdditionalServiceDAO entity.
func (doduo *DeliveryOptionDAOUpdateOne) ClearCarrierAdditionalServiceDAO() *DeliveryOptionDAOUpdateOne {
	doduo.mutation.ClearCarrierAdditionalServiceDAO()
	return doduo
}

// RemoveCarrierAdditionalServiceDAOIDs removes the "carrier_additional_service_dao" edge to CarrierAdditionalServiceDAO entities by IDs.
func (doduo *DeliveryOptionDAOUpdateOne) RemoveCarrierAdditionalServiceDAOIDs(ids ...pulid.ID) *DeliveryOptionDAOUpdateOne {
	doduo.mutation.RemoveCarrierAdditionalServiceDAOIDs(ids...)
	return doduo
}

// RemoveCarrierAdditionalServiceDAO removes "carrier_additional_service_dao" edges to CarrierAdditionalServiceDAO entities.
func (doduo *DeliveryOptionDAOUpdateOne) RemoveCarrierAdditionalServiceDAO(c ...*CarrierAdditionalServiceDAO) *DeliveryOptionDAOUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return doduo.RemoveCarrierAdditionalServiceDAOIDs(ids...)
}

// Where appends a list predicates to the DeliveryOptionDAOUpdate builder.
func (doduo *DeliveryOptionDAOUpdateOne) Where(ps ...predicate.DeliveryOptionDAO) *DeliveryOptionDAOUpdateOne {
	doduo.mutation.Where(ps...)
	return doduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (doduo *DeliveryOptionDAOUpdateOne) Select(field string, fields ...string) *DeliveryOptionDAOUpdateOne {
	doduo.fields = append([]string{field}, fields...)
	return doduo
}

// Save executes the query and returns the updated DeliveryOptionDAO entity.
func (doduo *DeliveryOptionDAOUpdateOne) Save(ctx context.Context) (*DeliveryOptionDAO, error) {
	return withHooks(ctx, doduo.sqlSave, doduo.mutation, doduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (doduo *DeliveryOptionDAOUpdateOne) SaveX(ctx context.Context) *DeliveryOptionDAO {
	node, err := doduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (doduo *DeliveryOptionDAOUpdateOne) Exec(ctx context.Context) error {
	_, err := doduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (doduo *DeliveryOptionDAOUpdateOne) ExecX(ctx context.Context) {
	if err := doduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (doduo *DeliveryOptionDAOUpdateOne) check() error {
	if doduo.mutation.TenantCleared() && len(doduo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionDAO.tenant"`)
	}
	if doduo.mutation.DeliveryOptionCleared() && len(doduo.mutation.DeliveryOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryOptionDAO.delivery_option"`)
	}
	return nil
}

func (doduo *DeliveryOptionDAOUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryOptionDAO, err error) {
	if err := doduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryoptiondao.Table, deliveryoptiondao.Columns, sqlgraph.NewFieldSpec(deliveryoptiondao.FieldID, field.TypeString))
	id, ok := doduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryOptionDAO.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := doduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryoptiondao.FieldID)
		for _, f := range fields {
			if !deliveryoptiondao.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryoptiondao.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := doduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if doduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondao.TenantTable,
			Columns: []string{deliveryoptiondao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondao.TenantTable,
			Columns: []string{deliveryoptiondao.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doduo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondao.DeliveryOptionTable,
			Columns: []string{deliveryoptiondao.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doduo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondao.DeliveryOptionTable,
			Columns: []string{deliveryoptiondao.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if doduo.mutation.CarrierAdditionalServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doduo.mutation.RemovedCarrierAdditionalServiceDAOIDs(); len(nodes) > 0 && !doduo.mutation.CarrierAdditionalServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := doduo.mutation.CarrierAdditionalServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryOptionDAO{config: doduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, doduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryoptiondao.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	doduo.mutation.done = true
	return _node, nil
}
