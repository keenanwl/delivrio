// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleQuery is the builder for querying DeliveryRule entities.
type DeliveryRuleQuery struct {
	config
	ctx                                  *QueryContext
	order                                []deliveryrule.OrderOption
	inters                               []Interceptor
	predicates                           []predicate.DeliveryRule
	withTenant                           *TenantQuery
	withDeliveryRuleConstraintGroup      *DeliveryRuleConstraintGroupQuery
	withDeliveryOption                   *DeliveryOptionQuery
	withCountry                          *CountryQuery
	withCurrency                         *CurrencyQuery
	withFKs                              bool
	modifiers                            []func(*sql.Selector)
	loadTotal                            []func(context.Context, []*DeliveryRule) error
	withNamedDeliveryRuleConstraintGroup map[string]*DeliveryRuleConstraintGroupQuery
	withNamedCountry                     map[string]*CountryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DeliveryRuleQuery builder.
func (drq *DeliveryRuleQuery) Where(ps ...predicate.DeliveryRule) *DeliveryRuleQuery {
	drq.predicates = append(drq.predicates, ps...)
	return drq
}

// Limit the number of records to be returned by this query.
func (drq *DeliveryRuleQuery) Limit(limit int) *DeliveryRuleQuery {
	drq.ctx.Limit = &limit
	return drq
}

// Offset to start from.
func (drq *DeliveryRuleQuery) Offset(offset int) *DeliveryRuleQuery {
	drq.ctx.Offset = &offset
	return drq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (drq *DeliveryRuleQuery) Unique(unique bool) *DeliveryRuleQuery {
	drq.ctx.Unique = &unique
	return drq
}

// Order specifies how the records should be ordered.
func (drq *DeliveryRuleQuery) Order(o ...deliveryrule.OrderOption) *DeliveryRuleQuery {
	drq.order = append(drq.order, o...)
	return drq
}

// QueryTenant chains the current query on the "tenant" edge.
func (drq *DeliveryRuleQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryrule.TenantTable, deliveryrule.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryRuleConstraintGroup chains the current query on the "delivery_rule_constraint_group" edge.
func (drq *DeliveryRuleQuery) QueryDeliveryRuleConstraintGroup() *DeliveryRuleConstraintGroupQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, selector),
			sqlgraph.To(deliveryruleconstraintgroup.Table, deliveryruleconstraintgroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, deliveryrule.DeliveryRuleConstraintGroupTable, deliveryrule.DeliveryRuleConstraintGroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOption chains the current query on the "delivery_option" edge.
func (drq *DeliveryRuleQuery) QueryDeliveryOption() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, deliveryrule.DeliveryOptionTable, deliveryrule.DeliveryOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCountry chains the current query on the "country" edge.
func (drq *DeliveryRuleQuery) QueryCountry() *CountryQuery {
	query := (&CountryClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, selector),
			sqlgraph.To(country.Table, country.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, deliveryrule.CountryTable, deliveryrule.CountryPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCurrency chains the current query on the "currency" edge.
func (drq *DeliveryRuleQuery) QueryCurrency() *CurrencyQuery {
	query := (&CurrencyClient{config: drq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := drq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := drq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(deliveryrule.Table, deliveryrule.FieldID, selector),
			sqlgraph.To(currency.Table, currency.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, deliveryrule.CurrencyTable, deliveryrule.CurrencyColumn),
		)
		fromU = sqlgraph.SetNeighbors(drq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DeliveryRule entity from the query.
// Returns a *NotFoundError when no DeliveryRule was found.
func (drq *DeliveryRuleQuery) First(ctx context.Context) (*DeliveryRule, error) {
	nodes, err := drq.Limit(1).All(setContextOp(ctx, drq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{deliveryrule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (drq *DeliveryRuleQuery) FirstX(ctx context.Context) *DeliveryRule {
	node, err := drq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DeliveryRule ID from the query.
// Returns a *NotFoundError when no DeliveryRule ID was found.
func (drq *DeliveryRuleQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = drq.Limit(1).IDs(setContextOp(ctx, drq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{deliveryrule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (drq *DeliveryRuleQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := drq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DeliveryRule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DeliveryRule entity is found.
// Returns a *NotFoundError when no DeliveryRule entities are found.
func (drq *DeliveryRuleQuery) Only(ctx context.Context) (*DeliveryRule, error) {
	nodes, err := drq.Limit(2).All(setContextOp(ctx, drq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{deliveryrule.Label}
	default:
		return nil, &NotSingularError{deliveryrule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (drq *DeliveryRuleQuery) OnlyX(ctx context.Context) *DeliveryRule {
	node, err := drq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DeliveryRule ID in the query.
// Returns a *NotSingularError when more than one DeliveryRule ID is found.
// Returns a *NotFoundError when no entities are found.
func (drq *DeliveryRuleQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = drq.Limit(2).IDs(setContextOp(ctx, drq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{deliveryrule.Label}
	default:
		err = &NotSingularError{deliveryrule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (drq *DeliveryRuleQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := drq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DeliveryRules.
func (drq *DeliveryRuleQuery) All(ctx context.Context) ([]*DeliveryRule, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryAll)
	if err := drq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DeliveryRule, *DeliveryRuleQuery]()
	return withInterceptors[[]*DeliveryRule](ctx, drq, qr, drq.inters)
}

// AllX is like All, but panics if an error occurs.
func (drq *DeliveryRuleQuery) AllX(ctx context.Context) []*DeliveryRule {
	nodes, err := drq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DeliveryRule IDs.
func (drq *DeliveryRuleQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if drq.ctx.Unique == nil && drq.path != nil {
		drq.Unique(true)
	}
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryIDs)
	if err = drq.Select(deliveryrule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (drq *DeliveryRuleQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := drq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (drq *DeliveryRuleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryCount)
	if err := drq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, drq, querierCount[*DeliveryRuleQuery](), drq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (drq *DeliveryRuleQuery) CountX(ctx context.Context) int {
	count, err := drq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (drq *DeliveryRuleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, drq.ctx, ent.OpQueryExist)
	switch _, err := drq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (drq *DeliveryRuleQuery) ExistX(ctx context.Context) bool {
	exist, err := drq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DeliveryRuleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (drq *DeliveryRuleQuery) Clone() *DeliveryRuleQuery {
	if drq == nil {
		return nil
	}
	return &DeliveryRuleQuery{
		config:                          drq.config,
		ctx:                             drq.ctx.Clone(),
		order:                           append([]deliveryrule.OrderOption{}, drq.order...),
		inters:                          append([]Interceptor{}, drq.inters...),
		predicates:                      append([]predicate.DeliveryRule{}, drq.predicates...),
		withTenant:                      drq.withTenant.Clone(),
		withDeliveryRuleConstraintGroup: drq.withDeliveryRuleConstraintGroup.Clone(),
		withDeliveryOption:              drq.withDeliveryOption.Clone(),
		withCountry:                     drq.withCountry.Clone(),
		withCurrency:                    drq.withCurrency.Clone(),
		// clone intermediate query.
		sql:  drq.sql.Clone(),
		path: drq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithTenant(opts ...func(*TenantQuery)) *DeliveryRuleQuery {
	query := (&TenantClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withTenant = query
	return drq
}

// WithDeliveryRuleConstraintGroup tells the query-builder to eager-load the nodes that are connected to
// the "delivery_rule_constraint_group" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithDeliveryRuleConstraintGroup(opts ...func(*DeliveryRuleConstraintGroupQuery)) *DeliveryRuleQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withDeliveryRuleConstraintGroup = query
	return drq
}

// WithDeliveryOption tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithDeliveryOption(opts ...func(*DeliveryOptionQuery)) *DeliveryRuleQuery {
	query := (&DeliveryOptionClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withDeliveryOption = query
	return drq
}

// WithCountry tells the query-builder to eager-load the nodes that are connected to
// the "country" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithCountry(opts ...func(*CountryQuery)) *DeliveryRuleQuery {
	query := (&CountryClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withCountry = query
	return drq
}

// WithCurrency tells the query-builder to eager-load the nodes that are connected to
// the "currency" edge. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithCurrency(opts ...func(*CurrencyQuery)) *DeliveryRuleQuery {
	query := (&CurrencyClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	drq.withCurrency = query
	return drq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DeliveryRule.Query().
//		GroupBy(deliveryrule.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (drq *DeliveryRuleQuery) GroupBy(field string, fields ...string) *DeliveryRuleGroupBy {
	drq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DeliveryRuleGroupBy{build: drq}
	grbuild.flds = &drq.ctx.Fields
	grbuild.label = deliveryrule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.DeliveryRule.Query().
//		Select(deliveryrule.FieldTenantID).
//		Scan(ctx, &v)
func (drq *DeliveryRuleQuery) Select(fields ...string) *DeliveryRuleSelect {
	drq.ctx.Fields = append(drq.ctx.Fields, fields...)
	sbuild := &DeliveryRuleSelect{DeliveryRuleQuery: drq}
	sbuild.label = deliveryrule.Label
	sbuild.flds, sbuild.scan = &drq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DeliveryRuleSelect configured with the given aggregations.
func (drq *DeliveryRuleQuery) Aggregate(fns ...AggregateFunc) *DeliveryRuleSelect {
	return drq.Select().Aggregate(fns...)
}

func (drq *DeliveryRuleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range drq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, drq); err != nil {
				return err
			}
		}
	}
	for _, f := range drq.ctx.Fields {
		if !deliveryrule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if drq.path != nil {
		prev, err := drq.path(ctx)
		if err != nil {
			return err
		}
		drq.sql = prev
	}
	if deliveryrule.Policy == nil {
		return errors.New("ent: uninitialized deliveryrule.Policy (forgotten import ent/runtime?)")
	}
	if err := deliveryrule.Policy.EvalQuery(ctx, drq); err != nil {
		return err
	}
	return nil
}

func (drq *DeliveryRuleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DeliveryRule, error) {
	var (
		nodes       = []*DeliveryRule{}
		withFKs     = drq.withFKs
		_spec       = drq.querySpec()
		loadedTypes = [5]bool{
			drq.withTenant != nil,
			drq.withDeliveryRuleConstraintGroup != nil,
			drq.withDeliveryOption != nil,
			drq.withCountry != nil,
			drq.withCurrency != nil,
		}
	)
	if drq.withDeliveryOption != nil || drq.withCurrency != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryrule.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DeliveryRule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DeliveryRule{config: drq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(drq.modifiers) > 0 {
		_spec.Modifiers = drq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, drq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := drq.withTenant; query != nil {
		if err := drq.loadTenant(ctx, query, nodes, nil,
			func(n *DeliveryRule, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withDeliveryRuleConstraintGroup; query != nil {
		if err := drq.loadDeliveryRuleConstraintGroup(ctx, query, nodes,
			func(n *DeliveryRule) { n.Edges.DeliveryRuleConstraintGroup = []*DeliveryRuleConstraintGroup{} },
			func(n *DeliveryRule, e *DeliveryRuleConstraintGroup) {
				n.Edges.DeliveryRuleConstraintGroup = append(n.Edges.DeliveryRuleConstraintGroup, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := drq.withDeliveryOption; query != nil {
		if err := drq.loadDeliveryOption(ctx, query, nodes, nil,
			func(n *DeliveryRule, e *DeliveryOption) { n.Edges.DeliveryOption = e }); err != nil {
			return nil, err
		}
	}
	if query := drq.withCountry; query != nil {
		if err := drq.loadCountry(ctx, query, nodes,
			func(n *DeliveryRule) { n.Edges.Country = []*Country{} },
			func(n *DeliveryRule, e *Country) { n.Edges.Country = append(n.Edges.Country, e) }); err != nil {
			return nil, err
		}
	}
	if query := drq.withCurrency; query != nil {
		if err := drq.loadCurrency(ctx, query, nodes, nil,
			func(n *DeliveryRule, e *Currency) { n.Edges.Currency = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range drq.withNamedDeliveryRuleConstraintGroup {
		if err := drq.loadDeliveryRuleConstraintGroup(ctx, query, nodes,
			func(n *DeliveryRule) { n.appendNamedDeliveryRuleConstraintGroup(name) },
			func(n *DeliveryRule, e *DeliveryRuleConstraintGroup) {
				n.appendNamedDeliveryRuleConstraintGroup(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range drq.withNamedCountry {
		if err := drq.loadCountry(ctx, query, nodes,
			func(n *DeliveryRule) { n.appendNamedCountry(name) },
			func(n *DeliveryRule, e *Country) { n.appendNamedCountry(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range drq.loadTotal {
		if err := drq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (drq *DeliveryRuleQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*DeliveryRule, init func(*DeliveryRule), assign func(*DeliveryRule, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRule)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DeliveryRuleQuery) loadDeliveryRuleConstraintGroup(ctx context.Context, query *DeliveryRuleConstraintGroupQuery, nodes []*DeliveryRule, init func(*DeliveryRule), assign func(*DeliveryRule, *DeliveryRuleConstraintGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*DeliveryRule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DeliveryRuleConstraintGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(deliveryrule.DeliveryRuleConstraintGroupColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.delivery_rule_delivery_rule_constraint_group
		if fk == nil {
			return fmt.Errorf(`foreign-key "delivery_rule_delivery_rule_constraint_group" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "delivery_rule_delivery_rule_constraint_group" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (drq *DeliveryRuleQuery) loadDeliveryOption(ctx context.Context, query *DeliveryOptionQuery, nodes []*DeliveryRule, init func(*DeliveryRule), assign func(*DeliveryRule, *DeliveryOption)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRule)
	for i := range nodes {
		if nodes[i].delivery_option_delivery_rule == nil {
			continue
		}
		fk := *nodes[i].delivery_option_delivery_rule
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(deliveryoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_option_delivery_rule" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (drq *DeliveryRuleQuery) loadCountry(ctx context.Context, query *CountryQuery, nodes []*DeliveryRule, init func(*DeliveryRule), assign func(*DeliveryRule, *Country)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*DeliveryRule)
	nids := make(map[pulid.ID]map[*DeliveryRule]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(deliveryrule.CountryTable)
		s.Join(joinT).On(s.C(country.FieldID), joinT.C(deliveryrule.CountryPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(deliveryrule.CountryPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(deliveryrule.CountryPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*DeliveryRule]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Country](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "country" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (drq *DeliveryRuleQuery) loadCurrency(ctx context.Context, query *CurrencyQuery, nodes []*DeliveryRule, init func(*DeliveryRule), assign func(*DeliveryRule, *Currency)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DeliveryRule)
	for i := range nodes {
		if nodes[i].delivery_rule_currency == nil {
			continue
		}
		fk := *nodes[i].delivery_rule_currency
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(currency.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delivery_rule_currency" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (drq *DeliveryRuleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := drq.querySpec()
	if len(drq.modifiers) > 0 {
		_spec.Modifiers = drq.modifiers
	}
	_spec.Node.Columns = drq.ctx.Fields
	if len(drq.ctx.Fields) > 0 {
		_spec.Unique = drq.ctx.Unique != nil && *drq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, drq.driver, _spec)
}

func (drq *DeliveryRuleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(deliveryrule.Table, deliveryrule.Columns, sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString))
	_spec.From = drq.sql
	if unique := drq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if drq.path != nil {
		_spec.Unique = true
	}
	if fields := drq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryrule.FieldID)
		for i := range fields {
			if fields[i] != deliveryrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if drq.withTenant != nil {
			_spec.Node.AddColumnOnce(deliveryrule.FieldTenantID)
		}
	}
	if ps := drq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := drq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := drq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := drq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (drq *DeliveryRuleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(drq.driver.Dialect())
	t1 := builder.Table(deliveryrule.Table)
	columns := drq.ctx.Fields
	if len(columns) == 0 {
		columns = deliveryrule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if drq.sql != nil {
		selector = drq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if drq.ctx.Unique != nil && *drq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range drq.predicates {
		p(selector)
	}
	for _, p := range drq.order {
		p(selector)
	}
	if offset := drq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := drq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryRuleConstraintGroup tells the query-builder to eager-load the nodes that are connected to the "delivery_rule_constraint_group"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithNamedDeliveryRuleConstraintGroup(name string, opts ...func(*DeliveryRuleConstraintGroupQuery)) *DeliveryRuleQuery {
	query := (&DeliveryRuleConstraintGroupClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if drq.withNamedDeliveryRuleConstraintGroup == nil {
		drq.withNamedDeliveryRuleConstraintGroup = make(map[string]*DeliveryRuleConstraintGroupQuery)
	}
	drq.withNamedDeliveryRuleConstraintGroup[name] = query
	return drq
}

// WithNamedCountry tells the query-builder to eager-load the nodes that are connected to the "country"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (drq *DeliveryRuleQuery) WithNamedCountry(name string, opts ...func(*CountryQuery)) *DeliveryRuleQuery {
	query := (&CountryClient{config: drq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if drq.withNamedCountry == nil {
		drq.withNamedCountry = make(map[string]*CountryQuery)
	}
	drq.withNamedCountry[name] = query
	return drq
}

// DeliveryRuleGroupBy is the group-by builder for DeliveryRule entities.
type DeliveryRuleGroupBy struct {
	selector
	build *DeliveryRuleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (drgb *DeliveryRuleGroupBy) Aggregate(fns ...AggregateFunc) *DeliveryRuleGroupBy {
	drgb.fns = append(drgb.fns, fns...)
	return drgb
}

// Scan applies the selector query and scans the result into the given value.
func (drgb *DeliveryRuleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drgb.build.ctx, ent.OpQueryGroupBy)
	if err := drgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryRuleQuery, *DeliveryRuleGroupBy](ctx, drgb.build, drgb, drgb.build.inters, v)
}

func (drgb *DeliveryRuleGroupBy) sqlScan(ctx context.Context, root *DeliveryRuleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(drgb.fns))
	for _, fn := range drgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*drgb.flds)+len(drgb.fns))
		for _, f := range *drgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*drgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DeliveryRuleSelect is the builder for selecting fields of DeliveryRule entities.
type DeliveryRuleSelect struct {
	*DeliveryRuleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (drs *DeliveryRuleSelect) Aggregate(fns ...AggregateFunc) *DeliveryRuleSelect {
	drs.fns = append(drs.fns, fns...)
	return drs
}

// Scan applies the selector query and scans the result into the given value.
func (drs *DeliveryRuleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, drs.ctx, ent.OpQuerySelect)
	if err := drs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DeliveryRuleQuery, *DeliveryRuleSelect](ctx, drs.DeliveryRuleQuery, drs, drs.inters, v)
}

func (drs *DeliveryRuleSelect) sqlScan(ctx context.Context, root *DeliveryRuleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(drs.fns))
	for _, fn := range drs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*drs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := drs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
