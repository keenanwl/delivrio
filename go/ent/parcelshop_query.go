// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopQuery is the builder for querying ParcelShop entities.
type ParcelShopQuery struct {
	config
	ctx                          *QueryContext
	order                        []parcelshop.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.ParcelShop
	withParcelShopDAO            *ParcelShopDAOQuery
	withParcelShopPostNord       *ParcelShopPostNordQuery
	withParcelShopGLS            *ParcelShopGLSQuery
	withParcelShopBring          *ParcelShopBringQuery
	withCarrierBrand             *CarrierBrandQuery
	withAddress                  *AddressGlobalQuery
	withColli                    *ColliQuery
	withBusinessHoursPeriod      *BusinessHoursPeriodQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*ParcelShop) error
	withNamedColli               map[string]*ColliQuery
	withNamedBusinessHoursPeriod map[string]*BusinessHoursPeriodQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ParcelShopQuery builder.
func (psq *ParcelShopQuery) Where(ps ...predicate.ParcelShop) *ParcelShopQuery {
	psq.predicates = append(psq.predicates, ps...)
	return psq
}

// Limit the number of records to be returned by this query.
func (psq *ParcelShopQuery) Limit(limit int) *ParcelShopQuery {
	psq.ctx.Limit = &limit
	return psq
}

// Offset to start from.
func (psq *ParcelShopQuery) Offset(offset int) *ParcelShopQuery {
	psq.ctx.Offset = &offset
	return psq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psq *ParcelShopQuery) Unique(unique bool) *ParcelShopQuery {
	psq.ctx.Unique = &unique
	return psq
}

// Order specifies how the records should be ordered.
func (psq *ParcelShopQuery) Order(o ...parcelshop.OrderOption) *ParcelShopQuery {
	psq.order = append(psq.order, o...)
	return psq
}

// QueryParcelShopDAO chains the current query on the "parcel_shop_dao" edge.
func (psq *ParcelShopQuery) QueryParcelShopDAO() *ParcelShopDAOQuery {
	query := (&ParcelShopDAOClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(parcelshopdao.Table, parcelshopdao.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopDAOTable, parcelshop.ParcelShopDAOColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParcelShopPostNord chains the current query on the "parcel_shop_post_nord" edge.
func (psq *ParcelShopQuery) QueryParcelShopPostNord() *ParcelShopPostNordQuery {
	query := (&ParcelShopPostNordClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(parcelshoppostnord.Table, parcelshoppostnord.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopPostNordTable, parcelshop.ParcelShopPostNordColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParcelShopGLS chains the current query on the "parcel_shop_gls" edge.
func (psq *ParcelShopQuery) QueryParcelShopGLS() *ParcelShopGLSQuery {
	query := (&ParcelShopGLSClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(parcelshopgls.Table, parcelshopgls.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopGLSTable, parcelshop.ParcelShopGLSColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParcelShopBring chains the current query on the "parcel_shop_bring" edge.
func (psq *ParcelShopQuery) QueryParcelShopBring() *ParcelShopBringQuery {
	query := (&ParcelShopBringClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(parcelshopbring.Table, parcelshopbring.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.ParcelShopBringTable, parcelshop.ParcelShopBringColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierBrand chains the current query on the "carrier_brand" edge.
func (psq *ParcelShopQuery) QueryCarrierBrand() *CarrierBrandQuery {
	query := (&CarrierBrandClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(carrierbrand.Table, carrierbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, parcelshop.CarrierBrandTable, parcelshop.CarrierBrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAddress chains the current query on the "address" edge.
func (psq *ParcelShopQuery) QueryAddress() *AddressGlobalQuery {
	query := (&AddressGlobalClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(addressglobal.Table, addressglobal.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, parcelshop.AddressTable, parcelshop.AddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (psq *ParcelShopQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, parcelshop.ColliTable, parcelshop.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinessHoursPeriod chains the current query on the "business_hours_period" edge.
func (psq *ParcelShopQuery) QueryBusinessHoursPeriod() *BusinessHoursPeriodQuery {
	query := (&BusinessHoursPeriodClient{config: psq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(parcelshop.Table, parcelshop.FieldID, selector),
			sqlgraph.To(businesshoursperiod.Table, businesshoursperiod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, parcelshop.BusinessHoursPeriodTable, parcelshop.BusinessHoursPeriodColumn),
		)
		fromU = sqlgraph.SetNeighbors(psq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ParcelShop entity from the query.
// Returns a *NotFoundError when no ParcelShop was found.
func (psq *ParcelShopQuery) First(ctx context.Context) (*ParcelShop, error) {
	nodes, err := psq.Limit(1).All(setContextOp(ctx, psq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{parcelshop.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psq *ParcelShopQuery) FirstX(ctx context.Context) *ParcelShop {
	node, err := psq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ParcelShop ID from the query.
// Returns a *NotFoundError when no ParcelShop ID was found.
func (psq *ParcelShopQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = psq.Limit(1).IDs(setContextOp(ctx, psq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{parcelshop.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psq *ParcelShopQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := psq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ParcelShop entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ParcelShop entity is found.
// Returns a *NotFoundError when no ParcelShop entities are found.
func (psq *ParcelShopQuery) Only(ctx context.Context) (*ParcelShop, error) {
	nodes, err := psq.Limit(2).All(setContextOp(ctx, psq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{parcelshop.Label}
	default:
		return nil, &NotSingularError{parcelshop.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psq *ParcelShopQuery) OnlyX(ctx context.Context) *ParcelShop {
	node, err := psq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ParcelShop ID in the query.
// Returns a *NotSingularError when more than one ParcelShop ID is found.
// Returns a *NotFoundError when no entities are found.
func (psq *ParcelShopQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = psq.Limit(2).IDs(setContextOp(ctx, psq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{parcelshop.Label}
	default:
		err = &NotSingularError{parcelshop.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psq *ParcelShopQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := psq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ParcelShops.
func (psq *ParcelShopQuery) All(ctx context.Context) ([]*ParcelShop, error) {
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryAll)
	if err := psq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ParcelShop, *ParcelShopQuery]()
	return withInterceptors[[]*ParcelShop](ctx, psq, qr, psq.inters)
}

// AllX is like All, but panics if an error occurs.
func (psq *ParcelShopQuery) AllX(ctx context.Context) []*ParcelShop {
	nodes, err := psq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ParcelShop IDs.
func (psq *ParcelShopQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if psq.ctx.Unique == nil && psq.path != nil {
		psq.Unique(true)
	}
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryIDs)
	if err = psq.Select(parcelshop.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psq *ParcelShopQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := psq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psq *ParcelShopQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryCount)
	if err := psq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, psq, querierCount[*ParcelShopQuery](), psq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (psq *ParcelShopQuery) CountX(ctx context.Context) int {
	count, err := psq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psq *ParcelShopQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, psq.ctx, ent.OpQueryExist)
	switch _, err := psq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (psq *ParcelShopQuery) ExistX(ctx context.Context) bool {
	exist, err := psq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ParcelShopQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psq *ParcelShopQuery) Clone() *ParcelShopQuery {
	if psq == nil {
		return nil
	}
	return &ParcelShopQuery{
		config:                  psq.config,
		ctx:                     psq.ctx.Clone(),
		order:                   append([]parcelshop.OrderOption{}, psq.order...),
		inters:                  append([]Interceptor{}, psq.inters...),
		predicates:              append([]predicate.ParcelShop{}, psq.predicates...),
		withParcelShopDAO:       psq.withParcelShopDAO.Clone(),
		withParcelShopPostNord:  psq.withParcelShopPostNord.Clone(),
		withParcelShopGLS:       psq.withParcelShopGLS.Clone(),
		withParcelShopBring:     psq.withParcelShopBring.Clone(),
		withCarrierBrand:        psq.withCarrierBrand.Clone(),
		withAddress:             psq.withAddress.Clone(),
		withColli:               psq.withColli.Clone(),
		withBusinessHoursPeriod: psq.withBusinessHoursPeriod.Clone(),
		// clone intermediate query.
		sql:  psq.sql.Clone(),
		path: psq.path,
	}
}

// WithParcelShopDAO tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop_dao" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithParcelShopDAO(opts ...func(*ParcelShopDAOQuery)) *ParcelShopQuery {
	query := (&ParcelShopDAOClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withParcelShopDAO = query
	return psq
}

// WithParcelShopPostNord tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop_post_nord" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithParcelShopPostNord(opts ...func(*ParcelShopPostNordQuery)) *ParcelShopQuery {
	query := (&ParcelShopPostNordClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withParcelShopPostNord = query
	return psq
}

// WithParcelShopGLS tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop_gls" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithParcelShopGLS(opts ...func(*ParcelShopGLSQuery)) *ParcelShopQuery {
	query := (&ParcelShopGLSClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withParcelShopGLS = query
	return psq
}

// WithParcelShopBring tells the query-builder to eager-load the nodes that are connected to
// the "parcel_shop_bring" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithParcelShopBring(opts ...func(*ParcelShopBringQuery)) *ParcelShopQuery {
	query := (&ParcelShopBringClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withParcelShopBring = query
	return psq
}

// WithCarrierBrand tells the query-builder to eager-load the nodes that are connected to
// the "carrier_brand" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithCarrierBrand(opts ...func(*CarrierBrandQuery)) *ParcelShopQuery {
	query := (&CarrierBrandClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withCarrierBrand = query
	return psq
}

// WithAddress tells the query-builder to eager-load the nodes that are connected to
// the "address" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithAddress(opts ...func(*AddressGlobalQuery)) *ParcelShopQuery {
	query := (&AddressGlobalClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withAddress = query
	return psq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithColli(opts ...func(*ColliQuery)) *ParcelShopQuery {
	query := (&ColliClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withColli = query
	return psq
}

// WithBusinessHoursPeriod tells the query-builder to eager-load the nodes that are connected to
// the "business_hours_period" edge. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithBusinessHoursPeriod(opts ...func(*BusinessHoursPeriodQuery)) *ParcelShopQuery {
	query := (&BusinessHoursPeriodClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	psq.withBusinessHoursPeriod = query
	return psq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ParcelShop.Query().
//		GroupBy(parcelshop.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psq *ParcelShopQuery) GroupBy(field string, fields ...string) *ParcelShopGroupBy {
	psq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ParcelShopGroupBy{build: psq}
	grbuild.flds = &psq.ctx.Fields
	grbuild.label = parcelshop.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.ParcelShop.Query().
//		Select(parcelshop.FieldName).
//		Scan(ctx, &v)
func (psq *ParcelShopQuery) Select(fields ...string) *ParcelShopSelect {
	psq.ctx.Fields = append(psq.ctx.Fields, fields...)
	sbuild := &ParcelShopSelect{ParcelShopQuery: psq}
	sbuild.label = parcelshop.Label
	sbuild.flds, sbuild.scan = &psq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ParcelShopSelect configured with the given aggregations.
func (psq *ParcelShopQuery) Aggregate(fns ...AggregateFunc) *ParcelShopSelect {
	return psq.Select().Aggregate(fns...)
}

func (psq *ParcelShopQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range psq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, psq); err != nil {
				return err
			}
		}
	}
	for _, f := range psq.ctx.Fields {
		if !parcelshop.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psq.path != nil {
		prev, err := psq.path(ctx)
		if err != nil {
			return err
		}
		psq.sql = prev
	}
	if parcelshop.Policy == nil {
		return errors.New("ent: uninitialized parcelshop.Policy (forgotten import ent/runtime?)")
	}
	if err := parcelshop.Policy.EvalQuery(ctx, psq); err != nil {
		return err
	}
	return nil
}

func (psq *ParcelShopQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ParcelShop, error) {
	var (
		nodes       = []*ParcelShop{}
		withFKs     = psq.withFKs
		_spec       = psq.querySpec()
		loadedTypes = [8]bool{
			psq.withParcelShopDAO != nil,
			psq.withParcelShopPostNord != nil,
			psq.withParcelShopGLS != nil,
			psq.withParcelShopBring != nil,
			psq.withCarrierBrand != nil,
			psq.withAddress != nil,
			psq.withColli != nil,
			psq.withBusinessHoursPeriod != nil,
		}
	)
	if psq.withCarrierBrand != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshop.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ParcelShop).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ParcelShop{config: psq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(psq.modifiers) > 0 {
		_spec.Modifiers = psq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psq.withParcelShopDAO; query != nil {
		if err := psq.loadParcelShopDAO(ctx, query, nodes, nil,
			func(n *ParcelShop, e *ParcelShopDAO) { n.Edges.ParcelShopDAO = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withParcelShopPostNord; query != nil {
		if err := psq.loadParcelShopPostNord(ctx, query, nodes, nil,
			func(n *ParcelShop, e *ParcelShopPostNord) { n.Edges.ParcelShopPostNord = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withParcelShopGLS; query != nil {
		if err := psq.loadParcelShopGLS(ctx, query, nodes, nil,
			func(n *ParcelShop, e *ParcelShopGLS) { n.Edges.ParcelShopGLS = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withParcelShopBring; query != nil {
		if err := psq.loadParcelShopBring(ctx, query, nodes, nil,
			func(n *ParcelShop, e *ParcelShopBring) { n.Edges.ParcelShopBring = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withCarrierBrand; query != nil {
		if err := psq.loadCarrierBrand(ctx, query, nodes, nil,
			func(n *ParcelShop, e *CarrierBrand) { n.Edges.CarrierBrand = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withAddress; query != nil {
		if err := psq.loadAddress(ctx, query, nodes, nil,
			func(n *ParcelShop, e *AddressGlobal) { n.Edges.Address = e }); err != nil {
			return nil, err
		}
	}
	if query := psq.withColli; query != nil {
		if err := psq.loadColli(ctx, query, nodes,
			func(n *ParcelShop) { n.Edges.Colli = []*Colli{} },
			func(n *ParcelShop, e *Colli) { n.Edges.Colli = append(n.Edges.Colli, e) }); err != nil {
			return nil, err
		}
	}
	if query := psq.withBusinessHoursPeriod; query != nil {
		if err := psq.loadBusinessHoursPeriod(ctx, query, nodes,
			func(n *ParcelShop) { n.Edges.BusinessHoursPeriod = []*BusinessHoursPeriod{} },
			func(n *ParcelShop, e *BusinessHoursPeriod) {
				n.Edges.BusinessHoursPeriod = append(n.Edges.BusinessHoursPeriod, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range psq.withNamedColli {
		if err := psq.loadColli(ctx, query, nodes,
			func(n *ParcelShop) { n.appendNamedColli(name) },
			func(n *ParcelShop, e *Colli) { n.appendNamedColli(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range psq.withNamedBusinessHoursPeriod {
		if err := psq.loadBusinessHoursPeriod(ctx, query, nodes,
			func(n *ParcelShop) { n.appendNamedBusinessHoursPeriod(name) },
			func(n *ParcelShop, e *BusinessHoursPeriod) { n.appendNamedBusinessHoursPeriod(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range psq.loadTotal {
		if err := psq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psq *ParcelShopQuery) loadParcelShopDAO(ctx context.Context, query *ParcelShopDAOQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *ParcelShopDAO)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ParcelShopDAO(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.ParcelShopDAOColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_parcel_shop_dao
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_parcel_shop_dao" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_parcel_shop_dao" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ParcelShopQuery) loadParcelShopPostNord(ctx context.Context, query *ParcelShopPostNordQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *ParcelShopPostNord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ParcelShopPostNord(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.ParcelShopPostNordColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_parcel_shop_post_nord
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_parcel_shop_post_nord" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_parcel_shop_post_nord" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ParcelShopQuery) loadParcelShopGLS(ctx context.Context, query *ParcelShopGLSQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *ParcelShopGLS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ParcelShopGLS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.ParcelShopGLSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_parcel_shop_gls
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_parcel_shop_gls" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_parcel_shop_gls" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ParcelShopQuery) loadParcelShopBring(ctx context.Context, query *ParcelShopBringQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *ParcelShopBring)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.ParcelShopBring(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.ParcelShopBringColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_parcel_shop_bring
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_parcel_shop_bring" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_parcel_shop_bring" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ParcelShopQuery) loadCarrierBrand(ctx context.Context, query *CarrierBrandQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *CarrierBrand)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ParcelShop)
	for i := range nodes {
		if nodes[i].parcel_shop_carrier_brand == nil {
			continue
		}
		fk := *nodes[i].parcel_shop_carrier_brand
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierbrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parcel_shop_carrier_brand" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psq *ParcelShopQuery) loadAddress(ctx context.Context, query *AddressGlobalQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *AddressGlobal)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.AddressGlobal(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.AddressColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_address
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_address" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_address" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ParcelShopQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *Colli)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Colli(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.ColliColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.colli_parcel_shop
		if fk == nil {
			return fmt.Errorf(`foreign-key "colli_parcel_shop" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "colli_parcel_shop" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (psq *ParcelShopQuery) loadBusinessHoursPeriod(ctx context.Context, query *BusinessHoursPeriodQuery, nodes []*ParcelShop, init func(*ParcelShop), assign func(*ParcelShop, *BusinessHoursPeriod)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*ParcelShop)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BusinessHoursPeriod(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(parcelshop.BusinessHoursPeriodColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.parcel_shop_business_hours_period
		if fk == nil {
			return fmt.Errorf(`foreign-key "parcel_shop_business_hours_period" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parcel_shop_business_hours_period" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (psq *ParcelShopQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psq.querySpec()
	if len(psq.modifiers) > 0 {
		_spec.Modifiers = psq.modifiers
	}
	_spec.Node.Columns = psq.ctx.Fields
	if len(psq.ctx.Fields) > 0 {
		_spec.Unique = psq.ctx.Unique != nil && *psq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, psq.driver, _spec)
}

func (psq *ParcelShopQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(parcelshop.Table, parcelshop.Columns, sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString))
	_spec.From = psq.sql
	if unique := psq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if psq.path != nil {
		_spec.Unique = true
	}
	if fields := psq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, parcelshop.FieldID)
		for i := range fields {
			if fields[i] != parcelshop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psq *ParcelShopQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psq.driver.Dialect())
	t1 := builder.Table(parcelshop.Table)
	columns := psq.ctx.Fields
	if len(columns) == 0 {
		columns = parcelshop.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psq.sql != nil {
		selector = psq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psq.ctx.Unique != nil && *psq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range psq.predicates {
		p(selector)
	}
	for _, p := range psq.order {
		p(selector)
	}
	if offset := psq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedColli tells the query-builder to eager-load the nodes that are connected to the "colli"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithNamedColli(name string, opts ...func(*ColliQuery)) *ParcelShopQuery {
	query := (&ColliClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if psq.withNamedColli == nil {
		psq.withNamedColli = make(map[string]*ColliQuery)
	}
	psq.withNamedColli[name] = query
	return psq
}

// WithNamedBusinessHoursPeriod tells the query-builder to eager-load the nodes that are connected to the "business_hours_period"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (psq *ParcelShopQuery) WithNamedBusinessHoursPeriod(name string, opts ...func(*BusinessHoursPeriodQuery)) *ParcelShopQuery {
	query := (&BusinessHoursPeriodClient{config: psq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if psq.withNamedBusinessHoursPeriod == nil {
		psq.withNamedBusinessHoursPeriod = make(map[string]*BusinessHoursPeriodQuery)
	}
	psq.withNamedBusinessHoursPeriod[name] = query
	return psq
}

// ParcelShopGroupBy is the group-by builder for ParcelShop entities.
type ParcelShopGroupBy struct {
	selector
	build *ParcelShopQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psgb *ParcelShopGroupBy) Aggregate(fns ...AggregateFunc) *ParcelShopGroupBy {
	psgb.fns = append(psgb.fns, fns...)
	return psgb
}

// Scan applies the selector query and scans the result into the given value.
func (psgb *ParcelShopGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, psgb.build.ctx, ent.OpQueryGroupBy)
	if err := psgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParcelShopQuery, *ParcelShopGroupBy](ctx, psgb.build, psgb, psgb.build.inters, v)
}

func (psgb *ParcelShopGroupBy) sqlScan(ctx context.Context, root *ParcelShopQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(psgb.fns))
	for _, fn := range psgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*psgb.flds)+len(psgb.fns))
		for _, f := range *psgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*psgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ParcelShopSelect is the builder for selecting fields of ParcelShop entities.
type ParcelShopSelect struct {
	*ParcelShopQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pss *ParcelShopSelect) Aggregate(fns ...AggregateFunc) *ParcelShopSelect {
	pss.fns = append(pss.fns, fns...)
	return pss
}

// Scan applies the selector query and scans the result into the given value.
func (pss *ParcelShopSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pss.ctx, ent.OpQuerySelect)
	if err := pss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ParcelShopQuery, *ParcelShopSelect](ctx, pss.ParcelShopQuery, pss, pss.inters, v)
}

func (pss *ParcelShopSelect) sqlScan(ctx context.Context, root *ParcelShopQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pss.fns))
	for _, fn := range pss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
