// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SignupOptions is the model entity for the SignupOptions schema.
type SignupOptions struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// BetterDeliveryOptions holds the value of the "better_delivery_options" field.
	BetterDeliveryOptions bool `json:"better_delivery_options,omitempty"`
	// ImprovePickPack holds the value of the "improve_pick_pack" field.
	ImprovePickPack bool `json:"improve_pick_pack,omitempty"`
	// ShippingLabel holds the value of the "shipping_label" field.
	ShippingLabel bool `json:"shipping_label,omitempty"`
	// CustomDocs holds the value of the "custom_docs" field.
	CustomDocs bool `json:"custom_docs,omitempty"`
	// ReducedCosts holds the value of the "reduced_costs" field.
	ReducedCosts bool `json:"reduced_costs,omitempty"`
	// EasyReturns holds the value of the "easy_returns" field.
	EasyReturns bool `json:"easy_returns,omitempty"`
	// ClickCollect holds the value of the "click_collect" field.
	ClickCollect bool `json:"click_collect,omitempty"`
	// NumShipments holds the value of the "num_shipments" field.
	NumShipments int `json:"num_shipments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SignupOptionsQuery when eager-loading is set.
	Edges               SignupOptionsEdges `json:"edges"`
	user_signup_options *pulid.ID
	selectValues        sql.SelectValues
}

// SignupOptionsEdges holds the relations/edges for other nodes in the graph.
type SignupOptionsEdges struct {
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SignupOptionsEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SignupOptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signupoptions.FieldID:
			values[i] = new(pulid.ID)
		case signupoptions.FieldBetterDeliveryOptions, signupoptions.FieldImprovePickPack, signupoptions.FieldShippingLabel, signupoptions.FieldCustomDocs, signupoptions.FieldReducedCosts, signupoptions.FieldEasyReturns, signupoptions.FieldClickCollect:
			values[i] = new(sql.NullBool)
		case signupoptions.FieldNumShipments:
			values[i] = new(sql.NullInt64)
		case signupoptions.ForeignKeys[0]: // user_signup_options
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SignupOptions fields.
func (so *SignupOptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signupoptions.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				so.ID = *value
			}
		case signupoptions.FieldBetterDeliveryOptions:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field better_delivery_options", values[i])
			} else if value.Valid {
				so.BetterDeliveryOptions = value.Bool
			}
		case signupoptions.FieldImprovePickPack:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field improve_pick_pack", values[i])
			} else if value.Valid {
				so.ImprovePickPack = value.Bool
			}
		case signupoptions.FieldShippingLabel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_label", values[i])
			} else if value.Valid {
				so.ShippingLabel = value.Bool
			}
		case signupoptions.FieldCustomDocs:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field custom_docs", values[i])
			} else if value.Valid {
				so.CustomDocs = value.Bool
			}
		case signupoptions.FieldReducedCosts:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field reduced_costs", values[i])
			} else if value.Valid {
				so.ReducedCosts = value.Bool
			}
		case signupoptions.FieldEasyReturns:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field easy_returns", values[i])
			} else if value.Valid {
				so.EasyReturns = value.Bool
			}
		case signupoptions.FieldClickCollect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field click_collect", values[i])
			} else if value.Valid {
				so.ClickCollect = value.Bool
			}
		case signupoptions.FieldNumShipments:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_shipments", values[i])
			} else if value.Valid {
				so.NumShipments = int(value.Int64)
			}
		case signupoptions.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_signup_options", values[i])
			} else if value.Valid {
				so.user_signup_options = new(pulid.ID)
				*so.user_signup_options = *value.S.(*pulid.ID)
			}
		default:
			so.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SignupOptions.
// This includes values selected through modifiers, order, etc.
func (so *SignupOptions) Value(name string) (ent.Value, error) {
	return so.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the SignupOptions entity.
func (so *SignupOptions) QueryUsers() *UserQuery {
	return NewSignupOptionsClient(so.config).QueryUsers(so)
}

// Update returns a builder for updating this SignupOptions.
// Note that you need to call SignupOptions.Unwrap() before calling this method if this SignupOptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (so *SignupOptions) Update() *SignupOptionsUpdateOne {
	return NewSignupOptionsClient(so.config).UpdateOne(so)
}

// Unwrap unwraps the SignupOptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (so *SignupOptions) Unwrap() *SignupOptions {
	_tx, ok := so.config.driver.(*txDriver)
	if !ok {
		panic("ent: SignupOptions is not a transactional entity")
	}
	so.config.driver = _tx.drv
	return so
}

// String implements the fmt.Stringer.
func (so *SignupOptions) String() string {
	var builder strings.Builder
	builder.WriteString("SignupOptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", so.ID))
	builder.WriteString("better_delivery_options=")
	builder.WriteString(fmt.Sprintf("%v", so.BetterDeliveryOptions))
	builder.WriteString(", ")
	builder.WriteString("improve_pick_pack=")
	builder.WriteString(fmt.Sprintf("%v", so.ImprovePickPack))
	builder.WriteString(", ")
	builder.WriteString("shipping_label=")
	builder.WriteString(fmt.Sprintf("%v", so.ShippingLabel))
	builder.WriteString(", ")
	builder.WriteString("custom_docs=")
	builder.WriteString(fmt.Sprintf("%v", so.CustomDocs))
	builder.WriteString(", ")
	builder.WriteString("reduced_costs=")
	builder.WriteString(fmt.Sprintf("%v", so.ReducedCosts))
	builder.WriteString(", ")
	builder.WriteString("easy_returns=")
	builder.WriteString(fmt.Sprintf("%v", so.EasyReturns))
	builder.WriteString(", ")
	builder.WriteString("click_collect=")
	builder.WriteString(fmt.Sprintf("%v", so.ClickCollect))
	builder.WriteString(", ")
	builder.WriteString("num_shipments=")
	builder.WriteString(fmt.Sprintf("%v", so.NumShipments))
	builder.WriteByte(')')
	return builder.String()
}

// SignupOptionsSlice is a parsable slice of SignupOptions.
type SignupOptionsSlice []*SignupOptions
