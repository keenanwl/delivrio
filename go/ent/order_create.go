// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/schema/fieldjson"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (oc *OrderCreate) SetTenantID(pu pulid.ID) *OrderCreate {
	oc.mutation.SetTenantID(pu)
	return oc
}

// SetOrderPublicID sets the "order_public_id" field.
func (oc *OrderCreate) SetOrderPublicID(s string) *OrderCreate {
	oc.mutation.SetOrderPublicID(s)
	return oc
}

// SetExternalID sets the "external_id" field.
func (oc *OrderCreate) SetExternalID(s string) *OrderCreate {
	oc.mutation.SetExternalID(s)
	return oc
}

// SetNillableExternalID sets the "external_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableExternalID(s *string) *OrderCreate {
	if s != nil {
		oc.SetExternalID(*s)
	}
	return oc
}

// SetCommentInternal sets the "comment_internal" field.
func (oc *OrderCreate) SetCommentInternal(s string) *OrderCreate {
	oc.mutation.SetCommentInternal(s)
	return oc
}

// SetNillableCommentInternal sets the "comment_internal" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCommentInternal(s *string) *OrderCreate {
	if s != nil {
		oc.SetCommentInternal(*s)
	}
	return oc
}

// SetCommentExternal sets the "comment_external" field.
func (oc *OrderCreate) SetCommentExternal(s string) *OrderCreate {
	oc.mutation.SetCommentExternal(s)
	return oc
}

// SetNillableCommentExternal sets the "comment_external" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCommentExternal(s *string) *OrderCreate {
	if s != nil {
		oc.SetCommentExternal(*s)
	}
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field.
func (oc *OrderCreate) SetEmailSyncConfirmationAt(t time.Time) *OrderCreate {
	oc.mutation.SetEmailSyncConfirmationAt(t)
	return oc
}

// SetNillableEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableEmailSyncConfirmationAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetEmailSyncConfirmationAt(*t)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(o order.Status) *OrderCreate {
	oc.mutation.SetStatus(o)
	return oc
}

// SetNoteAttributes sets the "note_attributes" field.
func (oc *OrderCreate) SetNoteAttributes(fa fieldjson.NoteAttributes) *OrderCreate {
	oc.mutation.SetNoteAttributes(fa)
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(pu pulid.ID) *OrderCreate {
	oc.mutation.SetID(pu)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableID(pu *pulid.ID) *OrderCreate {
	if pu != nil {
		oc.SetID(*pu)
	}
	return oc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (oc *OrderCreate) SetTenant(t *Tenant) *OrderCreate {
	return oc.SetTenantID(t.ID)
}

// AddOrderHistoryIDs adds the "order_history" edge to the OrderHistory entity by IDs.
func (oc *OrderCreate) AddOrderHistoryIDs(ids ...pulid.ID) *OrderCreate {
	oc.mutation.AddOrderHistoryIDs(ids...)
	return oc
}

// AddOrderHistory adds the "order_history" edges to the OrderHistory entity.
func (oc *OrderCreate) AddOrderHistory(o ...*OrderHistory) *OrderCreate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOrderHistoryIDs(ids...)
}

// SetConnectionID sets the "connection" edge to the Connection entity by ID.
func (oc *OrderCreate) SetConnectionID(id pulid.ID) *OrderCreate {
	oc.mutation.SetConnectionID(id)
	return oc
}

// SetConnection sets the "connection" edge to the Connection entity.
func (oc *OrderCreate) SetConnection(c *Connection) *OrderCreate {
	return oc.SetConnectionID(c.ID)
}

// AddColliIDs adds the "colli" edge to the Colli entity by IDs.
func (oc *OrderCreate) AddColliIDs(ids ...pulid.ID) *OrderCreate {
	oc.mutation.AddColliIDs(ids...)
	return oc
}

// AddColli adds the "colli" edges to the Colli entity.
func (oc *OrderCreate) AddColli(c ...*Colli) *OrderCreate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddColliIDs(ids...)
}

// AddReturnColliIDs adds the "return_colli" edge to the ReturnColli entity by IDs.
func (oc *OrderCreate) AddReturnColliIDs(ids ...pulid.ID) *OrderCreate {
	oc.mutation.AddReturnColliIDs(ids...)
	return oc
}

// AddReturnColli adds the "return_colli" edges to the ReturnColli entity.
func (oc *OrderCreate) AddReturnColli(r ...*ReturnColli) *OrderCreate {
	ids := make([]pulid.ID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return oc.AddReturnColliIDs(ids...)
}

// SetHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID.
func (oc *OrderCreate) SetHypothesisTestDeliveryOptionRequestID(id pulid.ID) *OrderCreate {
	oc.mutation.SetHypothesisTestDeliveryOptionRequestID(id)
	return oc
}

// SetNillableHypothesisTestDeliveryOptionRequestID sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillableHypothesisTestDeliveryOptionRequestID(id *pulid.ID) *OrderCreate {
	if id != nil {
		oc = oc.SetHypothesisTestDeliveryOptionRequestID(*id)
	}
	return oc
}

// SetHypothesisTestDeliveryOptionRequest sets the "hypothesis_test_delivery_option_request" edge to the HypothesisTestDeliveryOptionRequest entity.
func (oc *OrderCreate) SetHypothesisTestDeliveryOptionRequest(h *HypothesisTestDeliveryOptionRequest) *OrderCreate {
	return oc.SetHypothesisTestDeliveryOptionRequestID(h.ID)
}

// SetPalletID sets the "pallet" edge to the Pallet entity by ID.
func (oc *OrderCreate) SetPalletID(id pulid.ID) *OrderCreate {
	oc.mutation.SetPalletID(id)
	return oc
}

// SetNillablePalletID sets the "pallet" edge to the Pallet entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillablePalletID(id *pulid.ID) *OrderCreate {
	if id != nil {
		oc = oc.SetPalletID(*id)
	}
	return oc
}

// SetPallet sets the "pallet" edge to the Pallet entity.
func (oc *OrderCreate) SetPallet(p *Pallet) *OrderCreate {
	return oc.SetPalletID(p.ID)
}

// SetConsolidationID sets the "consolidation" edge to the Consolidation entity by ID.
func (oc *OrderCreate) SetConsolidationID(id pulid.ID) *OrderCreate {
	oc.mutation.SetConsolidationID(id)
	return oc
}

// SetNillableConsolidationID sets the "consolidation" edge to the Consolidation entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillableConsolidationID(id *pulid.ID) *OrderCreate {
	if id != nil {
		oc = oc.SetConsolidationID(*id)
	}
	return oc
}

// SetConsolidation sets the "consolidation" edge to the Consolidation entity.
func (oc *OrderCreate) SetConsolidation(c *Consolidation) *OrderCreate {
	return oc.SetConsolidationID(c.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if order.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.NoteAttributes(); !ok {
		v := order.DefaultNoteAttributes
		oc.mutation.SetNoteAttributes(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		if order.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultID (forgotten import ent/runtime?)")
		}
		v := order.DefaultID()
		oc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Order.tenant_id"`)}
	}
	if _, ok := oc.mutation.OrderPublicID(); !ok {
		return &ValidationError{Name: "order_public_id", err: errors.New(`ent: missing required field "Order.order_public_id"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if v, ok := oc.mutation.Status(); ok {
		if err := order.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Order.status": %w`, err)}
		}
	}
	if len(oc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Order.tenant"`)}
	}
	if len(oc.mutation.ConnectionIDs()) == 0 {
		return &ValidationError{Name: "connection", err: errors.New(`ent: missing required edge "Order.connection"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeString))
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.OrderPublicID(); ok {
		_spec.SetField(order.FieldOrderPublicID, field.TypeString, value)
		_node.OrderPublicID = value
	}
	if value, ok := oc.mutation.ExternalID(); ok {
		_spec.SetField(order.FieldExternalID, field.TypeString, value)
		_node.ExternalID = value
	}
	if value, ok := oc.mutation.CommentInternal(); ok {
		_spec.SetField(order.FieldCommentInternal, field.TypeString, value)
		_node.CommentInternal = value
	}
	if value, ok := oc.mutation.CommentExternal(); ok {
		_spec.SetField(order.FieldCommentExternal, field.TypeString, value)
		_node.CommentExternal = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.EmailSyncConfirmationAt(); ok {
		_spec.SetField(order.FieldEmailSyncConfirmationAt, field.TypeTime, value)
		_node.EmailSyncConfirmationAt = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.NoteAttributes(); ok {
		_spec.SetField(order.FieldNoteAttributes, field.TypeJSON, value)
		_node.NoteAttributes = value
	}
	if nodes := oc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrderHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ConnectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConnectionTable,
			Columns: []string{order.ConnectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.connection_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(colli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ReturnColliIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returncolli.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.HypothesisTestDeliveryOptionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{order.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hypothesis_test_delivery_option_request_order = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PalletTable,
			Columns: []string{order.PalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.pallet_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ConsolidationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConsolidationTable,
			Columns: []string{order.ConsolidationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consolidation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.consolidation_orders = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *OrderUpsert) SetTenantID(v pulid.ID) *OrderUpsert {
	u.Set(order.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTenantID() *OrderUpsert {
	u.SetExcluded(order.FieldTenantID)
	return u
}

// SetOrderPublicID sets the "order_public_id" field.
func (u *OrderUpsert) SetOrderPublicID(v string) *OrderUpsert {
	u.Set(order.FieldOrderPublicID, v)
	return u
}

// UpdateOrderPublicID sets the "order_public_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateOrderPublicID() *OrderUpsert {
	u.SetExcluded(order.FieldOrderPublicID)
	return u
}

// SetExternalID sets the "external_id" field.
func (u *OrderUpsert) SetExternalID(v string) *OrderUpsert {
	u.Set(order.FieldExternalID, v)
	return u
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateExternalID() *OrderUpsert {
	u.SetExcluded(order.FieldExternalID)
	return u
}

// ClearExternalID clears the value of the "external_id" field.
func (u *OrderUpsert) ClearExternalID() *OrderUpsert {
	u.SetNull(order.FieldExternalID)
	return u
}

// SetCommentInternal sets the "comment_internal" field.
func (u *OrderUpsert) SetCommentInternal(v string) *OrderUpsert {
	u.Set(order.FieldCommentInternal, v)
	return u
}

// UpdateCommentInternal sets the "comment_internal" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCommentInternal() *OrderUpsert {
	u.SetExcluded(order.FieldCommentInternal)
	return u
}

// ClearCommentInternal clears the value of the "comment_internal" field.
func (u *OrderUpsert) ClearCommentInternal() *OrderUpsert {
	u.SetNull(order.FieldCommentInternal)
	return u
}

// SetCommentExternal sets the "comment_external" field.
func (u *OrderUpsert) SetCommentExternal(v string) *OrderUpsert {
	u.Set(order.FieldCommentExternal, v)
	return u
}

// UpdateCommentExternal sets the "comment_external" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCommentExternal() *OrderUpsert {
	u.SetExcluded(order.FieldCommentExternal)
	return u
}

// ClearCommentExternal clears the value of the "comment_external" field.
func (u *OrderUpsert) ClearCommentExternal() *OrderUpsert {
	u.SetNull(order.FieldCommentExternal)
	return u
}

// SetEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field.
func (u *OrderUpsert) SetEmailSyncConfirmationAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldEmailSyncConfirmationAt, v)
	return u
}

// UpdateEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateEmailSyncConfirmationAt() *OrderUpsert {
	u.SetExcluded(order.FieldEmailSyncConfirmationAt)
	return u
}

// ClearEmailSyncConfirmationAt clears the value of the "email_sync_confirmation_at" field.
func (u *OrderUpsert) ClearEmailSyncConfirmationAt() *OrderUpsert {
	u.SetNull(order.FieldEmailSyncConfirmationAt)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v order.Status) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// SetNoteAttributes sets the "note_attributes" field.
func (u *OrderUpsert) SetNoteAttributes(v fieldjson.NoteAttributes) *OrderUpsert {
	u.Set(order.FieldNoteAttributes, v)
	return u
}

// UpdateNoteAttributes sets the "note_attributes" field to the value that was provided on create.
func (u *OrderUpsert) UpdateNoteAttributes() *OrderUpsert {
	u.SetExcluded(order.FieldNoteAttributes)
	return u
}

// ClearNoteAttributes clears the value of the "note_attributes" field.
func (u *OrderUpsert) ClearNoteAttributes() *OrderUpsert {
	u.SetNull(order.FieldNoteAttributes)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(order.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OrderUpsertOne) SetTenantID(v pulid.ID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTenantID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTenantID()
	})
}

// SetOrderPublicID sets the "order_public_id" field.
func (u *OrderUpsertOne) SetOrderPublicID(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderPublicID(v)
	})
}

// UpdateOrderPublicID sets the "order_public_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateOrderPublicID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderPublicID()
	})
}

// SetExternalID sets the "external_id" field.
func (u *OrderUpsertOne) SetExternalID(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateExternalID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *OrderUpsertOne) ClearExternalID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearExternalID()
	})
}

// SetCommentInternal sets the "comment_internal" field.
func (u *OrderUpsertOne) SetCommentInternal(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCommentInternal(v)
	})
}

// UpdateCommentInternal sets the "comment_internal" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCommentInternal() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCommentInternal()
	})
}

// ClearCommentInternal clears the value of the "comment_internal" field.
func (u *OrderUpsertOne) ClearCommentInternal() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCommentInternal()
	})
}

// SetCommentExternal sets the "comment_external" field.
func (u *OrderUpsertOne) SetCommentExternal(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCommentExternal(v)
	})
}

// UpdateCommentExternal sets the "comment_external" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCommentExternal() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCommentExternal()
	})
}

// ClearCommentExternal clears the value of the "comment_external" field.
func (u *OrderUpsertOne) ClearCommentExternal() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCommentExternal()
	})
}

// SetEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field.
func (u *OrderUpsertOne) SetEmailSyncConfirmationAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetEmailSyncConfirmationAt(v)
	})
}

// UpdateEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateEmailSyncConfirmationAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEmailSyncConfirmationAt()
	})
}

// ClearEmailSyncConfirmationAt clears the value of the "email_sync_confirmation_at" field.
func (u *OrderUpsertOne) ClearEmailSyncConfirmationAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearEmailSyncConfirmationAt()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v order.Status) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetNoteAttributes sets the "note_attributes" field.
func (u *OrderUpsertOne) SetNoteAttributes(v fieldjson.NoteAttributes) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetNoteAttributes(v)
	})
}

// UpdateNoteAttributes sets the "note_attributes" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateNoteAttributes() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNoteAttributes()
	})
}

// ClearNoteAttributes clears the value of the "note_attributes" field.
func (u *OrderUpsertOne) ClearNoteAttributes() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearNoteAttributes()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderUpsertOne.ID is not supported by MySQL driver. Use OrderUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(order.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *OrderUpsertBulk) SetTenantID(v pulid.ID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTenantID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTenantID()
	})
}

// SetOrderPublicID sets the "order_public_id" field.
func (u *OrderUpsertBulk) SetOrderPublicID(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderPublicID(v)
	})
}

// UpdateOrderPublicID sets the "order_public_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateOrderPublicID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderPublicID()
	})
}

// SetExternalID sets the "external_id" field.
func (u *OrderUpsertBulk) SetExternalID(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetExternalID(v)
	})
}

// UpdateExternalID sets the "external_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateExternalID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateExternalID()
	})
}

// ClearExternalID clears the value of the "external_id" field.
func (u *OrderUpsertBulk) ClearExternalID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearExternalID()
	})
}

// SetCommentInternal sets the "comment_internal" field.
func (u *OrderUpsertBulk) SetCommentInternal(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCommentInternal(v)
	})
}

// UpdateCommentInternal sets the "comment_internal" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCommentInternal() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCommentInternal()
	})
}

// ClearCommentInternal clears the value of the "comment_internal" field.
func (u *OrderUpsertBulk) ClearCommentInternal() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCommentInternal()
	})
}

// SetCommentExternal sets the "comment_external" field.
func (u *OrderUpsertBulk) SetCommentExternal(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCommentExternal(v)
	})
}

// UpdateCommentExternal sets the "comment_external" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCommentExternal() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCommentExternal()
	})
}

// ClearCommentExternal clears the value of the "comment_external" field.
func (u *OrderUpsertBulk) ClearCommentExternal() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCommentExternal()
	})
}

// SetEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field.
func (u *OrderUpsertBulk) SetEmailSyncConfirmationAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetEmailSyncConfirmationAt(v)
	})
}

// UpdateEmailSyncConfirmationAt sets the "email_sync_confirmation_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateEmailSyncConfirmationAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEmailSyncConfirmationAt()
	})
}

// ClearEmailSyncConfirmationAt clears the value of the "email_sync_confirmation_at" field.
func (u *OrderUpsertBulk) ClearEmailSyncConfirmationAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearEmailSyncConfirmationAt()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v order.Status) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetNoteAttributes sets the "note_attributes" field.
func (u *OrderUpsertBulk) SetNoteAttributes(v fieldjson.NoteAttributes) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetNoteAttributes(v)
	})
}

// UpdateNoteAttributes sets the "note_attributes" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateNoteAttributes() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNoteAttributes()
	})
}

// ClearNoteAttributes clears the value of the "note_attributes" field.
func (u *OrderUpsertBulk) ClearNoteAttributes() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearNoteAttributes()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
