// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupUpdate is the builder for updating SeatGroup entities.
type SeatGroupUpdate struct {
	config
	hooks    []Hook
	mutation *SeatGroupMutation
}

// Where appends a list predicates to the SeatGroupUpdate builder.
func (sgu *SeatGroupUpdate) Where(ps ...predicate.SeatGroup) *SeatGroupUpdate {
	sgu.mutation.Where(ps...)
	return sgu
}

// SetTenantID sets the "tenant_id" field.
func (sgu *SeatGroupUpdate) SetTenantID(pu pulid.ID) *SeatGroupUpdate {
	sgu.mutation.SetTenantID(pu)
	return sgu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sgu *SeatGroupUpdate) SetNillableTenantID(pu *pulid.ID) *SeatGroupUpdate {
	if pu != nil {
		sgu.SetTenantID(*pu)
	}
	return sgu
}

// SetName sets the "name" field.
func (sgu *SeatGroupUpdate) SetName(s string) *SeatGroupUpdate {
	sgu.mutation.SetName(s)
	return sgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sgu *SeatGroupUpdate) SetNillableName(s *string) *SeatGroupUpdate {
	if s != nil {
		sgu.SetName(*s)
	}
	return sgu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sgu *SeatGroupUpdate) SetTenant(t *Tenant) *SeatGroupUpdate {
	return sgu.SetTenantID(t.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (sgu *SeatGroupUpdate) AddUserIDs(ids ...pulid.ID) *SeatGroupUpdate {
	sgu.mutation.AddUserIDs(ids...)
	return sgu
}

// AddUser adds the "user" edges to the User entity.
func (sgu *SeatGroupUpdate) AddUser(u ...*User) *SeatGroupUpdate {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sgu.AddUserIDs(ids...)
}

// AddAssignedAccessRightIDs adds the "assigned_access_right" edge to the AccessRight entity by IDs.
func (sgu *SeatGroupUpdate) AddAssignedAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdate {
	sgu.mutation.AddAssignedAccessRightIDs(ids...)
	return sgu
}

// AddAssignedAccessRight adds the "assigned_access_right" edges to the AccessRight entity.
func (sgu *SeatGroupUpdate) AddAssignedAccessRight(a ...*AccessRight) *SeatGroupUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sgu.AddAssignedAccessRightIDs(ids...)
}

// AddSeatGroupAccessRightIDs adds the "seat_group_access_right" edge to the SeatGroupAccessRight entity by IDs.
func (sgu *SeatGroupUpdate) AddSeatGroupAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdate {
	sgu.mutation.AddSeatGroupAccessRightIDs(ids...)
	return sgu
}

// AddSeatGroupAccessRight adds the "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (sgu *SeatGroupUpdate) AddSeatGroupAccessRight(s ...*SeatGroupAccessRight) *SeatGroupUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgu.AddSeatGroupAccessRightIDs(ids...)
}

// Mutation returns the SeatGroupMutation object of the builder.
func (sgu *SeatGroupUpdate) Mutation() *SeatGroupMutation {
	return sgu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sgu *SeatGroupUpdate) ClearTenant() *SeatGroupUpdate {
	sgu.mutation.ClearTenant()
	return sgu
}

// ClearUser clears all "user" edges to the User entity.
func (sgu *SeatGroupUpdate) ClearUser() *SeatGroupUpdate {
	sgu.mutation.ClearUser()
	return sgu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (sgu *SeatGroupUpdate) RemoveUserIDs(ids ...pulid.ID) *SeatGroupUpdate {
	sgu.mutation.RemoveUserIDs(ids...)
	return sgu
}

// RemoveUser removes "user" edges to User entities.
func (sgu *SeatGroupUpdate) RemoveUser(u ...*User) *SeatGroupUpdate {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sgu.RemoveUserIDs(ids...)
}

// ClearAssignedAccessRight clears all "assigned_access_right" edges to the AccessRight entity.
func (sgu *SeatGroupUpdate) ClearAssignedAccessRight() *SeatGroupUpdate {
	sgu.mutation.ClearAssignedAccessRight()
	return sgu
}

// RemoveAssignedAccessRightIDs removes the "assigned_access_right" edge to AccessRight entities by IDs.
func (sgu *SeatGroupUpdate) RemoveAssignedAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdate {
	sgu.mutation.RemoveAssignedAccessRightIDs(ids...)
	return sgu
}

// RemoveAssignedAccessRight removes "assigned_access_right" edges to AccessRight entities.
func (sgu *SeatGroupUpdate) RemoveAssignedAccessRight(a ...*AccessRight) *SeatGroupUpdate {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sgu.RemoveAssignedAccessRightIDs(ids...)
}

// ClearSeatGroupAccessRight clears all "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (sgu *SeatGroupUpdate) ClearSeatGroupAccessRight() *SeatGroupUpdate {
	sgu.mutation.ClearSeatGroupAccessRight()
	return sgu
}

// RemoveSeatGroupAccessRightIDs removes the "seat_group_access_right" edge to SeatGroupAccessRight entities by IDs.
func (sgu *SeatGroupUpdate) RemoveSeatGroupAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdate {
	sgu.mutation.RemoveSeatGroupAccessRightIDs(ids...)
	return sgu
}

// RemoveSeatGroupAccessRight removes "seat_group_access_right" edges to SeatGroupAccessRight entities.
func (sgu *SeatGroupUpdate) RemoveSeatGroupAccessRight(s ...*SeatGroupAccessRight) *SeatGroupUpdate {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sgu.RemoveSeatGroupAccessRightIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *SeatGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sgu.sqlSave, sgu.mutation, sgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *SeatGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *SeatGroupUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *SeatGroupUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgu *SeatGroupUpdate) check() error {
	if sgu.mutation.TenantCleared() && len(sgu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroup.tenant"`)
	}
	return nil
}

func (sgu *SeatGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(seatgroup.Table, seatgroup.Columns, sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString))
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.Name(); ok {
		_spec.SetField(seatgroup.FieldName, field.TypeString, value)
	}
	if sgu.mutation.CreatedAtCleared() {
		_spec.ClearField(seatgroup.FieldCreatedAt, field.TypeTime)
	}
	if sgu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroup.TenantTable,
			Columns: []string{seatgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroup.TenantTable,
			Columns: []string{seatgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.RemovedUserIDs(); len(nodes) > 0 && !sgu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgu.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		createE := &SeatGroupAccessRightCreate{config: sgu.config, mutation: newSeatGroupAccessRightMutation(sgu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.RemovedAssignedAccessRightIDs(); len(nodes) > 0 && !sgu.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: sgu.config, mutation: newSeatGroupAccessRightMutation(sgu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.AssignedAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: sgu.config, mutation: newSeatGroupAccessRightMutation(sgu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgu.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.RemovedSeatGroupAccessRightIDs(); len(nodes) > 0 && !sgu.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.SeatGroupAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seatgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sgu.mutation.done = true
	return n, nil
}

// SeatGroupUpdateOne is the builder for updating a single SeatGroup entity.
type SeatGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeatGroupMutation
}

// SetTenantID sets the "tenant_id" field.
func (sguo *SeatGroupUpdateOne) SetTenantID(pu pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.SetTenantID(pu)
	return sguo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (sguo *SeatGroupUpdateOne) SetNillableTenantID(pu *pulid.ID) *SeatGroupUpdateOne {
	if pu != nil {
		sguo.SetTenantID(*pu)
	}
	return sguo
}

// SetName sets the "name" field.
func (sguo *SeatGroupUpdateOne) SetName(s string) *SeatGroupUpdateOne {
	sguo.mutation.SetName(s)
	return sguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sguo *SeatGroupUpdateOne) SetNillableName(s *string) *SeatGroupUpdateOne {
	if s != nil {
		sguo.SetName(*s)
	}
	return sguo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (sguo *SeatGroupUpdateOne) SetTenant(t *Tenant) *SeatGroupUpdateOne {
	return sguo.SetTenantID(t.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (sguo *SeatGroupUpdateOne) AddUserIDs(ids ...pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.AddUserIDs(ids...)
	return sguo
}

// AddUser adds the "user" edges to the User entity.
func (sguo *SeatGroupUpdateOne) AddUser(u ...*User) *SeatGroupUpdateOne {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sguo.AddUserIDs(ids...)
}

// AddAssignedAccessRightIDs adds the "assigned_access_right" edge to the AccessRight entity by IDs.
func (sguo *SeatGroupUpdateOne) AddAssignedAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.AddAssignedAccessRightIDs(ids...)
	return sguo
}

// AddAssignedAccessRight adds the "assigned_access_right" edges to the AccessRight entity.
func (sguo *SeatGroupUpdateOne) AddAssignedAccessRight(a ...*AccessRight) *SeatGroupUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sguo.AddAssignedAccessRightIDs(ids...)
}

// AddSeatGroupAccessRightIDs adds the "seat_group_access_right" edge to the SeatGroupAccessRight entity by IDs.
func (sguo *SeatGroupUpdateOne) AddSeatGroupAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.AddSeatGroupAccessRightIDs(ids...)
	return sguo
}

// AddSeatGroupAccessRight adds the "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (sguo *SeatGroupUpdateOne) AddSeatGroupAccessRight(s ...*SeatGroupAccessRight) *SeatGroupUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sguo.AddSeatGroupAccessRightIDs(ids...)
}

// Mutation returns the SeatGroupMutation object of the builder.
func (sguo *SeatGroupUpdateOne) Mutation() *SeatGroupMutation {
	return sguo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (sguo *SeatGroupUpdateOne) ClearTenant() *SeatGroupUpdateOne {
	sguo.mutation.ClearTenant()
	return sguo
}

// ClearUser clears all "user" edges to the User entity.
func (sguo *SeatGroupUpdateOne) ClearUser() *SeatGroupUpdateOne {
	sguo.mutation.ClearUser()
	return sguo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (sguo *SeatGroupUpdateOne) RemoveUserIDs(ids ...pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.RemoveUserIDs(ids...)
	return sguo
}

// RemoveUser removes "user" edges to User entities.
func (sguo *SeatGroupUpdateOne) RemoveUser(u ...*User) *SeatGroupUpdateOne {
	ids := make([]pulid.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sguo.RemoveUserIDs(ids...)
}

// ClearAssignedAccessRight clears all "assigned_access_right" edges to the AccessRight entity.
func (sguo *SeatGroupUpdateOne) ClearAssignedAccessRight() *SeatGroupUpdateOne {
	sguo.mutation.ClearAssignedAccessRight()
	return sguo
}

// RemoveAssignedAccessRightIDs removes the "assigned_access_right" edge to AccessRight entities by IDs.
func (sguo *SeatGroupUpdateOne) RemoveAssignedAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.RemoveAssignedAccessRightIDs(ids...)
	return sguo
}

// RemoveAssignedAccessRight removes "assigned_access_right" edges to AccessRight entities.
func (sguo *SeatGroupUpdateOne) RemoveAssignedAccessRight(a ...*AccessRight) *SeatGroupUpdateOne {
	ids := make([]pulid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sguo.RemoveAssignedAccessRightIDs(ids...)
}

// ClearSeatGroupAccessRight clears all "seat_group_access_right" edges to the SeatGroupAccessRight entity.
func (sguo *SeatGroupUpdateOne) ClearSeatGroupAccessRight() *SeatGroupUpdateOne {
	sguo.mutation.ClearSeatGroupAccessRight()
	return sguo
}

// RemoveSeatGroupAccessRightIDs removes the "seat_group_access_right" edge to SeatGroupAccessRight entities by IDs.
func (sguo *SeatGroupUpdateOne) RemoveSeatGroupAccessRightIDs(ids ...pulid.ID) *SeatGroupUpdateOne {
	sguo.mutation.RemoveSeatGroupAccessRightIDs(ids...)
	return sguo
}

// RemoveSeatGroupAccessRight removes "seat_group_access_right" edges to SeatGroupAccessRight entities.
func (sguo *SeatGroupUpdateOne) RemoveSeatGroupAccessRight(s ...*SeatGroupAccessRight) *SeatGroupUpdateOne {
	ids := make([]pulid.ID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sguo.RemoveSeatGroupAccessRightIDs(ids...)
}

// Where appends a list predicates to the SeatGroupUpdate builder.
func (sguo *SeatGroupUpdateOne) Where(ps ...predicate.SeatGroup) *SeatGroupUpdateOne {
	sguo.mutation.Where(ps...)
	return sguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *SeatGroupUpdateOne) Select(field string, fields ...string) *SeatGroupUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated SeatGroup entity.
func (sguo *SeatGroupUpdateOne) Save(ctx context.Context) (*SeatGroup, error) {
	return withHooks(ctx, sguo.sqlSave, sguo.mutation, sguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *SeatGroupUpdateOne) SaveX(ctx context.Context) *SeatGroup {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *SeatGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *SeatGroupUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sguo *SeatGroupUpdateOne) check() error {
	if sguo.mutation.TenantCleared() && len(sguo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SeatGroup.tenant"`)
	}
	return nil
}

func (sguo *SeatGroupUpdateOne) sqlSave(ctx context.Context) (_node *SeatGroup, err error) {
	if err := sguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(seatgroup.Table, seatgroup.Columns, sqlgraph.NewFieldSpec(seatgroup.FieldID, field.TypeString))
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SeatGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, seatgroup.FieldID)
		for _, f := range fields {
			if !seatgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != seatgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.Name(); ok {
		_spec.SetField(seatgroup.FieldName, field.TypeString, value)
	}
	if sguo.mutation.CreatedAtCleared() {
		_spec.ClearField(seatgroup.FieldCreatedAt, field.TypeTime)
	}
	if sguo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroup.TenantTable,
			Columns: []string{seatgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroup.TenantTable,
			Columns: []string{seatgroup.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sguo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.RemovedUserIDs(); len(nodes) > 0 && !sguo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sguo.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		createE := &SeatGroupAccessRightCreate{config: sguo.config, mutation: newSeatGroupAccessRightMutation(sguo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.RemovedAssignedAccessRightIDs(); len(nodes) > 0 && !sguo.mutation.AssignedAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: sguo.config, mutation: newSeatGroupAccessRightMutation(sguo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.AssignedAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SeatGroupAccessRightCreate{config: sguo.config, mutation: newSeatGroupAccessRightMutation(sguo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sguo.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.RemovedSeatGroupAccessRightIDs(); len(nodes) > 0 && !sguo.mutation.SeatGroupAccessRightCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.SeatGroupAccessRightIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SeatGroup{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{seatgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sguo.mutation.done = true
	return _node, nil
}
