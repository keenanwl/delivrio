// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/language"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Language is the model entity for the Language schema.
type Language struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// InternalID holds the value of the "internal_id" field.
	InternalID language.InternalID `json:"internal_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LanguageQuery when eager-loading is set.
	Edges        LanguageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LanguageEdges holds the relations/edges for other nodes in the graph.
type LanguageEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Language holds the value of the language edge.
	Language []*Tenant `json:"language,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedUsers    map[string][]*User
	namedLanguage map[string][]*Tenant
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e LanguageEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// LanguageOrErr returns the Language value or an error if the edge
// was not loaded in eager-loading.
func (e LanguageEdges) LanguageOrErr() ([]*Tenant, error) {
	if e.loadedTypes[1] {
		return e.Language, nil
	}
	return nil, &NotLoadedError{edge: "language"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Language) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case language.FieldID:
			values[i] = new(pulid.ID)
		case language.FieldLabel, language.FieldInternalID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Language fields.
func (l *Language) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case language.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case language.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				l.Label = value.String
			}
		case language.FieldInternalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_id", values[i])
			} else if value.Valid {
				l.InternalID = language.InternalID(value.String)
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Language.
// This includes values selected through modifiers, order, etc.
func (l *Language) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Language entity.
func (l *Language) QueryUsers() *UserQuery {
	return NewLanguageClient(l.config).QueryUsers(l)
}

// QueryLanguage queries the "language" edge of the Language entity.
func (l *Language) QueryLanguage() *TenantQuery {
	return NewLanguageClient(l.config).QueryLanguage(l)
}

// Update returns a builder for updating this Language.
// Note that you need to call Language.Unwrap() before calling this method if this Language
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Language) Update() *LanguageUpdateOne {
	return NewLanguageClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Language entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Language) Unwrap() *Language {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Language is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Language) String() string {
	var builder strings.Builder
	builder.WriteString("Language(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("label=")
	builder.WriteString(l.Label)
	builder.WriteString(", ")
	builder.WriteString("internal_id=")
	builder.WriteString(fmt.Sprintf("%v", l.InternalID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Language) NamedUsers(name string) ([]*User, error) {
	if l.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Language) appendNamedUsers(name string, edges ...*User) {
	if l.Edges.namedUsers == nil {
		l.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		l.Edges.namedUsers[name] = []*User{}
	} else {
		l.Edges.namedUsers[name] = append(l.Edges.namedUsers[name], edges...)
	}
}

// NamedLanguage returns the Language named value or an error if the edge was not
// loaded in eager-loading with this name.
func (l *Language) NamedLanguage(name string) ([]*Tenant, error) {
	if l.Edges.namedLanguage == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := l.Edges.namedLanguage[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (l *Language) appendNamedLanguage(name string, edges ...*Tenant) {
	if l.Edges.namedLanguage == nil {
		l.Edges.namedLanguage = make(map[string][]*Tenant)
	}
	if len(edges) == 0 {
		l.Edges.namedLanguage[name] = []*Tenant{}
	} else {
		l.Edges.namedLanguage[name] = append(l.Edges.namedLanguage[name], edges...)
	}
}

// Languages is a parsable slice of Language.
type Languages []*Language
