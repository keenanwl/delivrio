// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Carrier is the model entity for the Carrier schema.
type Carrier struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SyncCancelation holds the value of the "sync_cancelation" field.
	SyncCancelation bool `json:"sync_cancelation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierQuery when eager-loading is set.
	Edges                 CarrierEdges `json:"edges"`
	carrier_carrier_brand *pulid.ID
	selectValues          sql.SelectValues
}

// CarrierEdges holds the relations/edges for other nodes in the graph.
type CarrierEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// CarrierBrand holds the value of the carrier_brand edge.
	CarrierBrand *CarrierBrand `json:"carrier_brand,omitempty"`
	// CarrierDAO holds the value of the carrier_dao edge.
	CarrierDAO *CarrierDAO `json:"carrier_dao,omitempty"`
	// CarrierDF holds the value of the carrier_df edge.
	CarrierDF *CarrierDF `json:"carrier_df,omitempty"`
	// CarrierDSV holds the value of the carrier_dsv edge.
	CarrierDSV *CarrierDSV `json:"carrier_dsv,omitempty"`
	// CarrierEasyPost holds the value of the carrier_easy_post edge.
	CarrierEasyPost *CarrierEasyPost `json:"carrier_easy_post,omitempty"`
	// CarrierGLS holds the value of the carrier_gls edge.
	CarrierGLS *CarrierGLS `json:"carrier_gls,omitempty"`
	// CarrierPostNord holds the value of the carrier_post_nord edge.
	CarrierPostNord *CarrierPostNord `json:"carrier_post_nord,omitempty"`
	// CarrierUSPS holds the value of the carrier_usps edge.
	CarrierUSPS *CarrierUSPS `json:"carrier_usps,omitempty"`
	// CarrierBring holds the value of the carrier_bring edge.
	CarrierBring *CarrierBring `json:"carrier_bring,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption []*DeliveryOption `json:"delivery_option,omitempty"`
	// Shipment holds the value of the shipment edge.
	Shipment []*Shipment `json:"shipment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
	// totalCount holds the count of the edges above.
	totalCount [12]map[string]int

	namedDeliveryOption map[string][]*DeliveryOption
	namedShipment       map[string][]*Shipment
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarrierBrandOrErr returns the CarrierBrand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierBrandOrErr() (*CarrierBrand, error) {
	if e.CarrierBrand != nil {
		return e.CarrierBrand, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: carrierbrand.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_brand"}
}

// CarrierDAOOrErr returns the CarrierDAO value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierDAOOrErr() (*CarrierDAO, error) {
	if e.CarrierDAO != nil {
		return e.CarrierDAO, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: carrierdao.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_dao"}
}

// CarrierDFOrErr returns the CarrierDF value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierDFOrErr() (*CarrierDF, error) {
	if e.CarrierDF != nil {
		return e.CarrierDF, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: carrierdf.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_df"}
}

// CarrierDSVOrErr returns the CarrierDSV value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierDSVOrErr() (*CarrierDSV, error) {
	if e.CarrierDSV != nil {
		return e.CarrierDSV, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: carrierdsv.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_dsv"}
}

// CarrierEasyPostOrErr returns the CarrierEasyPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierEasyPostOrErr() (*CarrierEasyPost, error) {
	if e.CarrierEasyPost != nil {
		return e.CarrierEasyPost, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: carriereasypost.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_easy_post"}
}

// CarrierGLSOrErr returns the CarrierGLS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierGLSOrErr() (*CarrierGLS, error) {
	if e.CarrierGLS != nil {
		return e.CarrierGLS, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: carriergls.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_gls"}
}

// CarrierPostNordOrErr returns the CarrierPostNord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierPostNordOrErr() (*CarrierPostNord, error) {
	if e.CarrierPostNord != nil {
		return e.CarrierPostNord, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: carrierpostnord.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_post_nord"}
}

// CarrierUSPSOrErr returns the CarrierUSPS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierUSPSOrErr() (*CarrierUSPS, error) {
	if e.CarrierUSPS != nil {
		return e.CarrierUSPS, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: carrierusps.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_usps"}
}

// CarrierBringOrErr returns the CarrierBring value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarrierEdges) CarrierBringOrErr() (*CarrierBring, error) {
	if e.CarrierBring != nil {
		return e.CarrierBring, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: carrierbring.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_bring"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierEdges) DeliveryOptionOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[10] {
		return e.DeliveryOption, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// ShipmentOrErr returns the Shipment value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierEdges) ShipmentOrErr() ([]*Shipment, error) {
	if e.loadedTypes[11] {
		return e.Shipment, nil
	}
	return nil, &NotLoadedError{edge: "shipment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Carrier) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case carrier.FieldID, carrier.FieldTenantID:
			values[i] = new(pulid.ID)
		case carrier.FieldSyncCancelation:
			values[i] = new(sql.NullBool)
		case carrier.FieldName:
			values[i] = new(sql.NullString)
		case carrier.ForeignKeys[0]: // carrier_carrier_brand
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Carrier fields.
func (c *Carrier) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case carrier.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case carrier.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				c.TenantID = *value
			}
		case carrier.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case carrier.FieldSyncCancelation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sync_cancelation", values[i])
			} else if value.Valid {
				c.SyncCancelation = value.Bool
			}
		case carrier.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field carrier_carrier_brand", values[i])
			} else if value.Valid {
				c.carrier_carrier_brand = new(pulid.ID)
				*c.carrier_carrier_brand = *value.S.(*pulid.ID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Carrier.
// This includes values selected through modifiers, order, etc.
func (c *Carrier) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Carrier entity.
func (c *Carrier) QueryTenant() *TenantQuery {
	return NewCarrierClient(c.config).QueryTenant(c)
}

// QueryCarrierBrand queries the "carrier_brand" edge of the Carrier entity.
func (c *Carrier) QueryCarrierBrand() *CarrierBrandQuery {
	return NewCarrierClient(c.config).QueryCarrierBrand(c)
}

// QueryCarrierDAO queries the "carrier_dao" edge of the Carrier entity.
func (c *Carrier) QueryCarrierDAO() *CarrierDAOQuery {
	return NewCarrierClient(c.config).QueryCarrierDAO(c)
}

// QueryCarrierDF queries the "carrier_df" edge of the Carrier entity.
func (c *Carrier) QueryCarrierDF() *CarrierDFQuery {
	return NewCarrierClient(c.config).QueryCarrierDF(c)
}

// QueryCarrierDSV queries the "carrier_dsv" edge of the Carrier entity.
func (c *Carrier) QueryCarrierDSV() *CarrierDSVQuery {
	return NewCarrierClient(c.config).QueryCarrierDSV(c)
}

// QueryCarrierEasyPost queries the "carrier_easy_post" edge of the Carrier entity.
func (c *Carrier) QueryCarrierEasyPost() *CarrierEasyPostQuery {
	return NewCarrierClient(c.config).QueryCarrierEasyPost(c)
}

// QueryCarrierGLS queries the "carrier_gls" edge of the Carrier entity.
func (c *Carrier) QueryCarrierGLS() *CarrierGLSQuery {
	return NewCarrierClient(c.config).QueryCarrierGLS(c)
}

// QueryCarrierPostNord queries the "carrier_post_nord" edge of the Carrier entity.
func (c *Carrier) QueryCarrierPostNord() *CarrierPostNordQuery {
	return NewCarrierClient(c.config).QueryCarrierPostNord(c)
}

// QueryCarrierUSPS queries the "carrier_usps" edge of the Carrier entity.
func (c *Carrier) QueryCarrierUSPS() *CarrierUSPSQuery {
	return NewCarrierClient(c.config).QueryCarrierUSPS(c)
}

// QueryCarrierBring queries the "carrier_bring" edge of the Carrier entity.
func (c *Carrier) QueryCarrierBring() *CarrierBringQuery {
	return NewCarrierClient(c.config).QueryCarrierBring(c)
}

// QueryDeliveryOption queries the "delivery_option" edge of the Carrier entity.
func (c *Carrier) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewCarrierClient(c.config).QueryDeliveryOption(c)
}

// QueryShipment queries the "shipment" edge of the Carrier entity.
func (c *Carrier) QueryShipment() *ShipmentQuery {
	return NewCarrierClient(c.config).QueryShipment(c)
}

// Update returns a builder for updating this Carrier.
// Note that you need to call Carrier.Unwrap() before calling this method if this Carrier
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Carrier) Update() *CarrierUpdateOne {
	return NewCarrierClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Carrier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Carrier) Unwrap() *Carrier {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Carrier is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Carrier) String() string {
	var builder strings.Builder
	builder.WriteString("Carrier(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("sync_cancelation=")
	builder.WriteString(fmt.Sprintf("%v", c.SyncCancelation))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDeliveryOption returns the DeliveryOption named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Carrier) NamedDeliveryOption(name string) ([]*DeliveryOption, error) {
	if c.Edges.namedDeliveryOption == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDeliveryOption[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Carrier) appendNamedDeliveryOption(name string, edges ...*DeliveryOption) {
	if c.Edges.namedDeliveryOption == nil {
		c.Edges.namedDeliveryOption = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		c.Edges.namedDeliveryOption[name] = []*DeliveryOption{}
	} else {
		c.Edges.namedDeliveryOption[name] = append(c.Edges.namedDeliveryOption[name], edges...)
	}
}

// NamedShipment returns the Shipment named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Carrier) NamedShipment(name string) ([]*Shipment, error) {
	if c.Edges.namedShipment == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedShipment[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Carrier) appendNamedShipment(name string, edges ...*Shipment) {
	if c.Edges.namedShipment == nil {
		c.Edges.namedShipment = make(map[string][]*Shipment)
	}
	if len(edges) == 0 {
		c.Edges.namedShipment[name] = []*Shipment{}
	} else {
		c.Edges.namedShipment[name] = append(c.Edges.namedShipment[name], edges...)
	}
}

// Carriers is a parsable slice of Carrier.
type Carriers []*Carrier
