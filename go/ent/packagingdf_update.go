// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PackagingDFUpdate is the builder for updating PackagingDF entities.
type PackagingDFUpdate struct {
	config
	hooks    []Hook
	mutation *PackagingDFMutation
}

// Where appends a list predicates to the PackagingDFUpdate builder.
func (pdu *PackagingDFUpdate) Where(ps ...predicate.PackagingDF) *PackagingDFUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetTenantID sets the "tenant_id" field.
func (pdu *PackagingDFUpdate) SetTenantID(pu pulid.ID) *PackagingDFUpdate {
	pdu.mutation.SetTenantID(pu)
	return pdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pdu *PackagingDFUpdate) SetNillableTenantID(pu *pulid.ID) *PackagingDFUpdate {
	if pu != nil {
		pdu.SetTenantID(*pu)
	}
	return pdu
}

// SetAPIType sets the "api_type" field.
func (pdu *PackagingDFUpdate) SetAPIType(pt packagingdf.APIType) *PackagingDFUpdate {
	pdu.mutation.SetAPIType(pt)
	return pdu
}

// SetNillableAPIType sets the "api_type" field if the given value is not nil.
func (pdu *PackagingDFUpdate) SetNillableAPIType(pt *packagingdf.APIType) *PackagingDFUpdate {
	if pt != nil {
		pdu.SetAPIType(*pt)
	}
	return pdu
}

// SetMaxWeight sets the "max_weight" field.
func (pdu *PackagingDFUpdate) SetMaxWeight(f float64) *PackagingDFUpdate {
	pdu.mutation.ResetMaxWeight()
	pdu.mutation.SetMaxWeight(f)
	return pdu
}

// SetNillableMaxWeight sets the "max_weight" field if the given value is not nil.
func (pdu *PackagingDFUpdate) SetNillableMaxWeight(f *float64) *PackagingDFUpdate {
	if f != nil {
		pdu.SetMaxWeight(*f)
	}
	return pdu
}

// AddMaxWeight adds f to the "max_weight" field.
func (pdu *PackagingDFUpdate) AddMaxWeight(f float64) *PackagingDFUpdate {
	pdu.mutation.AddMaxWeight(f)
	return pdu
}

// ClearMaxWeight clears the value of the "max_weight" field.
func (pdu *PackagingDFUpdate) ClearMaxWeight() *PackagingDFUpdate {
	pdu.mutation.ClearMaxWeight()
	return pdu
}

// SetMinWeight sets the "min_weight" field.
func (pdu *PackagingDFUpdate) SetMinWeight(f float64) *PackagingDFUpdate {
	pdu.mutation.ResetMinWeight()
	pdu.mutation.SetMinWeight(f)
	return pdu
}

// SetNillableMinWeight sets the "min_weight" field if the given value is not nil.
func (pdu *PackagingDFUpdate) SetNillableMinWeight(f *float64) *PackagingDFUpdate {
	if f != nil {
		pdu.SetMinWeight(*f)
	}
	return pdu
}

// AddMinWeight adds f to the "min_weight" field.
func (pdu *PackagingDFUpdate) AddMinWeight(f float64) *PackagingDFUpdate {
	pdu.mutation.AddMinWeight(f)
	return pdu
}

// ClearMinWeight clears the value of the "min_weight" field.
func (pdu *PackagingDFUpdate) ClearMinWeight() *PackagingDFUpdate {
	pdu.mutation.ClearMinWeight()
	return pdu
}

// SetStackable sets the "stackable" field.
func (pdu *PackagingDFUpdate) SetStackable(b bool) *PackagingDFUpdate {
	pdu.mutation.SetStackable(b)
	return pdu
}

// SetNillableStackable sets the "stackable" field if the given value is not nil.
func (pdu *PackagingDFUpdate) SetNillableStackable(b *bool) *PackagingDFUpdate {
	if b != nil {
		pdu.SetStackable(*b)
	}
	return pdu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pdu *PackagingDFUpdate) SetTenant(t *Tenant) *PackagingDFUpdate {
	return pdu.SetTenantID(t.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (pdu *PackagingDFUpdate) SetPackagingID(id pulid.ID) *PackagingDFUpdate {
	pdu.mutation.SetPackagingID(id)
	return pdu
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (pdu *PackagingDFUpdate) SetPackaging(p *Packaging) *PackagingDFUpdate {
	return pdu.SetPackagingID(p.ID)
}

// Mutation returns the PackagingDFMutation object of the builder.
func (pdu *PackagingDFUpdate) Mutation() *PackagingDFMutation {
	return pdu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pdu *PackagingDFUpdate) ClearTenant() *PackagingDFUpdate {
	pdu.mutation.ClearTenant()
	return pdu
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (pdu *PackagingDFUpdate) ClearPackaging() *PackagingDFUpdate {
	pdu.mutation.ClearPackaging()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PackagingDFUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PackagingDFUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PackagingDFUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PackagingDFUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *PackagingDFUpdate) check() error {
	if v, ok := pdu.mutation.APIType(); ok {
		if err := packagingdf.APITypeValidator(v); err != nil {
			return &ValidationError{Name: "api_type", err: fmt.Errorf(`ent: validator failed for field "PackagingDF.api_type": %w`, err)}
		}
	}
	if pdu.mutation.TenantCleared() && len(pdu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingDF.tenant"`)
	}
	if pdu.mutation.PackagingCleared() && len(pdu.mutation.PackagingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingDF.packaging"`)
	}
	return nil
}

func (pdu *PackagingDFUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagingdf.Table, packagingdf.Columns, sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.APIType(); ok {
		_spec.SetField(packagingdf.FieldAPIType, field.TypeEnum, value)
	}
	if value, ok := pdu.mutation.MaxWeight(); ok {
		_spec.SetField(packagingdf.FieldMaxWeight, field.TypeFloat64, value)
	}
	if value, ok := pdu.mutation.AddedMaxWeight(); ok {
		_spec.AddField(packagingdf.FieldMaxWeight, field.TypeFloat64, value)
	}
	if pdu.mutation.MaxWeightCleared() {
		_spec.ClearField(packagingdf.FieldMaxWeight, field.TypeFloat64)
	}
	if value, ok := pdu.mutation.MinWeight(); ok {
		_spec.SetField(packagingdf.FieldMinWeight, field.TypeFloat64, value)
	}
	if value, ok := pdu.mutation.AddedMinWeight(); ok {
		_spec.AddField(packagingdf.FieldMinWeight, field.TypeFloat64, value)
	}
	if pdu.mutation.MinWeightCleared() {
		_spec.ClearField(packagingdf.FieldMinWeight, field.TypeFloat64)
	}
	if value, ok := pdu.mutation.Stackable(); ok {
		_spec.SetField(packagingdf.FieldStackable, field.TypeBool, value)
	}
	if pdu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingdf.TenantTable,
			Columns: []string{packagingdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingdf.TenantTable,
			Columns: []string{packagingdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pdu.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingdf.PackagingTable,
			Columns: []string{packagingdf.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingdf.PackagingTable,
			Columns: []string{packagingdf.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagingdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// PackagingDFUpdateOne is the builder for updating a single PackagingDF entity.
type PackagingDFUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PackagingDFMutation
}

// SetTenantID sets the "tenant_id" field.
func (pduo *PackagingDFUpdateOne) SetTenantID(pu pulid.ID) *PackagingDFUpdateOne {
	pduo.mutation.SetTenantID(pu)
	return pduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pduo *PackagingDFUpdateOne) SetNillableTenantID(pu *pulid.ID) *PackagingDFUpdateOne {
	if pu != nil {
		pduo.SetTenantID(*pu)
	}
	return pduo
}

// SetAPIType sets the "api_type" field.
func (pduo *PackagingDFUpdateOne) SetAPIType(pt packagingdf.APIType) *PackagingDFUpdateOne {
	pduo.mutation.SetAPIType(pt)
	return pduo
}

// SetNillableAPIType sets the "api_type" field if the given value is not nil.
func (pduo *PackagingDFUpdateOne) SetNillableAPIType(pt *packagingdf.APIType) *PackagingDFUpdateOne {
	if pt != nil {
		pduo.SetAPIType(*pt)
	}
	return pduo
}

// SetMaxWeight sets the "max_weight" field.
func (pduo *PackagingDFUpdateOne) SetMaxWeight(f float64) *PackagingDFUpdateOne {
	pduo.mutation.ResetMaxWeight()
	pduo.mutation.SetMaxWeight(f)
	return pduo
}

// SetNillableMaxWeight sets the "max_weight" field if the given value is not nil.
func (pduo *PackagingDFUpdateOne) SetNillableMaxWeight(f *float64) *PackagingDFUpdateOne {
	if f != nil {
		pduo.SetMaxWeight(*f)
	}
	return pduo
}

// AddMaxWeight adds f to the "max_weight" field.
func (pduo *PackagingDFUpdateOne) AddMaxWeight(f float64) *PackagingDFUpdateOne {
	pduo.mutation.AddMaxWeight(f)
	return pduo
}

// ClearMaxWeight clears the value of the "max_weight" field.
func (pduo *PackagingDFUpdateOne) ClearMaxWeight() *PackagingDFUpdateOne {
	pduo.mutation.ClearMaxWeight()
	return pduo
}

// SetMinWeight sets the "min_weight" field.
func (pduo *PackagingDFUpdateOne) SetMinWeight(f float64) *PackagingDFUpdateOne {
	pduo.mutation.ResetMinWeight()
	pduo.mutation.SetMinWeight(f)
	return pduo
}

// SetNillableMinWeight sets the "min_weight" field if the given value is not nil.
func (pduo *PackagingDFUpdateOne) SetNillableMinWeight(f *float64) *PackagingDFUpdateOne {
	if f != nil {
		pduo.SetMinWeight(*f)
	}
	return pduo
}

// AddMinWeight adds f to the "min_weight" field.
func (pduo *PackagingDFUpdateOne) AddMinWeight(f float64) *PackagingDFUpdateOne {
	pduo.mutation.AddMinWeight(f)
	return pduo
}

// ClearMinWeight clears the value of the "min_weight" field.
func (pduo *PackagingDFUpdateOne) ClearMinWeight() *PackagingDFUpdateOne {
	pduo.mutation.ClearMinWeight()
	return pduo
}

// SetStackable sets the "stackable" field.
func (pduo *PackagingDFUpdateOne) SetStackable(b bool) *PackagingDFUpdateOne {
	pduo.mutation.SetStackable(b)
	return pduo
}

// SetNillableStackable sets the "stackable" field if the given value is not nil.
func (pduo *PackagingDFUpdateOne) SetNillableStackable(b *bool) *PackagingDFUpdateOne {
	if b != nil {
		pduo.SetStackable(*b)
	}
	return pduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (pduo *PackagingDFUpdateOne) SetTenant(t *Tenant) *PackagingDFUpdateOne {
	return pduo.SetTenantID(t.ID)
}

// SetPackagingID sets the "packaging" edge to the Packaging entity by ID.
func (pduo *PackagingDFUpdateOne) SetPackagingID(id pulid.ID) *PackagingDFUpdateOne {
	pduo.mutation.SetPackagingID(id)
	return pduo
}

// SetPackaging sets the "packaging" edge to the Packaging entity.
func (pduo *PackagingDFUpdateOne) SetPackaging(p *Packaging) *PackagingDFUpdateOne {
	return pduo.SetPackagingID(p.ID)
}

// Mutation returns the PackagingDFMutation object of the builder.
func (pduo *PackagingDFUpdateOne) Mutation() *PackagingDFMutation {
	return pduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (pduo *PackagingDFUpdateOne) ClearTenant() *PackagingDFUpdateOne {
	pduo.mutation.ClearTenant()
	return pduo
}

// ClearPackaging clears the "packaging" edge to the Packaging entity.
func (pduo *PackagingDFUpdateOne) ClearPackaging() *PackagingDFUpdateOne {
	pduo.mutation.ClearPackaging()
	return pduo
}

// Where appends a list predicates to the PackagingDFUpdate builder.
func (pduo *PackagingDFUpdateOne) Where(ps ...predicate.PackagingDF) *PackagingDFUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *PackagingDFUpdateOne) Select(field string, fields ...string) *PackagingDFUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated PackagingDF entity.
func (pduo *PackagingDFUpdateOne) Save(ctx context.Context) (*PackagingDF, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PackagingDFUpdateOne) SaveX(ctx context.Context) *PackagingDF {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PackagingDFUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PackagingDFUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *PackagingDFUpdateOne) check() error {
	if v, ok := pduo.mutation.APIType(); ok {
		if err := packagingdf.APITypeValidator(v); err != nil {
			return &ValidationError{Name: "api_type", err: fmt.Errorf(`ent: validator failed for field "PackagingDF.api_type": %w`, err)}
		}
	}
	if pduo.mutation.TenantCleared() && len(pduo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingDF.tenant"`)
	}
	if pduo.mutation.PackagingCleared() && len(pduo.mutation.PackagingIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PackagingDF.packaging"`)
	}
	return nil
}

func (pduo *PackagingDFUpdateOne) sqlSave(ctx context.Context) (_node *PackagingDF, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(packagingdf.Table, packagingdf.Columns, sqlgraph.NewFieldSpec(packagingdf.FieldID, field.TypeString))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PackagingDF.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, packagingdf.FieldID)
		for _, f := range fields {
			if !packagingdf.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != packagingdf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.APIType(); ok {
		_spec.SetField(packagingdf.FieldAPIType, field.TypeEnum, value)
	}
	if value, ok := pduo.mutation.MaxWeight(); ok {
		_spec.SetField(packagingdf.FieldMaxWeight, field.TypeFloat64, value)
	}
	if value, ok := pduo.mutation.AddedMaxWeight(); ok {
		_spec.AddField(packagingdf.FieldMaxWeight, field.TypeFloat64, value)
	}
	if pduo.mutation.MaxWeightCleared() {
		_spec.ClearField(packagingdf.FieldMaxWeight, field.TypeFloat64)
	}
	if value, ok := pduo.mutation.MinWeight(); ok {
		_spec.SetField(packagingdf.FieldMinWeight, field.TypeFloat64, value)
	}
	if value, ok := pduo.mutation.AddedMinWeight(); ok {
		_spec.AddField(packagingdf.FieldMinWeight, field.TypeFloat64, value)
	}
	if pduo.mutation.MinWeightCleared() {
		_spec.ClearField(packagingdf.FieldMinWeight, field.TypeFloat64)
	}
	if value, ok := pduo.mutation.Stackable(); ok {
		_spec.SetField(packagingdf.FieldStackable, field.TypeBool, value)
	}
	if pduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingdf.TenantTable,
			Columns: []string{packagingdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingdf.TenantTable,
			Columns: []string{packagingdf.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pduo.mutation.PackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingdf.PackagingTable,
			Columns: []string{packagingdf.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.PackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingdf.PackagingTable,
			Columns: []string{packagingdf.PackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(packaging.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PackagingDF{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{packagingdf.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
