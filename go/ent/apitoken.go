// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// APIToken is the model entity for the APIToken schema.
type APIToken struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// User supplied name for this token
	Name string `json:"name,omitempty"`
	// HashedToken holds the value of the "hashed_token" field.
	HashedToken string `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed time.Time `json:"last_used,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the APITokenQuery when eager-loading is set.
	Edges          APITokenEdges `json:"edges"`
	user_api_token *pulid.ID
	selectValues   sql.SelectValues
}

// APITokenEdges holds the relations/edges for other nodes in the graph.
type APITokenEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APITokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APIToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldID, apitoken.FieldTenantID:
			values[i] = new(pulid.ID)
		case apitoken.FieldName, apitoken.FieldHashedToken:
			values[i] = new(sql.NullString)
		case apitoken.FieldCreatedAt, apitoken.FieldLastUsed:
			values[i] = new(sql.NullTime)
		case apitoken.ForeignKeys[0]: // user_api_token
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APIToken fields.
func (at *APIToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case apitoken.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				at.TenantID = *value
			}
		case apitoken.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				at.Name = value.String
			}
		case apitoken.FieldHashedToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_token", values[i])
			} else if value.Valid {
				at.HashedToken = value.String
			}
		case apitoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case apitoken.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				at.LastUsed = value.Time
			}
		case apitoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_api_token", values[i])
			} else if value.Valid {
				at.user_api_token = new(pulid.ID)
				*at.user_api_token = *value.S.(*pulid.ID)
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the APIToken.
// This includes values selected through modifiers, order, etc.
func (at *APIToken) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the APIToken entity.
func (at *APIToken) QueryTenant() *TenantQuery {
	return NewAPITokenClient(at.config).QueryTenant(at)
}

// QueryUser queries the "user" edge of the APIToken entity.
func (at *APIToken) QueryUser() *UserQuery {
	return NewAPITokenClient(at.config).QueryUser(at)
}

// Update returns a builder for updating this APIToken.
// Note that you need to call APIToken.Unwrap() before calling this method if this APIToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *APIToken) Update() *APITokenUpdateOne {
	return NewAPITokenClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the APIToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *APIToken) Unwrap() *APIToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: APIToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *APIToken) String() string {
	var builder strings.Builder
	builder.WriteString("APIToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", at.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(at.Name)
	builder.WriteString(", ")
	builder.WriteString("hashed_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(at.LastUsed.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// APITokens is a parsable slice of APIToken.
type APITokens []*APIToken
