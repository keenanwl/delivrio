// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentMutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (du *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetTenantID sets the "tenant_id" field.
func (du *DocumentUpdate) SetTenantID(pu pulid.ID) *DocumentUpdate {
	du.mutation.SetTenantID(pu)
	return du
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableTenantID(pu *pulid.ID) *DocumentUpdate {
	if pu != nil {
		du.SetTenantID(*pu)
	}
	return du
}

// SetName sets the "name" field.
func (du *DocumentUpdate) SetName(s string) *DocumentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableName(s *string) *DocumentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetHTMLTemplate sets the "html_template" field.
func (du *DocumentUpdate) SetHTMLTemplate(s string) *DocumentUpdate {
	du.mutation.SetHTMLTemplate(s)
	return du
}

// SetNillableHTMLTemplate sets the "html_template" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableHTMLTemplate(s *string) *DocumentUpdate {
	if s != nil {
		du.SetHTMLTemplate(*s)
	}
	return du
}

// ClearHTMLTemplate clears the value of the "html_template" field.
func (du *DocumentUpdate) ClearHTMLTemplate() *DocumentUpdate {
	du.mutation.ClearHTMLTemplate()
	return du
}

// SetHTMLHeader sets the "html_header" field.
func (du *DocumentUpdate) SetHTMLHeader(s string) *DocumentUpdate {
	du.mutation.SetHTMLHeader(s)
	return du
}

// SetNillableHTMLHeader sets the "html_header" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableHTMLHeader(s *string) *DocumentUpdate {
	if s != nil {
		du.SetHTMLHeader(*s)
	}
	return du
}

// ClearHTMLHeader clears the value of the "html_header" field.
func (du *DocumentUpdate) ClearHTMLHeader() *DocumentUpdate {
	du.mutation.ClearHTMLHeader()
	return du
}

// SetHTMLFooter sets the "html_footer" field.
func (du *DocumentUpdate) SetHTMLFooter(s string) *DocumentUpdate {
	du.mutation.SetHTMLFooter(s)
	return du
}

// SetNillableHTMLFooter sets the "html_footer" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableHTMLFooter(s *string) *DocumentUpdate {
	if s != nil {
		du.SetHTMLFooter(*s)
	}
	return du
}

// ClearHTMLFooter clears the value of the "html_footer" field.
func (du *DocumentUpdate) ClearHTMLFooter() *DocumentUpdate {
	du.mutation.ClearHTMLFooter()
	return du
}

// SetLastBase64Pdf sets the "last_base64_pdf" field.
func (du *DocumentUpdate) SetLastBase64Pdf(s string) *DocumentUpdate {
	du.mutation.SetLastBase64Pdf(s)
	return du
}

// SetNillableLastBase64Pdf sets the "last_base64_pdf" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableLastBase64Pdf(s *string) *DocumentUpdate {
	if s != nil {
		du.SetLastBase64Pdf(*s)
	}
	return du
}

// ClearLastBase64Pdf clears the value of the "last_base64_pdf" field.
func (du *DocumentUpdate) ClearLastBase64Pdf() *DocumentUpdate {
	du.mutation.ClearLastBase64Pdf()
	return du
}

// SetMergeType sets the "merge_type" field.
func (du *DocumentUpdate) SetMergeType(dt document.MergeType) *DocumentUpdate {
	du.mutation.SetMergeType(dt)
	return du
}

// SetNillableMergeType sets the "merge_type" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableMergeType(dt *document.MergeType) *DocumentUpdate {
	if dt != nil {
		du.SetMergeType(*dt)
	}
	return du
}

// SetPaperSize sets the "paper_size" field.
func (du *DocumentUpdate) SetPaperSize(ds document.PaperSize) *DocumentUpdate {
	du.mutation.SetPaperSize(ds)
	return du
}

// SetNillablePaperSize sets the "paper_size" field if the given value is not nil.
func (du *DocumentUpdate) SetNillablePaperSize(ds *document.PaperSize) *DocumentUpdate {
	if ds != nil {
		du.SetPaperSize(*ds)
	}
	return du
}

// SetStartAt sets the "start_at" field.
func (du *DocumentUpdate) SetStartAt(t time.Time) *DocumentUpdate {
	du.mutation.SetStartAt(t)
	return du
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableStartAt(t *time.Time) *DocumentUpdate {
	if t != nil {
		du.SetStartAt(*t)
	}
	return du
}

// SetEndAt sets the "end_at" field.
func (du *DocumentUpdate) SetEndAt(t time.Time) *DocumentUpdate {
	du.mutation.SetEndAt(t)
	return du
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableEndAt(t *time.Time) *DocumentUpdate {
	if t != nil {
		du.SetEndAt(*t)
	}
	return du
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (du *DocumentUpdate) SetTenant(t *Tenant) *DocumentUpdate {
	return du.SetTenantID(t.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (du *DocumentUpdate) SetCarrierBrandID(id pulid.ID) *DocumentUpdate {
	du.mutation.SetCarrierBrandID(id)
	return du
}

// SetNillableCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableCarrierBrandID(id *pulid.ID) *DocumentUpdate {
	if id != nil {
		du = du.SetCarrierBrandID(*id)
	}
	return du
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (du *DocumentUpdate) SetCarrierBrand(c *CarrierBrand) *DocumentUpdate {
	return du.SetCarrierBrandID(c.ID)
}

// AddConnectionPackingSlipIDs adds the "connection_packing_slip" edge to the Connection entity by IDs.
func (du *DocumentUpdate) AddConnectionPackingSlipIDs(ids ...pulid.ID) *DocumentUpdate {
	du.mutation.AddConnectionPackingSlipIDs(ids...)
	return du
}

// AddConnectionPackingSlip adds the "connection_packing_slip" edges to the Connection entity.
func (du *DocumentUpdate) AddConnectionPackingSlip(c ...*Connection) *DocumentUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddConnectionPackingSlipIDs(ids...)
}

// Mutation returns the DocumentMutation object of the builder.
func (du *DocumentUpdate) Mutation() *DocumentMutation {
	return du.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (du *DocumentUpdate) ClearTenant() *DocumentUpdate {
	du.mutation.ClearTenant()
	return du
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (du *DocumentUpdate) ClearCarrierBrand() *DocumentUpdate {
	du.mutation.ClearCarrierBrand()
	return du
}

// ClearConnectionPackingSlip clears all "connection_packing_slip" edges to the Connection entity.
func (du *DocumentUpdate) ClearConnectionPackingSlip() *DocumentUpdate {
	du.mutation.ClearConnectionPackingSlip()
	return du
}

// RemoveConnectionPackingSlipIDs removes the "connection_packing_slip" edge to Connection entities by IDs.
func (du *DocumentUpdate) RemoveConnectionPackingSlipIDs(ids ...pulid.ID) *DocumentUpdate {
	du.mutation.RemoveConnectionPackingSlipIDs(ids...)
	return du
}

// RemoveConnectionPackingSlip removes "connection_packing_slip" edges to Connection entities.
func (du *DocumentUpdate) RemoveConnectionPackingSlip(c ...*Connection) *DocumentUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveConnectionPackingSlipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DocumentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DocumentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DocumentUpdate) check() error {
	if v, ok := du.mutation.MergeType(); ok {
		if err := document.MergeTypeValidator(v); err != nil {
			return &ValidationError{Name: "merge_type", err: fmt.Errorf(`ent: validator failed for field "Document.merge_type": %w`, err)}
		}
	}
	if v, ok := du.mutation.PaperSize(); ok {
		if err := document.PaperSizeValidator(v); err != nil {
			return &ValidationError{Name: "paper_size", err: fmt.Errorf(`ent: validator failed for field "Document.paper_size": %w`, err)}
		}
	}
	if du.mutation.TenantCleared() && len(du.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Document.tenant"`)
	}
	return nil
}

func (du *DocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.HTMLTemplate(); ok {
		_spec.SetField(document.FieldHTMLTemplate, field.TypeString, value)
	}
	if du.mutation.HTMLTemplateCleared() {
		_spec.ClearField(document.FieldHTMLTemplate, field.TypeString)
	}
	if value, ok := du.mutation.HTMLHeader(); ok {
		_spec.SetField(document.FieldHTMLHeader, field.TypeString, value)
	}
	if du.mutation.HTMLHeaderCleared() {
		_spec.ClearField(document.FieldHTMLHeader, field.TypeString)
	}
	if value, ok := du.mutation.HTMLFooter(); ok {
		_spec.SetField(document.FieldHTMLFooter, field.TypeString, value)
	}
	if du.mutation.HTMLFooterCleared() {
		_spec.ClearField(document.FieldHTMLFooter, field.TypeString)
	}
	if value, ok := du.mutation.LastBase64Pdf(); ok {
		_spec.SetField(document.FieldLastBase64Pdf, field.TypeString, value)
	}
	if du.mutation.LastBase64PdfCleared() {
		_spec.ClearField(document.FieldLastBase64Pdf, field.TypeString)
	}
	if value, ok := du.mutation.MergeType(); ok {
		_spec.SetField(document.FieldMergeType, field.TypeEnum, value)
	}
	if value, ok := du.mutation.PaperSize(); ok {
		_spec.SetField(document.FieldPaperSize, field.TypeEnum, value)
	}
	if value, ok := du.mutation.StartAt(); ok {
		_spec.SetField(document.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.EndAt(); ok {
		_spec.SetField(document.FieldEndAt, field.TypeTime, value)
	}
	if du.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.TenantTable,
			Columns: []string{document.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.TenantTable,
			Columns: []string{document.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.CarrierBrandTable,
			Columns: []string{document.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.CarrierBrandTable,
			Columns: []string{document.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ConnectionPackingSlipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedConnectionPackingSlipIDs(); len(nodes) > 0 && !du.mutation.ConnectionPackingSlipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ConnectionPackingSlipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentMutation
}

// SetTenantID sets the "tenant_id" field.
func (duo *DocumentUpdateOne) SetTenantID(pu pulid.ID) *DocumentUpdateOne {
	duo.mutation.SetTenantID(pu)
	return duo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableTenantID(pu *pulid.ID) *DocumentUpdateOne {
	if pu != nil {
		duo.SetTenantID(*pu)
	}
	return duo
}

// SetName sets the "name" field.
func (duo *DocumentUpdateOne) SetName(s string) *DocumentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableName(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetHTMLTemplate sets the "html_template" field.
func (duo *DocumentUpdateOne) SetHTMLTemplate(s string) *DocumentUpdateOne {
	duo.mutation.SetHTMLTemplate(s)
	return duo
}

// SetNillableHTMLTemplate sets the "html_template" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableHTMLTemplate(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetHTMLTemplate(*s)
	}
	return duo
}

// ClearHTMLTemplate clears the value of the "html_template" field.
func (duo *DocumentUpdateOne) ClearHTMLTemplate() *DocumentUpdateOne {
	duo.mutation.ClearHTMLTemplate()
	return duo
}

// SetHTMLHeader sets the "html_header" field.
func (duo *DocumentUpdateOne) SetHTMLHeader(s string) *DocumentUpdateOne {
	duo.mutation.SetHTMLHeader(s)
	return duo
}

// SetNillableHTMLHeader sets the "html_header" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableHTMLHeader(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetHTMLHeader(*s)
	}
	return duo
}

// ClearHTMLHeader clears the value of the "html_header" field.
func (duo *DocumentUpdateOne) ClearHTMLHeader() *DocumentUpdateOne {
	duo.mutation.ClearHTMLHeader()
	return duo
}

// SetHTMLFooter sets the "html_footer" field.
func (duo *DocumentUpdateOne) SetHTMLFooter(s string) *DocumentUpdateOne {
	duo.mutation.SetHTMLFooter(s)
	return duo
}

// SetNillableHTMLFooter sets the "html_footer" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableHTMLFooter(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetHTMLFooter(*s)
	}
	return duo
}

// ClearHTMLFooter clears the value of the "html_footer" field.
func (duo *DocumentUpdateOne) ClearHTMLFooter() *DocumentUpdateOne {
	duo.mutation.ClearHTMLFooter()
	return duo
}

// SetLastBase64Pdf sets the "last_base64_pdf" field.
func (duo *DocumentUpdateOne) SetLastBase64Pdf(s string) *DocumentUpdateOne {
	duo.mutation.SetLastBase64Pdf(s)
	return duo
}

// SetNillableLastBase64Pdf sets the "last_base64_pdf" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableLastBase64Pdf(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetLastBase64Pdf(*s)
	}
	return duo
}

// ClearLastBase64Pdf clears the value of the "last_base64_pdf" field.
func (duo *DocumentUpdateOne) ClearLastBase64Pdf() *DocumentUpdateOne {
	duo.mutation.ClearLastBase64Pdf()
	return duo
}

// SetMergeType sets the "merge_type" field.
func (duo *DocumentUpdateOne) SetMergeType(dt document.MergeType) *DocumentUpdateOne {
	duo.mutation.SetMergeType(dt)
	return duo
}

// SetNillableMergeType sets the "merge_type" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableMergeType(dt *document.MergeType) *DocumentUpdateOne {
	if dt != nil {
		duo.SetMergeType(*dt)
	}
	return duo
}

// SetPaperSize sets the "paper_size" field.
func (duo *DocumentUpdateOne) SetPaperSize(ds document.PaperSize) *DocumentUpdateOne {
	duo.mutation.SetPaperSize(ds)
	return duo
}

// SetNillablePaperSize sets the "paper_size" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillablePaperSize(ds *document.PaperSize) *DocumentUpdateOne {
	if ds != nil {
		duo.SetPaperSize(*ds)
	}
	return duo
}

// SetStartAt sets the "start_at" field.
func (duo *DocumentUpdateOne) SetStartAt(t time.Time) *DocumentUpdateOne {
	duo.mutation.SetStartAt(t)
	return duo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableStartAt(t *time.Time) *DocumentUpdateOne {
	if t != nil {
		duo.SetStartAt(*t)
	}
	return duo
}

// SetEndAt sets the "end_at" field.
func (duo *DocumentUpdateOne) SetEndAt(t time.Time) *DocumentUpdateOne {
	duo.mutation.SetEndAt(t)
	return duo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableEndAt(t *time.Time) *DocumentUpdateOne {
	if t != nil {
		duo.SetEndAt(*t)
	}
	return duo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (duo *DocumentUpdateOne) SetTenant(t *Tenant) *DocumentUpdateOne {
	return duo.SetTenantID(t.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (duo *DocumentUpdateOne) SetCarrierBrandID(id pulid.ID) *DocumentUpdateOne {
	duo.mutation.SetCarrierBrandID(id)
	return duo
}

// SetNillableCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableCarrierBrandID(id *pulid.ID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetCarrierBrandID(*id)
	}
	return duo
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (duo *DocumentUpdateOne) SetCarrierBrand(c *CarrierBrand) *DocumentUpdateOne {
	return duo.SetCarrierBrandID(c.ID)
}

// AddConnectionPackingSlipIDs adds the "connection_packing_slip" edge to the Connection entity by IDs.
func (duo *DocumentUpdateOne) AddConnectionPackingSlipIDs(ids ...pulid.ID) *DocumentUpdateOne {
	duo.mutation.AddConnectionPackingSlipIDs(ids...)
	return duo
}

// AddConnectionPackingSlip adds the "connection_packing_slip" edges to the Connection entity.
func (duo *DocumentUpdateOne) AddConnectionPackingSlip(c ...*Connection) *DocumentUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddConnectionPackingSlipIDs(ids...)
}

// Mutation returns the DocumentMutation object of the builder.
func (duo *DocumentUpdateOne) Mutation() *DocumentMutation {
	return duo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (duo *DocumentUpdateOne) ClearTenant() *DocumentUpdateOne {
	duo.mutation.ClearTenant()
	return duo
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (duo *DocumentUpdateOne) ClearCarrierBrand() *DocumentUpdateOne {
	duo.mutation.ClearCarrierBrand()
	return duo
}

// ClearConnectionPackingSlip clears all "connection_packing_slip" edges to the Connection entity.
func (duo *DocumentUpdateOne) ClearConnectionPackingSlip() *DocumentUpdateOne {
	duo.mutation.ClearConnectionPackingSlip()
	return duo
}

// RemoveConnectionPackingSlipIDs removes the "connection_packing_slip" edge to Connection entities by IDs.
func (duo *DocumentUpdateOne) RemoveConnectionPackingSlipIDs(ids ...pulid.ID) *DocumentUpdateOne {
	duo.mutation.RemoveConnectionPackingSlipIDs(ids...)
	return duo
}

// RemoveConnectionPackingSlip removes "connection_packing_slip" edges to Connection entities.
func (duo *DocumentUpdateOne) RemoveConnectionPackingSlip(c ...*Connection) *DocumentUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveConnectionPackingSlipIDs(ids...)
}

// Where appends a list predicates to the DocumentUpdate builder.
func (duo *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Document entity.
func (duo *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DocumentUpdateOne) check() error {
	if v, ok := duo.mutation.MergeType(); ok {
		if err := document.MergeTypeValidator(v); err != nil {
			return &ValidationError{Name: "merge_type", err: fmt.Errorf(`ent: validator failed for field "Document.merge_type": %w`, err)}
		}
	}
	if v, ok := duo.mutation.PaperSize(); ok {
		if err := document.PaperSizeValidator(v); err != nil {
			return &ValidationError{Name: "paper_size", err: fmt.Errorf(`ent: validator failed for field "Document.paper_size": %w`, err)}
		}
	}
	if duo.mutation.TenantCleared() && len(duo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Document.tenant"`)
	}
	return nil
}

func (duo *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.HTMLTemplate(); ok {
		_spec.SetField(document.FieldHTMLTemplate, field.TypeString, value)
	}
	if duo.mutation.HTMLTemplateCleared() {
		_spec.ClearField(document.FieldHTMLTemplate, field.TypeString)
	}
	if value, ok := duo.mutation.HTMLHeader(); ok {
		_spec.SetField(document.FieldHTMLHeader, field.TypeString, value)
	}
	if duo.mutation.HTMLHeaderCleared() {
		_spec.ClearField(document.FieldHTMLHeader, field.TypeString)
	}
	if value, ok := duo.mutation.HTMLFooter(); ok {
		_spec.SetField(document.FieldHTMLFooter, field.TypeString, value)
	}
	if duo.mutation.HTMLFooterCleared() {
		_spec.ClearField(document.FieldHTMLFooter, field.TypeString)
	}
	if value, ok := duo.mutation.LastBase64Pdf(); ok {
		_spec.SetField(document.FieldLastBase64Pdf, field.TypeString, value)
	}
	if duo.mutation.LastBase64PdfCleared() {
		_spec.ClearField(document.FieldLastBase64Pdf, field.TypeString)
	}
	if value, ok := duo.mutation.MergeType(); ok {
		_spec.SetField(document.FieldMergeType, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.PaperSize(); ok {
		_spec.SetField(document.FieldPaperSize, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.StartAt(); ok {
		_spec.SetField(document.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.EndAt(); ok {
		_spec.SetField(document.FieldEndAt, field.TypeTime, value)
	}
	if duo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.TenantTable,
			Columns: []string{document.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.TenantTable,
			Columns: []string{document.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.CarrierBrandTable,
			Columns: []string{document.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.CarrierBrandTable,
			Columns: []string{document.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ConnectionPackingSlipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedConnectionPackingSlipIDs(); len(nodes) > 0 && !duo.mutation.ConnectionPackingSlipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ConnectionPackingSlipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Document{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
