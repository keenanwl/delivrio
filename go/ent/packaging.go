// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Packaging is the model entity for the Packaging schema.
type Packaging struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// ArchivedAt holds the value of the "archived_at" field.
	ArchivedAt time.Time `json:"archived_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// HeightCm holds the value of the "height_cm" field.
	HeightCm int `json:"height_cm,omitempty"`
	// WidthCm holds the value of the "width_cm" field.
	WidthCm int `json:"width_cm,omitempty"`
	// LengthCm holds the value of the "length_cm" field.
	LengthCm int `json:"length_cm,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackagingQuery when eager-loading is set.
	Edges                   PackagingEdges `json:"edges"`
	packaging_carrier_brand *pulid.ID
	selectValues            sql.SelectValues
}

// PackagingEdges holds the relations/edges for other nodes in the graph.
type PackagingEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ShipmentParcel holds the value of the shipment_parcel edge.
	ShipmentParcel []*ShipmentParcel `json:"shipment_parcel,omitempty"`
	// Pallet holds the value of the pallet edge.
	Pallet []*Pallet `json:"pallet,omitempty"`
	// Colli holds the value of the colli edge.
	Colli []*Colli `json:"colli,omitempty"`
	// ReturnColli holds the value of the return_colli edge.
	ReturnColli []*ReturnColli `json:"return_colli,omitempty"`
	// PackagingDF holds the value of the packaging_df edge.
	PackagingDF *PackagingDF `json:"packaging_df,omitempty"`
	// PackagingUSPS holds the value of the packaging_usps edge.
	PackagingUSPS *PackagingUSPS `json:"packaging_usps,omitempty"`
	// CarrierBrand holds the value of the carrier_brand edge.
	CarrierBrand *CarrierBrand `json:"carrier_brand,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption []*DeliveryOption `json:"delivery_option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedShipmentParcel map[string][]*ShipmentParcel
	namedPallet         map[string][]*Pallet
	namedColli          map[string][]*Colli
	namedReturnColli    map[string][]*ReturnColli
	namedDeliveryOption map[string][]*DeliveryOption
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ShipmentParcelOrErr returns the ShipmentParcel value or an error if the edge
// was not loaded in eager-loading.
func (e PackagingEdges) ShipmentParcelOrErr() ([]*ShipmentParcel, error) {
	if e.loadedTypes[1] {
		return e.ShipmentParcel, nil
	}
	return nil, &NotLoadedError{edge: "shipment_parcel"}
}

// PalletOrErr returns the Pallet value or an error if the edge
// was not loaded in eager-loading.
func (e PackagingEdges) PalletOrErr() ([]*Pallet, error) {
	if e.loadedTypes[2] {
		return e.Pallet, nil
	}
	return nil, &NotLoadedError{edge: "pallet"}
}

// ColliOrErr returns the Colli value or an error if the edge
// was not loaded in eager-loading.
func (e PackagingEdges) ColliOrErr() ([]*Colli, error) {
	if e.loadedTypes[3] {
		return e.Colli, nil
	}
	return nil, &NotLoadedError{edge: "colli"}
}

// ReturnColliOrErr returns the ReturnColli value or an error if the edge
// was not loaded in eager-loading.
func (e PackagingEdges) ReturnColliOrErr() ([]*ReturnColli, error) {
	if e.loadedTypes[4] {
		return e.ReturnColli, nil
	}
	return nil, &NotLoadedError{edge: "return_colli"}
}

// PackagingDFOrErr returns the PackagingDF value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingEdges) PackagingDFOrErr() (*PackagingDF, error) {
	if e.PackagingDF != nil {
		return e.PackagingDF, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: packagingdf.Label}
	}
	return nil, &NotLoadedError{edge: "packaging_df"}
}

// PackagingUSPSOrErr returns the PackagingUSPS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingEdges) PackagingUSPSOrErr() (*PackagingUSPS, error) {
	if e.PackagingUSPS != nil {
		return e.PackagingUSPS, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: packagingusps.Label}
	}
	return nil, &NotLoadedError{edge: "packaging_usps"}
}

// CarrierBrandOrErr returns the CarrierBrand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingEdges) CarrierBrandOrErr() (*CarrierBrand, error) {
	if e.CarrierBrand != nil {
		return e.CarrierBrand, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: carrierbrand.Label}
	}
	return nil, &NotLoadedError{edge: "carrier_brand"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading.
func (e PackagingEdges) DeliveryOptionOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[8] {
		return e.DeliveryOption, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Packaging) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packaging.FieldID, packaging.FieldTenantID:
			values[i] = new(pulid.ID)
		case packaging.FieldHeightCm, packaging.FieldWidthCm, packaging.FieldLengthCm:
			values[i] = new(sql.NullInt64)
		case packaging.FieldName:
			values[i] = new(sql.NullString)
		case packaging.FieldArchivedAt:
			values[i] = new(sql.NullTime)
		case packaging.ForeignKeys[0]: // packaging_carrier_brand
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Packaging fields.
func (pa *Packaging) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packaging.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case packaging.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pa.TenantID = *value
			}
		case packaging.FieldArchivedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field archived_at", values[i])
			} else if value.Valid {
				pa.ArchivedAt = value.Time
			}
		case packaging.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case packaging.FieldHeightCm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height_cm", values[i])
			} else if value.Valid {
				pa.HeightCm = int(value.Int64)
			}
		case packaging.FieldWidthCm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field width_cm", values[i])
			} else if value.Valid {
				pa.WidthCm = int(value.Int64)
			}
		case packaging.FieldLengthCm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length_cm", values[i])
			} else if value.Valid {
				pa.LengthCm = int(value.Int64)
			}
		case packaging.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field packaging_carrier_brand", values[i])
			} else if value.Valid {
				pa.packaging_carrier_brand = new(pulid.ID)
				*pa.packaging_carrier_brand = *value.S.(*pulid.ID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Packaging.
// This includes values selected through modifiers, order, etc.
func (pa *Packaging) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Packaging entity.
func (pa *Packaging) QueryTenant() *TenantQuery {
	return NewPackagingClient(pa.config).QueryTenant(pa)
}

// QueryShipmentParcel queries the "shipment_parcel" edge of the Packaging entity.
func (pa *Packaging) QueryShipmentParcel() *ShipmentParcelQuery {
	return NewPackagingClient(pa.config).QueryShipmentParcel(pa)
}

// QueryPallet queries the "pallet" edge of the Packaging entity.
func (pa *Packaging) QueryPallet() *PalletQuery {
	return NewPackagingClient(pa.config).QueryPallet(pa)
}

// QueryColli queries the "colli" edge of the Packaging entity.
func (pa *Packaging) QueryColli() *ColliQuery {
	return NewPackagingClient(pa.config).QueryColli(pa)
}

// QueryReturnColli queries the "return_colli" edge of the Packaging entity.
func (pa *Packaging) QueryReturnColli() *ReturnColliQuery {
	return NewPackagingClient(pa.config).QueryReturnColli(pa)
}

// QueryPackagingDF queries the "packaging_df" edge of the Packaging entity.
func (pa *Packaging) QueryPackagingDF() *PackagingDFQuery {
	return NewPackagingClient(pa.config).QueryPackagingDF(pa)
}

// QueryPackagingUSPS queries the "packaging_usps" edge of the Packaging entity.
func (pa *Packaging) QueryPackagingUSPS() *PackagingUSPSQuery {
	return NewPackagingClient(pa.config).QueryPackagingUSPS(pa)
}

// QueryCarrierBrand queries the "carrier_brand" edge of the Packaging entity.
func (pa *Packaging) QueryCarrierBrand() *CarrierBrandQuery {
	return NewPackagingClient(pa.config).QueryCarrierBrand(pa)
}

// QueryDeliveryOption queries the "delivery_option" edge of the Packaging entity.
func (pa *Packaging) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewPackagingClient(pa.config).QueryDeliveryOption(pa)
}

// Update returns a builder for updating this Packaging.
// Note that you need to call Packaging.Unwrap() before calling this method if this Packaging
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Packaging) Update() *PackagingUpdateOne {
	return NewPackagingClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Packaging entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Packaging) Unwrap() *Packaging {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Packaging is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Packaging) String() string {
	var builder strings.Builder
	builder.WriteString("Packaging(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.TenantID))
	builder.WriteString(", ")
	builder.WriteString("archived_at=")
	builder.WriteString(pa.ArchivedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("height_cm=")
	builder.WriteString(fmt.Sprintf("%v", pa.HeightCm))
	builder.WriteString(", ")
	builder.WriteString("width_cm=")
	builder.WriteString(fmt.Sprintf("%v", pa.WidthCm))
	builder.WriteString(", ")
	builder.WriteString("length_cm=")
	builder.WriteString(fmt.Sprintf("%v", pa.LengthCm))
	builder.WriteByte(')')
	return builder.String()
}

// NamedShipmentParcel returns the ShipmentParcel named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Packaging) NamedShipmentParcel(name string) ([]*ShipmentParcel, error) {
	if pa.Edges.namedShipmentParcel == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedShipmentParcel[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Packaging) appendNamedShipmentParcel(name string, edges ...*ShipmentParcel) {
	if pa.Edges.namedShipmentParcel == nil {
		pa.Edges.namedShipmentParcel = make(map[string][]*ShipmentParcel)
	}
	if len(edges) == 0 {
		pa.Edges.namedShipmentParcel[name] = []*ShipmentParcel{}
	} else {
		pa.Edges.namedShipmentParcel[name] = append(pa.Edges.namedShipmentParcel[name], edges...)
	}
}

// NamedPallet returns the Pallet named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Packaging) NamedPallet(name string) ([]*Pallet, error) {
	if pa.Edges.namedPallet == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedPallet[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Packaging) appendNamedPallet(name string, edges ...*Pallet) {
	if pa.Edges.namedPallet == nil {
		pa.Edges.namedPallet = make(map[string][]*Pallet)
	}
	if len(edges) == 0 {
		pa.Edges.namedPallet[name] = []*Pallet{}
	} else {
		pa.Edges.namedPallet[name] = append(pa.Edges.namedPallet[name], edges...)
	}
}

// NamedColli returns the Colli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Packaging) NamedColli(name string) ([]*Colli, error) {
	if pa.Edges.namedColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Packaging) appendNamedColli(name string, edges ...*Colli) {
	if pa.Edges.namedColli == nil {
		pa.Edges.namedColli = make(map[string][]*Colli)
	}
	if len(edges) == 0 {
		pa.Edges.namedColli[name] = []*Colli{}
	} else {
		pa.Edges.namedColli[name] = append(pa.Edges.namedColli[name], edges...)
	}
}

// NamedReturnColli returns the ReturnColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Packaging) NamedReturnColli(name string) ([]*ReturnColli, error) {
	if pa.Edges.namedReturnColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedReturnColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Packaging) appendNamedReturnColli(name string, edges ...*ReturnColli) {
	if pa.Edges.namedReturnColli == nil {
		pa.Edges.namedReturnColli = make(map[string][]*ReturnColli)
	}
	if len(edges) == 0 {
		pa.Edges.namedReturnColli[name] = []*ReturnColli{}
	} else {
		pa.Edges.namedReturnColli[name] = append(pa.Edges.namedReturnColli[name], edges...)
	}
}

// NamedDeliveryOption returns the DeliveryOption named value or an error if the edge was not
// loaded in eager-loading with this name.
func (pa *Packaging) NamedDeliveryOption(name string) ([]*DeliveryOption, error) {
	if pa.Edges.namedDeliveryOption == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := pa.Edges.namedDeliveryOption[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (pa *Packaging) appendNamedDeliveryOption(name string, edges ...*DeliveryOption) {
	if pa.Edges.namedDeliveryOption == nil {
		pa.Edges.namedDeliveryOption = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		pa.Edges.namedDeliveryOption[name] = []*DeliveryOption{}
	} else {
		pa.Edges.namedDeliveryOption[name] = append(pa.Edges.namedDeliveryOption[name], edges...)
	}
}

// Packagings is a parsable slice of Packaging.
type Packagings []*Packaging
