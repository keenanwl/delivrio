// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceBringQuery is the builder for querying CarrierAdditionalServiceBring entities.
type CarrierAdditionalServiceBringQuery struct {
	config
	ctx                          *QueryContext
	order                        []carrieradditionalservicebring.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.CarrierAdditionalServiceBring
	withCarrierServiceBring      *CarrierServiceBringQuery
	withDeliveryOptionBring      *DeliveryOptionBringQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*CarrierAdditionalServiceBring) error
	withNamedDeliveryOptionBring map[string]*DeliveryOptionBringQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierAdditionalServiceBringQuery builder.
func (casbq *CarrierAdditionalServiceBringQuery) Where(ps ...predicate.CarrierAdditionalServiceBring) *CarrierAdditionalServiceBringQuery {
	casbq.predicates = append(casbq.predicates, ps...)
	return casbq
}

// Limit the number of records to be returned by this query.
func (casbq *CarrierAdditionalServiceBringQuery) Limit(limit int) *CarrierAdditionalServiceBringQuery {
	casbq.ctx.Limit = &limit
	return casbq
}

// Offset to start from.
func (casbq *CarrierAdditionalServiceBringQuery) Offset(offset int) *CarrierAdditionalServiceBringQuery {
	casbq.ctx.Offset = &offset
	return casbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (casbq *CarrierAdditionalServiceBringQuery) Unique(unique bool) *CarrierAdditionalServiceBringQuery {
	casbq.ctx.Unique = &unique
	return casbq
}

// Order specifies how the records should be ordered.
func (casbq *CarrierAdditionalServiceBringQuery) Order(o ...carrieradditionalservicebring.OrderOption) *CarrierAdditionalServiceBringQuery {
	casbq.order = append(casbq.order, o...)
	return casbq
}

// QueryCarrierServiceBring chains the current query on the "carrier_service_bring" edge.
func (casbq *CarrierAdditionalServiceBringQuery) QueryCarrierServiceBring() *CarrierServiceBringQuery {
	query := (&CarrierServiceBringClient{config: casbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicebring.Table, carrieradditionalservicebring.FieldID, selector),
			sqlgraph.To(carrierservicebring.Table, carrierservicebring.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carrieradditionalservicebring.CarrierServiceBringTable, carrieradditionalservicebring.CarrierServiceBringColumn),
		)
		fromU = sqlgraph.SetNeighbors(casbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionBring chains the current query on the "delivery_option_bring" edge.
func (casbq *CarrierAdditionalServiceBringQuery) QueryDeliveryOptionBring() *DeliveryOptionBringQuery {
	query := (&DeliveryOptionBringClient{config: casbq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casbq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicebring.Table, carrieradditionalservicebring.FieldID, selector),
			sqlgraph.To(deliveryoptionbring.Table, deliveryoptionbring.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicebring.DeliveryOptionBringTable, carrieradditionalservicebring.DeliveryOptionBringPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casbq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierAdditionalServiceBring entity from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceBring was found.
func (casbq *CarrierAdditionalServiceBringQuery) First(ctx context.Context) (*CarrierAdditionalServiceBring, error) {
	nodes, err := casbq.Limit(1).All(setContextOp(ctx, casbq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrieradditionalservicebring.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) FirstX(ctx context.Context) *CarrierAdditionalServiceBring {
	node, err := casbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierAdditionalServiceBring ID from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceBring ID was found.
func (casbq *CarrierAdditionalServiceBringQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casbq.Limit(1).IDs(setContextOp(ctx, casbq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrieradditionalservicebring.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := casbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierAdditionalServiceBring entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceBring entity is found.
// Returns a *NotFoundError when no CarrierAdditionalServiceBring entities are found.
func (casbq *CarrierAdditionalServiceBringQuery) Only(ctx context.Context) (*CarrierAdditionalServiceBring, error) {
	nodes, err := casbq.Limit(2).All(setContextOp(ctx, casbq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrieradditionalservicebring.Label}
	default:
		return nil, &NotSingularError{carrieradditionalservicebring.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) OnlyX(ctx context.Context) *CarrierAdditionalServiceBring {
	node, err := casbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierAdditionalServiceBring ID in the query.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceBring ID is found.
// Returns a *NotFoundError when no entities are found.
func (casbq *CarrierAdditionalServiceBringQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casbq.Limit(2).IDs(setContextOp(ctx, casbq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrieradditionalservicebring.Label}
	default:
		err = &NotSingularError{carrieradditionalservicebring.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := casbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierAdditionalServiceBrings.
func (casbq *CarrierAdditionalServiceBringQuery) All(ctx context.Context) ([]*CarrierAdditionalServiceBring, error) {
	ctx = setContextOp(ctx, casbq.ctx, ent.OpQueryAll)
	if err := casbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierAdditionalServiceBring, *CarrierAdditionalServiceBringQuery]()
	return withInterceptors[[]*CarrierAdditionalServiceBring](ctx, casbq, qr, casbq.inters)
}

// AllX is like All, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) AllX(ctx context.Context) []*CarrierAdditionalServiceBring {
	nodes, err := casbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierAdditionalServiceBring IDs.
func (casbq *CarrierAdditionalServiceBringQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if casbq.ctx.Unique == nil && casbq.path != nil {
		casbq.Unique(true)
	}
	ctx = setContextOp(ctx, casbq.ctx, ent.OpQueryIDs)
	if err = casbq.Select(carrieradditionalservicebring.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := casbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (casbq *CarrierAdditionalServiceBringQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, casbq.ctx, ent.OpQueryCount)
	if err := casbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, casbq, querierCount[*CarrierAdditionalServiceBringQuery](), casbq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) CountX(ctx context.Context) int {
	count, err := casbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (casbq *CarrierAdditionalServiceBringQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, casbq.ctx, ent.OpQueryExist)
	switch _, err := casbq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (casbq *CarrierAdditionalServiceBringQuery) ExistX(ctx context.Context) bool {
	exist, err := casbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierAdditionalServiceBringQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (casbq *CarrierAdditionalServiceBringQuery) Clone() *CarrierAdditionalServiceBringQuery {
	if casbq == nil {
		return nil
	}
	return &CarrierAdditionalServiceBringQuery{
		config:                  casbq.config,
		ctx:                     casbq.ctx.Clone(),
		order:                   append([]carrieradditionalservicebring.OrderOption{}, casbq.order...),
		inters:                  append([]Interceptor{}, casbq.inters...),
		predicates:              append([]predicate.CarrierAdditionalServiceBring{}, casbq.predicates...),
		withCarrierServiceBring: casbq.withCarrierServiceBring.Clone(),
		withDeliveryOptionBring: casbq.withDeliveryOptionBring.Clone(),
		// clone intermediate query.
		sql:  casbq.sql.Clone(),
		path: casbq.path,
	}
}

// WithCarrierServiceBring tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_bring" edge. The optional arguments are used to configure the query builder of the edge.
func (casbq *CarrierAdditionalServiceBringQuery) WithCarrierServiceBring(opts ...func(*CarrierServiceBringQuery)) *CarrierAdditionalServiceBringQuery {
	query := (&CarrierServiceBringClient{config: casbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casbq.withCarrierServiceBring = query
	return casbq
}

// WithDeliveryOptionBring tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_bring" edge. The optional arguments are used to configure the query builder of the edge.
func (casbq *CarrierAdditionalServiceBringQuery) WithDeliveryOptionBring(opts ...func(*DeliveryOptionBringQuery)) *CarrierAdditionalServiceBringQuery {
	query := (&DeliveryOptionBringClient{config: casbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casbq.withDeliveryOptionBring = query
	return casbq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceBring.Query().
//		GroupBy(carrieradditionalservicebring.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (casbq *CarrierAdditionalServiceBringQuery) GroupBy(field string, fields ...string) *CarrierAdditionalServiceBringGroupBy {
	casbq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierAdditionalServiceBringGroupBy{build: casbq}
	grbuild.flds = &casbq.ctx.Fields
	grbuild.label = carrieradditionalservicebring.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceBring.Query().
//		Select(carrieradditionalservicebring.FieldLabel).
//		Scan(ctx, &v)
func (casbq *CarrierAdditionalServiceBringQuery) Select(fields ...string) *CarrierAdditionalServiceBringSelect {
	casbq.ctx.Fields = append(casbq.ctx.Fields, fields...)
	sbuild := &CarrierAdditionalServiceBringSelect{CarrierAdditionalServiceBringQuery: casbq}
	sbuild.label = carrieradditionalservicebring.Label
	sbuild.flds, sbuild.scan = &casbq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierAdditionalServiceBringSelect configured with the given aggregations.
func (casbq *CarrierAdditionalServiceBringQuery) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceBringSelect {
	return casbq.Select().Aggregate(fns...)
}

func (casbq *CarrierAdditionalServiceBringQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range casbq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, casbq); err != nil {
				return err
			}
		}
	}
	for _, f := range casbq.ctx.Fields {
		if !carrieradditionalservicebring.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if casbq.path != nil {
		prev, err := casbq.path(ctx)
		if err != nil {
			return err
		}
		casbq.sql = prev
	}
	if carrieradditionalservicebring.Policy == nil {
		return errors.New("ent: uninitialized carrieradditionalservicebring.Policy (forgotten import ent/runtime?)")
	}
	if err := carrieradditionalservicebring.Policy.EvalQuery(ctx, casbq); err != nil {
		return err
	}
	return nil
}

func (casbq *CarrierAdditionalServiceBringQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierAdditionalServiceBring, error) {
	var (
		nodes       = []*CarrierAdditionalServiceBring{}
		withFKs     = casbq.withFKs
		_spec       = casbq.querySpec()
		loadedTypes = [2]bool{
			casbq.withCarrierServiceBring != nil,
			casbq.withDeliveryOptionBring != nil,
		}
	)
	if casbq.withCarrierServiceBring != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicebring.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierAdditionalServiceBring).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierAdditionalServiceBring{config: casbq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(casbq.modifiers) > 0 {
		_spec.Modifiers = casbq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, casbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := casbq.withCarrierServiceBring; query != nil {
		if err := casbq.loadCarrierServiceBring(ctx, query, nodes, nil,
			func(n *CarrierAdditionalServiceBring, e *CarrierServiceBring) { n.Edges.CarrierServiceBring = e }); err != nil {
			return nil, err
		}
	}
	if query := casbq.withDeliveryOptionBring; query != nil {
		if err := casbq.loadDeliveryOptionBring(ctx, query, nodes,
			func(n *CarrierAdditionalServiceBring) { n.Edges.DeliveryOptionBring = []*DeliveryOptionBring{} },
			func(n *CarrierAdditionalServiceBring, e *DeliveryOptionBring) {
				n.Edges.DeliveryOptionBring = append(n.Edges.DeliveryOptionBring, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range casbq.withNamedDeliveryOptionBring {
		if err := casbq.loadDeliveryOptionBring(ctx, query, nodes,
			func(n *CarrierAdditionalServiceBring) { n.appendNamedDeliveryOptionBring(name) },
			func(n *CarrierAdditionalServiceBring, e *DeliveryOptionBring) {
				n.appendNamedDeliveryOptionBring(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range casbq.loadTotal {
		if err := casbq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (casbq *CarrierAdditionalServiceBringQuery) loadCarrierServiceBring(ctx context.Context, query *CarrierServiceBringQuery, nodes []*CarrierAdditionalServiceBring, init func(*CarrierAdditionalServiceBring), assign func(*CarrierAdditionalServiceBring, *CarrierServiceBring)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierAdditionalServiceBring)
	for i := range nodes {
		if nodes[i].carrier_service_bring_carrier_additional_service_bring == nil {
			continue
		}
		fk := *nodes[i].carrier_service_bring_carrier_additional_service_bring
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservicebring.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_bring_carrier_additional_service_bring" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (casbq *CarrierAdditionalServiceBringQuery) loadDeliveryOptionBring(ctx context.Context, query *DeliveryOptionBringQuery, nodes []*CarrierAdditionalServiceBring, init func(*CarrierAdditionalServiceBring), assign func(*CarrierAdditionalServiceBring, *DeliveryOptionBring)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceBring)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceBring]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicebring.DeliveryOptionBringTable)
		s.Join(joinT).On(s.C(deliveryoptionbring.FieldID), joinT.C(carrieradditionalservicebring.DeliveryOptionBringPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicebring.DeliveryOptionBringPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicebring.DeliveryOptionBringPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceBring]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOptionBring](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_bring" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (casbq *CarrierAdditionalServiceBringQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := casbq.querySpec()
	if len(casbq.modifiers) > 0 {
		_spec.Modifiers = casbq.modifiers
	}
	_spec.Node.Columns = casbq.ctx.Fields
	if len(casbq.ctx.Fields) > 0 {
		_spec.Unique = casbq.ctx.Unique != nil && *casbq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, casbq.driver, _spec)
}

func (casbq *CarrierAdditionalServiceBringQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrieradditionalservicebring.Table, carrieradditionalservicebring.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicebring.FieldID, field.TypeString))
	_spec.From = casbq.sql
	if unique := casbq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if casbq.path != nil {
		_spec.Unique = true
	}
	if fields := casbq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicebring.FieldID)
		for i := range fields {
			if fields[i] != carrieradditionalservicebring.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := casbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := casbq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := casbq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := casbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (casbq *CarrierAdditionalServiceBringQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(casbq.driver.Dialect())
	t1 := builder.Table(carrieradditionalservicebring.Table)
	columns := casbq.ctx.Fields
	if len(columns) == 0 {
		columns = carrieradditionalservicebring.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if casbq.sql != nil {
		selector = casbq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if casbq.ctx.Unique != nil && *casbq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range casbq.predicates {
		p(selector)
	}
	for _, p := range casbq.order {
		p(selector)
	}
	if offset := casbq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := casbq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDeliveryOptionBring tells the query-builder to eager-load the nodes that are connected to the "delivery_option_bring"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casbq *CarrierAdditionalServiceBringQuery) WithNamedDeliveryOptionBring(name string, opts ...func(*DeliveryOptionBringQuery)) *CarrierAdditionalServiceBringQuery {
	query := (&DeliveryOptionBringClient{config: casbq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casbq.withNamedDeliveryOptionBring == nil {
		casbq.withNamedDeliveryOptionBring = make(map[string]*DeliveryOptionBringQuery)
	}
	casbq.withNamedDeliveryOptionBring[name] = query
	return casbq
}

// CarrierAdditionalServiceBringGroupBy is the group-by builder for CarrierAdditionalServiceBring entities.
type CarrierAdditionalServiceBringGroupBy struct {
	selector
	build *CarrierAdditionalServiceBringQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (casbgb *CarrierAdditionalServiceBringGroupBy) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceBringGroupBy {
	casbgb.fns = append(casbgb.fns, fns...)
	return casbgb
}

// Scan applies the selector query and scans the result into the given value.
func (casbgb *CarrierAdditionalServiceBringGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casbgb.build.ctx, ent.OpQueryGroupBy)
	if err := casbgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceBringQuery, *CarrierAdditionalServiceBringGroupBy](ctx, casbgb.build, casbgb, casbgb.build.inters, v)
}

func (casbgb *CarrierAdditionalServiceBringGroupBy) sqlScan(ctx context.Context, root *CarrierAdditionalServiceBringQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(casbgb.fns))
	for _, fn := range casbgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*casbgb.flds)+len(casbgb.fns))
		for _, f := range *casbgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*casbgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casbgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierAdditionalServiceBringSelect is the builder for selecting fields of CarrierAdditionalServiceBring entities.
type CarrierAdditionalServiceBringSelect struct {
	*CarrierAdditionalServiceBringQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (casbs *CarrierAdditionalServiceBringSelect) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceBringSelect {
	casbs.fns = append(casbs.fns, fns...)
	return casbs
}

// Scan applies the selector query and scans the result into the given value.
func (casbs *CarrierAdditionalServiceBringSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casbs.ctx, ent.OpQuerySelect)
	if err := casbs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceBringQuery, *CarrierAdditionalServiceBringSelect](ctx, casbs.CarrierAdditionalServiceBringQuery, casbs, casbs.inters, v)
}

func (casbs *CarrierAdditionalServiceBringSelect) sqlScan(ctx context.Context, root *CarrierAdditionalServiceBringQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(casbs.fns))
	for _, fn := range casbs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*casbs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
