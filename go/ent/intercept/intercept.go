// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"delivrio.io/go/ent"
	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"
	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The APITokenFunc type is an adapter to allow the use of ordinary function as a Querier.
type APITokenFunc func(context.Context, *ent.APITokenQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f APITokenFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.APITokenQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.APITokenQuery", q)
}

// The TraverseAPIToken type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAPIToken func(context.Context, *ent.APITokenQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAPIToken) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAPIToken) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.APITokenQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.APITokenQuery", q)
}

// The AccessRightFunc type is an adapter to allow the use of ordinary function as a Querier.
type AccessRightFunc func(context.Context, *ent.AccessRightQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AccessRightFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AccessRightQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AccessRightQuery", q)
}

// The TraverseAccessRight type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAccessRight func(context.Context, *ent.AccessRightQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAccessRight) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAccessRight) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccessRightQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AccessRightQuery", q)
}

// The AddressFunc type is an adapter to allow the use of ordinary function as a Querier.
type AddressFunc func(context.Context, *ent.AddressQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AddressFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AddressQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AddressQuery", q)
}

// The TraverseAddress type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAddress func(context.Context, *ent.AddressQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAddress) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAddress) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AddressQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AddressQuery", q)
}

// The AddressGlobalFunc type is an adapter to allow the use of ordinary function as a Querier.
type AddressGlobalFunc func(context.Context, *ent.AddressGlobalQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f AddressGlobalFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.AddressGlobalQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.AddressGlobalQuery", q)
}

// The TraverseAddressGlobal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseAddressGlobal func(context.Context, *ent.AddressGlobalQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseAddressGlobal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseAddressGlobal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AddressGlobalQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.AddressGlobalQuery", q)
}

// The BusinessHoursPeriodFunc type is an adapter to allow the use of ordinary function as a Querier.
type BusinessHoursPeriodFunc func(context.Context, *ent.BusinessHoursPeriodQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f BusinessHoursPeriodFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.BusinessHoursPeriodQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.BusinessHoursPeriodQuery", q)
}

// The TraverseBusinessHoursPeriod type is an adapter to allow the use of ordinary function as Traverser.
type TraverseBusinessHoursPeriod func(context.Context, *ent.BusinessHoursPeriodQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseBusinessHoursPeriod) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseBusinessHoursPeriod) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BusinessHoursPeriodQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.BusinessHoursPeriodQuery", q)
}

// The CarrierFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierFunc func(context.Context, *ent.CarrierQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierQuery", q)
}

// The TraverseCarrier type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrier func(context.Context, *ent.CarrierQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrier) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrier) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierQuery", q)
}

// The CarrierAdditionalServiceBringFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceBringFunc func(context.Context, *ent.CarrierAdditionalServiceBringQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceBringFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceBringQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceBringQuery", q)
}

// The TraverseCarrierAdditionalServiceBring type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceBring func(context.Context, *ent.CarrierAdditionalServiceBringQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceBring) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceBring) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceBringQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceBringQuery", q)
}

// The CarrierAdditionalServiceDAOFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceDAOFunc func(context.Context, *ent.CarrierAdditionalServiceDAOQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceDAOFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceDAOQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceDAOQuery", q)
}

// The TraverseCarrierAdditionalServiceDAO type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceDAO func(context.Context, *ent.CarrierAdditionalServiceDAOQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceDAO) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceDAO) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceDAOQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceDAOQuery", q)
}

// The CarrierAdditionalServiceDFFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceDFFunc func(context.Context, *ent.CarrierAdditionalServiceDFQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceDFFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceDFQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceDFQuery", q)
}

// The TraverseCarrierAdditionalServiceDF type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceDF func(context.Context, *ent.CarrierAdditionalServiceDFQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceDF) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceDF) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceDFQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceDFQuery", q)
}

// The CarrierAdditionalServiceDSVFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceDSVFunc func(context.Context, *ent.CarrierAdditionalServiceDSVQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceDSVFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceDSVQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceDSVQuery", q)
}

// The TraverseCarrierAdditionalServiceDSV type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceDSV func(context.Context, *ent.CarrierAdditionalServiceDSVQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceDSV) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceDSV) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceDSVQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceDSVQuery", q)
}

// The CarrierAdditionalServiceEasyPostFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceEasyPostFunc func(context.Context, *ent.CarrierAdditionalServiceEasyPostQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceEasyPostFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceEasyPostQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceEasyPostQuery", q)
}

// The TraverseCarrierAdditionalServiceEasyPost type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceEasyPost func(context.Context, *ent.CarrierAdditionalServiceEasyPostQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceEasyPost) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceEasyPost) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceEasyPostQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceEasyPostQuery", q)
}

// The CarrierAdditionalServiceGLSFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceGLSFunc func(context.Context, *ent.CarrierAdditionalServiceGLSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceGLSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceGLSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceGLSQuery", q)
}

// The TraverseCarrierAdditionalServiceGLS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceGLS func(context.Context, *ent.CarrierAdditionalServiceGLSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceGLS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceGLS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceGLSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceGLSQuery", q)
}

// The CarrierAdditionalServicePostNordFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServicePostNordFunc func(context.Context, *ent.CarrierAdditionalServicePostNordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServicePostNordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServicePostNordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServicePostNordQuery", q)
}

// The TraverseCarrierAdditionalServicePostNord type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServicePostNord func(context.Context, *ent.CarrierAdditionalServicePostNordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServicePostNord) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServicePostNord) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServicePostNordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServicePostNordQuery", q)
}

// The CarrierAdditionalServiceUSPSFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierAdditionalServiceUSPSFunc func(context.Context, *ent.CarrierAdditionalServiceUSPSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierAdditionalServiceUSPSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierAdditionalServiceUSPSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceUSPSQuery", q)
}

// The TraverseCarrierAdditionalServiceUSPS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierAdditionalServiceUSPS func(context.Context, *ent.CarrierAdditionalServiceUSPSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierAdditionalServiceUSPS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierAdditionalServiceUSPS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierAdditionalServiceUSPSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierAdditionalServiceUSPSQuery", q)
}

// The CarrierBrandFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierBrandFunc func(context.Context, *ent.CarrierBrandQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierBrandFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierBrandQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierBrandQuery", q)
}

// The TraverseCarrierBrand type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierBrand func(context.Context, *ent.CarrierBrandQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierBrand) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierBrand) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierBrandQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierBrandQuery", q)
}

// The CarrierBringFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierBringFunc func(context.Context, *ent.CarrierBringQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierBringFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierBringQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierBringQuery", q)
}

// The TraverseCarrierBring type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierBring func(context.Context, *ent.CarrierBringQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierBring) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierBring) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierBringQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierBringQuery", q)
}

// The CarrierDAOFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierDAOFunc func(context.Context, *ent.CarrierDAOQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierDAOFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierDAOQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierDAOQuery", q)
}

// The TraverseCarrierDAO type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierDAO func(context.Context, *ent.CarrierDAOQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierDAO) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierDAO) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierDAOQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierDAOQuery", q)
}

// The CarrierDFFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierDFFunc func(context.Context, *ent.CarrierDFQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierDFFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierDFQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierDFQuery", q)
}

// The TraverseCarrierDF type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierDF func(context.Context, *ent.CarrierDFQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierDF) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierDF) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierDFQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierDFQuery", q)
}

// The CarrierDSVFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierDSVFunc func(context.Context, *ent.CarrierDSVQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierDSVFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierDSVQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierDSVQuery", q)
}

// The TraverseCarrierDSV type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierDSV func(context.Context, *ent.CarrierDSVQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierDSV) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierDSV) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierDSVQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierDSVQuery", q)
}

// The CarrierEasyPostFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierEasyPostFunc func(context.Context, *ent.CarrierEasyPostQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierEasyPostFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierEasyPostQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierEasyPostQuery", q)
}

// The TraverseCarrierEasyPost type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierEasyPost func(context.Context, *ent.CarrierEasyPostQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierEasyPost) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierEasyPost) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierEasyPostQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierEasyPostQuery", q)
}

// The CarrierGLSFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierGLSFunc func(context.Context, *ent.CarrierGLSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierGLSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierGLSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierGLSQuery", q)
}

// The TraverseCarrierGLS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierGLS func(context.Context, *ent.CarrierGLSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierGLS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierGLS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierGLSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierGLSQuery", q)
}

// The CarrierPostNordFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierPostNordFunc func(context.Context, *ent.CarrierPostNordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierPostNordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierPostNordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierPostNordQuery", q)
}

// The TraverseCarrierPostNord type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierPostNord func(context.Context, *ent.CarrierPostNordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierPostNord) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierPostNord) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierPostNordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierPostNordQuery", q)
}

// The CarrierServiceFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceFunc func(context.Context, *ent.CarrierServiceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceQuery", q)
}

// The TraverseCarrierService type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierService func(context.Context, *ent.CarrierServiceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierService) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierService) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceQuery", q)
}

// The CarrierServiceBringFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceBringFunc func(context.Context, *ent.CarrierServiceBringQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceBringFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceBringQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceBringQuery", q)
}

// The TraverseCarrierServiceBring type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceBring func(context.Context, *ent.CarrierServiceBringQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceBring) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceBring) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceBringQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceBringQuery", q)
}

// The CarrierServiceDAOFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceDAOFunc func(context.Context, *ent.CarrierServiceDAOQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceDAOFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceDAOQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceDAOQuery", q)
}

// The TraverseCarrierServiceDAO type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceDAO func(context.Context, *ent.CarrierServiceDAOQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceDAO) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceDAO) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceDAOQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceDAOQuery", q)
}

// The CarrierServiceDFFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceDFFunc func(context.Context, *ent.CarrierServiceDFQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceDFFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceDFQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceDFQuery", q)
}

// The TraverseCarrierServiceDF type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceDF func(context.Context, *ent.CarrierServiceDFQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceDF) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceDF) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceDFQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceDFQuery", q)
}

// The CarrierServiceDSVFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceDSVFunc func(context.Context, *ent.CarrierServiceDSVQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceDSVFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceDSVQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceDSVQuery", q)
}

// The TraverseCarrierServiceDSV type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceDSV func(context.Context, *ent.CarrierServiceDSVQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceDSV) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceDSV) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceDSVQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceDSVQuery", q)
}

// The CarrierServiceEasyPostFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceEasyPostFunc func(context.Context, *ent.CarrierServiceEasyPostQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceEasyPostFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceEasyPostQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceEasyPostQuery", q)
}

// The TraverseCarrierServiceEasyPost type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceEasyPost func(context.Context, *ent.CarrierServiceEasyPostQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceEasyPost) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceEasyPost) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceEasyPostQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceEasyPostQuery", q)
}

// The CarrierServiceGLSFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceGLSFunc func(context.Context, *ent.CarrierServiceGLSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceGLSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceGLSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceGLSQuery", q)
}

// The TraverseCarrierServiceGLS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceGLS func(context.Context, *ent.CarrierServiceGLSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceGLS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceGLS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceGLSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceGLSQuery", q)
}

// The CarrierServicePostNordFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServicePostNordFunc func(context.Context, *ent.CarrierServicePostNordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServicePostNordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServicePostNordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServicePostNordQuery", q)
}

// The TraverseCarrierServicePostNord type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServicePostNord func(context.Context, *ent.CarrierServicePostNordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServicePostNord) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServicePostNord) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServicePostNordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServicePostNordQuery", q)
}

// The CarrierServiceUSPSFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierServiceUSPSFunc func(context.Context, *ent.CarrierServiceUSPSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierServiceUSPSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierServiceUSPSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceUSPSQuery", q)
}

// The TraverseCarrierServiceUSPS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierServiceUSPS func(context.Context, *ent.CarrierServiceUSPSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierServiceUSPS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierServiceUSPS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierServiceUSPSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierServiceUSPSQuery", q)
}

// The CarrierUSPSFunc type is an adapter to allow the use of ordinary function as a Querier.
type CarrierUSPSFunc func(context.Context, *ent.CarrierUSPSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CarrierUSPSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CarrierUSPSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CarrierUSPSQuery", q)
}

// The TraverseCarrierUSPS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCarrierUSPS func(context.Context, *ent.CarrierUSPSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCarrierUSPS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCarrierUSPS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarrierUSPSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CarrierUSPSQuery", q)
}

// The ChangeHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ChangeHistoryFunc func(context.Context, *ent.ChangeHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ChangeHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ChangeHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ChangeHistoryQuery", q)
}

// The TraverseChangeHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseChangeHistory func(context.Context, *ent.ChangeHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseChangeHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseChangeHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChangeHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ChangeHistoryQuery", q)
}

// The ColliFunc type is an adapter to allow the use of ordinary function as a Querier.
type ColliFunc func(context.Context, *ent.ColliQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ColliFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ColliQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ColliQuery", q)
}

// The TraverseColli type is an adapter to allow the use of ordinary function as Traverser.
type TraverseColli func(context.Context, *ent.ColliQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseColli) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseColli) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ColliQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ColliQuery", q)
}

// The ConnectOptionCarrierFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectOptionCarrierFunc func(context.Context, *ent.ConnectOptionCarrierQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConnectOptionCarrierFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConnectOptionCarrierQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConnectOptionCarrierQuery", q)
}

// The TraverseConnectOptionCarrier type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnectOptionCarrier func(context.Context, *ent.ConnectOptionCarrierQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnectOptionCarrier) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnectOptionCarrier) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectOptionCarrierQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConnectOptionCarrierQuery", q)
}

// The ConnectOptionPlatformFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectOptionPlatformFunc func(context.Context, *ent.ConnectOptionPlatformQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConnectOptionPlatformFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConnectOptionPlatformQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConnectOptionPlatformQuery", q)
}

// The TraverseConnectOptionPlatform type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnectOptionPlatform func(context.Context, *ent.ConnectOptionPlatformQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnectOptionPlatform) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnectOptionPlatform) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectOptionPlatformQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConnectOptionPlatformQuery", q)
}

// The ConnectionFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectionFunc func(context.Context, *ent.ConnectionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConnectionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConnectionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConnectionQuery", q)
}

// The TraverseConnection type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnection func(context.Context, *ent.ConnectionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnection) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnection) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConnectionQuery", q)
}

// The ConnectionBrandFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectionBrandFunc func(context.Context, *ent.ConnectionBrandQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConnectionBrandFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConnectionBrandQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConnectionBrandQuery", q)
}

// The TraverseConnectionBrand type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnectionBrand func(context.Context, *ent.ConnectionBrandQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnectionBrand) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnectionBrand) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionBrandQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConnectionBrandQuery", q)
}

// The ConnectionLookupFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectionLookupFunc func(context.Context, *ent.ConnectionLookupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConnectionLookupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConnectionLookupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConnectionLookupQuery", q)
}

// The TraverseConnectionLookup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnectionLookup func(context.Context, *ent.ConnectionLookupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnectionLookup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnectionLookup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionLookupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConnectionLookupQuery", q)
}

// The ConnectionShopifyFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConnectionShopifyFunc func(context.Context, *ent.ConnectionShopifyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConnectionShopifyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConnectionShopifyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConnectionShopifyQuery", q)
}

// The TraverseConnectionShopify type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConnectionShopify func(context.Context, *ent.ConnectionShopifyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConnectionShopify) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConnectionShopify) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConnectionShopifyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConnectionShopifyQuery", q)
}

// The ConsolidationFunc type is an adapter to allow the use of ordinary function as a Querier.
type ConsolidationFunc func(context.Context, *ent.ConsolidationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ConsolidationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ConsolidationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ConsolidationQuery", q)
}

// The TraverseConsolidation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseConsolidation func(context.Context, *ent.ConsolidationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseConsolidation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseConsolidation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ConsolidationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ConsolidationQuery", q)
}

// The ContactFunc type is an adapter to allow the use of ordinary function as a Querier.
type ContactFunc func(context.Context, *ent.ContactQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ContactFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ContactQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ContactQuery", q)
}

// The TraverseContact type is an adapter to allow the use of ordinary function as Traverser.
type TraverseContact func(context.Context, *ent.ContactQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseContact) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseContact) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ContactQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ContactQuery", q)
}

// The CountryFunc type is an adapter to allow the use of ordinary function as a Querier.
type CountryFunc func(context.Context, *ent.CountryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CountryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CountryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CountryQuery", q)
}

// The TraverseCountry type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCountry func(context.Context, *ent.CountryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCountry) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCountry) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CountryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CountryQuery", q)
}

// The CountryHarmonizedCodeFunc type is an adapter to allow the use of ordinary function as a Querier.
type CountryHarmonizedCodeFunc func(context.Context, *ent.CountryHarmonizedCodeQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CountryHarmonizedCodeFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CountryHarmonizedCodeQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CountryHarmonizedCodeQuery", q)
}

// The TraverseCountryHarmonizedCode type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCountryHarmonizedCode func(context.Context, *ent.CountryHarmonizedCodeQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCountryHarmonizedCode) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCountryHarmonizedCode) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CountryHarmonizedCodeQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CountryHarmonizedCodeQuery", q)
}

// The CurrencyFunc type is an adapter to allow the use of ordinary function as a Querier.
type CurrencyFunc func(context.Context, *ent.CurrencyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CurrencyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CurrencyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CurrencyQuery", q)
}

// The TraverseCurrency type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCurrency func(context.Context, *ent.CurrencyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCurrency) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCurrency) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CurrencyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CurrencyQuery", q)
}

// The DeliveryOptionFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionFunc func(context.Context, *ent.DeliveryOptionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionQuery", q)
}

// The TraverseDeliveryOption type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOption func(context.Context, *ent.DeliveryOptionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOption) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOption) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionQuery", q)
}

// The DeliveryOptionBringFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionBringFunc func(context.Context, *ent.DeliveryOptionBringQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionBringFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionBringQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionBringQuery", q)
}

// The TraverseDeliveryOptionBring type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionBring func(context.Context, *ent.DeliveryOptionBringQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionBring) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionBring) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionBringQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionBringQuery", q)
}

// The DeliveryOptionDAOFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionDAOFunc func(context.Context, *ent.DeliveryOptionDAOQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionDAOFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionDAOQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionDAOQuery", q)
}

// The TraverseDeliveryOptionDAO type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionDAO func(context.Context, *ent.DeliveryOptionDAOQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionDAO) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionDAO) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionDAOQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionDAOQuery", q)
}

// The DeliveryOptionDFFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionDFFunc func(context.Context, *ent.DeliveryOptionDFQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionDFFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionDFQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionDFQuery", q)
}

// The TraverseDeliveryOptionDF type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionDF func(context.Context, *ent.DeliveryOptionDFQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionDF) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionDF) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionDFQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionDFQuery", q)
}

// The DeliveryOptionDSVFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionDSVFunc func(context.Context, *ent.DeliveryOptionDSVQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionDSVFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionDSVQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionDSVQuery", q)
}

// The TraverseDeliveryOptionDSV type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionDSV func(context.Context, *ent.DeliveryOptionDSVQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionDSV) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionDSV) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionDSVQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionDSVQuery", q)
}

// The DeliveryOptionEasyPostFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionEasyPostFunc func(context.Context, *ent.DeliveryOptionEasyPostQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionEasyPostFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionEasyPostQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionEasyPostQuery", q)
}

// The TraverseDeliveryOptionEasyPost type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionEasyPost func(context.Context, *ent.DeliveryOptionEasyPostQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionEasyPost) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionEasyPost) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionEasyPostQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionEasyPostQuery", q)
}

// The DeliveryOptionGLSFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionGLSFunc func(context.Context, *ent.DeliveryOptionGLSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionGLSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionGLSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionGLSQuery", q)
}

// The TraverseDeliveryOptionGLS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionGLS func(context.Context, *ent.DeliveryOptionGLSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionGLS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionGLS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionGLSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionGLSQuery", q)
}

// The DeliveryOptionPostNordFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionPostNordFunc func(context.Context, *ent.DeliveryOptionPostNordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionPostNordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionPostNordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionPostNordQuery", q)
}

// The TraverseDeliveryOptionPostNord type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionPostNord func(context.Context, *ent.DeliveryOptionPostNordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionPostNord) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionPostNord) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionPostNordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionPostNordQuery", q)
}

// The DeliveryOptionUSPSFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryOptionUSPSFunc func(context.Context, *ent.DeliveryOptionUSPSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryOptionUSPSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryOptionUSPSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionUSPSQuery", q)
}

// The TraverseDeliveryOptionUSPS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryOptionUSPS func(context.Context, *ent.DeliveryOptionUSPSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryOptionUSPS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryOptionUSPS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryOptionUSPSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryOptionUSPSQuery", q)
}

// The DeliveryRuleFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryRuleFunc func(context.Context, *ent.DeliveryRuleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryRuleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryRuleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryRuleQuery", q)
}

// The TraverseDeliveryRule type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryRule func(context.Context, *ent.DeliveryRuleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryRule) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryRule) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryRuleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryRuleQuery", q)
}

// The DeliveryRuleConstraintFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryRuleConstraintFunc func(context.Context, *ent.DeliveryRuleConstraintQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryRuleConstraintFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryRuleConstraintQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryRuleConstraintQuery", q)
}

// The TraverseDeliveryRuleConstraint type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryRuleConstraint func(context.Context, *ent.DeliveryRuleConstraintQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryRuleConstraint) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryRuleConstraint) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryRuleConstraintQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryRuleConstraintQuery", q)
}

// The DeliveryRuleConstraintGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type DeliveryRuleConstraintGroupFunc func(context.Context, *ent.DeliveryRuleConstraintGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DeliveryRuleConstraintGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DeliveryRuleConstraintGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DeliveryRuleConstraintGroupQuery", q)
}

// The TraverseDeliveryRuleConstraintGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDeliveryRuleConstraintGroup func(context.Context, *ent.DeliveryRuleConstraintGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDeliveryRuleConstraintGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDeliveryRuleConstraintGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeliveryRuleConstraintGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DeliveryRuleConstraintGroupQuery", q)
}

// The DocumentFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentFunc func(context.Context, *ent.DocumentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DocumentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DocumentQuery", q)
}

// The TraverseDocument type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocument func(context.Context, *ent.DocumentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocument) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocument) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DocumentQuery", q)
}

// The DocumentFileFunc type is an adapter to allow the use of ordinary function as a Querier.
type DocumentFileFunc func(context.Context, *ent.DocumentFileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f DocumentFileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.DocumentFileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.DocumentFileQuery", q)
}

// The TraverseDocumentFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseDocumentFile func(context.Context, *ent.DocumentFileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseDocumentFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseDocumentFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentFileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.DocumentFileQuery", q)
}

// The EmailTemplateFunc type is an adapter to allow the use of ordinary function as a Querier.
type EmailTemplateFunc func(context.Context, *ent.EmailTemplateQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EmailTemplateFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EmailTemplateQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EmailTemplateQuery", q)
}

// The TraverseEmailTemplate type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEmailTemplate func(context.Context, *ent.EmailTemplateQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEmailTemplate) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEmailTemplate) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmailTemplateQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EmailTemplateQuery", q)
}

// The HypothesisTestFunc type is an adapter to allow the use of ordinary function as a Querier.
type HypothesisTestFunc func(context.Context, *ent.HypothesisTestQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HypothesisTestFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HypothesisTestQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestQuery", q)
}

// The TraverseHypothesisTest type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHypothesisTest func(context.Context, *ent.HypothesisTestQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHypothesisTest) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHypothesisTest) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestQuery", q)
}

// The HypothesisTestDeliveryOptionFunc type is an adapter to allow the use of ordinary function as a Querier.
type HypothesisTestDeliveryOptionFunc func(context.Context, *ent.HypothesisTestDeliveryOptionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HypothesisTestDeliveryOptionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestDeliveryOptionQuery", q)
}

// The TraverseHypothesisTestDeliveryOption type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHypothesisTestDeliveryOption func(context.Context, *ent.HypothesisTestDeliveryOptionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHypothesisTestDeliveryOption) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHypothesisTestDeliveryOption) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestDeliveryOptionQuery", q)
}

// The HypothesisTestDeliveryOptionLookupFunc type is an adapter to allow the use of ordinary function as a Querier.
type HypothesisTestDeliveryOptionLookupFunc func(context.Context, *ent.HypothesisTestDeliveryOptionLookupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HypothesisTestDeliveryOptionLookupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionLookupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestDeliveryOptionLookupQuery", q)
}

// The TraverseHypothesisTestDeliveryOptionLookup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHypothesisTestDeliveryOptionLookup func(context.Context, *ent.HypothesisTestDeliveryOptionLookupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHypothesisTestDeliveryOptionLookup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHypothesisTestDeliveryOptionLookup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionLookupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestDeliveryOptionLookupQuery", q)
}

// The HypothesisTestDeliveryOptionRequestFunc type is an adapter to allow the use of ordinary function as a Querier.
type HypothesisTestDeliveryOptionRequestFunc func(context.Context, *ent.HypothesisTestDeliveryOptionRequestQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HypothesisTestDeliveryOptionRequestFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionRequestQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestDeliveryOptionRequestQuery", q)
}

// The TraverseHypothesisTestDeliveryOptionRequest type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHypothesisTestDeliveryOptionRequest func(context.Context, *ent.HypothesisTestDeliveryOptionRequestQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHypothesisTestDeliveryOptionRequest) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHypothesisTestDeliveryOptionRequest) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HypothesisTestDeliveryOptionRequestQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HypothesisTestDeliveryOptionRequestQuery", q)
}

// The InventoryItemFunc type is an adapter to allow the use of ordinary function as a Querier.
type InventoryItemFunc func(context.Context, *ent.InventoryItemQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InventoryItemFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InventoryItemQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InventoryItemQuery", q)
}

// The TraverseInventoryItem type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInventoryItem func(context.Context, *ent.InventoryItemQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInventoryItem) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInventoryItem) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InventoryItemQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InventoryItemQuery", q)
}

// The LanguageFunc type is an adapter to allow the use of ordinary function as a Querier.
type LanguageFunc func(context.Context, *ent.LanguageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LanguageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LanguageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LanguageQuery", q)
}

// The TraverseLanguage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLanguage func(context.Context, *ent.LanguageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLanguage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLanguage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LanguageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LanguageQuery", q)
}

// The LocationFunc type is an adapter to allow the use of ordinary function as a Querier.
type LocationFunc func(context.Context, *ent.LocationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LocationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LocationQuery", q)
}

// The TraverseLocation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLocation func(context.Context, *ent.LocationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLocation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLocation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LocationQuery", q)
}

// The LocationTagFunc type is an adapter to allow the use of ordinary function as a Querier.
type LocationTagFunc func(context.Context, *ent.LocationTagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LocationTagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LocationTagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LocationTagQuery", q)
}

// The TraverseLocationTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLocationTag func(context.Context, *ent.LocationTagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLocationTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLocationTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocationTagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LocationTagQuery", q)
}

// The NotificationFunc type is an adapter to allow the use of ordinary function as a Querier.
type NotificationFunc func(context.Context, *ent.NotificationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f NotificationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.NotificationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.NotificationQuery", q)
}

// The TraverseNotification type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNotification func(context.Context, *ent.NotificationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNotification) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNotification) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NotificationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.NotificationQuery", q)
}

// The OTKRequestsFunc type is an adapter to allow the use of ordinary function as a Querier.
type OTKRequestsFunc func(context.Context, *ent.OTKRequestsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OTKRequestsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OTKRequestsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OTKRequestsQuery", q)
}

// The TraverseOTKRequests type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOTKRequests func(context.Context, *ent.OTKRequestsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOTKRequests) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOTKRequests) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OTKRequestsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OTKRequestsQuery", q)
}

// The OrderFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderFunc func(context.Context, *ent.OrderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderQuery", q)
}

// The TraverseOrder type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrder func(context.Context, *ent.OrderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrder) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrder) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderQuery", q)
}

// The OrderHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderHistoryFunc func(context.Context, *ent.OrderHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderHistoryQuery", q)
}

// The TraverseOrderHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderHistory func(context.Context, *ent.OrderHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderHistoryQuery", q)
}

// The OrderLineFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderLineFunc func(context.Context, *ent.OrderLineQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderLineFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderLineQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderLineQuery", q)
}

// The TraverseOrderLine type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderLine func(context.Context, *ent.OrderLineQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderLine) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderLine) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderLineQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderLineQuery", q)
}

// The OrderSenderFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrderSenderFunc func(context.Context, *ent.OrderSenderQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrderSenderFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrderSenderQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrderSenderQuery", q)
}

// The TraverseOrderSender type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrderSender func(context.Context, *ent.OrderSenderQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrderSender) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrderSender) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderSenderQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrderSenderQuery", q)
}

// The PackagingFunc type is an adapter to allow the use of ordinary function as a Querier.
type PackagingFunc func(context.Context, *ent.PackagingQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PackagingFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PackagingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PackagingQuery", q)
}

// The TraversePackaging type is an adapter to allow the use of ordinary function as Traverser.
type TraversePackaging func(context.Context, *ent.PackagingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePackaging) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePackaging) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PackagingQuery", q)
}

// The PackagingDFFunc type is an adapter to allow the use of ordinary function as a Querier.
type PackagingDFFunc func(context.Context, *ent.PackagingDFQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PackagingDFFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PackagingDFQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PackagingDFQuery", q)
}

// The TraversePackagingDF type is an adapter to allow the use of ordinary function as Traverser.
type TraversePackagingDF func(context.Context, *ent.PackagingDFQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePackagingDF) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePackagingDF) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingDFQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PackagingDFQuery", q)
}

// The PackagingUSPSFunc type is an adapter to allow the use of ordinary function as a Querier.
type PackagingUSPSFunc func(context.Context, *ent.PackagingUSPSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PackagingUSPSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PackagingUSPSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PackagingUSPSQuery", q)
}

// The TraversePackagingUSPS type is an adapter to allow the use of ordinary function as Traverser.
type TraversePackagingUSPS func(context.Context, *ent.PackagingUSPSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePackagingUSPS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePackagingUSPS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingUSPSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PackagingUSPSQuery", q)
}

// The PackagingUSPSProcessingCategoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type PackagingUSPSProcessingCategoryFunc func(context.Context, *ent.PackagingUSPSProcessingCategoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PackagingUSPSProcessingCategoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PackagingUSPSProcessingCategoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PackagingUSPSProcessingCategoryQuery", q)
}

// The TraversePackagingUSPSProcessingCategory type is an adapter to allow the use of ordinary function as Traverser.
type TraversePackagingUSPSProcessingCategory func(context.Context, *ent.PackagingUSPSProcessingCategoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePackagingUSPSProcessingCategory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePackagingUSPSProcessingCategory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingUSPSProcessingCategoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PackagingUSPSProcessingCategoryQuery", q)
}

// The PackagingUSPSRateIndicatorFunc type is an adapter to allow the use of ordinary function as a Querier.
type PackagingUSPSRateIndicatorFunc func(context.Context, *ent.PackagingUSPSRateIndicatorQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PackagingUSPSRateIndicatorFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PackagingUSPSRateIndicatorQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PackagingUSPSRateIndicatorQuery", q)
}

// The TraversePackagingUSPSRateIndicator type is an adapter to allow the use of ordinary function as Traverser.
type TraversePackagingUSPSRateIndicator func(context.Context, *ent.PackagingUSPSRateIndicatorQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePackagingUSPSRateIndicator) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePackagingUSPSRateIndicator) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PackagingUSPSRateIndicatorQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PackagingUSPSRateIndicatorQuery", q)
}

// The PalletFunc type is an adapter to allow the use of ordinary function as a Querier.
type PalletFunc func(context.Context, *ent.PalletQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PalletFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PalletQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PalletQuery", q)
}

// The TraversePallet type is an adapter to allow the use of ordinary function as Traverser.
type TraversePallet func(context.Context, *ent.PalletQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePallet) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePallet) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PalletQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PalletQuery", q)
}

// The ParcelShopFunc type is an adapter to allow the use of ordinary function as a Querier.
type ParcelShopFunc func(context.Context, *ent.ParcelShopQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ParcelShopFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ParcelShopQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopQuery", q)
}

// The TraverseParcelShop type is an adapter to allow the use of ordinary function as Traverser.
type TraverseParcelShop func(context.Context, *ent.ParcelShopQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseParcelShop) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseParcelShop) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopQuery", q)
}

// The ParcelShopBringFunc type is an adapter to allow the use of ordinary function as a Querier.
type ParcelShopBringFunc func(context.Context, *ent.ParcelShopBringQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ParcelShopBringFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ParcelShopBringQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopBringQuery", q)
}

// The TraverseParcelShopBring type is an adapter to allow the use of ordinary function as Traverser.
type TraverseParcelShopBring func(context.Context, *ent.ParcelShopBringQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseParcelShopBring) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseParcelShopBring) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopBringQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopBringQuery", q)
}

// The ParcelShopDAOFunc type is an adapter to allow the use of ordinary function as a Querier.
type ParcelShopDAOFunc func(context.Context, *ent.ParcelShopDAOQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ParcelShopDAOFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ParcelShopDAOQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopDAOQuery", q)
}

// The TraverseParcelShopDAO type is an adapter to allow the use of ordinary function as Traverser.
type TraverseParcelShopDAO func(context.Context, *ent.ParcelShopDAOQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseParcelShopDAO) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseParcelShopDAO) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopDAOQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopDAOQuery", q)
}

// The ParcelShopGLSFunc type is an adapter to allow the use of ordinary function as a Querier.
type ParcelShopGLSFunc func(context.Context, *ent.ParcelShopGLSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ParcelShopGLSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ParcelShopGLSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopGLSQuery", q)
}

// The TraverseParcelShopGLS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseParcelShopGLS func(context.Context, *ent.ParcelShopGLSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseParcelShopGLS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseParcelShopGLS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopGLSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopGLSQuery", q)
}

// The ParcelShopPostNordFunc type is an adapter to allow the use of ordinary function as a Querier.
type ParcelShopPostNordFunc func(context.Context, *ent.ParcelShopPostNordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ParcelShopPostNordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ParcelShopPostNordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopPostNordQuery", q)
}

// The TraverseParcelShopPostNord type is an adapter to allow the use of ordinary function as Traverser.
type TraverseParcelShopPostNord func(context.Context, *ent.ParcelShopPostNordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseParcelShopPostNord) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseParcelShopPostNord) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ParcelShopPostNordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ParcelShopPostNordQuery", q)
}

// The PlanFunc type is an adapter to allow the use of ordinary function as a Querier.
type PlanFunc func(context.Context, *ent.PlanQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PlanFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PlanQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PlanQuery", q)
}

// The TraversePlan type is an adapter to allow the use of ordinary function as Traverser.
type TraversePlan func(context.Context, *ent.PlanQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePlan) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePlan) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlanQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PlanQuery", q)
}

// The PlanHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type PlanHistoryFunc func(context.Context, *ent.PlanHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PlanHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PlanHistoryQuery", q)
}

// The TraversePlanHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraversePlanHistory func(context.Context, *ent.PlanHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePlanHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePlanHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlanHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PlanHistoryQuery", q)
}

// The PrintJobFunc type is an adapter to allow the use of ordinary function as a Querier.
type PrintJobFunc func(context.Context, *ent.PrintJobQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PrintJobFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PrintJobQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PrintJobQuery", q)
}

// The TraversePrintJob type is an adapter to allow the use of ordinary function as Traverser.
type TraversePrintJob func(context.Context, *ent.PrintJobQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePrintJob) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePrintJob) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PrintJobQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PrintJobQuery", q)
}

// The PrinterFunc type is an adapter to allow the use of ordinary function as a Querier.
type PrinterFunc func(context.Context, *ent.PrinterQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f PrinterFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.PrinterQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.PrinterQuery", q)
}

// The TraversePrinter type is an adapter to allow the use of ordinary function as Traverser.
type TraversePrinter func(context.Context, *ent.PrinterQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraversePrinter) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraversePrinter) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PrinterQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.PrinterQuery", q)
}

// The ProductFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductFunc func(context.Context, *ent.ProductQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductQuery", q)
}

// The TraverseProduct type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProduct func(context.Context, *ent.ProductQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProduct) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProduct) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductQuery", q)
}

// The ProductImageFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductImageFunc func(context.Context, *ent.ProductImageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductImageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductImageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductImageQuery", q)
}

// The TraverseProductImage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductImage func(context.Context, *ent.ProductImageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductImage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductImage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductImageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductImageQuery", q)
}

// The ProductTagFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductTagFunc func(context.Context, *ent.ProductTagQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductTagFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductTagQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductTagQuery", q)
}

// The TraverseProductTag type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductTag func(context.Context, *ent.ProductTagQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductTag) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductTag) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductTagQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductTagQuery", q)
}

// The ProductVariantFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProductVariantFunc func(context.Context, *ent.ProductVariantQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProductVariantFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProductVariantQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProductVariantQuery", q)
}

// The TraverseProductVariant type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProductVariant func(context.Context, *ent.ProductVariantQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProductVariant) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProductVariant) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProductVariantQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProductVariantQuery", q)
}

// The ReturnColliFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReturnColliFunc func(context.Context, *ent.ReturnColliQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReturnColliFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReturnColliQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReturnColliQuery", q)
}

// The TraverseReturnColli type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReturnColli func(context.Context, *ent.ReturnColliQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReturnColli) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReturnColli) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnColliQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReturnColliQuery", q)
}

// The ReturnColliHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReturnColliHistoryFunc func(context.Context, *ent.ReturnColliHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReturnColliHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReturnColliHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReturnColliHistoryQuery", q)
}

// The TraverseReturnColliHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReturnColliHistory func(context.Context, *ent.ReturnColliHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReturnColliHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReturnColliHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnColliHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReturnColliHistoryQuery", q)
}

// The ReturnOrderLineFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReturnOrderLineFunc func(context.Context, *ent.ReturnOrderLineQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReturnOrderLineFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReturnOrderLineQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReturnOrderLineQuery", q)
}

// The TraverseReturnOrderLine type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReturnOrderLine func(context.Context, *ent.ReturnOrderLineQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReturnOrderLine) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReturnOrderLine) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnOrderLineQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReturnOrderLineQuery", q)
}

// The ReturnPortalFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReturnPortalFunc func(context.Context, *ent.ReturnPortalQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReturnPortalFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReturnPortalQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReturnPortalQuery", q)
}

// The TraverseReturnPortal type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReturnPortal func(context.Context, *ent.ReturnPortalQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReturnPortal) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReturnPortal) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnPortalQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReturnPortalQuery", q)
}

// The ReturnPortalClaimFunc type is an adapter to allow the use of ordinary function as a Querier.
type ReturnPortalClaimFunc func(context.Context, *ent.ReturnPortalClaimQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ReturnPortalClaimFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ReturnPortalClaimQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ReturnPortalClaimQuery", q)
}

// The TraverseReturnPortalClaim type is an adapter to allow the use of ordinary function as Traverser.
type TraverseReturnPortalClaim func(context.Context, *ent.ReturnPortalClaimQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseReturnPortalClaim) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseReturnPortalClaim) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReturnPortalClaimQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ReturnPortalClaimQuery", q)
}

// The SeatGroupFunc type is an adapter to allow the use of ordinary function as a Querier.
type SeatGroupFunc func(context.Context, *ent.SeatGroupQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SeatGroupFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SeatGroupQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SeatGroupQuery", q)
}

// The TraverseSeatGroup type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSeatGroup func(context.Context, *ent.SeatGroupQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSeatGroup) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSeatGroup) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SeatGroupQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SeatGroupQuery", q)
}

// The SeatGroupAccessRightFunc type is an adapter to allow the use of ordinary function as a Querier.
type SeatGroupAccessRightFunc func(context.Context, *ent.SeatGroupAccessRightQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SeatGroupAccessRightFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SeatGroupAccessRightQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SeatGroupAccessRightQuery", q)
}

// The TraverseSeatGroupAccessRight type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSeatGroupAccessRight func(context.Context, *ent.SeatGroupAccessRightQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSeatGroupAccessRight) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSeatGroupAccessRight) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SeatGroupAccessRightQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SeatGroupAccessRightQuery", q)
}

// The ShipmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentFunc func(context.Context, *ent.ShipmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentQuery", q)
}

// The TraverseShipment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipment func(context.Context, *ent.ShipmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentQuery", q)
}

// The ShipmentBringFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentBringFunc func(context.Context, *ent.ShipmentBringQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentBringFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentBringQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentBringQuery", q)
}

// The TraverseShipmentBring type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentBring func(context.Context, *ent.ShipmentBringQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentBring) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentBring) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentBringQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentBringQuery", q)
}

// The ShipmentDAOFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentDAOFunc func(context.Context, *ent.ShipmentDAOQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentDAOFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentDAOQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentDAOQuery", q)
}

// The TraverseShipmentDAO type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentDAO func(context.Context, *ent.ShipmentDAOQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentDAO) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentDAO) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentDAOQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentDAOQuery", q)
}

// The ShipmentDFFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentDFFunc func(context.Context, *ent.ShipmentDFQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentDFFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentDFQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentDFQuery", q)
}

// The TraverseShipmentDF type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentDF func(context.Context, *ent.ShipmentDFQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentDF) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentDF) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentDFQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentDFQuery", q)
}

// The ShipmentDSVFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentDSVFunc func(context.Context, *ent.ShipmentDSVQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentDSVFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentDSVQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentDSVQuery", q)
}

// The TraverseShipmentDSV type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentDSV func(context.Context, *ent.ShipmentDSVQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentDSV) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentDSV) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentDSVQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentDSVQuery", q)
}

// The ShipmentEasyPostFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentEasyPostFunc func(context.Context, *ent.ShipmentEasyPostQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentEasyPostFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentEasyPostQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentEasyPostQuery", q)
}

// The TraverseShipmentEasyPost type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentEasyPost func(context.Context, *ent.ShipmentEasyPostQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentEasyPost) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentEasyPost) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentEasyPostQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentEasyPostQuery", q)
}

// The ShipmentGLSFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentGLSFunc func(context.Context, *ent.ShipmentGLSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentGLSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentGLSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentGLSQuery", q)
}

// The TraverseShipmentGLS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentGLS func(context.Context, *ent.ShipmentGLSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentGLS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentGLS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentGLSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentGLSQuery", q)
}

// The ShipmentHistoryFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentHistoryFunc func(context.Context, *ent.ShipmentHistoryQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentHistoryFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentHistoryQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentHistoryQuery", q)
}

// The TraverseShipmentHistory type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentHistory func(context.Context, *ent.ShipmentHistoryQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentHistory) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentHistory) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentHistoryQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentHistoryQuery", q)
}

// The ShipmentPalletFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentPalletFunc func(context.Context, *ent.ShipmentPalletQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentPalletFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentPalletQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentPalletQuery", q)
}

// The TraverseShipmentPallet type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentPallet func(context.Context, *ent.ShipmentPalletQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentPallet) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentPallet) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentPalletQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentPalletQuery", q)
}

// The ShipmentParcelFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentParcelFunc func(context.Context, *ent.ShipmentParcelQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentParcelFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentParcelQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentParcelQuery", q)
}

// The TraverseShipmentParcel type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentParcel func(context.Context, *ent.ShipmentParcelQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentParcel) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentParcel) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentParcelQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentParcelQuery", q)
}

// The ShipmentPostNordFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentPostNordFunc func(context.Context, *ent.ShipmentPostNordQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentPostNordFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentPostNordQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentPostNordQuery", q)
}

// The TraverseShipmentPostNord type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentPostNord func(context.Context, *ent.ShipmentPostNordQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentPostNord) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentPostNord) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentPostNordQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentPostNordQuery", q)
}

// The ShipmentUSPSFunc type is an adapter to allow the use of ordinary function as a Querier.
type ShipmentUSPSFunc func(context.Context, *ent.ShipmentUSPSQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ShipmentUSPSFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ShipmentUSPSQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ShipmentUSPSQuery", q)
}

// The TraverseShipmentUSPS type is an adapter to allow the use of ordinary function as Traverser.
type TraverseShipmentUSPS func(context.Context, *ent.ShipmentUSPSQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseShipmentUSPS) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseShipmentUSPS) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShipmentUSPSQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ShipmentUSPSQuery", q)
}

// The SignupOptionsFunc type is an adapter to allow the use of ordinary function as a Querier.
type SignupOptionsFunc func(context.Context, *ent.SignupOptionsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SignupOptionsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SignupOptionsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SignupOptionsQuery", q)
}

// The TraverseSignupOptions type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSignupOptions func(context.Context, *ent.SignupOptionsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSignupOptions) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSignupOptions) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SignupOptionsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SignupOptionsQuery", q)
}

// The SystemEventsFunc type is an adapter to allow the use of ordinary function as a Querier.
type SystemEventsFunc func(context.Context, *ent.SystemEventsQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SystemEventsFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SystemEventsQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SystemEventsQuery", q)
}

// The TraverseSystemEvents type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSystemEvents func(context.Context, *ent.SystemEventsQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSystemEvents) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSystemEvents) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SystemEventsQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SystemEventsQuery", q)
}

// The TenantFunc type is an adapter to allow the use of ordinary function as a Querier.
type TenantFunc func(context.Context, *ent.TenantQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TenantFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TenantQuery", q)
}

// The TraverseTenant type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTenant func(context.Context, *ent.TenantQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTenant) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTenant) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TenantQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserSeatFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserSeatFunc func(context.Context, *ent.UserSeatQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserSeatFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserSeatQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserSeatQuery", q)
}

// The TraverseUserSeat type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserSeat func(context.Context, *ent.UserSeatQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserSeat) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserSeat) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserSeatQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserSeatQuery", q)
}

// The WorkspaceRecentScanFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkspaceRecentScanFunc func(context.Context, *ent.WorkspaceRecentScanQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WorkspaceRecentScanFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WorkspaceRecentScanQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WorkspaceRecentScanQuery", q)
}

// The TraverseWorkspaceRecentScan type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkspaceRecentScan func(context.Context, *ent.WorkspaceRecentScanQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkspaceRecentScan) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkspaceRecentScan) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkspaceRecentScanQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WorkspaceRecentScanQuery", q)
}

// The WorkstationFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkstationFunc func(context.Context, *ent.WorkstationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WorkstationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WorkstationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WorkstationQuery", q)
}

// The TraverseWorkstation type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkstation func(context.Context, *ent.WorkstationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkstation) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkstation) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkstationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WorkstationQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.APITokenQuery:
		return &query[*ent.APITokenQuery, predicate.APIToken, apitoken.OrderOption]{typ: ent.TypeAPIToken, tq: q}, nil
	case *ent.AccessRightQuery:
		return &query[*ent.AccessRightQuery, predicate.AccessRight, accessright.OrderOption]{typ: ent.TypeAccessRight, tq: q}, nil
	case *ent.AddressQuery:
		return &query[*ent.AddressQuery, predicate.Address, address.OrderOption]{typ: ent.TypeAddress, tq: q}, nil
	case *ent.AddressGlobalQuery:
		return &query[*ent.AddressGlobalQuery, predicate.AddressGlobal, addressglobal.OrderOption]{typ: ent.TypeAddressGlobal, tq: q}, nil
	case *ent.BusinessHoursPeriodQuery:
		return &query[*ent.BusinessHoursPeriodQuery, predicate.BusinessHoursPeriod, businesshoursperiod.OrderOption]{typ: ent.TypeBusinessHoursPeriod, tq: q}, nil
	case *ent.CarrierQuery:
		return &query[*ent.CarrierQuery, predicate.Carrier, carrier.OrderOption]{typ: ent.TypeCarrier, tq: q}, nil
	case *ent.CarrierAdditionalServiceBringQuery:
		return &query[*ent.CarrierAdditionalServiceBringQuery, predicate.CarrierAdditionalServiceBring, carrieradditionalservicebring.OrderOption]{typ: ent.TypeCarrierAdditionalServiceBring, tq: q}, nil
	case *ent.CarrierAdditionalServiceDAOQuery:
		return &query[*ent.CarrierAdditionalServiceDAOQuery, predicate.CarrierAdditionalServiceDAO, carrieradditionalservicedao.OrderOption]{typ: ent.TypeCarrierAdditionalServiceDAO, tq: q}, nil
	case *ent.CarrierAdditionalServiceDFQuery:
		return &query[*ent.CarrierAdditionalServiceDFQuery, predicate.CarrierAdditionalServiceDF, carrieradditionalservicedf.OrderOption]{typ: ent.TypeCarrierAdditionalServiceDF, tq: q}, nil
	case *ent.CarrierAdditionalServiceDSVQuery:
		return &query[*ent.CarrierAdditionalServiceDSVQuery, predicate.CarrierAdditionalServiceDSV, carrieradditionalservicedsv.OrderOption]{typ: ent.TypeCarrierAdditionalServiceDSV, tq: q}, nil
	case *ent.CarrierAdditionalServiceEasyPostQuery:
		return &query[*ent.CarrierAdditionalServiceEasyPostQuery, predicate.CarrierAdditionalServiceEasyPost, carrieradditionalserviceeasypost.OrderOption]{typ: ent.TypeCarrierAdditionalServiceEasyPost, tq: q}, nil
	case *ent.CarrierAdditionalServiceGLSQuery:
		return &query[*ent.CarrierAdditionalServiceGLSQuery, predicate.CarrierAdditionalServiceGLS, carrieradditionalservicegls.OrderOption]{typ: ent.TypeCarrierAdditionalServiceGLS, tq: q}, nil
	case *ent.CarrierAdditionalServicePostNordQuery:
		return &query[*ent.CarrierAdditionalServicePostNordQuery, predicate.CarrierAdditionalServicePostNord, carrieradditionalservicepostnord.OrderOption]{typ: ent.TypeCarrierAdditionalServicePostNord, tq: q}, nil
	case *ent.CarrierAdditionalServiceUSPSQuery:
		return &query[*ent.CarrierAdditionalServiceUSPSQuery, predicate.CarrierAdditionalServiceUSPS, carrieradditionalserviceusps.OrderOption]{typ: ent.TypeCarrierAdditionalServiceUSPS, tq: q}, nil
	case *ent.CarrierBrandQuery:
		return &query[*ent.CarrierBrandQuery, predicate.CarrierBrand, carrierbrand.OrderOption]{typ: ent.TypeCarrierBrand, tq: q}, nil
	case *ent.CarrierBringQuery:
		return &query[*ent.CarrierBringQuery, predicate.CarrierBring, carrierbring.OrderOption]{typ: ent.TypeCarrierBring, tq: q}, nil
	case *ent.CarrierDAOQuery:
		return &query[*ent.CarrierDAOQuery, predicate.CarrierDAO, carrierdao.OrderOption]{typ: ent.TypeCarrierDAO, tq: q}, nil
	case *ent.CarrierDFQuery:
		return &query[*ent.CarrierDFQuery, predicate.CarrierDF, carrierdf.OrderOption]{typ: ent.TypeCarrierDF, tq: q}, nil
	case *ent.CarrierDSVQuery:
		return &query[*ent.CarrierDSVQuery, predicate.CarrierDSV, carrierdsv.OrderOption]{typ: ent.TypeCarrierDSV, tq: q}, nil
	case *ent.CarrierEasyPostQuery:
		return &query[*ent.CarrierEasyPostQuery, predicate.CarrierEasyPost, carriereasypost.OrderOption]{typ: ent.TypeCarrierEasyPost, tq: q}, nil
	case *ent.CarrierGLSQuery:
		return &query[*ent.CarrierGLSQuery, predicate.CarrierGLS, carriergls.OrderOption]{typ: ent.TypeCarrierGLS, tq: q}, nil
	case *ent.CarrierPostNordQuery:
		return &query[*ent.CarrierPostNordQuery, predicate.CarrierPostNord, carrierpostnord.OrderOption]{typ: ent.TypeCarrierPostNord, tq: q}, nil
	case *ent.CarrierServiceQuery:
		return &query[*ent.CarrierServiceQuery, predicate.CarrierService, carrierservice.OrderOption]{typ: ent.TypeCarrierService, tq: q}, nil
	case *ent.CarrierServiceBringQuery:
		return &query[*ent.CarrierServiceBringQuery, predicate.CarrierServiceBring, carrierservicebring.OrderOption]{typ: ent.TypeCarrierServiceBring, tq: q}, nil
	case *ent.CarrierServiceDAOQuery:
		return &query[*ent.CarrierServiceDAOQuery, predicate.CarrierServiceDAO, carrierservicedao.OrderOption]{typ: ent.TypeCarrierServiceDAO, tq: q}, nil
	case *ent.CarrierServiceDFQuery:
		return &query[*ent.CarrierServiceDFQuery, predicate.CarrierServiceDF, carrierservicedf.OrderOption]{typ: ent.TypeCarrierServiceDF, tq: q}, nil
	case *ent.CarrierServiceDSVQuery:
		return &query[*ent.CarrierServiceDSVQuery, predicate.CarrierServiceDSV, carrierservicedsv.OrderOption]{typ: ent.TypeCarrierServiceDSV, tq: q}, nil
	case *ent.CarrierServiceEasyPostQuery:
		return &query[*ent.CarrierServiceEasyPostQuery, predicate.CarrierServiceEasyPost, carrierserviceeasypost.OrderOption]{typ: ent.TypeCarrierServiceEasyPost, tq: q}, nil
	case *ent.CarrierServiceGLSQuery:
		return &query[*ent.CarrierServiceGLSQuery, predicate.CarrierServiceGLS, carrierservicegls.OrderOption]{typ: ent.TypeCarrierServiceGLS, tq: q}, nil
	case *ent.CarrierServicePostNordQuery:
		return &query[*ent.CarrierServicePostNordQuery, predicate.CarrierServicePostNord, carrierservicepostnord.OrderOption]{typ: ent.TypeCarrierServicePostNord, tq: q}, nil
	case *ent.CarrierServiceUSPSQuery:
		return &query[*ent.CarrierServiceUSPSQuery, predicate.CarrierServiceUSPS, carrierserviceusps.OrderOption]{typ: ent.TypeCarrierServiceUSPS, tq: q}, nil
	case *ent.CarrierUSPSQuery:
		return &query[*ent.CarrierUSPSQuery, predicate.CarrierUSPS, carrierusps.OrderOption]{typ: ent.TypeCarrierUSPS, tq: q}, nil
	case *ent.ChangeHistoryQuery:
		return &query[*ent.ChangeHistoryQuery, predicate.ChangeHistory, changehistory.OrderOption]{typ: ent.TypeChangeHistory, tq: q}, nil
	case *ent.ColliQuery:
		return &query[*ent.ColliQuery, predicate.Colli, colli.OrderOption]{typ: ent.TypeColli, tq: q}, nil
	case *ent.ConnectOptionCarrierQuery:
		return &query[*ent.ConnectOptionCarrierQuery, predicate.ConnectOptionCarrier, connectoptioncarrier.OrderOption]{typ: ent.TypeConnectOptionCarrier, tq: q}, nil
	case *ent.ConnectOptionPlatformQuery:
		return &query[*ent.ConnectOptionPlatformQuery, predicate.ConnectOptionPlatform, connectoptionplatform.OrderOption]{typ: ent.TypeConnectOptionPlatform, tq: q}, nil
	case *ent.ConnectionQuery:
		return &query[*ent.ConnectionQuery, predicate.Connection, connection.OrderOption]{typ: ent.TypeConnection, tq: q}, nil
	case *ent.ConnectionBrandQuery:
		return &query[*ent.ConnectionBrandQuery, predicate.ConnectionBrand, connectionbrand.OrderOption]{typ: ent.TypeConnectionBrand, tq: q}, nil
	case *ent.ConnectionLookupQuery:
		return &query[*ent.ConnectionLookupQuery, predicate.ConnectionLookup, connectionlookup.OrderOption]{typ: ent.TypeConnectionLookup, tq: q}, nil
	case *ent.ConnectionShopifyQuery:
		return &query[*ent.ConnectionShopifyQuery, predicate.ConnectionShopify, connectionshopify.OrderOption]{typ: ent.TypeConnectionShopify, tq: q}, nil
	case *ent.ConsolidationQuery:
		return &query[*ent.ConsolidationQuery, predicate.Consolidation, consolidation.OrderOption]{typ: ent.TypeConsolidation, tq: q}, nil
	case *ent.ContactQuery:
		return &query[*ent.ContactQuery, predicate.Contact, contact.OrderOption]{typ: ent.TypeContact, tq: q}, nil
	case *ent.CountryQuery:
		return &query[*ent.CountryQuery, predicate.Country, country.OrderOption]{typ: ent.TypeCountry, tq: q}, nil
	case *ent.CountryHarmonizedCodeQuery:
		return &query[*ent.CountryHarmonizedCodeQuery, predicate.CountryHarmonizedCode, countryharmonizedcode.OrderOption]{typ: ent.TypeCountryHarmonizedCode, tq: q}, nil
	case *ent.CurrencyQuery:
		return &query[*ent.CurrencyQuery, predicate.Currency, currency.OrderOption]{typ: ent.TypeCurrency, tq: q}, nil
	case *ent.DeliveryOptionQuery:
		return &query[*ent.DeliveryOptionQuery, predicate.DeliveryOption, deliveryoption.OrderOption]{typ: ent.TypeDeliveryOption, tq: q}, nil
	case *ent.DeliveryOptionBringQuery:
		return &query[*ent.DeliveryOptionBringQuery, predicate.DeliveryOptionBring, deliveryoptionbring.OrderOption]{typ: ent.TypeDeliveryOptionBring, tq: q}, nil
	case *ent.DeliveryOptionDAOQuery:
		return &query[*ent.DeliveryOptionDAOQuery, predicate.DeliveryOptionDAO, deliveryoptiondao.OrderOption]{typ: ent.TypeDeliveryOptionDAO, tq: q}, nil
	case *ent.DeliveryOptionDFQuery:
		return &query[*ent.DeliveryOptionDFQuery, predicate.DeliveryOptionDF, deliveryoptiondf.OrderOption]{typ: ent.TypeDeliveryOptionDF, tq: q}, nil
	case *ent.DeliveryOptionDSVQuery:
		return &query[*ent.DeliveryOptionDSVQuery, predicate.DeliveryOptionDSV, deliveryoptiondsv.OrderOption]{typ: ent.TypeDeliveryOptionDSV, tq: q}, nil
	case *ent.DeliveryOptionEasyPostQuery:
		return &query[*ent.DeliveryOptionEasyPostQuery, predicate.DeliveryOptionEasyPost, deliveryoptioneasypost.OrderOption]{typ: ent.TypeDeliveryOptionEasyPost, tq: q}, nil
	case *ent.DeliveryOptionGLSQuery:
		return &query[*ent.DeliveryOptionGLSQuery, predicate.DeliveryOptionGLS, deliveryoptiongls.OrderOption]{typ: ent.TypeDeliveryOptionGLS, tq: q}, nil
	case *ent.DeliveryOptionPostNordQuery:
		return &query[*ent.DeliveryOptionPostNordQuery, predicate.DeliveryOptionPostNord, deliveryoptionpostnord.OrderOption]{typ: ent.TypeDeliveryOptionPostNord, tq: q}, nil
	case *ent.DeliveryOptionUSPSQuery:
		return &query[*ent.DeliveryOptionUSPSQuery, predicate.DeliveryOptionUSPS, deliveryoptionusps.OrderOption]{typ: ent.TypeDeliveryOptionUSPS, tq: q}, nil
	case *ent.DeliveryRuleQuery:
		return &query[*ent.DeliveryRuleQuery, predicate.DeliveryRule, deliveryrule.OrderOption]{typ: ent.TypeDeliveryRule, tq: q}, nil
	case *ent.DeliveryRuleConstraintQuery:
		return &query[*ent.DeliveryRuleConstraintQuery, predicate.DeliveryRuleConstraint, deliveryruleconstraint.OrderOption]{typ: ent.TypeDeliveryRuleConstraint, tq: q}, nil
	case *ent.DeliveryRuleConstraintGroupQuery:
		return &query[*ent.DeliveryRuleConstraintGroupQuery, predicate.DeliveryRuleConstraintGroup, deliveryruleconstraintgroup.OrderOption]{typ: ent.TypeDeliveryRuleConstraintGroup, tq: q}, nil
	case *ent.DocumentQuery:
		return &query[*ent.DocumentQuery, predicate.Document, document.OrderOption]{typ: ent.TypeDocument, tq: q}, nil
	case *ent.DocumentFileQuery:
		return &query[*ent.DocumentFileQuery, predicate.DocumentFile, documentfile.OrderOption]{typ: ent.TypeDocumentFile, tq: q}, nil
	case *ent.EmailTemplateQuery:
		return &query[*ent.EmailTemplateQuery, predicate.EmailTemplate, emailtemplate.OrderOption]{typ: ent.TypeEmailTemplate, tq: q}, nil
	case *ent.HypothesisTestQuery:
		return &query[*ent.HypothesisTestQuery, predicate.HypothesisTest, hypothesistest.OrderOption]{typ: ent.TypeHypothesisTest, tq: q}, nil
	case *ent.HypothesisTestDeliveryOptionQuery:
		return &query[*ent.HypothesisTestDeliveryOptionQuery, predicate.HypothesisTestDeliveryOption, hypothesistestdeliveryoption.OrderOption]{typ: ent.TypeHypothesisTestDeliveryOption, tq: q}, nil
	case *ent.HypothesisTestDeliveryOptionLookupQuery:
		return &query[*ent.HypothesisTestDeliveryOptionLookupQuery, predicate.HypothesisTestDeliveryOptionLookup, hypothesistestdeliveryoptionlookup.OrderOption]{typ: ent.TypeHypothesisTestDeliveryOptionLookup, tq: q}, nil
	case *ent.HypothesisTestDeliveryOptionRequestQuery:
		return &query[*ent.HypothesisTestDeliveryOptionRequestQuery, predicate.HypothesisTestDeliveryOptionRequest, hypothesistestdeliveryoptionrequest.OrderOption]{typ: ent.TypeHypothesisTestDeliveryOptionRequest, tq: q}, nil
	case *ent.InventoryItemQuery:
		return &query[*ent.InventoryItemQuery, predicate.InventoryItem, inventoryitem.OrderOption]{typ: ent.TypeInventoryItem, tq: q}, nil
	case *ent.LanguageQuery:
		return &query[*ent.LanguageQuery, predicate.Language, language.OrderOption]{typ: ent.TypeLanguage, tq: q}, nil
	case *ent.LocationQuery:
		return &query[*ent.LocationQuery, predicate.Location, location.OrderOption]{typ: ent.TypeLocation, tq: q}, nil
	case *ent.LocationTagQuery:
		return &query[*ent.LocationTagQuery, predicate.LocationTag, locationtag.OrderOption]{typ: ent.TypeLocationTag, tq: q}, nil
	case *ent.NotificationQuery:
		return &query[*ent.NotificationQuery, predicate.Notification, notification.OrderOption]{typ: ent.TypeNotification, tq: q}, nil
	case *ent.OTKRequestsQuery:
		return &query[*ent.OTKRequestsQuery, predicate.OTKRequests, otkrequests.OrderOption]{typ: ent.TypeOTKRequests, tq: q}, nil
	case *ent.OrderQuery:
		return &query[*ent.OrderQuery, predicate.Order, order.OrderOption]{typ: ent.TypeOrder, tq: q}, nil
	case *ent.OrderHistoryQuery:
		return &query[*ent.OrderHistoryQuery, predicate.OrderHistory, orderhistory.OrderOption]{typ: ent.TypeOrderHistory, tq: q}, nil
	case *ent.OrderLineQuery:
		return &query[*ent.OrderLineQuery, predicate.OrderLine, orderline.OrderOption]{typ: ent.TypeOrderLine, tq: q}, nil
	case *ent.OrderSenderQuery:
		return &query[*ent.OrderSenderQuery, predicate.OrderSender, ordersender.OrderOption]{typ: ent.TypeOrderSender, tq: q}, nil
	case *ent.PackagingQuery:
		return &query[*ent.PackagingQuery, predicate.Packaging, packaging.OrderOption]{typ: ent.TypePackaging, tq: q}, nil
	case *ent.PackagingDFQuery:
		return &query[*ent.PackagingDFQuery, predicate.PackagingDF, packagingdf.OrderOption]{typ: ent.TypePackagingDF, tq: q}, nil
	case *ent.PackagingUSPSQuery:
		return &query[*ent.PackagingUSPSQuery, predicate.PackagingUSPS, packagingusps.OrderOption]{typ: ent.TypePackagingUSPS, tq: q}, nil
	case *ent.PackagingUSPSProcessingCategoryQuery:
		return &query[*ent.PackagingUSPSProcessingCategoryQuery, predicate.PackagingUSPSProcessingCategory, packaginguspsprocessingcategory.OrderOption]{typ: ent.TypePackagingUSPSProcessingCategory, tq: q}, nil
	case *ent.PackagingUSPSRateIndicatorQuery:
		return &query[*ent.PackagingUSPSRateIndicatorQuery, predicate.PackagingUSPSRateIndicator, packaginguspsrateindicator.OrderOption]{typ: ent.TypePackagingUSPSRateIndicator, tq: q}, nil
	case *ent.PalletQuery:
		return &query[*ent.PalletQuery, predicate.Pallet, pallet.OrderOption]{typ: ent.TypePallet, tq: q}, nil
	case *ent.ParcelShopQuery:
		return &query[*ent.ParcelShopQuery, predicate.ParcelShop, parcelshop.OrderOption]{typ: ent.TypeParcelShop, tq: q}, nil
	case *ent.ParcelShopBringQuery:
		return &query[*ent.ParcelShopBringQuery, predicate.ParcelShopBring, parcelshopbring.OrderOption]{typ: ent.TypeParcelShopBring, tq: q}, nil
	case *ent.ParcelShopDAOQuery:
		return &query[*ent.ParcelShopDAOQuery, predicate.ParcelShopDAO, parcelshopdao.OrderOption]{typ: ent.TypeParcelShopDAO, tq: q}, nil
	case *ent.ParcelShopGLSQuery:
		return &query[*ent.ParcelShopGLSQuery, predicate.ParcelShopGLS, parcelshopgls.OrderOption]{typ: ent.TypeParcelShopGLS, tq: q}, nil
	case *ent.ParcelShopPostNordQuery:
		return &query[*ent.ParcelShopPostNordQuery, predicate.ParcelShopPostNord, parcelshoppostnord.OrderOption]{typ: ent.TypeParcelShopPostNord, tq: q}, nil
	case *ent.PlanQuery:
		return &query[*ent.PlanQuery, predicate.Plan, plan.OrderOption]{typ: ent.TypePlan, tq: q}, nil
	case *ent.PlanHistoryQuery:
		return &query[*ent.PlanHistoryQuery, predicate.PlanHistory, planhistory.OrderOption]{typ: ent.TypePlanHistory, tq: q}, nil
	case *ent.PrintJobQuery:
		return &query[*ent.PrintJobQuery, predicate.PrintJob, printjob.OrderOption]{typ: ent.TypePrintJob, tq: q}, nil
	case *ent.PrinterQuery:
		return &query[*ent.PrinterQuery, predicate.Printer, printer.OrderOption]{typ: ent.TypePrinter, tq: q}, nil
	case *ent.ProductQuery:
		return &query[*ent.ProductQuery, predicate.Product, product.OrderOption]{typ: ent.TypeProduct, tq: q}, nil
	case *ent.ProductImageQuery:
		return &query[*ent.ProductImageQuery, predicate.ProductImage, productimage.OrderOption]{typ: ent.TypeProductImage, tq: q}, nil
	case *ent.ProductTagQuery:
		return &query[*ent.ProductTagQuery, predicate.ProductTag, producttag.OrderOption]{typ: ent.TypeProductTag, tq: q}, nil
	case *ent.ProductVariantQuery:
		return &query[*ent.ProductVariantQuery, predicate.ProductVariant, productvariant.OrderOption]{typ: ent.TypeProductVariant, tq: q}, nil
	case *ent.ReturnColliQuery:
		return &query[*ent.ReturnColliQuery, predicate.ReturnColli, returncolli.OrderOption]{typ: ent.TypeReturnColli, tq: q}, nil
	case *ent.ReturnColliHistoryQuery:
		return &query[*ent.ReturnColliHistoryQuery, predicate.ReturnColliHistory, returncollihistory.OrderOption]{typ: ent.TypeReturnColliHistory, tq: q}, nil
	case *ent.ReturnOrderLineQuery:
		return &query[*ent.ReturnOrderLineQuery, predicate.ReturnOrderLine, returnorderline.OrderOption]{typ: ent.TypeReturnOrderLine, tq: q}, nil
	case *ent.ReturnPortalQuery:
		return &query[*ent.ReturnPortalQuery, predicate.ReturnPortal, returnportal.OrderOption]{typ: ent.TypeReturnPortal, tq: q}, nil
	case *ent.ReturnPortalClaimQuery:
		return &query[*ent.ReturnPortalClaimQuery, predicate.ReturnPortalClaim, returnportalclaim.OrderOption]{typ: ent.TypeReturnPortalClaim, tq: q}, nil
	case *ent.SeatGroupQuery:
		return &query[*ent.SeatGroupQuery, predicate.SeatGroup, seatgroup.OrderOption]{typ: ent.TypeSeatGroup, tq: q}, nil
	case *ent.SeatGroupAccessRightQuery:
		return &query[*ent.SeatGroupAccessRightQuery, predicate.SeatGroupAccessRight, seatgroupaccessright.OrderOption]{typ: ent.TypeSeatGroupAccessRight, tq: q}, nil
	case *ent.ShipmentQuery:
		return &query[*ent.ShipmentQuery, predicate.Shipment, shipment.OrderOption]{typ: ent.TypeShipment, tq: q}, nil
	case *ent.ShipmentBringQuery:
		return &query[*ent.ShipmentBringQuery, predicate.ShipmentBring, shipmentbring.OrderOption]{typ: ent.TypeShipmentBring, tq: q}, nil
	case *ent.ShipmentDAOQuery:
		return &query[*ent.ShipmentDAOQuery, predicate.ShipmentDAO, shipmentdao.OrderOption]{typ: ent.TypeShipmentDAO, tq: q}, nil
	case *ent.ShipmentDFQuery:
		return &query[*ent.ShipmentDFQuery, predicate.ShipmentDF, shipmentdf.OrderOption]{typ: ent.TypeShipmentDF, tq: q}, nil
	case *ent.ShipmentDSVQuery:
		return &query[*ent.ShipmentDSVQuery, predicate.ShipmentDSV, shipmentdsv.OrderOption]{typ: ent.TypeShipmentDSV, tq: q}, nil
	case *ent.ShipmentEasyPostQuery:
		return &query[*ent.ShipmentEasyPostQuery, predicate.ShipmentEasyPost, shipmenteasypost.OrderOption]{typ: ent.TypeShipmentEasyPost, tq: q}, nil
	case *ent.ShipmentGLSQuery:
		return &query[*ent.ShipmentGLSQuery, predicate.ShipmentGLS, shipmentgls.OrderOption]{typ: ent.TypeShipmentGLS, tq: q}, nil
	case *ent.ShipmentHistoryQuery:
		return &query[*ent.ShipmentHistoryQuery, predicate.ShipmentHistory, shipmenthistory.OrderOption]{typ: ent.TypeShipmentHistory, tq: q}, nil
	case *ent.ShipmentPalletQuery:
		return &query[*ent.ShipmentPalletQuery, predicate.ShipmentPallet, shipmentpallet.OrderOption]{typ: ent.TypeShipmentPallet, tq: q}, nil
	case *ent.ShipmentParcelQuery:
		return &query[*ent.ShipmentParcelQuery, predicate.ShipmentParcel, shipmentparcel.OrderOption]{typ: ent.TypeShipmentParcel, tq: q}, nil
	case *ent.ShipmentPostNordQuery:
		return &query[*ent.ShipmentPostNordQuery, predicate.ShipmentPostNord, shipmentpostnord.OrderOption]{typ: ent.TypeShipmentPostNord, tq: q}, nil
	case *ent.ShipmentUSPSQuery:
		return &query[*ent.ShipmentUSPSQuery, predicate.ShipmentUSPS, shipmentusps.OrderOption]{typ: ent.TypeShipmentUSPS, tq: q}, nil
	case *ent.SignupOptionsQuery:
		return &query[*ent.SignupOptionsQuery, predicate.SignupOptions, signupoptions.OrderOption]{typ: ent.TypeSignupOptions, tq: q}, nil
	case *ent.SystemEventsQuery:
		return &query[*ent.SystemEventsQuery, predicate.SystemEvents, systemevents.OrderOption]{typ: ent.TypeSystemEvents, tq: q}, nil
	case *ent.TenantQuery:
		return &query[*ent.TenantQuery, predicate.Tenant, tenant.OrderOption]{typ: ent.TypeTenant, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserSeatQuery:
		return &query[*ent.UserSeatQuery, predicate.UserSeat, userseat.OrderOption]{typ: ent.TypeUserSeat, tq: q}, nil
	case *ent.WorkspaceRecentScanQuery:
		return &query[*ent.WorkspaceRecentScanQuery, predicate.WorkspaceRecentScan, workspacerecentscan.OrderOption]{typ: ent.TypeWorkspaceRecentScan, tq: q}, nil
	case *ent.WorkstationQuery:
		return &query[*ent.WorkstationQuery, predicate.Workstation, workstation.OrderOption]{typ: ent.TypeWorkstation, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
