// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceUpdate is the builder for updating CarrierService entities.
type CarrierServiceUpdate struct {
	config
	hooks    []Hook
	mutation *CarrierServiceMutation
}

// Where appends a list predicates to the CarrierServiceUpdate builder.
func (csu *CarrierServiceUpdate) Where(ps ...predicate.CarrierService) *CarrierServiceUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetLabel sets the "label" field.
func (csu *CarrierServiceUpdate) SetLabel(s string) *CarrierServiceUpdate {
	csu.mutation.SetLabel(s)
	return csu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableLabel(s *string) *CarrierServiceUpdate {
	if s != nil {
		csu.SetLabel(*s)
	}
	return csu
}

// SetInternalID sets the "internal_id" field.
func (csu *CarrierServiceUpdate) SetInternalID(s string) *CarrierServiceUpdate {
	csu.mutation.SetInternalID(s)
	return csu
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableInternalID(s *string) *CarrierServiceUpdate {
	if s != nil {
		csu.SetInternalID(*s)
	}
	return csu
}

// SetReturn sets the "return" field.
func (csu *CarrierServiceUpdate) SetReturn(b bool) *CarrierServiceUpdate {
	csu.mutation.SetReturn(b)
	return csu
}

// SetNillableReturn sets the "return" field if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableReturn(b *bool) *CarrierServiceUpdate {
	if b != nil {
		csu.SetReturn(*b)
	}
	return csu
}

// SetConsolidation sets the "consolidation" field.
func (csu *CarrierServiceUpdate) SetConsolidation(b bool) *CarrierServiceUpdate {
	csu.mutation.SetConsolidation(b)
	return csu
}

// SetNillableConsolidation sets the "consolidation" field if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableConsolidation(b *bool) *CarrierServiceUpdate {
	if b != nil {
		csu.SetConsolidation(*b)
	}
	return csu
}

// SetDeliveryPointOptional sets the "delivery_point_optional" field.
func (csu *CarrierServiceUpdate) SetDeliveryPointOptional(b bool) *CarrierServiceUpdate {
	csu.mutation.SetDeliveryPointOptional(b)
	return csu
}

// SetNillableDeliveryPointOptional sets the "delivery_point_optional" field if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableDeliveryPointOptional(b *bool) *CarrierServiceUpdate {
	if b != nil {
		csu.SetDeliveryPointOptional(*b)
	}
	return csu
}

// SetDeliveryPointRequired sets the "delivery_point_required" field.
func (csu *CarrierServiceUpdate) SetDeliveryPointRequired(b bool) *CarrierServiceUpdate {
	csu.mutation.SetDeliveryPointRequired(b)
	return csu
}

// SetNillableDeliveryPointRequired sets the "delivery_point_required" field if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableDeliveryPointRequired(b *bool) *CarrierServiceUpdate {
	if b != nil {
		csu.SetDeliveryPointRequired(*b)
	}
	return csu
}

// SetCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServicePostNordID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServicePostNordID(id)
	return csu
}

// SetNillableCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServicePostNordID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServicePostNordID(*id)
	}
	return csu
}

// SetCarrierServicePostNord sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (csu *CarrierServiceUpdate) SetCarrierServicePostNord(c *CarrierServicePostNord) *CarrierServiceUpdate {
	return csu.SetCarrierServicePostNordID(c.ID)
}

// SetCarrierServiceDAOID sets the "carrier_service_dao" edge to the CarrierServiceDAO entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServiceDAOID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServiceDAOID(id)
	return csu
}

// SetNillableCarrierServiceDAOID sets the "carrier_service_dao" edge to the CarrierServiceDAO entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServiceDAOID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServiceDAOID(*id)
	}
	return csu
}

// SetCarrierServiceDAO sets the "carrier_service_dao" edge to the CarrierServiceDAO entity.
func (csu *CarrierServiceUpdate) SetCarrierServiceDAO(c *CarrierServiceDAO) *CarrierServiceUpdate {
	return csu.SetCarrierServiceDAOID(c.ID)
}

// SetCarrierServiceDFID sets the "carrier_service_df" edge to the CarrierServiceDF entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServiceDFID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServiceDFID(id)
	return csu
}

// SetNillableCarrierServiceDFID sets the "carrier_service_df" edge to the CarrierServiceDF entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServiceDFID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServiceDFID(*id)
	}
	return csu
}

// SetCarrierServiceDF sets the "carrier_service_df" edge to the CarrierServiceDF entity.
func (csu *CarrierServiceUpdate) SetCarrierServiceDF(c *CarrierServiceDF) *CarrierServiceUpdate {
	return csu.SetCarrierServiceDFID(c.ID)
}

// SetCarrierServiceDSVID sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServiceDSVID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServiceDSVID(id)
	return csu
}

// SetNillableCarrierServiceDSVID sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServiceDSVID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServiceDSVID(*id)
	}
	return csu
}

// SetCarrierServiceDSV sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity.
func (csu *CarrierServiceUpdate) SetCarrierServiceDSV(c *CarrierServiceDSV) *CarrierServiceUpdate {
	return csu.SetCarrierServiceDSVID(c.ID)
}

// SetCarrierServEasyPostID sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServEasyPostID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServEasyPostID(id)
	return csu
}

// SetNillableCarrierServEasyPostID sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServEasyPostID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServEasyPostID(*id)
	}
	return csu
}

// SetCarrierServEasyPost sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity.
func (csu *CarrierServiceUpdate) SetCarrierServEasyPost(c *CarrierServiceEasyPost) *CarrierServiceUpdate {
	return csu.SetCarrierServEasyPostID(c.ID)
}

// SetCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServiceGLSID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServiceGLSID(id)
	return csu
}

// SetNillableCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServiceGLSID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServiceGLSID(*id)
	}
	return csu
}

// SetCarrierServiceGLS sets the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (csu *CarrierServiceUpdate) SetCarrierServiceGLS(c *CarrierServiceGLS) *CarrierServiceUpdate {
	return csu.SetCarrierServiceGLSID(c.ID)
}

// SetCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServiceUSPSID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServiceUSPSID(id)
	return csu
}

// SetNillableCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServiceUSPSID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServiceUSPSID(*id)
	}
	return csu
}

// SetCarrierServiceUSPS sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (csu *CarrierServiceUpdate) SetCarrierServiceUSPS(c *CarrierServiceUSPS) *CarrierServiceUpdate {
	return csu.SetCarrierServiceUSPSID(c.ID)
}

// SetCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierServiceBringID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierServiceBringID(id)
	return csu
}

// SetNillableCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID if the given value is not nil.
func (csu *CarrierServiceUpdate) SetNillableCarrierServiceBringID(id *pulid.ID) *CarrierServiceUpdate {
	if id != nil {
		csu = csu.SetCarrierServiceBringID(*id)
	}
	return csu
}

// SetCarrierServiceBring sets the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (csu *CarrierServiceUpdate) SetCarrierServiceBring(c *CarrierServiceBring) *CarrierServiceUpdate {
	return csu.SetCarrierServiceBringID(c.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (csu *CarrierServiceUpdate) SetCarrierBrandID(id pulid.ID) *CarrierServiceUpdate {
	csu.mutation.SetCarrierBrandID(id)
	return csu
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (csu *CarrierServiceUpdate) SetCarrierBrand(c *CarrierBrand) *CarrierServiceUpdate {
	return csu.SetCarrierBrandID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (csu *CarrierServiceUpdate) AddDeliveryOptionIDs(ids ...pulid.ID) *CarrierServiceUpdate {
	csu.mutation.AddDeliveryOptionIDs(ids...)
	return csu
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (csu *CarrierServiceUpdate) AddDeliveryOption(d ...*DeliveryOption) *CarrierServiceUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return csu.AddDeliveryOptionIDs(ids...)
}

// Mutation returns the CarrierServiceMutation object of the builder.
func (csu *CarrierServiceUpdate) Mutation() *CarrierServiceMutation {
	return csu.mutation
}

// ClearCarrierServicePostNord clears the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (csu *CarrierServiceUpdate) ClearCarrierServicePostNord() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServicePostNord()
	return csu
}

// ClearCarrierServiceDAO clears the "carrier_service_dao" edge to the CarrierServiceDAO entity.
func (csu *CarrierServiceUpdate) ClearCarrierServiceDAO() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServiceDAO()
	return csu
}

// ClearCarrierServiceDF clears the "carrier_service_df" edge to the CarrierServiceDF entity.
func (csu *CarrierServiceUpdate) ClearCarrierServiceDF() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServiceDF()
	return csu
}

// ClearCarrierServiceDSV clears the "carrier_service_dsv" edge to the CarrierServiceDSV entity.
func (csu *CarrierServiceUpdate) ClearCarrierServiceDSV() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServiceDSV()
	return csu
}

// ClearCarrierServEasyPost clears the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity.
func (csu *CarrierServiceUpdate) ClearCarrierServEasyPost() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServEasyPost()
	return csu
}

// ClearCarrierServiceGLS clears the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (csu *CarrierServiceUpdate) ClearCarrierServiceGLS() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServiceGLS()
	return csu
}

// ClearCarrierServiceUSPS clears the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (csu *CarrierServiceUpdate) ClearCarrierServiceUSPS() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServiceUSPS()
	return csu
}

// ClearCarrierServiceBring clears the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (csu *CarrierServiceUpdate) ClearCarrierServiceBring() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierServiceBring()
	return csu
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (csu *CarrierServiceUpdate) ClearCarrierBrand() *CarrierServiceUpdate {
	csu.mutation.ClearCarrierBrand()
	return csu
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (csu *CarrierServiceUpdate) ClearDeliveryOption() *CarrierServiceUpdate {
	csu.mutation.ClearDeliveryOption()
	return csu
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (csu *CarrierServiceUpdate) RemoveDeliveryOptionIDs(ids ...pulid.ID) *CarrierServiceUpdate {
	csu.mutation.RemoveDeliveryOptionIDs(ids...)
	return csu
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (csu *CarrierServiceUpdate) RemoveDeliveryOption(d ...*DeliveryOption) *CarrierServiceUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return csu.RemoveDeliveryOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CarrierServiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CarrierServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CarrierServiceUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CarrierServiceUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CarrierServiceUpdate) check() error {
	if csu.mutation.CarrierBrandCleared() && len(csu.mutation.CarrierBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierService.carrier_brand"`)
	}
	return nil
}

func (csu *CarrierServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservice.Table, carrierservice.Columns, sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Label(); ok {
		_spec.SetField(carrierservice.FieldLabel, field.TypeString, value)
	}
	if value, ok := csu.mutation.InternalID(); ok {
		_spec.SetField(carrierservice.FieldInternalID, field.TypeString, value)
	}
	if value, ok := csu.mutation.Return(); ok {
		_spec.SetField(carrierservice.FieldReturn, field.TypeBool, value)
	}
	if value, ok := csu.mutation.Consolidation(); ok {
		_spec.SetField(carrierservice.FieldConsolidation, field.TypeBool, value)
	}
	if value, ok := csu.mutation.DeliveryPointOptional(); ok {
		_spec.SetField(carrierservice.FieldDeliveryPointOptional, field.TypeBool, value)
	}
	if value, ok := csu.mutation.DeliveryPointRequired(); ok {
		_spec.SetField(carrierservice.FieldDeliveryPointRequired, field.TypeBool, value)
	}
	if csu.mutation.CarrierServicePostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServicePostNordTable,
			Columns: []string{carrierservice.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServicePostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServicePostNordTable,
			Columns: []string{carrierservice.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDAOTable,
			Columns: []string{carrierservice.CarrierServiceDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDAOTable,
			Columns: []string{carrierservice.CarrierServiceDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServiceDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDFTable,
			Columns: []string{carrierservice.CarrierServiceDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServiceDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDFTable,
			Columns: []string{carrierservice.CarrierServiceDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDSVTable,
			Columns: []string{carrierservice.CarrierServiceDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDSVTable,
			Columns: []string{carrierservice.CarrierServiceDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServEasyPostTable,
			Columns: []string{carrierservice.CarrierServEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServEasyPostTable,
			Columns: []string{carrierservice.CarrierServEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceGLSTable,
			Columns: []string{carrierservice.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceGLSTable,
			Columns: []string{carrierservice.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceUSPSTable,
			Columns: []string{carrierservice.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceUSPSTable,
			Columns: []string{carrierservice.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceBringTable,
			Columns: []string{carrierservice.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceBringTable,
			Columns: []string{carrierservice.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrierservice.CarrierBrandTable,
			Columns: []string{carrierservice.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrierservice.CarrierBrandTable,
			Columns: []string{carrierservice.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !csu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CarrierServiceUpdateOne is the builder for updating a single CarrierService entity.
type CarrierServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarrierServiceMutation
}

// SetLabel sets the "label" field.
func (csuo *CarrierServiceUpdateOne) SetLabel(s string) *CarrierServiceUpdateOne {
	csuo.mutation.SetLabel(s)
	return csuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableLabel(s *string) *CarrierServiceUpdateOne {
	if s != nil {
		csuo.SetLabel(*s)
	}
	return csuo
}

// SetInternalID sets the "internal_id" field.
func (csuo *CarrierServiceUpdateOne) SetInternalID(s string) *CarrierServiceUpdateOne {
	csuo.mutation.SetInternalID(s)
	return csuo
}

// SetNillableInternalID sets the "internal_id" field if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableInternalID(s *string) *CarrierServiceUpdateOne {
	if s != nil {
		csuo.SetInternalID(*s)
	}
	return csuo
}

// SetReturn sets the "return" field.
func (csuo *CarrierServiceUpdateOne) SetReturn(b bool) *CarrierServiceUpdateOne {
	csuo.mutation.SetReturn(b)
	return csuo
}

// SetNillableReturn sets the "return" field if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableReturn(b *bool) *CarrierServiceUpdateOne {
	if b != nil {
		csuo.SetReturn(*b)
	}
	return csuo
}

// SetConsolidation sets the "consolidation" field.
func (csuo *CarrierServiceUpdateOne) SetConsolidation(b bool) *CarrierServiceUpdateOne {
	csuo.mutation.SetConsolidation(b)
	return csuo
}

// SetNillableConsolidation sets the "consolidation" field if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableConsolidation(b *bool) *CarrierServiceUpdateOne {
	if b != nil {
		csuo.SetConsolidation(*b)
	}
	return csuo
}

// SetDeliveryPointOptional sets the "delivery_point_optional" field.
func (csuo *CarrierServiceUpdateOne) SetDeliveryPointOptional(b bool) *CarrierServiceUpdateOne {
	csuo.mutation.SetDeliveryPointOptional(b)
	return csuo
}

// SetNillableDeliveryPointOptional sets the "delivery_point_optional" field if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableDeliveryPointOptional(b *bool) *CarrierServiceUpdateOne {
	if b != nil {
		csuo.SetDeliveryPointOptional(*b)
	}
	return csuo
}

// SetDeliveryPointRequired sets the "delivery_point_required" field.
func (csuo *CarrierServiceUpdateOne) SetDeliveryPointRequired(b bool) *CarrierServiceUpdateOne {
	csuo.mutation.SetDeliveryPointRequired(b)
	return csuo
}

// SetNillableDeliveryPointRequired sets the "delivery_point_required" field if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableDeliveryPointRequired(b *bool) *CarrierServiceUpdateOne {
	if b != nil {
		csuo.SetDeliveryPointRequired(*b)
	}
	return csuo
}

// SetCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServicePostNordID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServicePostNordID(id)
	return csuo
}

// SetNillableCarrierServicePostNordID sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServicePostNordID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServicePostNordID(*id)
	}
	return csuo
}

// SetCarrierServicePostNord sets the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServicePostNord(c *CarrierServicePostNord) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServicePostNordID(c.ID)
}

// SetCarrierServiceDAOID sets the "carrier_service_dao" edge to the CarrierServiceDAO entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceDAOID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServiceDAOID(id)
	return csuo
}

// SetNillableCarrierServiceDAOID sets the "carrier_service_dao" edge to the CarrierServiceDAO entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServiceDAOID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServiceDAOID(*id)
	}
	return csuo
}

// SetCarrierServiceDAO sets the "carrier_service_dao" edge to the CarrierServiceDAO entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceDAO(c *CarrierServiceDAO) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServiceDAOID(c.ID)
}

// SetCarrierServiceDFID sets the "carrier_service_df" edge to the CarrierServiceDF entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceDFID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServiceDFID(id)
	return csuo
}

// SetNillableCarrierServiceDFID sets the "carrier_service_df" edge to the CarrierServiceDF entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServiceDFID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServiceDFID(*id)
	}
	return csuo
}

// SetCarrierServiceDF sets the "carrier_service_df" edge to the CarrierServiceDF entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceDF(c *CarrierServiceDF) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServiceDFID(c.ID)
}

// SetCarrierServiceDSVID sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceDSVID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServiceDSVID(id)
	return csuo
}

// SetNillableCarrierServiceDSVID sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServiceDSVID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServiceDSVID(*id)
	}
	return csuo
}

// SetCarrierServiceDSV sets the "carrier_service_dsv" edge to the CarrierServiceDSV entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceDSV(c *CarrierServiceDSV) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServiceDSVID(c.ID)
}

// SetCarrierServEasyPostID sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServEasyPostID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServEasyPostID(id)
	return csuo
}

// SetNillableCarrierServEasyPostID sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServEasyPostID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServEasyPostID(*id)
	}
	return csuo
}

// SetCarrierServEasyPost sets the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServEasyPost(c *CarrierServiceEasyPost) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServEasyPostID(c.ID)
}

// SetCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceGLSID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServiceGLSID(id)
	return csuo
}

// SetNillableCarrierServiceGLSID sets the "carrier_service_gls" edge to the CarrierServiceGLS entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServiceGLSID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServiceGLSID(*id)
	}
	return csuo
}

// SetCarrierServiceGLS sets the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceGLS(c *CarrierServiceGLS) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServiceGLSID(c.ID)
}

// SetCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceUSPSID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServiceUSPSID(id)
	return csuo
}

// SetNillableCarrierServiceUSPSID sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServiceUSPSID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServiceUSPSID(*id)
	}
	return csuo
}

// SetCarrierServiceUSPS sets the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceUSPS(c *CarrierServiceUSPS) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServiceUSPSID(c.ID)
}

// SetCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceBringID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierServiceBringID(id)
	return csuo
}

// SetNillableCarrierServiceBringID sets the "carrier_service_bring" edge to the CarrierServiceBring entity by ID if the given value is not nil.
func (csuo *CarrierServiceUpdateOne) SetNillableCarrierServiceBringID(id *pulid.ID) *CarrierServiceUpdateOne {
	if id != nil {
		csuo = csuo.SetCarrierServiceBringID(*id)
	}
	return csuo
}

// SetCarrierServiceBring sets the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierServiceBring(c *CarrierServiceBring) *CarrierServiceUpdateOne {
	return csuo.SetCarrierServiceBringID(c.ID)
}

// SetCarrierBrandID sets the "carrier_brand" edge to the CarrierBrand entity by ID.
func (csuo *CarrierServiceUpdateOne) SetCarrierBrandID(id pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.SetCarrierBrandID(id)
	return csuo
}

// SetCarrierBrand sets the "carrier_brand" edge to the CarrierBrand entity.
func (csuo *CarrierServiceUpdateOne) SetCarrierBrand(c *CarrierBrand) *CarrierServiceUpdateOne {
	return csuo.SetCarrierBrandID(c.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (csuo *CarrierServiceUpdateOne) AddDeliveryOptionIDs(ids ...pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.AddDeliveryOptionIDs(ids...)
	return csuo
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (csuo *CarrierServiceUpdateOne) AddDeliveryOption(d ...*DeliveryOption) *CarrierServiceUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return csuo.AddDeliveryOptionIDs(ids...)
}

// Mutation returns the CarrierServiceMutation object of the builder.
func (csuo *CarrierServiceUpdateOne) Mutation() *CarrierServiceMutation {
	return csuo.mutation
}

// ClearCarrierServicePostNord clears the "carrier_service_post_nord" edge to the CarrierServicePostNord entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServicePostNord() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServicePostNord()
	return csuo
}

// ClearCarrierServiceDAO clears the "carrier_service_dao" edge to the CarrierServiceDAO entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServiceDAO() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServiceDAO()
	return csuo
}

// ClearCarrierServiceDF clears the "carrier_service_df" edge to the CarrierServiceDF entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServiceDF() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServiceDF()
	return csuo
}

// ClearCarrierServiceDSV clears the "carrier_service_dsv" edge to the CarrierServiceDSV entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServiceDSV() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServiceDSV()
	return csuo
}

// ClearCarrierServEasyPost clears the "carrier_serv_easy_post" edge to the CarrierServiceEasyPost entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServEasyPost() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServEasyPost()
	return csuo
}

// ClearCarrierServiceGLS clears the "carrier_service_gls" edge to the CarrierServiceGLS entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServiceGLS() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServiceGLS()
	return csuo
}

// ClearCarrierServiceUSPS clears the "carrier_service_usps" edge to the CarrierServiceUSPS entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServiceUSPS() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServiceUSPS()
	return csuo
}

// ClearCarrierServiceBring clears the "carrier_service_bring" edge to the CarrierServiceBring entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierServiceBring() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierServiceBring()
	return csuo
}

// ClearCarrierBrand clears the "carrier_brand" edge to the CarrierBrand entity.
func (csuo *CarrierServiceUpdateOne) ClearCarrierBrand() *CarrierServiceUpdateOne {
	csuo.mutation.ClearCarrierBrand()
	return csuo
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (csuo *CarrierServiceUpdateOne) ClearDeliveryOption() *CarrierServiceUpdateOne {
	csuo.mutation.ClearDeliveryOption()
	return csuo
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (csuo *CarrierServiceUpdateOne) RemoveDeliveryOptionIDs(ids ...pulid.ID) *CarrierServiceUpdateOne {
	csuo.mutation.RemoveDeliveryOptionIDs(ids...)
	return csuo
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (csuo *CarrierServiceUpdateOne) RemoveDeliveryOption(d ...*DeliveryOption) *CarrierServiceUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return csuo.RemoveDeliveryOptionIDs(ids...)
}

// Where appends a list predicates to the CarrierServiceUpdate builder.
func (csuo *CarrierServiceUpdateOne) Where(ps ...predicate.CarrierService) *CarrierServiceUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CarrierServiceUpdateOne) Select(field string, fields ...string) *CarrierServiceUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CarrierService entity.
func (csuo *CarrierServiceUpdateOne) Save(ctx context.Context) (*CarrierService, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CarrierServiceUpdateOne) SaveX(ctx context.Context) *CarrierService {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CarrierServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CarrierServiceUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CarrierServiceUpdateOne) check() error {
	if csuo.mutation.CarrierBrandCleared() && len(csuo.mutation.CarrierBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarrierService.carrier_brand"`)
	}
	return nil
}

func (csuo *CarrierServiceUpdateOne) sqlSave(ctx context.Context) (_node *CarrierService, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(carrierservice.Table, carrierservice.Columns, sqlgraph.NewFieldSpec(carrierservice.FieldID, field.TypeString))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarrierService.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierservice.FieldID)
		for _, f := range fields {
			if !carrierservice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != carrierservice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Label(); ok {
		_spec.SetField(carrierservice.FieldLabel, field.TypeString, value)
	}
	if value, ok := csuo.mutation.InternalID(); ok {
		_spec.SetField(carrierservice.FieldInternalID, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Return(); ok {
		_spec.SetField(carrierservice.FieldReturn, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.Consolidation(); ok {
		_spec.SetField(carrierservice.FieldConsolidation, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.DeliveryPointOptional(); ok {
		_spec.SetField(carrierservice.FieldDeliveryPointOptional, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.DeliveryPointRequired(); ok {
		_spec.SetField(carrierservice.FieldDeliveryPointRequired, field.TypeBool, value)
	}
	if csuo.mutation.CarrierServicePostNordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServicePostNordTable,
			Columns: []string{carrierservice.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServicePostNordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServicePostNordTable,
			Columns: []string{carrierservice.CarrierServicePostNordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicepostnord.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServiceDAOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDAOTable,
			Columns: []string{carrierservice.CarrierServiceDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServiceDAOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDAOTable,
			Columns: []string{carrierservice.CarrierServiceDAOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedao.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServiceDFCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDFTable,
			Columns: []string{carrierservice.CarrierServiceDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServiceDFIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDFTable,
			Columns: []string{carrierservice.CarrierServiceDFColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedf.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServiceDSVCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDSVTable,
			Columns: []string{carrierservice.CarrierServiceDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServiceDSVIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDSVTable,
			Columns: []string{carrierservice.CarrierServiceDSVColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicedsv.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServEasyPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServEasyPostTable,
			Columns: []string{carrierservice.CarrierServEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServEasyPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServEasyPostTable,
			Columns: []string{carrierservice.CarrierServEasyPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServiceGLSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceGLSTable,
			Columns: []string{carrierservice.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServiceGLSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceGLSTable,
			Columns: []string{carrierservice.CarrierServiceGLSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicegls.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServiceUSPSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceUSPSTable,
			Columns: []string{carrierservice.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServiceUSPSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceUSPSTable,
			Columns: []string{carrierservice.CarrierServiceUSPSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierServiceBringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceBringTable,
			Columns: []string{carrierservice.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierServiceBringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceBringTable,
			Columns: []string{carrierservice.CarrierServiceBringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierservicebring.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CarrierBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrierservice.CarrierBrandTable,
			Columns: []string{carrierservice.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CarrierBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrierservice.CarrierBrandTable,
			Columns: []string{carrierservice.CarrierBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(carrierbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !csuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarrierService{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrierservice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
