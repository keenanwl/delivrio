// Code generated by ent, DO NOT EDIT.

package carrierservicedf

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carrierservicedf type in the database.
	Label = "carrier_service_df"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeCarrierService holds the string denoting the carrier_service edge name in mutations.
	EdgeCarrierService = "carrier_service"
	// EdgeCarrierAdditionalServiceDF holds the string denoting the carrier_additional_service_df edge name in mutations.
	EdgeCarrierAdditionalServiceDF = "carrier_additional_service_df"
	// Table holds the table name of the carrierservicedf in the database.
	Table = "carrier_service_dfs"
	// CarrierServiceTable is the table that holds the carrier_service relation/edge.
	CarrierServiceTable = "carrier_service_dfs"
	// CarrierServiceInverseTable is the table name for the CarrierService entity.
	// It exists in this package in order to avoid circular dependency with the "carrierservice" package.
	CarrierServiceInverseTable = "carrier_services"
	// CarrierServiceColumn is the table column denoting the carrier_service relation/edge.
	CarrierServiceColumn = "carrier_service_carrier_service_df"
	// CarrierAdditionalServiceDFTable is the table that holds the carrier_additional_service_df relation/edge. The primary key declared below.
	CarrierAdditionalServiceDFTable = "carrier_service_df_carrier_additional_service_df"
	// CarrierAdditionalServiceDFInverseTable is the table name for the CarrierAdditionalServiceDF entity.
	// It exists in this package in order to avoid circular dependency with the "carrieradditionalservicedf" package.
	CarrierAdditionalServiceDFInverseTable = "carrier_additional_service_dfs"
)

// Columns holds all SQL columns for carrierservicedf fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_service_dfs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_service_carrier_service_df",
}

var (
	// CarrierAdditionalServiceDFPrimaryKey and CarrierAdditionalServiceDFColumn2 are the table columns denoting the
	// primary key for the carrier_additional_service_df relation (M2M).
	CarrierAdditionalServiceDFPrimaryKey = []string{"carrier_service_df_id", "carrier_additional_service_df_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierServiceDF queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCarrierServiceField orders the results by carrier_service field.
func ByCarrierServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierAdditionalServiceDFCount orders the results by carrier_additional_service_df count.
func ByCarrierAdditionalServiceDFCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarrierAdditionalServiceDFStep(), opts...)
	}
}

// ByCarrierAdditionalServiceDF orders the results by carrier_additional_service_df terms.
func ByCarrierAdditionalServiceDF(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierAdditionalServiceDFStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarrierServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CarrierServiceTable, CarrierServiceColumn),
	)
}
func newCarrierAdditionalServiceDFStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierAdditionalServiceDFInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CarrierAdditionalServiceDFTable, CarrierAdditionalServiceDFPrimaryKey...),
	)
}
