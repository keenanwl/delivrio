// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Colli is the model entity for the Colli schema.
type Colli struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Code128 type C compatible for faster reads
	InternalBarcode int64 `json:"internal_barcode,omitempty"`
	// Status holds the value of the "status" field.
	Status colli.Status `json:"status,omitempty"`
	// SlipPrintStatus holds the value of the "slip_print_status" field.
	SlipPrintStatus colli.SlipPrintStatus `json:"slip_print_status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// When filled, the packing slip email has been fired
	EmailPackingSlipPrintedAt time.Time `json:"email_packing_slip_printed_at,omitempty"`
	// When filled, the packing slip email has been fired. Consider moving to shipping parcel? There are trade offs
	EmailLabelPrintedAt time.Time `json:"email_label_printed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ColliQuery when eager-loading is set.
	Edges                        ColliEdges `json:"edges"`
	colli_recipient              *pulid.ID
	colli_sender                 *pulid.ID
	colli_parcel_shop            *pulid.ID
	colli_click_collect_location *pulid.ID
	colli_delivery_option        *pulid.ID
	colli_packaging              *pulid.ID
	order_colli                  *pulid.ID
	selectValues                 sql.SelectValues
}

// ColliEdges holds the relations/edges for other nodes in the graph.
type ColliEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Recipient holds the value of the recipient edge.
	Recipient *Address `json:"recipient,omitempty"`
	// Sender holds the value of the sender edge.
	Sender *Address `json:"sender,omitempty"`
	// ParcelShop holds the value of the parcel_shop edge.
	ParcelShop *ParcelShop `json:"parcel_shop,omitempty"`
	// ClickCollectLocation holds the value of the click_collect_location edge.
	ClickCollectLocation *Location `json:"click_collect_location,omitempty"`
	// OrderLines holds the value of the order_lines edge.
	OrderLines []*OrderLine `json:"order_lines,omitempty"`
	// DeliveryOption holds the value of the delivery_option edge.
	DeliveryOption *DeliveryOption `json:"delivery_option,omitempty"`
	// Stores packing slips for quick printing. Carrier labels are attached to the shipment.
	DocumentFile []*DocumentFile `json:"document_file,omitempty"`
	// A colli may only have 1 active shipment, cancelled shipments are moved to the other edge
	ShipmentParcel *ShipmentParcel `json:"shipment_parcel,omitempty"`
	// A ref to all cancelled shipments
	CancelledShipmentParcel []*ShipmentParcel `json:"cancelled_shipment_parcel,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Allows packaging to be predefined for this colli and will be used for the shipment parcel
	Packaging *Packaging `json:"packaging,omitempty"`
	// PrintJob holds the value of the print_job edge.
	PrintJob []*PrintJob `json:"print_job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
	// totalCount holds the count of the edges above.
	totalCount [13]map[string]int

	namedOrderLines              map[string][]*OrderLine
	namedDocumentFile            map[string][]*DocumentFile
	namedCancelledShipmentParcel map[string][]*ShipmentParcel
	namedPrintJob                map[string][]*PrintJob
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RecipientOrErr returns the Recipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) RecipientOrErr() (*Address, error) {
	if e.Recipient != nil {
		return e.Recipient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "recipient"}
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) SenderOrErr() (*Address, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ParcelShopOrErr returns the ParcelShop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) ParcelShopOrErr() (*ParcelShop, error) {
	if e.ParcelShop != nil {
		return e.ParcelShop, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: parcelshop.Label}
	}
	return nil, &NotLoadedError{edge: "parcel_shop"}
}

// ClickCollectLocationOrErr returns the ClickCollectLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) ClickCollectLocationOrErr() (*Location, error) {
	if e.ClickCollectLocation != nil {
		return e.ClickCollectLocation, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "click_collect_location"}
}

// OrderLinesOrErr returns the OrderLines value or an error if the edge
// was not loaded in eager-loading.
func (e ColliEdges) OrderLinesOrErr() ([]*OrderLine, error) {
	if e.loadedTypes[5] {
		return e.OrderLines, nil
	}
	return nil, &NotLoadedError{edge: "order_lines"}
}

// DeliveryOptionOrErr returns the DeliveryOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) DeliveryOptionOrErr() (*DeliveryOption, error) {
	if e.DeliveryOption != nil {
		return e.DeliveryOption, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: deliveryoption.Label}
	}
	return nil, &NotLoadedError{edge: "delivery_option"}
}

// DocumentFileOrErr returns the DocumentFile value or an error if the edge
// was not loaded in eager-loading.
func (e ColliEdges) DocumentFileOrErr() ([]*DocumentFile, error) {
	if e.loadedTypes[7] {
		return e.DocumentFile, nil
	}
	return nil, &NotLoadedError{edge: "document_file"}
}

// ShipmentParcelOrErr returns the ShipmentParcel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) ShipmentParcelOrErr() (*ShipmentParcel, error) {
	if e.ShipmentParcel != nil {
		return e.ShipmentParcel, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: shipmentparcel.Label}
	}
	return nil, &NotLoadedError{edge: "shipment_parcel"}
}

// CancelledShipmentParcelOrErr returns the CancelledShipmentParcel value or an error if the edge
// was not loaded in eager-loading.
func (e ColliEdges) CancelledShipmentParcelOrErr() ([]*ShipmentParcel, error) {
	if e.loadedTypes[9] {
		return e.CancelledShipmentParcel, nil
	}
	return nil, &NotLoadedError{edge: "cancelled_shipment_parcel"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColliEdges) PackagingOrErr() (*Packaging, error) {
	if e.Packaging != nil {
		return e.Packaging, nil
	} else if e.loadedTypes[11] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// PrintJobOrErr returns the PrintJob value or an error if the edge
// was not loaded in eager-loading.
func (e ColliEdges) PrintJobOrErr() ([]*PrintJob, error) {
	if e.loadedTypes[12] {
		return e.PrintJob, nil
	}
	return nil, &NotLoadedError{edge: "print_job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Colli) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case colli.FieldID, colli.FieldTenantID:
			values[i] = new(pulid.ID)
		case colli.FieldInternalBarcode:
			values[i] = new(sql.NullInt64)
		case colli.FieldStatus, colli.FieldSlipPrintStatus:
			values[i] = new(sql.NullString)
		case colli.FieldCreatedAt, colli.FieldEmailPackingSlipPrintedAt, colli.FieldEmailLabelPrintedAt:
			values[i] = new(sql.NullTime)
		case colli.ForeignKeys[0]: // colli_recipient
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case colli.ForeignKeys[1]: // colli_sender
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case colli.ForeignKeys[2]: // colli_parcel_shop
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case colli.ForeignKeys[3]: // colli_click_collect_location
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case colli.ForeignKeys[4]: // colli_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case colli.ForeignKeys[5]: // colli_packaging
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case colli.ForeignKeys[6]: // order_colli
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Colli fields.
func (c *Colli) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case colli.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case colli.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				c.TenantID = *value
			}
		case colli.FieldInternalBarcode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field internal_barcode", values[i])
			} else if value.Valid {
				c.InternalBarcode = value.Int64
			}
		case colli.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = colli.Status(value.String)
			}
		case colli.FieldSlipPrintStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slip_print_status", values[i])
			} else if value.Valid {
				c.SlipPrintStatus = colli.SlipPrintStatus(value.String)
			}
		case colli.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case colli.FieldEmailPackingSlipPrintedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_packing_slip_printed_at", values[i])
			} else if value.Valid {
				c.EmailPackingSlipPrintedAt = value.Time
			}
		case colli.FieldEmailLabelPrintedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_label_printed_at", values[i])
			} else if value.Valid {
				c.EmailLabelPrintedAt = value.Time
			}
		case colli.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_recipient", values[i])
			} else if value.Valid {
				c.colli_recipient = new(pulid.ID)
				*c.colli_recipient = *value.S.(*pulid.ID)
			}
		case colli.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_sender", values[i])
			} else if value.Valid {
				c.colli_sender = new(pulid.ID)
				*c.colli_sender = *value.S.(*pulid.ID)
			}
		case colli.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_parcel_shop", values[i])
			} else if value.Valid {
				c.colli_parcel_shop = new(pulid.ID)
				*c.colli_parcel_shop = *value.S.(*pulid.ID)
			}
		case colli.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_click_collect_location", values[i])
			} else if value.Valid {
				c.colli_click_collect_location = new(pulid.ID)
				*c.colli_click_collect_location = *value.S.(*pulid.ID)
			}
		case colli.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_delivery_option", values[i])
			} else if value.Valid {
				c.colli_delivery_option = new(pulid.ID)
				*c.colli_delivery_option = *value.S.(*pulid.ID)
			}
		case colli.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field colli_packaging", values[i])
			} else if value.Valid {
				c.colli_packaging = new(pulid.ID)
				*c.colli_packaging = *value.S.(*pulid.ID)
			}
		case colli.ForeignKeys[6]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field order_colli", values[i])
			} else if value.Valid {
				c.order_colli = new(pulid.ID)
				*c.order_colli = *value.S.(*pulid.ID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Colli.
// This includes values selected through modifiers, order, etc.
func (c *Colli) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Colli entity.
func (c *Colli) QueryTenant() *TenantQuery {
	return NewColliClient(c.config).QueryTenant(c)
}

// QueryRecipient queries the "recipient" edge of the Colli entity.
func (c *Colli) QueryRecipient() *AddressQuery {
	return NewColliClient(c.config).QueryRecipient(c)
}

// QuerySender queries the "sender" edge of the Colli entity.
func (c *Colli) QuerySender() *AddressQuery {
	return NewColliClient(c.config).QuerySender(c)
}

// QueryParcelShop queries the "parcel_shop" edge of the Colli entity.
func (c *Colli) QueryParcelShop() *ParcelShopQuery {
	return NewColliClient(c.config).QueryParcelShop(c)
}

// QueryClickCollectLocation queries the "click_collect_location" edge of the Colli entity.
func (c *Colli) QueryClickCollectLocation() *LocationQuery {
	return NewColliClient(c.config).QueryClickCollectLocation(c)
}

// QueryOrderLines queries the "order_lines" edge of the Colli entity.
func (c *Colli) QueryOrderLines() *OrderLineQuery {
	return NewColliClient(c.config).QueryOrderLines(c)
}

// QueryDeliveryOption queries the "delivery_option" edge of the Colli entity.
func (c *Colli) QueryDeliveryOption() *DeliveryOptionQuery {
	return NewColliClient(c.config).QueryDeliveryOption(c)
}

// QueryDocumentFile queries the "document_file" edge of the Colli entity.
func (c *Colli) QueryDocumentFile() *DocumentFileQuery {
	return NewColliClient(c.config).QueryDocumentFile(c)
}

// QueryShipmentParcel queries the "shipment_parcel" edge of the Colli entity.
func (c *Colli) QueryShipmentParcel() *ShipmentParcelQuery {
	return NewColliClient(c.config).QueryShipmentParcel(c)
}

// QueryCancelledShipmentParcel queries the "cancelled_shipment_parcel" edge of the Colli entity.
func (c *Colli) QueryCancelledShipmentParcel() *ShipmentParcelQuery {
	return NewColliClient(c.config).QueryCancelledShipmentParcel(c)
}

// QueryOrder queries the "order" edge of the Colli entity.
func (c *Colli) QueryOrder() *OrderQuery {
	return NewColliClient(c.config).QueryOrder(c)
}

// QueryPackaging queries the "packaging" edge of the Colli entity.
func (c *Colli) QueryPackaging() *PackagingQuery {
	return NewColliClient(c.config).QueryPackaging(c)
}

// QueryPrintJob queries the "print_job" edge of the Colli entity.
func (c *Colli) QueryPrintJob() *PrintJobQuery {
	return NewColliClient(c.config).QueryPrintJob(c)
}

// Update returns a builder for updating this Colli.
// Note that you need to call Colli.Unwrap() before calling this method if this Colli
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Colli) Update() *ColliUpdateOne {
	return NewColliClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Colli entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Colli) Unwrap() *Colli {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Colli is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Colli) String() string {
	var builder strings.Builder
	builder.WriteString("Colli(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", c.TenantID))
	builder.WriteString(", ")
	builder.WriteString("internal_barcode=")
	builder.WriteString(fmt.Sprintf("%v", c.InternalBarcode))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("slip_print_status=")
	builder.WriteString(fmt.Sprintf("%v", c.SlipPrintStatus))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email_packing_slip_printed_at=")
	builder.WriteString(c.EmailPackingSlipPrintedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email_label_printed_at=")
	builder.WriteString(c.EmailLabelPrintedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrderLines returns the OrderLines named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Colli) NamedOrderLines(name string) ([]*OrderLine, error) {
	if c.Edges.namedOrderLines == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedOrderLines[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Colli) appendNamedOrderLines(name string, edges ...*OrderLine) {
	if c.Edges.namedOrderLines == nil {
		c.Edges.namedOrderLines = make(map[string][]*OrderLine)
	}
	if len(edges) == 0 {
		c.Edges.namedOrderLines[name] = []*OrderLine{}
	} else {
		c.Edges.namedOrderLines[name] = append(c.Edges.namedOrderLines[name], edges...)
	}
}

// NamedDocumentFile returns the DocumentFile named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Colli) NamedDocumentFile(name string) ([]*DocumentFile, error) {
	if c.Edges.namedDocumentFile == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDocumentFile[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Colli) appendNamedDocumentFile(name string, edges ...*DocumentFile) {
	if c.Edges.namedDocumentFile == nil {
		c.Edges.namedDocumentFile = make(map[string][]*DocumentFile)
	}
	if len(edges) == 0 {
		c.Edges.namedDocumentFile[name] = []*DocumentFile{}
	} else {
		c.Edges.namedDocumentFile[name] = append(c.Edges.namedDocumentFile[name], edges...)
	}
}

// NamedCancelledShipmentParcel returns the CancelledShipmentParcel named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Colli) NamedCancelledShipmentParcel(name string) ([]*ShipmentParcel, error) {
	if c.Edges.namedCancelledShipmentParcel == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedCancelledShipmentParcel[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Colli) appendNamedCancelledShipmentParcel(name string, edges ...*ShipmentParcel) {
	if c.Edges.namedCancelledShipmentParcel == nil {
		c.Edges.namedCancelledShipmentParcel = make(map[string][]*ShipmentParcel)
	}
	if len(edges) == 0 {
		c.Edges.namedCancelledShipmentParcel[name] = []*ShipmentParcel{}
	} else {
		c.Edges.namedCancelledShipmentParcel[name] = append(c.Edges.namedCancelledShipmentParcel[name], edges...)
	}
}

// NamedPrintJob returns the PrintJob named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Colli) NamedPrintJob(name string) ([]*PrintJob, error) {
	if c.Edges.namedPrintJob == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPrintJob[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Colli) appendNamedPrintJob(name string, edges ...*PrintJob) {
	if c.Edges.namedPrintJob == nil {
		c.Edges.namedPrintJob = make(map[string][]*PrintJob)
	}
	if len(edges) == 0 {
		c.Edges.namedPrintJob[name] = []*PrintJob{}
	} else {
		c.Edges.namedPrintJob[name] = append(c.Edges.namedPrintJob[name], edges...)
	}
}

// Collis is a parsable slice of Colli.
type Collis []*Colli
