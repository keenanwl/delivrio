// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryItemUpdate is the builder for updating InventoryItem entities.
type InventoryItemUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryItemMutation
}

// Where appends a list predicates to the InventoryItemUpdate builder.
func (iiu *InventoryItemUpdate) Where(ps ...predicate.InventoryItem) *InventoryItemUpdate {
	iiu.mutation.Where(ps...)
	return iiu
}

// SetTenantID sets the "tenant_id" field.
func (iiu *InventoryItemUpdate) SetTenantID(pu pulid.ID) *InventoryItemUpdate {
	iiu.mutation.SetTenantID(pu)
	return iiu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableTenantID(pu *pulid.ID) *InventoryItemUpdate {
	if pu != nil {
		iiu.SetTenantID(*pu)
	}
	return iiu
}

// SetExternalID sets the "external_ID" field.
func (iiu *InventoryItemUpdate) SetExternalID(s string) *InventoryItemUpdate {
	iiu.mutation.SetExternalID(s)
	return iiu
}

// SetNillableExternalID sets the "external_ID" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableExternalID(s *string) *InventoryItemUpdate {
	if s != nil {
		iiu.SetExternalID(*s)
	}
	return iiu
}

// ClearExternalID clears the value of the "external_ID" field.
func (iiu *InventoryItemUpdate) ClearExternalID() *InventoryItemUpdate {
	iiu.mutation.ClearExternalID()
	return iiu
}

// SetCode sets the "code" field.
func (iiu *InventoryItemUpdate) SetCode(s string) *InventoryItemUpdate {
	iiu.mutation.SetCode(s)
	return iiu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableCode(s *string) *InventoryItemUpdate {
	if s != nil {
		iiu.SetCode(*s)
	}
	return iiu
}

// ClearCode clears the value of the "code" field.
func (iiu *InventoryItemUpdate) ClearCode() *InventoryItemUpdate {
	iiu.mutation.ClearCode()
	return iiu
}

// SetSku sets the "sku" field.
func (iiu *InventoryItemUpdate) SetSku(s string) *InventoryItemUpdate {
	iiu.mutation.SetSku(s)
	return iiu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableSku(s *string) *InventoryItemUpdate {
	if s != nil {
		iiu.SetSku(*s)
	}
	return iiu
}

// ClearSku clears the value of the "sku" field.
func (iiu *InventoryItemUpdate) ClearSku() *InventoryItemUpdate {
	iiu.mutation.ClearSku()
	return iiu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iiu *InventoryItemUpdate) SetTenant(t *Tenant) *InventoryItemUpdate {
	return iiu.SetTenantID(t.ID)
}

// AddCountryHarmonizedCodeIDs adds the "country_harmonized_code" edge to the CountryHarmonizedCode entity by IDs.
func (iiu *InventoryItemUpdate) AddCountryHarmonizedCodeIDs(ids ...pulid.ID) *InventoryItemUpdate {
	iiu.mutation.AddCountryHarmonizedCodeIDs(ids...)
	return iiu
}

// AddCountryHarmonizedCode adds the "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (iiu *InventoryItemUpdate) AddCountryHarmonizedCode(c ...*CountryHarmonizedCode) *InventoryItemUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiu.AddCountryHarmonizedCodeIDs(ids...)
}

// SetCountryOfOriginID sets the "country_of_origin" edge to the Country entity by ID.
func (iiu *InventoryItemUpdate) SetCountryOfOriginID(id pulid.ID) *InventoryItemUpdate {
	iiu.mutation.SetCountryOfOriginID(id)
	return iiu
}

// SetNillableCountryOfOriginID sets the "country_of_origin" edge to the Country entity by ID if the given value is not nil.
func (iiu *InventoryItemUpdate) SetNillableCountryOfOriginID(id *pulid.ID) *InventoryItemUpdate {
	if id != nil {
		iiu = iiu.SetCountryOfOriginID(*id)
	}
	return iiu
}

// SetCountryOfOrigin sets the "country_of_origin" edge to the Country entity.
func (iiu *InventoryItemUpdate) SetCountryOfOrigin(c *Country) *InventoryItemUpdate {
	return iiu.SetCountryOfOriginID(c.ID)
}

// SetProductVariantID sets the "product_variant" edge to the ProductVariant entity by ID.
func (iiu *InventoryItemUpdate) SetProductVariantID(id pulid.ID) *InventoryItemUpdate {
	iiu.mutation.SetProductVariantID(id)
	return iiu
}

// SetProductVariant sets the "product_variant" edge to the ProductVariant entity.
func (iiu *InventoryItemUpdate) SetProductVariant(p *ProductVariant) *InventoryItemUpdate {
	return iiu.SetProductVariantID(p.ID)
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iiu *InventoryItemUpdate) Mutation() *InventoryItemMutation {
	return iiu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iiu *InventoryItemUpdate) ClearTenant() *InventoryItemUpdate {
	iiu.mutation.ClearTenant()
	return iiu
}

// ClearCountryHarmonizedCode clears all "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (iiu *InventoryItemUpdate) ClearCountryHarmonizedCode() *InventoryItemUpdate {
	iiu.mutation.ClearCountryHarmonizedCode()
	return iiu
}

// RemoveCountryHarmonizedCodeIDs removes the "country_harmonized_code" edge to CountryHarmonizedCode entities by IDs.
func (iiu *InventoryItemUpdate) RemoveCountryHarmonizedCodeIDs(ids ...pulid.ID) *InventoryItemUpdate {
	iiu.mutation.RemoveCountryHarmonizedCodeIDs(ids...)
	return iiu
}

// RemoveCountryHarmonizedCode removes "country_harmonized_code" edges to CountryHarmonizedCode entities.
func (iiu *InventoryItemUpdate) RemoveCountryHarmonizedCode(c ...*CountryHarmonizedCode) *InventoryItemUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiu.RemoveCountryHarmonizedCodeIDs(ids...)
}

// ClearCountryOfOrigin clears the "country_of_origin" edge to the Country entity.
func (iiu *InventoryItemUpdate) ClearCountryOfOrigin() *InventoryItemUpdate {
	iiu.mutation.ClearCountryOfOrigin()
	return iiu
}

// ClearProductVariant clears the "product_variant" edge to the ProductVariant entity.
func (iiu *InventoryItemUpdate) ClearProductVariant() *InventoryItemUpdate {
	iiu.mutation.ClearProductVariant()
	return iiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iiu *InventoryItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iiu.sqlSave, iiu.mutation, iiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *InventoryItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *InventoryItemUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *InventoryItemUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiu *InventoryItemUpdate) check() error {
	if iiu.mutation.TenantCleared() && len(iiu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.tenant"`)
	}
	if iiu.mutation.ProductVariantCleared() && len(iiu.mutation.ProductVariantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.product_variant"`)
	}
	return nil
}

func (iiu *InventoryItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString))
	if ps := iiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.ExternalID(); ok {
		_spec.SetField(inventoryitem.FieldExternalID, field.TypeString, value)
	}
	if iiu.mutation.ExternalIDCleared() {
		_spec.ClearField(inventoryitem.FieldExternalID, field.TypeString)
	}
	if value, ok := iiu.mutation.Code(); ok {
		_spec.SetField(inventoryitem.FieldCode, field.TypeString, value)
	}
	if iiu.mutation.CodeCleared() {
		_spec.ClearField(inventoryitem.FieldCode, field.TypeString)
	}
	if value, ok := iiu.mutation.Sku(); ok {
		_spec.SetField(inventoryitem.FieldSku, field.TypeString, value)
	}
	if iiu.mutation.SkuCleared() {
		_spec.ClearField(inventoryitem.FieldSku, field.TypeString)
	}
	if iiu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.TenantTable,
			Columns: []string{inventoryitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.TenantTable,
			Columns: []string{inventoryitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.RemovedCountryHarmonizedCodeIDs(); len(nodes) > 0 && !iiu.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.CountryHarmonizedCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.CountryOfOriginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.CountryOfOriginTable,
			Columns: []string{inventoryitem.CountryOfOriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.CountryOfOriginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.CountryOfOriginTable,
			Columns: []string{inventoryitem.CountryOfOriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inventoryitem.ProductVariantTable,
			Columns: []string{inventoryitem.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inventoryitem.ProductVariantTable,
			Columns: []string{inventoryitem.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iiu.mutation.done = true
	return n, nil
}

// InventoryItemUpdateOne is the builder for updating a single InventoryItem entity.
type InventoryItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryItemMutation
}

// SetTenantID sets the "tenant_id" field.
func (iiuo *InventoryItemUpdateOne) SetTenantID(pu pulid.ID) *InventoryItemUpdateOne {
	iiuo.mutation.SetTenantID(pu)
	return iiuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableTenantID(pu *pulid.ID) *InventoryItemUpdateOne {
	if pu != nil {
		iiuo.SetTenantID(*pu)
	}
	return iiuo
}

// SetExternalID sets the "external_ID" field.
func (iiuo *InventoryItemUpdateOne) SetExternalID(s string) *InventoryItemUpdateOne {
	iiuo.mutation.SetExternalID(s)
	return iiuo
}

// SetNillableExternalID sets the "external_ID" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableExternalID(s *string) *InventoryItemUpdateOne {
	if s != nil {
		iiuo.SetExternalID(*s)
	}
	return iiuo
}

// ClearExternalID clears the value of the "external_ID" field.
func (iiuo *InventoryItemUpdateOne) ClearExternalID() *InventoryItemUpdateOne {
	iiuo.mutation.ClearExternalID()
	return iiuo
}

// SetCode sets the "code" field.
func (iiuo *InventoryItemUpdateOne) SetCode(s string) *InventoryItemUpdateOne {
	iiuo.mutation.SetCode(s)
	return iiuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableCode(s *string) *InventoryItemUpdateOne {
	if s != nil {
		iiuo.SetCode(*s)
	}
	return iiuo
}

// ClearCode clears the value of the "code" field.
func (iiuo *InventoryItemUpdateOne) ClearCode() *InventoryItemUpdateOne {
	iiuo.mutation.ClearCode()
	return iiuo
}

// SetSku sets the "sku" field.
func (iiuo *InventoryItemUpdateOne) SetSku(s string) *InventoryItemUpdateOne {
	iiuo.mutation.SetSku(s)
	return iiuo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableSku(s *string) *InventoryItemUpdateOne {
	if s != nil {
		iiuo.SetSku(*s)
	}
	return iiuo
}

// ClearSku clears the value of the "sku" field.
func (iiuo *InventoryItemUpdateOne) ClearSku() *InventoryItemUpdateOne {
	iiuo.mutation.ClearSku()
	return iiuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (iiuo *InventoryItemUpdateOne) SetTenant(t *Tenant) *InventoryItemUpdateOne {
	return iiuo.SetTenantID(t.ID)
}

// AddCountryHarmonizedCodeIDs adds the "country_harmonized_code" edge to the CountryHarmonizedCode entity by IDs.
func (iiuo *InventoryItemUpdateOne) AddCountryHarmonizedCodeIDs(ids ...pulid.ID) *InventoryItemUpdateOne {
	iiuo.mutation.AddCountryHarmonizedCodeIDs(ids...)
	return iiuo
}

// AddCountryHarmonizedCode adds the "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (iiuo *InventoryItemUpdateOne) AddCountryHarmonizedCode(c ...*CountryHarmonizedCode) *InventoryItemUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiuo.AddCountryHarmonizedCodeIDs(ids...)
}

// SetCountryOfOriginID sets the "country_of_origin" edge to the Country entity by ID.
func (iiuo *InventoryItemUpdateOne) SetCountryOfOriginID(id pulid.ID) *InventoryItemUpdateOne {
	iiuo.mutation.SetCountryOfOriginID(id)
	return iiuo
}

// SetNillableCountryOfOriginID sets the "country_of_origin" edge to the Country entity by ID if the given value is not nil.
func (iiuo *InventoryItemUpdateOne) SetNillableCountryOfOriginID(id *pulid.ID) *InventoryItemUpdateOne {
	if id != nil {
		iiuo = iiuo.SetCountryOfOriginID(*id)
	}
	return iiuo
}

// SetCountryOfOrigin sets the "country_of_origin" edge to the Country entity.
func (iiuo *InventoryItemUpdateOne) SetCountryOfOrigin(c *Country) *InventoryItemUpdateOne {
	return iiuo.SetCountryOfOriginID(c.ID)
}

// SetProductVariantID sets the "product_variant" edge to the ProductVariant entity by ID.
func (iiuo *InventoryItemUpdateOne) SetProductVariantID(id pulid.ID) *InventoryItemUpdateOne {
	iiuo.mutation.SetProductVariantID(id)
	return iiuo
}

// SetProductVariant sets the "product_variant" edge to the ProductVariant entity.
func (iiuo *InventoryItemUpdateOne) SetProductVariant(p *ProductVariant) *InventoryItemUpdateOne {
	return iiuo.SetProductVariantID(p.ID)
}

// Mutation returns the InventoryItemMutation object of the builder.
func (iiuo *InventoryItemUpdateOne) Mutation() *InventoryItemMutation {
	return iiuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (iiuo *InventoryItemUpdateOne) ClearTenant() *InventoryItemUpdateOne {
	iiuo.mutation.ClearTenant()
	return iiuo
}

// ClearCountryHarmonizedCode clears all "country_harmonized_code" edges to the CountryHarmonizedCode entity.
func (iiuo *InventoryItemUpdateOne) ClearCountryHarmonizedCode() *InventoryItemUpdateOne {
	iiuo.mutation.ClearCountryHarmonizedCode()
	return iiuo
}

// RemoveCountryHarmonizedCodeIDs removes the "country_harmonized_code" edge to CountryHarmonizedCode entities by IDs.
func (iiuo *InventoryItemUpdateOne) RemoveCountryHarmonizedCodeIDs(ids ...pulid.ID) *InventoryItemUpdateOne {
	iiuo.mutation.RemoveCountryHarmonizedCodeIDs(ids...)
	return iiuo
}

// RemoveCountryHarmonizedCode removes "country_harmonized_code" edges to CountryHarmonizedCode entities.
func (iiuo *InventoryItemUpdateOne) RemoveCountryHarmonizedCode(c ...*CountryHarmonizedCode) *InventoryItemUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiuo.RemoveCountryHarmonizedCodeIDs(ids...)
}

// ClearCountryOfOrigin clears the "country_of_origin" edge to the Country entity.
func (iiuo *InventoryItemUpdateOne) ClearCountryOfOrigin() *InventoryItemUpdateOne {
	iiuo.mutation.ClearCountryOfOrigin()
	return iiuo
}

// ClearProductVariant clears the "product_variant" edge to the ProductVariant entity.
func (iiuo *InventoryItemUpdateOne) ClearProductVariant() *InventoryItemUpdateOne {
	iiuo.mutation.ClearProductVariant()
	return iiuo
}

// Where appends a list predicates to the InventoryItemUpdate builder.
func (iiuo *InventoryItemUpdateOne) Where(ps ...predicate.InventoryItem) *InventoryItemUpdateOne {
	iiuo.mutation.Where(ps...)
	return iiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iiuo *InventoryItemUpdateOne) Select(field string, fields ...string) *InventoryItemUpdateOne {
	iiuo.fields = append([]string{field}, fields...)
	return iiuo
}

// Save executes the query and returns the updated InventoryItem entity.
func (iiuo *InventoryItemUpdateOne) Save(ctx context.Context) (*InventoryItem, error) {
	return withHooks(ctx, iiuo.sqlSave, iiuo.mutation, iiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *InventoryItemUpdateOne) SaveX(ctx context.Context) *InventoryItem {
	node, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iiuo *InventoryItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *InventoryItemUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iiuo *InventoryItemUpdateOne) check() error {
	if iiuo.mutation.TenantCleared() && len(iiuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.tenant"`)
	}
	if iiuo.mutation.ProductVariantCleared() && len(iiuo.mutation.ProductVariantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InventoryItem.product_variant"`)
	}
	return nil
}

func (iiuo *InventoryItemUpdateOne) sqlSave(ctx context.Context) (_node *InventoryItem, err error) {
	if err := iiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryitem.Table, inventoryitem.Columns, sqlgraph.NewFieldSpec(inventoryitem.FieldID, field.TypeString))
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InventoryItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryitem.FieldID)
		for _, f := range fields {
			if !inventoryitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventoryitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiuo.mutation.ExternalID(); ok {
		_spec.SetField(inventoryitem.FieldExternalID, field.TypeString, value)
	}
	if iiuo.mutation.ExternalIDCleared() {
		_spec.ClearField(inventoryitem.FieldExternalID, field.TypeString)
	}
	if value, ok := iiuo.mutation.Code(); ok {
		_spec.SetField(inventoryitem.FieldCode, field.TypeString, value)
	}
	if iiuo.mutation.CodeCleared() {
		_spec.ClearField(inventoryitem.FieldCode, field.TypeString)
	}
	if value, ok := iiuo.mutation.Sku(); ok {
		_spec.SetField(inventoryitem.FieldSku, field.TypeString, value)
	}
	if iiuo.mutation.SkuCleared() {
		_spec.ClearField(inventoryitem.FieldSku, field.TypeString)
	}
	if iiuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.TenantTable,
			Columns: []string{inventoryitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.TenantTable,
			Columns: []string{inventoryitem.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.RemovedCountryHarmonizedCodeIDs(); len(nodes) > 0 && !iiuo.mutation.CountryHarmonizedCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.CountryHarmonizedCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(countryharmonizedcode.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.CountryOfOriginCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.CountryOfOriginTable,
			Columns: []string{inventoryitem.CountryOfOriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.CountryOfOriginIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.CountryOfOriginTable,
			Columns: []string{inventoryitem.CountryOfOriginColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.ProductVariantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inventoryitem.ProductVariantTable,
			Columns: []string{inventoryitem.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.ProductVariantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inventoryitem.ProductVariantTable,
			Columns: []string{inventoryitem.ProductVariantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productvariant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InventoryItem{config: iiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iiuo.mutation.done = true
	return _node, nil
}
