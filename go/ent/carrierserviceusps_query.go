// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceUSPSQuery is the builder for querying CarrierServiceUSPS entities.
type CarrierServiceUSPSQuery struct {
	config
	ctx                                   *QueryContext
	order                                 []carrierserviceusps.OrderOption
	inters                                []Interceptor
	predicates                            []predicate.CarrierServiceUSPS
	withCarrierService                    *CarrierServiceQuery
	withCarrierAdditionalServiceUSPS      *CarrierAdditionalServiceUSPSQuery
	withFKs                               bool
	modifiers                             []func(*sql.Selector)
	loadTotal                             []func(context.Context, []*CarrierServiceUSPS) error
	withNamedCarrierAdditionalServiceUSPS map[string]*CarrierAdditionalServiceUSPSQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierServiceUSPSQuery builder.
func (csuq *CarrierServiceUSPSQuery) Where(ps ...predicate.CarrierServiceUSPS) *CarrierServiceUSPSQuery {
	csuq.predicates = append(csuq.predicates, ps...)
	return csuq
}

// Limit the number of records to be returned by this query.
func (csuq *CarrierServiceUSPSQuery) Limit(limit int) *CarrierServiceUSPSQuery {
	csuq.ctx.Limit = &limit
	return csuq
}

// Offset to start from.
func (csuq *CarrierServiceUSPSQuery) Offset(offset int) *CarrierServiceUSPSQuery {
	csuq.ctx.Offset = &offset
	return csuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (csuq *CarrierServiceUSPSQuery) Unique(unique bool) *CarrierServiceUSPSQuery {
	csuq.ctx.Unique = &unique
	return csuq
}

// Order specifies how the records should be ordered.
func (csuq *CarrierServiceUSPSQuery) Order(o ...carrierserviceusps.OrderOption) *CarrierServiceUSPSQuery {
	csuq.order = append(csuq.order, o...)
	return csuq
}

// QueryCarrierService chains the current query on the "carrier_service" edge.
func (csuq *CarrierServiceUSPSQuery) QueryCarrierService() *CarrierServiceQuery {
	query := (&CarrierServiceClient{config: csuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierserviceusps.Table, carrierserviceusps.FieldID, selector),
			sqlgraph.To(carrierservice.Table, carrierservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, carrierserviceusps.CarrierServiceTable, carrierserviceusps.CarrierServiceColumn),
		)
		fromU = sqlgraph.SetNeighbors(csuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCarrierAdditionalServiceUSPS chains the current query on the "carrier_additional_service_usps" edge.
func (csuq *CarrierServiceUSPSQuery) QueryCarrierAdditionalServiceUSPS() *CarrierAdditionalServiceUSPSQuery {
	query := (&CarrierAdditionalServiceUSPSClient{config: csuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := csuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := csuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrierserviceusps.Table, carrierserviceusps.FieldID, selector),
			sqlgraph.To(carrieradditionalserviceusps.Table, carrieradditionalserviceusps.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carrierserviceusps.CarrierAdditionalServiceUSPSTable, carrierserviceusps.CarrierAdditionalServiceUSPSColumn),
		)
		fromU = sqlgraph.SetNeighbors(csuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierServiceUSPS entity from the query.
// Returns a *NotFoundError when no CarrierServiceUSPS was found.
func (csuq *CarrierServiceUSPSQuery) First(ctx context.Context) (*CarrierServiceUSPS, error) {
	nodes, err := csuq.Limit(1).All(setContextOp(ctx, csuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrierserviceusps.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) FirstX(ctx context.Context) *CarrierServiceUSPS {
	node, err := csuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierServiceUSPS ID from the query.
// Returns a *NotFoundError when no CarrierServiceUSPS ID was found.
func (csuq *CarrierServiceUSPSQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csuq.Limit(1).IDs(setContextOp(ctx, csuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrierserviceusps.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := csuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierServiceUSPS entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierServiceUSPS entity is found.
// Returns a *NotFoundError when no CarrierServiceUSPS entities are found.
func (csuq *CarrierServiceUSPSQuery) Only(ctx context.Context) (*CarrierServiceUSPS, error) {
	nodes, err := csuq.Limit(2).All(setContextOp(ctx, csuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrierserviceusps.Label}
	default:
		return nil, &NotSingularError{carrierserviceusps.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) OnlyX(ctx context.Context) *CarrierServiceUSPS {
	node, err := csuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierServiceUSPS ID in the query.
// Returns a *NotSingularError when more than one CarrierServiceUSPS ID is found.
// Returns a *NotFoundError when no entities are found.
func (csuq *CarrierServiceUSPSQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = csuq.Limit(2).IDs(setContextOp(ctx, csuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrierserviceusps.Label}
	default:
		err = &NotSingularError{carrierserviceusps.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := csuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierServiceUSPSs.
func (csuq *CarrierServiceUSPSQuery) All(ctx context.Context) ([]*CarrierServiceUSPS, error) {
	ctx = setContextOp(ctx, csuq.ctx, ent.OpQueryAll)
	if err := csuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierServiceUSPS, *CarrierServiceUSPSQuery]()
	return withInterceptors[[]*CarrierServiceUSPS](ctx, csuq, qr, csuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) AllX(ctx context.Context) []*CarrierServiceUSPS {
	nodes, err := csuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierServiceUSPS IDs.
func (csuq *CarrierServiceUSPSQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if csuq.ctx.Unique == nil && csuq.path != nil {
		csuq.Unique(true)
	}
	ctx = setContextOp(ctx, csuq.ctx, ent.OpQueryIDs)
	if err = csuq.Select(carrierserviceusps.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := csuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (csuq *CarrierServiceUSPSQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, csuq.ctx, ent.OpQueryCount)
	if err := csuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, csuq, querierCount[*CarrierServiceUSPSQuery](), csuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) CountX(ctx context.Context) int {
	count, err := csuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (csuq *CarrierServiceUSPSQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, csuq.ctx, ent.OpQueryExist)
	switch _, err := csuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (csuq *CarrierServiceUSPSQuery) ExistX(ctx context.Context) bool {
	exist, err := csuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierServiceUSPSQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (csuq *CarrierServiceUSPSQuery) Clone() *CarrierServiceUSPSQuery {
	if csuq == nil {
		return nil
	}
	return &CarrierServiceUSPSQuery{
		config:                           csuq.config,
		ctx:                              csuq.ctx.Clone(),
		order:                            append([]carrierserviceusps.OrderOption{}, csuq.order...),
		inters:                           append([]Interceptor{}, csuq.inters...),
		predicates:                       append([]predicate.CarrierServiceUSPS{}, csuq.predicates...),
		withCarrierService:               csuq.withCarrierService.Clone(),
		withCarrierAdditionalServiceUSPS: csuq.withCarrierAdditionalServiceUSPS.Clone(),
		// clone intermediate query.
		sql:  csuq.sql.Clone(),
		path: csuq.path,
	}
}

// WithCarrierService tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service" edge. The optional arguments are used to configure the query builder of the edge.
func (csuq *CarrierServiceUSPSQuery) WithCarrierService(opts ...func(*CarrierServiceQuery)) *CarrierServiceUSPSQuery {
	query := (&CarrierServiceClient{config: csuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csuq.withCarrierService = query
	return csuq
}

// WithCarrierAdditionalServiceUSPS tells the query-builder to eager-load the nodes that are connected to
// the "carrier_additional_service_usps" edge. The optional arguments are used to configure the query builder of the edge.
func (csuq *CarrierServiceUSPSQuery) WithCarrierAdditionalServiceUSPS(opts ...func(*CarrierAdditionalServiceUSPSQuery)) *CarrierServiceUSPSQuery {
	query := (&CarrierAdditionalServiceUSPSClient{config: csuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	csuq.withCarrierAdditionalServiceUSPS = query
	return csuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		APIKey carrierserviceusps.APIKey `json:"api_key,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierServiceUSPS.Query().
//		GroupBy(carrierserviceusps.FieldAPIKey).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (csuq *CarrierServiceUSPSQuery) GroupBy(field string, fields ...string) *CarrierServiceUSPSGroupBy {
	csuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierServiceUSPSGroupBy{build: csuq}
	grbuild.flds = &csuq.ctx.Fields
	grbuild.label = carrierserviceusps.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		APIKey carrierserviceusps.APIKey `json:"api_key,omitempty"`
//	}
//
//	client.CarrierServiceUSPS.Query().
//		Select(carrierserviceusps.FieldAPIKey).
//		Scan(ctx, &v)
func (csuq *CarrierServiceUSPSQuery) Select(fields ...string) *CarrierServiceUSPSSelect {
	csuq.ctx.Fields = append(csuq.ctx.Fields, fields...)
	sbuild := &CarrierServiceUSPSSelect{CarrierServiceUSPSQuery: csuq}
	sbuild.label = carrierserviceusps.Label
	sbuild.flds, sbuild.scan = &csuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierServiceUSPSSelect configured with the given aggregations.
func (csuq *CarrierServiceUSPSQuery) Aggregate(fns ...AggregateFunc) *CarrierServiceUSPSSelect {
	return csuq.Select().Aggregate(fns...)
}

func (csuq *CarrierServiceUSPSQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range csuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, csuq); err != nil {
				return err
			}
		}
	}
	for _, f := range csuq.ctx.Fields {
		if !carrierserviceusps.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if csuq.path != nil {
		prev, err := csuq.path(ctx)
		if err != nil {
			return err
		}
		csuq.sql = prev
	}
	if carrierserviceusps.Policy == nil {
		return errors.New("ent: uninitialized carrierserviceusps.Policy (forgotten import ent/runtime?)")
	}
	if err := carrierserviceusps.Policy.EvalQuery(ctx, csuq); err != nil {
		return err
	}
	return nil
}

func (csuq *CarrierServiceUSPSQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierServiceUSPS, error) {
	var (
		nodes       = []*CarrierServiceUSPS{}
		withFKs     = csuq.withFKs
		_spec       = csuq.querySpec()
		loadedTypes = [2]bool{
			csuq.withCarrierService != nil,
			csuq.withCarrierAdditionalServiceUSPS != nil,
		}
	)
	if csuq.withCarrierService != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, carrierserviceusps.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierServiceUSPS).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierServiceUSPS{config: csuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(csuq.modifiers) > 0 {
		_spec.Modifiers = csuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, csuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := csuq.withCarrierService; query != nil {
		if err := csuq.loadCarrierService(ctx, query, nodes, nil,
			func(n *CarrierServiceUSPS, e *CarrierService) { n.Edges.CarrierService = e }); err != nil {
			return nil, err
		}
	}
	if query := csuq.withCarrierAdditionalServiceUSPS; query != nil {
		if err := csuq.loadCarrierAdditionalServiceUSPS(ctx, query, nodes,
			func(n *CarrierServiceUSPS) { n.Edges.CarrierAdditionalServiceUSPS = []*CarrierAdditionalServiceUSPS{} },
			func(n *CarrierServiceUSPS, e *CarrierAdditionalServiceUSPS) {
				n.Edges.CarrierAdditionalServiceUSPS = append(n.Edges.CarrierAdditionalServiceUSPS, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range csuq.withNamedCarrierAdditionalServiceUSPS {
		if err := csuq.loadCarrierAdditionalServiceUSPS(ctx, query, nodes,
			func(n *CarrierServiceUSPS) { n.appendNamedCarrierAdditionalServiceUSPS(name) },
			func(n *CarrierServiceUSPS, e *CarrierAdditionalServiceUSPS) {
				n.appendNamedCarrierAdditionalServiceUSPS(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range csuq.loadTotal {
		if err := csuq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (csuq *CarrierServiceUSPSQuery) loadCarrierService(ctx context.Context, query *CarrierServiceQuery, nodes []*CarrierServiceUSPS, init func(*CarrierServiceUSPS), assign func(*CarrierServiceUSPS, *CarrierService)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*CarrierServiceUSPS)
	for i := range nodes {
		if nodes[i].carrier_service_carrier_service_usps == nil {
			continue
		}
		fk := *nodes[i].carrier_service_carrier_service_usps
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(carrierservice.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "carrier_service_carrier_service_usps" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (csuq *CarrierServiceUSPSQuery) loadCarrierAdditionalServiceUSPS(ctx context.Context, query *CarrierAdditionalServiceUSPSQuery, nodes []*CarrierServiceUSPS, init func(*CarrierServiceUSPS), assign func(*CarrierServiceUSPS, *CarrierAdditionalServiceUSPS)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*CarrierServiceUSPS)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.CarrierAdditionalServiceUSPS(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(carrierserviceusps.CarrierAdditionalServiceUSPSColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.carrier_service_usps_carrier_additional_service_usps
		if fk == nil {
			return fmt.Errorf(`foreign-key "carrier_service_usps_carrier_additional_service_usps" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "carrier_service_usps_carrier_additional_service_usps" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (csuq *CarrierServiceUSPSQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := csuq.querySpec()
	if len(csuq.modifiers) > 0 {
		_spec.Modifiers = csuq.modifiers
	}
	_spec.Node.Columns = csuq.ctx.Fields
	if len(csuq.ctx.Fields) > 0 {
		_spec.Unique = csuq.ctx.Unique != nil && *csuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, csuq.driver, _spec)
}

func (csuq *CarrierServiceUSPSQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrierserviceusps.Table, carrierserviceusps.Columns, sqlgraph.NewFieldSpec(carrierserviceusps.FieldID, field.TypeString))
	_spec.From = csuq.sql
	if unique := csuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if csuq.path != nil {
		_spec.Unique = true
	}
	if fields := csuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrierserviceusps.FieldID)
		for i := range fields {
			if fields[i] != carrierserviceusps.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := csuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := csuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := csuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := csuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (csuq *CarrierServiceUSPSQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(csuq.driver.Dialect())
	t1 := builder.Table(carrierserviceusps.Table)
	columns := csuq.ctx.Fields
	if len(columns) == 0 {
		columns = carrierserviceusps.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if csuq.sql != nil {
		selector = csuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if csuq.ctx.Unique != nil && *csuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range csuq.predicates {
		p(selector)
	}
	for _, p := range csuq.order {
		p(selector)
	}
	if offset := csuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := csuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierAdditionalServiceUSPS tells the query-builder to eager-load the nodes that are connected to the "carrier_additional_service_usps"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (csuq *CarrierServiceUSPSQuery) WithNamedCarrierAdditionalServiceUSPS(name string, opts ...func(*CarrierAdditionalServiceUSPSQuery)) *CarrierServiceUSPSQuery {
	query := (&CarrierAdditionalServiceUSPSClient{config: csuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if csuq.withNamedCarrierAdditionalServiceUSPS == nil {
		csuq.withNamedCarrierAdditionalServiceUSPS = make(map[string]*CarrierAdditionalServiceUSPSQuery)
	}
	csuq.withNamedCarrierAdditionalServiceUSPS[name] = query
	return csuq
}

// CarrierServiceUSPSGroupBy is the group-by builder for CarrierServiceUSPS entities.
type CarrierServiceUSPSGroupBy struct {
	selector
	build *CarrierServiceUSPSQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (csugb *CarrierServiceUSPSGroupBy) Aggregate(fns ...AggregateFunc) *CarrierServiceUSPSGroupBy {
	csugb.fns = append(csugb.fns, fns...)
	return csugb
}

// Scan applies the selector query and scans the result into the given value.
func (csugb *CarrierServiceUSPSGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csugb.build.ctx, ent.OpQueryGroupBy)
	if err := csugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceUSPSQuery, *CarrierServiceUSPSGroupBy](ctx, csugb.build, csugb, csugb.build.inters, v)
}

func (csugb *CarrierServiceUSPSGroupBy) sqlScan(ctx context.Context, root *CarrierServiceUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(csugb.fns))
	for _, fn := range csugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*csugb.flds)+len(csugb.fns))
		for _, f := range *csugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*csugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierServiceUSPSSelect is the builder for selecting fields of CarrierServiceUSPS entities.
type CarrierServiceUSPSSelect struct {
	*CarrierServiceUSPSQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (csus *CarrierServiceUSPSSelect) Aggregate(fns ...AggregateFunc) *CarrierServiceUSPSSelect {
	csus.fns = append(csus.fns, fns...)
	return csus
}

// Scan applies the selector query and scans the result into the given value.
func (csus *CarrierServiceUSPSSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, csus.ctx, ent.OpQuerySelect)
	if err := csus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierServiceUSPSQuery, *CarrierServiceUSPSSelect](ctx, csus.CarrierServiceUSPSQuery, csus, csus.inters, v)
}

func (csus *CarrierServiceUSPSSelect) sqlScan(ctx context.Context, root *CarrierServiceUSPSQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(csus.fns))
	for _, fn := range csus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*csus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := csus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
