// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DeliveryRuleUpdate is the builder for updating DeliveryRule entities.
type DeliveryRuleUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryRuleMutation
}

// Where appends a list predicates to the DeliveryRuleUpdate builder.
func (dru *DeliveryRuleUpdate) Where(ps ...predicate.DeliveryRule) *DeliveryRuleUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetTenantID sets the "tenant_id" field.
func (dru *DeliveryRuleUpdate) SetTenantID(pu pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.SetTenantID(pu)
	return dru
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (dru *DeliveryRuleUpdate) SetNillableTenantID(pu *pulid.ID) *DeliveryRuleUpdate {
	if pu != nil {
		dru.SetTenantID(*pu)
	}
	return dru
}

// SetName sets the "name" field.
func (dru *DeliveryRuleUpdate) SetName(s string) *DeliveryRuleUpdate {
	dru.mutation.SetName(s)
	return dru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dru *DeliveryRuleUpdate) SetNillableName(s *string) *DeliveryRuleUpdate {
	if s != nil {
		dru.SetName(*s)
	}
	return dru
}

// SetPrice sets the "price" field.
func (dru *DeliveryRuleUpdate) SetPrice(f float64) *DeliveryRuleUpdate {
	dru.mutation.ResetPrice()
	dru.mutation.SetPrice(f)
	return dru
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (dru *DeliveryRuleUpdate) SetNillablePrice(f *float64) *DeliveryRuleUpdate {
	if f != nil {
		dru.SetPrice(*f)
	}
	return dru
}

// AddPrice adds f to the "price" field.
func (dru *DeliveryRuleUpdate) AddPrice(f float64) *DeliveryRuleUpdate {
	dru.mutation.AddPrice(f)
	return dru
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (dru *DeliveryRuleUpdate) SetTenant(t *Tenant) *DeliveryRuleUpdate {
	return dru.SetTenantID(t.ID)
}

// AddDeliveryRuleConstraintGroupIDs adds the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity by IDs.
func (dru *DeliveryRuleUpdate) AddDeliveryRuleConstraintGroupIDs(ids ...pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.AddDeliveryRuleConstraintGroupIDs(ids...)
	return dru
}

// AddDeliveryRuleConstraintGroup adds the "delivery_rule_constraint_group" edges to the DeliveryRuleConstraintGroup entity.
func (dru *DeliveryRuleUpdate) AddDeliveryRuleConstraintGroup(d ...*DeliveryRuleConstraintGroup) *DeliveryRuleUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dru.AddDeliveryRuleConstraintGroupIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (dru *DeliveryRuleUpdate) SetDeliveryOptionID(id pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.SetDeliveryOptionID(id)
	return dru
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (dru *DeliveryRuleUpdate) SetNillableDeliveryOptionID(id *pulid.ID) *DeliveryRuleUpdate {
	if id != nil {
		dru = dru.SetDeliveryOptionID(*id)
	}
	return dru
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (dru *DeliveryRuleUpdate) SetDeliveryOption(d *DeliveryOption) *DeliveryRuleUpdate {
	return dru.SetDeliveryOptionID(d.ID)
}

// AddCountryIDs adds the "country" edge to the Country entity by IDs.
func (dru *DeliveryRuleUpdate) AddCountryIDs(ids ...pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.AddCountryIDs(ids...)
	return dru
}

// AddCountry adds the "country" edges to the Country entity.
func (dru *DeliveryRuleUpdate) AddCountry(c ...*Country) *DeliveryRuleUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dru.AddCountryIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (dru *DeliveryRuleUpdate) SetCurrencyID(id pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.SetCurrencyID(id)
	return dru
}

// SetNillableCurrencyID sets the "currency" edge to the Currency entity by ID if the given value is not nil.
func (dru *DeliveryRuleUpdate) SetNillableCurrencyID(id *pulid.ID) *DeliveryRuleUpdate {
	if id != nil {
		dru = dru.SetCurrencyID(*id)
	}
	return dru
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (dru *DeliveryRuleUpdate) SetCurrency(c *Currency) *DeliveryRuleUpdate {
	return dru.SetCurrencyID(c.ID)
}

// Mutation returns the DeliveryRuleMutation object of the builder.
func (dru *DeliveryRuleUpdate) Mutation() *DeliveryRuleMutation {
	return dru.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (dru *DeliveryRuleUpdate) ClearTenant() *DeliveryRuleUpdate {
	dru.mutation.ClearTenant()
	return dru
}

// ClearDeliveryRuleConstraintGroup clears all "delivery_rule_constraint_group" edges to the DeliveryRuleConstraintGroup entity.
func (dru *DeliveryRuleUpdate) ClearDeliveryRuleConstraintGroup() *DeliveryRuleUpdate {
	dru.mutation.ClearDeliveryRuleConstraintGroup()
	return dru
}

// RemoveDeliveryRuleConstraintGroupIDs removes the "delivery_rule_constraint_group" edge to DeliveryRuleConstraintGroup entities by IDs.
func (dru *DeliveryRuleUpdate) RemoveDeliveryRuleConstraintGroupIDs(ids ...pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.RemoveDeliveryRuleConstraintGroupIDs(ids...)
	return dru
}

// RemoveDeliveryRuleConstraintGroup removes "delivery_rule_constraint_group" edges to DeliveryRuleConstraintGroup entities.
func (dru *DeliveryRuleUpdate) RemoveDeliveryRuleConstraintGroup(d ...*DeliveryRuleConstraintGroup) *DeliveryRuleUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dru.RemoveDeliveryRuleConstraintGroupIDs(ids...)
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (dru *DeliveryRuleUpdate) ClearDeliveryOption() *DeliveryRuleUpdate {
	dru.mutation.ClearDeliveryOption()
	return dru
}

// ClearCountry clears all "country" edges to the Country entity.
func (dru *DeliveryRuleUpdate) ClearCountry() *DeliveryRuleUpdate {
	dru.mutation.ClearCountry()
	return dru
}

// RemoveCountryIDs removes the "country" edge to Country entities by IDs.
func (dru *DeliveryRuleUpdate) RemoveCountryIDs(ids ...pulid.ID) *DeliveryRuleUpdate {
	dru.mutation.RemoveCountryIDs(ids...)
	return dru
}

// RemoveCountry removes "country" edges to Country entities.
func (dru *DeliveryRuleUpdate) RemoveCountry(c ...*Country) *DeliveryRuleUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dru.RemoveCountryIDs(ids...)
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (dru *DeliveryRuleUpdate) ClearCurrency() *DeliveryRuleUpdate {
	dru.mutation.ClearCurrency()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DeliveryRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DeliveryRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DeliveryRuleUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DeliveryRuleUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DeliveryRuleUpdate) check() error {
	if dru.mutation.TenantCleared() && len(dru.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRule.tenant"`)
	}
	return nil
}

func (dru *DeliveryRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryrule.Table, deliveryrule.Columns, sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Name(); ok {
		_spec.SetField(deliveryrule.FieldName, field.TypeString, value)
	}
	if value, ok := dru.mutation.Price(); ok {
		_spec.SetField(deliveryrule.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := dru.mutation.AddedPrice(); ok {
		_spec.AddField(deliveryrule.FieldPrice, field.TypeFloat64, value)
	}
	if dru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.TenantTable,
			Columns: []string{deliveryrule.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.TenantTable,
			Columns: []string{deliveryrule.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.DeliveryRuleConstraintGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedDeliveryRuleConstraintGroupIDs(); len(nodes) > 0 && !dru.mutation.DeliveryRuleConstraintGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DeliveryRuleConstraintGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryrule.DeliveryOptionTable,
			Columns: []string{deliveryrule.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryrule.DeliveryOptionTable,
			Columns: []string{deliveryrule.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.RemovedCountryIDs(); len(nodes) > 0 && !dru.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dru.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.CurrencyTable,
			Columns: []string{deliveryrule.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.CurrencyTable,
			Columns: []string{deliveryrule.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DeliveryRuleUpdateOne is the builder for updating a single DeliveryRule entity.
type DeliveryRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryRuleMutation
}

// SetTenantID sets the "tenant_id" field.
func (druo *DeliveryRuleUpdateOne) SetTenantID(pu pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.SetTenantID(pu)
	return druo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (druo *DeliveryRuleUpdateOne) SetNillableTenantID(pu *pulid.ID) *DeliveryRuleUpdateOne {
	if pu != nil {
		druo.SetTenantID(*pu)
	}
	return druo
}

// SetName sets the "name" field.
func (druo *DeliveryRuleUpdateOne) SetName(s string) *DeliveryRuleUpdateOne {
	druo.mutation.SetName(s)
	return druo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (druo *DeliveryRuleUpdateOne) SetNillableName(s *string) *DeliveryRuleUpdateOne {
	if s != nil {
		druo.SetName(*s)
	}
	return druo
}

// SetPrice sets the "price" field.
func (druo *DeliveryRuleUpdateOne) SetPrice(f float64) *DeliveryRuleUpdateOne {
	druo.mutation.ResetPrice()
	druo.mutation.SetPrice(f)
	return druo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (druo *DeliveryRuleUpdateOne) SetNillablePrice(f *float64) *DeliveryRuleUpdateOne {
	if f != nil {
		druo.SetPrice(*f)
	}
	return druo
}

// AddPrice adds f to the "price" field.
func (druo *DeliveryRuleUpdateOne) AddPrice(f float64) *DeliveryRuleUpdateOne {
	druo.mutation.AddPrice(f)
	return druo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (druo *DeliveryRuleUpdateOne) SetTenant(t *Tenant) *DeliveryRuleUpdateOne {
	return druo.SetTenantID(t.ID)
}

// AddDeliveryRuleConstraintGroupIDs adds the "delivery_rule_constraint_group" edge to the DeliveryRuleConstraintGroup entity by IDs.
func (druo *DeliveryRuleUpdateOne) AddDeliveryRuleConstraintGroupIDs(ids ...pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.AddDeliveryRuleConstraintGroupIDs(ids...)
	return druo
}

// AddDeliveryRuleConstraintGroup adds the "delivery_rule_constraint_group" edges to the DeliveryRuleConstraintGroup entity.
func (druo *DeliveryRuleUpdateOne) AddDeliveryRuleConstraintGroup(d ...*DeliveryRuleConstraintGroup) *DeliveryRuleUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return druo.AddDeliveryRuleConstraintGroupIDs(ids...)
}

// SetDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID.
func (druo *DeliveryRuleUpdateOne) SetDeliveryOptionID(id pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.SetDeliveryOptionID(id)
	return druo
}

// SetNillableDeliveryOptionID sets the "delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (druo *DeliveryRuleUpdateOne) SetNillableDeliveryOptionID(id *pulid.ID) *DeliveryRuleUpdateOne {
	if id != nil {
		druo = druo.SetDeliveryOptionID(*id)
	}
	return druo
}

// SetDeliveryOption sets the "delivery_option" edge to the DeliveryOption entity.
func (druo *DeliveryRuleUpdateOne) SetDeliveryOption(d *DeliveryOption) *DeliveryRuleUpdateOne {
	return druo.SetDeliveryOptionID(d.ID)
}

// AddCountryIDs adds the "country" edge to the Country entity by IDs.
func (druo *DeliveryRuleUpdateOne) AddCountryIDs(ids ...pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.AddCountryIDs(ids...)
	return druo
}

// AddCountry adds the "country" edges to the Country entity.
func (druo *DeliveryRuleUpdateOne) AddCountry(c ...*Country) *DeliveryRuleUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return druo.AddCountryIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (druo *DeliveryRuleUpdateOne) SetCurrencyID(id pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.SetCurrencyID(id)
	return druo
}

// SetNillableCurrencyID sets the "currency" edge to the Currency entity by ID if the given value is not nil.
func (druo *DeliveryRuleUpdateOne) SetNillableCurrencyID(id *pulid.ID) *DeliveryRuleUpdateOne {
	if id != nil {
		druo = druo.SetCurrencyID(*id)
	}
	return druo
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (druo *DeliveryRuleUpdateOne) SetCurrency(c *Currency) *DeliveryRuleUpdateOne {
	return druo.SetCurrencyID(c.ID)
}

// Mutation returns the DeliveryRuleMutation object of the builder.
func (druo *DeliveryRuleUpdateOne) Mutation() *DeliveryRuleMutation {
	return druo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (druo *DeliveryRuleUpdateOne) ClearTenant() *DeliveryRuleUpdateOne {
	druo.mutation.ClearTenant()
	return druo
}

// ClearDeliveryRuleConstraintGroup clears all "delivery_rule_constraint_group" edges to the DeliveryRuleConstraintGroup entity.
func (druo *DeliveryRuleUpdateOne) ClearDeliveryRuleConstraintGroup() *DeliveryRuleUpdateOne {
	druo.mutation.ClearDeliveryRuleConstraintGroup()
	return druo
}

// RemoveDeliveryRuleConstraintGroupIDs removes the "delivery_rule_constraint_group" edge to DeliveryRuleConstraintGroup entities by IDs.
func (druo *DeliveryRuleUpdateOne) RemoveDeliveryRuleConstraintGroupIDs(ids ...pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.RemoveDeliveryRuleConstraintGroupIDs(ids...)
	return druo
}

// RemoveDeliveryRuleConstraintGroup removes "delivery_rule_constraint_group" edges to DeliveryRuleConstraintGroup entities.
func (druo *DeliveryRuleUpdateOne) RemoveDeliveryRuleConstraintGroup(d ...*DeliveryRuleConstraintGroup) *DeliveryRuleUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return druo.RemoveDeliveryRuleConstraintGroupIDs(ids...)
}

// ClearDeliveryOption clears the "delivery_option" edge to the DeliveryOption entity.
func (druo *DeliveryRuleUpdateOne) ClearDeliveryOption() *DeliveryRuleUpdateOne {
	druo.mutation.ClearDeliveryOption()
	return druo
}

// ClearCountry clears all "country" edges to the Country entity.
func (druo *DeliveryRuleUpdateOne) ClearCountry() *DeliveryRuleUpdateOne {
	druo.mutation.ClearCountry()
	return druo
}

// RemoveCountryIDs removes the "country" edge to Country entities by IDs.
func (druo *DeliveryRuleUpdateOne) RemoveCountryIDs(ids ...pulid.ID) *DeliveryRuleUpdateOne {
	druo.mutation.RemoveCountryIDs(ids...)
	return druo
}

// RemoveCountry removes "country" edges to Country entities.
func (druo *DeliveryRuleUpdateOne) RemoveCountry(c ...*Country) *DeliveryRuleUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return druo.RemoveCountryIDs(ids...)
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (druo *DeliveryRuleUpdateOne) ClearCurrency() *DeliveryRuleUpdateOne {
	druo.mutation.ClearCurrency()
	return druo
}

// Where appends a list predicates to the DeliveryRuleUpdate builder.
func (druo *DeliveryRuleUpdateOne) Where(ps ...predicate.DeliveryRule) *DeliveryRuleUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DeliveryRuleUpdateOne) Select(field string, fields ...string) *DeliveryRuleUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DeliveryRule entity.
func (druo *DeliveryRuleUpdateOne) Save(ctx context.Context) (*DeliveryRule, error) {
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DeliveryRuleUpdateOne) SaveX(ctx context.Context) *DeliveryRule {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DeliveryRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DeliveryRuleUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DeliveryRuleUpdateOne) check() error {
	if druo.mutation.TenantCleared() && len(druo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DeliveryRule.tenant"`)
	}
	return nil
}

func (druo *DeliveryRuleUpdateOne) sqlSave(ctx context.Context) (_node *DeliveryRule, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliveryrule.Table, deliveryrule.Columns, sqlgraph.NewFieldSpec(deliveryrule.FieldID, field.TypeString))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeliveryRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliveryrule.FieldID)
		for _, f := range fields {
			if !deliveryrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliveryrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.Name(); ok {
		_spec.SetField(deliveryrule.FieldName, field.TypeString, value)
	}
	if value, ok := druo.mutation.Price(); ok {
		_spec.SetField(deliveryrule.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := druo.mutation.AddedPrice(); ok {
		_spec.AddField(deliveryrule.FieldPrice, field.TypeFloat64, value)
	}
	if druo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.TenantTable,
			Columns: []string{deliveryrule.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.TenantTable,
			Columns: []string{deliveryrule.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.DeliveryRuleConstraintGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedDeliveryRuleConstraintGroupIDs(); len(nodes) > 0 && !druo.mutation.DeliveryRuleConstraintGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DeliveryRuleConstraintGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryruleconstraintgroup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryrule.DeliveryOptionTable,
			Columns: []string{deliveryrule.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryrule.DeliveryOptionTable,
			Columns: []string{deliveryrule.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.RemovedCountryIDs(); len(nodes) > 0 && !druo.mutation.CountryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.CountryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if druo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.CurrencyTable,
			Columns: []string{deliveryrule.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.CurrencyTable,
			Columns: []string{deliveryrule.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeliveryRule{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliveryrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
