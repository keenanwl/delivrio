// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/seatgroupaccessright"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatGroupAccessRightDelete is the builder for deleting a SeatGroupAccessRight entity.
type SeatGroupAccessRightDelete struct {
	config
	hooks    []Hook
	mutation *SeatGroupAccessRightMutation
}

// Where appends a list predicates to the SeatGroupAccessRightDelete builder.
func (sgard *SeatGroupAccessRightDelete) Where(ps ...predicate.SeatGroupAccessRight) *SeatGroupAccessRightDelete {
	sgard.mutation.Where(ps...)
	return sgard
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sgard *SeatGroupAccessRightDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sgard.sqlExec, sgard.mutation, sgard.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sgard *SeatGroupAccessRightDelete) ExecX(ctx context.Context) int {
	n, err := sgard.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sgard *SeatGroupAccessRightDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(seatgroupaccessright.Table, sqlgraph.NewFieldSpec(seatgroupaccessright.FieldID, field.TypeString))
	if ps := sgard.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sgard.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sgard.mutation.done = true
	return affected, err
}

// SeatGroupAccessRightDeleteOne is the builder for deleting a single SeatGroupAccessRight entity.
type SeatGroupAccessRightDeleteOne struct {
	sgard *SeatGroupAccessRightDelete
}

// Where appends a list predicates to the SeatGroupAccessRightDelete builder.
func (sgardo *SeatGroupAccessRightDeleteOne) Where(ps ...predicate.SeatGroupAccessRight) *SeatGroupAccessRightDeleteOne {
	sgardo.sgard.mutation.Where(ps...)
	return sgardo
}

// Exec executes the deletion query.
func (sgardo *SeatGroupAccessRightDeleteOne) Exec(ctx context.Context) error {
	n, err := sgardo.sgard.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{seatgroupaccessright.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sgardo *SeatGroupAccessRightDeleteOne) ExecX(ctx context.Context) {
	if err := sgardo.Exec(ctx); err != nil {
		panic(err)
	}
}
