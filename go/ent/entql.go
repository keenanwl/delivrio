// Code generated by ent, DO NOT EDIT.

package ent

import (
	"delivrio.io/go/ent/accessright"
	"delivrio.io/go/ent/address"
	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/apitoken"
	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/carrier"
	"delivrio.io/go/ent/carrieradditionalservicebring"
	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrieradditionalservicedf"
	"delivrio.io/go/ent/carrieradditionalservicedsv"
	"delivrio.io/go/ent/carrieradditionalserviceeasypost"
	"delivrio.io/go/ent/carrieradditionalservicegls"
	"delivrio.io/go/ent/carrieradditionalservicepostnord"
	"delivrio.io/go/ent/carrieradditionalserviceusps"
	"delivrio.io/go/ent/carrierbrand"
	"delivrio.io/go/ent/carrierbring"
	"delivrio.io/go/ent/carrierdao"
	"delivrio.io/go/ent/carrierdf"
	"delivrio.io/go/ent/carrierdsv"
	"delivrio.io/go/ent/carriereasypost"
	"delivrio.io/go/ent/carriergls"
	"delivrio.io/go/ent/carrierpostnord"
	"delivrio.io/go/ent/carrierservice"
	"delivrio.io/go/ent/carrierservicebring"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/carrierservicedf"
	"delivrio.io/go/ent/carrierservicedsv"
	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/carrierservicegls"
	"delivrio.io/go/ent/carrierservicepostnord"
	"delivrio.io/go/ent/carrierserviceusps"
	"delivrio.io/go/ent/carrierusps"
	"delivrio.io/go/ent/changehistory"
	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/connectoptionplatform"
	"delivrio.io/go/ent/consolidation"
	"delivrio.io/go/ent/contact"
	"delivrio.io/go/ent/country"
	"delivrio.io/go/ent/countryharmonizedcode"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/deliveryoptionbring"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/deliveryoptiondf"
	"delivrio.io/go/ent/deliveryoptiondsv"
	"delivrio.io/go/ent/deliveryoptioneasypost"
	"delivrio.io/go/ent/deliveryoptiongls"
	"delivrio.io/go/ent/deliveryoptionpostnord"
	"delivrio.io/go/ent/deliveryoptionusps"
	"delivrio.io/go/ent/deliveryrule"
	"delivrio.io/go/ent/deliveryruleconstraint"
	"delivrio.io/go/ent/deliveryruleconstraintgroup"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/inventoryitem"
	"delivrio.io/go/ent/language"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/locationtag"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/orderhistory"
	"delivrio.io/go/ent/orderline"
	"delivrio.io/go/ent/ordersender"
	"delivrio.io/go/ent/otkrequests"
	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/packagingusps"
	"delivrio.io/go/ent/packaginguspsprocessingcategory"
	"delivrio.io/go/ent/packaginguspsrateindicator"
	"delivrio.io/go/ent/pallet"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshopbring"
	"delivrio.io/go/ent/parcelshopdao"
	"delivrio.io/go/ent/parcelshopgls"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/go/ent/plan"
	"delivrio.io/go/ent/planhistory"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/printer"
	"delivrio.io/go/ent/printjob"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/producttag"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/returncolli"
	"delivrio.io/go/ent/returncollihistory"
	"delivrio.io/go/ent/returnorderline"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/returnportalclaim"
	"delivrio.io/go/ent/seatgroup"
	"delivrio.io/go/ent/seatgroupaccessright"
	"delivrio.io/go/ent/shipment"
	"delivrio.io/go/ent/shipmentbring"
	"delivrio.io/go/ent/shipmentdao"
	"delivrio.io/go/ent/shipmentdf"
	"delivrio.io/go/ent/shipmentdsv"
	"delivrio.io/go/ent/shipmenteasypost"
	"delivrio.io/go/ent/shipmentgls"
	"delivrio.io/go/ent/shipmenthistory"
	"delivrio.io/go/ent/shipmentpallet"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/shipmentpostnord"
	"delivrio.io/go/ent/shipmentusps"
	"delivrio.io/go/ent/signupoptions"
	"delivrio.io/go/ent/systemevents"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/go/ent/user"
	"delivrio.io/go/ent/userseat"
	"delivrio.io/go/ent/workspacerecentscan"
	"delivrio.io/go/ent/workstation"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 119)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apitoken.Table,
			Columns: apitoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: apitoken.FieldID,
			},
		},
		Type: "APIToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			apitoken.FieldTenantID:    {Type: field.TypeString, Column: apitoken.FieldTenantID},
			apitoken.FieldName:        {Type: field.TypeString, Column: apitoken.FieldName},
			apitoken.FieldHashedToken: {Type: field.TypeString, Column: apitoken.FieldHashedToken},
			apitoken.FieldCreatedAt:   {Type: field.TypeTime, Column: apitoken.FieldCreatedAt},
			apitoken.FieldLastUsed:    {Type: field.TypeTime, Column: apitoken.FieldLastUsed},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   accessright.Table,
			Columns: accessright.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accessright.FieldID,
			},
		},
		Type: "AccessRight",
		Fields: map[string]*sqlgraph.FieldSpec{
			accessright.FieldLabel:      {Type: field.TypeString, Column: accessright.FieldLabel},
			accessright.FieldInternalID: {Type: field.TypeString, Column: accessright.FieldInternalID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: address.FieldID,
			},
		},
		Type: "Address",
		Fields: map[string]*sqlgraph.FieldSpec{
			address.FieldTenantID:     {Type: field.TypeString, Column: address.FieldTenantID},
			address.FieldUniquenessID: {Type: field.TypeString, Column: address.FieldUniquenessID},
			address.FieldFirstName:    {Type: field.TypeString, Column: address.FieldFirstName},
			address.FieldLastName:     {Type: field.TypeString, Column: address.FieldLastName},
			address.FieldEmail:        {Type: field.TypeString, Column: address.FieldEmail},
			address.FieldPhoneNumber:  {Type: field.TypeString, Column: address.FieldPhoneNumber},
			address.FieldPhoneNumber2: {Type: field.TypeString, Column: address.FieldPhoneNumber2},
			address.FieldVatNumber:    {Type: field.TypeString, Column: address.FieldVatNumber},
			address.FieldCompany:      {Type: field.TypeString, Column: address.FieldCompany},
			address.FieldAddressOne:   {Type: field.TypeString, Column: address.FieldAddressOne},
			address.FieldAddressTwo:   {Type: field.TypeString, Column: address.FieldAddressTwo},
			address.FieldCity:         {Type: field.TypeString, Column: address.FieldCity},
			address.FieldState:        {Type: field.TypeString, Column: address.FieldState},
			address.FieldZip:          {Type: field.TypeString, Column: address.FieldZip},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   addressglobal.Table,
			Columns: addressglobal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: addressglobal.FieldID,
			},
		},
		Type: "AddressGlobal",
		Fields: map[string]*sqlgraph.FieldSpec{
			addressglobal.FieldUniquenessID: {Type: field.TypeString, Column: addressglobal.FieldUniquenessID},
			addressglobal.FieldCompany:      {Type: field.TypeString, Column: addressglobal.FieldCompany},
			addressglobal.FieldAddressOne:   {Type: field.TypeString, Column: addressglobal.FieldAddressOne},
			addressglobal.FieldAddressTwo:   {Type: field.TypeString, Column: addressglobal.FieldAddressTwo},
			addressglobal.FieldCity:         {Type: field.TypeString, Column: addressglobal.FieldCity},
			addressglobal.FieldState:        {Type: field.TypeString, Column: addressglobal.FieldState},
			addressglobal.FieldZip:          {Type: field.TypeString, Column: addressglobal.FieldZip},
			addressglobal.FieldLatitude:     {Type: field.TypeFloat64, Column: addressglobal.FieldLatitude},
			addressglobal.FieldLongitude:    {Type: field.TypeFloat64, Column: addressglobal.FieldLongitude},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   businesshoursperiod.Table,
			Columns: businesshoursperiod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: businesshoursperiod.FieldID,
			},
		},
		Type: "BusinessHoursPeriod",
		Fields: map[string]*sqlgraph.FieldSpec{
			businesshoursperiod.FieldDayOfWeek: {Type: field.TypeEnum, Column: businesshoursperiod.FieldDayOfWeek},
			businesshoursperiod.FieldOpening:   {Type: field.TypeTime, Column: businesshoursperiod.FieldOpening},
			businesshoursperiod.FieldClosing:   {Type: field.TypeTime, Column: businesshoursperiod.FieldClosing},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrier.Table,
			Columns: carrier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrier.FieldID,
			},
		},
		Type: "Carrier",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrier.FieldTenantID:        {Type: field.TypeString, Column: carrier.FieldTenantID},
			carrier.FieldName:            {Type: field.TypeString, Column: carrier.FieldName},
			carrier.FieldSyncCancelation: {Type: field.TypeBool, Column: carrier.FieldSyncCancelation},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalservicebring.Table,
			Columns: carrieradditionalservicebring.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalservicebring.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceBring",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalservicebring.FieldLabel:          {Type: field.TypeString, Column: carrieradditionalservicebring.FieldLabel},
			carrieradditionalservicebring.FieldAPICodeBooking: {Type: field.TypeString, Column: carrieradditionalservicebring.FieldAPICodeBooking},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalservicedao.Table,
			Columns: carrieradditionalservicedao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalservicedao.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceDAO",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalservicedao.FieldLabel:   {Type: field.TypeString, Column: carrieradditionalservicedao.FieldLabel},
			carrieradditionalservicedao.FieldAPICode: {Type: field.TypeString, Column: carrieradditionalservicedao.FieldAPICode},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalservicedf.Table,
			Columns: carrieradditionalservicedf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalservicedf.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceDF",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalservicedf.FieldLabel:   {Type: field.TypeString, Column: carrieradditionalservicedf.FieldLabel},
			carrieradditionalservicedf.FieldAPICode: {Type: field.TypeString, Column: carrieradditionalservicedf.FieldAPICode},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalservicedsv.Table,
			Columns: carrieradditionalservicedsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalservicedsv.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceDSV",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalservicedsv.FieldLabel:   {Type: field.TypeString, Column: carrieradditionalservicedsv.FieldLabel},
			carrieradditionalservicedsv.FieldAPICode: {Type: field.TypeString, Column: carrieradditionalservicedsv.FieldAPICode},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalserviceeasypost.Table,
			Columns: carrieradditionalserviceeasypost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalserviceeasypost.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceEasyPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalserviceeasypost.FieldLabel:    {Type: field.TypeString, Column: carrieradditionalserviceeasypost.FieldLabel},
			carrieradditionalserviceeasypost.FieldAPIKey:   {Type: field.TypeString, Column: carrieradditionalserviceeasypost.FieldAPIKey},
			carrieradditionalserviceeasypost.FieldAPIValue: {Type: field.TypeString, Column: carrieradditionalserviceeasypost.FieldAPIValue},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalservicegls.Table,
			Columns: carrieradditionalservicegls.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalservicegls.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceGLS",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalservicegls.FieldLabel:                 {Type: field.TypeString, Column: carrieradditionalservicegls.FieldLabel},
			carrieradditionalservicegls.FieldMandatory:             {Type: field.TypeBool, Column: carrieradditionalservicegls.FieldMandatory},
			carrieradditionalservicegls.FieldAllCountriesConsignor: {Type: field.TypeBool, Column: carrieradditionalservicegls.FieldAllCountriesConsignor},
			carrieradditionalservicegls.FieldAllCountriesConsignee: {Type: field.TypeBool, Column: carrieradditionalservicegls.FieldAllCountriesConsignee},
			carrieradditionalservicegls.FieldInternalID:            {Type: field.TypeString, Column: carrieradditionalservicegls.FieldInternalID},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalservicepostnord.Table,
			Columns: carrieradditionalservicepostnord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalservicepostnord.FieldID,
			},
		},
		Type: "CarrierAdditionalServicePostNord",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalservicepostnord.FieldLabel:                 {Type: field.TypeString, Column: carrieradditionalservicepostnord.FieldLabel},
			carrieradditionalservicepostnord.FieldMandatory:             {Type: field.TypeBool, Column: carrieradditionalservicepostnord.FieldMandatory},
			carrieradditionalservicepostnord.FieldAllCountriesConsignor: {Type: field.TypeBool, Column: carrieradditionalservicepostnord.FieldAllCountriesConsignor},
			carrieradditionalservicepostnord.FieldAllCountriesConsignee: {Type: field.TypeBool, Column: carrieradditionalservicepostnord.FieldAllCountriesConsignee},
			carrieradditionalservicepostnord.FieldInternalID:            {Type: field.TypeString, Column: carrieradditionalservicepostnord.FieldInternalID},
			carrieradditionalservicepostnord.FieldAPICode:               {Type: field.TypeString, Column: carrieradditionalservicepostnord.FieldAPICode},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrieradditionalserviceusps.Table,
			Columns: carrieradditionalserviceusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrieradditionalserviceusps.FieldID,
			},
		},
		Type: "CarrierAdditionalServiceUSPS",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrieradditionalserviceusps.FieldLabel:        {Type: field.TypeString, Column: carrieradditionalserviceusps.FieldLabel},
			carrieradditionalserviceusps.FieldCommonlyUsed: {Type: field.TypeBool, Column: carrieradditionalserviceusps.FieldCommonlyUsed},
			carrieradditionalserviceusps.FieldInternalID:   {Type: field.TypeEnum, Column: carrieradditionalserviceusps.FieldInternalID},
			carrieradditionalserviceusps.FieldAPICode:      {Type: field.TypeString, Column: carrieradditionalserviceusps.FieldAPICode},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierbrand.Table,
			Columns: carrierbrand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierbrand.FieldID,
			},
		},
		Type: "CarrierBrand",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierbrand.FieldLabel:           {Type: field.TypeString, Column: carrierbrand.FieldLabel},
			carrierbrand.FieldLabelShort:      {Type: field.TypeString, Column: carrierbrand.FieldLabelShort},
			carrierbrand.FieldInternalID:      {Type: field.TypeEnum, Column: carrierbrand.FieldInternalID},
			carrierbrand.FieldLogoURL:         {Type: field.TypeString, Column: carrierbrand.FieldLogoURL},
			carrierbrand.FieldTextColor:       {Type: field.TypeString, Column: carrierbrand.FieldTextColor},
			carrierbrand.FieldBackgroundColor: {Type: field.TypeString, Column: carrierbrand.FieldBackgroundColor},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierbring.Table,
			Columns: carrierbring.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierbring.FieldID,
			},
		},
		Type: "CarrierBring",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierbring.FieldTenantID:       {Type: field.TypeString, Column: carrierbring.FieldTenantID},
			carrierbring.FieldAPIKey:         {Type: field.TypeString, Column: carrierbring.FieldAPIKey},
			carrierbring.FieldCustomerNumber: {Type: field.TypeString, Column: carrierbring.FieldCustomerNumber},
			carrierbring.FieldTest:           {Type: field.TypeBool, Column: carrierbring.FieldTest},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierdao.Table,
			Columns: carrierdao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierdao.FieldID,
			},
		},
		Type: "CarrierDAO",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierdao.FieldTenantID:   {Type: field.TypeString, Column: carrierdao.FieldTenantID},
			carrierdao.FieldCustomerID: {Type: field.TypeString, Column: carrierdao.FieldCustomerID},
			carrierdao.FieldAPIKey:     {Type: field.TypeString, Column: carrierdao.FieldAPIKey},
			carrierdao.FieldTest:       {Type: field.TypeBool, Column: carrierdao.FieldTest},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierdf.Table,
			Columns: carrierdf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierdf.FieldID,
			},
		},
		Type: "CarrierDF",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierdf.FieldTenantID:        {Type: field.TypeString, Column: carrierdf.FieldTenantID},
			carrierdf.FieldCustomerID:      {Type: field.TypeString, Column: carrierdf.FieldCustomerID},
			carrierdf.FieldAgreementNumber: {Type: field.TypeString, Column: carrierdf.FieldAgreementNumber},
			carrierdf.FieldWhoPays:         {Type: field.TypeEnum, Column: carrierdf.FieldWhoPays},
			carrierdf.FieldTest:            {Type: field.TypeBool, Column: carrierdf.FieldTest},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierdsv.Table,
			Columns: carrierdsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierdsv.FieldID,
			},
		},
		Type: "CarrierDSV",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierdsv.FieldTenantID: {Type: field.TypeString, Column: carrierdsv.FieldTenantID},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carriereasypost.Table,
			Columns: carriereasypost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carriereasypost.FieldID,
			},
		},
		Type: "CarrierEasyPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			carriereasypost.FieldTenantID:        {Type: field.TypeString, Column: carriereasypost.FieldTenantID},
			carriereasypost.FieldAPIKey:          {Type: field.TypeString, Column: carriereasypost.FieldAPIKey},
			carriereasypost.FieldTest:            {Type: field.TypeBool, Column: carriereasypost.FieldTest},
			carriereasypost.FieldCarrierAccounts: {Type: field.TypeJSON, Column: carriereasypost.FieldCarrierAccounts},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carriergls.Table,
			Columns: carriergls.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carriergls.FieldID,
			},
		},
		Type: "CarrierGLS",
		Fields: map[string]*sqlgraph.FieldSpec{
			carriergls.FieldTenantID:                 {Type: field.TypeString, Column: carriergls.FieldTenantID},
			carriergls.FieldContactID:                {Type: field.TypeString, Column: carriergls.FieldContactID},
			carriergls.FieldGLSUsername:              {Type: field.TypeString, Column: carriergls.FieldGLSUsername},
			carriergls.FieldGLSPassword:              {Type: field.TypeString, Column: carriergls.FieldGLSPassword},
			carriergls.FieldCustomerID:               {Type: field.TypeString, Column: carriergls.FieldCustomerID},
			carriergls.FieldGLSCountryCode:           {Type: field.TypeString, Column: carriergls.FieldGLSCountryCode},
			carriergls.FieldSyncShipmentCancellation: {Type: field.TypeBool, Column: carriergls.FieldSyncShipmentCancellation},
			carriergls.FieldPrintErrorOnLabel:        {Type: field.TypeBool, Column: carriergls.FieldPrintErrorOnLabel},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierpostnord.Table,
			Columns: carrierpostnord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierpostnord.FieldID,
			},
		},
		Type: "CarrierPostNord",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierpostnord.FieldTenantID:       {Type: field.TypeString, Column: carrierpostnord.FieldTenantID},
			carrierpostnord.FieldCustomerNumber: {Type: field.TypeString, Column: carrierpostnord.FieldCustomerNumber},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservice.Table,
			Columns: carrierservice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservice.FieldID,
			},
		},
		Type: "CarrierService",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierservice.FieldLabel:                 {Type: field.TypeString, Column: carrierservice.FieldLabel},
			carrierservice.FieldInternalID:            {Type: field.TypeString, Column: carrierservice.FieldInternalID},
			carrierservice.FieldReturn:                {Type: field.TypeBool, Column: carrierservice.FieldReturn},
			carrierservice.FieldConsolidation:         {Type: field.TypeBool, Column: carrierservice.FieldConsolidation},
			carrierservice.FieldDeliveryPointOptional: {Type: field.TypeBool, Column: carrierservice.FieldDeliveryPointOptional},
			carrierservice.FieldDeliveryPointRequired: {Type: field.TypeBool, Column: carrierservice.FieldDeliveryPointRequired},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservicebring.Table,
			Columns: carrierservicebring.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservicebring.FieldID,
			},
		},
		Type: "CarrierServiceBring",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierservicebring.FieldAPIServiceCode: {Type: field.TypeString, Column: carrierservicebring.FieldAPIServiceCode},
			carrierservicebring.FieldAPIRequest:     {Type: field.TypeString, Column: carrierservicebring.FieldAPIRequest},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservicedao.Table,
			Columns: carrierservicedao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservicedao.FieldID,
			},
		},
		Type:   "CarrierServiceDAO",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservicedf.Table,
			Columns: carrierservicedf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservicedf.FieldID,
			},
		},
		Type:   "CarrierServiceDF",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservicedsv.Table,
			Columns: carrierservicedsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservicedsv.FieldID,
			},
		},
		Type:   "CarrierServiceDSV",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierserviceeasypost.Table,
			Columns: carrierserviceeasypost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierserviceeasypost.FieldID,
			},
		},
		Type: "CarrierServiceEasyPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierserviceeasypost.FieldAPIKey: {Type: field.TypeEnum, Column: carrierserviceeasypost.FieldAPIKey},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservicegls.Table,
			Columns: carrierservicegls.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservicegls.FieldID,
			},
		},
		Type: "CarrierServiceGLS",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierservicegls.FieldAPIKey:   {Type: field.TypeString, Column: carrierservicegls.FieldAPIKey},
			carrierservicegls.FieldAPIValue: {Type: field.TypeEnum, Column: carrierservicegls.FieldAPIValue},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierservicepostnord.Table,
			Columns: carrierservicepostnord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierservicepostnord.FieldID,
			},
		},
		Type: "CarrierServicePostNord",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierservicepostnord.FieldLabel:      {Type: field.TypeString, Column: carrierservicepostnord.FieldLabel},
			carrierservicepostnord.FieldInternalID: {Type: field.TypeString, Column: carrierservicepostnord.FieldInternalID},
			carrierservicepostnord.FieldAPICode:    {Type: field.TypeString, Column: carrierservicepostnord.FieldAPICode},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierserviceusps.Table,
			Columns: carrierserviceusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierserviceusps.FieldID,
			},
		},
		Type: "CarrierServiceUSPS",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierserviceusps.FieldAPIKey: {Type: field.TypeEnum, Column: carrierserviceusps.FieldAPIKey},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   carrierusps.Table,
			Columns: carrierusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: carrierusps.FieldID,
			},
		},
		Type: "CarrierUSPS",
		Fields: map[string]*sqlgraph.FieldSpec{
			carrierusps.FieldTenantID:         {Type: field.TypeString, Column: carrierusps.FieldTenantID},
			carrierusps.FieldIsTestAPI:        {Type: field.TypeBool, Column: carrierusps.FieldIsTestAPI},
			carrierusps.FieldConsumerKey:      {Type: field.TypeString, Column: carrierusps.FieldConsumerKey},
			carrierusps.FieldConsumerSecret:   {Type: field.TypeString, Column: carrierusps.FieldConsumerSecret},
			carrierusps.FieldMid:              {Type: field.TypeString, Column: carrierusps.FieldMid},
			carrierusps.FieldManifestMid:      {Type: field.TypeString, Column: carrierusps.FieldManifestMid},
			carrierusps.FieldCrid:             {Type: field.TypeString, Column: carrierusps.FieldCrid},
			carrierusps.FieldEpsAccountNumber: {Type: field.TypeString, Column: carrierusps.FieldEpsAccountNumber},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   changehistory.Table,
			Columns: changehistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: changehistory.FieldID,
			},
		},
		Type: "ChangeHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			changehistory.FieldTenantID:  {Type: field.TypeString, Column: changehistory.FieldTenantID},
			changehistory.FieldCreatedAt: {Type: field.TypeTime, Column: changehistory.FieldCreatedAt},
			changehistory.FieldOrigin:    {Type: field.TypeEnum, Column: changehistory.FieldOrigin},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   colli.Table,
			Columns: colli.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: colli.FieldID,
			},
		},
		Type: "Colli",
		Fields: map[string]*sqlgraph.FieldSpec{
			colli.FieldTenantID:                  {Type: field.TypeString, Column: colli.FieldTenantID},
			colli.FieldInternalBarcode:           {Type: field.TypeInt64, Column: colli.FieldInternalBarcode},
			colli.FieldStatus:                    {Type: field.TypeEnum, Column: colli.FieldStatus},
			colli.FieldSlipPrintStatus:           {Type: field.TypeEnum, Column: colli.FieldSlipPrintStatus},
			colli.FieldCreatedAt:                 {Type: field.TypeTime, Column: colli.FieldCreatedAt},
			colli.FieldEmailPackingSlipPrintedAt: {Type: field.TypeTime, Column: colli.FieldEmailPackingSlipPrintedAt},
			colli.FieldEmailLabelPrintedAt:       {Type: field.TypeTime, Column: colli.FieldEmailLabelPrintedAt},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   connectoptioncarrier.Table,
			Columns: connectoptioncarrier.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: connectoptioncarrier.FieldID,
			},
		},
		Type: "ConnectOptionCarrier",
		Fields: map[string]*sqlgraph.FieldSpec{
			connectoptioncarrier.FieldName: {Type: field.TypeString, Column: connectoptioncarrier.FieldName},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   connectoptionplatform.Table,
			Columns: connectoptionplatform.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: connectoptionplatform.FieldID,
			},
		},
		Type: "ConnectOptionPlatform",
		Fields: map[string]*sqlgraph.FieldSpec{
			connectoptionplatform.FieldName: {Type: field.TypeString, Column: connectoptionplatform.FieldName},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   connection.Table,
			Columns: connection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: connection.FieldID,
			},
		},
		Type: "Connection",
		Fields: map[string]*sqlgraph.FieldSpec{
			connection.FieldTenantID:              {Type: field.TypeString, Column: connection.FieldTenantID},
			connection.FieldName:                  {Type: field.TypeString, Column: connection.FieldName},
			connection.FieldSyncOrders:            {Type: field.TypeBool, Column: connection.FieldSyncOrders},
			connection.FieldSyncProducts:          {Type: field.TypeBool, Column: connection.FieldSyncProducts},
			connection.FieldFulfillAutomatically:  {Type: field.TypeBool, Column: connection.FieldFulfillAutomatically},
			connection.FieldDispatchAutomatically: {Type: field.TypeBool, Column: connection.FieldDispatchAutomatically},
			connection.FieldConvertCurrency:       {Type: field.TypeBool, Column: connection.FieldConvertCurrency},
			connection.FieldAutoPrintParcelSlip:   {Type: field.TypeBool, Column: connection.FieldAutoPrintParcelSlip},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   connectionbrand.Table,
			Columns: connectionbrand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: connectionbrand.FieldID,
			},
		},
		Type: "ConnectionBrand",
		Fields: map[string]*sqlgraph.FieldSpec{
			connectionbrand.FieldLabel:      {Type: field.TypeString, Column: connectionbrand.FieldLabel},
			connectionbrand.FieldInternalID: {Type: field.TypeEnum, Column: connectionbrand.FieldInternalID},
			connectionbrand.FieldLogoURL:    {Type: field.TypeString, Column: connectionbrand.FieldLogoURL},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   connectionlookup.Table,
			Columns: connectionlookup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: connectionlookup.FieldID,
			},
		},
		Type: "ConnectionLookup",
		Fields: map[string]*sqlgraph.FieldSpec{
			connectionlookup.FieldTenantID:           {Type: field.TypeString, Column: connectionlookup.FieldTenantID},
			connectionlookup.FieldPayload:            {Type: field.TypeString, Column: connectionlookup.FieldPayload},
			connectionlookup.FieldOptionsOutputCount: {Type: field.TypeInt, Column: connectionlookup.FieldOptionsOutputCount},
			connectionlookup.FieldError:              {Type: field.TypeString, Column: connectionlookup.FieldError},
			connectionlookup.FieldCreatedAt:          {Type: field.TypeTime, Column: connectionlookup.FieldCreatedAt},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   connectionshopify.Table,
			Columns: connectionshopify.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: connectionshopify.FieldID,
			},
		},
		Type: "ConnectionShopify",
		Fields: map[string]*sqlgraph.FieldSpec{
			connectionshopify.FieldTenantID:        {Type: field.TypeString, Column: connectionshopify.FieldTenantID},
			connectionshopify.FieldRateIntegration: {Type: field.TypeBool, Column: connectionshopify.FieldRateIntegration},
			connectionshopify.FieldStoreURL:        {Type: field.TypeString, Column: connectionshopify.FieldStoreURL},
			connectionshopify.FieldAPIKey:          {Type: field.TypeString, Column: connectionshopify.FieldAPIKey},
			connectionshopify.FieldLookupKey:       {Type: field.TypeString, Column: connectionshopify.FieldLookupKey},
			connectionshopify.FieldSyncFrom:        {Type: field.TypeTime, Column: connectionshopify.FieldSyncFrom},
			connectionshopify.FieldFilterTags:      {Type: field.TypeJSON, Column: connectionshopify.FieldFilterTags},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   consolidation.Table,
			Columns: consolidation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: consolidation.FieldID,
			},
		},
		Type: "Consolidation",
		Fields: map[string]*sqlgraph.FieldSpec{
			consolidation.FieldTenantID:    {Type: field.TypeString, Column: consolidation.FieldTenantID},
			consolidation.FieldPublicID:    {Type: field.TypeString, Column: consolidation.FieldPublicID},
			consolidation.FieldDescription: {Type: field.TypeString, Column: consolidation.FieldDescription},
			consolidation.FieldStatus:      {Type: field.TypeEnum, Column: consolidation.FieldStatus},
			consolidation.FieldCreatedAt:   {Type: field.TypeTime, Column: consolidation.FieldCreatedAt},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contact.Table,
			Columns: contact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: contact.FieldID,
			},
		},
		Type: "Contact",
		Fields: map[string]*sqlgraph.FieldSpec{
			contact.FieldTenantID:    {Type: field.TypeString, Column: contact.FieldTenantID},
			contact.FieldName:        {Type: field.TypeString, Column: contact.FieldName},
			contact.FieldSurname:     {Type: field.TypeString, Column: contact.FieldSurname},
			contact.FieldEmail:       {Type: field.TypeString, Column: contact.FieldEmail},
			contact.FieldPhoneNumber: {Type: field.TypeString, Column: contact.FieldPhoneNumber},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   country.Table,
			Columns: country.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: country.FieldID,
			},
		},
		Type: "Country",
		Fields: map[string]*sqlgraph.FieldSpec{
			country.FieldLabel:  {Type: field.TypeString, Column: country.FieldLabel},
			country.FieldAlpha2: {Type: field.TypeString, Column: country.FieldAlpha2},
			country.FieldAlpha3: {Type: field.TypeString, Column: country.FieldAlpha3},
			country.FieldCode:   {Type: field.TypeString, Column: country.FieldCode},
			country.FieldRegion: {Type: field.TypeEnum, Column: country.FieldRegion},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   countryharmonizedcode.Table,
			Columns: countryharmonizedcode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: countryharmonizedcode.FieldID,
			},
		},
		Type: "CountryHarmonizedCode",
		Fields: map[string]*sqlgraph.FieldSpec{
			countryharmonizedcode.FieldTenantID: {Type: field.TypeString, Column: countryharmonizedcode.FieldTenantID},
			countryharmonizedcode.FieldCode:     {Type: field.TypeString, Column: countryharmonizedcode.FieldCode},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   currency.Table,
			Columns: currency.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: currency.FieldID,
			},
		},
		Type: "Currency",
		Fields: map[string]*sqlgraph.FieldSpec{
			currency.FieldDisplay:      {Type: field.TypeString, Column: currency.FieldDisplay},
			currency.FieldCurrencyCode: {Type: field.TypeEnum, Column: currency.FieldCurrencyCode},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoption.Table,
			Columns: deliveryoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoption.FieldID,
			},
		},
		Type: "DeliveryOption",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoption.FieldTenantID:                {Type: field.TypeString, Column: deliveryoption.FieldTenantID},
			deliveryoption.FieldArchivedAt:              {Type: field.TypeTime, Column: deliveryoption.FieldArchivedAt},
			deliveryoption.FieldName:                    {Type: field.TypeString, Column: deliveryoption.FieldName},
			deliveryoption.FieldSortOrder:               {Type: field.TypeInt, Column: deliveryoption.FieldSortOrder},
			deliveryoption.FieldClickOptionDisplayCount: {Type: field.TypeInt, Column: deliveryoption.FieldClickOptionDisplayCount},
			deliveryoption.FieldDescription:             {Type: field.TypeString, Column: deliveryoption.FieldDescription},
			deliveryoption.FieldClickCollect:            {Type: field.TypeBool, Column: deliveryoption.FieldClickCollect},
			deliveryoption.FieldOverrideSenderAddress:   {Type: field.TypeBool, Column: deliveryoption.FieldOverrideSenderAddress},
			deliveryoption.FieldOverrideReturnAddress:   {Type: field.TypeBool, Column: deliveryoption.FieldOverrideReturnAddress},
			deliveryoption.FieldHideDeliveryOption:      {Type: field.TypeBool, Column: deliveryoption.FieldHideDeliveryOption},
			deliveryoption.FieldDeliveryEstimateFrom:    {Type: field.TypeInt, Column: deliveryoption.FieldDeliveryEstimateFrom},
			deliveryoption.FieldDeliveryEstimateTo:      {Type: field.TypeInt, Column: deliveryoption.FieldDeliveryEstimateTo},
			deliveryoption.FieldWebshipperIntegration:   {Type: field.TypeBool, Column: deliveryoption.FieldWebshipperIntegration},
			deliveryoption.FieldWebshipperID:            {Type: field.TypeInt, Column: deliveryoption.FieldWebshipperID},
			deliveryoption.FieldShipmondoIntegration:    {Type: field.TypeBool, Column: deliveryoption.FieldShipmondoIntegration},
			deliveryoption.FieldShipmondoDeliveryOption: {Type: field.TypeString, Column: deliveryoption.FieldShipmondoDeliveryOption},
			deliveryoption.FieldCustomsEnabled:          {Type: field.TypeBool, Column: deliveryoption.FieldCustomsEnabled},
			deliveryoption.FieldCustomsSigner:           {Type: field.TypeString, Column: deliveryoption.FieldCustomsSigner},
			deliveryoption.FieldHideIfCompanyEmpty:      {Type: field.TypeBool, Column: deliveryoption.FieldHideIfCompanyEmpty},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptionbring.Table,
			Columns: deliveryoptionbring.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptionbring.FieldID,
			},
		},
		Type: "DeliveryOptionBring",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptionbring.FieldTenantID:          {Type: field.TypeString, Column: deliveryoptionbring.FieldTenantID},
			deliveryoptionbring.FieldElectronicCustoms: {Type: field.TypeBool, Column: deliveryoptionbring.FieldElectronicCustoms},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptiondao.Table,
			Columns: deliveryoptiondao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptiondao.FieldID,
			},
		},
		Type: "DeliveryOptionDAO",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptiondao.FieldTenantID: {Type: field.TypeString, Column: deliveryoptiondao.FieldTenantID},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptiondf.Table,
			Columns: deliveryoptiondf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptiondf.FieldID,
			},
		},
		Type: "DeliveryOptionDF",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptiondf.FieldTenantID: {Type: field.TypeString, Column: deliveryoptiondf.FieldTenantID},
		},
	}
	graph.Nodes[49] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptiondsv.Table,
			Columns: deliveryoptiondsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptiondsv.FieldID,
			},
		},
		Type: "DeliveryOptionDSV",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptiondsv.FieldTenantID: {Type: field.TypeString, Column: deliveryoptiondsv.FieldTenantID},
		},
	}
	graph.Nodes[50] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptioneasypost.Table,
			Columns: deliveryoptioneasypost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptioneasypost.FieldID,
			},
		},
		Type: "DeliveryOptionEasyPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptioneasypost.FieldTenantID: {Type: field.TypeString, Column: deliveryoptioneasypost.FieldTenantID},
		},
	}
	graph.Nodes[51] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptiongls.Table,
			Columns: deliveryoptiongls.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptiongls.FieldID,
			},
		},
		Type: "DeliveryOptionGLS",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptiongls.FieldTenantID: {Type: field.TypeString, Column: deliveryoptiongls.FieldTenantID},
		},
	}
	graph.Nodes[52] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptionpostnord.Table,
			Columns: deliveryoptionpostnord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptionpostnord.FieldID,
			},
		},
		Type: "DeliveryOptionPostNord",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptionpostnord.FieldTenantID:  {Type: field.TypeString, Column: deliveryoptionpostnord.FieldTenantID},
			deliveryoptionpostnord.FieldFormatZpl: {Type: field.TypeBool, Column: deliveryoptionpostnord.FieldFormatZpl},
		},
	}
	graph.Nodes[53] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryoptionusps.Table,
			Columns: deliveryoptionusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryoptionusps.FieldID,
			},
		},
		Type: "DeliveryOptionUSPS",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryoptionusps.FieldTenantID:  {Type: field.TypeString, Column: deliveryoptionusps.FieldTenantID},
			deliveryoptionusps.FieldFormatZpl: {Type: field.TypeBool, Column: deliveryoptionusps.FieldFormatZpl},
		},
	}
	graph.Nodes[54] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryrule.Table,
			Columns: deliveryrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryrule.FieldID,
			},
		},
		Type: "DeliveryRule",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryrule.FieldTenantID: {Type: field.TypeString, Column: deliveryrule.FieldTenantID},
			deliveryrule.FieldName:     {Type: field.TypeString, Column: deliveryrule.FieldName},
			deliveryrule.FieldPrice:    {Type: field.TypeFloat64, Column: deliveryrule.FieldPrice},
		},
	}
	graph.Nodes[55] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryruleconstraint.Table,
			Columns: deliveryruleconstraint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryruleconstraint.FieldID,
			},
		},
		Type: "DeliveryRuleConstraint",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryruleconstraint.FieldTenantID:      {Type: field.TypeString, Column: deliveryruleconstraint.FieldTenantID},
			deliveryruleconstraint.FieldPropertyType:  {Type: field.TypeEnum, Column: deliveryruleconstraint.FieldPropertyType},
			deliveryruleconstraint.FieldComparison:    {Type: field.TypeEnum, Column: deliveryruleconstraint.FieldComparison},
			deliveryruleconstraint.FieldSelectedValue: {Type: field.TypeOther, Column: deliveryruleconstraint.FieldSelectedValue},
		},
	}
	graph.Nodes[56] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   deliveryruleconstraintgroup.Table,
			Columns: deliveryruleconstraintgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: deliveryruleconstraintgroup.FieldID,
			},
		},
		Type: "DeliveryRuleConstraintGroup",
		Fields: map[string]*sqlgraph.FieldSpec{
			deliveryruleconstraintgroup.FieldTenantID:        {Type: field.TypeString, Column: deliveryruleconstraintgroup.FieldTenantID},
			deliveryruleconstraintgroup.FieldConstraintLogic: {Type: field.TypeEnum, Column: deliveryruleconstraintgroup.FieldConstraintLogic},
		},
	}
	graph.Nodes[57] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   document.Table,
			Columns: document.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: document.FieldID,
			},
		},
		Type: "Document",
		Fields: map[string]*sqlgraph.FieldSpec{
			document.FieldTenantID:      {Type: field.TypeString, Column: document.FieldTenantID},
			document.FieldName:          {Type: field.TypeString, Column: document.FieldName},
			document.FieldHTMLTemplate:  {Type: field.TypeString, Column: document.FieldHTMLTemplate},
			document.FieldHTMLHeader:    {Type: field.TypeString, Column: document.FieldHTMLHeader},
			document.FieldHTMLFooter:    {Type: field.TypeString, Column: document.FieldHTMLFooter},
			document.FieldLastBase64Pdf: {Type: field.TypeString, Column: document.FieldLastBase64Pdf},
			document.FieldMergeType:     {Type: field.TypeEnum, Column: document.FieldMergeType},
			document.FieldPaperSize:     {Type: field.TypeEnum, Column: document.FieldPaperSize},
			document.FieldStartAt:       {Type: field.TypeTime, Column: document.FieldStartAt},
			document.FieldEndAt:         {Type: field.TypeTime, Column: document.FieldEndAt},
			document.FieldCreatedAt:     {Type: field.TypeTime, Column: document.FieldCreatedAt},
		},
	}
	graph.Nodes[58] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   documentfile.Table,
			Columns: documentfile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: documentfile.FieldID,
			},
		},
		Type: "DocumentFile",
		Fields: map[string]*sqlgraph.FieldSpec{
			documentfile.FieldTenantID:       {Type: field.TypeString, Column: documentfile.FieldTenantID},
			documentfile.FieldCreatedAt:      {Type: field.TypeTime, Column: documentfile.FieldCreatedAt},
			documentfile.FieldStorageType:    {Type: field.TypeEnum, Column: documentfile.FieldStorageType},
			documentfile.FieldStoragePath:    {Type: field.TypeString, Column: documentfile.FieldStoragePath},
			documentfile.FieldStoragePathZpl: {Type: field.TypeString, Column: documentfile.FieldStoragePathZpl},
			documentfile.FieldDocType:        {Type: field.TypeEnum, Column: documentfile.FieldDocType},
			documentfile.FieldDataPdfBase64:  {Type: field.TypeString, Column: documentfile.FieldDataPdfBase64},
			documentfile.FieldDataZplBase64:  {Type: field.TypeString, Column: documentfile.FieldDataZplBase64},
		},
	}
	graph.Nodes[59] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emailtemplate.FieldID,
			},
		},
		Type: "EmailTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailtemplate.FieldTenantID:     {Type: field.TypeString, Column: emailtemplate.FieldTenantID},
			emailtemplate.FieldName:         {Type: field.TypeString, Column: emailtemplate.FieldName},
			emailtemplate.FieldSubject:      {Type: field.TypeString, Column: emailtemplate.FieldSubject},
			emailtemplate.FieldHTMLTemplate: {Type: field.TypeString, Column: emailtemplate.FieldHTMLTemplate},
			emailtemplate.FieldMergeType:    {Type: field.TypeEnum, Column: emailtemplate.FieldMergeType},
			emailtemplate.FieldCreatedAt:    {Type: field.TypeTime, Column: emailtemplate.FieldCreatedAt},
			emailtemplate.FieldUpdatedAt:    {Type: field.TypeTime, Column: emailtemplate.FieldUpdatedAt},
		},
	}
	graph.Nodes[60] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hypothesistest.Table,
			Columns: hypothesistest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hypothesistest.FieldID,
			},
		},
		Type: "HypothesisTest",
		Fields: map[string]*sqlgraph.FieldSpec{
			hypothesistest.FieldTenantID: {Type: field.TypeString, Column: hypothesistest.FieldTenantID},
			hypothesistest.FieldName:     {Type: field.TypeString, Column: hypothesistest.FieldName},
			hypothesistest.FieldActive:   {Type: field.TypeBool, Column: hypothesistest.FieldActive},
		},
	}
	graph.Nodes[61] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hypothesistestdeliveryoption.Table,
			Columns: hypothesistestdeliveryoption.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hypothesistestdeliveryoption.FieldID,
			},
		},
		Type: "HypothesisTestDeliveryOption",
		Fields: map[string]*sqlgraph.FieldSpec{
			hypothesistestdeliveryoption.FieldTenantID:                 {Type: field.TypeString, Column: hypothesistestdeliveryoption.FieldTenantID},
			hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort: {Type: field.TypeBool, Column: hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort},
			hypothesistestdeliveryoption.FieldByIntervalRotation:       {Type: field.TypeBool, Column: hypothesistestdeliveryoption.FieldByIntervalRotation},
			hypothesistestdeliveryoption.FieldRotationIntervalHours:    {Type: field.TypeInt, Column: hypothesistestdeliveryoption.FieldRotationIntervalHours},
			hypothesistestdeliveryoption.FieldByOrder:                  {Type: field.TypeBool, Column: hypothesistestdeliveryoption.FieldByOrder},
		},
	}
	graph.Nodes[62] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hypothesistestdeliveryoptionlookup.Table,
			Columns: hypothesistestdeliveryoptionlookup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hypothesistestdeliveryoptionlookup.FieldID,
			},
		},
		Type: "HypothesisTestDeliveryOptionLookup",
		Fields: map[string]*sqlgraph.FieldSpec{
			hypothesistestdeliveryoptionlookup.FieldTenantID: {Type: field.TypeString, Column: hypothesistestdeliveryoptionlookup.FieldTenantID},
		},
	}
	graph.Nodes[63] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hypothesistestdeliveryoptionrequest.Table,
			Columns: hypothesistestdeliveryoptionrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: hypothesistestdeliveryoptionrequest.FieldID,
			},
		},
		Type: "HypothesisTestDeliveryOptionRequest",
		Fields: map[string]*sqlgraph.FieldSpec{
			hypothesistestdeliveryoptionrequest.FieldTenantID:            {Type: field.TypeString, Column: hypothesistestdeliveryoptionrequest.FieldTenantID},
			hypothesistestdeliveryoptionrequest.FieldOrderHash:           {Type: field.TypeString, Column: hypothesistestdeliveryoptionrequest.FieldOrderHash},
			hypothesistestdeliveryoptionrequest.FieldShippingAddressHash: {Type: field.TypeString, Column: hypothesistestdeliveryoptionrequest.FieldShippingAddressHash},
			hypothesistestdeliveryoptionrequest.FieldIsControlGroup:      {Type: field.TypeBool, Column: hypothesistestdeliveryoptionrequest.FieldIsControlGroup},
			hypothesistestdeliveryoptionrequest.FieldRequestCount:        {Type: field.TypeUint, Column: hypothesistestdeliveryoptionrequest.FieldRequestCount},
			hypothesistestdeliveryoptionrequest.FieldCreatedAt:           {Type: field.TypeTime, Column: hypothesistestdeliveryoptionrequest.FieldCreatedAt},
			hypothesistestdeliveryoptionrequest.FieldLastRequestedAt:     {Type: field.TypeTime, Column: hypothesistestdeliveryoptionrequest.FieldLastRequestedAt},
		},
	}
	graph.Nodes[64] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inventoryitem.Table,
			Columns: inventoryitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: inventoryitem.FieldID,
			},
		},
		Type: "InventoryItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			inventoryitem.FieldTenantID:   {Type: field.TypeString, Column: inventoryitem.FieldTenantID},
			inventoryitem.FieldExternalID: {Type: field.TypeString, Column: inventoryitem.FieldExternalID},
			inventoryitem.FieldCode:       {Type: field.TypeString, Column: inventoryitem.FieldCode},
			inventoryitem.FieldSku:        {Type: field.TypeString, Column: inventoryitem.FieldSku},
		},
	}
	graph.Nodes[65] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   language.Table,
			Columns: language.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: language.FieldID,
			},
		},
		Type: "Language",
		Fields: map[string]*sqlgraph.FieldSpec{
			language.FieldLabel:      {Type: field.TypeString, Column: language.FieldLabel},
			language.FieldInternalID: {Type: field.TypeEnum, Column: language.FieldInternalID},
		},
	}
	graph.Nodes[66] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   location.Table,
			Columns: location.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: location.FieldID,
			},
		},
		Type: "Location",
		Fields: map[string]*sqlgraph.FieldSpec{
			location.FieldTenantID: {Type: field.TypeString, Column: location.FieldTenantID},
			location.FieldName:     {Type: field.TypeString, Column: location.FieldName},
		},
	}
	graph.Nodes[67] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   locationtag.Table,
			Columns: locationtag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: locationtag.FieldID,
			},
		},
		Type: "LocationTag",
		Fields: map[string]*sqlgraph.FieldSpec{
			locationtag.FieldLabel:      {Type: field.TypeString, Column: locationtag.FieldLabel},
			locationtag.FieldInternalID: {Type: field.TypeString, Column: locationtag.FieldInternalID},
		},
	}
	graph.Nodes[68] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   notification.Table,
			Columns: notification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: notification.FieldID,
			},
		},
		Type: "Notification",
		Fields: map[string]*sqlgraph.FieldSpec{
			notification.FieldTenantID: {Type: field.TypeString, Column: notification.FieldTenantID},
			notification.FieldName:     {Type: field.TypeString, Column: notification.FieldName},
			notification.FieldActive:   {Type: field.TypeBool, Column: notification.FieldActive},
		},
	}
	graph.Nodes[69] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   otkrequests.Table,
			Columns: otkrequests.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: otkrequests.FieldID,
			},
		},
		Type: "OTKRequests",
		Fields: map[string]*sqlgraph.FieldSpec{
			otkrequests.FieldTenantID: {Type: field.TypeString, Column: otkrequests.FieldTenantID},
			otkrequests.FieldOtk:      {Type: field.TypeString, Column: otkrequests.FieldOtk},
		},
	}
	graph.Nodes[70] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldTenantID:                {Type: field.TypeString, Column: order.FieldTenantID},
			order.FieldOrderPublicID:           {Type: field.TypeString, Column: order.FieldOrderPublicID},
			order.FieldExternalID:              {Type: field.TypeString, Column: order.FieldExternalID},
			order.FieldCommentInternal:         {Type: field.TypeString, Column: order.FieldCommentInternal},
			order.FieldCommentExternal:         {Type: field.TypeString, Column: order.FieldCommentExternal},
			order.FieldCreatedAt:               {Type: field.TypeTime, Column: order.FieldCreatedAt},
			order.FieldEmailSyncConfirmationAt: {Type: field.TypeTime, Column: order.FieldEmailSyncConfirmationAt},
			order.FieldStatus:                  {Type: field.TypeEnum, Column: order.FieldStatus},
			order.FieldNoteAttributes:          {Type: field.TypeJSON, Column: order.FieldNoteAttributes},
		},
	}
	graph.Nodes[71] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderhistory.Table,
			Columns: orderhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orderhistory.FieldID,
			},
		},
		Type: "OrderHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderhistory.FieldTenantID:    {Type: field.TypeString, Column: orderhistory.FieldTenantID},
			orderhistory.FieldDescription: {Type: field.TypeString, Column: orderhistory.FieldDescription},
			orderhistory.FieldType:        {Type: field.TypeEnum, Column: orderhistory.FieldType},
		},
	}
	graph.Nodes[72] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderline.Table,
			Columns: orderline.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orderline.FieldID,
			},
		},
		Type: "OrderLine",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderline.FieldTenantID:                 {Type: field.TypeString, Column: orderline.FieldTenantID},
			orderline.FieldUnitPrice:                {Type: field.TypeFloat64, Column: orderline.FieldUnitPrice},
			orderline.FieldDiscountAllocationAmount: {Type: field.TypeFloat64, Column: orderline.FieldDiscountAllocationAmount},
			orderline.FieldExternalID:               {Type: field.TypeString, Column: orderline.FieldExternalID},
			orderline.FieldUnits:                    {Type: field.TypeInt, Column: orderline.FieldUnits},
			orderline.FieldCreatedAt:                {Type: field.TypeTime, Column: orderline.FieldCreatedAt},
			orderline.FieldUpdatedAt:                {Type: field.TypeTime, Column: orderline.FieldUpdatedAt},
			orderline.FieldProductVariantID:         {Type: field.TypeString, Column: orderline.FieldProductVariantID},
			orderline.FieldColliID:                  {Type: field.TypeString, Column: orderline.FieldColliID},
		},
	}
	graph.Nodes[73] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ordersender.Table,
			Columns: ordersender.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ordersender.FieldID,
			},
		},
		Type: "OrderSender",
		Fields: map[string]*sqlgraph.FieldSpec{
			ordersender.FieldTenantID:     {Type: field.TypeString, Column: ordersender.FieldTenantID},
			ordersender.FieldUniquenessID: {Type: field.TypeString, Column: ordersender.FieldUniquenessID},
			ordersender.FieldFirstName:    {Type: field.TypeString, Column: ordersender.FieldFirstName},
			ordersender.FieldLastName:     {Type: field.TypeString, Column: ordersender.FieldLastName},
			ordersender.FieldEmail:        {Type: field.TypeString, Column: ordersender.FieldEmail},
			ordersender.FieldPhoneNumber:  {Type: field.TypeString, Column: ordersender.FieldPhoneNumber},
			ordersender.FieldVatNumber:    {Type: field.TypeString, Column: ordersender.FieldVatNumber},
		},
	}
	graph.Nodes[74] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   packaging.Table,
			Columns: packaging.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: packaging.FieldID,
			},
		},
		Type: "Packaging",
		Fields: map[string]*sqlgraph.FieldSpec{
			packaging.FieldTenantID:   {Type: field.TypeString, Column: packaging.FieldTenantID},
			packaging.FieldArchivedAt: {Type: field.TypeTime, Column: packaging.FieldArchivedAt},
			packaging.FieldName:       {Type: field.TypeString, Column: packaging.FieldName},
			packaging.FieldHeightCm:   {Type: field.TypeInt, Column: packaging.FieldHeightCm},
			packaging.FieldWidthCm:    {Type: field.TypeInt, Column: packaging.FieldWidthCm},
			packaging.FieldLengthCm:   {Type: field.TypeInt, Column: packaging.FieldLengthCm},
		},
	}
	graph.Nodes[75] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   packagingdf.Table,
			Columns: packagingdf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: packagingdf.FieldID,
			},
		},
		Type: "PackagingDF",
		Fields: map[string]*sqlgraph.FieldSpec{
			packagingdf.FieldTenantID:  {Type: field.TypeString, Column: packagingdf.FieldTenantID},
			packagingdf.FieldAPIType:   {Type: field.TypeEnum, Column: packagingdf.FieldAPIType},
			packagingdf.FieldMaxWeight: {Type: field.TypeFloat64, Column: packagingdf.FieldMaxWeight},
			packagingdf.FieldMinWeight: {Type: field.TypeFloat64, Column: packagingdf.FieldMinWeight},
			packagingdf.FieldStackable: {Type: field.TypeBool, Column: packagingdf.FieldStackable},
		},
	}
	graph.Nodes[76] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   packagingusps.Table,
			Columns: packagingusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: packagingusps.FieldID,
			},
		},
		Type: "PackagingUSPS",
		Fields: map[string]*sqlgraph.FieldSpec{
			packagingusps.FieldTenantID: {Type: field.TypeString, Column: packagingusps.FieldTenantID},
		},
	}
	graph.Nodes[77] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   packaginguspsprocessingcategory.Table,
			Columns: packaginguspsprocessingcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: packaginguspsprocessingcategory.FieldID,
			},
		},
		Type: "PackagingUSPSProcessingCategory",
		Fields: map[string]*sqlgraph.FieldSpec{
			packaginguspsprocessingcategory.FieldName:               {Type: field.TypeString, Column: packaginguspsprocessingcategory.FieldName},
			packaginguspsprocessingcategory.FieldProcessingCategory: {Type: field.TypeEnum, Column: packaginguspsprocessingcategory.FieldProcessingCategory},
		},
	}
	graph.Nodes[78] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   packaginguspsrateindicator.Table,
			Columns: packaginguspsrateindicator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: packaginguspsrateindicator.FieldID,
			},
		},
		Type: "PackagingUSPSRateIndicator",
		Fields: map[string]*sqlgraph.FieldSpec{
			packaginguspsrateindicator.FieldCode: {Type: field.TypeString, Column: packaginguspsrateindicator.FieldCode},
			packaginguspsrateindicator.FieldName: {Type: field.TypeString, Column: packaginguspsrateindicator.FieldName},
		},
	}
	graph.Nodes[79] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pallet.Table,
			Columns: pallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: pallet.FieldID,
			},
		},
		Type: "Pallet",
		Fields: map[string]*sqlgraph.FieldSpec{
			pallet.FieldTenantID:    {Type: field.TypeString, Column: pallet.FieldTenantID},
			pallet.FieldPublicID:    {Type: field.TypeString, Column: pallet.FieldPublicID},
			pallet.FieldDescription: {Type: field.TypeString, Column: pallet.FieldDescription},
		},
	}
	graph.Nodes[80] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   parcelshop.Table,
			Columns: parcelshop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: parcelshop.FieldID,
			},
		},
		Type: "ParcelShop",
		Fields: map[string]*sqlgraph.FieldSpec{
			parcelshop.FieldName:        {Type: field.TypeString, Column: parcelshop.FieldName},
			parcelshop.FieldLastUpdated: {Type: field.TypeTime, Column: parcelshop.FieldLastUpdated},
		},
	}
	graph.Nodes[81] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   parcelshopbring.Table,
			Columns: parcelshopbring.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: parcelshopbring.FieldID,
			},
		},
		Type: "ParcelShopBring",
		Fields: map[string]*sqlgraph.FieldSpec{
			parcelshopbring.FieldPointType: {Type: field.TypeEnum, Column: parcelshopbring.FieldPointType},
			parcelshopbring.FieldBringID:   {Type: field.TypeString, Column: parcelshopbring.FieldBringID},
		},
	}
	graph.Nodes[82] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   parcelshopdao.Table,
			Columns: parcelshopdao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: parcelshopdao.FieldID,
			},
		},
		Type: "ParcelShopDAO",
		Fields: map[string]*sqlgraph.FieldSpec{
			parcelshopdao.FieldShopID: {Type: field.TypeString, Column: parcelshopdao.FieldShopID},
		},
	}
	graph.Nodes[83] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   parcelshopgls.Table,
			Columns: parcelshopgls.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: parcelshopgls.FieldID,
			},
		},
		Type: "ParcelShopGLS",
		Fields: map[string]*sqlgraph.FieldSpec{
			parcelshopgls.FieldGLSParcelShopID: {Type: field.TypeString, Column: parcelshopgls.FieldGLSParcelShopID},
			parcelshopgls.FieldPartnerID:       {Type: field.TypeString, Column: parcelshopgls.FieldPartnerID},
			parcelshopgls.FieldType:            {Type: field.TypeString, Column: parcelshopgls.FieldType},
		},
	}
	graph.Nodes[84] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   parcelshoppostnord.Table,
			Columns: parcelshoppostnord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: parcelshoppostnord.FieldID,
			},
		},
		Type: "ParcelShopPostNord",
		Fields: map[string]*sqlgraph.FieldSpec{
			parcelshoppostnord.FieldServicePointID: {Type: field.TypeString, Column: parcelshoppostnord.FieldServicePointID},
			parcelshoppostnord.FieldPudoid:         {Type: field.TypeString, Column: parcelshoppostnord.FieldPudoid},
			parcelshoppostnord.FieldTypeID:         {Type: field.TypeString, Column: parcelshoppostnord.FieldTypeID},
		},
	}
	graph.Nodes[85] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: plan.FieldID,
			},
		},
		Type: "Plan",
		Fields: map[string]*sqlgraph.FieldSpec{
			plan.FieldLabel:     {Type: field.TypeString, Column: plan.FieldLabel},
			plan.FieldRank:      {Type: field.TypeInt, Column: plan.FieldRank},
			plan.FieldPriceDkk:  {Type: field.TypeInt, Column: plan.FieldPriceDkk},
			plan.FieldCreatedAt: {Type: field.TypeTime, Column: plan.FieldCreatedAt},
		},
	}
	graph.Nodes[86] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   planhistory.Table,
			Columns: planhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: planhistory.FieldID,
			},
		},
		Type: "PlanHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			planhistory.FieldTenantID:  {Type: field.TypeString, Column: planhistory.FieldTenantID},
			planhistory.FieldCreatedAt: {Type: field.TypeTime, Column: planhistory.FieldCreatedAt},
		},
	}
	graph.Nodes[87] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   printjob.Table,
			Columns: printjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: printjob.FieldID,
			},
		},
		Type: "PrintJob",
		Fields: map[string]*sqlgraph.FieldSpec{
			printjob.FieldTenantID:        {Type: field.TypeString, Column: printjob.FieldTenantID},
			printjob.FieldStatus:          {Type: field.TypeEnum, Column: printjob.FieldStatus},
			printjob.FieldFileExtension:   {Type: field.TypeEnum, Column: printjob.FieldFileExtension},
			printjob.FieldDocumentType:    {Type: field.TypeEnum, Column: printjob.FieldDocumentType},
			printjob.FieldPrinterMessages: {Type: field.TypeJSON, Column: printjob.FieldPrinterMessages},
			printjob.FieldBase64PrintData: {Type: field.TypeString, Column: printjob.FieldBase64PrintData},
			printjob.FieldCreatedAt:       {Type: field.TypeTime, Column: printjob.FieldCreatedAt},
		},
	}
	graph.Nodes[88] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   printer.Table,
			Columns: printer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: printer.FieldID,
			},
		},
		Type: "Printer",
		Fields: map[string]*sqlgraph.FieldSpec{
			printer.FieldTenantID:  {Type: field.TypeString, Column: printer.FieldTenantID},
			printer.FieldDeviceID:  {Type: field.TypeString, Column: printer.FieldDeviceID},
			printer.FieldName:      {Type: field.TypeString, Column: printer.FieldName},
			printer.FieldLabelZpl:  {Type: field.TypeBool, Column: printer.FieldLabelZpl},
			printer.FieldLabelPdf:  {Type: field.TypeBool, Column: printer.FieldLabelPdf},
			printer.FieldLabelPng:  {Type: field.TypeBool, Column: printer.FieldLabelPng},
			printer.FieldDocument:  {Type: field.TypeBool, Column: printer.FieldDocument},
			printer.FieldRotate180: {Type: field.TypeBool, Column: printer.FieldRotate180},
			printer.FieldUseShell:  {Type: field.TypeBool, Column: printer.FieldUseShell},
			printer.FieldPrintSize: {Type: field.TypeEnum, Column: printer.FieldPrintSize},
			printer.FieldCreatedAt: {Type: field.TypeTime, Column: printer.FieldCreatedAt},
			printer.FieldLastPing:  {Type: field.TypeTime, Column: printer.FieldLastPing},
		},
	}
	graph.Nodes[89] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: product.FieldID,
			},
		},
		Type: "Product",
		Fields: map[string]*sqlgraph.FieldSpec{
			product.FieldTenantID:   {Type: field.TypeString, Column: product.FieldTenantID},
			product.FieldExternalID: {Type: field.TypeString, Column: product.FieldExternalID},
			product.FieldTitle:      {Type: field.TypeString, Column: product.FieldTitle},
			product.FieldBodyHTML:   {Type: field.TypeString, Column: product.FieldBodyHTML},
			product.FieldStatus:     {Type: field.TypeEnum, Column: product.FieldStatus},
			product.FieldCreatedAt:  {Type: field.TypeTime, Column: product.FieldCreatedAt},
			product.FieldUpdatedAt:  {Type: field.TypeTime, Column: product.FieldUpdatedAt},
		},
	}
	graph.Nodes[90] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   productimage.Table,
			Columns: productimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: productimage.FieldID,
			},
		},
		Type: "ProductImage",
		Fields: map[string]*sqlgraph.FieldSpec{
			productimage.FieldTenantID:   {Type: field.TypeString, Column: productimage.FieldTenantID},
			productimage.FieldExternalID: {Type: field.TypeString, Column: productimage.FieldExternalID},
			productimage.FieldURL:        {Type: field.TypeString, Column: productimage.FieldURL},
		},
	}
	graph.Nodes[91] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   producttag.Table,
			Columns: producttag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: producttag.FieldID,
			},
		},
		Type: "ProductTag",
		Fields: map[string]*sqlgraph.FieldSpec{
			producttag.FieldTenantID:  {Type: field.TypeString, Column: producttag.FieldTenantID},
			producttag.FieldName:      {Type: field.TypeString, Column: producttag.FieldName},
			producttag.FieldCreatedAt: {Type: field.TypeTime, Column: producttag.FieldCreatedAt},
		},
	}
	graph.Nodes[92] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   productvariant.Table,
			Columns: productvariant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: productvariant.FieldID,
			},
		},
		Type: "ProductVariant",
		Fields: map[string]*sqlgraph.FieldSpec{
			productvariant.FieldTenantID:        {Type: field.TypeString, Column: productvariant.FieldTenantID},
			productvariant.FieldArchived:        {Type: field.TypeBool, Column: productvariant.FieldArchived},
			productvariant.FieldExternalID:      {Type: field.TypeString, Column: productvariant.FieldExternalID},
			productvariant.FieldDescription:     {Type: field.TypeString, Column: productvariant.FieldDescription},
			productvariant.FieldEanNumber:       {Type: field.TypeString, Column: productvariant.FieldEanNumber},
			productvariant.FieldWeightG:         {Type: field.TypeInt, Column: productvariant.FieldWeightG},
			productvariant.FieldDimensionLength: {Type: field.TypeInt, Column: productvariant.FieldDimensionLength},
			productvariant.FieldDimensionWidth:  {Type: field.TypeInt, Column: productvariant.FieldDimensionWidth},
			productvariant.FieldDimensionHeight: {Type: field.TypeInt, Column: productvariant.FieldDimensionHeight},
			productvariant.FieldCreatedAt:       {Type: field.TypeTime, Column: productvariant.FieldCreatedAt},
			productvariant.FieldUpdatedAt:       {Type: field.TypeTime, Column: productvariant.FieldUpdatedAt},
		},
	}
	graph.Nodes[93] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   returncolli.Table,
			Columns: returncolli.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: returncolli.FieldID,
			},
		},
		Type: "ReturnColli",
		Fields: map[string]*sqlgraph.FieldSpec{
			returncolli.FieldTenantID:                {Type: field.TypeString, Column: returncolli.FieldTenantID},
			returncolli.FieldExpectedAt:              {Type: field.TypeTime, Column: returncolli.FieldExpectedAt},
			returncolli.FieldLabelPdf:                {Type: field.TypeString, Column: returncolli.FieldLabelPdf},
			returncolli.FieldLabelPng:                {Type: field.TypeString, Column: returncolli.FieldLabelPng},
			returncolli.FieldQrCodePng:               {Type: field.TypeString, Column: returncolli.FieldQrCodePng},
			returncolli.FieldComment:                 {Type: field.TypeString, Column: returncolli.FieldComment},
			returncolli.FieldCreatedAt:               {Type: field.TypeTime, Column: returncolli.FieldCreatedAt},
			returncolli.FieldStatus:                  {Type: field.TypeEnum, Column: returncolli.FieldStatus},
			returncolli.FieldEmailReceived:           {Type: field.TypeTime, Column: returncolli.FieldEmailReceived},
			returncolli.FieldEmailAccepted:           {Type: field.TypeTime, Column: returncolli.FieldEmailAccepted},
			returncolli.FieldEmailConfirmationLabel:  {Type: field.TypeTime, Column: returncolli.FieldEmailConfirmationLabel},
			returncolli.FieldEmailConfirmationQrCode: {Type: field.TypeTime, Column: returncolli.FieldEmailConfirmationQrCode},
		},
	}
	graph.Nodes[94] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   returncollihistory.Table,
			Columns: returncollihistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: returncollihistory.FieldID,
			},
		},
		Type: "ReturnColliHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			returncollihistory.FieldTenantID:    {Type: field.TypeString, Column: returncollihistory.FieldTenantID},
			returncollihistory.FieldDescription: {Type: field.TypeString, Column: returncollihistory.FieldDescription},
			returncollihistory.FieldType:        {Type: field.TypeEnum, Column: returncollihistory.FieldType},
		},
	}
	graph.Nodes[95] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   returnorderline.Table,
			Columns: returnorderline.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: returnorderline.FieldID,
			},
		},
		Type: "ReturnOrderLine",
		Fields: map[string]*sqlgraph.FieldSpec{
			returnorderline.FieldTenantID: {Type: field.TypeString, Column: returnorderline.FieldTenantID},
			returnorderline.FieldUnits:    {Type: field.TypeInt, Column: returnorderline.FieldUnits},
		},
	}
	graph.Nodes[96] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   returnportal.Table,
			Columns: returnportal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: returnportal.FieldID,
			},
		},
		Type: "ReturnPortal",
		Fields: map[string]*sqlgraph.FieldSpec{
			returnportal.FieldTenantID:            {Type: field.TypeString, Column: returnportal.FieldTenantID},
			returnportal.FieldName:                {Type: field.TypeString, Column: returnportal.FieldName},
			returnportal.FieldReturnOpenHours:     {Type: field.TypeInt, Column: returnportal.FieldReturnOpenHours},
			returnportal.FieldAutomaticallyAccept: {Type: field.TypeBool, Column: returnportal.FieldAutomaticallyAccept},
		},
	}
	graph.Nodes[97] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   returnportalclaim.Table,
			Columns: returnportalclaim.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: returnportalclaim.FieldID,
			},
		},
		Type: "ReturnPortalClaim",
		Fields: map[string]*sqlgraph.FieldSpec{
			returnportalclaim.FieldTenantID:    {Type: field.TypeString, Column: returnportalclaim.FieldTenantID},
			returnportalclaim.FieldName:        {Type: field.TypeString, Column: returnportalclaim.FieldName},
			returnportalclaim.FieldDescription: {Type: field.TypeString, Column: returnportalclaim.FieldDescription},
			returnportalclaim.FieldRestockable: {Type: field.TypeBool, Column: returnportalclaim.FieldRestockable},
			returnportalclaim.FieldArchived:    {Type: field.TypeBool, Column: returnportalclaim.FieldArchived},
		},
	}
	graph.Nodes[98] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   seatgroup.Table,
			Columns: seatgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: seatgroup.FieldID,
			},
		},
		Type: "SeatGroup",
		Fields: map[string]*sqlgraph.FieldSpec{
			seatgroup.FieldTenantID:  {Type: field.TypeString, Column: seatgroup.FieldTenantID},
			seatgroup.FieldName:      {Type: field.TypeString, Column: seatgroup.FieldName},
			seatgroup.FieldCreatedAt: {Type: field.TypeTime, Column: seatgroup.FieldCreatedAt},
		},
	}
	graph.Nodes[99] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   seatgroupaccessright.Table,
			Columns: seatgroupaccessright.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: seatgroupaccessright.FieldID,
			},
		},
		Type: "SeatGroupAccessRight",
		Fields: map[string]*sqlgraph.FieldSpec{
			seatgroupaccessright.FieldTenantID:      {Type: field.TypeString, Column: seatgroupaccessright.FieldTenantID},
			seatgroupaccessright.FieldLevel:         {Type: field.TypeEnum, Column: seatgroupaccessright.FieldLevel},
			seatgroupaccessright.FieldAccessRightID: {Type: field.TypeString, Column: seatgroupaccessright.FieldAccessRightID},
			seatgroupaccessright.FieldSeatGroupID:   {Type: field.TypeString, Column: seatgroupaccessright.FieldSeatGroupID},
		},
	}
	graph.Nodes[100] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipment.Table,
			Columns: shipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipment.FieldID,
			},
		},
		Type: "Shipment",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipment.FieldTenantID:         {Type: field.TypeString, Column: shipment.FieldTenantID},
			shipment.FieldShipmentPublicID: {Type: field.TypeString, Column: shipment.FieldShipmentPublicID},
			shipment.FieldCreatedAt:        {Type: field.TypeTime, Column: shipment.FieldCreatedAt},
			shipment.FieldStatus:           {Type: field.TypeEnum, Column: shipment.FieldStatus},
		},
	}
	graph.Nodes[101] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentbring.Table,
			Columns: shipmentbring.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentbring.FieldID,
			},
		},
		Type: "ShipmentBring",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentbring.FieldTenantID:          {Type: field.TypeString, Column: shipmentbring.FieldTenantID},
			shipmentbring.FieldConsignmentNumber: {Type: field.TypeString, Column: shipmentbring.FieldConsignmentNumber},
		},
	}
	graph.Nodes[102] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentdao.Table,
			Columns: shipmentdao.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentdao.FieldID,
			},
		},
		Type: "ShipmentDAO",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentdao.FieldTenantID:  {Type: field.TypeString, Column: shipmentdao.FieldTenantID},
			shipmentdao.FieldBarcodeID: {Type: field.TypeString, Column: shipmentdao.FieldBarcodeID},
		},
	}
	graph.Nodes[103] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentdf.Table,
			Columns: shipmentdf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentdf.FieldID,
			},
		},
		Type: "ShipmentDF",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentdf.FieldTenantID: {Type: field.TypeString, Column: shipmentdf.FieldTenantID},
		},
	}
	graph.Nodes[104] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentdsv.Table,
			Columns: shipmentdsv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentdsv.FieldID,
			},
		},
		Type: "ShipmentDSV",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentdsv.FieldTenantID:  {Type: field.TypeString, Column: shipmentdsv.FieldTenantID},
			shipmentdsv.FieldBarcodeID: {Type: field.TypeString, Column: shipmentdsv.FieldBarcodeID},
		},
	}
	graph.Nodes[105] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmenteasypost.Table,
			Columns: shipmenteasypost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmenteasypost.FieldID,
			},
		},
		Type: "ShipmentEasyPost",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmenteasypost.FieldTenantID:        {Type: field.TypeString, Column: shipmenteasypost.FieldTenantID},
			shipmenteasypost.FieldTrackingNumber:  {Type: field.TypeString, Column: shipmenteasypost.FieldTrackingNumber},
			shipmenteasypost.FieldEpShipmentID:    {Type: field.TypeString, Column: shipmenteasypost.FieldEpShipmentID},
			shipmenteasypost.FieldRate:            {Type: field.TypeFloat64, Column: shipmenteasypost.FieldRate},
			shipmenteasypost.FieldEstDeliveryDate: {Type: field.TypeTime, Column: shipmenteasypost.FieldEstDeliveryDate},
		},
	}
	graph.Nodes[106] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentgls.Table,
			Columns: shipmentgls.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentgls.FieldID,
			},
		},
		Type: "ShipmentGLS",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentgls.FieldTenantID:      {Type: field.TypeString, Column: shipmentgls.FieldTenantID},
			shipmentgls.FieldConsignmentID: {Type: field.TypeString, Column: shipmentgls.FieldConsignmentID},
		},
	}
	graph.Nodes[107] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmenthistory.Table,
			Columns: shipmenthistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmenthistory.FieldID,
			},
		},
		Type: "ShipmentHistory",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmenthistory.FieldTenantID: {Type: field.TypeString, Column: shipmenthistory.FieldTenantID},
			shipmenthistory.FieldType:     {Type: field.TypeEnum, Column: shipmenthistory.FieldType},
		},
	}
	graph.Nodes[108] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentpallet.Table,
			Columns: shipmentpallet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentpallet.FieldID,
			},
		},
		Type: "ShipmentPallet",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentpallet.FieldTenantID:    {Type: field.TypeString, Column: shipmentpallet.FieldTenantID},
			shipmentpallet.FieldBarcode:     {Type: field.TypeString, Column: shipmentpallet.FieldBarcode},
			shipmentpallet.FieldColliNumber: {Type: field.TypeString, Column: shipmentpallet.FieldColliNumber},
			shipmentpallet.FieldCarrierID:   {Type: field.TypeString, Column: shipmentpallet.FieldCarrierID},
			shipmentpallet.FieldLabelPdf:    {Type: field.TypeString, Column: shipmentpallet.FieldLabelPdf},
			shipmentpallet.FieldLabelZpl:    {Type: field.TypeString, Column: shipmentpallet.FieldLabelZpl},
			shipmentpallet.FieldStatus:      {Type: field.TypeEnum, Column: shipmentpallet.FieldStatus},
		},
	}
	graph.Nodes[109] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentparcel.Table,
			Columns: shipmentparcel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentparcel.FieldID,
			},
		},
		Type: "ShipmentParcel",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentparcel.FieldTenantID:              {Type: field.TypeString, Column: shipmentparcel.FieldTenantID},
			shipmentparcel.FieldItemID:                {Type: field.TypeString, Column: shipmentparcel.FieldItemID},
			shipmentparcel.FieldStatus:                {Type: field.TypeEnum, Column: shipmentparcel.FieldStatus},
			shipmentparcel.FieldCcPickupSignatureUrls: {Type: field.TypeJSON, Column: shipmentparcel.FieldCcPickupSignatureUrls},
			shipmentparcel.FieldExpectedAt:            {Type: field.TypeTime, Column: shipmentparcel.FieldExpectedAt},
			shipmentparcel.FieldFulfillmentSyncedAt:   {Type: field.TypeTime, Column: shipmentparcel.FieldFulfillmentSyncedAt},
			shipmentparcel.FieldCancelSyncedAt:        {Type: field.TypeTime, Column: shipmentparcel.FieldCancelSyncedAt},
		},
	}
	graph.Nodes[110] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentpostnord.Table,
			Columns: shipmentpostnord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentpostnord.FieldID,
			},
		},
		Type: "ShipmentPostNord",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentpostnord.FieldTenantID:            {Type: field.TypeString, Column: shipmentpostnord.FieldTenantID},
			shipmentpostnord.FieldBookingID:           {Type: field.TypeString, Column: shipmentpostnord.FieldBookingID},
			shipmentpostnord.FieldItemID:              {Type: field.TypeString, Column: shipmentpostnord.FieldItemID},
			shipmentpostnord.FieldShipmentReferenceNo: {Type: field.TypeString, Column: shipmentpostnord.FieldShipmentReferenceNo},
		},
	}
	graph.Nodes[111] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shipmentusps.Table,
			Columns: shipmentusps.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: shipmentusps.FieldID,
			},
		},
		Type: "ShipmentUSPS",
		Fields: map[string]*sqlgraph.FieldSpec{
			shipmentusps.FieldTenantID:              {Type: field.TypeString, Column: shipmentusps.FieldTenantID},
			shipmentusps.FieldTrackingNumber:        {Type: field.TypeString, Column: shipmentusps.FieldTrackingNumber},
			shipmentusps.FieldPostage:               {Type: field.TypeFloat64, Column: shipmentusps.FieldPostage},
			shipmentusps.FieldScheduledDeliveryDate: {Type: field.TypeTime, Column: shipmentusps.FieldScheduledDeliveryDate},
		},
	}
	graph.Nodes[112] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   signupoptions.Table,
			Columns: signupoptions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: signupoptions.FieldID,
			},
		},
		Type: "SignupOptions",
		Fields: map[string]*sqlgraph.FieldSpec{
			signupoptions.FieldBetterDeliveryOptions: {Type: field.TypeBool, Column: signupoptions.FieldBetterDeliveryOptions},
			signupoptions.FieldImprovePickPack:       {Type: field.TypeBool, Column: signupoptions.FieldImprovePickPack},
			signupoptions.FieldShippingLabel:         {Type: field.TypeBool, Column: signupoptions.FieldShippingLabel},
			signupoptions.FieldCustomDocs:            {Type: field.TypeBool, Column: signupoptions.FieldCustomDocs},
			signupoptions.FieldReducedCosts:          {Type: field.TypeBool, Column: signupoptions.FieldReducedCosts},
			signupoptions.FieldEasyReturns:           {Type: field.TypeBool, Column: signupoptions.FieldEasyReturns},
			signupoptions.FieldClickCollect:          {Type: field.TypeBool, Column: signupoptions.FieldClickCollect},
			signupoptions.FieldNumShipments:          {Type: field.TypeInt, Column: signupoptions.FieldNumShipments},
		},
	}
	graph.Nodes[113] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   systemevents.Table,
			Columns: systemevents.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: systemevents.FieldID,
			},
		},
		Type: "SystemEvents",
		Fields: map[string]*sqlgraph.FieldSpec{
			systemevents.FieldTenantID:    {Type: field.TypeString, Column: systemevents.FieldTenantID},
			systemevents.FieldEventType:   {Type: field.TypeEnum, Column: systemevents.FieldEventType},
			systemevents.FieldEventTypeID: {Type: field.TypeString, Column: systemevents.FieldEventTypeID},
			systemevents.FieldStatus:      {Type: field.TypeEnum, Column: systemevents.FieldStatus},
			systemevents.FieldDescription: {Type: field.TypeString, Column: systemevents.FieldDescription},
			systemevents.FieldData:        {Type: field.TypeString, Column: systemevents.FieldData},
			systemevents.FieldUpdatedAt:   {Type: field.TypeTime, Column: systemevents.FieldUpdatedAt},
			systemevents.FieldCreatedAt:   {Type: field.TypeTime, Column: systemevents.FieldCreatedAt},
		},
	}
	graph.Nodes[114] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   tenant.Table,
			Columns: tenant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: tenant.FieldID,
			},
		},
		Type: "Tenant",
		Fields: map[string]*sqlgraph.FieldSpec{
			tenant.FieldName:             {Type: field.TypeString, Column: tenant.FieldName},
			tenant.FieldVatNumber:        {Type: field.TypeString, Column: tenant.FieldVatNumber},
			tenant.FieldInvoiceReference: {Type: field.TypeString, Column: tenant.FieldInvoiceReference},
		},
	}
	graph.Nodes[115] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldTenantID:             {Type: field.TypeString, Column: user.FieldTenantID},
			user.FieldName:                 {Type: field.TypeString, Column: user.FieldName},
			user.FieldSurname:              {Type: field.TypeString, Column: user.FieldSurname},
			user.FieldPhoneNumber:          {Type: field.TypeString, Column: user.FieldPhoneNumber},
			user.FieldEmail:                {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPassword:             {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldHash:                 {Type: field.TypeString, Column: user.FieldHash},
			user.FieldIsAccountOwner:       {Type: field.TypeBool, Column: user.FieldIsAccountOwner},
			user.FieldIsGlobalAdmin:        {Type: field.TypeBool, Column: user.FieldIsGlobalAdmin},
			user.FieldMarketingConsent:     {Type: field.TypeBool, Column: user.FieldMarketingConsent},
			user.FieldCreatedAt:            {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldArchivedAt:           {Type: field.TypeTime, Column: user.FieldArchivedAt},
			user.FieldPickupDay:            {Type: field.TypeEnum, Column: user.FieldPickupDay},
			user.FieldPickupDayLastChanged: {Type: field.TypeTime, Column: user.FieldPickupDayLastChanged},
		},
	}
	graph.Nodes[116] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   userseat.Table,
			Columns: userseat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: userseat.FieldID,
			},
		},
		Type: "UserSeat",
		Fields: map[string]*sqlgraph.FieldSpec{
			userseat.FieldTenantID:  {Type: field.TypeString, Column: userseat.FieldTenantID},
			userseat.FieldName:      {Type: field.TypeString, Column: userseat.FieldName},
			userseat.FieldSurname:   {Type: field.TypeString, Column: userseat.FieldSurname},
			userseat.FieldEmail:     {Type: field.TypeString, Column: userseat.FieldEmail},
			userseat.FieldPassword:  {Type: field.TypeString, Column: userseat.FieldPassword},
			userseat.FieldHash:      {Type: field.TypeString, Column: userseat.FieldHash},
			userseat.FieldCreatedAt: {Type: field.TypeTime, Column: userseat.FieldCreatedAt},
		},
	}
	graph.Nodes[117] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   workspacerecentscan.Table,
			Columns: workspacerecentscan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workspacerecentscan.FieldID,
			},
		},
		Type: "WorkspaceRecentScan",
		Fields: map[string]*sqlgraph.FieldSpec{
			workspacerecentscan.FieldTenantID:  {Type: field.TypeString, Column: workspacerecentscan.FieldTenantID},
			workspacerecentscan.FieldCreatedAt: {Type: field.TypeTime, Column: workspacerecentscan.FieldCreatedAt},
		},
	}
	graph.Nodes[118] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   workstation.Table,
			Columns: workstation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: workstation.FieldID,
			},
		},
		Type: "Workstation",
		Fields: map[string]*sqlgraph.FieldSpec{
			workstation.FieldTenantID:          {Type: field.TypeString, Column: workstation.FieldTenantID},
			workstation.FieldArchivedAt:        {Type: field.TypeTime, Column: workstation.FieldArchivedAt},
			workstation.FieldName:              {Type: field.TypeString, Column: workstation.FieldName},
			workstation.FieldDeviceType:        {Type: field.TypeEnum, Column: workstation.FieldDeviceType},
			workstation.FieldRegistrationCode:  {Type: field.TypeString, Column: workstation.FieldRegistrationCode},
			workstation.FieldWorkstationID:     {Type: field.TypeString, Column: workstation.FieldWorkstationID},
			workstation.FieldCreatedAt:         {Type: field.TypeTime, Column: workstation.FieldCreatedAt},
			workstation.FieldLastPing:          {Type: field.TypeTime, Column: workstation.FieldLastPing},
			workstation.FieldStatus:            {Type: field.TypeEnum, Column: workstation.FieldStatus},
			workstation.FieldAutoPrintReceiver: {Type: field.TypeBool, Column: workstation.FieldAutoPrintReceiver},
		},
	}
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.TenantTable,
			Columns: []string{apitoken.TenantColumn},
			Bidi:    false,
		},
		"APIToken",
		"Tenant",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   apitoken.UserTable,
			Columns: []string{apitoken.UserColumn},
			Bidi:    false,
		},
		"APIToken",
		"User",
	)
	graph.MustAddE(
		"assigned_access_right",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accessright.AssignedAccessRightTable,
			Columns: accessright.AssignedAccessRightPrimaryKey,
			Bidi:    false,
		},
		"AccessRight",
		"SeatGroup",
	)
	graph.MustAddE(
		"seat_group_access_right",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   accessright.SeatGroupAccessRightTable,
			Columns: []string{accessright.SeatGroupAccessRightColumn},
			Bidi:    false,
		},
		"AccessRight",
		"SeatGroupAccessRight",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.TenantTable,
			Columns: []string{address.TenantColumn},
			Bidi:    false,
		},
		"Address",
		"Tenant",
	)
	graph.MustAddE(
		"recipient_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.RecipientColliTable,
			Columns: []string{address.RecipientColliColumn},
			Bidi:    false,
		},
		"Address",
		"Colli",
	)
	graph.MustAddE(
		"recipient_consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.RecipientConsolidationTable,
			Columns: []string{address.RecipientConsolidationColumn},
			Bidi:    false,
		},
		"Address",
		"Consolidation",
	)
	graph.MustAddE(
		"company_address",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.CompanyAddressTable,
			Columns: []string{address.CompanyAddressColumn},
			Bidi:    false,
		},
		"Address",
		"Tenant",
	)
	graph.MustAddE(
		"location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.LocationTable,
			Columns: []string{address.LocationColumn},
			Bidi:    false,
		},
		"Address",
		"Location",
	)
	graph.MustAddE(
		"sender_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.SenderColliTable,
			Columns: []string{address.SenderColliColumn},
			Bidi:    false,
		},
		"Address",
		"Colli",
	)
	graph.MustAddE(
		"sender_consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   address.SenderConsolidationTable,
			Columns: []string{address.SenderConsolidationColumn},
			Bidi:    false,
		},
		"Address",
		"Consolidation",
	)
	graph.MustAddE(
		"return_sender_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnSenderColliTable,
			Columns: []string{address.ReturnSenderColliColumn},
			Bidi:    false,
		},
		"Address",
		"ReturnColli",
	)
	graph.MustAddE(
		"return_recipient_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   address.ReturnRecipientColliTable,
			Columns: []string{address.ReturnRecipientColliColumn},
			Bidi:    false,
		},
		"Address",
		"ReturnColli",
	)
	graph.MustAddE(
		"country",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   address.CountryTable,
			Columns: []string{address.CountryColumn},
			Bidi:    false,
		},
		"Address",
		"Country",
	)
	graph.MustAddE(
		"parcel_shop_post_nord_delivery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopPostNordDeliveryTable,
			Columns: []string{addressglobal.ParcelShopPostNordDeliveryColumn},
			Bidi:    false,
		},
		"AddressGlobal",
		"ParcelShopPostNord",
	)
	graph.MustAddE(
		"parcel_shop_bring_delivery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopBringDeliveryTable,
			Columns: []string{addressglobal.ParcelShopBringDeliveryColumn},
			Bidi:    false,
		},
		"AddressGlobal",
		"ParcelShopBring",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   addressglobal.ParcelShopTable,
			Columns: []string{addressglobal.ParcelShopColumn},
			Bidi:    false,
		},
		"AddressGlobal",
		"ParcelShop",
	)
	graph.MustAddE(
		"country",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   addressglobal.CountryTable,
			Columns: []string{addressglobal.CountryColumn},
			Bidi:    false,
		},
		"AddressGlobal",
		"Country",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businesshoursperiod.ParcelShopTable,
			Columns: []string{businesshoursperiod.ParcelShopColumn},
			Bidi:    false,
		},
		"BusinessHoursPeriod",
		"ParcelShop",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.TenantTable,
			Columns: []string{carrier.TenantColumn},
			Bidi:    false,
		},
		"Carrier",
		"Tenant",
	)
	graph.MustAddE(
		"carrier_brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrier.CarrierBrandTable,
			Columns: []string{carrier.CarrierBrandColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierBrand",
	)
	graph.MustAddE(
		"carrier_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDAOTable,
			Columns: []string{carrier.CarrierDAOColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierDAO",
	)
	graph.MustAddE(
		"carrier_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDFTable,
			Columns: []string{carrier.CarrierDFColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierDF",
	)
	graph.MustAddE(
		"carrier_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierDSVTable,
			Columns: []string{carrier.CarrierDSVColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierDSV",
	)
	graph.MustAddE(
		"carrier_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierEasyPostTable,
			Columns: []string{carrier.CarrierEasyPostColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierEasyPost",
	)
	graph.MustAddE(
		"carrier_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierGLSTable,
			Columns: []string{carrier.CarrierGLSColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierGLS",
	)
	graph.MustAddE(
		"carrier_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierPostNordTable,
			Columns: []string{carrier.CarrierPostNordColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierPostNord",
	)
	graph.MustAddE(
		"carrier_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierUSPSTable,
			Columns: []string{carrier.CarrierUSPSColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierUSPS",
	)
	graph.MustAddE(
		"carrier_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrier.CarrierBringTable,
			Columns: []string{carrier.CarrierBringColumn},
			Bidi:    false,
		},
		"Carrier",
		"CarrierBring",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.DeliveryOptionTable,
			Columns: []string{carrier.DeliveryOptionColumn},
			Bidi:    false,
		},
		"Carrier",
		"DeliveryOption",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrier.ShipmentTable,
			Columns: []string{carrier.ShipmentColumn},
			Bidi:    false,
		},
		"Carrier",
		"Shipment",
	)
	graph.MustAddE(
		"carrier_service_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicebring.CarrierServiceBringTable,
			Columns: []string{carrieradditionalservicebring.CarrierServiceBringColumn},
			Bidi:    false,
		},
		"CarrierAdditionalServiceBring",
		"CarrierServiceBring",
	)
	graph.MustAddE(
		"delivery_option_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicebring.DeliveryOptionBringTable,
			Columns: carrieradditionalservicebring.DeliveryOptionBringPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceBring",
		"DeliveryOptionBring",
	)
	graph.MustAddE(
		"carrier_service_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.CarrierServiceDAOTable,
			Columns: carrieradditionalservicedao.CarrierServiceDAOPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceDAO",
		"CarrierServiceDAO",
	)
	graph.MustAddE(
		"delivery_option_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedao.DeliveryOptionDAOTable,
			Columns: carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceDAO",
		"DeliveryOptionDAO",
	)
	graph.MustAddE(
		"carrier_service_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.CarrierServiceDFTable,
			Columns: carrieradditionalservicedf.CarrierServiceDFPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceDF",
		"CarrierServiceDF",
	)
	graph.MustAddE(
		"delivery_option_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedf.DeliveryOptionDFTable,
			Columns: carrieradditionalservicedf.DeliveryOptionDFPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceDF",
		"DeliveryOptionDF",
	)
	graph.MustAddE(
		"carrier_service_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.CarrierServiceDSVTable,
			Columns: carrieradditionalservicedsv.CarrierServiceDSVPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceDSV",
		"CarrierServiceDSV",
	)
	graph.MustAddE(
		"delivery_option_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicedsv.DeliveryOptionDSVTable,
			Columns: carrieradditionalservicedsv.DeliveryOptionDSVPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceDSV",
		"DeliveryOptionDSV",
	)
	graph.MustAddE(
		"carrier_service_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.CarrierServiceEasyPostTable,
			Columns: carrieradditionalserviceeasypost.CarrierServiceEasyPostPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceEasyPost",
		"CarrierServiceEasyPost",
	)
	graph.MustAddE(
		"delivery_option_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceeasypost.DeliveryOptionEasyPostTable,
			Columns: carrieradditionalserviceeasypost.DeliveryOptionEasyPostPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceEasyPost",
		"DeliveryOptionEasyPost",
	)
	graph.MustAddE(
		"carrier_service_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicegls.CarrierServiceGLSTable,
			Columns: []string{carrieradditionalservicegls.CarrierServiceGLSColumn},
			Bidi:    false,
		},
		"CarrierAdditionalServiceGLS",
		"CarrierServiceGLS",
	)
	graph.MustAddE(
		"delivery_option_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicegls.DeliveryOptionGLSTable,
			Columns: carrieradditionalservicegls.DeliveryOptionGLSPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceGLS",
		"DeliveryOptionGLS",
	)
	graph.MustAddE(
		"countries_consignee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsigneeTable,
			Columns: carrieradditionalservicegls.CountriesConsigneePrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceGLS",
		"Country",
	)
	graph.MustAddE(
		"countries_consignor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicegls.CountriesConsignorTable,
			Columns: carrieradditionalservicegls.CountriesConsignorPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceGLS",
		"Country",
	)
	graph.MustAddE(
		"carrier_service_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.CarrierServicePostNordTable,
			Columns: []string{carrieradditionalservicepostnord.CarrierServicePostNordColumn},
			Bidi:    false,
		},
		"CarrierAdditionalServicePostNord",
		"CarrierServicePostNord",
	)
	graph.MustAddE(
		"delivery_option_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalservicepostnord.DeliveryOptionPostNordTable,
			Columns: carrieradditionalservicepostnord.DeliveryOptionPostNordPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServicePostNord",
		"DeliveryOptionPostNord",
	)
	graph.MustAddE(
		"countries_consignee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsigneeTable,
			Columns: carrieradditionalservicepostnord.CountriesConsigneePrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServicePostNord",
		"Country",
	)
	graph.MustAddE(
		"countries_consignor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrieradditionalservicepostnord.CountriesConsignorTable,
			Columns: carrieradditionalservicepostnord.CountriesConsignorPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServicePostNord",
		"Country",
	)
	graph.MustAddE(
		"carrier_service_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrieradditionalserviceusps.CarrierServiceUSPSTable,
			Columns: []string{carrieradditionalserviceusps.CarrierServiceUSPSColumn},
			Bidi:    false,
		},
		"CarrierAdditionalServiceUSPS",
		"CarrierServiceUSPS",
	)
	graph.MustAddE(
		"delivery_option_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   carrieradditionalserviceusps.DeliveryOptionUSPSTable,
			Columns: carrieradditionalserviceusps.DeliveryOptionUSPSPrimaryKey,
			Bidi:    false,
		},
		"CarrierAdditionalServiceUSPS",
		"DeliveryOptionUSPS",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierbrand.CarrierServiceTable,
			Columns: []string{carrierbrand.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierBrand",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.CarrierTable,
			Columns: []string{carrierbrand.CarrierColumn},
			Bidi:    false,
		},
		"CarrierBrand",
		"Carrier",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.ParcelShopTable,
			Columns: []string{carrierbrand.ParcelShopColumn},
			Bidi:    false,
		},
		"CarrierBrand",
		"ParcelShop",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.PackagingTable,
			Columns: []string{carrierbrand.PackagingColumn},
			Bidi:    false,
		},
		"CarrierBrand",
		"Packaging",
	)
	graph.MustAddE(
		"document",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierbrand.DocumentTable,
			Columns: []string{carrierbrand.DocumentColumn},
			Bidi:    false,
		},
		"CarrierBrand",
		"Document",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierbring.TenantTable,
			Columns: []string{carrierbring.TenantColumn},
			Bidi:    false,
		},
		"CarrierBring",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierbring.CarrierTable,
			Columns: []string{carrierbring.CarrierColumn},
			Bidi:    false,
		},
		"CarrierBring",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdao.TenantTable,
			Columns: []string{carrierdao.TenantColumn},
			Bidi:    false,
		},
		"CarrierDAO",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdao.CarrierTable,
			Columns: []string{carrierdao.CarrierColumn},
			Bidi:    false,
		},
		"CarrierDAO",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdf.TenantTable,
			Columns: []string{carrierdf.TenantColumn},
			Bidi:    false,
		},
		"CarrierDF",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdf.CarrierTable,
			Columns: []string{carrierdf.CarrierColumn},
			Bidi:    false,
		},
		"CarrierDF",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierdsv.TenantTable,
			Columns: []string{carrierdsv.TenantColumn},
			Bidi:    false,
		},
		"CarrierDSV",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierdsv.CarrierTable,
			Columns: []string{carrierdsv.CarrierColumn},
			Bidi:    false,
		},
		"CarrierDSV",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriereasypost.TenantTable,
			Columns: []string{carriereasypost.TenantColumn},
			Bidi:    false,
		},
		"CarrierEasyPost",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriereasypost.CarrierTable,
			Columns: []string{carriereasypost.CarrierColumn},
			Bidi:    false,
		},
		"CarrierEasyPost",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carriergls.TenantTable,
			Columns: []string{carriergls.TenantColumn},
			Bidi:    false,
		},
		"CarrierGLS",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carriergls.CarrierTable,
			Columns: []string{carriergls.CarrierColumn},
			Bidi:    false,
		},
		"CarrierGLS",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierpostnord.TenantTable,
			Columns: []string{carrierpostnord.TenantColumn},
			Bidi:    false,
		},
		"CarrierPostNord",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierpostnord.CarrierTable,
			Columns: []string{carrierpostnord.CarrierColumn},
			Bidi:    false,
		},
		"CarrierPostNord",
		"Carrier",
	)
	graph.MustAddE(
		"carrier_service_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServicePostNordTable,
			Columns: []string{carrierservice.CarrierServicePostNordColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServicePostNord",
	)
	graph.MustAddE(
		"carrier_service_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDAOTable,
			Columns: []string{carrierservice.CarrierServiceDAOColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceDAO",
	)
	graph.MustAddE(
		"carrier_service_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDFTable,
			Columns: []string{carrierservice.CarrierServiceDFColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceDF",
	)
	graph.MustAddE(
		"carrier_service_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceDSVTable,
			Columns: []string{carrierservice.CarrierServiceDSVColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceDSV",
	)
	graph.MustAddE(
		"carrier_serv_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServEasyPostTable,
			Columns: []string{carrierservice.CarrierServEasyPostColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceEasyPost",
	)
	graph.MustAddE(
		"carrier_service_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceGLSTable,
			Columns: []string{carrierservice.CarrierServiceGLSColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceGLS",
	)
	graph.MustAddE(
		"carrier_service_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceUSPSTable,
			Columns: []string{carrierservice.CarrierServiceUSPSColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceUSPS",
	)
	graph.MustAddE(
		"carrier_service_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   carrierservice.CarrierServiceBringTable,
			Columns: []string{carrierservice.CarrierServiceBringColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierServiceBring",
	)
	graph.MustAddE(
		"carrier_brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrierservice.CarrierBrandTable,
			Columns: []string{carrierservice.CarrierBrandColumn},
			Bidi:    false,
		},
		"CarrierService",
		"CarrierBrand",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   carrierservice.DeliveryOptionTable,
			Columns: []string{carrierservice.DeliveryOptionColumn},
			Bidi:    false,
		},
		"CarrierService",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicebring.CarrierServiceTable,
			Columns: []string{carrierservicebring.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceBring",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_additional_service_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicebring.CarrierAdditionalServiceBringTable,
			Columns: []string{carrierservicebring.CarrierAdditionalServiceBringColumn},
			Bidi:    false,
		},
		"CarrierServiceBring",
		"CarrierAdditionalServiceBring",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedao.CarrierServiceTable,
			Columns: []string{carrierservicedao.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceDAO",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_additional_service_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedao.CarrierAdditionalServiceDAOTable,
			Columns: carrierservicedao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
		},
		"CarrierServiceDAO",
		"CarrierAdditionalServiceDAO",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedf.CarrierServiceTable,
			Columns: []string{carrierservicedf.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceDF",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_additional_service_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedf.CarrierAdditionalServiceDFTable,
			Columns: carrierservicedf.CarrierAdditionalServiceDFPrimaryKey,
			Bidi:    false,
		},
		"CarrierServiceDF",
		"CarrierAdditionalServiceDF",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicedsv.CarrierServiceTable,
			Columns: []string{carrierservicedsv.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceDSV",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_additional_service_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierservicedsv.CarrierAdditionalServiceDSVTable,
			Columns: carrierservicedsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
		},
		"CarrierServiceDSV",
		"CarrierAdditionalServiceDSV",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceeasypost.CarrierServiceTable,
			Columns: []string{carrierserviceeasypost.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceEasyPost",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_add_serv_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   carrierserviceeasypost.CarrierAddServEasyPostTable,
			Columns: carrierserviceeasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
		},
		"CarrierServiceEasyPost",
		"CarrierAdditionalServiceEasyPost",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicegls.CarrierServiceTable,
			Columns: []string{carrierservicegls.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceGLS",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_additional_service_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicegls.CarrierAdditionalServiceGLSTable,
			Columns: []string{carrierservicegls.CarrierAdditionalServiceGLSColumn},
			Bidi:    false,
		},
		"CarrierServiceGLS",
		"CarrierAdditionalServiceGLS",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierservicepostnord.CarrierServiceTable,
			Columns: []string{carrierservicepostnord.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServicePostNord",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_add_serv_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierservicepostnord.CarrierAddServPostNordTable,
			Columns: []string{carrierservicepostnord.CarrierAddServPostNordColumn},
			Bidi:    false,
		},
		"CarrierServicePostNord",
		"CarrierAdditionalServicePostNord",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierserviceusps.CarrierServiceTable,
			Columns: []string{carrierserviceusps.CarrierServiceColumn},
			Bidi:    false,
		},
		"CarrierServiceUSPS",
		"CarrierService",
	)
	graph.MustAddE(
		"carrier_additional_service_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carrierserviceusps.CarrierAdditionalServiceUSPSTable,
			Columns: []string{carrierserviceusps.CarrierAdditionalServiceUSPSColumn},
			Bidi:    false,
		},
		"CarrierServiceUSPS",
		"CarrierAdditionalServiceUSPS",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   carrierusps.TenantTable,
			Columns: []string{carrierusps.TenantColumn},
			Bidi:    false,
		},
		"CarrierUSPS",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   carrierusps.CarrierTable,
			Columns: []string{carrierusps.CarrierColumn},
			Bidi:    false,
		},
		"CarrierUSPS",
		"Carrier",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.TenantTable,
			Columns: []string{changehistory.TenantColumn},
			Bidi:    false,
		},
		"ChangeHistory",
		"Tenant",
	)
	graph.MustAddE(
		"plan_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.PlanHistoryTable,
			Columns: []string{changehistory.PlanHistoryColumn},
			Bidi:    false,
		},
		"ChangeHistory",
		"PlanHistory",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   changehistory.UserTable,
			Columns: []string{changehistory.UserColumn},
			Bidi:    false,
		},
		"ChangeHistory",
		"User",
	)
	graph.MustAddE(
		"order_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.OrderHistoryTable,
			Columns: []string{changehistory.OrderHistoryColumn},
			Bidi:    false,
		},
		"ChangeHistory",
		"OrderHistory",
	)
	graph.MustAddE(
		"shipment_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ShipmentHistoryTable,
			Columns: []string{changehistory.ShipmentHistoryColumn},
			Bidi:    false,
		},
		"ChangeHistory",
		"ShipmentHistory",
	)
	graph.MustAddE(
		"return_colli_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   changehistory.ReturnColliHistoryTable,
			Columns: []string{changehistory.ReturnColliHistoryColumn},
			Bidi:    false,
		},
		"ChangeHistory",
		"ReturnColliHistory",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.TenantTable,
			Columns: []string{colli.TenantColumn},
			Bidi:    false,
		},
		"Colli",
		"Tenant",
	)
	graph.MustAddE(
		"recipient",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.RecipientTable,
			Columns: []string{colli.RecipientColumn},
			Bidi:    false,
		},
		"Colli",
		"Address",
	)
	graph.MustAddE(
		"sender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.SenderTable,
			Columns: []string{colli.SenderColumn},
			Bidi:    false,
		},
		"Colli",
		"Address",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ParcelShopTable,
			Columns: []string{colli.ParcelShopColumn},
			Bidi:    false,
		},
		"Colli",
		"ParcelShop",
	)
	graph.MustAddE(
		"click_collect_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.ClickCollectLocationTable,
			Columns: []string{colli.ClickCollectLocationColumn},
			Bidi:    false,
		},
		"Colli",
		"Location",
	)
	graph.MustAddE(
		"order_lines",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.OrderLinesTable,
			Columns: []string{colli.OrderLinesColumn},
			Bidi:    false,
		},
		"Colli",
		"OrderLine",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.DeliveryOptionTable,
			Columns: []string{colli.DeliveryOptionColumn},
			Bidi:    false,
		},
		"Colli",
		"DeliveryOption",
	)
	graph.MustAddE(
		"document_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   colli.DocumentFileTable,
			Columns: []string{colli.DocumentFileColumn},
			Bidi:    false,
		},
		"Colli",
		"DocumentFile",
	)
	graph.MustAddE(
		"shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   colli.ShipmentParcelTable,
			Columns: []string{colli.ShipmentParcelColumn},
			Bidi:    false,
		},
		"Colli",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"cancelled_shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   colli.CancelledShipmentParcelTable,
			Columns: colli.CancelledShipmentParcelPrimaryKey,
			Bidi:    false,
		},
		"Colli",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   colli.OrderTable,
			Columns: []string{colli.OrderColumn},
			Bidi:    false,
		},
		"Colli",
		"Order",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   colli.PackagingTable,
			Columns: []string{colli.PackagingColumn},
			Bidi:    false,
		},
		"Colli",
		"Packaging",
	)
	graph.MustAddE(
		"print_job",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   colli.PrintJobTable,
			Columns: []string{colli.PrintJobColumn},
			Bidi:    false,
		},
		"Colli",
		"PrintJob",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
		},
		"ConnectOptionCarrier",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptionplatform.TenantTable,
			Columns: connectoptionplatform.TenantPrimaryKey,
			Bidi:    false,
		},
		"ConnectOptionPlatform",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.TenantTable,
			Columns: []string{connection.TenantColumn},
			Bidi:    false,
		},
		"Connection",
		"Tenant",
	)
	graph.MustAddE(
		"connection_brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ConnectionBrandTable,
			Columns: []string{connection.ConnectionBrandColumn},
			Bidi:    false,
		},
		"Connection",
		"ConnectionBrand",
	)
	graph.MustAddE(
		"connection_shopify",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.ConnectionShopifyTable,
			Columns: []string{connection.ConnectionShopifyColumn},
			Bidi:    false,
		},
		"Connection",
		"ConnectionShopify",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
		},
		"Connection",
		"Order",
	)
	graph.MustAddE(
		"sender_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SenderLocationTable,
			Columns: []string{connection.SenderLocationColumn},
			Bidi:    false,
		},
		"Connection",
		"Location",
	)
	graph.MustAddE(
		"pickup_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PickupLocationTable,
			Columns: []string{connection.PickupLocationColumn},
			Bidi:    false,
		},
		"Connection",
		"Location",
	)
	graph.MustAddE(
		"return_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ReturnLocationTable,
			Columns: []string{connection.ReturnLocationColumn},
			Bidi:    false,
		},
		"Connection",
		"Location",
	)
	graph.MustAddE(
		"seller_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SellerLocationTable,
			Columns: []string{connection.SellerLocationColumn},
			Bidi:    false,
		},
		"Connection",
		"Location",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
		},
		"Connection",
		"DeliveryOption",
	)
	graph.MustAddE(
		"default_delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.DefaultDeliveryOptionTable,
			Columns: []string{connection.DefaultDeliveryOptionColumn},
			Bidi:    false,
		},
		"Connection",
		"DeliveryOption",
	)
	graph.MustAddE(
		"return_portal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connection.ReturnPortalTable,
			Columns: []string{connection.ReturnPortalColumn},
			Bidi:    false,
		},
		"Connection",
		"ReturnPortal",
	)
	graph.MustAddE(
		"hypothesis_test",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
		},
		"Connection",
		"HypothesisTest",
	)
	graph.MustAddE(
		"notifications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
		},
		"Connection",
		"Notification",
	)
	graph.MustAddE(
		"currency",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.CurrencyTable,
			Columns: []string{connection.CurrencyColumn},
			Bidi:    false,
		},
		"Connection",
		"Currency",
	)
	graph.MustAddE(
		"packing_slip_template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PackingSlipTemplateTable,
			Columns: []string{connection.PackingSlipTemplateColumn},
			Bidi:    false,
		},
		"Connection",
		"Document",
	)
	graph.MustAddE(
		"connection_lookup",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
		},
		"Connection",
		"ConnectionLookup",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connectionbrand.ConnectionTable,
			Columns: []string{connectionbrand.ConnectionColumn},
			Bidi:    false,
		},
		"ConnectionBrand",
		"Connection",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.TenantTable,
			Columns: []string{connectionlookup.TenantColumn},
			Bidi:    false,
		},
		"ConnectionLookup",
		"Tenant",
	)
	graph.MustAddE(
		"connections",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionlookup.ConnectionsTable,
			Columns: []string{connectionlookup.ConnectionsColumn},
			Bidi:    false,
		},
		"ConnectionLookup",
		"Connection",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connectionshopify.TenantTable,
			Columns: []string{connectionshopify.TenantColumn},
			Bidi:    false,
		},
		"ConnectionShopify",
		"Tenant",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connectionshopify.ConnectionTable,
			Columns: []string{connectionshopify.ConnectionColumn},
			Bidi:    false,
		},
		"ConnectionShopify",
		"Connection",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.TenantTable,
			Columns: []string{consolidation.TenantColumn},
			Bidi:    false,
		},
		"Consolidation",
		"Tenant",
	)
	graph.MustAddE(
		"pallets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.PalletsTable,
			Columns: []string{consolidation.PalletsColumn},
			Bidi:    false,
		},
		"Consolidation",
		"Pallet",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   consolidation.OrdersTable,
			Columns: []string{consolidation.OrdersColumn},
			Bidi:    false,
		},
		"Consolidation",
		"Order",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   consolidation.DeliveryOptionTable,
			Columns: []string{consolidation.DeliveryOptionColumn},
			Bidi:    false,
		},
		"Consolidation",
		"DeliveryOption",
	)
	graph.MustAddE(
		"recipient",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.RecipientTable,
			Columns: []string{consolidation.RecipientColumn},
			Bidi:    false,
		},
		"Consolidation",
		"Address",
	)
	graph.MustAddE(
		"sender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   consolidation.SenderTable,
			Columns: []string{consolidation.SenderColumn},
			Bidi:    false,
		},
		"Consolidation",
		"Address",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   consolidation.ShipmentTable,
			Columns: []string{consolidation.ShipmentColumn},
			Bidi:    false,
		},
		"Consolidation",
		"Shipment",
	)
	graph.MustAddE(
		"cancelled_shipments",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   consolidation.CancelledShipmentsTable,
			Columns: consolidation.CancelledShipmentsPrimaryKey,
			Bidi:    false,
		},
		"Consolidation",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contact.TenantTable,
			Columns: []string{contact.TenantColumn},
			Bidi:    false,
		},
		"Contact",
		"Tenant",
	)
	graph.MustAddE(
		"billing_contact",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.BillingContactTable,
			Columns: []string{contact.BillingContactColumn},
			Bidi:    false,
		},
		"Contact",
		"Tenant",
	)
	graph.MustAddE(
		"admin_contact",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   contact.AdminContactTable,
			Columns: []string{contact.AdminContactColumn},
			Bidi:    false,
		},
		"Contact",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_rule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   country.DeliveryRuleTable,
			Columns: country.DeliveryRulePrimaryKey,
			Bidi:    false,
		},
		"Country",
		"DeliveryRule",
	)
	graph.MustAddE(
		"address",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressTable,
			Columns: []string{country.AddressColumn},
			Bidi:    false,
		},
		"Country",
		"Address",
	)
	graph.MustAddE(
		"address_global",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.AddressGlobalTable,
			Columns: []string{country.AddressGlobalColumn},
			Bidi:    false,
		},
		"Country",
		"AddressGlobal",
	)
	graph.MustAddE(
		"carrier_additional_service_post_nord_consignee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsigneeTable,
			Columns: country.CarrierAdditionalServicePostNordConsigneePrimaryKey,
			Bidi:    false,
		},
		"Country",
		"CarrierAdditionalServicePostNord",
	)
	graph.MustAddE(
		"carrier_additional_service_post_nord_consignor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServicePostNordConsignorTable,
			Columns: country.CarrierAdditionalServicePostNordConsignorPrimaryKey,
			Bidi:    false,
		},
		"Country",
		"CarrierAdditionalServicePostNord",
	)
	graph.MustAddE(
		"carrier_additional_service_gls_consignee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsigneeTable,
			Columns: country.CarrierAdditionalServiceGLSConsigneePrimaryKey,
			Bidi:    false,
		},
		"Country",
		"CarrierAdditionalServiceGLS",
	)
	graph.MustAddE(
		"carrier_additional_service_gls_consignor",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   country.CarrierAdditionalServiceGLSConsignorTable,
			Columns: country.CarrierAdditionalServiceGLSConsignorPrimaryKey,
			Bidi:    false,
		},
		"Country",
		"CarrierAdditionalServiceGLS",
	)
	graph.MustAddE(
		"country_harmonized_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.CountryHarmonizedCodeTable,
			Columns: []string{country.CountryHarmonizedCodeColumn},
			Bidi:    false,
		},
		"Country",
		"CountryHarmonizedCode",
	)
	graph.MustAddE(
		"inventory_item",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   country.InventoryItemTable,
			Columns: []string{country.InventoryItemColumn},
			Bidi:    false,
		},
		"Country",
		"InventoryItem",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.TenantTable,
			Columns: []string{countryharmonizedcode.TenantColumn},
			Bidi:    false,
		},
		"CountryHarmonizedCode",
		"Tenant",
	)
	graph.MustAddE(
		"inventory_item",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   countryharmonizedcode.InventoryItemTable,
			Columns: []string{countryharmonizedcode.InventoryItemColumn},
			Bidi:    false,
		},
		"CountryHarmonizedCode",
		"InventoryItem",
	)
	graph.MustAddE(
		"country",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   countryharmonizedcode.CountryTable,
			Columns: []string{countryharmonizedcode.CountryColumn},
			Bidi:    false,
		},
		"CountryHarmonizedCode",
		"Country",
	)
	graph.MustAddE(
		"order_line",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.OrderLineTable,
			Columns: []string{currency.OrderLineColumn},
			Bidi:    false,
		},
		"Currency",
		"OrderLine",
	)
	graph.MustAddE(
		"delivery_rule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   currency.DeliveryRuleTable,
			Columns: []string{currency.DeliveryRuleColumn},
			Bidi:    false,
		},
		"Currency",
		"DeliveryRule",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.TenantTable,
			Columns: []string{deliveryoption.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierTable,
			Columns: []string{deliveryoption.CarrierColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Carrier",
	)
	graph.MustAddE(
		"delivery_rule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryoption.DeliveryRuleTable,
			Columns: []string{deliveryoption.DeliveryRuleColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryRule",
	)
	graph.MustAddE(
		"delivery_option_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDAOTable,
			Columns: []string{deliveryoption.DeliveryOptionDAOColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionDAO",
	)
	graph.MustAddE(
		"delivery_option_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDFTable,
			Columns: []string{deliveryoption.DeliveryOptionDFColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionDF",
	)
	graph.MustAddE(
		"delivery_option_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionDSVTable,
			Columns: []string{deliveryoption.DeliveryOptionDSVColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionDSV",
	)
	graph.MustAddE(
		"delivery_option_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionEasyPostTable,
			Columns: []string{deliveryoption.DeliveryOptionEasyPostColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionEasyPost",
	)
	graph.MustAddE(
		"delivery_option_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionGLSTable,
			Columns: []string{deliveryoption.DeliveryOptionGLSColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionGLS",
	)
	graph.MustAddE(
		"delivery_option_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionPostNordTable,
			Columns: []string{deliveryoption.DeliveryOptionPostNordColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionPostNord",
	)
	graph.MustAddE(
		"delivery_option_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionUSPSTable,
			Columns: []string{deliveryoption.DeliveryOptionUSPSColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionUSPS",
	)
	graph.MustAddE(
		"delivery_option_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   deliveryoption.DeliveryOptionBringTable,
			Columns: []string{deliveryoption.DeliveryOptionBringColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"DeliveryOptionBring",
	)
	graph.MustAddE(
		"return_portals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.ReturnPortalsTable,
			Columns: deliveryoption.ReturnPortalsPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOption",
		"ReturnPortal",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ColliTable,
			Columns: []string{deliveryoption.ColliColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Colli",
	)
	graph.MustAddE(
		"return_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ReturnColliTable,
			Columns: []string{deliveryoption.ReturnColliColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"ReturnColli",
	)
	graph.MustAddE(
		"carrier_service",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.CarrierServiceTable,
			Columns: []string{deliveryoption.CarrierServiceColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"CarrierService",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionTable,
			Columns: []string{deliveryoption.ConnectionColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Connection",
	)
	graph.MustAddE(
		"connection_default",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoption.ConnectionDefaultTable,
			Columns: []string{deliveryoption.ConnectionDefaultColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Connection",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_group_one",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupOneTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
		},
		"DeliveryOption",
		"HypothesisTestDeliveryOption",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_group_two",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionGroupTwoTable,
			Columns: deliveryoption.HypothesisTestDeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOption",
		"HypothesisTestDeliveryOption",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_lookup",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{deliveryoption.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"HypothesisTestDeliveryOptionLookup",
	)
	graph.MustAddE(
		"click_collect_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoption.ClickCollectLocationTable,
			Columns: deliveryoption.ClickCollectLocationPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOption",
		"Location",
	)
	graph.MustAddE(
		"email_click_collect_at_store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.EmailClickCollectAtStoreTable,
			Columns: []string{deliveryoption.EmailClickCollectAtStoreColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"EmailTemplate",
	)
	graph.MustAddE(
		"consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   deliveryoption.ConsolidationTable,
			Columns: []string{deliveryoption.ConsolidationColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Consolidation",
	)
	graph.MustAddE(
		"default_packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoption.DefaultPackagingTable,
			Columns: []string{deliveryoption.DefaultPackagingColumn},
			Bidi:    false,
		},
		"DeliveryOption",
		"Packaging",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionbring.TenantTable,
			Columns: []string{deliveryoptionbring.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionBring",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionbring.DeliveryOptionTable,
			Columns: []string{deliveryoptionbring.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionBring",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_additional_service_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionbring.CarrierAdditionalServiceBringTable,
			Columns: deliveryoptionbring.CarrierAdditionalServiceBringPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionBring",
		"CarrierAdditionalServiceBring",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondao.TenantTable,
			Columns: []string{deliveryoptiondao.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionDAO",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondao.DeliveryOptionTable,
			Columns: []string{deliveryoptiondao.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionDAO",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_additional_service_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondao.CarrierAdditionalServiceDAOTable,
			Columns: deliveryoptiondao.CarrierAdditionalServiceDAOPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionDAO",
		"CarrierAdditionalServiceDAO",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondf.TenantTable,
			Columns: []string{deliveryoptiondf.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionDF",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondf.DeliveryOptionTable,
			Columns: []string{deliveryoptiondf.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionDF",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_additional_service_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondf.CarrierAdditionalServiceDFTable,
			Columns: deliveryoptiondf.CarrierAdditionalServiceDFPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionDF",
		"CarrierAdditionalServiceDF",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiondsv.TenantTable,
			Columns: []string{deliveryoptiondsv.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionDSV",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiondsv.DeliveryOptionTable,
			Columns: []string{deliveryoptiondsv.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionDSV",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_additional_service_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiondsv.CarrierAdditionalServiceDSVTable,
			Columns: deliveryoptiondsv.CarrierAdditionalServiceDSVPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionDSV",
		"CarrierAdditionalServiceDSV",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptioneasypost.TenantTable,
			Columns: []string{deliveryoptioneasypost.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionEasyPost",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptioneasypost.DeliveryOptionTable,
			Columns: []string{deliveryoptioneasypost.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionEasyPost",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_add_serv_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptioneasypost.CarrierAddServEasyPostTable,
			Columns: deliveryoptioneasypost.CarrierAddServEasyPostPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionEasyPost",
		"CarrierAdditionalServiceEasyPost",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptiongls.TenantTable,
			Columns: []string{deliveryoptiongls.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionGLS",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptiongls.DeliveryOptionTable,
			Columns: []string{deliveryoptiongls.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionGLS",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_additional_service_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptiongls.CarrierAdditionalServiceGLSTable,
			Columns: deliveryoptiongls.CarrierAdditionalServiceGLSPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionGLS",
		"CarrierAdditionalServiceGLS",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionpostnord.TenantTable,
			Columns: []string{deliveryoptionpostnord.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionPostNord",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionpostnord.DeliveryOptionTable,
			Columns: []string{deliveryoptionpostnord.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionPostNord",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_add_serv_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionpostnord.CarrierAddServPostNordTable,
			Columns: deliveryoptionpostnord.CarrierAddServPostNordPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionPostNord",
		"CarrierAdditionalServicePostNord",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryoptionusps.TenantTable,
			Columns: []string{deliveryoptionusps.TenantColumn},
			Bidi:    false,
		},
		"DeliveryOptionUSPS",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   deliveryoptionusps.DeliveryOptionTable,
			Columns: []string{deliveryoptionusps.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryOptionUSPS",
		"DeliveryOption",
	)
	graph.MustAddE(
		"carrier_additional_service_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   deliveryoptionusps.CarrierAdditionalServiceUSPSTable,
			Columns: deliveryoptionusps.CarrierAdditionalServiceUSPSPrimaryKey,
			Bidi:    false,
		},
		"DeliveryOptionUSPS",
		"CarrierAdditionalServiceUSPS",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.TenantTable,
			Columns: []string{deliveryrule.TenantColumn},
			Bidi:    false,
		},
		"DeliveryRule",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_rule_constraint_group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryrule.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryrule.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
		},
		"DeliveryRule",
		"DeliveryRuleConstraintGroup",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryrule.DeliveryOptionTable,
			Columns: []string{deliveryrule.DeliveryOptionColumn},
			Bidi:    false,
		},
		"DeliveryRule",
		"DeliveryOption",
	)
	graph.MustAddE(
		"country",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deliveryrule.CountryTable,
			Columns: deliveryrule.CountryPrimaryKey,
			Bidi:    false,
		},
		"DeliveryRule",
		"Country",
	)
	graph.MustAddE(
		"currency",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryrule.CurrencyTable,
			Columns: []string{deliveryrule.CurrencyColumn},
			Bidi:    false,
		},
		"DeliveryRule",
		"Currency",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraint.TenantTable,
			Columns: []string{deliveryruleconstraint.TenantColumn},
			Bidi:    false,
		},
		"DeliveryRuleConstraint",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_rule_constraint_group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraint.DeliveryRuleConstraintGroupTable,
			Columns: []string{deliveryruleconstraint.DeliveryRuleConstraintGroupColumn},
			Bidi:    false,
		},
		"DeliveryRuleConstraint",
		"DeliveryRuleConstraintGroup",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.TenantTable,
			Columns: []string{deliveryruleconstraintgroup.TenantColumn},
			Bidi:    false,
		},
		"DeliveryRuleConstraintGroup",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_rule_constraints",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deliveryruleconstraintgroup.DeliveryRuleConstraintsTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleConstraintsColumn},
			Bidi:    false,
		},
		"DeliveryRuleConstraintGroup",
		"DeliveryRuleConstraint",
	)
	graph.MustAddE(
		"delivery_rule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliveryruleconstraintgroup.DeliveryRuleTable,
			Columns: []string{deliveryruleconstraintgroup.DeliveryRuleColumn},
			Bidi:    false,
		},
		"DeliveryRuleConstraintGroup",
		"DeliveryRule",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.TenantTable,
			Columns: []string{document.TenantColumn},
			Bidi:    false,
		},
		"Document",
		"Tenant",
	)
	graph.MustAddE(
		"carrier_brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   document.CarrierBrandTable,
			Columns: []string{document.CarrierBrandColumn},
			Bidi:    false,
		},
		"Document",
		"CarrierBrand",
	)
	graph.MustAddE(
		"connection_packing_slip",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   document.ConnectionPackingSlipTable,
			Columns: []string{document.ConnectionPackingSlipColumn},
			Bidi:    false,
		},
		"Document",
		"Connection",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentfile.TenantTable,
			Columns: []string{documentfile.TenantColumn},
			Bidi:    false,
		},
		"DocumentFile",
		"Tenant",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   documentfile.ColliTable,
			Columns: []string{documentfile.ColliColumn},
			Bidi:    false,
		},
		"DocumentFile",
		"Colli",
	)
	graph.MustAddE(
		"shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   documentfile.ShipmentParcelTable,
			Columns: []string{documentfile.ShipmentParcelColumn},
			Bidi:    false,
		},
		"DocumentFile",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   emailtemplate.TenantTable,
			Columns: []string{emailtemplate.TenantColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"Tenant",
	)
	graph.MustAddE(
		"return_portal_confirmation_label",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationLabelTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationLabelColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"ReturnPortal",
	)
	graph.MustAddE(
		"return_portal_confirmation_qr_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalConfirmationQrCodeTable,
			Columns: []string{emailtemplate.ReturnPortalConfirmationQrCodeColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"ReturnPortal",
	)
	graph.MustAddE(
		"return_portal_received",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalReceivedTable,
			Columns: []string{emailtemplate.ReturnPortalReceivedColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"ReturnPortal",
	)
	graph.MustAddE(
		"return_portal_accepted",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.ReturnPortalAcceptedTable,
			Columns: []string{emailtemplate.ReturnPortalAcceptedColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"ReturnPortal",
	)
	graph.MustAddE(
		"delivery_option_click_collect_at_store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.DeliveryOptionClickCollectAtStoreTable,
			Columns: []string{emailtemplate.DeliveryOptionClickCollectAtStoreColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"DeliveryOption",
	)
	graph.MustAddE(
		"notifications",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   emailtemplate.NotificationsTable,
			Columns: []string{emailtemplate.NotificationsColumn},
			Bidi:    false,
		},
		"EmailTemplate",
		"Notification",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.TenantTable,
			Columns: []string{hypothesistest.TenantColumn},
			Bidi:    false,
		},
		"HypothesisTest",
		"Tenant",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
		},
		"HypothesisTest",
		"HypothesisTestDeliveryOption",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistest.ConnectionTable,
			Columns: []string{hypothesistest.ConnectionColumn},
			Bidi:    false,
		},
		"HypothesisTest",
		"Connection",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.TenantTable,
			Columns: []string{hypothesistestdeliveryoption.TenantColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOption",
		"Tenant",
	)
	graph.MustAddE(
		"hypothesis_test",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOption",
		"HypothesisTest",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_request",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOption",
		"HypothesisTestDeliveryOptionRequest",
	)
	graph.MustAddE(
		"delivery_option_group_one",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupOneTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey,
			Bidi:    false,
		},
		"HypothesisTestDeliveryOption",
		"DeliveryOption",
	)
	graph.MustAddE(
		"delivery_option_group_two",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable,
			Columns: hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey,
			Bidi:    false,
		},
		"HypothesisTestDeliveryOption",
		"DeliveryOption",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.TenantColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionLookup",
		"Tenant",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionlookup.DeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.DeliveryOptionColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionLookup",
		"DeliveryOption",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_request",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{hypothesistestdeliveryoptionlookup.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionLookup",
		"HypothesisTestDeliveryOptionRequest",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.TenantColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionRequest",
		"Tenant",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionRequest",
		"HypothesisTestDeliveryOption",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.OrderTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.OrderColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionRequest",
		"Order",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_lookup",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
		},
		"HypothesisTestDeliveryOptionRequest",
		"HypothesisTestDeliveryOptionLookup",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.TenantTable,
			Columns: []string{inventoryitem.TenantColumn},
			Bidi:    false,
		},
		"InventoryItem",
		"Tenant",
	)
	graph.MustAddE(
		"country_harmonized_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryitem.CountryHarmonizedCodeTable,
			Columns: []string{inventoryitem.CountryHarmonizedCodeColumn},
			Bidi:    false,
		},
		"InventoryItem",
		"CountryHarmonizedCode",
	)
	graph.MustAddE(
		"country_of_origin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inventoryitem.CountryOfOriginTable,
			Columns: []string{inventoryitem.CountryOfOriginColumn},
			Bidi:    false,
		},
		"InventoryItem",
		"Country",
	)
	graph.MustAddE(
		"product_variant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   inventoryitem.ProductVariantTable,
			Columns: []string{inventoryitem.ProductVariantColumn},
			Bidi:    false,
		},
		"InventoryItem",
		"ProductVariant",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.UsersTable,
			Columns: []string{language.UsersColumn},
			Bidi:    false,
		},
		"Language",
		"User",
	)
	graph.MustAddE(
		"language",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   language.LanguageTable,
			Columns: []string{language.LanguageColumn},
			Bidi:    false,
		},
		"Language",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.TenantTable,
			Columns: []string{location.TenantColumn},
			Bidi:    false,
		},
		"Location",
		"Tenant",
	)
	graph.MustAddE(
		"address",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   location.AddressTable,
			Columns: []string{location.AddressColumn},
			Bidi:    false,
		},
		"Location",
		"Address",
	)
	graph.MustAddE(
		"location_tags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   location.LocationTagsTable,
			Columns: location.LocationTagsPrimaryKey,
			Bidi:    false,
		},
		"Location",
		"LocationTag",
	)
	graph.MustAddE(
		"sender_connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SenderConnectionTable,
			Columns: []string{location.SenderConnectionColumn},
			Bidi:    false,
		},
		"Location",
		"Connection",
	)
	graph.MustAddE(
		"pickup_connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.PickupConnectionTable,
			Columns: []string{location.PickupConnectionColumn},
			Bidi:    false,
		},
		"Location",
		"Connection",
	)
	graph.MustAddE(
		"return_connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ReturnConnectionTable,
			Columns: []string{location.ReturnConnectionColumn},
			Bidi:    false,
		},
		"Location",
		"Connection",
	)
	graph.MustAddE(
		"seller_connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.SellerConnectionTable,
			Columns: []string{location.SellerConnectionColumn},
			Bidi:    false,
		},
		"Location",
		"Connection",
	)
	graph.MustAddE(
		"return_portal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.ReturnPortalTable,
			Columns: location.ReturnPortalPrimaryKey,
			Bidi:    false,
		},
		"Location",
		"ReturnPortal",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   location.DeliveryOptionTable,
			Columns: location.DeliveryOptionPrimaryKey,
			Bidi:    false,
		},
		"Location",
		"DeliveryOption",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   location.ColliTable,
			Columns: []string{location.ColliColumn},
			Bidi:    false,
		},
		"Location",
		"Colli",
	)
	graph.MustAddE(
		"location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   locationtag.LocationTable,
			Columns: locationtag.LocationPrimaryKey,
			Bidi:    false,
		},
		"LocationTag",
		"Location",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.TenantTable,
			Columns: []string{notification.TenantColumn},
			Bidi:    false,
		},
		"Notification",
		"Tenant",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.ConnectionTable,
			Columns: []string{notification.ConnectionColumn},
			Bidi:    false,
		},
		"Notification",
		"Connection",
	)
	graph.MustAddE(
		"email_template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   notification.EmailTemplateTable,
			Columns: []string{notification.EmailTemplateColumn},
			Bidi:    false,
		},
		"Notification",
		"EmailTemplate",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   otkrequests.TenantTable,
			Columns: []string{otkrequests.TenantColumn},
			Bidi:    false,
		},
		"OTKRequests",
		"Tenant",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   otkrequests.UsersTable,
			Columns: []string{otkrequests.UsersColumn},
			Bidi:    false,
		},
		"OTKRequests",
		"User",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.TenantTable,
			Columns: []string{order.TenantColumn},
			Bidi:    false,
		},
		"Order",
		"Tenant",
	)
	graph.MustAddE(
		"order_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderHistoryTable,
			Columns: []string{order.OrderHistoryColumn},
			Bidi:    false,
		},
		"Order",
		"OrderHistory",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConnectionTable,
			Columns: []string{order.ConnectionColumn},
			Bidi:    false,
		},
		"Order",
		"Connection",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ColliTable,
			Columns: []string{order.ColliColumn},
			Bidi:    false,
		},
		"Order",
		"Colli",
	)
	graph.MustAddE(
		"return_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ReturnColliTable,
			Columns: []string{order.ReturnColliColumn},
			Bidi:    false,
		},
		"Order",
		"ReturnColli",
	)
	graph.MustAddE(
		"hypothesis_test_delivery_option_request",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   order.HypothesisTestDeliveryOptionRequestTable,
			Columns: []string{order.HypothesisTestDeliveryOptionRequestColumn},
			Bidi:    false,
		},
		"Order",
		"HypothesisTestDeliveryOptionRequest",
	)
	graph.MustAddE(
		"pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PalletTable,
			Columns: []string{order.PalletColumn},
			Bidi:    false,
		},
		"Order",
		"Pallet",
	)
	graph.MustAddE(
		"consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ConsolidationTable,
			Columns: []string{order.ConsolidationColumn},
			Bidi:    false,
		},
		"Order",
		"Consolidation",
	)
	graph.MustAddE(
		"change_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.ChangeHistoryTable,
			Columns: []string{orderhistory.ChangeHistoryColumn},
			Bidi:    false,
		},
		"OrderHistory",
		"ChangeHistory",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderhistory.TenantTable,
			Columns: []string{orderhistory.TenantColumn},
			Bidi:    false,
		},
		"OrderHistory",
		"Tenant",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.OrderTable,
			Columns: []string{orderhistory.OrderColumn},
			Bidi:    false,
		},
		"OrderHistory",
		"Order",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.TenantTable,
			Columns: []string{orderline.TenantColumn},
			Bidi:    false,
		},
		"OrderLine",
		"Tenant",
	)
	graph.MustAddE(
		"product_variant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.ProductVariantTable,
			Columns: []string{orderline.ProductVariantColumn},
			Bidi:    false,
		},
		"OrderLine",
		"ProductVariant",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderline.ColliTable,
			Columns: []string{orderline.ColliColumn},
			Bidi:    false,
		},
		"OrderLine",
		"Colli",
	)
	graph.MustAddE(
		"return_order_line",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   orderline.ReturnOrderLineTable,
			Columns: []string{orderline.ReturnOrderLineColumn},
			Bidi:    false,
		},
		"OrderLine",
		"ReturnOrderLine",
	)
	graph.MustAddE(
		"currency",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orderline.CurrencyTable,
			Columns: []string{orderline.CurrencyColumn},
			Bidi:    false,
		},
		"OrderLine",
		"Currency",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ordersender.TenantTable,
			Columns: []string{ordersender.TenantColumn},
			Bidi:    false,
		},
		"OrderSender",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.TenantTable,
			Columns: []string{packaging.TenantColumn},
			Bidi:    false,
		},
		"Packaging",
		"Tenant",
	)
	graph.MustAddE(
		"shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ShipmentParcelTable,
			Columns: []string{packaging.ShipmentParcelColumn},
			Bidi:    false,
		},
		"Packaging",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.PalletTable,
			Columns: []string{packaging.PalletColumn},
			Bidi:    false,
		},
		"Packaging",
		"Pallet",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ColliTable,
			Columns: []string{packaging.ColliColumn},
			Bidi:    false,
		},
		"Packaging",
		"Colli",
	)
	graph.MustAddE(
		"return_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.ReturnColliTable,
			Columns: []string{packaging.ReturnColliColumn},
			Bidi:    false,
		},
		"Packaging",
		"ReturnColli",
	)
	graph.MustAddE(
		"packaging_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingDFTable,
			Columns: []string{packaging.PackagingDFColumn},
			Bidi:    false,
		},
		"Packaging",
		"PackagingDF",
	)
	graph.MustAddE(
		"packaging_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   packaging.PackagingUSPSTable,
			Columns: []string{packaging.PackagingUSPSColumn},
			Bidi:    false,
		},
		"Packaging",
		"PackagingUSPS",
	)
	graph.MustAddE(
		"carrier_brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packaging.CarrierBrandTable,
			Columns: []string{packaging.CarrierBrandColumn},
			Bidi:    false,
		},
		"Packaging",
		"CarrierBrand",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaging.DeliveryOptionTable,
			Columns: []string{packaging.DeliveryOptionColumn},
			Bidi:    false,
		},
		"Packaging",
		"DeliveryOption",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingdf.TenantTable,
			Columns: []string{packagingdf.TenantColumn},
			Bidi:    false,
		},
		"PackagingDF",
		"Tenant",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingdf.PackagingTable,
			Columns: []string{packagingdf.PackagingColumn},
			Bidi:    false,
		},
		"PackagingDF",
		"Packaging",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.TenantTable,
			Columns: []string{packagingusps.TenantColumn},
			Bidi:    false,
		},
		"PackagingUSPS",
		"Tenant",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   packagingusps.PackagingTable,
			Columns: []string{packagingusps.PackagingColumn},
			Bidi:    false,
		},
		"PackagingUSPS",
		"Packaging",
	)
	graph.MustAddE(
		"packaging_usps_rate_indicator",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSRateIndicatorTable,
			Columns: []string{packagingusps.PackagingUSPSRateIndicatorColumn},
			Bidi:    false,
		},
		"PackagingUSPS",
		"PackagingUSPSRateIndicator",
	)
	graph.MustAddE(
		"packaging_usps_processing_category",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   packagingusps.PackagingUSPSProcessingCategoryTable,
			Columns: []string{packagingusps.PackagingUSPSProcessingCategoryColumn},
			Bidi:    false,
		},
		"PackagingUSPS",
		"PackagingUSPSProcessingCategory",
	)
	graph.MustAddE(
		"packaging_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   packaginguspsrateindicator.PackagingUSPSTable,
			Columns: []string{packaginguspsrateindicator.PackagingUSPSColumn},
			Bidi:    false,
		},
		"PackagingUSPSRateIndicator",
		"PackagingUSPS",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.TenantTable,
			Columns: []string{pallet.TenantColumn},
			Bidi:    false,
		},
		"Pallet",
		"Tenant",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   pallet.OrdersTable,
			Columns: []string{pallet.OrdersColumn},
			Bidi:    false,
		},
		"Pallet",
		"Order",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pallet.PackagingTable,
			Columns: []string{pallet.PackagingColumn},
			Bidi:    false,
		},
		"Pallet",
		"Packaging",
	)
	graph.MustAddE(
		"consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pallet.ConsolidationTable,
			Columns: []string{pallet.ConsolidationColumn},
			Bidi:    false,
		},
		"Pallet",
		"Consolidation",
	)
	graph.MustAddE(
		"shipment_pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   pallet.ShipmentPalletTable,
			Columns: []string{pallet.ShipmentPalletColumn},
			Bidi:    false,
		},
		"Pallet",
		"ShipmentPallet",
	)
	graph.MustAddE(
		"cancelled_shipment_pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   pallet.CancelledShipmentPalletTable,
			Columns: pallet.CancelledShipmentPalletPrimaryKey,
			Bidi:    false,
		},
		"Pallet",
		"ShipmentPallet",
	)
	graph.MustAddE(
		"parcel_shop_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopDAOTable,
			Columns: []string{parcelshop.ParcelShopDAOColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"ParcelShopDAO",
	)
	graph.MustAddE(
		"parcel_shop_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopPostNordTable,
			Columns: []string{parcelshop.ParcelShopPostNordColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"ParcelShopPostNord",
	)
	graph.MustAddE(
		"parcel_shop_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopGLSTable,
			Columns: []string{parcelshop.ParcelShopGLSColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"ParcelShopGLS",
	)
	graph.MustAddE(
		"parcel_shop_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.ParcelShopBringTable,
			Columns: []string{parcelshop.ParcelShopBringColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"ParcelShopBring",
	)
	graph.MustAddE(
		"carrier_brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   parcelshop.CarrierBrandTable,
			Columns: []string{parcelshop.CarrierBrandColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"CarrierBrand",
	)
	graph.MustAddE(
		"address",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshop.AddressTable,
			Columns: []string{parcelshop.AddressColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"AddressGlobal",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   parcelshop.ColliTable,
			Columns: []string{parcelshop.ColliColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"Colli",
	)
	graph.MustAddE(
		"business_hours_period",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   parcelshop.BusinessHoursPeriodTable,
			Columns: []string{parcelshop.BusinessHoursPeriodColumn},
			Bidi:    false,
		},
		"ParcelShop",
		"BusinessHoursPeriod",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopbring.ParcelShopTable,
			Columns: []string{parcelshopbring.ParcelShopColumn},
			Bidi:    false,
		},
		"ParcelShopBring",
		"ParcelShop",
	)
	graph.MustAddE(
		"address_delivery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshopbring.AddressDeliveryTable,
			Columns: []string{parcelshopbring.AddressDeliveryColumn},
			Bidi:    false,
		},
		"ParcelShopBring",
		"AddressGlobal",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopdao.ParcelShopTable,
			Columns: []string{parcelshopdao.ParcelShopColumn},
			Bidi:    false,
		},
		"ParcelShopDAO",
		"ParcelShop",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshopgls.ParcelShopTable,
			Columns: []string{parcelshopgls.ParcelShopColumn},
			Bidi:    false,
		},
		"ParcelShopGLS",
		"ParcelShop",
	)
	graph.MustAddE(
		"parcel_shop",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshoppostnord.ParcelShopTable,
			Columns: []string{parcelshoppostnord.ParcelShopColumn},
			Bidi:    false,
		},
		"ParcelShopPostNord",
		"ParcelShop",
	)
	graph.MustAddE(
		"address_delivery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshoppostnord.AddressDeliveryTable,
			Columns: []string{parcelshoppostnord.AddressDeliveryColumn},
			Bidi:    false,
		},
		"ParcelShopPostNord",
		"AddressGlobal",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.TenantTable,
			Columns: []string{plan.TenantColumn},
			Bidi:    false,
		},
		"Plan",
		"Tenant",
	)
	graph.MustAddE(
		"plan_history_plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.PlanHistoryPlanTable,
			Columns: []string{plan.PlanHistoryPlanColumn},
			Bidi:    false,
		},
		"Plan",
		"PlanHistory",
	)
	graph.MustAddE(
		"change_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangeHistoryTable,
			Columns: []string{planhistory.ChangeHistoryColumn},
			Bidi:    false,
		},
		"PlanHistory",
		"ChangeHistory",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planhistory.TenantTable,
			Columns: []string{planhistory.TenantColumn},
			Bidi:    false,
		},
		"PlanHistory",
		"Tenant",
	)
	graph.MustAddE(
		"changed_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedByTable,
			Columns: []string{planhistory.ChangedByColumn},
			Bidi:    false,
		},
		"PlanHistory",
		"User",
	)
	graph.MustAddE(
		"changed_from",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   planhistory.ChangedFromTable,
			Columns: []string{planhistory.ChangedFromColumn},
			Bidi:    false,
		},
		"PlanHistory",
		"Plan",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.TenantTable,
			Columns: []string{printjob.TenantColumn},
			Bidi:    false,
		},
		"PrintJob",
		"Tenant",
	)
	graph.MustAddE(
		"printer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.PrinterTable,
			Columns: []string{printjob.PrinterColumn},
			Bidi:    false,
		},
		"PrintJob",
		"Printer",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.ColliTable,
			Columns: []string{printjob.ColliColumn},
			Bidi:    false,
		},
		"PrintJob",
		"Colli",
	)
	graph.MustAddE(
		"shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printjob.ShipmentParcelTable,
			Columns: []string{printjob.ShipmentParcelColumn},
			Bidi:    false,
		},
		"PrintJob",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   printer.TenantTable,
			Columns: []string{printer.TenantColumn},
			Bidi:    false,
		},
		"Printer",
		"Tenant",
	)
	graph.MustAddE(
		"workstation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   printer.WorkstationTable,
			Columns: []string{printer.WorkstationColumn},
			Bidi:    false,
		},
		"Printer",
		"Workstation",
	)
	graph.MustAddE(
		"print_jobs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   printer.PrintJobsTable,
			Columns: []string{printer.PrintJobsColumn},
			Bidi:    false,
		},
		"Printer",
		"PrintJob",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   product.TenantTable,
			Columns: []string{product.TenantColumn},
			Bidi:    false,
		},
		"Product",
		"Tenant",
	)
	graph.MustAddE(
		"product_tags",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   product.ProductTagsTable,
			Columns: product.ProductTagsPrimaryKey,
			Bidi:    false,
		},
		"Product",
		"ProductTag",
	)
	graph.MustAddE(
		"product_variant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductVariantTable,
			Columns: []string{product.ProductVariantColumn},
			Bidi:    false,
		},
		"Product",
		"ProductVariant",
	)
	graph.MustAddE(
		"product_image",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   product.ProductImageTable,
			Columns: []string{product.ProductImageColumn},
			Bidi:    false,
		},
		"Product",
		"ProductImage",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.TenantTable,
			Columns: []string{productimage.TenantColumn},
			Bidi:    false,
		},
		"ProductImage",
		"Tenant",
	)
	graph.MustAddE(
		"product",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productimage.ProductTable,
			Columns: []string{productimage.ProductColumn},
			Bidi:    false,
		},
		"ProductImage",
		"Product",
	)
	graph.MustAddE(
		"product_variant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   productimage.ProductVariantTable,
			Columns: productimage.ProductVariantPrimaryKey,
			Bidi:    false,
		},
		"ProductImage",
		"ProductVariant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   producttag.TenantTable,
			Columns: []string{producttag.TenantColumn},
			Bidi:    false,
		},
		"ProductTag",
		"Tenant",
	)
	graph.MustAddE(
		"products",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   producttag.ProductsTable,
			Columns: producttag.ProductsPrimaryKey,
			Bidi:    false,
		},
		"ProductTag",
		"Product",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   productvariant.TenantTable,
			Columns: []string{productvariant.TenantColumn},
			Bidi:    false,
		},
		"ProductVariant",
		"Tenant",
	)
	graph.MustAddE(
		"product",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productvariant.ProductTable,
			Columns: []string{productvariant.ProductColumn},
			Bidi:    false,
		},
		"ProductVariant",
		"Product",
	)
	graph.MustAddE(
		"order_lines",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   productvariant.OrderLinesTable,
			Columns: []string{productvariant.OrderLinesColumn},
			Bidi:    false,
		},
		"ProductVariant",
		"OrderLine",
	)
	graph.MustAddE(
		"product_image",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   productvariant.ProductImageTable,
			Columns: productvariant.ProductImagePrimaryKey,
			Bidi:    false,
		},
		"ProductVariant",
		"ProductImage",
	)
	graph.MustAddE(
		"inventory_item",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   productvariant.InventoryItemTable,
			Columns: []string{productvariant.InventoryItemColumn},
			Bidi:    false,
		},
		"ProductVariant",
		"InventoryItem",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.TenantTable,
			Columns: []string{returncolli.TenantColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"Tenant",
	)
	graph.MustAddE(
		"recipient",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.RecipientTable,
			Columns: []string{returncolli.RecipientColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"Address",
	)
	graph.MustAddE(
		"sender",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.SenderTable,
			Columns: []string{returncolli.SenderColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"Address",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncolli.OrderTable,
			Columns: []string{returncolli.OrderColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"Order",
	)
	graph.MustAddE(
		"delivery_option",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.DeliveryOptionTable,
			Columns: []string{returncolli.DeliveryOptionColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"DeliveryOption",
	)
	graph.MustAddE(
		"return_portal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.ReturnPortalTable,
			Columns: []string{returncolli.ReturnPortalColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"ReturnPortal",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncolli.PackagingTable,
			Columns: []string{returncolli.PackagingColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"Packaging",
	)
	graph.MustAddE(
		"return_order_line",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnOrderLineTable,
			Columns: []string{returncolli.ReturnOrderLineColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"ReturnOrderLine",
	)
	graph.MustAddE(
		"return_colli_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returncolli.ReturnColliHistoryTable,
			Columns: []string{returncolli.ReturnColliHistoryColumn},
			Bidi:    false,
		},
		"ReturnColli",
		"ReturnColliHistory",
	)
	graph.MustAddE(
		"change_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ChangeHistoryTable,
			Columns: []string{returncollihistory.ChangeHistoryColumn},
			Bidi:    false,
		},
		"ReturnColliHistory",
		"ChangeHistory",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returncollihistory.TenantTable,
			Columns: []string{returncollihistory.TenantColumn},
			Bidi:    false,
		},
		"ReturnColliHistory",
		"Tenant",
	)
	graph.MustAddE(
		"return_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returncollihistory.ReturnColliTable,
			Columns: []string{returncollihistory.ReturnColliColumn},
			Bidi:    false,
		},
		"ReturnColliHistory",
		"ReturnColli",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.TenantTable,
			Columns: []string{returnorderline.TenantColumn},
			Bidi:    false,
		},
		"ReturnOrderLine",
		"Tenant",
	)
	graph.MustAddE(
		"return_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnorderline.ReturnColliTable,
			Columns: []string{returnorderline.ReturnColliColumn},
			Bidi:    false,
		},
		"ReturnOrderLine",
		"ReturnColli",
	)
	graph.MustAddE(
		"order_line",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.OrderLineTable,
			Columns: []string{returnorderline.OrderLineColumn},
			Bidi:    false,
		},
		"ReturnOrderLine",
		"OrderLine",
	)
	graph.MustAddE(
		"return_portal_claim",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnorderline.ReturnPortalClaimTable,
			Columns: []string{returnorderline.ReturnPortalClaimColumn},
			Bidi:    false,
		},
		"ReturnOrderLine",
		"ReturnPortalClaim",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.TenantTable,
			Columns: []string{returnportal.TenantColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"Tenant",
	)
	graph.MustAddE(
		"return_portal_claim",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   returnportal.ReturnPortalClaimTable,
			Columns: []string{returnportal.ReturnPortalClaimColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"ReturnPortalClaim",
	)
	graph.MustAddE(
		"return_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.ReturnLocationTable,
			Columns: returnportal.ReturnLocationPrimaryKey,
			Bidi:    false,
		},
		"ReturnPortal",
		"Location",
	)
	graph.MustAddE(
		"delivery_options",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   returnportal.DeliveryOptionsTable,
			Columns: returnportal.DeliveryOptionsPrimaryKey,
			Bidi:    false,
		},
		"ReturnPortal",
		"DeliveryOption",
	)
	graph.MustAddE(
		"connection",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   returnportal.ConnectionTable,
			Columns: []string{returnportal.ConnectionColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"Connection",
	)
	graph.MustAddE(
		"email_confirmation_label",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationLabelTable,
			Columns: []string{returnportal.EmailConfirmationLabelColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"EmailTemplate",
	)
	graph.MustAddE(
		"email_confirmation_qr_code",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailConfirmationQrCodeTable,
			Columns: []string{returnportal.EmailConfirmationQrCodeColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"EmailTemplate",
	)
	graph.MustAddE(
		"email_received",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailReceivedTable,
			Columns: []string{returnportal.EmailReceivedColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"EmailTemplate",
	)
	graph.MustAddE(
		"email_accepted",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportal.EmailAcceptedTable,
			Columns: []string{returnportal.EmailAcceptedColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"EmailTemplate",
	)
	graph.MustAddE(
		"return_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportal.ReturnColliTable,
			Columns: []string{returnportal.ReturnColliColumn},
			Bidi:    false,
		},
		"ReturnPortal",
		"ReturnColli",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.TenantTable,
			Columns: []string{returnportalclaim.TenantColumn},
			Bidi:    false,
		},
		"ReturnPortalClaim",
		"Tenant",
	)
	graph.MustAddE(
		"return_portal",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   returnportalclaim.ReturnPortalTable,
			Columns: []string{returnportalclaim.ReturnPortalColumn},
			Bidi:    false,
		},
		"ReturnPortalClaim",
		"ReturnPortal",
	)
	graph.MustAddE(
		"return_location",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   returnportalclaim.ReturnLocationTable,
			Columns: []string{returnportalclaim.ReturnLocationColumn},
			Bidi:    false,
		},
		"ReturnPortalClaim",
		"Location",
	)
	graph.MustAddE(
		"return_order_line",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   returnportalclaim.ReturnOrderLineTable,
			Columns: []string{returnportalclaim.ReturnOrderLineColumn},
			Bidi:    false,
		},
		"ReturnPortalClaim",
		"ReturnOrderLine",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroup.TenantTable,
			Columns: []string{seatgroup.TenantColumn},
			Bidi:    false,
		},
		"SeatGroup",
		"Tenant",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   seatgroup.UserTable,
			Columns: []string{seatgroup.UserColumn},
			Bidi:    false,
		},
		"SeatGroup",
		"User",
	)
	graph.MustAddE(
		"assigned_access_right",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   seatgroup.AssignedAccessRightTable,
			Columns: seatgroup.AssignedAccessRightPrimaryKey,
			Bidi:    false,
		},
		"SeatGroup",
		"AccessRight",
	)
	graph.MustAddE(
		"seat_group_access_right",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   seatgroup.SeatGroupAccessRightTable,
			Columns: []string{seatgroup.SeatGroupAccessRightColumn},
			Bidi:    false,
		},
		"SeatGroup",
		"SeatGroupAccessRight",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.TenantTable,
			Columns: []string{seatgroupaccessright.TenantColumn},
			Bidi:    false,
		},
		"SeatGroupAccessRight",
		"Tenant",
	)
	graph.MustAddE(
		"access_right",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.AccessRightTable,
			Columns: []string{seatgroupaccessright.AccessRightColumn},
			Bidi:    false,
		},
		"SeatGroupAccessRight",
		"AccessRight",
	)
	graph.MustAddE(
		"seat_group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   seatgroupaccessright.SeatGroupTable,
			Columns: []string{seatgroupaccessright.SeatGroupColumn},
			Bidi:    false,
		},
		"SeatGroupAccessRight",
		"SeatGroup",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.TenantTable,
			Columns: []string{shipment.TenantColumn},
			Bidi:    false,
		},
		"Shipment",
		"Tenant",
	)
	graph.MustAddE(
		"carrier",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipment.CarrierTable,
			Columns: []string{shipment.CarrierColumn},
			Bidi:    false,
		},
		"Shipment",
		"Carrier",
	)
	graph.MustAddE(
		"shipment_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentHistoryTable,
			Columns: []string{shipment.ShipmentHistoryColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentHistory",
	)
	graph.MustAddE(
		"shipment_bring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentBringTable,
			Columns: []string{shipment.ShipmentBringColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentBring",
	)
	graph.MustAddE(
		"shipment_dao",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDAOTable,
			Columns: []string{shipment.ShipmentDAOColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentDAO",
	)
	graph.MustAddE(
		"shipment_df",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDFTable,
			Columns: []string{shipment.ShipmentDFColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentDF",
	)
	graph.MustAddE(
		"shipment_dsv",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentDSVTable,
			Columns: []string{shipment.ShipmentDSVColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentDSV",
	)
	graph.MustAddE(
		"shipment_easy_post",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentEasyPostTable,
			Columns: []string{shipment.ShipmentEasyPostColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentEasyPost",
	)
	graph.MustAddE(
		"shipment_post_nord",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentPostNordTable,
			Columns: []string{shipment.ShipmentPostNordColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentPostNord",
	)
	graph.MustAddE(
		"shipment_gls",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentGLSTable,
			Columns: []string{shipment.ShipmentGLSColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentGLS",
	)
	graph.MustAddE(
		"shipment_usps",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ShipmentUSPSTable,
			Columns: []string{shipment.ShipmentUSPSColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentUSPS",
	)
	graph.MustAddE(
		"consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipment.ConsolidationTable,
			Columns: []string{shipment.ConsolidationColumn},
			Bidi:    false,
		},
		"Shipment",
		"Consolidation",
	)
	graph.MustAddE(
		"old_consolidation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   shipment.OldConsolidationTable,
			Columns: shipment.OldConsolidationPrimaryKey,
			Bidi:    false,
		},
		"Shipment",
		"Consolidation",
	)
	graph.MustAddE(
		"shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentParcelTable,
			Columns: []string{shipment.ShipmentParcelColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"shipment_pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shipment.ShipmentPalletTable,
			Columns: []string{shipment.ShipmentPalletColumn},
			Bidi:    false,
		},
		"Shipment",
		"ShipmentPallet",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentbring.TenantTable,
			Columns: []string{shipmentbring.TenantColumn},
			Bidi:    false,
		},
		"ShipmentBring",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentbring.ShipmentTable,
			Columns: []string{shipmentbring.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentBring",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdao.TenantTable,
			Columns: []string{shipmentdao.TenantColumn},
			Bidi:    false,
		},
		"ShipmentDAO",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdao.ShipmentTable,
			Columns: []string{shipmentdao.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentDAO",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdf.TenantTable,
			Columns: []string{shipmentdf.TenantColumn},
			Bidi:    false,
		},
		"ShipmentDF",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdf.ShipmentTable,
			Columns: []string{shipmentdf.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentDF",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentdsv.TenantTable,
			Columns: []string{shipmentdsv.TenantColumn},
			Bidi:    false,
		},
		"ShipmentDSV",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentdsv.ShipmentTable,
			Columns: []string{shipmentdsv.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentDSV",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenteasypost.TenantTable,
			Columns: []string{shipmenteasypost.TenantColumn},
			Bidi:    false,
		},
		"ShipmentEasyPost",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmenteasypost.ShipmentTable,
			Columns: []string{shipmenteasypost.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentEasyPost",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentgls.TenantTable,
			Columns: []string{shipmentgls.TenantColumn},
			Bidi:    false,
		},
		"ShipmentGLS",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentgls.ShipmentTable,
			Columns: []string{shipmentgls.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentGLS",
		"Shipment",
	)
	graph.MustAddE(
		"change_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenthistory.ChangeHistoryTable,
			Columns: []string{shipmenthistory.ChangeHistoryColumn},
			Bidi:    false,
		},
		"ShipmentHistory",
		"ChangeHistory",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmenthistory.TenantTable,
			Columns: []string{shipmenthistory.TenantColumn},
			Bidi:    false,
		},
		"ShipmentHistory",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmenthistory.ShipmentTable,
			Columns: []string{shipmenthistory.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentHistory",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpallet.TenantTable,
			Columns: []string{shipmentpallet.TenantColumn},
			Bidi:    false,
		},
		"ShipmentPallet",
		"Tenant",
	)
	graph.MustAddE(
		"pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpallet.PalletTable,
			Columns: []string{shipmentpallet.PalletColumn},
			Bidi:    false,
		},
		"ShipmentPallet",
		"Pallet",
	)
	graph.MustAddE(
		"old_pallet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentpallet.OldPalletTable,
			Columns: shipmentpallet.OldPalletPrimaryKey,
			Bidi:    false,
		},
		"ShipmentPallet",
		"Pallet",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentpallet.ShipmentTable,
			Columns: []string{shipmentpallet.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentPallet",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.TenantTable,
			Columns: []string{shipmentparcel.TenantColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shipmentparcel.ShipmentTable,
			Columns: []string{shipmentparcel.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"Shipment",
	)
	graph.MustAddE(
		"colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentparcel.ColliTable,
			Columns: []string{shipmentparcel.ColliColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"Colli",
	)
	graph.MustAddE(
		"old_colli",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   shipmentparcel.OldColliTable,
			Columns: shipmentparcel.OldColliPrimaryKey,
			Bidi:    false,
		},
		"ShipmentParcel",
		"Colli",
	)
	graph.MustAddE(
		"workspace_recent_scan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.WorkspaceRecentScanTable,
			Columns: []string{shipmentparcel.WorkspaceRecentScanColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"WorkspaceRecentScan",
	)
	graph.MustAddE(
		"packaging",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentparcel.PackagingTable,
			Columns: []string{shipmentparcel.PackagingColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"Packaging",
	)
	graph.MustAddE(
		"print_job",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   shipmentparcel.PrintJobTable,
			Columns: []string{shipmentparcel.PrintJobColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"PrintJob",
	)
	graph.MustAddE(
		"document_file",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   shipmentparcel.DocumentFileTable,
			Columns: []string{shipmentparcel.DocumentFileColumn},
			Bidi:    false,
		},
		"ShipmentParcel",
		"DocumentFile",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentpostnord.TenantTable,
			Columns: []string{shipmentpostnord.TenantColumn},
			Bidi:    false,
		},
		"ShipmentPostNord",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentpostnord.ShipmentTable,
			Columns: []string{shipmentpostnord.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentPostNord",
		"Shipment",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   shipmentusps.TenantTable,
			Columns: []string{shipmentusps.TenantColumn},
			Bidi:    false,
		},
		"ShipmentUSPS",
		"Tenant",
	)
	graph.MustAddE(
		"shipment",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   shipmentusps.ShipmentTable,
			Columns: []string{shipmentusps.ShipmentColumn},
			Bidi:    false,
		},
		"ShipmentUSPS",
		"Shipment",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   signupoptions.UsersTable,
			Columns: []string{signupoptions.UsersColumn},
			Bidi:    false,
		},
		"SignupOptions",
		"User",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systemevents.TenantTable,
			Columns: []string{systemevents.TenantColumn},
			Bidi:    false,
		},
		"SystemEvents",
		"Tenant",
	)
	graph.MustAddE(
		"connect_option_carriers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionCarriersTable,
			Columns: tenant.ConnectOptionCarriersPrimaryKey,
			Bidi:    false,
		},
		"Tenant",
		"ConnectOptionCarrier",
	)
	graph.MustAddE(
		"connect_option_platforms",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tenant.ConnectOptionPlatformsTable,
			Columns: tenant.ConnectOptionPlatformsPrimaryKey,
			Bidi:    false,
		},
		"Tenant",
		"ConnectOptionPlatform",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tenant.PlanTable,
			Columns: []string{tenant.PlanColumn},
			Bidi:    false,
		},
		"Tenant",
		"Plan",
	)
	graph.MustAddE(
		"company_address",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.CompanyAddressTable,
			Columns: []string{tenant.CompanyAddressColumn},
			Bidi:    false,
		},
		"Tenant",
		"Address",
	)
	graph.MustAddE(
		"default_language",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.DefaultLanguageTable,
			Columns: []string{tenant.DefaultLanguageColumn},
			Bidi:    false,
		},
		"Tenant",
		"Language",
	)
	graph.MustAddE(
		"billing_contact",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.BillingContactTable,
			Columns: []string{tenant.BillingContactColumn},
			Bidi:    false,
		},
		"Tenant",
		"Contact",
	)
	graph.MustAddE(
		"admin_contact",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tenant.AdminContactTable,
			Columns: []string{tenant.AdminContactColumn},
			Bidi:    false,
		},
		"Tenant",
		"Contact",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.TenantTable,
			Columns: []string{user.TenantColumn},
			Bidi:    false,
		},
		"User",
		"Tenant",
	)
	graph.MustAddE(
		"otk_requests",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OtkRequestsTable,
			Columns: []string{user.OtkRequestsColumn},
			Bidi:    false,
		},
		"User",
		"OTKRequests",
	)
	graph.MustAddE(
		"signup_options",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SignupOptionsTable,
			Columns: []string{user.SignupOptionsColumn},
			Bidi:    false,
		},
		"User",
		"SignupOptions",
	)
	graph.MustAddE(
		"language",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.LanguageTable,
			Columns: []string{user.LanguageColumn},
			Bidi:    false,
		},
		"User",
		"Language",
	)
	graph.MustAddE(
		"change_history",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ChangeHistoryTable,
			Columns: []string{user.ChangeHistoryColumn},
			Bidi:    false,
		},
		"User",
		"ChangeHistory",
	)
	graph.MustAddE(
		"plan_history_user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PlanHistoryUserTable,
			Columns: []string{user.PlanHistoryUserColumn},
			Bidi:    false,
		},
		"User",
		"PlanHistory",
	)
	graph.MustAddE(
		"api_token",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokenTable,
			Columns: []string{user.APITokenColumn},
			Bidi:    false,
		},
		"User",
		"APIToken",
	)
	graph.MustAddE(
		"selected_workstation",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SelectedWorkstationTable,
			Columns: []string{user.SelectedWorkstationColumn},
			Bidi:    false,
		},
		"User",
		"Workstation",
	)
	graph.MustAddE(
		"seat_group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.SeatGroupTable,
			Columns: []string{user.SeatGroupColumn},
			Bidi:    false,
		},
		"User",
		"SeatGroup",
	)
	graph.MustAddE(
		"workspace_recent_scan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceRecentScanTable,
			Columns: []string{user.WorkspaceRecentScanColumn},
			Bidi:    false,
		},
		"User",
		"WorkspaceRecentScan",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userseat.TenantTable,
			Columns: []string{userseat.TenantColumn},
			Bidi:    false,
		},
		"UserSeat",
		"Tenant",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.TenantTable,
			Columns: []string{workspacerecentscan.TenantColumn},
			Bidi:    false,
		},
		"WorkspaceRecentScan",
		"Tenant",
	)
	graph.MustAddE(
		"shipment_parcel",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.ShipmentParcelTable,
			Columns: []string{workspacerecentscan.ShipmentParcelColumn},
			Bidi:    false,
		},
		"WorkspaceRecentScan",
		"ShipmentParcel",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspacerecentscan.UserTable,
			Columns: []string{workspacerecentscan.UserColumn},
			Bidi:    false,
		},
		"WorkspaceRecentScan",
		"User",
	)
	graph.MustAddE(
		"tenant",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.TenantTable,
			Columns: []string{workstation.TenantColumn},
			Bidi:    false,
		},
		"Workstation",
		"Tenant",
	)
	graph.MustAddE(
		"printer",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workstation.PrinterTable,
			Columns: []string{workstation.PrinterColumn},
			Bidi:    false,
		},
		"Workstation",
		"Printer",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workstation.UserTable,
			Columns: []string{workstation.UserColumn},
			Bidi:    false,
		},
		"Workstation",
		"User",
	)
	graph.MustAddE(
		"selected_user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   workstation.SelectedUserTable,
			Columns: []string{workstation.SelectedUserColumn},
			Bidi:    false,
		},
		"Workstation",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (atq *APITokenQuery) addPredicate(pred func(s *sql.Selector)) {
	atq.predicates = append(atq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the APITokenQuery builder.
func (atq *APITokenQuery) Filter() *APITokenFilter {
	return &APITokenFilter{config: atq.config, predicateAdder: atq}
}

// addPredicate implements the predicateAdder interface.
func (m *APITokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the APITokenMutation builder.
func (m *APITokenMutation) Filter() *APITokenFilter {
	return &APITokenFilter{config: m.config, predicateAdder: m}
}

// APITokenFilter provides a generic filtering capability at runtime for APITokenQuery.
type APITokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *APITokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *APITokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *APITokenFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *APITokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldName))
}

// WhereHashedToken applies the entql string predicate on the hashed_token field.
func (f *APITokenFilter) WhereHashedToken(p entql.StringP) {
	f.Where(p.Field(apitoken.FieldHashedToken))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *APITokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldCreatedAt))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *APITokenFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(apitoken.FieldLastUsed))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *APITokenFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *APITokenFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *APITokenFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *APITokenFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (arq *AccessRightQuery) addPredicate(pred func(s *sql.Selector)) {
	arq.predicates = append(arq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccessRightQuery builder.
func (arq *AccessRightQuery) Filter() *AccessRightFilter {
	return &AccessRightFilter{config: arq.config, predicateAdder: arq}
}

// addPredicate implements the predicateAdder interface.
func (m *AccessRightMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccessRightMutation builder.
func (m *AccessRightMutation) Filter() *AccessRightFilter {
	return &AccessRightFilter{config: m.config, predicateAdder: m}
}

// AccessRightFilter provides a generic filtering capability at runtime for AccessRightQuery.
type AccessRightFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AccessRightFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AccessRightFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(accessright.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *AccessRightFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(accessright.FieldLabel))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *AccessRightFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(accessright.FieldInternalID))
}

// WhereHasAssignedAccessRight applies a predicate to check if query has an edge assigned_access_right.
func (f *AccessRightFilter) WhereHasAssignedAccessRight() {
	f.Where(entql.HasEdge("assigned_access_right"))
}

// WhereHasAssignedAccessRightWith applies a predicate to check if query has an edge assigned_access_right with a given conditions (other predicates).
func (f *AccessRightFilter) WhereHasAssignedAccessRightWith(preds ...predicate.SeatGroup) {
	f.Where(entql.HasEdgeWith("assigned_access_right", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeatGroupAccessRight applies a predicate to check if query has an edge seat_group_access_right.
func (f *AccessRightFilter) WhereHasSeatGroupAccessRight() {
	f.Where(entql.HasEdge("seat_group_access_right"))
}

// WhereHasSeatGroupAccessRightWith applies a predicate to check if query has an edge seat_group_access_right with a given conditions (other predicates).
func (f *AccessRightFilter) WhereHasSeatGroupAccessRightWith(preds ...predicate.SeatGroupAccessRight) {
	f.Where(entql.HasEdgeWith("seat_group_access_right", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AddressQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AddressQuery builder.
func (aq *AddressQuery) Filter() *AddressFilter {
	return &AddressFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AddressMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AddressMutation builder.
func (m *AddressMutation) Filter() *AddressFilter {
	return &AddressFilter{config: m.config, predicateAdder: m}
}

// AddressFilter provides a generic filtering capability at runtime for AddressQuery.
type AddressFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AddressFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AddressFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(address.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *AddressFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(address.FieldTenantID))
}

// WhereUniquenessID applies the entql string predicate on the uniqueness_id field.
func (f *AddressFilter) WhereUniquenessID(p entql.StringP) {
	f.Where(p.Field(address.FieldUniquenessID))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *AddressFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(address.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *AddressFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(address.FieldLastName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *AddressFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(address.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *AddressFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(address.FieldPhoneNumber))
}

// WherePhoneNumber2 applies the entql string predicate on the phone_number_2 field.
func (f *AddressFilter) WherePhoneNumber2(p entql.StringP) {
	f.Where(p.Field(address.FieldPhoneNumber2))
}

// WhereVatNumber applies the entql string predicate on the vat_number field.
func (f *AddressFilter) WhereVatNumber(p entql.StringP) {
	f.Where(p.Field(address.FieldVatNumber))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *AddressFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(address.FieldCompany))
}

// WhereAddressOne applies the entql string predicate on the address_one field.
func (f *AddressFilter) WhereAddressOne(p entql.StringP) {
	f.Where(p.Field(address.FieldAddressOne))
}

// WhereAddressTwo applies the entql string predicate on the address_two field.
func (f *AddressFilter) WhereAddressTwo(p entql.StringP) {
	f.Where(p.Field(address.FieldAddressTwo))
}

// WhereCity applies the entql string predicate on the city field.
func (f *AddressFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(address.FieldCity))
}

// WhereState applies the entql string predicate on the state field.
func (f *AddressFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(address.FieldState))
}

// WhereZip applies the entql string predicate on the zip field.
func (f *AddressFilter) WhereZip(p entql.StringP) {
	f.Where(p.Field(address.FieldZip))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *AddressFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *AddressFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRecipientColli applies a predicate to check if query has an edge recipient_colli.
func (f *AddressFilter) WhereHasRecipientColli() {
	f.Where(entql.HasEdge("recipient_colli"))
}

// WhereHasRecipientColliWith applies a predicate to check if query has an edge recipient_colli with a given conditions (other predicates).
func (f *AddressFilter) WhereHasRecipientColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("recipient_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRecipientConsolidation applies a predicate to check if query has an edge recipient_consolidation.
func (f *AddressFilter) WhereHasRecipientConsolidation() {
	f.Where(entql.HasEdge("recipient_consolidation"))
}

// WhereHasRecipientConsolidationWith applies a predicate to check if query has an edge recipient_consolidation with a given conditions (other predicates).
func (f *AddressFilter) WhereHasRecipientConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("recipient_consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCompanyAddress applies a predicate to check if query has an edge company_address.
func (f *AddressFilter) WhereHasCompanyAddress() {
	f.Where(entql.HasEdge("company_address"))
}

// WhereHasCompanyAddressWith applies a predicate to check if query has an edge company_address with a given conditions (other predicates).
func (f *AddressFilter) WhereHasCompanyAddressWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("company_address", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocation applies a predicate to check if query has an edge location.
func (f *AddressFilter) WhereHasLocation() {
	f.Where(entql.HasEdge("location"))
}

// WhereHasLocationWith applies a predicate to check if query has an edge location with a given conditions (other predicates).
func (f *AddressFilter) WhereHasLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSenderColli applies a predicate to check if query has an edge sender_colli.
func (f *AddressFilter) WhereHasSenderColli() {
	f.Where(entql.HasEdge("sender_colli"))
}

// WhereHasSenderColliWith applies a predicate to check if query has an edge sender_colli with a given conditions (other predicates).
func (f *AddressFilter) WhereHasSenderColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("sender_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSenderConsolidation applies a predicate to check if query has an edge sender_consolidation.
func (f *AddressFilter) WhereHasSenderConsolidation() {
	f.Where(entql.HasEdge("sender_consolidation"))
}

// WhereHasSenderConsolidationWith applies a predicate to check if query has an edge sender_consolidation with a given conditions (other predicates).
func (f *AddressFilter) WhereHasSenderConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("sender_consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnSenderColli applies a predicate to check if query has an edge return_sender_colli.
func (f *AddressFilter) WhereHasReturnSenderColli() {
	f.Where(entql.HasEdge("return_sender_colli"))
}

// WhereHasReturnSenderColliWith applies a predicate to check if query has an edge return_sender_colli with a given conditions (other predicates).
func (f *AddressFilter) WhereHasReturnSenderColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_sender_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnRecipientColli applies a predicate to check if query has an edge return_recipient_colli.
func (f *AddressFilter) WhereHasReturnRecipientColli() {
	f.Where(entql.HasEdge("return_recipient_colli"))
}

// WhereHasReturnRecipientColliWith applies a predicate to check if query has an edge return_recipient_colli with a given conditions (other predicates).
func (f *AddressFilter) WhereHasReturnRecipientColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_recipient_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountry applies a predicate to check if query has an edge country.
func (f *AddressFilter) WhereHasCountry() {
	f.Where(entql.HasEdge("country"))
}

// WhereHasCountryWith applies a predicate to check if query has an edge country with a given conditions (other predicates).
func (f *AddressFilter) WhereHasCountryWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("country", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (agq *AddressGlobalQuery) addPredicate(pred func(s *sql.Selector)) {
	agq.predicates = append(agq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AddressGlobalQuery builder.
func (agq *AddressGlobalQuery) Filter() *AddressGlobalFilter {
	return &AddressGlobalFilter{config: agq.config, predicateAdder: agq}
}

// addPredicate implements the predicateAdder interface.
func (m *AddressGlobalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AddressGlobalMutation builder.
func (m *AddressGlobalMutation) Filter() *AddressGlobalFilter {
	return &AddressGlobalFilter{config: m.config, predicateAdder: m}
}

// AddressGlobalFilter provides a generic filtering capability at runtime for AddressGlobalQuery.
type AddressGlobalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AddressGlobalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *AddressGlobalFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldID))
}

// WhereUniquenessID applies the entql string predicate on the uniqueness_id field.
func (f *AddressGlobalFilter) WhereUniquenessID(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldUniquenessID))
}

// WhereCompany applies the entql string predicate on the company field.
func (f *AddressGlobalFilter) WhereCompany(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldCompany))
}

// WhereAddressOne applies the entql string predicate on the address_one field.
func (f *AddressGlobalFilter) WhereAddressOne(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldAddressOne))
}

// WhereAddressTwo applies the entql string predicate on the address_two field.
func (f *AddressGlobalFilter) WhereAddressTwo(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldAddressTwo))
}

// WhereCity applies the entql string predicate on the city field.
func (f *AddressGlobalFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldCity))
}

// WhereState applies the entql string predicate on the state field.
func (f *AddressGlobalFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldState))
}

// WhereZip applies the entql string predicate on the zip field.
func (f *AddressGlobalFilter) WhereZip(p entql.StringP) {
	f.Where(p.Field(addressglobal.FieldZip))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *AddressGlobalFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(addressglobal.FieldLatitude))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *AddressGlobalFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(addressglobal.FieldLongitude))
}

// WhereHasParcelShopPostNordDelivery applies a predicate to check if query has an edge parcel_shop_post_nord_delivery.
func (f *AddressGlobalFilter) WhereHasParcelShopPostNordDelivery() {
	f.Where(entql.HasEdge("parcel_shop_post_nord_delivery"))
}

// WhereHasParcelShopPostNordDeliveryWith applies a predicate to check if query has an edge parcel_shop_post_nord_delivery with a given conditions (other predicates).
func (f *AddressGlobalFilter) WhereHasParcelShopPostNordDeliveryWith(preds ...predicate.ParcelShopPostNord) {
	f.Where(entql.HasEdgeWith("parcel_shop_post_nord_delivery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShopBringDelivery applies a predicate to check if query has an edge parcel_shop_bring_delivery.
func (f *AddressGlobalFilter) WhereHasParcelShopBringDelivery() {
	f.Where(entql.HasEdge("parcel_shop_bring_delivery"))
}

// WhereHasParcelShopBringDeliveryWith applies a predicate to check if query has an edge parcel_shop_bring_delivery with a given conditions (other predicates).
func (f *AddressGlobalFilter) WhereHasParcelShopBringDeliveryWith(preds ...predicate.ParcelShopBring) {
	f.Where(entql.HasEdgeWith("parcel_shop_bring_delivery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *AddressGlobalFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *AddressGlobalFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountry applies a predicate to check if query has an edge country.
func (f *AddressGlobalFilter) WhereHasCountry() {
	f.Where(entql.HasEdge("country"))
}

// WhereHasCountryWith applies a predicate to check if query has an edge country with a given conditions (other predicates).
func (f *AddressGlobalFilter) WhereHasCountryWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("country", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bhpq *BusinessHoursPeriodQuery) addPredicate(pred func(s *sql.Selector)) {
	bhpq.predicates = append(bhpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BusinessHoursPeriodQuery builder.
func (bhpq *BusinessHoursPeriodQuery) Filter() *BusinessHoursPeriodFilter {
	return &BusinessHoursPeriodFilter{config: bhpq.config, predicateAdder: bhpq}
}

// addPredicate implements the predicateAdder interface.
func (m *BusinessHoursPeriodMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BusinessHoursPeriodMutation builder.
func (m *BusinessHoursPeriodMutation) Filter() *BusinessHoursPeriodFilter {
	return &BusinessHoursPeriodFilter{config: m.config, predicateAdder: m}
}

// BusinessHoursPeriodFilter provides a generic filtering capability at runtime for BusinessHoursPeriodQuery.
type BusinessHoursPeriodFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BusinessHoursPeriodFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *BusinessHoursPeriodFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(businesshoursperiod.FieldID))
}

// WhereDayOfWeek applies the entql string predicate on the day_of_week field.
func (f *BusinessHoursPeriodFilter) WhereDayOfWeek(p entql.StringP) {
	f.Where(p.Field(businesshoursperiod.FieldDayOfWeek))
}

// WhereOpening applies the entql time.Time predicate on the opening field.
func (f *BusinessHoursPeriodFilter) WhereOpening(p entql.TimeP) {
	f.Where(p.Field(businesshoursperiod.FieldOpening))
}

// WhereClosing applies the entql time.Time predicate on the closing field.
func (f *BusinessHoursPeriodFilter) WhereClosing(p entql.TimeP) {
	f.Where(p.Field(businesshoursperiod.FieldClosing))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *BusinessHoursPeriodFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *BusinessHoursPeriodFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CarrierQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierQuery builder.
func (cq *CarrierQuery) Filter() *CarrierFilter {
	return &CarrierFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierMutation builder.
func (m *CarrierMutation) Filter() *CarrierFilter {
	return &CarrierFilter{config: m.config, predicateAdder: m}
}

// CarrierFilter provides a generic filtering capability at runtime for CarrierQuery.
type CarrierFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrier.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrier.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CarrierFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(carrier.FieldName))
}

// WhereSyncCancelation applies the entql bool predicate on the sync_cancelation field.
func (f *CarrierFilter) WhereSyncCancelation(p entql.BoolP) {
	f.Where(p.Field(carrier.FieldSyncCancelation))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierBrand applies a predicate to check if query has an edge carrier_brand.
func (f *CarrierFilter) WhereHasCarrierBrand() {
	f.Where(entql.HasEdge("carrier_brand"))
}

// WhereHasCarrierBrandWith applies a predicate to check if query has an edge carrier_brand with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierBrandWith(preds ...predicate.CarrierBrand) {
	f.Where(entql.HasEdgeWith("carrier_brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierDAO applies a predicate to check if query has an edge carrier_dao.
func (f *CarrierFilter) WhereHasCarrierDAO() {
	f.Where(entql.HasEdge("carrier_dao"))
}

// WhereHasCarrierDAOWith applies a predicate to check if query has an edge carrier_dao with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierDAOWith(preds ...predicate.CarrierDAO) {
	f.Where(entql.HasEdgeWith("carrier_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierDF applies a predicate to check if query has an edge carrier_df.
func (f *CarrierFilter) WhereHasCarrierDF() {
	f.Where(entql.HasEdge("carrier_df"))
}

// WhereHasCarrierDFWith applies a predicate to check if query has an edge carrier_df with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierDFWith(preds ...predicate.CarrierDF) {
	f.Where(entql.HasEdgeWith("carrier_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierDSV applies a predicate to check if query has an edge carrier_dsv.
func (f *CarrierFilter) WhereHasCarrierDSV() {
	f.Where(entql.HasEdge("carrier_dsv"))
}

// WhereHasCarrierDSVWith applies a predicate to check if query has an edge carrier_dsv with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierDSVWith(preds ...predicate.CarrierDSV) {
	f.Where(entql.HasEdgeWith("carrier_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierEasyPost applies a predicate to check if query has an edge carrier_easy_post.
func (f *CarrierFilter) WhereHasCarrierEasyPost() {
	f.Where(entql.HasEdge("carrier_easy_post"))
}

// WhereHasCarrierEasyPostWith applies a predicate to check if query has an edge carrier_easy_post with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierEasyPostWith(preds ...predicate.CarrierEasyPost) {
	f.Where(entql.HasEdgeWith("carrier_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierGLS applies a predicate to check if query has an edge carrier_gls.
func (f *CarrierFilter) WhereHasCarrierGLS() {
	f.Where(entql.HasEdge("carrier_gls"))
}

// WhereHasCarrierGLSWith applies a predicate to check if query has an edge carrier_gls with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierGLSWith(preds ...predicate.CarrierGLS) {
	f.Where(entql.HasEdgeWith("carrier_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierPostNord applies a predicate to check if query has an edge carrier_post_nord.
func (f *CarrierFilter) WhereHasCarrierPostNord() {
	f.Where(entql.HasEdge("carrier_post_nord"))
}

// WhereHasCarrierPostNordWith applies a predicate to check if query has an edge carrier_post_nord with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierPostNordWith(preds ...predicate.CarrierPostNord) {
	f.Where(entql.HasEdgeWith("carrier_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierUSPS applies a predicate to check if query has an edge carrier_usps.
func (f *CarrierFilter) WhereHasCarrierUSPS() {
	f.Where(entql.HasEdge("carrier_usps"))
}

// WhereHasCarrierUSPSWith applies a predicate to check if query has an edge carrier_usps with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierUSPSWith(preds ...predicate.CarrierUSPS) {
	f.Where(entql.HasEdgeWith("carrier_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierBring applies a predicate to check if query has an edge carrier_bring.
func (f *CarrierFilter) WhereHasCarrierBring() {
	f.Where(entql.HasEdge("carrier_bring"))
}

// WhereHasCarrierBringWith applies a predicate to check if query has an edge carrier_bring with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasCarrierBringWith(preds ...predicate.CarrierBring) {
	f.Where(entql.HasEdgeWith("carrier_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *CarrierFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *CarrierFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *CarrierFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casbq *CarrierAdditionalServiceBringQuery) addPredicate(pred func(s *sql.Selector)) {
	casbq.predicates = append(casbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceBringQuery builder.
func (casbq *CarrierAdditionalServiceBringQuery) Filter() *CarrierAdditionalServiceBringFilter {
	return &CarrierAdditionalServiceBringFilter{config: casbq.config, predicateAdder: casbq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceBringMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceBringMutation builder.
func (m *CarrierAdditionalServiceBringMutation) Filter() *CarrierAdditionalServiceBringFilter {
	return &CarrierAdditionalServiceBringFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceBringFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceBringQuery.
type CarrierAdditionalServiceBringFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceBringFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceBringFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicebring.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceBringFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicebring.FieldLabel))
}

// WhereAPICodeBooking applies the entql string predicate on the api_code_booking field.
func (f *CarrierAdditionalServiceBringFilter) WhereAPICodeBooking(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicebring.FieldAPICodeBooking))
}

// WhereHasCarrierServiceBring applies a predicate to check if query has an edge carrier_service_bring.
func (f *CarrierAdditionalServiceBringFilter) WhereHasCarrierServiceBring() {
	f.Where(entql.HasEdge("carrier_service_bring"))
}

// WhereHasCarrierServiceBringWith applies a predicate to check if query has an edge carrier_service_bring with a given conditions (other predicates).
func (f *CarrierAdditionalServiceBringFilter) WhereHasCarrierServiceBringWith(preds ...predicate.CarrierServiceBring) {
	f.Where(entql.HasEdgeWith("carrier_service_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionBring applies a predicate to check if query has an edge delivery_option_bring.
func (f *CarrierAdditionalServiceBringFilter) WhereHasDeliveryOptionBring() {
	f.Where(entql.HasEdge("delivery_option_bring"))
}

// WhereHasDeliveryOptionBringWith applies a predicate to check if query has an edge delivery_option_bring with a given conditions (other predicates).
func (f *CarrierAdditionalServiceBringFilter) WhereHasDeliveryOptionBringWith(preds ...predicate.DeliveryOptionBring) {
	f.Where(entql.HasEdgeWith("delivery_option_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casdq *CarrierAdditionalServiceDAOQuery) addPredicate(pred func(s *sql.Selector)) {
	casdq.predicates = append(casdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceDAOQuery builder.
func (casdq *CarrierAdditionalServiceDAOQuery) Filter() *CarrierAdditionalServiceDAOFilter {
	return &CarrierAdditionalServiceDAOFilter{config: casdq.config, predicateAdder: casdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceDAOMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceDAOMutation builder.
func (m *CarrierAdditionalServiceDAOMutation) Filter() *CarrierAdditionalServiceDAOFilter {
	return &CarrierAdditionalServiceDAOFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceDAOFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceDAOQuery.
type CarrierAdditionalServiceDAOFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceDAOFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceDAOFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedao.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceDAOFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedao.FieldLabel))
}

// WhereAPICode applies the entql string predicate on the api_code field.
func (f *CarrierAdditionalServiceDAOFilter) WhereAPICode(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedao.FieldAPICode))
}

// WhereHasCarrierServiceDAO applies a predicate to check if query has an edge carrier_service_dao.
func (f *CarrierAdditionalServiceDAOFilter) WhereHasCarrierServiceDAO() {
	f.Where(entql.HasEdge("carrier_service_dao"))
}

// WhereHasCarrierServiceDAOWith applies a predicate to check if query has an edge carrier_service_dao with a given conditions (other predicates).
func (f *CarrierAdditionalServiceDAOFilter) WhereHasCarrierServiceDAOWith(preds ...predicate.CarrierServiceDAO) {
	f.Where(entql.HasEdgeWith("carrier_service_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionDAO applies a predicate to check if query has an edge delivery_option_dao.
func (f *CarrierAdditionalServiceDAOFilter) WhereHasDeliveryOptionDAO() {
	f.Where(entql.HasEdge("delivery_option_dao"))
}

// WhereHasDeliveryOptionDAOWith applies a predicate to check if query has an edge delivery_option_dao with a given conditions (other predicates).
func (f *CarrierAdditionalServiceDAOFilter) WhereHasDeliveryOptionDAOWith(preds ...predicate.DeliveryOptionDAO) {
	f.Where(entql.HasEdgeWith("delivery_option_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casdq *CarrierAdditionalServiceDFQuery) addPredicate(pred func(s *sql.Selector)) {
	casdq.predicates = append(casdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceDFQuery builder.
func (casdq *CarrierAdditionalServiceDFQuery) Filter() *CarrierAdditionalServiceDFFilter {
	return &CarrierAdditionalServiceDFFilter{config: casdq.config, predicateAdder: casdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceDFMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceDFMutation builder.
func (m *CarrierAdditionalServiceDFMutation) Filter() *CarrierAdditionalServiceDFFilter {
	return &CarrierAdditionalServiceDFFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceDFFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceDFQuery.
type CarrierAdditionalServiceDFFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceDFFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceDFFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedf.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceDFFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedf.FieldLabel))
}

// WhereAPICode applies the entql string predicate on the api_code field.
func (f *CarrierAdditionalServiceDFFilter) WhereAPICode(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedf.FieldAPICode))
}

// WhereHasCarrierServiceDF applies a predicate to check if query has an edge carrier_service_df.
func (f *CarrierAdditionalServiceDFFilter) WhereHasCarrierServiceDF() {
	f.Where(entql.HasEdge("carrier_service_df"))
}

// WhereHasCarrierServiceDFWith applies a predicate to check if query has an edge carrier_service_df with a given conditions (other predicates).
func (f *CarrierAdditionalServiceDFFilter) WhereHasCarrierServiceDFWith(preds ...predicate.CarrierServiceDF) {
	f.Where(entql.HasEdgeWith("carrier_service_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionDF applies a predicate to check if query has an edge delivery_option_df.
func (f *CarrierAdditionalServiceDFFilter) WhereHasDeliveryOptionDF() {
	f.Where(entql.HasEdge("delivery_option_df"))
}

// WhereHasDeliveryOptionDFWith applies a predicate to check if query has an edge delivery_option_df with a given conditions (other predicates).
func (f *CarrierAdditionalServiceDFFilter) WhereHasDeliveryOptionDFWith(preds ...predicate.DeliveryOptionDF) {
	f.Where(entql.HasEdgeWith("delivery_option_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casdq *CarrierAdditionalServiceDSVQuery) addPredicate(pred func(s *sql.Selector)) {
	casdq.predicates = append(casdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceDSVQuery builder.
func (casdq *CarrierAdditionalServiceDSVQuery) Filter() *CarrierAdditionalServiceDSVFilter {
	return &CarrierAdditionalServiceDSVFilter{config: casdq.config, predicateAdder: casdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceDSVMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceDSVMutation builder.
func (m *CarrierAdditionalServiceDSVMutation) Filter() *CarrierAdditionalServiceDSVFilter {
	return &CarrierAdditionalServiceDSVFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceDSVFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceDSVQuery.
type CarrierAdditionalServiceDSVFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceDSVFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceDSVFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedsv.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceDSVFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedsv.FieldLabel))
}

// WhereAPICode applies the entql string predicate on the api_code field.
func (f *CarrierAdditionalServiceDSVFilter) WhereAPICode(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicedsv.FieldAPICode))
}

// WhereHasCarrierServiceDSV applies a predicate to check if query has an edge carrier_service_dsv.
func (f *CarrierAdditionalServiceDSVFilter) WhereHasCarrierServiceDSV() {
	f.Where(entql.HasEdge("carrier_service_dsv"))
}

// WhereHasCarrierServiceDSVWith applies a predicate to check if query has an edge carrier_service_dsv with a given conditions (other predicates).
func (f *CarrierAdditionalServiceDSVFilter) WhereHasCarrierServiceDSVWith(preds ...predicate.CarrierServiceDSV) {
	f.Where(entql.HasEdgeWith("carrier_service_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionDSV applies a predicate to check if query has an edge delivery_option_dsv.
func (f *CarrierAdditionalServiceDSVFilter) WhereHasDeliveryOptionDSV() {
	f.Where(entql.HasEdge("delivery_option_dsv"))
}

// WhereHasDeliveryOptionDSVWith applies a predicate to check if query has an edge delivery_option_dsv with a given conditions (other predicates).
func (f *CarrierAdditionalServiceDSVFilter) WhereHasDeliveryOptionDSVWith(preds ...predicate.DeliveryOptionDSV) {
	f.Where(entql.HasEdgeWith("delivery_option_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casepq *CarrierAdditionalServiceEasyPostQuery) addPredicate(pred func(s *sql.Selector)) {
	casepq.predicates = append(casepq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceEasyPostQuery builder.
func (casepq *CarrierAdditionalServiceEasyPostQuery) Filter() *CarrierAdditionalServiceEasyPostFilter {
	return &CarrierAdditionalServiceEasyPostFilter{config: casepq.config, predicateAdder: casepq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceEasyPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceEasyPostMutation builder.
func (m *CarrierAdditionalServiceEasyPostMutation) Filter() *CarrierAdditionalServiceEasyPostFilter {
	return &CarrierAdditionalServiceEasyPostFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceEasyPostFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceEasyPostQuery.
type CarrierAdditionalServiceEasyPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceEasyPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceEasyPostFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceeasypost.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceEasyPostFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceeasypost.FieldLabel))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierAdditionalServiceEasyPostFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceeasypost.FieldAPIKey))
}

// WhereAPIValue applies the entql string predicate on the api_value field.
func (f *CarrierAdditionalServiceEasyPostFilter) WhereAPIValue(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceeasypost.FieldAPIValue))
}

// WhereHasCarrierServiceEasyPost applies a predicate to check if query has an edge carrier_service_easy_post.
func (f *CarrierAdditionalServiceEasyPostFilter) WhereHasCarrierServiceEasyPost() {
	f.Where(entql.HasEdge("carrier_service_easy_post"))
}

// WhereHasCarrierServiceEasyPostWith applies a predicate to check if query has an edge carrier_service_easy_post with a given conditions (other predicates).
func (f *CarrierAdditionalServiceEasyPostFilter) WhereHasCarrierServiceEasyPostWith(preds ...predicate.CarrierServiceEasyPost) {
	f.Where(entql.HasEdgeWith("carrier_service_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionEasyPost applies a predicate to check if query has an edge delivery_option_easy_post.
func (f *CarrierAdditionalServiceEasyPostFilter) WhereHasDeliveryOptionEasyPost() {
	f.Where(entql.HasEdge("delivery_option_easy_post"))
}

// WhereHasDeliveryOptionEasyPostWith applies a predicate to check if query has an edge delivery_option_easy_post with a given conditions (other predicates).
func (f *CarrierAdditionalServiceEasyPostFilter) WhereHasDeliveryOptionEasyPostWith(preds ...predicate.DeliveryOptionEasyPost) {
	f.Where(entql.HasEdgeWith("delivery_option_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casgq *CarrierAdditionalServiceGLSQuery) addPredicate(pred func(s *sql.Selector)) {
	casgq.predicates = append(casgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceGLSQuery builder.
func (casgq *CarrierAdditionalServiceGLSQuery) Filter() *CarrierAdditionalServiceGLSFilter {
	return &CarrierAdditionalServiceGLSFilter{config: casgq.config, predicateAdder: casgq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceGLSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceGLSMutation builder.
func (m *CarrierAdditionalServiceGLSMutation) Filter() *CarrierAdditionalServiceGLSFilter {
	return &CarrierAdditionalServiceGLSFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceGLSFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceGLSQuery.
type CarrierAdditionalServiceGLSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceGLSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceGLSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicegls.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceGLSFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicegls.FieldLabel))
}

// WhereMandatory applies the entql bool predicate on the mandatory field.
func (f *CarrierAdditionalServiceGLSFilter) WhereMandatory(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalservicegls.FieldMandatory))
}

// WhereAllCountriesConsignor applies the entql bool predicate on the all_countries_consignor field.
func (f *CarrierAdditionalServiceGLSFilter) WhereAllCountriesConsignor(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalservicegls.FieldAllCountriesConsignor))
}

// WhereAllCountriesConsignee applies the entql bool predicate on the all_countries_consignee field.
func (f *CarrierAdditionalServiceGLSFilter) WhereAllCountriesConsignee(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalservicegls.FieldAllCountriesConsignee))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *CarrierAdditionalServiceGLSFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicegls.FieldInternalID))
}

// WhereHasCarrierServiceGLS applies a predicate to check if query has an edge carrier_service_gls.
func (f *CarrierAdditionalServiceGLSFilter) WhereHasCarrierServiceGLS() {
	f.Where(entql.HasEdge("carrier_service_gls"))
}

// WhereHasCarrierServiceGLSWith applies a predicate to check if query has an edge carrier_service_gls with a given conditions (other predicates).
func (f *CarrierAdditionalServiceGLSFilter) WhereHasCarrierServiceGLSWith(preds ...predicate.CarrierServiceGLS) {
	f.Where(entql.HasEdgeWith("carrier_service_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionGLS applies a predicate to check if query has an edge delivery_option_gls.
func (f *CarrierAdditionalServiceGLSFilter) WhereHasDeliveryOptionGLS() {
	f.Where(entql.HasEdge("delivery_option_gls"))
}

// WhereHasDeliveryOptionGLSWith applies a predicate to check if query has an edge delivery_option_gls with a given conditions (other predicates).
func (f *CarrierAdditionalServiceGLSFilter) WhereHasDeliveryOptionGLSWith(preds ...predicate.DeliveryOptionGLS) {
	f.Where(entql.HasEdgeWith("delivery_option_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountriesConsignee applies a predicate to check if query has an edge countries_consignee.
func (f *CarrierAdditionalServiceGLSFilter) WhereHasCountriesConsignee() {
	f.Where(entql.HasEdge("countries_consignee"))
}

// WhereHasCountriesConsigneeWith applies a predicate to check if query has an edge countries_consignee with a given conditions (other predicates).
func (f *CarrierAdditionalServiceGLSFilter) WhereHasCountriesConsigneeWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("countries_consignee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountriesConsignor applies a predicate to check if query has an edge countries_consignor.
func (f *CarrierAdditionalServiceGLSFilter) WhereHasCountriesConsignor() {
	f.Where(entql.HasEdge("countries_consignor"))
}

// WhereHasCountriesConsignorWith applies a predicate to check if query has an edge countries_consignor with a given conditions (other predicates).
func (f *CarrierAdditionalServiceGLSFilter) WhereHasCountriesConsignorWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("countries_consignor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (caspnq *CarrierAdditionalServicePostNordQuery) addPredicate(pred func(s *sql.Selector)) {
	caspnq.predicates = append(caspnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServicePostNordQuery builder.
func (caspnq *CarrierAdditionalServicePostNordQuery) Filter() *CarrierAdditionalServicePostNordFilter {
	return &CarrierAdditionalServicePostNordFilter{config: caspnq.config, predicateAdder: caspnq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServicePostNordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServicePostNordMutation builder.
func (m *CarrierAdditionalServicePostNordMutation) Filter() *CarrierAdditionalServicePostNordFilter {
	return &CarrierAdditionalServicePostNordFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServicePostNordFilter provides a generic filtering capability at runtime for CarrierAdditionalServicePostNordQuery.
type CarrierAdditionalServicePostNordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServicePostNordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServicePostNordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServicePostNordFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldLabel))
}

// WhereMandatory applies the entql bool predicate on the mandatory field.
func (f *CarrierAdditionalServicePostNordFilter) WhereMandatory(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldMandatory))
}

// WhereAllCountriesConsignor applies the entql bool predicate on the all_countries_consignor field.
func (f *CarrierAdditionalServicePostNordFilter) WhereAllCountriesConsignor(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldAllCountriesConsignor))
}

// WhereAllCountriesConsignee applies the entql bool predicate on the all_countries_consignee field.
func (f *CarrierAdditionalServicePostNordFilter) WhereAllCountriesConsignee(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldAllCountriesConsignee))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *CarrierAdditionalServicePostNordFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldInternalID))
}

// WhereAPICode applies the entql string predicate on the api_code field.
func (f *CarrierAdditionalServicePostNordFilter) WhereAPICode(p entql.StringP) {
	f.Where(p.Field(carrieradditionalservicepostnord.FieldAPICode))
}

// WhereHasCarrierServicePostNord applies a predicate to check if query has an edge carrier_service_post_nord.
func (f *CarrierAdditionalServicePostNordFilter) WhereHasCarrierServicePostNord() {
	f.Where(entql.HasEdge("carrier_service_post_nord"))
}

// WhereHasCarrierServicePostNordWith applies a predicate to check if query has an edge carrier_service_post_nord with a given conditions (other predicates).
func (f *CarrierAdditionalServicePostNordFilter) WhereHasCarrierServicePostNordWith(preds ...predicate.CarrierServicePostNord) {
	f.Where(entql.HasEdgeWith("carrier_service_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionPostNord applies a predicate to check if query has an edge delivery_option_post_nord.
func (f *CarrierAdditionalServicePostNordFilter) WhereHasDeliveryOptionPostNord() {
	f.Where(entql.HasEdge("delivery_option_post_nord"))
}

// WhereHasDeliveryOptionPostNordWith applies a predicate to check if query has an edge delivery_option_post_nord with a given conditions (other predicates).
func (f *CarrierAdditionalServicePostNordFilter) WhereHasDeliveryOptionPostNordWith(preds ...predicate.DeliveryOptionPostNord) {
	f.Where(entql.HasEdgeWith("delivery_option_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountriesConsignee applies a predicate to check if query has an edge countries_consignee.
func (f *CarrierAdditionalServicePostNordFilter) WhereHasCountriesConsignee() {
	f.Where(entql.HasEdge("countries_consignee"))
}

// WhereHasCountriesConsigneeWith applies a predicate to check if query has an edge countries_consignee with a given conditions (other predicates).
func (f *CarrierAdditionalServicePostNordFilter) WhereHasCountriesConsigneeWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("countries_consignee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountriesConsignor applies a predicate to check if query has an edge countries_consignor.
func (f *CarrierAdditionalServicePostNordFilter) WhereHasCountriesConsignor() {
	f.Where(entql.HasEdge("countries_consignor"))
}

// WhereHasCountriesConsignorWith applies a predicate to check if query has an edge countries_consignor with a given conditions (other predicates).
func (f *CarrierAdditionalServicePostNordFilter) WhereHasCountriesConsignorWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("countries_consignor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (casuq *CarrierAdditionalServiceUSPSQuery) addPredicate(pred func(s *sql.Selector)) {
	casuq.predicates = append(casuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierAdditionalServiceUSPSQuery builder.
func (casuq *CarrierAdditionalServiceUSPSQuery) Filter() *CarrierAdditionalServiceUSPSFilter {
	return &CarrierAdditionalServiceUSPSFilter{config: casuq.config, predicateAdder: casuq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierAdditionalServiceUSPSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierAdditionalServiceUSPSMutation builder.
func (m *CarrierAdditionalServiceUSPSMutation) Filter() *CarrierAdditionalServiceUSPSFilter {
	return &CarrierAdditionalServiceUSPSFilter{config: m.config, predicateAdder: m}
}

// CarrierAdditionalServiceUSPSFilter provides a generic filtering capability at runtime for CarrierAdditionalServiceUSPSQuery.
type CarrierAdditionalServiceUSPSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierAdditionalServiceUSPSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierAdditionalServiceUSPSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceusps.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierAdditionalServiceUSPSFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceusps.FieldLabel))
}

// WhereCommonlyUsed applies the entql bool predicate on the commonly_used field.
func (f *CarrierAdditionalServiceUSPSFilter) WhereCommonlyUsed(p entql.BoolP) {
	f.Where(p.Field(carrieradditionalserviceusps.FieldCommonlyUsed))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *CarrierAdditionalServiceUSPSFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceusps.FieldInternalID))
}

// WhereAPICode applies the entql string predicate on the api_code field.
func (f *CarrierAdditionalServiceUSPSFilter) WhereAPICode(p entql.StringP) {
	f.Where(p.Field(carrieradditionalserviceusps.FieldAPICode))
}

// WhereHasCarrierServiceUSPS applies a predicate to check if query has an edge carrier_service_usps.
func (f *CarrierAdditionalServiceUSPSFilter) WhereHasCarrierServiceUSPS() {
	f.Where(entql.HasEdge("carrier_service_usps"))
}

// WhereHasCarrierServiceUSPSWith applies a predicate to check if query has an edge carrier_service_usps with a given conditions (other predicates).
func (f *CarrierAdditionalServiceUSPSFilter) WhereHasCarrierServiceUSPSWith(preds ...predicate.CarrierServiceUSPS) {
	f.Where(entql.HasEdgeWith("carrier_service_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionUSPS applies a predicate to check if query has an edge delivery_option_usps.
func (f *CarrierAdditionalServiceUSPSFilter) WhereHasDeliveryOptionUSPS() {
	f.Where(entql.HasEdge("delivery_option_usps"))
}

// WhereHasDeliveryOptionUSPSWith applies a predicate to check if query has an edge delivery_option_usps with a given conditions (other predicates).
func (f *CarrierAdditionalServiceUSPSFilter) WhereHasDeliveryOptionUSPSWith(preds ...predicate.DeliveryOptionUSPS) {
	f.Where(entql.HasEdgeWith("delivery_option_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cbq *CarrierBrandQuery) addPredicate(pred func(s *sql.Selector)) {
	cbq.predicates = append(cbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierBrandQuery builder.
func (cbq *CarrierBrandQuery) Filter() *CarrierBrandFilter {
	return &CarrierBrandFilter{config: cbq.config, predicateAdder: cbq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierBrandMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierBrandMutation builder.
func (m *CarrierBrandMutation) Filter() *CarrierBrandFilter {
	return &CarrierBrandFilter{config: m.config, predicateAdder: m}
}

// CarrierBrandFilter provides a generic filtering capability at runtime for CarrierBrandQuery.
type CarrierBrandFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierBrandFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierBrandFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierBrandFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldLabel))
}

// WhereLabelShort applies the entql string predicate on the label_short field.
func (f *CarrierBrandFilter) WhereLabelShort(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldLabelShort))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *CarrierBrandFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldInternalID))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *CarrierBrandFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldLogoURL))
}

// WhereTextColor applies the entql string predicate on the text_color field.
func (f *CarrierBrandFilter) WhereTextColor(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldTextColor))
}

// WhereBackgroundColor applies the entql string predicate on the background_color field.
func (f *CarrierBrandFilter) WhereBackgroundColor(p entql.StringP) {
	f.Where(p.Field(carrierbrand.FieldBackgroundColor))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierBrandFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierBrandFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierBrandFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierBrandFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *CarrierBrandFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *CarrierBrandFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *CarrierBrandFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *CarrierBrandFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocument applies a predicate to check if query has an edge document.
func (f *CarrierBrandFilter) WhereHasDocument() {
	f.Where(entql.HasEdge("document"))
}

// WhereHasDocumentWith applies a predicate to check if query has an edge document with a given conditions (other predicates).
func (f *CarrierBrandFilter) WhereHasDocumentWith(preds ...predicate.Document) {
	f.Where(entql.HasEdgeWith("document", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cbq *CarrierBringQuery) addPredicate(pred func(s *sql.Selector)) {
	cbq.predicates = append(cbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierBringQuery builder.
func (cbq *CarrierBringQuery) Filter() *CarrierBringFilter {
	return &CarrierBringFilter{config: cbq.config, predicateAdder: cbq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierBringMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierBringMutation builder.
func (m *CarrierBringMutation) Filter() *CarrierBringFilter {
	return &CarrierBringFilter{config: m.config, predicateAdder: m}
}

// CarrierBringFilter provides a generic filtering capability at runtime for CarrierBringQuery.
type CarrierBringFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierBringFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierBringFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierbring.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierBringFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrierbring.FieldTenantID))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierBringFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carrierbring.FieldAPIKey))
}

// WhereCustomerNumber applies the entql string predicate on the customer_number field.
func (f *CarrierBringFilter) WhereCustomerNumber(p entql.StringP) {
	f.Where(p.Field(carrierbring.FieldCustomerNumber))
}

// WhereTest applies the entql bool predicate on the test field.
func (f *CarrierBringFilter) WhereTest(p entql.BoolP) {
	f.Where(p.Field(carrierbring.FieldTest))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierBringFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierBringFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierBringFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierBringFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cdq *CarrierDAOQuery) addPredicate(pred func(s *sql.Selector)) {
	cdq.predicates = append(cdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierDAOQuery builder.
func (cdq *CarrierDAOQuery) Filter() *CarrierDAOFilter {
	return &CarrierDAOFilter{config: cdq.config, predicateAdder: cdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierDAOMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierDAOMutation builder.
func (m *CarrierDAOMutation) Filter() *CarrierDAOFilter {
	return &CarrierDAOFilter{config: m.config, predicateAdder: m}
}

// CarrierDAOFilter provides a generic filtering capability at runtime for CarrierDAOQuery.
type CarrierDAOFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierDAOFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierDAOFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierdao.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierDAOFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrierdao.FieldTenantID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *CarrierDAOFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(carrierdao.FieldCustomerID))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierDAOFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carrierdao.FieldAPIKey))
}

// WhereTest applies the entql bool predicate on the Test field.
func (f *CarrierDAOFilter) WhereTest(p entql.BoolP) {
	f.Where(p.Field(carrierdao.FieldTest))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierDAOFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierDAOFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierDAOFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierDAOFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cdq *CarrierDFQuery) addPredicate(pred func(s *sql.Selector)) {
	cdq.predicates = append(cdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierDFQuery builder.
func (cdq *CarrierDFQuery) Filter() *CarrierDFFilter {
	return &CarrierDFFilter{config: cdq.config, predicateAdder: cdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierDFMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierDFMutation builder.
func (m *CarrierDFMutation) Filter() *CarrierDFFilter {
	return &CarrierDFFilter{config: m.config, predicateAdder: m}
}

// CarrierDFFilter provides a generic filtering capability at runtime for CarrierDFQuery.
type CarrierDFFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierDFFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierDFFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierdf.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierDFFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrierdf.FieldTenantID))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *CarrierDFFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(carrierdf.FieldCustomerID))
}

// WhereAgreementNumber applies the entql string predicate on the agreement_number field.
func (f *CarrierDFFilter) WhereAgreementNumber(p entql.StringP) {
	f.Where(p.Field(carrierdf.FieldAgreementNumber))
}

// WhereWhoPays applies the entql string predicate on the who_pays field.
func (f *CarrierDFFilter) WhereWhoPays(p entql.StringP) {
	f.Where(p.Field(carrierdf.FieldWhoPays))
}

// WhereTest applies the entql bool predicate on the test field.
func (f *CarrierDFFilter) WhereTest(p entql.BoolP) {
	f.Where(p.Field(carrierdf.FieldTest))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierDFFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierDFFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierDFFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierDFFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cdq *CarrierDSVQuery) addPredicate(pred func(s *sql.Selector)) {
	cdq.predicates = append(cdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierDSVQuery builder.
func (cdq *CarrierDSVQuery) Filter() *CarrierDSVFilter {
	return &CarrierDSVFilter{config: cdq.config, predicateAdder: cdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierDSVMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierDSVMutation builder.
func (m *CarrierDSVMutation) Filter() *CarrierDSVFilter {
	return &CarrierDSVFilter{config: m.config, predicateAdder: m}
}

// CarrierDSVFilter provides a generic filtering capability at runtime for CarrierDSVQuery.
type CarrierDSVFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierDSVFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierDSVFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierdsv.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierDSVFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrierdsv.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierDSVFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierDSVFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierDSVFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierDSVFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cepq *CarrierEasyPostQuery) addPredicate(pred func(s *sql.Selector)) {
	cepq.predicates = append(cepq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierEasyPostQuery builder.
func (cepq *CarrierEasyPostQuery) Filter() *CarrierEasyPostFilter {
	return &CarrierEasyPostFilter{config: cepq.config, predicateAdder: cepq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierEasyPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierEasyPostMutation builder.
func (m *CarrierEasyPostMutation) Filter() *CarrierEasyPostFilter {
	return &CarrierEasyPostFilter{config: m.config, predicateAdder: m}
}

// CarrierEasyPostFilter provides a generic filtering capability at runtime for CarrierEasyPostQuery.
type CarrierEasyPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierEasyPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierEasyPostFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carriereasypost.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierEasyPostFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carriereasypost.FieldTenantID))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierEasyPostFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carriereasypost.FieldAPIKey))
}

// WhereTest applies the entql bool predicate on the test field.
func (f *CarrierEasyPostFilter) WhereTest(p entql.BoolP) {
	f.Where(p.Field(carriereasypost.FieldTest))
}

// WhereCarrierAccounts applies the entql json.RawMessage predicate on the carrier_accounts field.
func (f *CarrierEasyPostFilter) WhereCarrierAccounts(p entql.BytesP) {
	f.Where(p.Field(carriereasypost.FieldCarrierAccounts))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierEasyPostFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierEasyPostFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierEasyPostFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierEasyPostFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cgq *CarrierGLSQuery) addPredicate(pred func(s *sql.Selector)) {
	cgq.predicates = append(cgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierGLSQuery builder.
func (cgq *CarrierGLSQuery) Filter() *CarrierGLSFilter {
	return &CarrierGLSFilter{config: cgq.config, predicateAdder: cgq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierGLSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierGLSMutation builder.
func (m *CarrierGLSMutation) Filter() *CarrierGLSFilter {
	return &CarrierGLSFilter{config: m.config, predicateAdder: m}
}

// CarrierGLSFilter provides a generic filtering capability at runtime for CarrierGLSQuery.
type CarrierGLSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierGLSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierGLSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierGLSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldTenantID))
}

// WhereContactID applies the entql string predicate on the contact_id field.
func (f *CarrierGLSFilter) WhereContactID(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldContactID))
}

// WhereGLSUsername applies the entql string predicate on the gls_username field.
func (f *CarrierGLSFilter) WhereGLSUsername(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldGLSUsername))
}

// WhereGLSPassword applies the entql string predicate on the gls_password field.
func (f *CarrierGLSFilter) WhereGLSPassword(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldGLSPassword))
}

// WhereCustomerID applies the entql string predicate on the customer_id field.
func (f *CarrierGLSFilter) WhereCustomerID(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldCustomerID))
}

// WhereGLSCountryCode applies the entql string predicate on the gls_country_code field.
func (f *CarrierGLSFilter) WhereGLSCountryCode(p entql.StringP) {
	f.Where(p.Field(carriergls.FieldGLSCountryCode))
}

// WhereSyncShipmentCancellation applies the entql bool predicate on the sync_shipment_cancellation field.
func (f *CarrierGLSFilter) WhereSyncShipmentCancellation(p entql.BoolP) {
	f.Where(p.Field(carriergls.FieldSyncShipmentCancellation))
}

// WherePrintErrorOnLabel applies the entql bool predicate on the print_error_on_label field.
func (f *CarrierGLSFilter) WherePrintErrorOnLabel(p entql.BoolP) {
	f.Where(p.Field(carriergls.FieldPrintErrorOnLabel))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierGLSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierGLSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierGLSFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierGLSFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cpnq *CarrierPostNordQuery) addPredicate(pred func(s *sql.Selector)) {
	cpnq.predicates = append(cpnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierPostNordQuery builder.
func (cpnq *CarrierPostNordQuery) Filter() *CarrierPostNordFilter {
	return &CarrierPostNordFilter{config: cpnq.config, predicateAdder: cpnq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierPostNordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierPostNordMutation builder.
func (m *CarrierPostNordMutation) Filter() *CarrierPostNordFilter {
	return &CarrierPostNordFilter{config: m.config, predicateAdder: m}
}

// CarrierPostNordFilter provides a generic filtering capability at runtime for CarrierPostNordQuery.
type CarrierPostNordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierPostNordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierPostNordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierpostnord.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierPostNordFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrierpostnord.FieldTenantID))
}

// WhereCustomerNumber applies the entql string predicate on the customer_number field.
func (f *CarrierPostNordFilter) WhereCustomerNumber(p entql.StringP) {
	f.Where(p.Field(carrierpostnord.FieldCustomerNumber))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierPostNordFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierPostNordFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierPostNordFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierPostNordFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csq *CarrierServiceQuery) addPredicate(pred func(s *sql.Selector)) {
	csq.predicates = append(csq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceQuery builder.
func (csq *CarrierServiceQuery) Filter() *CarrierServiceFilter {
	return &CarrierServiceFilter{config: csq.config, predicateAdder: csq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceMutation builder.
func (m *CarrierServiceMutation) Filter() *CarrierServiceFilter {
	return &CarrierServiceFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceFilter provides a generic filtering capability at runtime for CarrierServiceQuery.
type CarrierServiceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservice.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierServiceFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrierservice.FieldLabel))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *CarrierServiceFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(carrierservice.FieldInternalID))
}

// WhereReturn applies the entql bool predicate on the return field.
func (f *CarrierServiceFilter) WhereReturn(p entql.BoolP) {
	f.Where(p.Field(carrierservice.FieldReturn))
}

// WhereConsolidation applies the entql bool predicate on the consolidation field.
func (f *CarrierServiceFilter) WhereConsolidation(p entql.BoolP) {
	f.Where(p.Field(carrierservice.FieldConsolidation))
}

// WhereDeliveryPointOptional applies the entql bool predicate on the delivery_point_optional field.
func (f *CarrierServiceFilter) WhereDeliveryPointOptional(p entql.BoolP) {
	f.Where(p.Field(carrierservice.FieldDeliveryPointOptional))
}

// WhereDeliveryPointRequired applies the entql bool predicate on the delivery_point_required field.
func (f *CarrierServiceFilter) WhereDeliveryPointRequired(p entql.BoolP) {
	f.Where(p.Field(carrierservice.FieldDeliveryPointRequired))
}

// WhereHasCarrierServicePostNord applies a predicate to check if query has an edge carrier_service_post_nord.
func (f *CarrierServiceFilter) WhereHasCarrierServicePostNord() {
	f.Where(entql.HasEdge("carrier_service_post_nord"))
}

// WhereHasCarrierServicePostNordWith applies a predicate to check if query has an edge carrier_service_post_nord with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServicePostNordWith(preds ...predicate.CarrierServicePostNord) {
	f.Where(entql.HasEdgeWith("carrier_service_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServiceDAO applies a predicate to check if query has an edge carrier_service_dao.
func (f *CarrierServiceFilter) WhereHasCarrierServiceDAO() {
	f.Where(entql.HasEdge("carrier_service_dao"))
}

// WhereHasCarrierServiceDAOWith applies a predicate to check if query has an edge carrier_service_dao with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServiceDAOWith(preds ...predicate.CarrierServiceDAO) {
	f.Where(entql.HasEdgeWith("carrier_service_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServiceDF applies a predicate to check if query has an edge carrier_service_df.
func (f *CarrierServiceFilter) WhereHasCarrierServiceDF() {
	f.Where(entql.HasEdge("carrier_service_df"))
}

// WhereHasCarrierServiceDFWith applies a predicate to check if query has an edge carrier_service_df with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServiceDFWith(preds ...predicate.CarrierServiceDF) {
	f.Where(entql.HasEdgeWith("carrier_service_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServiceDSV applies a predicate to check if query has an edge carrier_service_dsv.
func (f *CarrierServiceFilter) WhereHasCarrierServiceDSV() {
	f.Where(entql.HasEdge("carrier_service_dsv"))
}

// WhereHasCarrierServiceDSVWith applies a predicate to check if query has an edge carrier_service_dsv with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServiceDSVWith(preds ...predicate.CarrierServiceDSV) {
	f.Where(entql.HasEdgeWith("carrier_service_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServEasyPost applies a predicate to check if query has an edge carrier_serv_easy_post.
func (f *CarrierServiceFilter) WhereHasCarrierServEasyPost() {
	f.Where(entql.HasEdge("carrier_serv_easy_post"))
}

// WhereHasCarrierServEasyPostWith applies a predicate to check if query has an edge carrier_serv_easy_post with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServEasyPostWith(preds ...predicate.CarrierServiceEasyPost) {
	f.Where(entql.HasEdgeWith("carrier_serv_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServiceGLS applies a predicate to check if query has an edge carrier_service_gls.
func (f *CarrierServiceFilter) WhereHasCarrierServiceGLS() {
	f.Where(entql.HasEdge("carrier_service_gls"))
}

// WhereHasCarrierServiceGLSWith applies a predicate to check if query has an edge carrier_service_gls with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServiceGLSWith(preds ...predicate.CarrierServiceGLS) {
	f.Where(entql.HasEdgeWith("carrier_service_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServiceUSPS applies a predicate to check if query has an edge carrier_service_usps.
func (f *CarrierServiceFilter) WhereHasCarrierServiceUSPS() {
	f.Where(entql.HasEdge("carrier_service_usps"))
}

// WhereHasCarrierServiceUSPSWith applies a predicate to check if query has an edge carrier_service_usps with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServiceUSPSWith(preds ...predicate.CarrierServiceUSPS) {
	f.Where(entql.HasEdgeWith("carrier_service_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierServiceBring applies a predicate to check if query has an edge carrier_service_bring.
func (f *CarrierServiceFilter) WhereHasCarrierServiceBring() {
	f.Where(entql.HasEdge("carrier_service_bring"))
}

// WhereHasCarrierServiceBringWith applies a predicate to check if query has an edge carrier_service_bring with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierServiceBringWith(preds ...predicate.CarrierServiceBring) {
	f.Where(entql.HasEdgeWith("carrier_service_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierBrand applies a predicate to check if query has an edge carrier_brand.
func (f *CarrierServiceFilter) WhereHasCarrierBrand() {
	f.Where(entql.HasEdge("carrier_brand"))
}

// WhereHasCarrierBrandWith applies a predicate to check if query has an edge carrier_brand with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasCarrierBrandWith(preds ...predicate.CarrierBrand) {
	f.Where(entql.HasEdgeWith("carrier_brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *CarrierServiceFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *CarrierServiceFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csbq *CarrierServiceBringQuery) addPredicate(pred func(s *sql.Selector)) {
	csbq.predicates = append(csbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceBringQuery builder.
func (csbq *CarrierServiceBringQuery) Filter() *CarrierServiceBringFilter {
	return &CarrierServiceBringFilter{config: csbq.config, predicateAdder: csbq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceBringMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceBringMutation builder.
func (m *CarrierServiceBringMutation) Filter() *CarrierServiceBringFilter {
	return &CarrierServiceBringFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceBringFilter provides a generic filtering capability at runtime for CarrierServiceBringQuery.
type CarrierServiceBringFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceBringFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceBringFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservicebring.FieldID))
}

// WhereAPIServiceCode applies the entql string predicate on the api_service_code field.
func (f *CarrierServiceBringFilter) WhereAPIServiceCode(p entql.StringP) {
	f.Where(p.Field(carrierservicebring.FieldAPIServiceCode))
}

// WhereAPIRequest applies the entql string predicate on the api_request field.
func (f *CarrierServiceBringFilter) WhereAPIRequest(p entql.StringP) {
	f.Where(p.Field(carrierservicebring.FieldAPIRequest))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceBringFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceBringFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceBring applies a predicate to check if query has an edge carrier_additional_service_bring.
func (f *CarrierServiceBringFilter) WhereHasCarrierAdditionalServiceBring() {
	f.Where(entql.HasEdge("carrier_additional_service_bring"))
}

// WhereHasCarrierAdditionalServiceBringWith applies a predicate to check if query has an edge carrier_additional_service_bring with a given conditions (other predicates).
func (f *CarrierServiceBringFilter) WhereHasCarrierAdditionalServiceBringWith(preds ...predicate.CarrierAdditionalServiceBring) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csdq *CarrierServiceDAOQuery) addPredicate(pred func(s *sql.Selector)) {
	csdq.predicates = append(csdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceDAOQuery builder.
func (csdq *CarrierServiceDAOQuery) Filter() *CarrierServiceDAOFilter {
	return &CarrierServiceDAOFilter{config: csdq.config, predicateAdder: csdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceDAOMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceDAOMutation builder.
func (m *CarrierServiceDAOMutation) Filter() *CarrierServiceDAOFilter {
	return &CarrierServiceDAOFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceDAOFilter provides a generic filtering capability at runtime for CarrierServiceDAOQuery.
type CarrierServiceDAOFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceDAOFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceDAOFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservicedao.FieldID))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceDAOFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceDAOFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceDAO applies a predicate to check if query has an edge carrier_additional_service_dao.
func (f *CarrierServiceDAOFilter) WhereHasCarrierAdditionalServiceDAO() {
	f.Where(entql.HasEdge("carrier_additional_service_dao"))
}

// WhereHasCarrierAdditionalServiceDAOWith applies a predicate to check if query has an edge carrier_additional_service_dao with a given conditions (other predicates).
func (f *CarrierServiceDAOFilter) WhereHasCarrierAdditionalServiceDAOWith(preds ...predicate.CarrierAdditionalServiceDAO) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csdq *CarrierServiceDFQuery) addPredicate(pred func(s *sql.Selector)) {
	csdq.predicates = append(csdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceDFQuery builder.
func (csdq *CarrierServiceDFQuery) Filter() *CarrierServiceDFFilter {
	return &CarrierServiceDFFilter{config: csdq.config, predicateAdder: csdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceDFMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceDFMutation builder.
func (m *CarrierServiceDFMutation) Filter() *CarrierServiceDFFilter {
	return &CarrierServiceDFFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceDFFilter provides a generic filtering capability at runtime for CarrierServiceDFQuery.
type CarrierServiceDFFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceDFFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceDFFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservicedf.FieldID))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceDFFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceDFFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceDF applies a predicate to check if query has an edge carrier_additional_service_df.
func (f *CarrierServiceDFFilter) WhereHasCarrierAdditionalServiceDF() {
	f.Where(entql.HasEdge("carrier_additional_service_df"))
}

// WhereHasCarrierAdditionalServiceDFWith applies a predicate to check if query has an edge carrier_additional_service_df with a given conditions (other predicates).
func (f *CarrierServiceDFFilter) WhereHasCarrierAdditionalServiceDFWith(preds ...predicate.CarrierAdditionalServiceDF) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csdq *CarrierServiceDSVQuery) addPredicate(pred func(s *sql.Selector)) {
	csdq.predicates = append(csdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceDSVQuery builder.
func (csdq *CarrierServiceDSVQuery) Filter() *CarrierServiceDSVFilter {
	return &CarrierServiceDSVFilter{config: csdq.config, predicateAdder: csdq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceDSVMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceDSVMutation builder.
func (m *CarrierServiceDSVMutation) Filter() *CarrierServiceDSVFilter {
	return &CarrierServiceDSVFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceDSVFilter provides a generic filtering capability at runtime for CarrierServiceDSVQuery.
type CarrierServiceDSVFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceDSVFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceDSVFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservicedsv.FieldID))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceDSVFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceDSVFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceDSV applies a predicate to check if query has an edge carrier_additional_service_dsv.
func (f *CarrierServiceDSVFilter) WhereHasCarrierAdditionalServiceDSV() {
	f.Where(entql.HasEdge("carrier_additional_service_dsv"))
}

// WhereHasCarrierAdditionalServiceDSVWith applies a predicate to check if query has an edge carrier_additional_service_dsv with a given conditions (other predicates).
func (f *CarrierServiceDSVFilter) WhereHasCarrierAdditionalServiceDSVWith(preds ...predicate.CarrierAdditionalServiceDSV) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csepq *CarrierServiceEasyPostQuery) addPredicate(pred func(s *sql.Selector)) {
	csepq.predicates = append(csepq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceEasyPostQuery builder.
func (csepq *CarrierServiceEasyPostQuery) Filter() *CarrierServiceEasyPostFilter {
	return &CarrierServiceEasyPostFilter{config: csepq.config, predicateAdder: csepq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceEasyPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceEasyPostMutation builder.
func (m *CarrierServiceEasyPostMutation) Filter() *CarrierServiceEasyPostFilter {
	return &CarrierServiceEasyPostFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceEasyPostFilter provides a generic filtering capability at runtime for CarrierServiceEasyPostQuery.
type CarrierServiceEasyPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceEasyPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceEasyPostFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierserviceeasypost.FieldID))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierServiceEasyPostFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carrierserviceeasypost.FieldAPIKey))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceEasyPostFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceEasyPostFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAddServEasyPost applies a predicate to check if query has an edge carrier_add_serv_easy_post.
func (f *CarrierServiceEasyPostFilter) WhereHasCarrierAddServEasyPost() {
	f.Where(entql.HasEdge("carrier_add_serv_easy_post"))
}

// WhereHasCarrierAddServEasyPostWith applies a predicate to check if query has an edge carrier_add_serv_easy_post with a given conditions (other predicates).
func (f *CarrierServiceEasyPostFilter) WhereHasCarrierAddServEasyPostWith(preds ...predicate.CarrierAdditionalServiceEasyPost) {
	f.Where(entql.HasEdgeWith("carrier_add_serv_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csgq *CarrierServiceGLSQuery) addPredicate(pred func(s *sql.Selector)) {
	csgq.predicates = append(csgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceGLSQuery builder.
func (csgq *CarrierServiceGLSQuery) Filter() *CarrierServiceGLSFilter {
	return &CarrierServiceGLSFilter{config: csgq.config, predicateAdder: csgq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceGLSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceGLSMutation builder.
func (m *CarrierServiceGLSMutation) Filter() *CarrierServiceGLSFilter {
	return &CarrierServiceGLSFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceGLSFilter provides a generic filtering capability at runtime for CarrierServiceGLSQuery.
type CarrierServiceGLSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceGLSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceGLSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservicegls.FieldID))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierServiceGLSFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carrierservicegls.FieldAPIKey))
}

// WhereAPIValue applies the entql string predicate on the api_value field.
func (f *CarrierServiceGLSFilter) WhereAPIValue(p entql.StringP) {
	f.Where(p.Field(carrierservicegls.FieldAPIValue))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceGLSFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceGLSFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceGLS applies a predicate to check if query has an edge carrier_additional_service_gls.
func (f *CarrierServiceGLSFilter) WhereHasCarrierAdditionalServiceGLS() {
	f.Where(entql.HasEdge("carrier_additional_service_gls"))
}

// WhereHasCarrierAdditionalServiceGLSWith applies a predicate to check if query has an edge carrier_additional_service_gls with a given conditions (other predicates).
func (f *CarrierServiceGLSFilter) WhereHasCarrierAdditionalServiceGLSWith(preds ...predicate.CarrierAdditionalServiceGLS) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cspnq *CarrierServicePostNordQuery) addPredicate(pred func(s *sql.Selector)) {
	cspnq.predicates = append(cspnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServicePostNordQuery builder.
func (cspnq *CarrierServicePostNordQuery) Filter() *CarrierServicePostNordFilter {
	return &CarrierServicePostNordFilter{config: cspnq.config, predicateAdder: cspnq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServicePostNordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServicePostNordMutation builder.
func (m *CarrierServicePostNordMutation) Filter() *CarrierServicePostNordFilter {
	return &CarrierServicePostNordFilter{config: m.config, predicateAdder: m}
}

// CarrierServicePostNordFilter provides a generic filtering capability at runtime for CarrierServicePostNordQuery.
type CarrierServicePostNordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServicePostNordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServicePostNordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierservicepostnord.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CarrierServicePostNordFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(carrierservicepostnord.FieldLabel))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *CarrierServicePostNordFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(carrierservicepostnord.FieldInternalID))
}

// WhereAPICode applies the entql string predicate on the api_code field.
func (f *CarrierServicePostNordFilter) WhereAPICode(p entql.StringP) {
	f.Where(p.Field(carrierservicepostnord.FieldAPICode))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServicePostNordFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServicePostNordFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAddServPostNord applies a predicate to check if query has an edge carrier_add_serv_post_nord.
func (f *CarrierServicePostNordFilter) WhereHasCarrierAddServPostNord() {
	f.Where(entql.HasEdge("carrier_add_serv_post_nord"))
}

// WhereHasCarrierAddServPostNordWith applies a predicate to check if query has an edge carrier_add_serv_post_nord with a given conditions (other predicates).
func (f *CarrierServicePostNordFilter) WhereHasCarrierAddServPostNordWith(preds ...predicate.CarrierAdditionalServicePostNord) {
	f.Where(entql.HasEdgeWith("carrier_add_serv_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csuq *CarrierServiceUSPSQuery) addPredicate(pred func(s *sql.Selector)) {
	csuq.predicates = append(csuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierServiceUSPSQuery builder.
func (csuq *CarrierServiceUSPSQuery) Filter() *CarrierServiceUSPSFilter {
	return &CarrierServiceUSPSFilter{config: csuq.config, predicateAdder: csuq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierServiceUSPSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierServiceUSPSMutation builder.
func (m *CarrierServiceUSPSMutation) Filter() *CarrierServiceUSPSFilter {
	return &CarrierServiceUSPSFilter{config: m.config, predicateAdder: m}
}

// CarrierServiceUSPSFilter provides a generic filtering capability at runtime for CarrierServiceUSPSQuery.
type CarrierServiceUSPSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierServiceUSPSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierServiceUSPSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierserviceusps.FieldID))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *CarrierServiceUSPSFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(carrierserviceusps.FieldAPIKey))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *CarrierServiceUSPSFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *CarrierServiceUSPSFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceUSPS applies a predicate to check if query has an edge carrier_additional_service_usps.
func (f *CarrierServiceUSPSFilter) WhereHasCarrierAdditionalServiceUSPS() {
	f.Where(entql.HasEdge("carrier_additional_service_usps"))
}

// WhereHasCarrierAdditionalServiceUSPSWith applies a predicate to check if query has an edge carrier_additional_service_usps with a given conditions (other predicates).
func (f *CarrierServiceUSPSFilter) WhereHasCarrierAdditionalServiceUSPSWith(preds ...predicate.CarrierAdditionalServiceUSPS) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cuq *CarrierUSPSQuery) addPredicate(pred func(s *sql.Selector)) {
	cuq.predicates = append(cuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarrierUSPSQuery builder.
func (cuq *CarrierUSPSQuery) Filter() *CarrierUSPSFilter {
	return &CarrierUSPSFilter{config: cuq.config, predicateAdder: cuq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarrierUSPSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarrierUSPSMutation builder.
func (m *CarrierUSPSMutation) Filter() *CarrierUSPSFilter {
	return &CarrierUSPSFilter{config: m.config, predicateAdder: m}
}

// CarrierUSPSFilter provides a generic filtering capability at runtime for CarrierUSPSQuery.
type CarrierUSPSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarrierUSPSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CarrierUSPSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CarrierUSPSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldTenantID))
}

// WhereIsTestAPI applies the entql bool predicate on the is_test_api field.
func (f *CarrierUSPSFilter) WhereIsTestAPI(p entql.BoolP) {
	f.Where(p.Field(carrierusps.FieldIsTestAPI))
}

// WhereConsumerKey applies the entql string predicate on the consumer_key field.
func (f *CarrierUSPSFilter) WhereConsumerKey(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldConsumerKey))
}

// WhereConsumerSecret applies the entql string predicate on the consumer_secret field.
func (f *CarrierUSPSFilter) WhereConsumerSecret(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldConsumerSecret))
}

// WhereMid applies the entql string predicate on the mid field.
func (f *CarrierUSPSFilter) WhereMid(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldMid))
}

// WhereManifestMid applies the entql string predicate on the manifest_mid field.
func (f *CarrierUSPSFilter) WhereManifestMid(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldManifestMid))
}

// WhereCrid applies the entql string predicate on the crid field.
func (f *CarrierUSPSFilter) WhereCrid(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldCrid))
}

// WhereEpsAccountNumber applies the entql string predicate on the eps_account_number field.
func (f *CarrierUSPSFilter) WhereEpsAccountNumber(p entql.StringP) {
	f.Where(p.Field(carrierusps.FieldEpsAccountNumber))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CarrierUSPSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CarrierUSPSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *CarrierUSPSFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *CarrierUSPSFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (chq *ChangeHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	chq.predicates = append(chq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ChangeHistoryQuery builder.
func (chq *ChangeHistoryQuery) Filter() *ChangeHistoryFilter {
	return &ChangeHistoryFilter{config: chq.config, predicateAdder: chq}
}

// addPredicate implements the predicateAdder interface.
func (m *ChangeHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ChangeHistoryMutation builder.
func (m *ChangeHistoryMutation) Filter() *ChangeHistoryFilter {
	return &ChangeHistoryFilter{config: m.config, predicateAdder: m}
}

// ChangeHistoryFilter provides a generic filtering capability at runtime for ChangeHistoryQuery.
type ChangeHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ChangeHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ChangeHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(changehistory.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ChangeHistoryFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(changehistory.FieldTenantID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ChangeHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(changehistory.FieldCreatedAt))
}

// WhereOrigin applies the entql string predicate on the origin field.
func (f *ChangeHistoryFilter) WhereOrigin(p entql.StringP) {
	f.Where(p.Field(changehistory.FieldOrigin))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ChangeHistoryFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ChangeHistoryFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlanHistory applies a predicate to check if query has an edge plan_history.
func (f *ChangeHistoryFilter) WhereHasPlanHistory() {
	f.Where(entql.HasEdge("plan_history"))
}

// WhereHasPlanHistoryWith applies a predicate to check if query has an edge plan_history with a given conditions (other predicates).
func (f *ChangeHistoryFilter) WhereHasPlanHistoryWith(preds ...predicate.PlanHistory) {
	f.Where(entql.HasEdgeWith("plan_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ChangeHistoryFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ChangeHistoryFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderHistory applies a predicate to check if query has an edge order_history.
func (f *ChangeHistoryFilter) WhereHasOrderHistory() {
	f.Where(entql.HasEdge("order_history"))
}

// WhereHasOrderHistoryWith applies a predicate to check if query has an edge order_history with a given conditions (other predicates).
func (f *ChangeHistoryFilter) WhereHasOrderHistoryWith(preds ...predicate.OrderHistory) {
	f.Where(entql.HasEdgeWith("order_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentHistory applies a predicate to check if query has an edge shipment_history.
func (f *ChangeHistoryFilter) WhereHasShipmentHistory() {
	f.Where(entql.HasEdge("shipment_history"))
}

// WhereHasShipmentHistoryWith applies a predicate to check if query has an edge shipment_history with a given conditions (other predicates).
func (f *ChangeHistoryFilter) WhereHasShipmentHistoryWith(preds ...predicate.ShipmentHistory) {
	f.Where(entql.HasEdgeWith("shipment_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColliHistory applies a predicate to check if query has an edge return_colli_history.
func (f *ChangeHistoryFilter) WhereHasReturnColliHistory() {
	f.Where(entql.HasEdge("return_colli_history"))
}

// WhereHasReturnColliHistoryWith applies a predicate to check if query has an edge return_colli_history with a given conditions (other predicates).
func (f *ChangeHistoryFilter) WhereHasReturnColliHistoryWith(preds ...predicate.ReturnColliHistory) {
	f.Where(entql.HasEdgeWith("return_colli_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ColliQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ColliQuery builder.
func (cq *ColliQuery) Filter() *ColliFilter {
	return &ColliFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ColliMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ColliMutation builder.
func (m *ColliMutation) Filter() *ColliFilter {
	return &ColliFilter{config: m.config, predicateAdder: m}
}

// ColliFilter provides a generic filtering capability at runtime for ColliQuery.
type ColliFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ColliFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ColliFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(colli.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ColliFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(colli.FieldTenantID))
}

// WhereInternalBarcode applies the entql int64 predicate on the internal_barcode field.
func (f *ColliFilter) WhereInternalBarcode(p entql.Int64P) {
	f.Where(p.Field(colli.FieldInternalBarcode))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ColliFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(colli.FieldStatus))
}

// WhereSlipPrintStatus applies the entql string predicate on the slip_print_status field.
func (f *ColliFilter) WhereSlipPrintStatus(p entql.StringP) {
	f.Where(p.Field(colli.FieldSlipPrintStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ColliFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(colli.FieldCreatedAt))
}

// WhereEmailPackingSlipPrintedAt applies the entql time.Time predicate on the email_packing_slip_printed_at field.
func (f *ColliFilter) WhereEmailPackingSlipPrintedAt(p entql.TimeP) {
	f.Where(p.Field(colli.FieldEmailPackingSlipPrintedAt))
}

// WhereEmailLabelPrintedAt applies the entql time.Time predicate on the email_label_printed_at field.
func (f *ColliFilter) WhereEmailLabelPrintedAt(p entql.TimeP) {
	f.Where(p.Field(colli.FieldEmailLabelPrintedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ColliFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ColliFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRecipient applies a predicate to check if query has an edge recipient.
func (f *ColliFilter) WhereHasRecipient() {
	f.Where(entql.HasEdge("recipient"))
}

// WhereHasRecipientWith applies a predicate to check if query has an edge recipient with a given conditions (other predicates).
func (f *ColliFilter) WhereHasRecipientWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("recipient", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSender applies a predicate to check if query has an edge sender.
func (f *ColliFilter) WhereHasSender() {
	f.Where(entql.HasEdge("sender"))
}

// WhereHasSenderWith applies a predicate to check if query has an edge sender with a given conditions (other predicates).
func (f *ColliFilter) WhereHasSenderWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("sender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *ColliFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *ColliFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasClickCollectLocation applies a predicate to check if query has an edge click_collect_location.
func (f *ColliFilter) WhereHasClickCollectLocation() {
	f.Where(entql.HasEdge("click_collect_location"))
}

// WhereHasClickCollectLocationWith applies a predicate to check if query has an edge click_collect_location with a given conditions (other predicates).
func (f *ColliFilter) WhereHasClickCollectLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("click_collect_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderLines applies a predicate to check if query has an edge order_lines.
func (f *ColliFilter) WhereHasOrderLines() {
	f.Where(entql.HasEdge("order_lines"))
}

// WhereHasOrderLinesWith applies a predicate to check if query has an edge order_lines with a given conditions (other predicates).
func (f *ColliFilter) WhereHasOrderLinesWith(preds ...predicate.OrderLine) {
	f.Where(entql.HasEdgeWith("order_lines", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *ColliFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *ColliFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocumentFile applies a predicate to check if query has an edge document_file.
func (f *ColliFilter) WhereHasDocumentFile() {
	f.Where(entql.HasEdge("document_file"))
}

// WhereHasDocumentFileWith applies a predicate to check if query has an edge document_file with a given conditions (other predicates).
func (f *ColliFilter) WhereHasDocumentFileWith(preds ...predicate.DocumentFile) {
	f.Where(entql.HasEdgeWith("document_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentParcel applies a predicate to check if query has an edge shipment_parcel.
func (f *ColliFilter) WhereHasShipmentParcel() {
	f.Where(entql.HasEdge("shipment_parcel"))
}

// WhereHasShipmentParcelWith applies a predicate to check if query has an edge shipment_parcel with a given conditions (other predicates).
func (f *ColliFilter) WhereHasShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCancelledShipmentParcel applies a predicate to check if query has an edge cancelled_shipment_parcel.
func (f *ColliFilter) WhereHasCancelledShipmentParcel() {
	f.Where(entql.HasEdge("cancelled_shipment_parcel"))
}

// WhereHasCancelledShipmentParcelWith applies a predicate to check if query has an edge cancelled_shipment_parcel with a given conditions (other predicates).
func (f *ColliFilter) WhereHasCancelledShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("cancelled_shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *ColliFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *ColliFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *ColliFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *ColliFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrintJob applies a predicate to check if query has an edge print_job.
func (f *ColliFilter) WhereHasPrintJob() {
	f.Where(entql.HasEdge("print_job"))
}

// WhereHasPrintJobWith applies a predicate to check if query has an edge print_job with a given conditions (other predicates).
func (f *ColliFilter) WhereHasPrintJobWith(preds ...predicate.PrintJob) {
	f.Where(entql.HasEdgeWith("print_job", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cocq *ConnectOptionCarrierQuery) addPredicate(pred func(s *sql.Selector)) {
	cocq.predicates = append(cocq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConnectOptionCarrierQuery builder.
func (cocq *ConnectOptionCarrierQuery) Filter() *ConnectOptionCarrierFilter {
	return &ConnectOptionCarrierFilter{config: cocq.config, predicateAdder: cocq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConnectOptionCarrierMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConnectOptionCarrierMutation builder.
func (m *ConnectOptionCarrierMutation) Filter() *ConnectOptionCarrierFilter {
	return &ConnectOptionCarrierFilter{config: m.config, predicateAdder: m}
}

// ConnectOptionCarrierFilter provides a generic filtering capability at runtime for ConnectOptionCarrierQuery.
type ConnectOptionCarrierFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConnectOptionCarrierFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConnectOptionCarrierFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(connectoptioncarrier.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ConnectOptionCarrierFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(connectoptioncarrier.FieldName))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ConnectOptionCarrierFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ConnectOptionCarrierFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (copq *ConnectOptionPlatformQuery) addPredicate(pred func(s *sql.Selector)) {
	copq.predicates = append(copq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConnectOptionPlatformQuery builder.
func (copq *ConnectOptionPlatformQuery) Filter() *ConnectOptionPlatformFilter {
	return &ConnectOptionPlatformFilter{config: copq.config, predicateAdder: copq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConnectOptionPlatformMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConnectOptionPlatformMutation builder.
func (m *ConnectOptionPlatformMutation) Filter() *ConnectOptionPlatformFilter {
	return &ConnectOptionPlatformFilter{config: m.config, predicateAdder: m}
}

// ConnectOptionPlatformFilter provides a generic filtering capability at runtime for ConnectOptionPlatformQuery.
type ConnectOptionPlatformFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConnectOptionPlatformFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConnectOptionPlatformFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(connectoptionplatform.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ConnectOptionPlatformFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(connectoptionplatform.FieldName))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ConnectOptionPlatformFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ConnectOptionPlatformFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ConnectionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConnectionQuery builder.
func (cq *ConnectionQuery) Filter() *ConnectionFilter {
	return &ConnectionFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConnectionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConnectionMutation builder.
func (m *ConnectionMutation) Filter() *ConnectionFilter {
	return &ConnectionFilter{config: m.config, predicateAdder: m}
}

// ConnectionFilter provides a generic filtering capability at runtime for ConnectionQuery.
type ConnectionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConnectionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConnectionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(connection.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ConnectionFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(connection.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ConnectionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(connection.FieldName))
}

// WhereSyncOrders applies the entql bool predicate on the sync_orders field.
func (f *ConnectionFilter) WhereSyncOrders(p entql.BoolP) {
	f.Where(p.Field(connection.FieldSyncOrders))
}

// WhereSyncProducts applies the entql bool predicate on the sync_products field.
func (f *ConnectionFilter) WhereSyncProducts(p entql.BoolP) {
	f.Where(p.Field(connection.FieldSyncProducts))
}

// WhereFulfillAutomatically applies the entql bool predicate on the fulfill_automatically field.
func (f *ConnectionFilter) WhereFulfillAutomatically(p entql.BoolP) {
	f.Where(p.Field(connection.FieldFulfillAutomatically))
}

// WhereDispatchAutomatically applies the entql bool predicate on the dispatch_automatically field.
func (f *ConnectionFilter) WhereDispatchAutomatically(p entql.BoolP) {
	f.Where(p.Field(connection.FieldDispatchAutomatically))
}

// WhereConvertCurrency applies the entql bool predicate on the convert_currency field.
func (f *ConnectionFilter) WhereConvertCurrency(p entql.BoolP) {
	f.Where(p.Field(connection.FieldConvertCurrency))
}

// WhereAutoPrintParcelSlip applies the entql bool predicate on the auto_print_parcel_slip field.
func (f *ConnectionFilter) WhereAutoPrintParcelSlip(p entql.BoolP) {
	f.Where(p.Field(connection.FieldAutoPrintParcelSlip))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ConnectionFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnectionBrand applies a predicate to check if query has an edge connection_brand.
func (f *ConnectionFilter) WhereHasConnectionBrand() {
	f.Where(entql.HasEdge("connection_brand"))
}

// WhereHasConnectionBrandWith applies a predicate to check if query has an edge connection_brand with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasConnectionBrandWith(preds ...predicate.ConnectionBrand) {
	f.Where(entql.HasEdgeWith("connection_brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnectionShopify applies a predicate to check if query has an edge connection_shopify.
func (f *ConnectionFilter) WhereHasConnectionShopify() {
	f.Where(entql.HasEdge("connection_shopify"))
}

// WhereHasConnectionShopifyWith applies a predicate to check if query has an edge connection_shopify with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasConnectionShopifyWith(preds ...predicate.ConnectionShopify) {
	f.Where(entql.HasEdgeWith("connection_shopify", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *ConnectionFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSenderLocation applies a predicate to check if query has an edge sender_location.
func (f *ConnectionFilter) WhereHasSenderLocation() {
	f.Where(entql.HasEdge("sender_location"))
}

// WhereHasSenderLocationWith applies a predicate to check if query has an edge sender_location with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasSenderLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("sender_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPickupLocation applies a predicate to check if query has an edge pickup_location.
func (f *ConnectionFilter) WhereHasPickupLocation() {
	f.Where(entql.HasEdge("pickup_location"))
}

// WhereHasPickupLocationWith applies a predicate to check if query has an edge pickup_location with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasPickupLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("pickup_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnLocation applies a predicate to check if query has an edge return_location.
func (f *ConnectionFilter) WhereHasReturnLocation() {
	f.Where(entql.HasEdge("return_location"))
}

// WhereHasReturnLocationWith applies a predicate to check if query has an edge return_location with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasReturnLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("return_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSellerLocation applies a predicate to check if query has an edge seller_location.
func (f *ConnectionFilter) WhereHasSellerLocation() {
	f.Where(entql.HasEdge("seller_location"))
}

// WhereHasSellerLocationWith applies a predicate to check if query has an edge seller_location with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasSellerLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("seller_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *ConnectionFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultDeliveryOption applies a predicate to check if query has an edge default_delivery_option.
func (f *ConnectionFilter) WhereHasDefaultDeliveryOption() {
	f.Where(entql.HasEdge("default_delivery_option"))
}

// WhereHasDefaultDeliveryOptionWith applies a predicate to check if query has an edge default_delivery_option with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasDefaultDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("default_delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortal applies a predicate to check if query has an edge return_portal.
func (f *ConnectionFilter) WhereHasReturnPortal() {
	f.Where(entql.HasEdge("return_portal"))
}

// WhereHasReturnPortalWith applies a predicate to check if query has an edge return_portal with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasReturnPortalWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTest applies a predicate to check if query has an edge hypothesis_test.
func (f *ConnectionFilter) WhereHasHypothesisTest() {
	f.Where(entql.HasEdge("hypothesis_test"))
}

// WhereHasHypothesisTestWith applies a predicate to check if query has an edge hypothesis_test with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasHypothesisTestWith(preds ...predicate.HypothesisTest) {
	f.Where(entql.HasEdgeWith("hypothesis_test", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotifications applies a predicate to check if query has an edge notifications.
func (f *ConnectionFilter) WhereHasNotifications() {
	f.Where(entql.HasEdge("notifications"))
}

// WhereHasNotificationsWith applies a predicate to check if query has an edge notifications with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasNotificationsWith(preds ...predicate.Notification) {
	f.Where(entql.HasEdgeWith("notifications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCurrency applies a predicate to check if query has an edge currency.
func (f *ConnectionFilter) WhereHasCurrency() {
	f.Where(entql.HasEdge("currency"))
}

// WhereHasCurrencyWith applies a predicate to check if query has an edge currency with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasCurrencyWith(preds ...predicate.Currency) {
	f.Where(entql.HasEdgeWith("currency", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackingSlipTemplate applies a predicate to check if query has an edge packing_slip_template.
func (f *ConnectionFilter) WhereHasPackingSlipTemplate() {
	f.Where(entql.HasEdge("packing_slip_template"))
}

// WhereHasPackingSlipTemplateWith applies a predicate to check if query has an edge packing_slip_template with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasPackingSlipTemplateWith(preds ...predicate.Document) {
	f.Where(entql.HasEdgeWith("packing_slip_template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnectionLookup applies a predicate to check if query has an edge connection_lookup.
func (f *ConnectionFilter) WhereHasConnectionLookup() {
	f.Where(entql.HasEdge("connection_lookup"))
}

// WhereHasConnectionLookupWith applies a predicate to check if query has an edge connection_lookup with a given conditions (other predicates).
func (f *ConnectionFilter) WhereHasConnectionLookupWith(preds ...predicate.ConnectionLookup) {
	f.Where(entql.HasEdgeWith("connection_lookup", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cbq *ConnectionBrandQuery) addPredicate(pred func(s *sql.Selector)) {
	cbq.predicates = append(cbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConnectionBrandQuery builder.
func (cbq *ConnectionBrandQuery) Filter() *ConnectionBrandFilter {
	return &ConnectionBrandFilter{config: cbq.config, predicateAdder: cbq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConnectionBrandMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConnectionBrandMutation builder.
func (m *ConnectionBrandMutation) Filter() *ConnectionBrandFilter {
	return &ConnectionBrandFilter{config: m.config, predicateAdder: m}
}

// ConnectionBrandFilter provides a generic filtering capability at runtime for ConnectionBrandQuery.
type ConnectionBrandFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConnectionBrandFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConnectionBrandFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(connectionbrand.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *ConnectionBrandFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(connectionbrand.FieldLabel))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *ConnectionBrandFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(connectionbrand.FieldInternalID))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *ConnectionBrandFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(connectionbrand.FieldLogoURL))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *ConnectionBrandFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *ConnectionBrandFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (clq *ConnectionLookupQuery) addPredicate(pred func(s *sql.Selector)) {
	clq.predicates = append(clq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConnectionLookupQuery builder.
func (clq *ConnectionLookupQuery) Filter() *ConnectionLookupFilter {
	return &ConnectionLookupFilter{config: clq.config, predicateAdder: clq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConnectionLookupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConnectionLookupMutation builder.
func (m *ConnectionLookupMutation) Filter() *ConnectionLookupFilter {
	return &ConnectionLookupFilter{config: m.config, predicateAdder: m}
}

// ConnectionLookupFilter provides a generic filtering capability at runtime for ConnectionLookupQuery.
type ConnectionLookupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConnectionLookupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConnectionLookupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(connectionlookup.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ConnectionLookupFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(connectionlookup.FieldTenantID))
}

// WherePayload applies the entql string predicate on the payload field.
func (f *ConnectionLookupFilter) WherePayload(p entql.StringP) {
	f.Where(p.Field(connectionlookup.FieldPayload))
}

// WhereOptionsOutputCount applies the entql int predicate on the options_output_count field.
func (f *ConnectionLookupFilter) WhereOptionsOutputCount(p entql.IntP) {
	f.Where(p.Field(connectionlookup.FieldOptionsOutputCount))
}

// WhereError applies the entql string predicate on the error field.
func (f *ConnectionLookupFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(connectionlookup.FieldError))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ConnectionLookupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(connectionlookup.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ConnectionLookupFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ConnectionLookupFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnections applies a predicate to check if query has an edge connections.
func (f *ConnectionLookupFilter) WhereHasConnections() {
	f.Where(entql.HasEdge("connections"))
}

// WhereHasConnectionsWith applies a predicate to check if query has an edge connections with a given conditions (other predicates).
func (f *ConnectionLookupFilter) WhereHasConnectionsWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connections", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (csq *ConnectionShopifyQuery) addPredicate(pred func(s *sql.Selector)) {
	csq.predicates = append(csq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConnectionShopifyQuery builder.
func (csq *ConnectionShopifyQuery) Filter() *ConnectionShopifyFilter {
	return &ConnectionShopifyFilter{config: csq.config, predicateAdder: csq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConnectionShopifyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConnectionShopifyMutation builder.
func (m *ConnectionShopifyMutation) Filter() *ConnectionShopifyFilter {
	return &ConnectionShopifyFilter{config: m.config, predicateAdder: m}
}

// ConnectionShopifyFilter provides a generic filtering capability at runtime for ConnectionShopifyQuery.
type ConnectionShopifyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConnectionShopifyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConnectionShopifyFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(connectionshopify.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ConnectionShopifyFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(connectionshopify.FieldTenantID))
}

// WhereRateIntegration applies the entql bool predicate on the rate_integration field.
func (f *ConnectionShopifyFilter) WhereRateIntegration(p entql.BoolP) {
	f.Where(p.Field(connectionshopify.FieldRateIntegration))
}

// WhereStoreURL applies the entql string predicate on the store_url field.
func (f *ConnectionShopifyFilter) WhereStoreURL(p entql.StringP) {
	f.Where(p.Field(connectionshopify.FieldStoreURL))
}

// WhereAPIKey applies the entql string predicate on the api_key field.
func (f *ConnectionShopifyFilter) WhereAPIKey(p entql.StringP) {
	f.Where(p.Field(connectionshopify.FieldAPIKey))
}

// WhereLookupKey applies the entql string predicate on the lookup_key field.
func (f *ConnectionShopifyFilter) WhereLookupKey(p entql.StringP) {
	f.Where(p.Field(connectionshopify.FieldLookupKey))
}

// WhereSyncFrom applies the entql time.Time predicate on the sync_from field.
func (f *ConnectionShopifyFilter) WhereSyncFrom(p entql.TimeP) {
	f.Where(p.Field(connectionshopify.FieldSyncFrom))
}

// WhereFilterTags applies the entql json.RawMessage predicate on the filter_tags field.
func (f *ConnectionShopifyFilter) WhereFilterTags(p entql.BytesP) {
	f.Where(p.Field(connectionshopify.FieldFilterTags))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ConnectionShopifyFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ConnectionShopifyFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *ConnectionShopifyFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *ConnectionShopifyFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ConsolidationQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConsolidationQuery builder.
func (cq *ConsolidationQuery) Filter() *ConsolidationFilter {
	return &ConsolidationFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConsolidationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConsolidationMutation builder.
func (m *ConsolidationMutation) Filter() *ConsolidationFilter {
	return &ConsolidationFilter{config: m.config, predicateAdder: m}
}

// ConsolidationFilter provides a generic filtering capability at runtime for ConsolidationQuery.
type ConsolidationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConsolidationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ConsolidationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(consolidation.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ConsolidationFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(consolidation.FieldTenantID))
}

// WherePublicID applies the entql string predicate on the public_id field.
func (f *ConsolidationFilter) WherePublicID(p entql.StringP) {
	f.Where(p.Field(consolidation.FieldPublicID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ConsolidationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(consolidation.FieldDescription))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ConsolidationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(consolidation.FieldStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ConsolidationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(consolidation.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ConsolidationFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPallets applies a predicate to check if query has an edge pallets.
func (f *ConsolidationFilter) WhereHasPallets() {
	f.Where(entql.HasEdge("pallets"))
}

// WhereHasPalletsWith applies a predicate to check if query has an edge pallets with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasPalletsWith(preds ...predicate.Pallet) {
	f.Where(entql.HasEdgeWith("pallets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *ConsolidationFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *ConsolidationFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRecipient applies a predicate to check if query has an edge recipient.
func (f *ConsolidationFilter) WhereHasRecipient() {
	f.Where(entql.HasEdge("recipient"))
}

// WhereHasRecipientWith applies a predicate to check if query has an edge recipient with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasRecipientWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("recipient", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSender applies a predicate to check if query has an edge sender.
func (f *ConsolidationFilter) WhereHasSender() {
	f.Where(entql.HasEdge("sender"))
}

// WhereHasSenderWith applies a predicate to check if query has an edge sender with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasSenderWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("sender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ConsolidationFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCancelledShipments applies a predicate to check if query has an edge cancelled_shipments.
func (f *ConsolidationFilter) WhereHasCancelledShipments() {
	f.Where(entql.HasEdge("cancelled_shipments"))
}

// WhereHasCancelledShipmentsWith applies a predicate to check if query has an edge cancelled_shipments with a given conditions (other predicates).
func (f *ConsolidationFilter) WhereHasCancelledShipmentsWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("cancelled_shipments", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContactQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContactQuery builder.
func (cq *ContactQuery) Filter() *ContactFilter {
	return &ContactFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContactMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContactMutation builder.
func (m *ContactMutation) Filter() *ContactFilter {
	return &ContactFilter{config: m.config, predicateAdder: m}
}

// ContactFilter provides a generic filtering capability at runtime for ContactQuery.
type ContactFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContactFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ContactFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(contact.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ContactFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(contact.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ContactFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(contact.FieldName))
}

// WhereSurname applies the entql string predicate on the surname field.
func (f *ContactFilter) WhereSurname(p entql.StringP) {
	f.Where(p.Field(contact.FieldSurname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *ContactFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(contact.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *ContactFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(contact.FieldPhoneNumber))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ContactFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ContactFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBillingContact applies a predicate to check if query has an edge billing_contact.
func (f *ContactFilter) WhereHasBillingContact() {
	f.Where(entql.HasEdge("billing_contact"))
}

// WhereHasBillingContactWith applies a predicate to check if query has an edge billing_contact with a given conditions (other predicates).
func (f *ContactFilter) WhereHasBillingContactWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("billing_contact", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminContact applies a predicate to check if query has an edge admin_contact.
func (f *ContactFilter) WhereHasAdminContact() {
	f.Where(entql.HasEdge("admin_contact"))
}

// WhereHasAdminContactWith applies a predicate to check if query has an edge admin_contact with a given conditions (other predicates).
func (f *ContactFilter) WhereHasAdminContactWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("admin_contact", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CountryQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CountryQuery builder.
func (cq *CountryQuery) Filter() *CountryFilter {
	return &CountryFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CountryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CountryMutation builder.
func (m *CountryMutation) Filter() *CountryFilter {
	return &CountryFilter{config: m.config, predicateAdder: m}
}

// CountryFilter provides a generic filtering capability at runtime for CountryQuery.
type CountryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CountryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CountryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(country.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *CountryFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(country.FieldLabel))
}

// WhereAlpha2 applies the entql string predicate on the alpha_2 field.
func (f *CountryFilter) WhereAlpha2(p entql.StringP) {
	f.Where(p.Field(country.FieldAlpha2))
}

// WhereAlpha3 applies the entql string predicate on the alpha_3 field.
func (f *CountryFilter) WhereAlpha3(p entql.StringP) {
	f.Where(p.Field(country.FieldAlpha3))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CountryFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(country.FieldCode))
}

// WhereRegion applies the entql string predicate on the region field.
func (f *CountryFilter) WhereRegion(p entql.StringP) {
	f.Where(p.Field(country.FieldRegion))
}

// WhereHasDeliveryRule applies a predicate to check if query has an edge delivery_rule.
func (f *CountryFilter) WhereHasDeliveryRule() {
	f.Where(entql.HasEdge("delivery_rule"))
}

// WhereHasDeliveryRuleWith applies a predicate to check if query has an edge delivery_rule with a given conditions (other predicates).
func (f *CountryFilter) WhereHasDeliveryRuleWith(preds ...predicate.DeliveryRule) {
	f.Where(entql.HasEdgeWith("delivery_rule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddress applies a predicate to check if query has an edge address.
func (f *CountryFilter) WhereHasAddress() {
	f.Where(entql.HasEdge("address"))
}

// WhereHasAddressWith applies a predicate to check if query has an edge address with a given conditions (other predicates).
func (f *CountryFilter) WhereHasAddressWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("address", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddressGlobal applies a predicate to check if query has an edge address_global.
func (f *CountryFilter) WhereHasAddressGlobal() {
	f.Where(entql.HasEdge("address_global"))
}

// WhereHasAddressGlobalWith applies a predicate to check if query has an edge address_global with a given conditions (other predicates).
func (f *CountryFilter) WhereHasAddressGlobalWith(preds ...predicate.AddressGlobal) {
	f.Where(entql.HasEdgeWith("address_global", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServicePostNordConsignee applies a predicate to check if query has an edge carrier_additional_service_post_nord_consignee.
func (f *CountryFilter) WhereHasCarrierAdditionalServicePostNordConsignee() {
	f.Where(entql.HasEdge("carrier_additional_service_post_nord_consignee"))
}

// WhereHasCarrierAdditionalServicePostNordConsigneeWith applies a predicate to check if query has an edge carrier_additional_service_post_nord_consignee with a given conditions (other predicates).
func (f *CountryFilter) WhereHasCarrierAdditionalServicePostNordConsigneeWith(preds ...predicate.CarrierAdditionalServicePostNord) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_post_nord_consignee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServicePostNordConsignor applies a predicate to check if query has an edge carrier_additional_service_post_nord_consignor.
func (f *CountryFilter) WhereHasCarrierAdditionalServicePostNordConsignor() {
	f.Where(entql.HasEdge("carrier_additional_service_post_nord_consignor"))
}

// WhereHasCarrierAdditionalServicePostNordConsignorWith applies a predicate to check if query has an edge carrier_additional_service_post_nord_consignor with a given conditions (other predicates).
func (f *CountryFilter) WhereHasCarrierAdditionalServicePostNordConsignorWith(preds ...predicate.CarrierAdditionalServicePostNord) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_post_nord_consignor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceGLSConsignee applies a predicate to check if query has an edge carrier_additional_service_gls_consignee.
func (f *CountryFilter) WhereHasCarrierAdditionalServiceGLSConsignee() {
	f.Where(entql.HasEdge("carrier_additional_service_gls_consignee"))
}

// WhereHasCarrierAdditionalServiceGLSConsigneeWith applies a predicate to check if query has an edge carrier_additional_service_gls_consignee with a given conditions (other predicates).
func (f *CountryFilter) WhereHasCarrierAdditionalServiceGLSConsigneeWith(preds ...predicate.CarrierAdditionalServiceGLS) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_gls_consignee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceGLSConsignor applies a predicate to check if query has an edge carrier_additional_service_gls_consignor.
func (f *CountryFilter) WhereHasCarrierAdditionalServiceGLSConsignor() {
	f.Where(entql.HasEdge("carrier_additional_service_gls_consignor"))
}

// WhereHasCarrierAdditionalServiceGLSConsignorWith applies a predicate to check if query has an edge carrier_additional_service_gls_consignor with a given conditions (other predicates).
func (f *CountryFilter) WhereHasCarrierAdditionalServiceGLSConsignorWith(preds ...predicate.CarrierAdditionalServiceGLS) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_gls_consignor", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountryHarmonizedCode applies a predicate to check if query has an edge country_harmonized_code.
func (f *CountryFilter) WhereHasCountryHarmonizedCode() {
	f.Where(entql.HasEdge("country_harmonized_code"))
}

// WhereHasCountryHarmonizedCodeWith applies a predicate to check if query has an edge country_harmonized_code with a given conditions (other predicates).
func (f *CountryFilter) WhereHasCountryHarmonizedCodeWith(preds ...predicate.CountryHarmonizedCode) {
	f.Where(entql.HasEdgeWith("country_harmonized_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInventoryItem applies a predicate to check if query has an edge inventory_item.
func (f *CountryFilter) WhereHasInventoryItem() {
	f.Where(entql.HasEdge("inventory_item"))
}

// WhereHasInventoryItemWith applies a predicate to check if query has an edge inventory_item with a given conditions (other predicates).
func (f *CountryFilter) WhereHasInventoryItemWith(preds ...predicate.InventoryItem) {
	f.Where(entql.HasEdgeWith("inventory_item", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (chcq *CountryHarmonizedCodeQuery) addPredicate(pred func(s *sql.Selector)) {
	chcq.predicates = append(chcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CountryHarmonizedCodeQuery builder.
func (chcq *CountryHarmonizedCodeQuery) Filter() *CountryHarmonizedCodeFilter {
	return &CountryHarmonizedCodeFilter{config: chcq.config, predicateAdder: chcq}
}

// addPredicate implements the predicateAdder interface.
func (m *CountryHarmonizedCodeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CountryHarmonizedCodeMutation builder.
func (m *CountryHarmonizedCodeMutation) Filter() *CountryHarmonizedCodeFilter {
	return &CountryHarmonizedCodeFilter{config: m.config, predicateAdder: m}
}

// CountryHarmonizedCodeFilter provides a generic filtering capability at runtime for CountryHarmonizedCodeQuery.
type CountryHarmonizedCodeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CountryHarmonizedCodeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CountryHarmonizedCodeFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(countryharmonizedcode.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *CountryHarmonizedCodeFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(countryharmonizedcode.FieldTenantID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CountryHarmonizedCodeFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(countryharmonizedcode.FieldCode))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *CountryHarmonizedCodeFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *CountryHarmonizedCodeFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInventoryItem applies a predicate to check if query has an edge inventory_item.
func (f *CountryHarmonizedCodeFilter) WhereHasInventoryItem() {
	f.Where(entql.HasEdge("inventory_item"))
}

// WhereHasInventoryItemWith applies a predicate to check if query has an edge inventory_item with a given conditions (other predicates).
func (f *CountryHarmonizedCodeFilter) WhereHasInventoryItemWith(preds ...predicate.InventoryItem) {
	f.Where(entql.HasEdgeWith("inventory_item", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountry applies a predicate to check if query has an edge country.
func (f *CountryHarmonizedCodeFilter) WhereHasCountry() {
	f.Where(entql.HasEdge("country"))
}

// WhereHasCountryWith applies a predicate to check if query has an edge country with a given conditions (other predicates).
func (f *CountryHarmonizedCodeFilter) WhereHasCountryWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("country", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CurrencyQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CurrencyQuery builder.
func (cq *CurrencyQuery) Filter() *CurrencyFilter {
	return &CurrencyFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CurrencyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CurrencyMutation builder.
func (m *CurrencyMutation) Filter() *CurrencyFilter {
	return &CurrencyFilter{config: m.config, predicateAdder: m}
}

// CurrencyFilter provides a generic filtering capability at runtime for CurrencyQuery.
type CurrencyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CurrencyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *CurrencyFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(currency.FieldID))
}

// WhereDisplay applies the entql string predicate on the display field.
func (f *CurrencyFilter) WhereDisplay(p entql.StringP) {
	f.Where(p.Field(currency.FieldDisplay))
}

// WhereCurrencyCode applies the entql string predicate on the currency_code field.
func (f *CurrencyFilter) WhereCurrencyCode(p entql.StringP) {
	f.Where(p.Field(currency.FieldCurrencyCode))
}

// WhereHasOrderLine applies a predicate to check if query has an edge order_line.
func (f *CurrencyFilter) WhereHasOrderLine() {
	f.Where(entql.HasEdge("order_line"))
}

// WhereHasOrderLineWith applies a predicate to check if query has an edge order_line with a given conditions (other predicates).
func (f *CurrencyFilter) WhereHasOrderLineWith(preds ...predicate.OrderLine) {
	f.Where(entql.HasEdgeWith("order_line", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryRule applies a predicate to check if query has an edge delivery_rule.
func (f *CurrencyFilter) WhereHasDeliveryRule() {
	f.Where(entql.HasEdge("delivery_rule"))
}

// WhereHasDeliveryRuleWith applies a predicate to check if query has an edge delivery_rule with a given conditions (other predicates).
func (f *CurrencyFilter) WhereHasDeliveryRuleWith(preds ...predicate.DeliveryRule) {
	f.Where(entql.HasEdgeWith("delivery_rule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (doq *DeliveryOptionQuery) addPredicate(pred func(s *sql.Selector)) {
	doq.predicates = append(doq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionQuery builder.
func (doq *DeliveryOptionQuery) Filter() *DeliveryOptionFilter {
	return &DeliveryOptionFilter{config: doq.config, predicateAdder: doq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionMutation builder.
func (m *DeliveryOptionMutation) Filter() *DeliveryOptionFilter {
	return &DeliveryOptionFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionFilter provides a generic filtering capability at runtime for DeliveryOptionQuery.
type DeliveryOptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoption.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoption.FieldTenantID))
}

// WhereArchivedAt applies the entql time.Time predicate on the archived_at field.
func (f *DeliveryOptionFilter) WhereArchivedAt(p entql.TimeP) {
	f.Where(p.Field(deliveryoption.FieldArchivedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *DeliveryOptionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(deliveryoption.FieldName))
}

// WhereSortOrder applies the entql int predicate on the sort_order field.
func (f *DeliveryOptionFilter) WhereSortOrder(p entql.IntP) {
	f.Where(p.Field(deliveryoption.FieldSortOrder))
}

// WhereClickOptionDisplayCount applies the entql int predicate on the click_option_display_count field.
func (f *DeliveryOptionFilter) WhereClickOptionDisplayCount(p entql.IntP) {
	f.Where(p.Field(deliveryoption.FieldClickOptionDisplayCount))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *DeliveryOptionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(deliveryoption.FieldDescription))
}

// WhereClickCollect applies the entql bool predicate on the click_collect field.
func (f *DeliveryOptionFilter) WhereClickCollect(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldClickCollect))
}

// WhereOverrideSenderAddress applies the entql bool predicate on the override_sender_address field.
func (f *DeliveryOptionFilter) WhereOverrideSenderAddress(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldOverrideSenderAddress))
}

// WhereOverrideReturnAddress applies the entql bool predicate on the override_return_address field.
func (f *DeliveryOptionFilter) WhereOverrideReturnAddress(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldOverrideReturnAddress))
}

// WhereHideDeliveryOption applies the entql bool predicate on the hide_delivery_option field.
func (f *DeliveryOptionFilter) WhereHideDeliveryOption(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldHideDeliveryOption))
}

// WhereDeliveryEstimateFrom applies the entql int predicate on the delivery_estimate_from field.
func (f *DeliveryOptionFilter) WhereDeliveryEstimateFrom(p entql.IntP) {
	f.Where(p.Field(deliveryoption.FieldDeliveryEstimateFrom))
}

// WhereDeliveryEstimateTo applies the entql int predicate on the delivery_estimate_to field.
func (f *DeliveryOptionFilter) WhereDeliveryEstimateTo(p entql.IntP) {
	f.Where(p.Field(deliveryoption.FieldDeliveryEstimateTo))
}

// WhereWebshipperIntegration applies the entql bool predicate on the webshipper_integration field.
func (f *DeliveryOptionFilter) WhereWebshipperIntegration(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldWebshipperIntegration))
}

// WhereWebshipperID applies the entql int predicate on the webshipper_id field.
func (f *DeliveryOptionFilter) WhereWebshipperID(p entql.IntP) {
	f.Where(p.Field(deliveryoption.FieldWebshipperID))
}

// WhereShipmondoIntegration applies the entql bool predicate on the shipmondo_integration field.
func (f *DeliveryOptionFilter) WhereShipmondoIntegration(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldShipmondoIntegration))
}

// WhereShipmondoDeliveryOption applies the entql string predicate on the shipmondo_delivery_option field.
func (f *DeliveryOptionFilter) WhereShipmondoDeliveryOption(p entql.StringP) {
	f.Where(p.Field(deliveryoption.FieldShipmondoDeliveryOption))
}

// WhereCustomsEnabled applies the entql bool predicate on the customs_enabled field.
func (f *DeliveryOptionFilter) WhereCustomsEnabled(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldCustomsEnabled))
}

// WhereCustomsSigner applies the entql string predicate on the customs_signer field.
func (f *DeliveryOptionFilter) WhereCustomsSigner(p entql.StringP) {
	f.Where(p.Field(deliveryoption.FieldCustomsSigner))
}

// WhereHideIfCompanyEmpty applies the entql bool predicate on the hide_if_company_empty field.
func (f *DeliveryOptionFilter) WhereHideIfCompanyEmpty(p entql.BoolP) {
	f.Where(p.Field(deliveryoption.FieldHideIfCompanyEmpty))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *DeliveryOptionFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryRule applies a predicate to check if query has an edge delivery_rule.
func (f *DeliveryOptionFilter) WhereHasDeliveryRule() {
	f.Where(entql.HasEdge("delivery_rule"))
}

// WhereHasDeliveryRuleWith applies a predicate to check if query has an edge delivery_rule with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryRuleWith(preds ...predicate.DeliveryRule) {
	f.Where(entql.HasEdgeWith("delivery_rule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionDAO applies a predicate to check if query has an edge delivery_option_dao.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionDAO() {
	f.Where(entql.HasEdge("delivery_option_dao"))
}

// WhereHasDeliveryOptionDAOWith applies a predicate to check if query has an edge delivery_option_dao with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionDAOWith(preds ...predicate.DeliveryOptionDAO) {
	f.Where(entql.HasEdgeWith("delivery_option_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionDF applies a predicate to check if query has an edge delivery_option_df.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionDF() {
	f.Where(entql.HasEdge("delivery_option_df"))
}

// WhereHasDeliveryOptionDFWith applies a predicate to check if query has an edge delivery_option_df with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionDFWith(preds ...predicate.DeliveryOptionDF) {
	f.Where(entql.HasEdgeWith("delivery_option_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionDSV applies a predicate to check if query has an edge delivery_option_dsv.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionDSV() {
	f.Where(entql.HasEdge("delivery_option_dsv"))
}

// WhereHasDeliveryOptionDSVWith applies a predicate to check if query has an edge delivery_option_dsv with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionDSVWith(preds ...predicate.DeliveryOptionDSV) {
	f.Where(entql.HasEdgeWith("delivery_option_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionEasyPost applies a predicate to check if query has an edge delivery_option_easy_post.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionEasyPost() {
	f.Where(entql.HasEdge("delivery_option_easy_post"))
}

// WhereHasDeliveryOptionEasyPostWith applies a predicate to check if query has an edge delivery_option_easy_post with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionEasyPostWith(preds ...predicate.DeliveryOptionEasyPost) {
	f.Where(entql.HasEdgeWith("delivery_option_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionGLS applies a predicate to check if query has an edge delivery_option_gls.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionGLS() {
	f.Where(entql.HasEdge("delivery_option_gls"))
}

// WhereHasDeliveryOptionGLSWith applies a predicate to check if query has an edge delivery_option_gls with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionGLSWith(preds ...predicate.DeliveryOptionGLS) {
	f.Where(entql.HasEdgeWith("delivery_option_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionPostNord applies a predicate to check if query has an edge delivery_option_post_nord.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionPostNord() {
	f.Where(entql.HasEdge("delivery_option_post_nord"))
}

// WhereHasDeliveryOptionPostNordWith applies a predicate to check if query has an edge delivery_option_post_nord with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionPostNordWith(preds ...predicate.DeliveryOptionPostNord) {
	f.Where(entql.HasEdgeWith("delivery_option_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionUSPS applies a predicate to check if query has an edge delivery_option_usps.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionUSPS() {
	f.Where(entql.HasEdge("delivery_option_usps"))
}

// WhereHasDeliveryOptionUSPSWith applies a predicate to check if query has an edge delivery_option_usps with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionUSPSWith(preds ...predicate.DeliveryOptionUSPS) {
	f.Where(entql.HasEdgeWith("delivery_option_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionBring applies a predicate to check if query has an edge delivery_option_bring.
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionBring() {
	f.Where(entql.HasEdge("delivery_option_bring"))
}

// WhereHasDeliveryOptionBringWith applies a predicate to check if query has an edge delivery_option_bring with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDeliveryOptionBringWith(preds ...predicate.DeliveryOptionBring) {
	f.Where(entql.HasEdgeWith("delivery_option_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortals applies a predicate to check if query has an edge return_portals.
func (f *DeliveryOptionFilter) WhereHasReturnPortals() {
	f.Where(entql.HasEdge("return_portals"))
}

// WhereHasReturnPortalsWith applies a predicate to check if query has an edge return_portals with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasReturnPortalsWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *DeliveryOptionFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColli applies a predicate to check if query has an edge return_colli.
func (f *DeliveryOptionFilter) WhereHasReturnColli() {
	f.Where(entql.HasEdge("return_colli"))
}

// WhereHasReturnColliWith applies a predicate to check if query has an edge return_colli with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasReturnColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierService applies a predicate to check if query has an edge carrier_service.
func (f *DeliveryOptionFilter) WhereHasCarrierService() {
	f.Where(entql.HasEdge("carrier_service"))
}

// WhereHasCarrierServiceWith applies a predicate to check if query has an edge carrier_service with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasCarrierServiceWith(preds ...predicate.CarrierService) {
	f.Where(entql.HasEdgeWith("carrier_service", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *DeliveryOptionFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnectionDefault applies a predicate to check if query has an edge connection_default.
func (f *DeliveryOptionFilter) WhereHasConnectionDefault() {
	f.Where(entql.HasEdge("connection_default"))
}

// WhereHasConnectionDefaultWith applies a predicate to check if query has an edge connection_default with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasConnectionDefaultWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection_default", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionGroupOne applies a predicate to check if query has an edge hypothesis_test_delivery_option_group_one.
func (f *DeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionGroupOne() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_group_one"))
}

// WhereHasHypothesisTestDeliveryOptionGroupOneWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_group_one with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionGroupOneWith(preds ...predicate.HypothesisTestDeliveryOption) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_group_one", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionGroupTwo applies a predicate to check if query has an edge hypothesis_test_delivery_option_group_two.
func (f *DeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionGroupTwo() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_group_two"))
}

// WhereHasHypothesisTestDeliveryOptionGroupTwoWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_group_two with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionGroupTwoWith(preds ...predicate.HypothesisTestDeliveryOption) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_group_two", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionLookup applies a predicate to check if query has an edge hypothesis_test_delivery_option_lookup.
func (f *DeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionLookup() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_lookup"))
}

// WhereHasHypothesisTestDeliveryOptionLookupWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_lookup with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionLookupWith(preds ...predicate.HypothesisTestDeliveryOptionLookup) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_lookup", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasClickCollectLocation applies a predicate to check if query has an edge click_collect_location.
func (f *DeliveryOptionFilter) WhereHasClickCollectLocation() {
	f.Where(entql.HasEdge("click_collect_location"))
}

// WhereHasClickCollectLocationWith applies a predicate to check if query has an edge click_collect_location with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasClickCollectLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("click_collect_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailClickCollectAtStore applies a predicate to check if query has an edge email_click_collect_at_store.
func (f *DeliveryOptionFilter) WhereHasEmailClickCollectAtStore() {
	f.Where(entql.HasEdge("email_click_collect_at_store"))
}

// WhereHasEmailClickCollectAtStoreWith applies a predicate to check if query has an edge email_click_collect_at_store with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasEmailClickCollectAtStoreWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_click_collect_at_store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConsolidation applies a predicate to check if query has an edge consolidation.
func (f *DeliveryOptionFilter) WhereHasConsolidation() {
	f.Where(entql.HasEdge("consolidation"))
}

// WhereHasConsolidationWith applies a predicate to check if query has an edge consolidation with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultPackaging applies a predicate to check if query has an edge default_packaging.
func (f *DeliveryOptionFilter) WhereHasDefaultPackaging() {
	f.Where(entql.HasEdge("default_packaging"))
}

// WhereHasDefaultPackagingWith applies a predicate to check if query has an edge default_packaging with a given conditions (other predicates).
func (f *DeliveryOptionFilter) WhereHasDefaultPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("default_packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dobq *DeliveryOptionBringQuery) addPredicate(pred func(s *sql.Selector)) {
	dobq.predicates = append(dobq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionBringQuery builder.
func (dobq *DeliveryOptionBringQuery) Filter() *DeliveryOptionBringFilter {
	return &DeliveryOptionBringFilter{config: dobq.config, predicateAdder: dobq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionBringMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionBringMutation builder.
func (m *DeliveryOptionBringMutation) Filter() *DeliveryOptionBringFilter {
	return &DeliveryOptionBringFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionBringFilter provides a generic filtering capability at runtime for DeliveryOptionBringQuery.
type DeliveryOptionBringFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionBringFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionBringFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptionbring.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionBringFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptionbring.FieldTenantID))
}

// WhereElectronicCustoms applies the entql bool predicate on the electronic_customs field.
func (f *DeliveryOptionBringFilter) WhereElectronicCustoms(p entql.BoolP) {
	f.Where(p.Field(deliveryoptionbring.FieldElectronicCustoms))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionBringFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionBringFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionBringFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionBringFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceBring applies a predicate to check if query has an edge carrier_additional_service_bring.
func (f *DeliveryOptionBringFilter) WhereHasCarrierAdditionalServiceBring() {
	f.Where(entql.HasEdge("carrier_additional_service_bring"))
}

// WhereHasCarrierAdditionalServiceBringWith applies a predicate to check if query has an edge carrier_additional_service_bring with a given conditions (other predicates).
func (f *DeliveryOptionBringFilter) WhereHasCarrierAdditionalServiceBringWith(preds ...predicate.CarrierAdditionalServiceBring) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dodq *DeliveryOptionDAOQuery) addPredicate(pred func(s *sql.Selector)) {
	dodq.predicates = append(dodq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionDAOQuery builder.
func (dodq *DeliveryOptionDAOQuery) Filter() *DeliveryOptionDAOFilter {
	return &DeliveryOptionDAOFilter{config: dodq.config, predicateAdder: dodq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionDAOMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionDAOMutation builder.
func (m *DeliveryOptionDAOMutation) Filter() *DeliveryOptionDAOFilter {
	return &DeliveryOptionDAOFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionDAOFilter provides a generic filtering capability at runtime for DeliveryOptionDAOQuery.
type DeliveryOptionDAOFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionDAOFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionDAOFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiondao.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionDAOFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiondao.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionDAOFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionDAOFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionDAOFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionDAOFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceDAO applies a predicate to check if query has an edge carrier_additional_service_dao.
func (f *DeliveryOptionDAOFilter) WhereHasCarrierAdditionalServiceDAO() {
	f.Where(entql.HasEdge("carrier_additional_service_dao"))
}

// WhereHasCarrierAdditionalServiceDAOWith applies a predicate to check if query has an edge carrier_additional_service_dao with a given conditions (other predicates).
func (f *DeliveryOptionDAOFilter) WhereHasCarrierAdditionalServiceDAOWith(preds ...predicate.CarrierAdditionalServiceDAO) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dodq *DeliveryOptionDFQuery) addPredicate(pred func(s *sql.Selector)) {
	dodq.predicates = append(dodq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionDFQuery builder.
func (dodq *DeliveryOptionDFQuery) Filter() *DeliveryOptionDFFilter {
	return &DeliveryOptionDFFilter{config: dodq.config, predicateAdder: dodq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionDFMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionDFMutation builder.
func (m *DeliveryOptionDFMutation) Filter() *DeliveryOptionDFFilter {
	return &DeliveryOptionDFFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionDFFilter provides a generic filtering capability at runtime for DeliveryOptionDFQuery.
type DeliveryOptionDFFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionDFFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionDFFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiondf.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionDFFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiondf.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionDFFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionDFFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionDFFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionDFFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceDF applies a predicate to check if query has an edge carrier_additional_service_df.
func (f *DeliveryOptionDFFilter) WhereHasCarrierAdditionalServiceDF() {
	f.Where(entql.HasEdge("carrier_additional_service_df"))
}

// WhereHasCarrierAdditionalServiceDFWith applies a predicate to check if query has an edge carrier_additional_service_df with a given conditions (other predicates).
func (f *DeliveryOptionDFFilter) WhereHasCarrierAdditionalServiceDFWith(preds ...predicate.CarrierAdditionalServiceDF) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dodq *DeliveryOptionDSVQuery) addPredicate(pred func(s *sql.Selector)) {
	dodq.predicates = append(dodq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionDSVQuery builder.
func (dodq *DeliveryOptionDSVQuery) Filter() *DeliveryOptionDSVFilter {
	return &DeliveryOptionDSVFilter{config: dodq.config, predicateAdder: dodq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionDSVMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionDSVMutation builder.
func (m *DeliveryOptionDSVMutation) Filter() *DeliveryOptionDSVFilter {
	return &DeliveryOptionDSVFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionDSVFilter provides a generic filtering capability at runtime for DeliveryOptionDSVQuery.
type DeliveryOptionDSVFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionDSVFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[49].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionDSVFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiondsv.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionDSVFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiondsv.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionDSVFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionDSVFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionDSVFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionDSVFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceDSV applies a predicate to check if query has an edge carrier_additional_service_dsv.
func (f *DeliveryOptionDSVFilter) WhereHasCarrierAdditionalServiceDSV() {
	f.Where(entql.HasEdge("carrier_additional_service_dsv"))
}

// WhereHasCarrierAdditionalServiceDSVWith applies a predicate to check if query has an edge carrier_additional_service_dsv with a given conditions (other predicates).
func (f *DeliveryOptionDSVFilter) WhereHasCarrierAdditionalServiceDSVWith(preds ...predicate.CarrierAdditionalServiceDSV) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (doepq *DeliveryOptionEasyPostQuery) addPredicate(pred func(s *sql.Selector)) {
	doepq.predicates = append(doepq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionEasyPostQuery builder.
func (doepq *DeliveryOptionEasyPostQuery) Filter() *DeliveryOptionEasyPostFilter {
	return &DeliveryOptionEasyPostFilter{config: doepq.config, predicateAdder: doepq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionEasyPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionEasyPostMutation builder.
func (m *DeliveryOptionEasyPostMutation) Filter() *DeliveryOptionEasyPostFilter {
	return &DeliveryOptionEasyPostFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionEasyPostFilter provides a generic filtering capability at runtime for DeliveryOptionEasyPostQuery.
type DeliveryOptionEasyPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionEasyPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[50].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionEasyPostFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptioneasypost.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionEasyPostFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptioneasypost.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionEasyPostFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionEasyPostFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionEasyPostFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionEasyPostFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAddServEasyPost applies a predicate to check if query has an edge carrier_add_serv_easy_post.
func (f *DeliveryOptionEasyPostFilter) WhereHasCarrierAddServEasyPost() {
	f.Where(entql.HasEdge("carrier_add_serv_easy_post"))
}

// WhereHasCarrierAddServEasyPostWith applies a predicate to check if query has an edge carrier_add_serv_easy_post with a given conditions (other predicates).
func (f *DeliveryOptionEasyPostFilter) WhereHasCarrierAddServEasyPostWith(preds ...predicate.CarrierAdditionalServiceEasyPost) {
	f.Where(entql.HasEdgeWith("carrier_add_serv_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dogq *DeliveryOptionGLSQuery) addPredicate(pred func(s *sql.Selector)) {
	dogq.predicates = append(dogq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionGLSQuery builder.
func (dogq *DeliveryOptionGLSQuery) Filter() *DeliveryOptionGLSFilter {
	return &DeliveryOptionGLSFilter{config: dogq.config, predicateAdder: dogq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionGLSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionGLSMutation builder.
func (m *DeliveryOptionGLSMutation) Filter() *DeliveryOptionGLSFilter {
	return &DeliveryOptionGLSFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionGLSFilter provides a generic filtering capability at runtime for DeliveryOptionGLSQuery.
type DeliveryOptionGLSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionGLSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[51].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionGLSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiongls.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionGLSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptiongls.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionGLSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionGLSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionGLSFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionGLSFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceGLS applies a predicate to check if query has an edge carrier_additional_service_gls.
func (f *DeliveryOptionGLSFilter) WhereHasCarrierAdditionalServiceGLS() {
	f.Where(entql.HasEdge("carrier_additional_service_gls"))
}

// WhereHasCarrierAdditionalServiceGLSWith applies a predicate to check if query has an edge carrier_additional_service_gls with a given conditions (other predicates).
func (f *DeliveryOptionGLSFilter) WhereHasCarrierAdditionalServiceGLSWith(preds ...predicate.CarrierAdditionalServiceGLS) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dopnq *DeliveryOptionPostNordQuery) addPredicate(pred func(s *sql.Selector)) {
	dopnq.predicates = append(dopnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionPostNordQuery builder.
func (dopnq *DeliveryOptionPostNordQuery) Filter() *DeliveryOptionPostNordFilter {
	return &DeliveryOptionPostNordFilter{config: dopnq.config, predicateAdder: dopnq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionPostNordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionPostNordMutation builder.
func (m *DeliveryOptionPostNordMutation) Filter() *DeliveryOptionPostNordFilter {
	return &DeliveryOptionPostNordFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionPostNordFilter provides a generic filtering capability at runtime for DeliveryOptionPostNordQuery.
type DeliveryOptionPostNordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionPostNordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[52].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionPostNordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptionpostnord.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionPostNordFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptionpostnord.FieldTenantID))
}

// WhereFormatZpl applies the entql bool predicate on the format_zpl field.
func (f *DeliveryOptionPostNordFilter) WhereFormatZpl(p entql.BoolP) {
	f.Where(p.Field(deliveryoptionpostnord.FieldFormatZpl))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionPostNordFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionPostNordFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionPostNordFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionPostNordFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAddServPostNord applies a predicate to check if query has an edge carrier_add_serv_post_nord.
func (f *DeliveryOptionPostNordFilter) WhereHasCarrierAddServPostNord() {
	f.Where(entql.HasEdge("carrier_add_serv_post_nord"))
}

// WhereHasCarrierAddServPostNordWith applies a predicate to check if query has an edge carrier_add_serv_post_nord with a given conditions (other predicates).
func (f *DeliveryOptionPostNordFilter) WhereHasCarrierAddServPostNordWith(preds ...predicate.CarrierAdditionalServicePostNord) {
	f.Where(entql.HasEdgeWith("carrier_add_serv_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (douq *DeliveryOptionUSPSQuery) addPredicate(pred func(s *sql.Selector)) {
	douq.predicates = append(douq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryOptionUSPSQuery builder.
func (douq *DeliveryOptionUSPSQuery) Filter() *DeliveryOptionUSPSFilter {
	return &DeliveryOptionUSPSFilter{config: douq.config, predicateAdder: douq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryOptionUSPSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryOptionUSPSMutation builder.
func (m *DeliveryOptionUSPSMutation) Filter() *DeliveryOptionUSPSFilter {
	return &DeliveryOptionUSPSFilter{config: m.config, predicateAdder: m}
}

// DeliveryOptionUSPSFilter provides a generic filtering capability at runtime for DeliveryOptionUSPSQuery.
type DeliveryOptionUSPSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryOptionUSPSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[53].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryOptionUSPSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryoptionusps.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryOptionUSPSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryoptionusps.FieldTenantID))
}

// WhereFormatZpl applies the entql bool predicate on the format_zpl field.
func (f *DeliveryOptionUSPSFilter) WhereFormatZpl(p entql.BoolP) {
	f.Where(p.Field(deliveryoptionusps.FieldFormatZpl))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryOptionUSPSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryOptionUSPSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryOptionUSPSFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryOptionUSPSFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierAdditionalServiceUSPS applies a predicate to check if query has an edge carrier_additional_service_usps.
func (f *DeliveryOptionUSPSFilter) WhereHasCarrierAdditionalServiceUSPS() {
	f.Where(entql.HasEdge("carrier_additional_service_usps"))
}

// WhereHasCarrierAdditionalServiceUSPSWith applies a predicate to check if query has an edge carrier_additional_service_usps with a given conditions (other predicates).
func (f *DeliveryOptionUSPSFilter) WhereHasCarrierAdditionalServiceUSPSWith(preds ...predicate.CarrierAdditionalServiceUSPS) {
	f.Where(entql.HasEdgeWith("carrier_additional_service_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (drq *DeliveryRuleQuery) addPredicate(pred func(s *sql.Selector)) {
	drq.predicates = append(drq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryRuleQuery builder.
func (drq *DeliveryRuleQuery) Filter() *DeliveryRuleFilter {
	return &DeliveryRuleFilter{config: drq.config, predicateAdder: drq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryRuleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryRuleMutation builder.
func (m *DeliveryRuleMutation) Filter() *DeliveryRuleFilter {
	return &DeliveryRuleFilter{config: m.config, predicateAdder: m}
}

// DeliveryRuleFilter provides a generic filtering capability at runtime for DeliveryRuleQuery.
type DeliveryRuleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryRuleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[54].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryRuleFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryrule.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryRuleFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryrule.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DeliveryRuleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(deliveryrule.FieldName))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *DeliveryRuleFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(deliveryrule.FieldPrice))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryRuleFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryRuleFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryRuleConstraintGroup applies a predicate to check if query has an edge delivery_rule_constraint_group.
func (f *DeliveryRuleFilter) WhereHasDeliveryRuleConstraintGroup() {
	f.Where(entql.HasEdge("delivery_rule_constraint_group"))
}

// WhereHasDeliveryRuleConstraintGroupWith applies a predicate to check if query has an edge delivery_rule_constraint_group with a given conditions (other predicates).
func (f *DeliveryRuleFilter) WhereHasDeliveryRuleConstraintGroupWith(preds ...predicate.DeliveryRuleConstraintGroup) {
	f.Where(entql.HasEdgeWith("delivery_rule_constraint_group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *DeliveryRuleFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *DeliveryRuleFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountry applies a predicate to check if query has an edge country.
func (f *DeliveryRuleFilter) WhereHasCountry() {
	f.Where(entql.HasEdge("country"))
}

// WhereHasCountryWith applies a predicate to check if query has an edge country with a given conditions (other predicates).
func (f *DeliveryRuleFilter) WhereHasCountryWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("country", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCurrency applies a predicate to check if query has an edge currency.
func (f *DeliveryRuleFilter) WhereHasCurrency() {
	f.Where(entql.HasEdge("currency"))
}

// WhereHasCurrencyWith applies a predicate to check if query has an edge currency with a given conditions (other predicates).
func (f *DeliveryRuleFilter) WhereHasCurrencyWith(preds ...predicate.Currency) {
	f.Where(entql.HasEdgeWith("currency", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (drcq *DeliveryRuleConstraintQuery) addPredicate(pred func(s *sql.Selector)) {
	drcq.predicates = append(drcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryRuleConstraintQuery builder.
func (drcq *DeliveryRuleConstraintQuery) Filter() *DeliveryRuleConstraintFilter {
	return &DeliveryRuleConstraintFilter{config: drcq.config, predicateAdder: drcq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryRuleConstraintMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryRuleConstraintMutation builder.
func (m *DeliveryRuleConstraintMutation) Filter() *DeliveryRuleConstraintFilter {
	return &DeliveryRuleConstraintFilter{config: m.config, predicateAdder: m}
}

// DeliveryRuleConstraintFilter provides a generic filtering capability at runtime for DeliveryRuleConstraintQuery.
type DeliveryRuleConstraintFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryRuleConstraintFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[55].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryRuleConstraintFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraint.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryRuleConstraintFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraint.FieldTenantID))
}

// WherePropertyType applies the entql string predicate on the property_type field.
func (f *DeliveryRuleConstraintFilter) WherePropertyType(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraint.FieldPropertyType))
}

// WhereComparison applies the entql string predicate on the comparison field.
func (f *DeliveryRuleConstraintFilter) WhereComparison(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraint.FieldComparison))
}

// WhereSelectedValue applies the entql other predicate on the selected_value field.
func (f *DeliveryRuleConstraintFilter) WhereSelectedValue(p entql.OtherP) {
	f.Where(p.Field(deliveryruleconstraint.FieldSelectedValue))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryRuleConstraintFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryRuleConstraintFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryRuleConstraintGroup applies a predicate to check if query has an edge delivery_rule_constraint_group.
func (f *DeliveryRuleConstraintFilter) WhereHasDeliveryRuleConstraintGroup() {
	f.Where(entql.HasEdge("delivery_rule_constraint_group"))
}

// WhereHasDeliveryRuleConstraintGroupWith applies a predicate to check if query has an edge delivery_rule_constraint_group with a given conditions (other predicates).
func (f *DeliveryRuleConstraintFilter) WhereHasDeliveryRuleConstraintGroupWith(preds ...predicate.DeliveryRuleConstraintGroup) {
	f.Where(entql.HasEdgeWith("delivery_rule_constraint_group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (drcgq *DeliveryRuleConstraintGroupQuery) addPredicate(pred func(s *sql.Selector)) {
	drcgq.predicates = append(drcgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryRuleConstraintGroupQuery builder.
func (drcgq *DeliveryRuleConstraintGroupQuery) Filter() *DeliveryRuleConstraintGroupFilter {
	return &DeliveryRuleConstraintGroupFilter{config: drcgq.config, predicateAdder: drcgq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryRuleConstraintGroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryRuleConstraintGroupMutation builder.
func (m *DeliveryRuleConstraintGroupMutation) Filter() *DeliveryRuleConstraintGroupFilter {
	return &DeliveryRuleConstraintGroupFilter{config: m.config, predicateAdder: m}
}

// DeliveryRuleConstraintGroupFilter provides a generic filtering capability at runtime for DeliveryRuleConstraintGroupQuery.
type DeliveryRuleConstraintGroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryRuleConstraintGroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[56].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DeliveryRuleConstraintGroupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraintgroup.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DeliveryRuleConstraintGroupFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraintgroup.FieldTenantID))
}

// WhereConstraintLogic applies the entql string predicate on the constraint_logic field.
func (f *DeliveryRuleConstraintGroupFilter) WhereConstraintLogic(p entql.StringP) {
	f.Where(p.Field(deliveryruleconstraintgroup.FieldConstraintLogic))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DeliveryRuleConstraintGroupFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DeliveryRuleConstraintGroupFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryRuleConstraints applies a predicate to check if query has an edge delivery_rule_constraints.
func (f *DeliveryRuleConstraintGroupFilter) WhereHasDeliveryRuleConstraints() {
	f.Where(entql.HasEdge("delivery_rule_constraints"))
}

// WhereHasDeliveryRuleConstraintsWith applies a predicate to check if query has an edge delivery_rule_constraints with a given conditions (other predicates).
func (f *DeliveryRuleConstraintGroupFilter) WhereHasDeliveryRuleConstraintsWith(preds ...predicate.DeliveryRuleConstraint) {
	f.Where(entql.HasEdgeWith("delivery_rule_constraints", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryRule applies a predicate to check if query has an edge delivery_rule.
func (f *DeliveryRuleConstraintGroupFilter) WhereHasDeliveryRule() {
	f.Where(entql.HasEdge("delivery_rule"))
}

// WhereHasDeliveryRuleWith applies a predicate to check if query has an edge delivery_rule with a given conditions (other predicates).
func (f *DeliveryRuleConstraintGroupFilter) WhereHasDeliveryRuleWith(preds ...predicate.DeliveryRule) {
	f.Where(entql.HasEdgeWith("delivery_rule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DocumentQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentQuery builder.
func (dq *DocumentQuery) Filter() *DocumentFilter {
	return &DocumentFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentMutation builder.
func (m *DocumentMutation) Filter() *DocumentFilter {
	return &DocumentFilter{config: m.config, predicateAdder: m}
}

// DocumentFilter provides a generic filtering capability at runtime for DocumentQuery.
type DocumentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[57].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DocumentFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(document.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DocumentFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(document.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DocumentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(document.FieldName))
}

// WhereHTMLTemplate applies the entql string predicate on the html_template field.
func (f *DocumentFilter) WhereHTMLTemplate(p entql.StringP) {
	f.Where(p.Field(document.FieldHTMLTemplate))
}

// WhereHTMLHeader applies the entql string predicate on the html_header field.
func (f *DocumentFilter) WhereHTMLHeader(p entql.StringP) {
	f.Where(p.Field(document.FieldHTMLHeader))
}

// WhereHTMLFooter applies the entql string predicate on the html_footer field.
func (f *DocumentFilter) WhereHTMLFooter(p entql.StringP) {
	f.Where(p.Field(document.FieldHTMLFooter))
}

// WhereLastBase64Pdf applies the entql string predicate on the last_base64_pdf field.
func (f *DocumentFilter) WhereLastBase64Pdf(p entql.StringP) {
	f.Where(p.Field(document.FieldLastBase64Pdf))
}

// WhereMergeType applies the entql string predicate on the merge_type field.
func (f *DocumentFilter) WhereMergeType(p entql.StringP) {
	f.Where(p.Field(document.FieldMergeType))
}

// WherePaperSize applies the entql string predicate on the paper_size field.
func (f *DocumentFilter) WherePaperSize(p entql.StringP) {
	f.Where(p.Field(document.FieldPaperSize))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *DocumentFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(document.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *DocumentFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(document.FieldEndAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(document.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DocumentFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DocumentFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierBrand applies a predicate to check if query has an edge carrier_brand.
func (f *DocumentFilter) WhereHasCarrierBrand() {
	f.Where(entql.HasEdge("carrier_brand"))
}

// WhereHasCarrierBrandWith applies a predicate to check if query has an edge carrier_brand with a given conditions (other predicates).
func (f *DocumentFilter) WhereHasCarrierBrandWith(preds ...predicate.CarrierBrand) {
	f.Where(entql.HasEdgeWith("carrier_brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnectionPackingSlip applies a predicate to check if query has an edge connection_packing_slip.
func (f *DocumentFilter) WhereHasConnectionPackingSlip() {
	f.Where(entql.HasEdge("connection_packing_slip"))
}

// WhereHasConnectionPackingSlipWith applies a predicate to check if query has an edge connection_packing_slip with a given conditions (other predicates).
func (f *DocumentFilter) WhereHasConnectionPackingSlipWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection_packing_slip", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dfq *DocumentFileQuery) addPredicate(pred func(s *sql.Selector)) {
	dfq.predicates = append(dfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentFileQuery builder.
func (dfq *DocumentFileQuery) Filter() *DocumentFileFilter {
	return &DocumentFileFilter{config: dfq.config, predicateAdder: dfq}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentFileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentFileMutation builder.
func (m *DocumentFileMutation) Filter() *DocumentFileFilter {
	return &DocumentFileFilter{config: m.config, predicateAdder: m}
}

// DocumentFileFilter provides a generic filtering capability at runtime for DocumentFileQuery.
type DocumentFileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentFileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[58].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DocumentFileFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *DocumentFileFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldTenantID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DocumentFileFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(documentfile.FieldCreatedAt))
}

// WhereStorageType applies the entql string predicate on the storage_type field.
func (f *DocumentFileFilter) WhereStorageType(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldStorageType))
}

// WhereStoragePath applies the entql string predicate on the storage_path field.
func (f *DocumentFileFilter) WhereStoragePath(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldStoragePath))
}

// WhereStoragePathZpl applies the entql string predicate on the storage_path_zpl field.
func (f *DocumentFileFilter) WhereStoragePathZpl(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldStoragePathZpl))
}

// WhereDocType applies the entql string predicate on the doc_type field.
func (f *DocumentFileFilter) WhereDocType(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldDocType))
}

// WhereDataPdfBase64 applies the entql string predicate on the data_pdf_base64 field.
func (f *DocumentFileFilter) WhereDataPdfBase64(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldDataPdfBase64))
}

// WhereDataZplBase64 applies the entql string predicate on the data_zpl_base64 field.
func (f *DocumentFileFilter) WhereDataZplBase64(p entql.StringP) {
	f.Where(p.Field(documentfile.FieldDataZplBase64))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *DocumentFileFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *DocumentFileFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *DocumentFileFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *DocumentFileFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentParcel applies a predicate to check if query has an edge shipment_parcel.
func (f *DocumentFileFilter) WhereHasShipmentParcel() {
	f.Where(entql.HasEdge("shipment_parcel"))
}

// WhereHasShipmentParcelWith applies a predicate to check if query has an edge shipment_parcel with a given conditions (other predicates).
func (f *DocumentFileFilter) WhereHasShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (etq *EmailTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	etq.predicates = append(etq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailTemplateQuery builder.
func (etq *EmailTemplateQuery) Filter() *EmailTemplateFilter {
	return &EmailTemplateFilter{config: etq.config, predicateAdder: etq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailTemplateMutation builder.
func (m *EmailTemplateMutation) Filter() *EmailTemplateFilter {
	return &EmailTemplateFilter{config: m.config, predicateAdder: m}
}

// EmailTemplateFilter provides a generic filtering capability at runtime for EmailTemplateQuery.
type EmailTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[59].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EmailTemplateFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *EmailTemplateFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmailTemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldName))
}

// WhereSubject applies the entql string predicate on the subject field.
func (f *EmailTemplateFilter) WhereSubject(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldSubject))
}

// WhereHTMLTemplate applies the entql string predicate on the html_template field.
func (f *EmailTemplateFilter) WhereHTMLTemplate(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldHTMLTemplate))
}

// WhereMergeType applies the entql string predicate on the merge_type field.
func (f *EmailTemplateFilter) WhereMergeType(p entql.StringP) {
	f.Where(p.Field(emailtemplate.FieldMergeType))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailtemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailtemplate.FieldUpdatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *EmailTemplateFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortalConfirmationLabel applies a predicate to check if query has an edge return_portal_confirmation_label.
func (f *EmailTemplateFilter) WhereHasReturnPortalConfirmationLabel() {
	f.Where(entql.HasEdge("return_portal_confirmation_label"))
}

// WhereHasReturnPortalConfirmationLabelWith applies a predicate to check if query has an edge return_portal_confirmation_label with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasReturnPortalConfirmationLabelWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal_confirmation_label", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortalConfirmationQrCode applies a predicate to check if query has an edge return_portal_confirmation_qr_code.
func (f *EmailTemplateFilter) WhereHasReturnPortalConfirmationQrCode() {
	f.Where(entql.HasEdge("return_portal_confirmation_qr_code"))
}

// WhereHasReturnPortalConfirmationQrCodeWith applies a predicate to check if query has an edge return_portal_confirmation_qr_code with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasReturnPortalConfirmationQrCodeWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal_confirmation_qr_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortalReceived applies a predicate to check if query has an edge return_portal_received.
func (f *EmailTemplateFilter) WhereHasReturnPortalReceived() {
	f.Where(entql.HasEdge("return_portal_received"))
}

// WhereHasReturnPortalReceivedWith applies a predicate to check if query has an edge return_portal_received with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasReturnPortalReceivedWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal_received", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortalAccepted applies a predicate to check if query has an edge return_portal_accepted.
func (f *EmailTemplateFilter) WhereHasReturnPortalAccepted() {
	f.Where(entql.HasEdge("return_portal_accepted"))
}

// WhereHasReturnPortalAcceptedWith applies a predicate to check if query has an edge return_portal_accepted with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasReturnPortalAcceptedWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal_accepted", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionClickCollectAtStore applies a predicate to check if query has an edge delivery_option_click_collect_at_store.
func (f *EmailTemplateFilter) WhereHasDeliveryOptionClickCollectAtStore() {
	f.Where(entql.HasEdge("delivery_option_click_collect_at_store"))
}

// WhereHasDeliveryOptionClickCollectAtStoreWith applies a predicate to check if query has an edge delivery_option_click_collect_at_store with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasDeliveryOptionClickCollectAtStoreWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option_click_collect_at_store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotifications applies a predicate to check if query has an edge notifications.
func (f *EmailTemplateFilter) WhereHasNotifications() {
	f.Where(entql.HasEdge("notifications"))
}

// WhereHasNotificationsWith applies a predicate to check if query has an edge notifications with a given conditions (other predicates).
func (f *EmailTemplateFilter) WhereHasNotificationsWith(preds ...predicate.Notification) {
	f.Where(entql.HasEdgeWith("notifications", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (htq *HypothesisTestQuery) addPredicate(pred func(s *sql.Selector)) {
	htq.predicates = append(htq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HypothesisTestQuery builder.
func (htq *HypothesisTestQuery) Filter() *HypothesisTestFilter {
	return &HypothesisTestFilter{config: htq.config, predicateAdder: htq}
}

// addPredicate implements the predicateAdder interface.
func (m *HypothesisTestMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HypothesisTestMutation builder.
func (m *HypothesisTestMutation) Filter() *HypothesisTestFilter {
	return &HypothesisTestFilter{config: m.config, predicateAdder: m}
}

// HypothesisTestFilter provides a generic filtering capability at runtime for HypothesisTestQuery.
type HypothesisTestFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HypothesisTestFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[60].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HypothesisTestFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hypothesistest.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *HypothesisTestFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(hypothesistest.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *HypothesisTestFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hypothesistest.FieldName))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *HypothesisTestFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(hypothesistest.FieldActive))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *HypothesisTestFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *HypothesisTestFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOption applies a predicate to check if query has an edge hypothesis_test_delivery_option.
func (f *HypothesisTestFilter) WhereHasHypothesisTestDeliveryOption() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option"))
}

// WhereHasHypothesisTestDeliveryOptionWith applies a predicate to check if query has an edge hypothesis_test_delivery_option with a given conditions (other predicates).
func (f *HypothesisTestFilter) WhereHasHypothesisTestDeliveryOptionWith(preds ...predicate.HypothesisTestDeliveryOption) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *HypothesisTestFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *HypothesisTestFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (htdoq *HypothesisTestDeliveryOptionQuery) addPredicate(pred func(s *sql.Selector)) {
	htdoq.predicates = append(htdoq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HypothesisTestDeliveryOptionQuery builder.
func (htdoq *HypothesisTestDeliveryOptionQuery) Filter() *HypothesisTestDeliveryOptionFilter {
	return &HypothesisTestDeliveryOptionFilter{config: htdoq.config, predicateAdder: htdoq}
}

// addPredicate implements the predicateAdder interface.
func (m *HypothesisTestDeliveryOptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HypothesisTestDeliveryOptionMutation builder.
func (m *HypothesisTestDeliveryOptionMutation) Filter() *HypothesisTestDeliveryOptionFilter {
	return &HypothesisTestDeliveryOptionFilter{config: m.config, predicateAdder: m}
}

// HypothesisTestDeliveryOptionFilter provides a generic filtering capability at runtime for HypothesisTestDeliveryOptionQuery.
type HypothesisTestDeliveryOptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HypothesisTestDeliveryOptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[61].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HypothesisTestDeliveryOptionFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoption.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *HypothesisTestDeliveryOptionFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoption.FieldTenantID))
}

// WhereRandomizeWithinGroupSort applies the entql bool predicate on the randomize_within_group_sort field.
func (f *HypothesisTestDeliveryOptionFilter) WhereRandomizeWithinGroupSort(p entql.BoolP) {
	f.Where(p.Field(hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort))
}

// WhereByIntervalRotation applies the entql bool predicate on the by_interval_rotation field.
func (f *HypothesisTestDeliveryOptionFilter) WhereByIntervalRotation(p entql.BoolP) {
	f.Where(p.Field(hypothesistestdeliveryoption.FieldByIntervalRotation))
}

// WhereRotationIntervalHours applies the entql int predicate on the rotation_interval_hours field.
func (f *HypothesisTestDeliveryOptionFilter) WhereRotationIntervalHours(p entql.IntP) {
	f.Where(p.Field(hypothesistestdeliveryoption.FieldRotationIntervalHours))
}

// WhereByOrder applies the entql bool predicate on the by_order field.
func (f *HypothesisTestDeliveryOptionFilter) WhereByOrder(p entql.BoolP) {
	f.Where(p.Field(hypothesistestdeliveryoption.FieldByOrder))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *HypothesisTestDeliveryOptionFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTest applies a predicate to check if query has an edge hypothesis_test.
func (f *HypothesisTestDeliveryOptionFilter) WhereHasHypothesisTest() {
	f.Where(entql.HasEdge("hypothesis_test"))
}

// WhereHasHypothesisTestWith applies a predicate to check if query has an edge hypothesis_test with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionFilter) WhereHasHypothesisTestWith(preds ...predicate.HypothesisTest) {
	f.Where(entql.HasEdgeWith("hypothesis_test", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionRequest applies a predicate to check if query has an edge hypothesis_test_delivery_option_request.
func (f *HypothesisTestDeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionRequest() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_request"))
}

// WhereHasHypothesisTestDeliveryOptionRequestWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_request with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionFilter) WhereHasHypothesisTestDeliveryOptionRequestWith(preds ...predicate.HypothesisTestDeliveryOptionRequest) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_request", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionGroupOne applies a predicate to check if query has an edge delivery_option_group_one.
func (f *HypothesisTestDeliveryOptionFilter) WhereHasDeliveryOptionGroupOne() {
	f.Where(entql.HasEdge("delivery_option_group_one"))
}

// WhereHasDeliveryOptionGroupOneWith applies a predicate to check if query has an edge delivery_option_group_one with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionFilter) WhereHasDeliveryOptionGroupOneWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option_group_one", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptionGroupTwo applies a predicate to check if query has an edge delivery_option_group_two.
func (f *HypothesisTestDeliveryOptionFilter) WhereHasDeliveryOptionGroupTwo() {
	f.Where(entql.HasEdge("delivery_option_group_two"))
}

// WhereHasDeliveryOptionGroupTwoWith applies a predicate to check if query has an edge delivery_option_group_two with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionFilter) WhereHasDeliveryOptionGroupTwoWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option_group_two", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) addPredicate(pred func(s *sql.Selector)) {
	htdolq.predicates = append(htdolq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HypothesisTestDeliveryOptionLookupQuery builder.
func (htdolq *HypothesisTestDeliveryOptionLookupQuery) Filter() *HypothesisTestDeliveryOptionLookupFilter {
	return &HypothesisTestDeliveryOptionLookupFilter{config: htdolq.config, predicateAdder: htdolq}
}

// addPredicate implements the predicateAdder interface.
func (m *HypothesisTestDeliveryOptionLookupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HypothesisTestDeliveryOptionLookupMutation builder.
func (m *HypothesisTestDeliveryOptionLookupMutation) Filter() *HypothesisTestDeliveryOptionLookupFilter {
	return &HypothesisTestDeliveryOptionLookupFilter{config: m.config, predicateAdder: m}
}

// HypothesisTestDeliveryOptionLookupFilter provides a generic filtering capability at runtime for HypothesisTestDeliveryOptionLookupQuery.
type HypothesisTestDeliveryOptionLookupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HypothesisTestDeliveryOptionLookupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[62].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoptionlookup.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoptionlookup.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionRequest applies a predicate to check if query has an edge hypothesis_test_delivery_option_request.
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereHasHypothesisTestDeliveryOptionRequest() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_request"))
}

// WhereHasHypothesisTestDeliveryOptionRequestWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_request with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionLookupFilter) WhereHasHypothesisTestDeliveryOptionRequestWith(preds ...predicate.HypothesisTestDeliveryOptionRequest) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_request", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) addPredicate(pred func(s *sql.Selector)) {
	htdorq.predicates = append(htdorq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HypothesisTestDeliveryOptionRequestQuery builder.
func (htdorq *HypothesisTestDeliveryOptionRequestQuery) Filter() *HypothesisTestDeliveryOptionRequestFilter {
	return &HypothesisTestDeliveryOptionRequestFilter{config: htdorq.config, predicateAdder: htdorq}
}

// addPredicate implements the predicateAdder interface.
func (m *HypothesisTestDeliveryOptionRequestMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HypothesisTestDeliveryOptionRequestMutation builder.
func (m *HypothesisTestDeliveryOptionRequestMutation) Filter() *HypothesisTestDeliveryOptionRequestFilter {
	return &HypothesisTestDeliveryOptionRequestFilter{config: m.config, predicateAdder: m}
}

// HypothesisTestDeliveryOptionRequestFilter provides a generic filtering capability at runtime for HypothesisTestDeliveryOptionRequestQuery.
type HypothesisTestDeliveryOptionRequestFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HypothesisTestDeliveryOptionRequestFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[63].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldTenantID))
}

// WhereOrderHash applies the entql string predicate on the order_hash field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereOrderHash(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldOrderHash))
}

// WhereShippingAddressHash applies the entql string predicate on the shipping_address_hash field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereShippingAddressHash(p entql.StringP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldShippingAddressHash))
}

// WhereIsControlGroup applies the entql bool predicate on the is_control_group field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereIsControlGroup(p entql.BoolP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldIsControlGroup))
}

// WhereRequestCount applies the entql uint predicate on the request_count field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereRequestCount(p entql.UintP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldRequestCount))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldCreatedAt))
}

// WhereLastRequestedAt applies the entql time.Time predicate on the last_requested_at field.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereLastRequestedAt(p entql.TimeP) {
	f.Where(p.Field(hypothesistestdeliveryoptionrequest.FieldLastRequestedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOption applies a predicate to check if query has an edge hypothesis_test_delivery_option.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasHypothesisTestDeliveryOption() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option"))
}

// WhereHasHypothesisTestDeliveryOptionWith applies a predicate to check if query has an edge hypothesis_test_delivery_option with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasHypothesisTestDeliveryOptionWith(preds ...predicate.HypothesisTestDeliveryOption) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionLookup applies a predicate to check if query has an edge hypothesis_test_delivery_option_lookup.
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasHypothesisTestDeliveryOptionLookup() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_lookup"))
}

// WhereHasHypothesisTestDeliveryOptionLookupWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_lookup with a given conditions (other predicates).
func (f *HypothesisTestDeliveryOptionRequestFilter) WhereHasHypothesisTestDeliveryOptionLookupWith(preds ...predicate.HypothesisTestDeliveryOptionLookup) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_lookup", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iiq *InventoryItemQuery) addPredicate(pred func(s *sql.Selector)) {
	iiq.predicates = append(iiq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InventoryItemQuery builder.
func (iiq *InventoryItemQuery) Filter() *InventoryItemFilter {
	return &InventoryItemFilter{config: iiq.config, predicateAdder: iiq}
}

// addPredicate implements the predicateAdder interface.
func (m *InventoryItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InventoryItemMutation builder.
func (m *InventoryItemMutation) Filter() *InventoryItemFilter {
	return &InventoryItemFilter{config: m.config, predicateAdder: m}
}

// InventoryItemFilter provides a generic filtering capability at runtime for InventoryItemQuery.
type InventoryItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InventoryItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[64].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *InventoryItemFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(inventoryitem.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *InventoryItemFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(inventoryitem.FieldTenantID))
}

// WhereExternalID applies the entql string predicate on the external_ID field.
func (f *InventoryItemFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(inventoryitem.FieldExternalID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *InventoryItemFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(inventoryitem.FieldCode))
}

// WhereSku applies the entql string predicate on the sku field.
func (f *InventoryItemFilter) WhereSku(p entql.StringP) {
	f.Where(p.Field(inventoryitem.FieldSku))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *InventoryItemFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *InventoryItemFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountryHarmonizedCode applies a predicate to check if query has an edge country_harmonized_code.
func (f *InventoryItemFilter) WhereHasCountryHarmonizedCode() {
	f.Where(entql.HasEdge("country_harmonized_code"))
}

// WhereHasCountryHarmonizedCodeWith applies a predicate to check if query has an edge country_harmonized_code with a given conditions (other predicates).
func (f *InventoryItemFilter) WhereHasCountryHarmonizedCodeWith(preds ...predicate.CountryHarmonizedCode) {
	f.Where(entql.HasEdgeWith("country_harmonized_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCountryOfOrigin applies a predicate to check if query has an edge country_of_origin.
func (f *InventoryItemFilter) WhereHasCountryOfOrigin() {
	f.Where(entql.HasEdge("country_of_origin"))
}

// WhereHasCountryOfOriginWith applies a predicate to check if query has an edge country_of_origin with a given conditions (other predicates).
func (f *InventoryItemFilter) WhereHasCountryOfOriginWith(preds ...predicate.Country) {
	f.Where(entql.HasEdgeWith("country_of_origin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductVariant applies a predicate to check if query has an edge product_variant.
func (f *InventoryItemFilter) WhereHasProductVariant() {
	f.Where(entql.HasEdge("product_variant"))
}

// WhereHasProductVariantWith applies a predicate to check if query has an edge product_variant with a given conditions (other predicates).
func (f *InventoryItemFilter) WhereHasProductVariantWith(preds ...predicate.ProductVariant) {
	f.Where(entql.HasEdgeWith("product_variant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lq *LanguageQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LanguageQuery builder.
func (lq *LanguageQuery) Filter() *LanguageFilter {
	return &LanguageFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LanguageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LanguageMutation builder.
func (m *LanguageMutation) Filter() *LanguageFilter {
	return &LanguageFilter{config: m.config, predicateAdder: m}
}

// LanguageFilter provides a generic filtering capability at runtime for LanguageQuery.
type LanguageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LanguageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[65].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *LanguageFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(language.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *LanguageFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(language.FieldLabel))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *LanguageFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(language.FieldInternalID))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *LanguageFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *LanguageFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLanguage applies a predicate to check if query has an edge language.
func (f *LanguageFilter) WhereHasLanguage() {
	f.Where(entql.HasEdge("language"))
}

// WhereHasLanguageWith applies a predicate to check if query has an edge language with a given conditions (other predicates).
func (f *LanguageFilter) WhereHasLanguageWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("language", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (lq *LocationQuery) addPredicate(pred func(s *sql.Selector)) {
	lq.predicates = append(lq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LocationQuery builder.
func (lq *LocationQuery) Filter() *LocationFilter {
	return &LocationFilter{config: lq.config, predicateAdder: lq}
}

// addPredicate implements the predicateAdder interface.
func (m *LocationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LocationMutation builder.
func (m *LocationMutation) Filter() *LocationFilter {
	return &LocationFilter{config: m.config, predicateAdder: m}
}

// LocationFilter provides a generic filtering capability at runtime for LocationQuery.
type LocationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LocationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[66].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *LocationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(location.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *LocationFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(location.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *LocationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(location.FieldName))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *LocationFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *LocationFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddress applies a predicate to check if query has an edge address.
func (f *LocationFilter) WhereHasAddress() {
	f.Where(entql.HasEdge("address"))
}

// WhereHasAddressWith applies a predicate to check if query has an edge address with a given conditions (other predicates).
func (f *LocationFilter) WhereHasAddressWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("address", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLocationTags applies a predicate to check if query has an edge location_tags.
func (f *LocationFilter) WhereHasLocationTags() {
	f.Where(entql.HasEdge("location_tags"))
}

// WhereHasLocationTagsWith applies a predicate to check if query has an edge location_tags with a given conditions (other predicates).
func (f *LocationFilter) WhereHasLocationTagsWith(preds ...predicate.LocationTag) {
	f.Where(entql.HasEdgeWith("location_tags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSenderConnection applies a predicate to check if query has an edge sender_connection.
func (f *LocationFilter) WhereHasSenderConnection() {
	f.Where(entql.HasEdge("sender_connection"))
}

// WhereHasSenderConnectionWith applies a predicate to check if query has an edge sender_connection with a given conditions (other predicates).
func (f *LocationFilter) WhereHasSenderConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("sender_connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPickupConnection applies a predicate to check if query has an edge pickup_connection.
func (f *LocationFilter) WhereHasPickupConnection() {
	f.Where(entql.HasEdge("pickup_connection"))
}

// WhereHasPickupConnectionWith applies a predicate to check if query has an edge pickup_connection with a given conditions (other predicates).
func (f *LocationFilter) WhereHasPickupConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("pickup_connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnConnection applies a predicate to check if query has an edge return_connection.
func (f *LocationFilter) WhereHasReturnConnection() {
	f.Where(entql.HasEdge("return_connection"))
}

// WhereHasReturnConnectionWith applies a predicate to check if query has an edge return_connection with a given conditions (other predicates).
func (f *LocationFilter) WhereHasReturnConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("return_connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSellerConnection applies a predicate to check if query has an edge seller_connection.
func (f *LocationFilter) WhereHasSellerConnection() {
	f.Where(entql.HasEdge("seller_connection"))
}

// WhereHasSellerConnectionWith applies a predicate to check if query has an edge seller_connection with a given conditions (other predicates).
func (f *LocationFilter) WhereHasSellerConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("seller_connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortal applies a predicate to check if query has an edge return_portal.
func (f *LocationFilter) WhereHasReturnPortal() {
	f.Where(entql.HasEdge("return_portal"))
}

// WhereHasReturnPortalWith applies a predicate to check if query has an edge return_portal with a given conditions (other predicates).
func (f *LocationFilter) WhereHasReturnPortalWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *LocationFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *LocationFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *LocationFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *LocationFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ltq *LocationTagQuery) addPredicate(pred func(s *sql.Selector)) {
	ltq.predicates = append(ltq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the LocationTagQuery builder.
func (ltq *LocationTagQuery) Filter() *LocationTagFilter {
	return &LocationTagFilter{config: ltq.config, predicateAdder: ltq}
}

// addPredicate implements the predicateAdder interface.
func (m *LocationTagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the LocationTagMutation builder.
func (m *LocationTagMutation) Filter() *LocationTagFilter {
	return &LocationTagFilter{config: m.config, predicateAdder: m}
}

// LocationTagFilter provides a generic filtering capability at runtime for LocationTagQuery.
type LocationTagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *LocationTagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[67].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *LocationTagFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(locationtag.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *LocationTagFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(locationtag.FieldLabel))
}

// WhereInternalID applies the entql string predicate on the internal_id field.
func (f *LocationTagFilter) WhereInternalID(p entql.StringP) {
	f.Where(p.Field(locationtag.FieldInternalID))
}

// WhereHasLocation applies a predicate to check if query has an edge location.
func (f *LocationTagFilter) WhereHasLocation() {
	f.Where(entql.HasEdge("location"))
}

// WhereHasLocationWith applies a predicate to check if query has an edge location with a given conditions (other predicates).
func (f *LocationTagFilter) WhereHasLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (nq *NotificationQuery) addPredicate(pred func(s *sql.Selector)) {
	nq.predicates = append(nq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the NotificationQuery builder.
func (nq *NotificationQuery) Filter() *NotificationFilter {
	return &NotificationFilter{config: nq.config, predicateAdder: nq}
}

// addPredicate implements the predicateAdder interface.
func (m *NotificationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the NotificationMutation builder.
func (m *NotificationMutation) Filter() *NotificationFilter {
	return &NotificationFilter{config: m.config, predicateAdder: m}
}

// NotificationFilter provides a generic filtering capability at runtime for NotificationQuery.
type NotificationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *NotificationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[68].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *NotificationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(notification.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *NotificationFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(notification.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *NotificationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(notification.FieldName))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *NotificationFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(notification.FieldActive))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *NotificationFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *NotificationFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *NotificationFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *NotificationFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailTemplate applies a predicate to check if query has an edge email_template.
func (f *NotificationFilter) WhereHasEmailTemplate() {
	f.Where(entql.HasEdge("email_template"))
}

// WhereHasEmailTemplateWith applies a predicate to check if query has an edge email_template with a given conditions (other predicates).
func (f *NotificationFilter) WhereHasEmailTemplateWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (orq *OTKRequestsQuery) addPredicate(pred func(s *sql.Selector)) {
	orq.predicates = append(orq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OTKRequestsQuery builder.
func (orq *OTKRequestsQuery) Filter() *OTKRequestsFilter {
	return &OTKRequestsFilter{config: orq.config, predicateAdder: orq}
}

// addPredicate implements the predicateAdder interface.
func (m *OTKRequestsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OTKRequestsMutation builder.
func (m *OTKRequestsMutation) Filter() *OTKRequestsFilter {
	return &OTKRequestsFilter{config: m.config, predicateAdder: m}
}

// OTKRequestsFilter provides a generic filtering capability at runtime for OTKRequestsQuery.
type OTKRequestsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OTKRequestsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[69].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OTKRequestsFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(otkrequests.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *OTKRequestsFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(otkrequests.FieldTenantID))
}

// WhereOtk applies the entql string predicate on the otk field.
func (f *OTKRequestsFilter) WhereOtk(p entql.StringP) {
	f.Where(p.Field(otkrequests.FieldOtk))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OTKRequestsFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OTKRequestsFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *OTKRequestsFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *OTKRequestsFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[70].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(order.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *OrderFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(order.FieldTenantID))
}

// WhereOrderPublicID applies the entql string predicate on the order_public_id field.
func (f *OrderFilter) WhereOrderPublicID(p entql.StringP) {
	f.Where(p.Field(order.FieldOrderPublicID))
}

// WhereExternalID applies the entql string predicate on the external_id field.
func (f *OrderFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(order.FieldExternalID))
}

// WhereCommentInternal applies the entql string predicate on the comment_internal field.
func (f *OrderFilter) WhereCommentInternal(p entql.StringP) {
	f.Where(p.Field(order.FieldCommentInternal))
}

// WhereCommentExternal applies the entql string predicate on the comment_external field.
func (f *OrderFilter) WhereCommentExternal(p entql.StringP) {
	f.Where(p.Field(order.FieldCommentExternal))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereEmailSyncConfirmationAt applies the entql time.Time predicate on the email_sync_confirmation_at field.
func (f *OrderFilter) WhereEmailSyncConfirmationAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldEmailSyncConfirmationAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *OrderFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(order.FieldStatus))
}

// WhereNoteAttributes applies the entql json.RawMessage predicate on the note_attributes field.
func (f *OrderFilter) WhereNoteAttributes(p entql.BytesP) {
	f.Where(p.Field(order.FieldNoteAttributes))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OrderFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OrderFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderHistory applies a predicate to check if query has an edge order_history.
func (f *OrderFilter) WhereHasOrderHistory() {
	f.Where(entql.HasEdge("order_history"))
}

// WhereHasOrderHistoryWith applies a predicate to check if query has an edge order_history with a given conditions (other predicates).
func (f *OrderFilter) WhereHasOrderHistoryWith(preds ...predicate.OrderHistory) {
	f.Where(entql.HasEdgeWith("order_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *OrderFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *OrderFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *OrderFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *OrderFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColli applies a predicate to check if query has an edge return_colli.
func (f *OrderFilter) WhereHasReturnColli() {
	f.Where(entql.HasEdge("return_colli"))
}

// WhereHasReturnColliWith applies a predicate to check if query has an edge return_colli with a given conditions (other predicates).
func (f *OrderFilter) WhereHasReturnColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasHypothesisTestDeliveryOptionRequest applies a predicate to check if query has an edge hypothesis_test_delivery_option_request.
func (f *OrderFilter) WhereHasHypothesisTestDeliveryOptionRequest() {
	f.Where(entql.HasEdge("hypothesis_test_delivery_option_request"))
}

// WhereHasHypothesisTestDeliveryOptionRequestWith applies a predicate to check if query has an edge hypothesis_test_delivery_option_request with a given conditions (other predicates).
func (f *OrderFilter) WhereHasHypothesisTestDeliveryOptionRequestWith(preds ...predicate.HypothesisTestDeliveryOptionRequest) {
	f.Where(entql.HasEdgeWith("hypothesis_test_delivery_option_request", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPallet applies a predicate to check if query has an edge pallet.
func (f *OrderFilter) WhereHasPallet() {
	f.Where(entql.HasEdge("pallet"))
}

// WhereHasPalletWith applies a predicate to check if query has an edge pallet with a given conditions (other predicates).
func (f *OrderFilter) WhereHasPalletWith(preds ...predicate.Pallet) {
	f.Where(entql.HasEdgeWith("pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConsolidation applies a predicate to check if query has an edge consolidation.
func (f *OrderFilter) WhereHasConsolidation() {
	f.Where(entql.HasEdge("consolidation"))
}

// WhereHasConsolidationWith applies a predicate to check if query has an edge consolidation with a given conditions (other predicates).
func (f *OrderFilter) WhereHasConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ohq *OrderHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	ohq.predicates = append(ohq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderHistoryQuery builder.
func (ohq *OrderHistoryQuery) Filter() *OrderHistoryFilter {
	return &OrderHistoryFilter{config: ohq.config, predicateAdder: ohq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderHistoryMutation builder.
func (m *OrderHistoryMutation) Filter() *OrderHistoryFilter {
	return &OrderHistoryFilter{config: m.config, predicateAdder: m}
}

// OrderHistoryFilter provides a generic filtering capability at runtime for OrderHistoryQuery.
type OrderHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[71].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrderHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orderhistory.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *OrderHistoryFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(orderhistory.FieldTenantID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrderHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(orderhistory.FieldDescription))
}

// WhereType applies the entql string predicate on the type field.
func (f *OrderHistoryFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(orderhistory.FieldType))
}

// WhereHasChangeHistory applies a predicate to check if query has an edge change_history.
func (f *OrderHistoryFilter) WhereHasChangeHistory() {
	f.Where(entql.HasEdge("change_history"))
}

// WhereHasChangeHistoryWith applies a predicate to check if query has an edge change_history with a given conditions (other predicates).
func (f *OrderHistoryFilter) WhereHasChangeHistoryWith(preds ...predicate.ChangeHistory) {
	f.Where(entql.HasEdgeWith("change_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OrderHistoryFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OrderHistoryFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *OrderHistoryFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *OrderHistoryFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (olq *OrderLineQuery) addPredicate(pred func(s *sql.Selector)) {
	olq.predicates = append(olq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderLineQuery builder.
func (olq *OrderLineQuery) Filter() *OrderLineFilter {
	return &OrderLineFilter{config: olq.config, predicateAdder: olq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderLineMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderLineMutation builder.
func (m *OrderLineMutation) Filter() *OrderLineFilter {
	return &OrderLineFilter{config: m.config, predicateAdder: m}
}

// OrderLineFilter provides a generic filtering capability at runtime for OrderLineQuery.
type OrderLineFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderLineFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[72].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrderLineFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orderline.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *OrderLineFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(orderline.FieldTenantID))
}

// WhereUnitPrice applies the entql float64 predicate on the unit_price field.
func (f *OrderLineFilter) WhereUnitPrice(p entql.Float64P) {
	f.Where(p.Field(orderline.FieldUnitPrice))
}

// WhereDiscountAllocationAmount applies the entql float64 predicate on the discount_allocation_amount field.
func (f *OrderLineFilter) WhereDiscountAllocationAmount(p entql.Float64P) {
	f.Where(p.Field(orderline.FieldDiscountAllocationAmount))
}

// WhereExternalID applies the entql string predicate on the external_id field.
func (f *OrderLineFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(orderline.FieldExternalID))
}

// WhereUnits applies the entql int predicate on the units field.
func (f *OrderLineFilter) WhereUnits(p entql.IntP) {
	f.Where(p.Field(orderline.FieldUnits))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderLineFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orderline.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderLineFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orderline.FieldUpdatedAt))
}

// WhereProductVariantID applies the entql string predicate on the product_variant_id field.
func (f *OrderLineFilter) WhereProductVariantID(p entql.StringP) {
	f.Where(p.Field(orderline.FieldProductVariantID))
}

// WhereColliID applies the entql string predicate on the colli_id field.
func (f *OrderLineFilter) WhereColliID(p entql.StringP) {
	f.Where(p.Field(orderline.FieldColliID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OrderLineFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OrderLineFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductVariant applies a predicate to check if query has an edge product_variant.
func (f *OrderLineFilter) WhereHasProductVariant() {
	f.Where(entql.HasEdge("product_variant"))
}

// WhereHasProductVariantWith applies a predicate to check if query has an edge product_variant with a given conditions (other predicates).
func (f *OrderLineFilter) WhereHasProductVariantWith(preds ...predicate.ProductVariant) {
	f.Where(entql.HasEdgeWith("product_variant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *OrderLineFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *OrderLineFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnOrderLine applies a predicate to check if query has an edge return_order_line.
func (f *OrderLineFilter) WhereHasReturnOrderLine() {
	f.Where(entql.HasEdge("return_order_line"))
}

// WhereHasReturnOrderLineWith applies a predicate to check if query has an edge return_order_line with a given conditions (other predicates).
func (f *OrderLineFilter) WhereHasReturnOrderLineWith(preds ...predicate.ReturnOrderLine) {
	f.Where(entql.HasEdgeWith("return_order_line", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCurrency applies a predicate to check if query has an edge currency.
func (f *OrderLineFilter) WhereHasCurrency() {
	f.Where(entql.HasEdge("currency"))
}

// WhereHasCurrencyWith applies a predicate to check if query has an edge currency with a given conditions (other predicates).
func (f *OrderLineFilter) WhereHasCurrencyWith(preds ...predicate.Currency) {
	f.Where(entql.HasEdgeWith("currency", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (osq *OrderSenderQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderSenderQuery builder.
func (osq *OrderSenderQuery) Filter() *OrderSenderFilter {
	return &OrderSenderFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderSenderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderSenderMutation builder.
func (m *OrderSenderMutation) Filter() *OrderSenderFilter {
	return &OrderSenderFilter{config: m.config, predicateAdder: m}
}

// OrderSenderFilter provides a generic filtering capability at runtime for OrderSenderQuery.
type OrderSenderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderSenderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[73].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrderSenderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *OrderSenderFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldTenantID))
}

// WhereUniquenessID applies the entql string predicate on the uniqueness_id field.
func (f *OrderSenderFilter) WhereUniquenessID(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldUniquenessID))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *OrderSenderFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *OrderSenderFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldLastName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *OrderSenderFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldEmail))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *OrderSenderFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldPhoneNumber))
}

// WhereVatNumber applies the entql string predicate on the vat_number field.
func (f *OrderSenderFilter) WhereVatNumber(p entql.StringP) {
	f.Where(p.Field(ordersender.FieldVatNumber))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *OrderSenderFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *OrderSenderFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PackagingQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PackagingQuery builder.
func (pq *PackagingQuery) Filter() *PackagingFilter {
	return &PackagingFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PackagingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PackagingMutation builder.
func (m *PackagingMutation) Filter() *PackagingFilter {
	return &PackagingFilter{config: m.config, predicateAdder: m}
}

// PackagingFilter provides a generic filtering capability at runtime for PackagingQuery.
type PackagingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PackagingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[74].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PackagingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(packaging.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PackagingFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(packaging.FieldTenantID))
}

// WhereArchivedAt applies the entql time.Time predicate on the archived_at field.
func (f *PackagingFilter) WhereArchivedAt(p entql.TimeP) {
	f.Where(p.Field(packaging.FieldArchivedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *PackagingFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(packaging.FieldName))
}

// WhereHeightCm applies the entql int predicate on the height_cm field.
func (f *PackagingFilter) WhereHeightCm(p entql.IntP) {
	f.Where(p.Field(packaging.FieldHeightCm))
}

// WhereWidthCm applies the entql int predicate on the width_cm field.
func (f *PackagingFilter) WhereWidthCm(p entql.IntP) {
	f.Where(p.Field(packaging.FieldWidthCm))
}

// WhereLengthCm applies the entql int predicate on the length_cm field.
func (f *PackagingFilter) WhereLengthCm(p entql.IntP) {
	f.Where(p.Field(packaging.FieldLengthCm))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PackagingFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentParcel applies a predicate to check if query has an edge shipment_parcel.
func (f *PackagingFilter) WhereHasShipmentParcel() {
	f.Where(entql.HasEdge("shipment_parcel"))
}

// WhereHasShipmentParcelWith applies a predicate to check if query has an edge shipment_parcel with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPallet applies a predicate to check if query has an edge pallet.
func (f *PackagingFilter) WhereHasPallet() {
	f.Where(entql.HasEdge("pallet"))
}

// WhereHasPalletWith applies a predicate to check if query has an edge pallet with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasPalletWith(preds ...predicate.Pallet) {
	f.Where(entql.HasEdgeWith("pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *PackagingFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColli applies a predicate to check if query has an edge return_colli.
func (f *PackagingFilter) WhereHasReturnColli() {
	f.Where(entql.HasEdge("return_colli"))
}

// WhereHasReturnColliWith applies a predicate to check if query has an edge return_colli with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasReturnColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackagingDF applies a predicate to check if query has an edge packaging_df.
func (f *PackagingFilter) WhereHasPackagingDF() {
	f.Where(entql.HasEdge("packaging_df"))
}

// WhereHasPackagingDFWith applies a predicate to check if query has an edge packaging_df with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasPackagingDFWith(preds ...predicate.PackagingDF) {
	f.Where(entql.HasEdgeWith("packaging_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackagingUSPS applies a predicate to check if query has an edge packaging_usps.
func (f *PackagingFilter) WhereHasPackagingUSPS() {
	f.Where(entql.HasEdge("packaging_usps"))
}

// WhereHasPackagingUSPSWith applies a predicate to check if query has an edge packaging_usps with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasPackagingUSPSWith(preds ...predicate.PackagingUSPS) {
	f.Where(entql.HasEdgeWith("packaging_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierBrand applies a predicate to check if query has an edge carrier_brand.
func (f *PackagingFilter) WhereHasCarrierBrand() {
	f.Where(entql.HasEdge("carrier_brand"))
}

// WhereHasCarrierBrandWith applies a predicate to check if query has an edge carrier_brand with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasCarrierBrandWith(preds ...predicate.CarrierBrand) {
	f.Where(entql.HasEdgeWith("carrier_brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *PackagingFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *PackagingFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pdq *PackagingDFQuery) addPredicate(pred func(s *sql.Selector)) {
	pdq.predicates = append(pdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PackagingDFQuery builder.
func (pdq *PackagingDFQuery) Filter() *PackagingDFFilter {
	return &PackagingDFFilter{config: pdq.config, predicateAdder: pdq}
}

// addPredicate implements the predicateAdder interface.
func (m *PackagingDFMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PackagingDFMutation builder.
func (m *PackagingDFMutation) Filter() *PackagingDFFilter {
	return &PackagingDFFilter{config: m.config, predicateAdder: m}
}

// PackagingDFFilter provides a generic filtering capability at runtime for PackagingDFQuery.
type PackagingDFFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PackagingDFFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[75].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PackagingDFFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(packagingdf.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PackagingDFFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(packagingdf.FieldTenantID))
}

// WhereAPIType applies the entql string predicate on the api_type field.
func (f *PackagingDFFilter) WhereAPIType(p entql.StringP) {
	f.Where(p.Field(packagingdf.FieldAPIType))
}

// WhereMaxWeight applies the entql float64 predicate on the max_weight field.
func (f *PackagingDFFilter) WhereMaxWeight(p entql.Float64P) {
	f.Where(p.Field(packagingdf.FieldMaxWeight))
}

// WhereMinWeight applies the entql float64 predicate on the min_weight field.
func (f *PackagingDFFilter) WhereMinWeight(p entql.Float64P) {
	f.Where(p.Field(packagingdf.FieldMinWeight))
}

// WhereStackable applies the entql bool predicate on the stackable field.
func (f *PackagingDFFilter) WhereStackable(p entql.BoolP) {
	f.Where(p.Field(packagingdf.FieldStackable))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PackagingDFFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PackagingDFFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *PackagingDFFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *PackagingDFFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (puq *PackagingUSPSQuery) addPredicate(pred func(s *sql.Selector)) {
	puq.predicates = append(puq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PackagingUSPSQuery builder.
func (puq *PackagingUSPSQuery) Filter() *PackagingUSPSFilter {
	return &PackagingUSPSFilter{config: puq.config, predicateAdder: puq}
}

// addPredicate implements the predicateAdder interface.
func (m *PackagingUSPSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PackagingUSPSMutation builder.
func (m *PackagingUSPSMutation) Filter() *PackagingUSPSFilter {
	return &PackagingUSPSFilter{config: m.config, predicateAdder: m}
}

// PackagingUSPSFilter provides a generic filtering capability at runtime for PackagingUSPSQuery.
type PackagingUSPSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PackagingUSPSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[76].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PackagingUSPSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(packagingusps.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PackagingUSPSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(packagingusps.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PackagingUSPSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PackagingUSPSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *PackagingUSPSFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *PackagingUSPSFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackagingUSPSRateIndicator applies a predicate to check if query has an edge packaging_usps_rate_indicator.
func (f *PackagingUSPSFilter) WhereHasPackagingUSPSRateIndicator() {
	f.Where(entql.HasEdge("packaging_usps_rate_indicator"))
}

// WhereHasPackagingUSPSRateIndicatorWith applies a predicate to check if query has an edge packaging_usps_rate_indicator with a given conditions (other predicates).
func (f *PackagingUSPSFilter) WhereHasPackagingUSPSRateIndicatorWith(preds ...predicate.PackagingUSPSRateIndicator) {
	f.Where(entql.HasEdgeWith("packaging_usps_rate_indicator", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackagingUSPSProcessingCategory applies a predicate to check if query has an edge packaging_usps_processing_category.
func (f *PackagingUSPSFilter) WhereHasPackagingUSPSProcessingCategory() {
	f.Where(entql.HasEdge("packaging_usps_processing_category"))
}

// WhereHasPackagingUSPSProcessingCategoryWith applies a predicate to check if query has an edge packaging_usps_processing_category with a given conditions (other predicates).
func (f *PackagingUSPSFilter) WhereHasPackagingUSPSProcessingCategoryWith(preds ...predicate.PackagingUSPSProcessingCategory) {
	f.Where(entql.HasEdgeWith("packaging_usps_processing_category", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pupcq *PackagingUSPSProcessingCategoryQuery) addPredicate(pred func(s *sql.Selector)) {
	pupcq.predicates = append(pupcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PackagingUSPSProcessingCategoryQuery builder.
func (pupcq *PackagingUSPSProcessingCategoryQuery) Filter() *PackagingUSPSProcessingCategoryFilter {
	return &PackagingUSPSProcessingCategoryFilter{config: pupcq.config, predicateAdder: pupcq}
}

// addPredicate implements the predicateAdder interface.
func (m *PackagingUSPSProcessingCategoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PackagingUSPSProcessingCategoryMutation builder.
func (m *PackagingUSPSProcessingCategoryMutation) Filter() *PackagingUSPSProcessingCategoryFilter {
	return &PackagingUSPSProcessingCategoryFilter{config: m.config, predicateAdder: m}
}

// PackagingUSPSProcessingCategoryFilter provides a generic filtering capability at runtime for PackagingUSPSProcessingCategoryQuery.
type PackagingUSPSProcessingCategoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PackagingUSPSProcessingCategoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[77].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PackagingUSPSProcessingCategoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(packaginguspsprocessingcategory.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PackagingUSPSProcessingCategoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(packaginguspsprocessingcategory.FieldName))
}

// WhereProcessingCategory applies the entql string predicate on the processing_category field.
func (f *PackagingUSPSProcessingCategoryFilter) WhereProcessingCategory(p entql.StringP) {
	f.Where(p.Field(packaginguspsprocessingcategory.FieldProcessingCategory))
}

// addPredicate implements the predicateAdder interface.
func (puriq *PackagingUSPSRateIndicatorQuery) addPredicate(pred func(s *sql.Selector)) {
	puriq.predicates = append(puriq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PackagingUSPSRateIndicatorQuery builder.
func (puriq *PackagingUSPSRateIndicatorQuery) Filter() *PackagingUSPSRateIndicatorFilter {
	return &PackagingUSPSRateIndicatorFilter{config: puriq.config, predicateAdder: puriq}
}

// addPredicate implements the predicateAdder interface.
func (m *PackagingUSPSRateIndicatorMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PackagingUSPSRateIndicatorMutation builder.
func (m *PackagingUSPSRateIndicatorMutation) Filter() *PackagingUSPSRateIndicatorFilter {
	return &PackagingUSPSRateIndicatorFilter{config: m.config, predicateAdder: m}
}

// PackagingUSPSRateIndicatorFilter provides a generic filtering capability at runtime for PackagingUSPSRateIndicatorQuery.
type PackagingUSPSRateIndicatorFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PackagingUSPSRateIndicatorFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[78].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PackagingUSPSRateIndicatorFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(packaginguspsrateindicator.FieldID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *PackagingUSPSRateIndicatorFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(packaginguspsrateindicator.FieldCode))
}

// WhereName applies the entql string predicate on the name field.
func (f *PackagingUSPSRateIndicatorFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(packaginguspsrateindicator.FieldName))
}

// WhereHasPackagingUSPS applies a predicate to check if query has an edge packaging_usps.
func (f *PackagingUSPSRateIndicatorFilter) WhereHasPackagingUSPS() {
	f.Where(entql.HasEdge("packaging_usps"))
}

// WhereHasPackagingUSPSWith applies a predicate to check if query has an edge packaging_usps with a given conditions (other predicates).
func (f *PackagingUSPSRateIndicatorFilter) WhereHasPackagingUSPSWith(preds ...predicate.PackagingUSPS) {
	f.Where(entql.HasEdgeWith("packaging_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PalletQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PalletQuery builder.
func (pq *PalletQuery) Filter() *PalletFilter {
	return &PalletFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PalletMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PalletMutation builder.
func (m *PalletMutation) Filter() *PalletFilter {
	return &PalletFilter{config: m.config, predicateAdder: m}
}

// PalletFilter provides a generic filtering capability at runtime for PalletQuery.
type PalletFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PalletFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[79].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PalletFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(pallet.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PalletFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(pallet.FieldTenantID))
}

// WherePublicID applies the entql string predicate on the public_id field.
func (f *PalletFilter) WherePublicID(p entql.StringP) {
	f.Where(p.Field(pallet.FieldPublicID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PalletFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(pallet.FieldDescription))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PalletFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PalletFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *PalletFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *PalletFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *PalletFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *PalletFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConsolidation applies a predicate to check if query has an edge consolidation.
func (f *PalletFilter) WhereHasConsolidation() {
	f.Where(entql.HasEdge("consolidation"))
}

// WhereHasConsolidationWith applies a predicate to check if query has an edge consolidation with a given conditions (other predicates).
func (f *PalletFilter) WhereHasConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentPallet applies a predicate to check if query has an edge shipment_pallet.
func (f *PalletFilter) WhereHasShipmentPallet() {
	f.Where(entql.HasEdge("shipment_pallet"))
}

// WhereHasShipmentPalletWith applies a predicate to check if query has an edge shipment_pallet with a given conditions (other predicates).
func (f *PalletFilter) WhereHasShipmentPalletWith(preds ...predicate.ShipmentPallet) {
	f.Where(entql.HasEdgeWith("shipment_pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCancelledShipmentPallet applies a predicate to check if query has an edge cancelled_shipment_pallet.
func (f *PalletFilter) WhereHasCancelledShipmentPallet() {
	f.Where(entql.HasEdge("cancelled_shipment_pallet"))
}

// WhereHasCancelledShipmentPalletWith applies a predicate to check if query has an edge cancelled_shipment_pallet with a given conditions (other predicates).
func (f *PalletFilter) WhereHasCancelledShipmentPalletWith(preds ...predicate.ShipmentPallet) {
	f.Where(entql.HasEdgeWith("cancelled_shipment_pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (psq *ParcelShopQuery) addPredicate(pred func(s *sql.Selector)) {
	psq.predicates = append(psq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ParcelShopQuery builder.
func (psq *ParcelShopQuery) Filter() *ParcelShopFilter {
	return &ParcelShopFilter{config: psq.config, predicateAdder: psq}
}

// addPredicate implements the predicateAdder interface.
func (m *ParcelShopMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ParcelShopMutation builder.
func (m *ParcelShopMutation) Filter() *ParcelShopFilter {
	return &ParcelShopFilter{config: m.config, predicateAdder: m}
}

// ParcelShopFilter provides a generic filtering capability at runtime for ParcelShopQuery.
type ParcelShopFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ParcelShopFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[80].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ParcelShopFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(parcelshop.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ParcelShopFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(parcelshop.FieldName))
}

// WhereLastUpdated applies the entql time.Time predicate on the last_updated field.
func (f *ParcelShopFilter) WhereLastUpdated(p entql.TimeP) {
	f.Where(p.Field(parcelshop.FieldLastUpdated))
}

// WhereHasParcelShopDAO applies a predicate to check if query has an edge parcel_shop_dao.
func (f *ParcelShopFilter) WhereHasParcelShopDAO() {
	f.Where(entql.HasEdge("parcel_shop_dao"))
}

// WhereHasParcelShopDAOWith applies a predicate to check if query has an edge parcel_shop_dao with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasParcelShopDAOWith(preds ...predicate.ParcelShopDAO) {
	f.Where(entql.HasEdgeWith("parcel_shop_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShopPostNord applies a predicate to check if query has an edge parcel_shop_post_nord.
func (f *ParcelShopFilter) WhereHasParcelShopPostNord() {
	f.Where(entql.HasEdge("parcel_shop_post_nord"))
}

// WhereHasParcelShopPostNordWith applies a predicate to check if query has an edge parcel_shop_post_nord with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasParcelShopPostNordWith(preds ...predicate.ParcelShopPostNord) {
	f.Where(entql.HasEdgeWith("parcel_shop_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShopGLS applies a predicate to check if query has an edge parcel_shop_gls.
func (f *ParcelShopFilter) WhereHasParcelShopGLS() {
	f.Where(entql.HasEdge("parcel_shop_gls"))
}

// WhereHasParcelShopGLSWith applies a predicate to check if query has an edge parcel_shop_gls with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasParcelShopGLSWith(preds ...predicate.ParcelShopGLS) {
	f.Where(entql.HasEdgeWith("parcel_shop_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParcelShopBring applies a predicate to check if query has an edge parcel_shop_bring.
func (f *ParcelShopFilter) WhereHasParcelShopBring() {
	f.Where(entql.HasEdge("parcel_shop_bring"))
}

// WhereHasParcelShopBringWith applies a predicate to check if query has an edge parcel_shop_bring with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasParcelShopBringWith(preds ...predicate.ParcelShopBring) {
	f.Where(entql.HasEdgeWith("parcel_shop_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrierBrand applies a predicate to check if query has an edge carrier_brand.
func (f *ParcelShopFilter) WhereHasCarrierBrand() {
	f.Where(entql.HasEdge("carrier_brand"))
}

// WhereHasCarrierBrandWith applies a predicate to check if query has an edge carrier_brand with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasCarrierBrandWith(preds ...predicate.CarrierBrand) {
	f.Where(entql.HasEdgeWith("carrier_brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddress applies a predicate to check if query has an edge address.
func (f *ParcelShopFilter) WhereHasAddress() {
	f.Where(entql.HasEdge("address"))
}

// WhereHasAddressWith applies a predicate to check if query has an edge address with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasAddressWith(preds ...predicate.AddressGlobal) {
	f.Where(entql.HasEdgeWith("address", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *ParcelShopFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusinessHoursPeriod applies a predicate to check if query has an edge business_hours_period.
func (f *ParcelShopFilter) WhereHasBusinessHoursPeriod() {
	f.Where(entql.HasEdge("business_hours_period"))
}

// WhereHasBusinessHoursPeriodWith applies a predicate to check if query has an edge business_hours_period with a given conditions (other predicates).
func (f *ParcelShopFilter) WhereHasBusinessHoursPeriodWith(preds ...predicate.BusinessHoursPeriod) {
	f.Where(entql.HasEdgeWith("business_hours_period", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (psbq *ParcelShopBringQuery) addPredicate(pred func(s *sql.Selector)) {
	psbq.predicates = append(psbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ParcelShopBringQuery builder.
func (psbq *ParcelShopBringQuery) Filter() *ParcelShopBringFilter {
	return &ParcelShopBringFilter{config: psbq.config, predicateAdder: psbq}
}

// addPredicate implements the predicateAdder interface.
func (m *ParcelShopBringMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ParcelShopBringMutation builder.
func (m *ParcelShopBringMutation) Filter() *ParcelShopBringFilter {
	return &ParcelShopBringFilter{config: m.config, predicateAdder: m}
}

// ParcelShopBringFilter provides a generic filtering capability at runtime for ParcelShopBringQuery.
type ParcelShopBringFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ParcelShopBringFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[81].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ParcelShopBringFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(parcelshopbring.FieldID))
}

// WherePointType applies the entql string predicate on the point_type field.
func (f *ParcelShopBringFilter) WherePointType(p entql.StringP) {
	f.Where(p.Field(parcelshopbring.FieldPointType))
}

// WhereBringID applies the entql string predicate on the bring_id field.
func (f *ParcelShopBringFilter) WhereBringID(p entql.StringP) {
	f.Where(p.Field(parcelshopbring.FieldBringID))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *ParcelShopBringFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *ParcelShopBringFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddressDelivery applies a predicate to check if query has an edge address_delivery.
func (f *ParcelShopBringFilter) WhereHasAddressDelivery() {
	f.Where(entql.HasEdge("address_delivery"))
}

// WhereHasAddressDeliveryWith applies a predicate to check if query has an edge address_delivery with a given conditions (other predicates).
func (f *ParcelShopBringFilter) WhereHasAddressDeliveryWith(preds ...predicate.AddressGlobal) {
	f.Where(entql.HasEdgeWith("address_delivery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (psdq *ParcelShopDAOQuery) addPredicate(pred func(s *sql.Selector)) {
	psdq.predicates = append(psdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ParcelShopDAOQuery builder.
func (psdq *ParcelShopDAOQuery) Filter() *ParcelShopDAOFilter {
	return &ParcelShopDAOFilter{config: psdq.config, predicateAdder: psdq}
}

// addPredicate implements the predicateAdder interface.
func (m *ParcelShopDAOMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ParcelShopDAOMutation builder.
func (m *ParcelShopDAOMutation) Filter() *ParcelShopDAOFilter {
	return &ParcelShopDAOFilter{config: m.config, predicateAdder: m}
}

// ParcelShopDAOFilter provides a generic filtering capability at runtime for ParcelShopDAOQuery.
type ParcelShopDAOFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ParcelShopDAOFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[82].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ParcelShopDAOFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(parcelshopdao.FieldID))
}

// WhereShopID applies the entql string predicate on the shop_id field.
func (f *ParcelShopDAOFilter) WhereShopID(p entql.StringP) {
	f.Where(p.Field(parcelshopdao.FieldShopID))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *ParcelShopDAOFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *ParcelShopDAOFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (psgq *ParcelShopGLSQuery) addPredicate(pred func(s *sql.Selector)) {
	psgq.predicates = append(psgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ParcelShopGLSQuery builder.
func (psgq *ParcelShopGLSQuery) Filter() *ParcelShopGLSFilter {
	return &ParcelShopGLSFilter{config: psgq.config, predicateAdder: psgq}
}

// addPredicate implements the predicateAdder interface.
func (m *ParcelShopGLSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ParcelShopGLSMutation builder.
func (m *ParcelShopGLSMutation) Filter() *ParcelShopGLSFilter {
	return &ParcelShopGLSFilter{config: m.config, predicateAdder: m}
}

// ParcelShopGLSFilter provides a generic filtering capability at runtime for ParcelShopGLSQuery.
type ParcelShopGLSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ParcelShopGLSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[83].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ParcelShopGLSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(parcelshopgls.FieldID))
}

// WhereGLSParcelShopID applies the entql string predicate on the gls_parcel_shop_id field.
func (f *ParcelShopGLSFilter) WhereGLSParcelShopID(p entql.StringP) {
	f.Where(p.Field(parcelshopgls.FieldGLSParcelShopID))
}

// WherePartnerID applies the entql string predicate on the partner_id field.
func (f *ParcelShopGLSFilter) WherePartnerID(p entql.StringP) {
	f.Where(p.Field(parcelshopgls.FieldPartnerID))
}

// WhereType applies the entql string predicate on the type field.
func (f *ParcelShopGLSFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(parcelshopgls.FieldType))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *ParcelShopGLSFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *ParcelShopGLSFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pspnq *ParcelShopPostNordQuery) addPredicate(pred func(s *sql.Selector)) {
	pspnq.predicates = append(pspnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ParcelShopPostNordQuery builder.
func (pspnq *ParcelShopPostNordQuery) Filter() *ParcelShopPostNordFilter {
	return &ParcelShopPostNordFilter{config: pspnq.config, predicateAdder: pspnq}
}

// addPredicate implements the predicateAdder interface.
func (m *ParcelShopPostNordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ParcelShopPostNordMutation builder.
func (m *ParcelShopPostNordMutation) Filter() *ParcelShopPostNordFilter {
	return &ParcelShopPostNordFilter{config: m.config, predicateAdder: m}
}

// ParcelShopPostNordFilter provides a generic filtering capability at runtime for ParcelShopPostNordQuery.
type ParcelShopPostNordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ParcelShopPostNordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[84].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ParcelShopPostNordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(parcelshoppostnord.FieldID))
}

// WhereServicePointID applies the entql string predicate on the service_point_id field.
func (f *ParcelShopPostNordFilter) WhereServicePointID(p entql.StringP) {
	f.Where(p.Field(parcelshoppostnord.FieldServicePointID))
}

// WherePudoid applies the entql string predicate on the pudoid field.
func (f *ParcelShopPostNordFilter) WherePudoid(p entql.StringP) {
	f.Where(p.Field(parcelshoppostnord.FieldPudoid))
}

// WhereTypeID applies the entql string predicate on the type_id field.
func (f *ParcelShopPostNordFilter) WhereTypeID(p entql.StringP) {
	f.Where(p.Field(parcelshoppostnord.FieldTypeID))
}

// WhereHasParcelShop applies a predicate to check if query has an edge parcel_shop.
func (f *ParcelShopPostNordFilter) WhereHasParcelShop() {
	f.Where(entql.HasEdge("parcel_shop"))
}

// WhereHasParcelShopWith applies a predicate to check if query has an edge parcel_shop with a given conditions (other predicates).
func (f *ParcelShopPostNordFilter) WhereHasParcelShopWith(preds ...predicate.ParcelShop) {
	f.Where(entql.HasEdgeWith("parcel_shop", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAddressDelivery applies a predicate to check if query has an edge address_delivery.
func (f *ParcelShopPostNordFilter) WhereHasAddressDelivery() {
	f.Where(entql.HasEdge("address_delivery"))
}

// WhereHasAddressDeliveryWith applies a predicate to check if query has an edge address_delivery with a given conditions (other predicates).
func (f *ParcelShopPostNordFilter) WhereHasAddressDeliveryWith(preds ...predicate.AddressGlobal) {
	f.Where(entql.HasEdgeWith("address_delivery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlanQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlanQuery builder.
func (pq *PlanQuery) Filter() *PlanFilter {
	return &PlanFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlanMutation builder.
func (m *PlanMutation) Filter() *PlanFilter {
	return &PlanFilter{config: m.config, predicateAdder: m}
}

// PlanFilter provides a generic filtering capability at runtime for PlanQuery.
type PlanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[85].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PlanFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(plan.FieldID))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *PlanFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(plan.FieldLabel))
}

// WhereRank applies the entql int predicate on the rank field.
func (f *PlanFilter) WhereRank(p entql.IntP) {
	f.Where(p.Field(plan.FieldRank))
}

// WherePriceDkk applies the entql int predicate on the price_dkk field.
func (f *PlanFilter) WherePriceDkk(p entql.IntP) {
	f.Where(p.Field(plan.FieldPriceDkk))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PlanFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PlanFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlanHistoryPlan applies a predicate to check if query has an edge plan_history_plan.
func (f *PlanFilter) WhereHasPlanHistoryPlan() {
	f.Where(entql.HasEdge("plan_history_plan"))
}

// WhereHasPlanHistoryPlanWith applies a predicate to check if query has an edge plan_history_plan with a given conditions (other predicates).
func (f *PlanFilter) WhereHasPlanHistoryPlanWith(preds ...predicate.PlanHistory) {
	f.Where(entql.HasEdgeWith("plan_history_plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (phq *PlanHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	phq.predicates = append(phq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlanHistoryQuery builder.
func (phq *PlanHistoryQuery) Filter() *PlanHistoryFilter {
	return &PlanHistoryFilter{config: phq.config, predicateAdder: phq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlanHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlanHistoryMutation builder.
func (m *PlanHistoryMutation) Filter() *PlanHistoryFilter {
	return &PlanHistoryFilter{config: m.config, predicateAdder: m}
}

// PlanHistoryFilter provides a generic filtering capability at runtime for PlanHistoryQuery.
type PlanHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlanHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[86].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PlanHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(planhistory.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PlanHistoryFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(planhistory.FieldTenantID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlanHistoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(planhistory.FieldCreatedAt))
}

// WhereHasChangeHistory applies a predicate to check if query has an edge change_history.
func (f *PlanHistoryFilter) WhereHasChangeHistory() {
	f.Where(entql.HasEdge("change_history"))
}

// WhereHasChangeHistoryWith applies a predicate to check if query has an edge change_history with a given conditions (other predicates).
func (f *PlanHistoryFilter) WhereHasChangeHistoryWith(preds ...predicate.ChangeHistory) {
	f.Where(entql.HasEdgeWith("change_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PlanHistoryFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PlanHistoryFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChangedBy applies a predicate to check if query has an edge changed_by.
func (f *PlanHistoryFilter) WhereHasChangedBy() {
	f.Where(entql.HasEdge("changed_by"))
}

// WhereHasChangedByWith applies a predicate to check if query has an edge changed_by with a given conditions (other predicates).
func (f *PlanHistoryFilter) WhereHasChangedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("changed_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChangedFrom applies a predicate to check if query has an edge changed_from.
func (f *PlanHistoryFilter) WhereHasChangedFrom() {
	f.Where(entql.HasEdge("changed_from"))
}

// WhereHasChangedFromWith applies a predicate to check if query has an edge changed_from with a given conditions (other predicates).
func (f *PlanHistoryFilter) WhereHasChangedFromWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("changed_from", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pjq *PrintJobQuery) addPredicate(pred func(s *sql.Selector)) {
	pjq.predicates = append(pjq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PrintJobQuery builder.
func (pjq *PrintJobQuery) Filter() *PrintJobFilter {
	return &PrintJobFilter{config: pjq.config, predicateAdder: pjq}
}

// addPredicate implements the predicateAdder interface.
func (m *PrintJobMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PrintJobMutation builder.
func (m *PrintJobMutation) Filter() *PrintJobFilter {
	return &PrintJobFilter{config: m.config, predicateAdder: m}
}

// PrintJobFilter provides a generic filtering capability at runtime for PrintJobQuery.
type PrintJobFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PrintJobFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[87].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PrintJobFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(printjob.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PrintJobFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(printjob.FieldTenantID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *PrintJobFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(printjob.FieldStatus))
}

// WhereFileExtension applies the entql string predicate on the file_extension field.
func (f *PrintJobFilter) WhereFileExtension(p entql.StringP) {
	f.Where(p.Field(printjob.FieldFileExtension))
}

// WhereDocumentType applies the entql string predicate on the document_type field.
func (f *PrintJobFilter) WhereDocumentType(p entql.StringP) {
	f.Where(p.Field(printjob.FieldDocumentType))
}

// WherePrinterMessages applies the entql json.RawMessage predicate on the printer_messages field.
func (f *PrintJobFilter) WherePrinterMessages(p entql.BytesP) {
	f.Where(p.Field(printjob.FieldPrinterMessages))
}

// WhereBase64PrintData applies the entql string predicate on the base64_print_data field.
func (f *PrintJobFilter) WhereBase64PrintData(p entql.StringP) {
	f.Where(p.Field(printjob.FieldBase64PrintData))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PrintJobFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(printjob.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PrintJobFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PrintJobFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrinter applies a predicate to check if query has an edge printer.
func (f *PrintJobFilter) WhereHasPrinter() {
	f.Where(entql.HasEdge("printer"))
}

// WhereHasPrinterWith applies a predicate to check if query has an edge printer with a given conditions (other predicates).
func (f *PrintJobFilter) WhereHasPrinterWith(preds ...predicate.Printer) {
	f.Where(entql.HasEdgeWith("printer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *PrintJobFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *PrintJobFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentParcel applies a predicate to check if query has an edge shipment_parcel.
func (f *PrintJobFilter) WhereHasShipmentParcel() {
	f.Where(entql.HasEdge("shipment_parcel"))
}

// WhereHasShipmentParcelWith applies a predicate to check if query has an edge shipment_parcel with a given conditions (other predicates).
func (f *PrintJobFilter) WhereHasShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PrinterQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PrinterQuery builder.
func (pq *PrinterQuery) Filter() *PrinterFilter {
	return &PrinterFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PrinterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PrinterMutation builder.
func (m *PrinterMutation) Filter() *PrinterFilter {
	return &PrinterFilter{config: m.config, predicateAdder: m}
}

// PrinterFilter provides a generic filtering capability at runtime for PrinterQuery.
type PrinterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PrinterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[88].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PrinterFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(printer.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *PrinterFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(printer.FieldTenantID))
}

// WhereDeviceID applies the entql string predicate on the device_id field.
func (f *PrinterFilter) WhereDeviceID(p entql.StringP) {
	f.Where(p.Field(printer.FieldDeviceID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PrinterFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(printer.FieldName))
}

// WhereLabelZpl applies the entql bool predicate on the label_zpl field.
func (f *PrinterFilter) WhereLabelZpl(p entql.BoolP) {
	f.Where(p.Field(printer.FieldLabelZpl))
}

// WhereLabelPdf applies the entql bool predicate on the label_pdf field.
func (f *PrinterFilter) WhereLabelPdf(p entql.BoolP) {
	f.Where(p.Field(printer.FieldLabelPdf))
}

// WhereLabelPng applies the entql bool predicate on the label_png field.
func (f *PrinterFilter) WhereLabelPng(p entql.BoolP) {
	f.Where(p.Field(printer.FieldLabelPng))
}

// WhereDocument applies the entql bool predicate on the document field.
func (f *PrinterFilter) WhereDocument(p entql.BoolP) {
	f.Where(p.Field(printer.FieldDocument))
}

// WhereRotate180 applies the entql bool predicate on the rotate_180 field.
func (f *PrinterFilter) WhereRotate180(p entql.BoolP) {
	f.Where(p.Field(printer.FieldRotate180))
}

// WhereUseShell applies the entql bool predicate on the use_shell field.
func (f *PrinterFilter) WhereUseShell(p entql.BoolP) {
	f.Where(p.Field(printer.FieldUseShell))
}

// WherePrintSize applies the entql string predicate on the print_size field.
func (f *PrinterFilter) WherePrintSize(p entql.StringP) {
	f.Where(p.Field(printer.FieldPrintSize))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PrinterFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(printer.FieldCreatedAt))
}

// WhereLastPing applies the entql time.Time predicate on the last_ping field.
func (f *PrinterFilter) WhereLastPing(p entql.TimeP) {
	f.Where(p.Field(printer.FieldLastPing))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *PrinterFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *PrinterFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkstation applies a predicate to check if query has an edge workstation.
func (f *PrinterFilter) WhereHasWorkstation() {
	f.Where(entql.HasEdge("workstation"))
}

// WhereHasWorkstationWith applies a predicate to check if query has an edge workstation with a given conditions (other predicates).
func (f *PrinterFilter) WhereHasWorkstationWith(preds ...predicate.Workstation) {
	f.Where(entql.HasEdgeWith("workstation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrintJobs applies a predicate to check if query has an edge print_jobs.
func (f *PrinterFilter) WhereHasPrintJobs() {
	f.Where(entql.HasEdge("print_jobs"))
}

// WhereHasPrintJobsWith applies a predicate to check if query has an edge print_jobs with a given conditions (other predicates).
func (f *PrinterFilter) WhereHasPrintJobsWith(preds ...predicate.PrintJob) {
	f.Where(entql.HasEdgeWith("print_jobs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProductQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProductQuery builder.
func (pq *ProductQuery) Filter() *ProductFilter {
	return &ProductFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProductMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProductMutation builder.
func (m *ProductMutation) Filter() *ProductFilter {
	return &ProductFilter{config: m.config, predicateAdder: m}
}

// ProductFilter provides a generic filtering capability at runtime for ProductQuery.
type ProductFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProductFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[89].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProductFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(product.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ProductFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(product.FieldTenantID))
}

// WhereExternalID applies the entql string predicate on the external_id field.
func (f *ProductFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(product.FieldExternalID))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ProductFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(product.FieldTitle))
}

// WhereBodyHTML applies the entql string predicate on the body_html field.
func (f *ProductFilter) WhereBodyHTML(p entql.StringP) {
	f.Where(p.Field(product.FieldBodyHTML))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ProductFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(product.FieldStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProductFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(product.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProductFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(product.FieldUpdatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ProductFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ProductFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductTags applies a predicate to check if query has an edge product_tags.
func (f *ProductFilter) WhereHasProductTags() {
	f.Where(entql.HasEdge("product_tags"))
}

// WhereHasProductTagsWith applies a predicate to check if query has an edge product_tags with a given conditions (other predicates).
func (f *ProductFilter) WhereHasProductTagsWith(preds ...predicate.ProductTag) {
	f.Where(entql.HasEdgeWith("product_tags", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductVariant applies a predicate to check if query has an edge product_variant.
func (f *ProductFilter) WhereHasProductVariant() {
	f.Where(entql.HasEdge("product_variant"))
}

// WhereHasProductVariantWith applies a predicate to check if query has an edge product_variant with a given conditions (other predicates).
func (f *ProductFilter) WhereHasProductVariantWith(preds ...predicate.ProductVariant) {
	f.Where(entql.HasEdgeWith("product_variant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductImage applies a predicate to check if query has an edge product_image.
func (f *ProductFilter) WhereHasProductImage() {
	f.Where(entql.HasEdge("product_image"))
}

// WhereHasProductImageWith applies a predicate to check if query has an edge product_image with a given conditions (other predicates).
func (f *ProductFilter) WhereHasProductImageWith(preds ...predicate.ProductImage) {
	f.Where(entql.HasEdgeWith("product_image", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (piq *ProductImageQuery) addPredicate(pred func(s *sql.Selector)) {
	piq.predicates = append(piq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProductImageQuery builder.
func (piq *ProductImageQuery) Filter() *ProductImageFilter {
	return &ProductImageFilter{config: piq.config, predicateAdder: piq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProductImageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProductImageMutation builder.
func (m *ProductImageMutation) Filter() *ProductImageFilter {
	return &ProductImageFilter{config: m.config, predicateAdder: m}
}

// ProductImageFilter provides a generic filtering capability at runtime for ProductImageQuery.
type ProductImageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProductImageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[90].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProductImageFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(productimage.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ProductImageFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(productimage.FieldTenantID))
}

// WhereExternalID applies the entql string predicate on the external_id field.
func (f *ProductImageFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(productimage.FieldExternalID))
}

// WhereURL applies the entql string predicate on the url field.
func (f *ProductImageFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(productimage.FieldURL))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ProductImageFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ProductImageFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProduct applies a predicate to check if query has an edge product.
func (f *ProductImageFilter) WhereHasProduct() {
	f.Where(entql.HasEdge("product"))
}

// WhereHasProductWith applies a predicate to check if query has an edge product with a given conditions (other predicates).
func (f *ProductImageFilter) WhereHasProductWith(preds ...predicate.Product) {
	f.Where(entql.HasEdgeWith("product", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductVariant applies a predicate to check if query has an edge product_variant.
func (f *ProductImageFilter) WhereHasProductVariant() {
	f.Where(entql.HasEdge("product_variant"))
}

// WhereHasProductVariantWith applies a predicate to check if query has an edge product_variant with a given conditions (other predicates).
func (f *ProductImageFilter) WhereHasProductVariantWith(preds ...predicate.ProductVariant) {
	f.Where(entql.HasEdgeWith("product_variant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ptq *ProductTagQuery) addPredicate(pred func(s *sql.Selector)) {
	ptq.predicates = append(ptq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProductTagQuery builder.
func (ptq *ProductTagQuery) Filter() *ProductTagFilter {
	return &ProductTagFilter{config: ptq.config, predicateAdder: ptq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProductTagMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProductTagMutation builder.
func (m *ProductTagMutation) Filter() *ProductTagFilter {
	return &ProductTagFilter{config: m.config, predicateAdder: m}
}

// ProductTagFilter provides a generic filtering capability at runtime for ProductTagQuery.
type ProductTagFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProductTagFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[91].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProductTagFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(producttag.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ProductTagFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(producttag.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ProductTagFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(producttag.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProductTagFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(producttag.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ProductTagFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ProductTagFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProducts applies a predicate to check if query has an edge products.
func (f *ProductTagFilter) WhereHasProducts() {
	f.Where(entql.HasEdge("products"))
}

// WhereHasProductsWith applies a predicate to check if query has an edge products with a given conditions (other predicates).
func (f *ProductTagFilter) WhereHasProductsWith(preds ...predicate.Product) {
	f.Where(entql.HasEdgeWith("products", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pvq *ProductVariantQuery) addPredicate(pred func(s *sql.Selector)) {
	pvq.predicates = append(pvq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProductVariantQuery builder.
func (pvq *ProductVariantQuery) Filter() *ProductVariantFilter {
	return &ProductVariantFilter{config: pvq.config, predicateAdder: pvq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProductVariantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProductVariantMutation builder.
func (m *ProductVariantMutation) Filter() *ProductVariantFilter {
	return &ProductVariantFilter{config: m.config, predicateAdder: m}
}

// ProductVariantFilter provides a generic filtering capability at runtime for ProductVariantQuery.
type ProductVariantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProductVariantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[92].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ProductVariantFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(productvariant.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ProductVariantFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(productvariant.FieldTenantID))
}

// WhereArchived applies the entql bool predicate on the archived field.
func (f *ProductVariantFilter) WhereArchived(p entql.BoolP) {
	f.Where(p.Field(productvariant.FieldArchived))
}

// WhereExternalID applies the entql string predicate on the external_ID field.
func (f *ProductVariantFilter) WhereExternalID(p entql.StringP) {
	f.Where(p.Field(productvariant.FieldExternalID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ProductVariantFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(productvariant.FieldDescription))
}

// WhereEanNumber applies the entql string predicate on the ean_number field.
func (f *ProductVariantFilter) WhereEanNumber(p entql.StringP) {
	f.Where(p.Field(productvariant.FieldEanNumber))
}

// WhereWeightG applies the entql int predicate on the weight_g field.
func (f *ProductVariantFilter) WhereWeightG(p entql.IntP) {
	f.Where(p.Field(productvariant.FieldWeightG))
}

// WhereDimensionLength applies the entql int predicate on the dimension_length field.
func (f *ProductVariantFilter) WhereDimensionLength(p entql.IntP) {
	f.Where(p.Field(productvariant.FieldDimensionLength))
}

// WhereDimensionWidth applies the entql int predicate on the dimension_width field.
func (f *ProductVariantFilter) WhereDimensionWidth(p entql.IntP) {
	f.Where(p.Field(productvariant.FieldDimensionWidth))
}

// WhereDimensionHeight applies the entql int predicate on the dimension_height field.
func (f *ProductVariantFilter) WhereDimensionHeight(p entql.IntP) {
	f.Where(p.Field(productvariant.FieldDimensionHeight))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ProductVariantFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(productvariant.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ProductVariantFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(productvariant.FieldUpdatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ProductVariantFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ProductVariantFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProduct applies a predicate to check if query has an edge product.
func (f *ProductVariantFilter) WhereHasProduct() {
	f.Where(entql.HasEdge("product"))
}

// WhereHasProductWith applies a predicate to check if query has an edge product with a given conditions (other predicates).
func (f *ProductVariantFilter) WhereHasProductWith(preds ...predicate.Product) {
	f.Where(entql.HasEdgeWith("product", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderLines applies a predicate to check if query has an edge order_lines.
func (f *ProductVariantFilter) WhereHasOrderLines() {
	f.Where(entql.HasEdge("order_lines"))
}

// WhereHasOrderLinesWith applies a predicate to check if query has an edge order_lines with a given conditions (other predicates).
func (f *ProductVariantFilter) WhereHasOrderLinesWith(preds ...predicate.OrderLine) {
	f.Where(entql.HasEdgeWith("order_lines", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProductImage applies a predicate to check if query has an edge product_image.
func (f *ProductVariantFilter) WhereHasProductImage() {
	f.Where(entql.HasEdge("product_image"))
}

// WhereHasProductImageWith applies a predicate to check if query has an edge product_image with a given conditions (other predicates).
func (f *ProductVariantFilter) WhereHasProductImageWith(preds ...predicate.ProductImage) {
	f.Where(entql.HasEdgeWith("product_image", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInventoryItem applies a predicate to check if query has an edge inventory_item.
func (f *ProductVariantFilter) WhereHasInventoryItem() {
	f.Where(entql.HasEdge("inventory_item"))
}

// WhereHasInventoryItemWith applies a predicate to check if query has an edge inventory_item with a given conditions (other predicates).
func (f *ProductVariantFilter) WhereHasInventoryItemWith(preds ...predicate.InventoryItem) {
	f.Where(entql.HasEdgeWith("inventory_item", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rcq *ReturnColliQuery) addPredicate(pred func(s *sql.Selector)) {
	rcq.predicates = append(rcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReturnColliQuery builder.
func (rcq *ReturnColliQuery) Filter() *ReturnColliFilter {
	return &ReturnColliFilter{config: rcq.config, predicateAdder: rcq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReturnColliMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReturnColliMutation builder.
func (m *ReturnColliMutation) Filter() *ReturnColliFilter {
	return &ReturnColliFilter{config: m.config, predicateAdder: m}
}

// ReturnColliFilter provides a generic filtering capability at runtime for ReturnColliQuery.
type ReturnColliFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReturnColliFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[93].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ReturnColliFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ReturnColliFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldTenantID))
}

// WhereExpectedAt applies the entql time.Time predicate on the expected_at field.
func (f *ReturnColliFilter) WhereExpectedAt(p entql.TimeP) {
	f.Where(p.Field(returncolli.FieldExpectedAt))
}

// WhereLabelPdf applies the entql string predicate on the label_pdf field.
func (f *ReturnColliFilter) WhereLabelPdf(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldLabelPdf))
}

// WhereLabelPng applies the entql string predicate on the label_png field.
func (f *ReturnColliFilter) WhereLabelPng(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldLabelPng))
}

// WhereQrCodePng applies the entql string predicate on the qr_code_png field.
func (f *ReturnColliFilter) WhereQrCodePng(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldQrCodePng))
}

// WhereComment applies the entql string predicate on the comment field.
func (f *ReturnColliFilter) WhereComment(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldComment))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReturnColliFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(returncolli.FieldCreatedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ReturnColliFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(returncolli.FieldStatus))
}

// WhereEmailReceived applies the entql time.Time predicate on the email_received field.
func (f *ReturnColliFilter) WhereEmailReceived(p entql.TimeP) {
	f.Where(p.Field(returncolli.FieldEmailReceived))
}

// WhereEmailAccepted applies the entql time.Time predicate on the email_accepted field.
func (f *ReturnColliFilter) WhereEmailAccepted(p entql.TimeP) {
	f.Where(p.Field(returncolli.FieldEmailAccepted))
}

// WhereEmailConfirmationLabel applies the entql time.Time predicate on the email_confirmation_label field.
func (f *ReturnColliFilter) WhereEmailConfirmationLabel(p entql.TimeP) {
	f.Where(p.Field(returncolli.FieldEmailConfirmationLabel))
}

// WhereEmailConfirmationQrCode applies the entql time.Time predicate on the email_confirmation_qr_code field.
func (f *ReturnColliFilter) WhereEmailConfirmationQrCode(p entql.TimeP) {
	f.Where(p.Field(returncolli.FieldEmailConfirmationQrCode))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ReturnColliFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRecipient applies a predicate to check if query has an edge recipient.
func (f *ReturnColliFilter) WhereHasRecipient() {
	f.Where(entql.HasEdge("recipient"))
}

// WhereHasRecipientWith applies a predicate to check if query has an edge recipient with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasRecipientWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("recipient", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSender applies a predicate to check if query has an edge sender.
func (f *ReturnColliFilter) WhereHasSender() {
	f.Where(entql.HasEdge("sender"))
}

// WhereHasSenderWith applies a predicate to check if query has an edge sender with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasSenderWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("sender", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *ReturnColliFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOption applies a predicate to check if query has an edge delivery_option.
func (f *ReturnColliFilter) WhereHasDeliveryOption() {
	f.Where(entql.HasEdge("delivery_option"))
}

// WhereHasDeliveryOptionWith applies a predicate to check if query has an edge delivery_option with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasDeliveryOptionWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_option", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortal applies a predicate to check if query has an edge return_portal.
func (f *ReturnColliFilter) WhereHasReturnPortal() {
	f.Where(entql.HasEdge("return_portal"))
}

// WhereHasReturnPortalWith applies a predicate to check if query has an edge return_portal with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasReturnPortalWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *ReturnColliFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnOrderLine applies a predicate to check if query has an edge return_order_line.
func (f *ReturnColliFilter) WhereHasReturnOrderLine() {
	f.Where(entql.HasEdge("return_order_line"))
}

// WhereHasReturnOrderLineWith applies a predicate to check if query has an edge return_order_line with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasReturnOrderLineWith(preds ...predicate.ReturnOrderLine) {
	f.Where(entql.HasEdgeWith("return_order_line", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColliHistory applies a predicate to check if query has an edge return_colli_history.
func (f *ReturnColliFilter) WhereHasReturnColliHistory() {
	f.Where(entql.HasEdge("return_colli_history"))
}

// WhereHasReturnColliHistoryWith applies a predicate to check if query has an edge return_colli_history with a given conditions (other predicates).
func (f *ReturnColliFilter) WhereHasReturnColliHistoryWith(preds ...predicate.ReturnColliHistory) {
	f.Where(entql.HasEdgeWith("return_colli_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rchq *ReturnColliHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	rchq.predicates = append(rchq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReturnColliHistoryQuery builder.
func (rchq *ReturnColliHistoryQuery) Filter() *ReturnColliHistoryFilter {
	return &ReturnColliHistoryFilter{config: rchq.config, predicateAdder: rchq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReturnColliHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReturnColliHistoryMutation builder.
func (m *ReturnColliHistoryMutation) Filter() *ReturnColliHistoryFilter {
	return &ReturnColliHistoryFilter{config: m.config, predicateAdder: m}
}

// ReturnColliHistoryFilter provides a generic filtering capability at runtime for ReturnColliHistoryQuery.
type ReturnColliHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReturnColliHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[94].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ReturnColliHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(returncollihistory.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ReturnColliHistoryFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(returncollihistory.FieldTenantID))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ReturnColliHistoryFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(returncollihistory.FieldDescription))
}

// WhereType applies the entql string predicate on the type field.
func (f *ReturnColliHistoryFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(returncollihistory.FieldType))
}

// WhereHasChangeHistory applies a predicate to check if query has an edge change_history.
func (f *ReturnColliHistoryFilter) WhereHasChangeHistory() {
	f.Where(entql.HasEdge("change_history"))
}

// WhereHasChangeHistoryWith applies a predicate to check if query has an edge change_history with a given conditions (other predicates).
func (f *ReturnColliHistoryFilter) WhereHasChangeHistoryWith(preds ...predicate.ChangeHistory) {
	f.Where(entql.HasEdgeWith("change_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ReturnColliHistoryFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ReturnColliHistoryFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColli applies a predicate to check if query has an edge return_colli.
func (f *ReturnColliHistoryFilter) WhereHasReturnColli() {
	f.Where(entql.HasEdge("return_colli"))
}

// WhereHasReturnColliWith applies a predicate to check if query has an edge return_colli with a given conditions (other predicates).
func (f *ReturnColliHistoryFilter) WhereHasReturnColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rolq *ReturnOrderLineQuery) addPredicate(pred func(s *sql.Selector)) {
	rolq.predicates = append(rolq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReturnOrderLineQuery builder.
func (rolq *ReturnOrderLineQuery) Filter() *ReturnOrderLineFilter {
	return &ReturnOrderLineFilter{config: rolq.config, predicateAdder: rolq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReturnOrderLineMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReturnOrderLineMutation builder.
func (m *ReturnOrderLineMutation) Filter() *ReturnOrderLineFilter {
	return &ReturnOrderLineFilter{config: m.config, predicateAdder: m}
}

// ReturnOrderLineFilter provides a generic filtering capability at runtime for ReturnOrderLineQuery.
type ReturnOrderLineFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReturnOrderLineFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[95].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ReturnOrderLineFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(returnorderline.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ReturnOrderLineFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(returnorderline.FieldTenantID))
}

// WhereUnits applies the entql int predicate on the units field.
func (f *ReturnOrderLineFilter) WhereUnits(p entql.IntP) {
	f.Where(p.Field(returnorderline.FieldUnits))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ReturnOrderLineFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ReturnOrderLineFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColli applies a predicate to check if query has an edge return_colli.
func (f *ReturnOrderLineFilter) WhereHasReturnColli() {
	f.Where(entql.HasEdge("return_colli"))
}

// WhereHasReturnColliWith applies a predicate to check if query has an edge return_colli with a given conditions (other predicates).
func (f *ReturnOrderLineFilter) WhereHasReturnColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrderLine applies a predicate to check if query has an edge order_line.
func (f *ReturnOrderLineFilter) WhereHasOrderLine() {
	f.Where(entql.HasEdge("order_line"))
}

// WhereHasOrderLineWith applies a predicate to check if query has an edge order_line with a given conditions (other predicates).
func (f *ReturnOrderLineFilter) WhereHasOrderLineWith(preds ...predicate.OrderLine) {
	f.Where(entql.HasEdgeWith("order_line", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortalClaim applies a predicate to check if query has an edge return_portal_claim.
func (f *ReturnOrderLineFilter) WhereHasReturnPortalClaim() {
	f.Where(entql.HasEdge("return_portal_claim"))
}

// WhereHasReturnPortalClaimWith applies a predicate to check if query has an edge return_portal_claim with a given conditions (other predicates).
func (f *ReturnOrderLineFilter) WhereHasReturnPortalClaimWith(preds ...predicate.ReturnPortalClaim) {
	f.Where(entql.HasEdgeWith("return_portal_claim", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rpq *ReturnPortalQuery) addPredicate(pred func(s *sql.Selector)) {
	rpq.predicates = append(rpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReturnPortalQuery builder.
func (rpq *ReturnPortalQuery) Filter() *ReturnPortalFilter {
	return &ReturnPortalFilter{config: rpq.config, predicateAdder: rpq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReturnPortalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReturnPortalMutation builder.
func (m *ReturnPortalMutation) Filter() *ReturnPortalFilter {
	return &ReturnPortalFilter{config: m.config, predicateAdder: m}
}

// ReturnPortalFilter provides a generic filtering capability at runtime for ReturnPortalQuery.
type ReturnPortalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReturnPortalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[96].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ReturnPortalFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(returnportal.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ReturnPortalFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(returnportal.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ReturnPortalFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(returnportal.FieldName))
}

// WhereReturnOpenHours applies the entql int predicate on the return_open_hours field.
func (f *ReturnPortalFilter) WhereReturnOpenHours(p entql.IntP) {
	f.Where(p.Field(returnportal.FieldReturnOpenHours))
}

// WhereAutomaticallyAccept applies the entql bool predicate on the automatically_accept field.
func (f *ReturnPortalFilter) WhereAutomaticallyAccept(p entql.BoolP) {
	f.Where(p.Field(returnportal.FieldAutomaticallyAccept))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ReturnPortalFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortalClaim applies a predicate to check if query has an edge return_portal_claim.
func (f *ReturnPortalFilter) WhereHasReturnPortalClaim() {
	f.Where(entql.HasEdge("return_portal_claim"))
}

// WhereHasReturnPortalClaimWith applies a predicate to check if query has an edge return_portal_claim with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasReturnPortalClaimWith(preds ...predicate.ReturnPortalClaim) {
	f.Where(entql.HasEdgeWith("return_portal_claim", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnLocation applies a predicate to check if query has an edge return_location.
func (f *ReturnPortalFilter) WhereHasReturnLocation() {
	f.Where(entql.HasEdge("return_location"))
}

// WhereHasReturnLocationWith applies a predicate to check if query has an edge return_location with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasReturnLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("return_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveryOptions applies a predicate to check if query has an edge delivery_options.
func (f *ReturnPortalFilter) WhereHasDeliveryOptions() {
	f.Where(entql.HasEdge("delivery_options"))
}

// WhereHasDeliveryOptionsWith applies a predicate to check if query has an edge delivery_options with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasDeliveryOptionsWith(preds ...predicate.DeliveryOption) {
	f.Where(entql.HasEdgeWith("delivery_options", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnection applies a predicate to check if query has an edge connection.
func (f *ReturnPortalFilter) WhereHasConnection() {
	f.Where(entql.HasEdge("connection"))
}

// WhereHasConnectionWith applies a predicate to check if query has an edge connection with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasConnectionWith(preds ...predicate.Connection) {
	f.Where(entql.HasEdgeWith("connection", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailConfirmationLabel applies a predicate to check if query has an edge email_confirmation_label.
func (f *ReturnPortalFilter) WhereHasEmailConfirmationLabel() {
	f.Where(entql.HasEdge("email_confirmation_label"))
}

// WhereHasEmailConfirmationLabelWith applies a predicate to check if query has an edge email_confirmation_label with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasEmailConfirmationLabelWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_confirmation_label", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailConfirmationQrCode applies a predicate to check if query has an edge email_confirmation_qr_code.
func (f *ReturnPortalFilter) WhereHasEmailConfirmationQrCode() {
	f.Where(entql.HasEdge("email_confirmation_qr_code"))
}

// WhereHasEmailConfirmationQrCodeWith applies a predicate to check if query has an edge email_confirmation_qr_code with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasEmailConfirmationQrCodeWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_confirmation_qr_code", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailReceived applies a predicate to check if query has an edge email_received.
func (f *ReturnPortalFilter) WhereHasEmailReceived() {
	f.Where(entql.HasEdge("email_received"))
}

// WhereHasEmailReceivedWith applies a predicate to check if query has an edge email_received with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasEmailReceivedWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_received", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailAccepted applies a predicate to check if query has an edge email_accepted.
func (f *ReturnPortalFilter) WhereHasEmailAccepted() {
	f.Where(entql.HasEdge("email_accepted"))
}

// WhereHasEmailAcceptedWith applies a predicate to check if query has an edge email_accepted with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasEmailAcceptedWith(preds ...predicate.EmailTemplate) {
	f.Where(entql.HasEdgeWith("email_accepted", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnColli applies a predicate to check if query has an edge return_colli.
func (f *ReturnPortalFilter) WhereHasReturnColli() {
	f.Where(entql.HasEdge("return_colli"))
}

// WhereHasReturnColliWith applies a predicate to check if query has an edge return_colli with a given conditions (other predicates).
func (f *ReturnPortalFilter) WhereHasReturnColliWith(preds ...predicate.ReturnColli) {
	f.Where(entql.HasEdgeWith("return_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rpcq *ReturnPortalClaimQuery) addPredicate(pred func(s *sql.Selector)) {
	rpcq.predicates = append(rpcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReturnPortalClaimQuery builder.
func (rpcq *ReturnPortalClaimQuery) Filter() *ReturnPortalClaimFilter {
	return &ReturnPortalClaimFilter{config: rpcq.config, predicateAdder: rpcq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReturnPortalClaimMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReturnPortalClaimMutation builder.
func (m *ReturnPortalClaimMutation) Filter() *ReturnPortalClaimFilter {
	return &ReturnPortalClaimFilter{config: m.config, predicateAdder: m}
}

// ReturnPortalClaimFilter provides a generic filtering capability at runtime for ReturnPortalClaimQuery.
type ReturnPortalClaimFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReturnPortalClaimFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[97].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ReturnPortalClaimFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(returnportalclaim.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ReturnPortalClaimFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(returnportalclaim.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ReturnPortalClaimFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(returnportalclaim.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ReturnPortalClaimFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(returnportalclaim.FieldDescription))
}

// WhereRestockable applies the entql bool predicate on the restockable field.
func (f *ReturnPortalClaimFilter) WhereRestockable(p entql.BoolP) {
	f.Where(p.Field(returnportalclaim.FieldRestockable))
}

// WhereArchived applies the entql bool predicate on the archived field.
func (f *ReturnPortalClaimFilter) WhereArchived(p entql.BoolP) {
	f.Where(p.Field(returnportalclaim.FieldArchived))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ReturnPortalClaimFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ReturnPortalClaimFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnPortal applies a predicate to check if query has an edge return_portal.
func (f *ReturnPortalClaimFilter) WhereHasReturnPortal() {
	f.Where(entql.HasEdge("return_portal"))
}

// WhereHasReturnPortalWith applies a predicate to check if query has an edge return_portal with a given conditions (other predicates).
func (f *ReturnPortalClaimFilter) WhereHasReturnPortalWith(preds ...predicate.ReturnPortal) {
	f.Where(entql.HasEdgeWith("return_portal", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnLocation applies a predicate to check if query has an edge return_location.
func (f *ReturnPortalClaimFilter) WhereHasReturnLocation() {
	f.Where(entql.HasEdge("return_location"))
}

// WhereHasReturnLocationWith applies a predicate to check if query has an edge return_location with a given conditions (other predicates).
func (f *ReturnPortalClaimFilter) WhereHasReturnLocationWith(preds ...predicate.Location) {
	f.Where(entql.HasEdgeWith("return_location", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReturnOrderLine applies a predicate to check if query has an edge return_order_line.
func (f *ReturnPortalClaimFilter) WhereHasReturnOrderLine() {
	f.Where(entql.HasEdge("return_order_line"))
}

// WhereHasReturnOrderLineWith applies a predicate to check if query has an edge return_order_line with a given conditions (other predicates).
func (f *ReturnPortalClaimFilter) WhereHasReturnOrderLineWith(preds ...predicate.ReturnOrderLine) {
	f.Where(entql.HasEdgeWith("return_order_line", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sgq *SeatGroupQuery) addPredicate(pred func(s *sql.Selector)) {
	sgq.predicates = append(sgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SeatGroupQuery builder.
func (sgq *SeatGroupQuery) Filter() *SeatGroupFilter {
	return &SeatGroupFilter{config: sgq.config, predicateAdder: sgq}
}

// addPredicate implements the predicateAdder interface.
func (m *SeatGroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SeatGroupMutation builder.
func (m *SeatGroupMutation) Filter() *SeatGroupFilter {
	return &SeatGroupFilter{config: m.config, predicateAdder: m}
}

// SeatGroupFilter provides a generic filtering capability at runtime for SeatGroupQuery.
type SeatGroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SeatGroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[98].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SeatGroupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(seatgroup.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *SeatGroupFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(seatgroup.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *SeatGroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(seatgroup.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SeatGroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(seatgroup.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *SeatGroupFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *SeatGroupFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *SeatGroupFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *SeatGroupFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssignedAccessRight applies a predicate to check if query has an edge assigned_access_right.
func (f *SeatGroupFilter) WhereHasAssignedAccessRight() {
	f.Where(entql.HasEdge("assigned_access_right"))
}

// WhereHasAssignedAccessRightWith applies a predicate to check if query has an edge assigned_access_right with a given conditions (other predicates).
func (f *SeatGroupFilter) WhereHasAssignedAccessRightWith(preds ...predicate.AccessRight) {
	f.Where(entql.HasEdgeWith("assigned_access_right", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeatGroupAccessRight applies a predicate to check if query has an edge seat_group_access_right.
func (f *SeatGroupFilter) WhereHasSeatGroupAccessRight() {
	f.Where(entql.HasEdge("seat_group_access_right"))
}

// WhereHasSeatGroupAccessRightWith applies a predicate to check if query has an edge seat_group_access_right with a given conditions (other predicates).
func (f *SeatGroupFilter) WhereHasSeatGroupAccessRightWith(preds ...predicate.SeatGroupAccessRight) {
	f.Where(entql.HasEdgeWith("seat_group_access_right", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sgarq *SeatGroupAccessRightQuery) addPredicate(pred func(s *sql.Selector)) {
	sgarq.predicates = append(sgarq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SeatGroupAccessRightQuery builder.
func (sgarq *SeatGroupAccessRightQuery) Filter() *SeatGroupAccessRightFilter {
	return &SeatGroupAccessRightFilter{config: sgarq.config, predicateAdder: sgarq}
}

// addPredicate implements the predicateAdder interface.
func (m *SeatGroupAccessRightMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SeatGroupAccessRightMutation builder.
func (m *SeatGroupAccessRightMutation) Filter() *SeatGroupAccessRightFilter {
	return &SeatGroupAccessRightFilter{config: m.config, predicateAdder: m}
}

// SeatGroupAccessRightFilter provides a generic filtering capability at runtime for SeatGroupAccessRightQuery.
type SeatGroupAccessRightFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SeatGroupAccessRightFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[99].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SeatGroupAccessRightFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(seatgroupaccessright.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *SeatGroupAccessRightFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(seatgroupaccessright.FieldTenantID))
}

// WhereLevel applies the entql string predicate on the level field.
func (f *SeatGroupAccessRightFilter) WhereLevel(p entql.StringP) {
	f.Where(p.Field(seatgroupaccessright.FieldLevel))
}

// WhereAccessRightID applies the entql string predicate on the access_right_id field.
func (f *SeatGroupAccessRightFilter) WhereAccessRightID(p entql.StringP) {
	f.Where(p.Field(seatgroupaccessright.FieldAccessRightID))
}

// WhereSeatGroupID applies the entql string predicate on the seat_group_id field.
func (f *SeatGroupAccessRightFilter) WhereSeatGroupID(p entql.StringP) {
	f.Where(p.Field(seatgroupaccessright.FieldSeatGroupID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *SeatGroupAccessRightFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *SeatGroupAccessRightFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAccessRight applies a predicate to check if query has an edge access_right.
func (f *SeatGroupAccessRightFilter) WhereHasAccessRight() {
	f.Where(entql.HasEdge("access_right"))
}

// WhereHasAccessRightWith applies a predicate to check if query has an edge access_right with a given conditions (other predicates).
func (f *SeatGroupAccessRightFilter) WhereHasAccessRightWith(preds ...predicate.AccessRight) {
	f.Where(entql.HasEdgeWith("access_right", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeatGroup applies a predicate to check if query has an edge seat_group.
func (f *SeatGroupAccessRightFilter) WhereHasSeatGroup() {
	f.Where(entql.HasEdge("seat_group"))
}

// WhereHasSeatGroupWith applies a predicate to check if query has an edge seat_group with a given conditions (other predicates).
func (f *SeatGroupAccessRightFilter) WhereHasSeatGroupWith(preds ...predicate.SeatGroup) {
	f.Where(entql.HasEdgeWith("seat_group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *ShipmentQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentQuery builder.
func (sq *ShipmentQuery) Filter() *ShipmentFilter {
	return &ShipmentFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentMutation builder.
func (m *ShipmentMutation) Filter() *ShipmentFilter {
	return &ShipmentFilter{config: m.config, predicateAdder: m}
}

// ShipmentFilter provides a generic filtering capability at runtime for ShipmentQuery.
type ShipmentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[100].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipment.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipment.FieldTenantID))
}

// WhereShipmentPublicID applies the entql string predicate on the shipment_public_id field.
func (f *ShipmentFilter) WhereShipmentPublicID(p entql.StringP) {
	f.Where(p.Field(shipment.FieldShipmentPublicID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ShipmentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(shipment.FieldCreatedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ShipmentFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(shipment.FieldStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCarrier applies a predicate to check if query has an edge carrier.
func (f *ShipmentFilter) WhereHasCarrier() {
	f.Where(entql.HasEdge("carrier"))
}

// WhereHasCarrierWith applies a predicate to check if query has an edge carrier with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasCarrierWith(preds ...predicate.Carrier) {
	f.Where(entql.HasEdgeWith("carrier", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentHistory applies a predicate to check if query has an edge shipment_history.
func (f *ShipmentFilter) WhereHasShipmentHistory() {
	f.Where(entql.HasEdge("shipment_history"))
}

// WhereHasShipmentHistoryWith applies a predicate to check if query has an edge shipment_history with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentHistoryWith(preds ...predicate.ShipmentHistory) {
	f.Where(entql.HasEdgeWith("shipment_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentBring applies a predicate to check if query has an edge shipment_bring.
func (f *ShipmentFilter) WhereHasShipmentBring() {
	f.Where(entql.HasEdge("shipment_bring"))
}

// WhereHasShipmentBringWith applies a predicate to check if query has an edge shipment_bring with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentBringWith(preds ...predicate.ShipmentBring) {
	f.Where(entql.HasEdgeWith("shipment_bring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentDAO applies a predicate to check if query has an edge shipment_dao.
func (f *ShipmentFilter) WhereHasShipmentDAO() {
	f.Where(entql.HasEdge("shipment_dao"))
}

// WhereHasShipmentDAOWith applies a predicate to check if query has an edge shipment_dao with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentDAOWith(preds ...predicate.ShipmentDAO) {
	f.Where(entql.HasEdgeWith("shipment_dao", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentDF applies a predicate to check if query has an edge shipment_df.
func (f *ShipmentFilter) WhereHasShipmentDF() {
	f.Where(entql.HasEdge("shipment_df"))
}

// WhereHasShipmentDFWith applies a predicate to check if query has an edge shipment_df with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentDFWith(preds ...predicate.ShipmentDF) {
	f.Where(entql.HasEdgeWith("shipment_df", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentDSV applies a predicate to check if query has an edge shipment_dsv.
func (f *ShipmentFilter) WhereHasShipmentDSV() {
	f.Where(entql.HasEdge("shipment_dsv"))
}

// WhereHasShipmentDSVWith applies a predicate to check if query has an edge shipment_dsv with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentDSVWith(preds ...predicate.ShipmentDSV) {
	f.Where(entql.HasEdgeWith("shipment_dsv", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentEasyPost applies a predicate to check if query has an edge shipment_easy_post.
func (f *ShipmentFilter) WhereHasShipmentEasyPost() {
	f.Where(entql.HasEdge("shipment_easy_post"))
}

// WhereHasShipmentEasyPostWith applies a predicate to check if query has an edge shipment_easy_post with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentEasyPostWith(preds ...predicate.ShipmentEasyPost) {
	f.Where(entql.HasEdgeWith("shipment_easy_post", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentPostNord applies a predicate to check if query has an edge shipment_post_nord.
func (f *ShipmentFilter) WhereHasShipmentPostNord() {
	f.Where(entql.HasEdge("shipment_post_nord"))
}

// WhereHasShipmentPostNordWith applies a predicate to check if query has an edge shipment_post_nord with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentPostNordWith(preds ...predicate.ShipmentPostNord) {
	f.Where(entql.HasEdgeWith("shipment_post_nord", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentGLS applies a predicate to check if query has an edge shipment_gls.
func (f *ShipmentFilter) WhereHasShipmentGLS() {
	f.Where(entql.HasEdge("shipment_gls"))
}

// WhereHasShipmentGLSWith applies a predicate to check if query has an edge shipment_gls with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentGLSWith(preds ...predicate.ShipmentGLS) {
	f.Where(entql.HasEdgeWith("shipment_gls", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentUSPS applies a predicate to check if query has an edge shipment_usps.
func (f *ShipmentFilter) WhereHasShipmentUSPS() {
	f.Where(entql.HasEdge("shipment_usps"))
}

// WhereHasShipmentUSPSWith applies a predicate to check if query has an edge shipment_usps with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentUSPSWith(preds ...predicate.ShipmentUSPS) {
	f.Where(entql.HasEdgeWith("shipment_usps", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConsolidation applies a predicate to check if query has an edge consolidation.
func (f *ShipmentFilter) WhereHasConsolidation() {
	f.Where(entql.HasEdge("consolidation"))
}

// WhereHasConsolidationWith applies a predicate to check if query has an edge consolidation with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOldConsolidation applies a predicate to check if query has an edge old_consolidation.
func (f *ShipmentFilter) WhereHasOldConsolidation() {
	f.Where(entql.HasEdge("old_consolidation"))
}

// WhereHasOldConsolidationWith applies a predicate to check if query has an edge old_consolidation with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasOldConsolidationWith(preds ...predicate.Consolidation) {
	f.Where(entql.HasEdgeWith("old_consolidation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentParcel applies a predicate to check if query has an edge shipment_parcel.
func (f *ShipmentFilter) WhereHasShipmentParcel() {
	f.Where(entql.HasEdge("shipment_parcel"))
}

// WhereHasShipmentParcelWith applies a predicate to check if query has an edge shipment_parcel with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentPallet applies a predicate to check if query has an edge shipment_pallet.
func (f *ShipmentFilter) WhereHasShipmentPallet() {
	f.Where(entql.HasEdge("shipment_pallet"))
}

// WhereHasShipmentPalletWith applies a predicate to check if query has an edge shipment_pallet with a given conditions (other predicates).
func (f *ShipmentFilter) WhereHasShipmentPalletWith(preds ...predicate.ShipmentPallet) {
	f.Where(entql.HasEdgeWith("shipment_pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sbq *ShipmentBringQuery) addPredicate(pred func(s *sql.Selector)) {
	sbq.predicates = append(sbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentBringQuery builder.
func (sbq *ShipmentBringQuery) Filter() *ShipmentBringFilter {
	return &ShipmentBringFilter{config: sbq.config, predicateAdder: sbq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentBringMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentBringMutation builder.
func (m *ShipmentBringMutation) Filter() *ShipmentBringFilter {
	return &ShipmentBringFilter{config: m.config, predicateAdder: m}
}

// ShipmentBringFilter provides a generic filtering capability at runtime for ShipmentBringQuery.
type ShipmentBringFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentBringFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[101].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentBringFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentbring.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentBringFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentbring.FieldTenantID))
}

// WhereConsignmentNumber applies the entql string predicate on the consignment_number field.
func (f *ShipmentBringFilter) WhereConsignmentNumber(p entql.StringP) {
	f.Where(p.Field(shipmentbring.FieldConsignmentNumber))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentBringFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentBringFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentBringFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentBringFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sdq *ShipmentDAOQuery) addPredicate(pred func(s *sql.Selector)) {
	sdq.predicates = append(sdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentDAOQuery builder.
func (sdq *ShipmentDAOQuery) Filter() *ShipmentDAOFilter {
	return &ShipmentDAOFilter{config: sdq.config, predicateAdder: sdq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentDAOMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentDAOMutation builder.
func (m *ShipmentDAOMutation) Filter() *ShipmentDAOFilter {
	return &ShipmentDAOFilter{config: m.config, predicateAdder: m}
}

// ShipmentDAOFilter provides a generic filtering capability at runtime for ShipmentDAOQuery.
type ShipmentDAOFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentDAOFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[102].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentDAOFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentdao.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentDAOFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentdao.FieldTenantID))
}

// WhereBarcodeID applies the entql string predicate on the barcode_id field.
func (f *ShipmentDAOFilter) WhereBarcodeID(p entql.StringP) {
	f.Where(p.Field(shipmentdao.FieldBarcodeID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentDAOFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentDAOFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentDAOFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentDAOFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sdq *ShipmentDFQuery) addPredicate(pred func(s *sql.Selector)) {
	sdq.predicates = append(sdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentDFQuery builder.
func (sdq *ShipmentDFQuery) Filter() *ShipmentDFFilter {
	return &ShipmentDFFilter{config: sdq.config, predicateAdder: sdq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentDFMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentDFMutation builder.
func (m *ShipmentDFMutation) Filter() *ShipmentDFFilter {
	return &ShipmentDFFilter{config: m.config, predicateAdder: m}
}

// ShipmentDFFilter provides a generic filtering capability at runtime for ShipmentDFQuery.
type ShipmentDFFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentDFFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[103].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentDFFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentdf.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentDFFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentdf.FieldTenantID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentDFFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentDFFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentDFFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentDFFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sdq *ShipmentDSVQuery) addPredicate(pred func(s *sql.Selector)) {
	sdq.predicates = append(sdq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentDSVQuery builder.
func (sdq *ShipmentDSVQuery) Filter() *ShipmentDSVFilter {
	return &ShipmentDSVFilter{config: sdq.config, predicateAdder: sdq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentDSVMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentDSVMutation builder.
func (m *ShipmentDSVMutation) Filter() *ShipmentDSVFilter {
	return &ShipmentDSVFilter{config: m.config, predicateAdder: m}
}

// ShipmentDSVFilter provides a generic filtering capability at runtime for ShipmentDSVQuery.
type ShipmentDSVFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentDSVFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[104].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentDSVFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentdsv.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentDSVFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentdsv.FieldTenantID))
}

// WhereBarcodeID applies the entql string predicate on the barcode_id field.
func (f *ShipmentDSVFilter) WhereBarcodeID(p entql.StringP) {
	f.Where(p.Field(shipmentdsv.FieldBarcodeID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentDSVFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentDSVFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentDSVFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentDSVFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sepq *ShipmentEasyPostQuery) addPredicate(pred func(s *sql.Selector)) {
	sepq.predicates = append(sepq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentEasyPostQuery builder.
func (sepq *ShipmentEasyPostQuery) Filter() *ShipmentEasyPostFilter {
	return &ShipmentEasyPostFilter{config: sepq.config, predicateAdder: sepq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentEasyPostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentEasyPostMutation builder.
func (m *ShipmentEasyPostMutation) Filter() *ShipmentEasyPostFilter {
	return &ShipmentEasyPostFilter{config: m.config, predicateAdder: m}
}

// ShipmentEasyPostFilter provides a generic filtering capability at runtime for ShipmentEasyPostQuery.
type ShipmentEasyPostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentEasyPostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[105].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentEasyPostFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmenteasypost.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentEasyPostFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmenteasypost.FieldTenantID))
}

// WhereTrackingNumber applies the entql string predicate on the tracking_number field.
func (f *ShipmentEasyPostFilter) WhereTrackingNumber(p entql.StringP) {
	f.Where(p.Field(shipmenteasypost.FieldTrackingNumber))
}

// WhereEpShipmentID applies the entql string predicate on the ep_shipment_id field.
func (f *ShipmentEasyPostFilter) WhereEpShipmentID(p entql.StringP) {
	f.Where(p.Field(shipmenteasypost.FieldEpShipmentID))
}

// WhereRate applies the entql float64 predicate on the rate field.
func (f *ShipmentEasyPostFilter) WhereRate(p entql.Float64P) {
	f.Where(p.Field(shipmenteasypost.FieldRate))
}

// WhereEstDeliveryDate applies the entql time.Time predicate on the est_delivery_date field.
func (f *ShipmentEasyPostFilter) WhereEstDeliveryDate(p entql.TimeP) {
	f.Where(p.Field(shipmenteasypost.FieldEstDeliveryDate))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentEasyPostFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentEasyPostFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentEasyPostFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentEasyPostFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sgq *ShipmentGLSQuery) addPredicate(pred func(s *sql.Selector)) {
	sgq.predicates = append(sgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentGLSQuery builder.
func (sgq *ShipmentGLSQuery) Filter() *ShipmentGLSFilter {
	return &ShipmentGLSFilter{config: sgq.config, predicateAdder: sgq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentGLSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentGLSMutation builder.
func (m *ShipmentGLSMutation) Filter() *ShipmentGLSFilter {
	return &ShipmentGLSFilter{config: m.config, predicateAdder: m}
}

// ShipmentGLSFilter provides a generic filtering capability at runtime for ShipmentGLSQuery.
type ShipmentGLSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentGLSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[106].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentGLSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentgls.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentGLSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentgls.FieldTenantID))
}

// WhereConsignmentID applies the entql string predicate on the consignment_id field.
func (f *ShipmentGLSFilter) WhereConsignmentID(p entql.StringP) {
	f.Where(p.Field(shipmentgls.FieldConsignmentID))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentGLSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentGLSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentGLSFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentGLSFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (shq *ShipmentHistoryQuery) addPredicate(pred func(s *sql.Selector)) {
	shq.predicates = append(shq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentHistoryQuery builder.
func (shq *ShipmentHistoryQuery) Filter() *ShipmentHistoryFilter {
	return &ShipmentHistoryFilter{config: shq.config, predicateAdder: shq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentHistoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentHistoryMutation builder.
func (m *ShipmentHistoryMutation) Filter() *ShipmentHistoryFilter {
	return &ShipmentHistoryFilter{config: m.config, predicateAdder: m}
}

// ShipmentHistoryFilter provides a generic filtering capability at runtime for ShipmentHistoryQuery.
type ShipmentHistoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentHistoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[107].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentHistoryFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmenthistory.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentHistoryFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmenthistory.FieldTenantID))
}

// WhereType applies the entql string predicate on the type field.
func (f *ShipmentHistoryFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(shipmenthistory.FieldType))
}

// WhereHasChangeHistory applies a predicate to check if query has an edge change_history.
func (f *ShipmentHistoryFilter) WhereHasChangeHistory() {
	f.Where(entql.HasEdge("change_history"))
}

// WhereHasChangeHistoryWith applies a predicate to check if query has an edge change_history with a given conditions (other predicates).
func (f *ShipmentHistoryFilter) WhereHasChangeHistoryWith(preds ...predicate.ChangeHistory) {
	f.Where(entql.HasEdgeWith("change_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentHistoryFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentHistoryFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentHistoryFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentHistoryFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spq *ShipmentPalletQuery) addPredicate(pred func(s *sql.Selector)) {
	spq.predicates = append(spq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentPalletQuery builder.
func (spq *ShipmentPalletQuery) Filter() *ShipmentPalletFilter {
	return &ShipmentPalletFilter{config: spq.config, predicateAdder: spq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentPalletMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentPalletMutation builder.
func (m *ShipmentPalletMutation) Filter() *ShipmentPalletFilter {
	return &ShipmentPalletFilter{config: m.config, predicateAdder: m}
}

// ShipmentPalletFilter provides a generic filtering capability at runtime for ShipmentPalletQuery.
type ShipmentPalletFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentPalletFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[108].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentPalletFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentPalletFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldTenantID))
}

// WhereBarcode applies the entql string predicate on the barcode field.
func (f *ShipmentPalletFilter) WhereBarcode(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldBarcode))
}

// WhereColliNumber applies the entql string predicate on the colli_number field.
func (f *ShipmentPalletFilter) WhereColliNumber(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldColliNumber))
}

// WhereCarrierID applies the entql string predicate on the carrier_id field.
func (f *ShipmentPalletFilter) WhereCarrierID(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldCarrierID))
}

// WhereLabelPdf applies the entql string predicate on the label_pdf field.
func (f *ShipmentPalletFilter) WhereLabelPdf(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldLabelPdf))
}

// WhereLabelZpl applies the entql string predicate on the label_zpl field.
func (f *ShipmentPalletFilter) WhereLabelZpl(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldLabelZpl))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ShipmentPalletFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(shipmentpallet.FieldStatus))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentPalletFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentPalletFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPallet applies a predicate to check if query has an edge pallet.
func (f *ShipmentPalletFilter) WhereHasPallet() {
	f.Where(entql.HasEdge("pallet"))
}

// WhereHasPalletWith applies a predicate to check if query has an edge pallet with a given conditions (other predicates).
func (f *ShipmentPalletFilter) WhereHasPalletWith(preds ...predicate.Pallet) {
	f.Where(entql.HasEdgeWith("pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOldPallet applies a predicate to check if query has an edge old_pallet.
func (f *ShipmentPalletFilter) WhereHasOldPallet() {
	f.Where(entql.HasEdge("old_pallet"))
}

// WhereHasOldPalletWith applies a predicate to check if query has an edge old_pallet with a given conditions (other predicates).
func (f *ShipmentPalletFilter) WhereHasOldPalletWith(preds ...predicate.Pallet) {
	f.Where(entql.HasEdgeWith("old_pallet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentPalletFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentPalletFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spq *ShipmentParcelQuery) addPredicate(pred func(s *sql.Selector)) {
	spq.predicates = append(spq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentParcelQuery builder.
func (spq *ShipmentParcelQuery) Filter() *ShipmentParcelFilter {
	return &ShipmentParcelFilter{config: spq.config, predicateAdder: spq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentParcelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentParcelMutation builder.
func (m *ShipmentParcelMutation) Filter() *ShipmentParcelFilter {
	return &ShipmentParcelFilter{config: m.config, predicateAdder: m}
}

// ShipmentParcelFilter provides a generic filtering capability at runtime for ShipmentParcelQuery.
type ShipmentParcelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentParcelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[109].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentParcelFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentparcel.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentParcelFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentparcel.FieldTenantID))
}

// WhereItemID applies the entql string predicate on the item_id field.
func (f *ShipmentParcelFilter) WhereItemID(p entql.StringP) {
	f.Where(p.Field(shipmentparcel.FieldItemID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ShipmentParcelFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(shipmentparcel.FieldStatus))
}

// WhereCcPickupSignatureUrls applies the entql json.RawMessage predicate on the cc_pickup_signature_urls field.
func (f *ShipmentParcelFilter) WhereCcPickupSignatureUrls(p entql.BytesP) {
	f.Where(p.Field(shipmentparcel.FieldCcPickupSignatureUrls))
}

// WhereExpectedAt applies the entql time.Time predicate on the expected_at field.
func (f *ShipmentParcelFilter) WhereExpectedAt(p entql.TimeP) {
	f.Where(p.Field(shipmentparcel.FieldExpectedAt))
}

// WhereFulfillmentSyncedAt applies the entql time.Time predicate on the fulfillment_synced_at field.
func (f *ShipmentParcelFilter) WhereFulfillmentSyncedAt(p entql.TimeP) {
	f.Where(p.Field(shipmentparcel.FieldFulfillmentSyncedAt))
}

// WhereCancelSyncedAt applies the entql time.Time predicate on the cancel_synced_at field.
func (f *ShipmentParcelFilter) WhereCancelSyncedAt(p entql.TimeP) {
	f.Where(p.Field(shipmentparcel.FieldCancelSyncedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentParcelFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentParcelFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasColli applies a predicate to check if query has an edge colli.
func (f *ShipmentParcelFilter) WhereHasColli() {
	f.Where(entql.HasEdge("colli"))
}

// WhereHasColliWith applies a predicate to check if query has an edge colli with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOldColli applies a predicate to check if query has an edge old_colli.
func (f *ShipmentParcelFilter) WhereHasOldColli() {
	f.Where(entql.HasEdge("old_colli"))
}

// WhereHasOldColliWith applies a predicate to check if query has an edge old_colli with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasOldColliWith(preds ...predicate.Colli) {
	f.Where(entql.HasEdgeWith("old_colli", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkspaceRecentScan applies a predicate to check if query has an edge workspace_recent_scan.
func (f *ShipmentParcelFilter) WhereHasWorkspaceRecentScan() {
	f.Where(entql.HasEdge("workspace_recent_scan"))
}

// WhereHasWorkspaceRecentScanWith applies a predicate to check if query has an edge workspace_recent_scan with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasWorkspaceRecentScanWith(preds ...predicate.WorkspaceRecentScan) {
	f.Where(entql.HasEdgeWith("workspace_recent_scan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPackaging applies a predicate to check if query has an edge packaging.
func (f *ShipmentParcelFilter) WhereHasPackaging() {
	f.Where(entql.HasEdge("packaging"))
}

// WhereHasPackagingWith applies a predicate to check if query has an edge packaging with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasPackagingWith(preds ...predicate.Packaging) {
	f.Where(entql.HasEdgeWith("packaging", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrintJob applies a predicate to check if query has an edge print_job.
func (f *ShipmentParcelFilter) WhereHasPrintJob() {
	f.Where(entql.HasEdge("print_job"))
}

// WhereHasPrintJobWith applies a predicate to check if query has an edge print_job with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasPrintJobWith(preds ...predicate.PrintJob) {
	f.Where(entql.HasEdgeWith("print_job", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocumentFile applies a predicate to check if query has an edge document_file.
func (f *ShipmentParcelFilter) WhereHasDocumentFile() {
	f.Where(entql.HasEdge("document_file"))
}

// WhereHasDocumentFileWith applies a predicate to check if query has an edge document_file with a given conditions (other predicates).
func (f *ShipmentParcelFilter) WhereHasDocumentFileWith(preds ...predicate.DocumentFile) {
	f.Where(entql.HasEdgeWith("document_file", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spnq *ShipmentPostNordQuery) addPredicate(pred func(s *sql.Selector)) {
	spnq.predicates = append(spnq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentPostNordQuery builder.
func (spnq *ShipmentPostNordQuery) Filter() *ShipmentPostNordFilter {
	return &ShipmentPostNordFilter{config: spnq.config, predicateAdder: spnq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentPostNordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentPostNordMutation builder.
func (m *ShipmentPostNordMutation) Filter() *ShipmentPostNordFilter {
	return &ShipmentPostNordFilter{config: m.config, predicateAdder: m}
}

// ShipmentPostNordFilter provides a generic filtering capability at runtime for ShipmentPostNordQuery.
type ShipmentPostNordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentPostNordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[110].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentPostNordFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentpostnord.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentPostNordFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentpostnord.FieldTenantID))
}

// WhereBookingID applies the entql string predicate on the booking_id field.
func (f *ShipmentPostNordFilter) WhereBookingID(p entql.StringP) {
	f.Where(p.Field(shipmentpostnord.FieldBookingID))
}

// WhereItemID applies the entql string predicate on the item_id field.
func (f *ShipmentPostNordFilter) WhereItemID(p entql.StringP) {
	f.Where(p.Field(shipmentpostnord.FieldItemID))
}

// WhereShipmentReferenceNo applies the entql string predicate on the shipment_reference_no field.
func (f *ShipmentPostNordFilter) WhereShipmentReferenceNo(p entql.StringP) {
	f.Where(p.Field(shipmentpostnord.FieldShipmentReferenceNo))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentPostNordFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentPostNordFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentPostNordFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentPostNordFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (suq *ShipmentUSPSQuery) addPredicate(pred func(s *sql.Selector)) {
	suq.predicates = append(suq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShipmentUSPSQuery builder.
func (suq *ShipmentUSPSQuery) Filter() *ShipmentUSPSFilter {
	return &ShipmentUSPSFilter{config: suq.config, predicateAdder: suq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShipmentUSPSMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShipmentUSPSMutation builder.
func (m *ShipmentUSPSMutation) Filter() *ShipmentUSPSFilter {
	return &ShipmentUSPSFilter{config: m.config, predicateAdder: m}
}

// ShipmentUSPSFilter provides a generic filtering capability at runtime for ShipmentUSPSQuery.
type ShipmentUSPSFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShipmentUSPSFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[111].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *ShipmentUSPSFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(shipmentusps.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *ShipmentUSPSFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(shipmentusps.FieldTenantID))
}

// WhereTrackingNumber applies the entql string predicate on the tracking_number field.
func (f *ShipmentUSPSFilter) WhereTrackingNumber(p entql.StringP) {
	f.Where(p.Field(shipmentusps.FieldTrackingNumber))
}

// WherePostage applies the entql float64 predicate on the postage field.
func (f *ShipmentUSPSFilter) WherePostage(p entql.Float64P) {
	f.Where(p.Field(shipmentusps.FieldPostage))
}

// WhereScheduledDeliveryDate applies the entql time.Time predicate on the scheduled_delivery_date field.
func (f *ShipmentUSPSFilter) WhereScheduledDeliveryDate(p entql.TimeP) {
	f.Where(p.Field(shipmentusps.FieldScheduledDeliveryDate))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *ShipmentUSPSFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *ShipmentUSPSFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipment applies a predicate to check if query has an edge shipment.
func (f *ShipmentUSPSFilter) WhereHasShipment() {
	f.Where(entql.HasEdge("shipment"))
}

// WhereHasShipmentWith applies a predicate to check if query has an edge shipment with a given conditions (other predicates).
func (f *ShipmentUSPSFilter) WhereHasShipmentWith(preds ...predicate.Shipment) {
	f.Where(entql.HasEdgeWith("shipment", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (soq *SignupOptionsQuery) addPredicate(pred func(s *sql.Selector)) {
	soq.predicates = append(soq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SignupOptionsQuery builder.
func (soq *SignupOptionsQuery) Filter() *SignupOptionsFilter {
	return &SignupOptionsFilter{config: soq.config, predicateAdder: soq}
}

// addPredicate implements the predicateAdder interface.
func (m *SignupOptionsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SignupOptionsMutation builder.
func (m *SignupOptionsMutation) Filter() *SignupOptionsFilter {
	return &SignupOptionsFilter{config: m.config, predicateAdder: m}
}

// SignupOptionsFilter provides a generic filtering capability at runtime for SignupOptionsQuery.
type SignupOptionsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SignupOptionsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[112].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SignupOptionsFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(signupoptions.FieldID))
}

// WhereBetterDeliveryOptions applies the entql bool predicate on the better_delivery_options field.
func (f *SignupOptionsFilter) WhereBetterDeliveryOptions(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldBetterDeliveryOptions))
}

// WhereImprovePickPack applies the entql bool predicate on the improve_pick_pack field.
func (f *SignupOptionsFilter) WhereImprovePickPack(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldImprovePickPack))
}

// WhereShippingLabel applies the entql bool predicate on the shipping_label field.
func (f *SignupOptionsFilter) WhereShippingLabel(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldShippingLabel))
}

// WhereCustomDocs applies the entql bool predicate on the custom_docs field.
func (f *SignupOptionsFilter) WhereCustomDocs(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldCustomDocs))
}

// WhereReducedCosts applies the entql bool predicate on the reduced_costs field.
func (f *SignupOptionsFilter) WhereReducedCosts(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldReducedCosts))
}

// WhereEasyReturns applies the entql bool predicate on the easy_returns field.
func (f *SignupOptionsFilter) WhereEasyReturns(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldEasyReturns))
}

// WhereClickCollect applies the entql bool predicate on the click_collect field.
func (f *SignupOptionsFilter) WhereClickCollect(p entql.BoolP) {
	f.Where(p.Field(signupoptions.FieldClickCollect))
}

// WhereNumShipments applies the entql int predicate on the num_shipments field.
func (f *SignupOptionsFilter) WhereNumShipments(p entql.IntP) {
	f.Where(p.Field(signupoptions.FieldNumShipments))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *SignupOptionsFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *SignupOptionsFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (seq *SystemEventsQuery) addPredicate(pred func(s *sql.Selector)) {
	seq.predicates = append(seq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SystemEventsQuery builder.
func (seq *SystemEventsQuery) Filter() *SystemEventsFilter {
	return &SystemEventsFilter{config: seq.config, predicateAdder: seq}
}

// addPredicate implements the predicateAdder interface.
func (m *SystemEventsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SystemEventsMutation builder.
func (m *SystemEventsMutation) Filter() *SystemEventsFilter {
	return &SystemEventsFilter{config: m.config, predicateAdder: m}
}

// SystemEventsFilter provides a generic filtering capability at runtime for SystemEventsQuery.
type SystemEventsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SystemEventsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[113].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *SystemEventsFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *SystemEventsFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldTenantID))
}

// WhereEventType applies the entql string predicate on the event_type field.
func (f *SystemEventsFilter) WhereEventType(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldEventType))
}

// WhereEventTypeID applies the entql string predicate on the event_type_id field.
func (f *SystemEventsFilter) WhereEventTypeID(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldEventTypeID))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *SystemEventsFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldStatus))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *SystemEventsFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldDescription))
}

// WhereData applies the entql string predicate on the data field.
func (f *SystemEventsFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(systemevents.FieldData))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SystemEventsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(systemevents.FieldUpdatedAt))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SystemEventsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(systemevents.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *SystemEventsFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *SystemEventsFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TenantQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TenantQuery builder.
func (tq *TenantQuery) Filter() *TenantFilter {
	return &TenantFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TenantMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TenantMutation builder.
func (m *TenantMutation) Filter() *TenantFilter {
	return &TenantFilter{config: m.config, predicateAdder: m}
}

// TenantFilter provides a generic filtering capability at runtime for TenantQuery.
type TenantFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TenantFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[114].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *TenantFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(tenant.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TenantFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(tenant.FieldName))
}

// WhereVatNumber applies the entql string predicate on the vat_number field.
func (f *TenantFilter) WhereVatNumber(p entql.StringP) {
	f.Where(p.Field(tenant.FieldVatNumber))
}

// WhereInvoiceReference applies the entql string predicate on the invoice_reference field.
func (f *TenantFilter) WhereInvoiceReference(p entql.StringP) {
	f.Where(p.Field(tenant.FieldInvoiceReference))
}

// WhereHasConnectOptionCarriers applies a predicate to check if query has an edge connect_option_carriers.
func (f *TenantFilter) WhereHasConnectOptionCarriers() {
	f.Where(entql.HasEdge("connect_option_carriers"))
}

// WhereHasConnectOptionCarriersWith applies a predicate to check if query has an edge connect_option_carriers with a given conditions (other predicates).
func (f *TenantFilter) WhereHasConnectOptionCarriersWith(preds ...predicate.ConnectOptionCarrier) {
	f.Where(entql.HasEdgeWith("connect_option_carriers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasConnectOptionPlatforms applies a predicate to check if query has an edge connect_option_platforms.
func (f *TenantFilter) WhereHasConnectOptionPlatforms() {
	f.Where(entql.HasEdge("connect_option_platforms"))
}

// WhereHasConnectOptionPlatformsWith applies a predicate to check if query has an edge connect_option_platforms with a given conditions (other predicates).
func (f *TenantFilter) WhereHasConnectOptionPlatformsWith(preds ...predicate.ConnectOptionPlatform) {
	f.Where(entql.HasEdgeWith("connect_option_platforms", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *TenantFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *TenantFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCompanyAddress applies a predicate to check if query has an edge company_address.
func (f *TenantFilter) WhereHasCompanyAddress() {
	f.Where(entql.HasEdge("company_address"))
}

// WhereHasCompanyAddressWith applies a predicate to check if query has an edge company_address with a given conditions (other predicates).
func (f *TenantFilter) WhereHasCompanyAddressWith(preds ...predicate.Address) {
	f.Where(entql.HasEdgeWith("company_address", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultLanguage applies a predicate to check if query has an edge default_language.
func (f *TenantFilter) WhereHasDefaultLanguage() {
	f.Where(entql.HasEdge("default_language"))
}

// WhereHasDefaultLanguageWith applies a predicate to check if query has an edge default_language with a given conditions (other predicates).
func (f *TenantFilter) WhereHasDefaultLanguageWith(preds ...predicate.Language) {
	f.Where(entql.HasEdgeWith("default_language", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBillingContact applies a predicate to check if query has an edge billing_contact.
func (f *TenantFilter) WhereHasBillingContact() {
	f.Where(entql.HasEdge("billing_contact"))
}

// WhereHasBillingContactWith applies a predicate to check if query has an edge billing_contact with a given conditions (other predicates).
func (f *TenantFilter) WhereHasBillingContactWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("billing_contact", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAdminContact applies a predicate to check if query has an edge admin_contact.
func (f *TenantFilter) WhereHasAdminContact() {
	f.Where(entql.HasEdge("admin_contact"))
}

// WhereHasAdminContactWith applies a predicate to check if query has an edge admin_contact with a given conditions (other predicates).
func (f *TenantFilter) WhereHasAdminContactWith(preds ...predicate.Contact) {
	f.Where(entql.HasEdgeWith("admin_contact", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[115].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *UserFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(user.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereSurname applies the entql string predicate on the surname field.
func (f *UserFilter) WhereSurname(p entql.StringP) {
	f.Where(p.Field(user.FieldSurname))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(user.FieldPhoneNumber))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereHash applies the entql string predicate on the hash field.
func (f *UserFilter) WhereHash(p entql.StringP) {
	f.Where(p.Field(user.FieldHash))
}

// WhereIsAccountOwner applies the entql bool predicate on the is_account_owner field.
func (f *UserFilter) WhereIsAccountOwner(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsAccountOwner))
}

// WhereIsGlobalAdmin applies the entql bool predicate on the is_global_admin field.
func (f *UserFilter) WhereIsGlobalAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsGlobalAdmin))
}

// WhereMarketingConsent applies the entql bool predicate on the marketing_consent field.
func (f *UserFilter) WhereMarketingConsent(p entql.BoolP) {
	f.Where(p.Field(user.FieldMarketingConsent))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereArchivedAt applies the entql time.Time predicate on the archived_at field.
func (f *UserFilter) WhereArchivedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldArchivedAt))
}

// WherePickupDay applies the entql string predicate on the pickup_day field.
func (f *UserFilter) WherePickupDay(p entql.StringP) {
	f.Where(p.Field(user.FieldPickupDay))
}

// WherePickupDayLastChanged applies the entql time.Time predicate on the pickup_day_last_changed field.
func (f *UserFilter) WherePickupDayLastChanged(p entql.TimeP) {
	f.Where(p.Field(user.FieldPickupDayLastChanged))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *UserFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *UserFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOtkRequests applies a predicate to check if query has an edge otk_requests.
func (f *UserFilter) WhereHasOtkRequests() {
	f.Where(entql.HasEdge("otk_requests"))
}

// WhereHasOtkRequestsWith applies a predicate to check if query has an edge otk_requests with a given conditions (other predicates).
func (f *UserFilter) WhereHasOtkRequestsWith(preds ...predicate.OTKRequests) {
	f.Where(entql.HasEdgeWith("otk_requests", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSignupOptions applies a predicate to check if query has an edge signup_options.
func (f *UserFilter) WhereHasSignupOptions() {
	f.Where(entql.HasEdge("signup_options"))
}

// WhereHasSignupOptionsWith applies a predicate to check if query has an edge signup_options with a given conditions (other predicates).
func (f *UserFilter) WhereHasSignupOptionsWith(preds ...predicate.SignupOptions) {
	f.Where(entql.HasEdgeWith("signup_options", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLanguage applies a predicate to check if query has an edge language.
func (f *UserFilter) WhereHasLanguage() {
	f.Where(entql.HasEdge("language"))
}

// WhereHasLanguageWith applies a predicate to check if query has an edge language with a given conditions (other predicates).
func (f *UserFilter) WhereHasLanguageWith(preds ...predicate.Language) {
	f.Where(entql.HasEdgeWith("language", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChangeHistory applies a predicate to check if query has an edge change_history.
func (f *UserFilter) WhereHasChangeHistory() {
	f.Where(entql.HasEdge("change_history"))
}

// WhereHasChangeHistoryWith applies a predicate to check if query has an edge change_history with a given conditions (other predicates).
func (f *UserFilter) WhereHasChangeHistoryWith(preds ...predicate.ChangeHistory) {
	f.Where(entql.HasEdgeWith("change_history", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlanHistoryUser applies a predicate to check if query has an edge plan_history_user.
func (f *UserFilter) WhereHasPlanHistoryUser() {
	f.Where(entql.HasEdge("plan_history_user"))
}

// WhereHasPlanHistoryUserWith applies a predicate to check if query has an edge plan_history_user with a given conditions (other predicates).
func (f *UserFilter) WhereHasPlanHistoryUserWith(preds ...predicate.PlanHistory) {
	f.Where(entql.HasEdgeWith("plan_history_user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAPIToken applies a predicate to check if query has an edge api_token.
func (f *UserFilter) WhereHasAPIToken() {
	f.Where(entql.HasEdge("api_token"))
}

// WhereHasAPITokenWith applies a predicate to check if query has an edge api_token with a given conditions (other predicates).
func (f *UserFilter) WhereHasAPITokenWith(preds ...predicate.APIToken) {
	f.Where(entql.HasEdgeWith("api_token", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSelectedWorkstation applies a predicate to check if query has an edge selected_workstation.
func (f *UserFilter) WhereHasSelectedWorkstation() {
	f.Where(entql.HasEdge("selected_workstation"))
}

// WhereHasSelectedWorkstationWith applies a predicate to check if query has an edge selected_workstation with a given conditions (other predicates).
func (f *UserFilter) WhereHasSelectedWorkstationWith(preds ...predicate.Workstation) {
	f.Where(entql.HasEdgeWith("selected_workstation", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSeatGroup applies a predicate to check if query has an edge seat_group.
func (f *UserFilter) WhereHasSeatGroup() {
	f.Where(entql.HasEdge("seat_group"))
}

// WhereHasSeatGroupWith applies a predicate to check if query has an edge seat_group with a given conditions (other predicates).
func (f *UserFilter) WhereHasSeatGroupWith(preds ...predicate.SeatGroup) {
	f.Where(entql.HasEdgeWith("seat_group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWorkspaceRecentScan applies a predicate to check if query has an edge workspace_recent_scan.
func (f *UserFilter) WhereHasWorkspaceRecentScan() {
	f.Where(entql.HasEdge("workspace_recent_scan"))
}

// WhereHasWorkspaceRecentScanWith applies a predicate to check if query has an edge workspace_recent_scan with a given conditions (other predicates).
func (f *UserFilter) WhereHasWorkspaceRecentScanWith(preds ...predicate.WorkspaceRecentScan) {
	f.Where(entql.HasEdgeWith("workspace_recent_scan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (usq *UserSeatQuery) addPredicate(pred func(s *sql.Selector)) {
	usq.predicates = append(usq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSeatQuery builder.
func (usq *UserSeatQuery) Filter() *UserSeatFilter {
	return &UserSeatFilter{config: usq.config, predicateAdder: usq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSeatMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSeatMutation builder.
func (m *UserSeatMutation) Filter() *UserSeatFilter {
	return &UserSeatFilter{config: m.config, predicateAdder: m}
}

// UserSeatFilter provides a generic filtering capability at runtime for UserSeatQuery.
type UserSeatFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSeatFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[116].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserSeatFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(userseat.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *UserSeatFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(userseat.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserSeatFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(userseat.FieldName))
}

// WhereSurname applies the entql string predicate on the surname field.
func (f *UserSeatFilter) WhereSurname(p entql.StringP) {
	f.Where(p.Field(userseat.FieldSurname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserSeatFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(userseat.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserSeatFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(userseat.FieldPassword))
}

// WhereHash applies the entql string predicate on the hash field.
func (f *UserSeatFilter) WhereHash(p entql.StringP) {
	f.Where(p.Field(userseat.FieldHash))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSeatFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(userseat.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *UserSeatFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *UserSeatFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wrsq *WorkspaceRecentScanQuery) addPredicate(pred func(s *sql.Selector)) {
	wrsq.predicates = append(wrsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorkspaceRecentScanQuery builder.
func (wrsq *WorkspaceRecentScanQuery) Filter() *WorkspaceRecentScanFilter {
	return &WorkspaceRecentScanFilter{config: wrsq.config, predicateAdder: wrsq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorkspaceRecentScanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorkspaceRecentScanMutation builder.
func (m *WorkspaceRecentScanMutation) Filter() *WorkspaceRecentScanFilter {
	return &WorkspaceRecentScanFilter{config: m.config, predicateAdder: m}
}

// WorkspaceRecentScanFilter provides a generic filtering capability at runtime for WorkspaceRecentScanQuery.
type WorkspaceRecentScanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorkspaceRecentScanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[117].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WorkspaceRecentScanFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(workspacerecentscan.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *WorkspaceRecentScanFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(workspacerecentscan.FieldTenantID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WorkspaceRecentScanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(workspacerecentscan.FieldCreatedAt))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *WorkspaceRecentScanFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *WorkspaceRecentScanFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasShipmentParcel applies a predicate to check if query has an edge shipment_parcel.
func (f *WorkspaceRecentScanFilter) WhereHasShipmentParcel() {
	f.Where(entql.HasEdge("shipment_parcel"))
}

// WhereHasShipmentParcelWith applies a predicate to check if query has an edge shipment_parcel with a given conditions (other predicates).
func (f *WorkspaceRecentScanFilter) WhereHasShipmentParcelWith(preds ...predicate.ShipmentParcel) {
	f.Where(entql.HasEdgeWith("shipment_parcel", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *WorkspaceRecentScanFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *WorkspaceRecentScanFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wq *WorkstationQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorkstationQuery builder.
func (wq *WorkstationQuery) Filter() *WorkstationFilter {
	return &WorkstationFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorkstationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorkstationMutation builder.
func (m *WorkstationMutation) Filter() *WorkstationFilter {
	return &WorkstationFilter{config: m.config, predicateAdder: m}
}

// WorkstationFilter provides a generic filtering capability at runtime for WorkstationQuery.
type WorkstationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorkstationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[118].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WorkstationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(workstation.FieldID))
}

// WhereTenantID applies the entql string predicate on the tenant_id field.
func (f *WorkstationFilter) WhereTenantID(p entql.StringP) {
	f.Where(p.Field(workstation.FieldTenantID))
}

// WhereArchivedAt applies the entql time.Time predicate on the archived_at field.
func (f *WorkstationFilter) WhereArchivedAt(p entql.TimeP) {
	f.Where(p.Field(workstation.FieldArchivedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *WorkstationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(workstation.FieldName))
}

// WhereDeviceType applies the entql string predicate on the device_type field.
func (f *WorkstationFilter) WhereDeviceType(p entql.StringP) {
	f.Where(p.Field(workstation.FieldDeviceType))
}

// WhereRegistrationCode applies the entql string predicate on the registration_code field.
func (f *WorkstationFilter) WhereRegistrationCode(p entql.StringP) {
	f.Where(p.Field(workstation.FieldRegistrationCode))
}

// WhereWorkstationID applies the entql string predicate on the workstation_id field.
func (f *WorkstationFilter) WhereWorkstationID(p entql.StringP) {
	f.Where(p.Field(workstation.FieldWorkstationID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WorkstationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(workstation.FieldCreatedAt))
}

// WhereLastPing applies the entql time.Time predicate on the last_ping field.
func (f *WorkstationFilter) WhereLastPing(p entql.TimeP) {
	f.Where(p.Field(workstation.FieldLastPing))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *WorkstationFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(workstation.FieldStatus))
}

// WhereAutoPrintReceiver applies the entql bool predicate on the auto_print_receiver field.
func (f *WorkstationFilter) WhereAutoPrintReceiver(p entql.BoolP) {
	f.Where(p.Field(workstation.FieldAutoPrintReceiver))
}

// WhereHasTenant applies a predicate to check if query has an edge tenant.
func (f *WorkstationFilter) WhereHasTenant() {
	f.Where(entql.HasEdge("tenant"))
}

// WhereHasTenantWith applies a predicate to check if query has an edge tenant with a given conditions (other predicates).
func (f *WorkstationFilter) WhereHasTenantWith(preds ...predicate.Tenant) {
	f.Where(entql.HasEdgeWith("tenant", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrinter applies a predicate to check if query has an edge printer.
func (f *WorkstationFilter) WhereHasPrinter() {
	f.Where(entql.HasEdge("printer"))
}

// WhereHasPrinterWith applies a predicate to check if query has an edge printer with a given conditions (other predicates).
func (f *WorkstationFilter) WhereHasPrinterWith(preds ...predicate.Printer) {
	f.Where(entql.HasEdgeWith("printer", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *WorkstationFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *WorkstationFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSelectedUser applies a predicate to check if query has an edge selected_user.
func (f *WorkstationFilter) WhereHasSelectedUser() {
	f.Where(entql.HasEdge("selected_user"))
}

// WhereHasSelectedUserWith applies a predicate to check if query has an edge selected_user with a given conditions (other predicates).
func (f *WorkstationFilter) WhereHasSelectedUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("selected_user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
