// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/product"
	"delivrio.io/go/ent/productimage"
	"delivrio.io/go/ent/productvariant"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductImageQuery is the builder for querying ProductImage entities.
type ProductImageQuery struct {
	config
	ctx                     *QueryContext
	order                   []productimage.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ProductImage
	withTenant              *TenantQuery
	withProduct             *ProductQuery
	withProductVariant      *ProductVariantQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*ProductImage) error
	withNamedProductVariant map[string]*ProductVariantQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProductImageQuery builder.
func (piq *ProductImageQuery) Where(ps ...predicate.ProductImage) *ProductImageQuery {
	piq.predicates = append(piq.predicates, ps...)
	return piq
}

// Limit the number of records to be returned by this query.
func (piq *ProductImageQuery) Limit(limit int) *ProductImageQuery {
	piq.ctx.Limit = &limit
	return piq
}

// Offset to start from.
func (piq *ProductImageQuery) Offset(offset int) *ProductImageQuery {
	piq.ctx.Offset = &offset
	return piq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (piq *ProductImageQuery) Unique(unique bool) *ProductImageQuery {
	piq.ctx.Unique = &unique
	return piq
}

// Order specifies how the records should be ordered.
func (piq *ProductImageQuery) Order(o ...productimage.OrderOption) *ProductImageQuery {
	piq.order = append(piq.order, o...)
	return piq
}

// QueryTenant chains the current query on the "tenant" edge.
func (piq *ProductImageQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productimage.TenantTable, productimage.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProduct chains the current query on the "product" edge.
func (piq *ProductImageQuery) QueryProduct() *ProductQuery {
	query := (&ProductClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, productimage.ProductTable, productimage.ProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProductVariant chains the current query on the "product_variant" edge.
func (piq *ProductImageQuery) QueryProductVariant() *ProductVariantQuery {
	query := (&ProductVariantClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(productimage.Table, productimage.FieldID, selector),
			sqlgraph.To(productvariant.Table, productvariant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, productimage.ProductVariantTable, productimage.ProductVariantPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ProductImage entity from the query.
// Returns a *NotFoundError when no ProductImage was found.
func (piq *ProductImageQuery) First(ctx context.Context) (*ProductImage, error) {
	nodes, err := piq.Limit(1).All(setContextOp(ctx, piq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{productimage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (piq *ProductImageQuery) FirstX(ctx context.Context) *ProductImage {
	node, err := piq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ProductImage ID from the query.
// Returns a *NotFoundError when no ProductImage ID was found.
func (piq *ProductImageQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = piq.Limit(1).IDs(setContextOp(ctx, piq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{productimage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (piq *ProductImageQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := piq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ProductImage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ProductImage entity is found.
// Returns a *NotFoundError when no ProductImage entities are found.
func (piq *ProductImageQuery) Only(ctx context.Context) (*ProductImage, error) {
	nodes, err := piq.Limit(2).All(setContextOp(ctx, piq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{productimage.Label}
	default:
		return nil, &NotSingularError{productimage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (piq *ProductImageQuery) OnlyX(ctx context.Context) *ProductImage {
	node, err := piq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ProductImage ID in the query.
// Returns a *NotSingularError when more than one ProductImage ID is found.
// Returns a *NotFoundError when no entities are found.
func (piq *ProductImageQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = piq.Limit(2).IDs(setContextOp(ctx, piq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{productimage.Label}
	default:
		err = &NotSingularError{productimage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (piq *ProductImageQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := piq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ProductImages.
func (piq *ProductImageQuery) All(ctx context.Context) ([]*ProductImage, error) {
	ctx = setContextOp(ctx, piq.ctx, ent.OpQueryAll)
	if err := piq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ProductImage, *ProductImageQuery]()
	return withInterceptors[[]*ProductImage](ctx, piq, qr, piq.inters)
}

// AllX is like All, but panics if an error occurs.
func (piq *ProductImageQuery) AllX(ctx context.Context) []*ProductImage {
	nodes, err := piq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ProductImage IDs.
func (piq *ProductImageQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if piq.ctx.Unique == nil && piq.path != nil {
		piq.Unique(true)
	}
	ctx = setContextOp(ctx, piq.ctx, ent.OpQueryIDs)
	if err = piq.Select(productimage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (piq *ProductImageQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := piq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (piq *ProductImageQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, piq.ctx, ent.OpQueryCount)
	if err := piq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, piq, querierCount[*ProductImageQuery](), piq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (piq *ProductImageQuery) CountX(ctx context.Context) int {
	count, err := piq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (piq *ProductImageQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, piq.ctx, ent.OpQueryExist)
	switch _, err := piq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (piq *ProductImageQuery) ExistX(ctx context.Context) bool {
	exist, err := piq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProductImageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (piq *ProductImageQuery) Clone() *ProductImageQuery {
	if piq == nil {
		return nil
	}
	return &ProductImageQuery{
		config:             piq.config,
		ctx:                piq.ctx.Clone(),
		order:              append([]productimage.OrderOption{}, piq.order...),
		inters:             append([]Interceptor{}, piq.inters...),
		predicates:         append([]predicate.ProductImage{}, piq.predicates...),
		withTenant:         piq.withTenant.Clone(),
		withProduct:        piq.withProduct.Clone(),
		withProductVariant: piq.withProductVariant.Clone(),
		// clone intermediate query.
		sql:  piq.sql.Clone(),
		path: piq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *ProductImageQuery) WithTenant(opts ...func(*TenantQuery)) *ProductImageQuery {
	query := (&TenantClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withTenant = query
	return piq
}

// WithProduct tells the query-builder to eager-load the nodes that are connected to
// the "product" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *ProductImageQuery) WithProduct(opts ...func(*ProductQuery)) *ProductImageQuery {
	query := (&ProductClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withProduct = query
	return piq
}

// WithProductVariant tells the query-builder to eager-load the nodes that are connected to
// the "product_variant" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *ProductImageQuery) WithProductVariant(opts ...func(*ProductVariantQuery)) *ProductImageQuery {
	query := (&ProductVariantClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withProductVariant = query
	return piq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ProductImage.Query().
//		GroupBy(productimage.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (piq *ProductImageQuery) GroupBy(field string, fields ...string) *ProductImageGroupBy {
	piq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProductImageGroupBy{build: piq}
	grbuild.flds = &piq.ctx.Fields
	grbuild.label = productimage.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.ProductImage.Query().
//		Select(productimage.FieldTenantID).
//		Scan(ctx, &v)
func (piq *ProductImageQuery) Select(fields ...string) *ProductImageSelect {
	piq.ctx.Fields = append(piq.ctx.Fields, fields...)
	sbuild := &ProductImageSelect{ProductImageQuery: piq}
	sbuild.label = productimage.Label
	sbuild.flds, sbuild.scan = &piq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProductImageSelect configured with the given aggregations.
func (piq *ProductImageQuery) Aggregate(fns ...AggregateFunc) *ProductImageSelect {
	return piq.Select().Aggregate(fns...)
}

func (piq *ProductImageQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range piq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, piq); err != nil {
				return err
			}
		}
	}
	for _, f := range piq.ctx.Fields {
		if !productimage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if piq.path != nil {
		prev, err := piq.path(ctx)
		if err != nil {
			return err
		}
		piq.sql = prev
	}
	if productimage.Policy == nil {
		return errors.New("ent: uninitialized productimage.Policy (forgotten import ent/runtime?)")
	}
	if err := productimage.Policy.EvalQuery(ctx, piq); err != nil {
		return err
	}
	return nil
}

func (piq *ProductImageQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ProductImage, error) {
	var (
		nodes       = []*ProductImage{}
		withFKs     = piq.withFKs
		_spec       = piq.querySpec()
		loadedTypes = [3]bool{
			piq.withTenant != nil,
			piq.withProduct != nil,
			piq.withProductVariant != nil,
		}
	)
	if piq.withProduct != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, productimage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ProductImage).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ProductImage{config: piq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(piq.modifiers) > 0 {
		_spec.Modifiers = piq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, piq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := piq.withTenant; query != nil {
		if err := piq.loadTenant(ctx, query, nodes, nil,
			func(n *ProductImage, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := piq.withProduct; query != nil {
		if err := piq.loadProduct(ctx, query, nodes, nil,
			func(n *ProductImage, e *Product) { n.Edges.Product = e }); err != nil {
			return nil, err
		}
	}
	if query := piq.withProductVariant; query != nil {
		if err := piq.loadProductVariant(ctx, query, nodes,
			func(n *ProductImage) { n.Edges.ProductVariant = []*ProductVariant{} },
			func(n *ProductImage, e *ProductVariant) { n.Edges.ProductVariant = append(n.Edges.ProductVariant, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range piq.withNamedProductVariant {
		if err := piq.loadProductVariant(ctx, query, nodes,
			func(n *ProductImage) { n.appendNamedProductVariant(name) },
			func(n *ProductImage, e *ProductVariant) { n.appendNamedProductVariant(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range piq.loadTotal {
		if err := piq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (piq *ProductImageQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*ProductImage, init func(*ProductImage), assign func(*ProductImage, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ProductImage)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piq *ProductImageQuery) loadProduct(ctx context.Context, query *ProductQuery, nodes []*ProductImage, init func(*ProductImage), assign func(*ProductImage, *Product)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*ProductImage)
	for i := range nodes {
		if nodes[i].product_image_product == nil {
			continue
		}
		fk := *nodes[i].product_image_product
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(product.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "product_image_product" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piq *ProductImageQuery) loadProductVariant(ctx context.Context, query *ProductVariantQuery, nodes []*ProductImage, init func(*ProductImage), assign func(*ProductImage, *ProductVariant)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*ProductImage)
	nids := make(map[pulid.ID]map[*ProductImage]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(productimage.ProductVariantTable)
		s.Join(joinT).On(s.C(productvariant.FieldID), joinT.C(productimage.ProductVariantPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(productimage.ProductVariantPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(productimage.ProductVariantPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ProductImage]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ProductVariant](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "product_variant" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (piq *ProductImageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := piq.querySpec()
	if len(piq.modifiers) > 0 {
		_spec.Modifiers = piq.modifiers
	}
	_spec.Node.Columns = piq.ctx.Fields
	if len(piq.ctx.Fields) > 0 {
		_spec.Unique = piq.ctx.Unique != nil && *piq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, piq.driver, _spec)
}

func (piq *ProductImageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(productimage.Table, productimage.Columns, sqlgraph.NewFieldSpec(productimage.FieldID, field.TypeString))
	_spec.From = piq.sql
	if unique := piq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if piq.path != nil {
		_spec.Unique = true
	}
	if fields := piq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productimage.FieldID)
		for i := range fields {
			if fields[i] != productimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if piq.withTenant != nil {
			_spec.Node.AddColumnOnce(productimage.FieldTenantID)
		}
	}
	if ps := piq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := piq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := piq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := piq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (piq *ProductImageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(piq.driver.Dialect())
	t1 := builder.Table(productimage.Table)
	columns := piq.ctx.Fields
	if len(columns) == 0 {
		columns = productimage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if piq.sql != nil {
		selector = piq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if piq.ctx.Unique != nil && *piq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range piq.predicates {
		p(selector)
	}
	for _, p := range piq.order {
		p(selector)
	}
	if offset := piq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := piq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedProductVariant tells the query-builder to eager-load the nodes that are connected to the "product_variant"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (piq *ProductImageQuery) WithNamedProductVariant(name string, opts ...func(*ProductVariantQuery)) *ProductImageQuery {
	query := (&ProductVariantClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if piq.withNamedProductVariant == nil {
		piq.withNamedProductVariant = make(map[string]*ProductVariantQuery)
	}
	piq.withNamedProductVariant[name] = query
	return piq
}

// ProductImageGroupBy is the group-by builder for ProductImage entities.
type ProductImageGroupBy struct {
	selector
	build *ProductImageQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pigb *ProductImageGroupBy) Aggregate(fns ...AggregateFunc) *ProductImageGroupBy {
	pigb.fns = append(pigb.fns, fns...)
	return pigb
}

// Scan applies the selector query and scans the result into the given value.
func (pigb *ProductImageGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pigb.build.ctx, ent.OpQueryGroupBy)
	if err := pigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductImageQuery, *ProductImageGroupBy](ctx, pigb.build, pigb, pigb.build.inters, v)
}

func (pigb *ProductImageGroupBy) sqlScan(ctx context.Context, root *ProductImageQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pigb.fns))
	for _, fn := range pigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pigb.flds)+len(pigb.fns))
		for _, f := range *pigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProductImageSelect is the builder for selecting fields of ProductImage entities.
type ProductImageSelect struct {
	*ProductImageQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pis *ProductImageSelect) Aggregate(fns ...AggregateFunc) *ProductImageSelect {
	pis.fns = append(pis.fns, fns...)
	return pis
}

// Scan applies the selector query and scans the result into the given value.
func (pis *ProductImageSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pis.ctx, ent.OpQuerySelect)
	if err := pis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProductImageQuery, *ProductImageSelect](ctx, pis.ProductImageQuery, pis, pis.inters, v)
}

func (pis *ProductImageSelect) sqlScan(ctx context.Context, root *ProductImageQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pis.fns))
	for _, fn := range pis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
