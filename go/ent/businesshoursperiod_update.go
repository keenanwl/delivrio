// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/businesshoursperiod"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessHoursPeriodUpdate is the builder for updating BusinessHoursPeriod entities.
type BusinessHoursPeriodUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessHoursPeriodMutation
}

// Where appends a list predicates to the BusinessHoursPeriodUpdate builder.
func (bhpu *BusinessHoursPeriodUpdate) Where(ps ...predicate.BusinessHoursPeriod) *BusinessHoursPeriodUpdate {
	bhpu.mutation.Where(ps...)
	return bhpu
}

// SetDayOfWeek sets the "day_of_week" field.
func (bhpu *BusinessHoursPeriodUpdate) SetDayOfWeek(bow businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpdate {
	bhpu.mutation.SetDayOfWeek(bow)
	return bhpu
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (bhpu *BusinessHoursPeriodUpdate) SetNillableDayOfWeek(bow *businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpdate {
	if bow != nil {
		bhpu.SetDayOfWeek(*bow)
	}
	return bhpu
}

// SetOpening sets the "opening" field.
func (bhpu *BusinessHoursPeriodUpdate) SetOpening(t time.Time) *BusinessHoursPeriodUpdate {
	bhpu.mutation.SetOpening(t)
	return bhpu
}

// SetNillableOpening sets the "opening" field if the given value is not nil.
func (bhpu *BusinessHoursPeriodUpdate) SetNillableOpening(t *time.Time) *BusinessHoursPeriodUpdate {
	if t != nil {
		bhpu.SetOpening(*t)
	}
	return bhpu
}

// SetClosing sets the "closing" field.
func (bhpu *BusinessHoursPeriodUpdate) SetClosing(t time.Time) *BusinessHoursPeriodUpdate {
	bhpu.mutation.SetClosing(t)
	return bhpu
}

// SetNillableClosing sets the "closing" field if the given value is not nil.
func (bhpu *BusinessHoursPeriodUpdate) SetNillableClosing(t *time.Time) *BusinessHoursPeriodUpdate {
	if t != nil {
		bhpu.SetClosing(*t)
	}
	return bhpu
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (bhpu *BusinessHoursPeriodUpdate) SetParcelShopID(id pulid.ID) *BusinessHoursPeriodUpdate {
	bhpu.mutation.SetParcelShopID(id)
	return bhpu
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (bhpu *BusinessHoursPeriodUpdate) SetParcelShop(p *ParcelShop) *BusinessHoursPeriodUpdate {
	return bhpu.SetParcelShopID(p.ID)
}

// Mutation returns the BusinessHoursPeriodMutation object of the builder.
func (bhpu *BusinessHoursPeriodUpdate) Mutation() *BusinessHoursPeriodMutation {
	return bhpu.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (bhpu *BusinessHoursPeriodUpdate) ClearParcelShop() *BusinessHoursPeriodUpdate {
	bhpu.mutation.ClearParcelShop()
	return bhpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bhpu *BusinessHoursPeriodUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bhpu.sqlSave, bhpu.mutation, bhpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bhpu *BusinessHoursPeriodUpdate) SaveX(ctx context.Context) int {
	affected, err := bhpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bhpu *BusinessHoursPeriodUpdate) Exec(ctx context.Context) error {
	_, err := bhpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhpu *BusinessHoursPeriodUpdate) ExecX(ctx context.Context) {
	if err := bhpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bhpu *BusinessHoursPeriodUpdate) check() error {
	if v, ok := bhpu.mutation.DayOfWeek(); ok {
		if err := businesshoursperiod.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "BusinessHoursPeriod.day_of_week": %w`, err)}
		}
	}
	if bhpu.mutation.ParcelShopCleared() && len(bhpu.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BusinessHoursPeriod.parcel_shop"`)
	}
	return nil
}

func (bhpu *BusinessHoursPeriodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bhpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(businesshoursperiod.Table, businesshoursperiod.Columns, sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString))
	if ps := bhpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bhpu.mutation.DayOfWeek(); ok {
		_spec.SetField(businesshoursperiod.FieldDayOfWeek, field.TypeEnum, value)
	}
	if value, ok := bhpu.mutation.Opening(); ok {
		_spec.SetField(businesshoursperiod.FieldOpening, field.TypeTime, value)
	}
	if value, ok := bhpu.mutation.Closing(); ok {
		_spec.SetField(businesshoursperiod.FieldClosing, field.TypeTime, value)
	}
	if bhpu.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businesshoursperiod.ParcelShopTable,
			Columns: []string{businesshoursperiod.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bhpu.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businesshoursperiod.ParcelShopTable,
			Columns: []string{businesshoursperiod.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bhpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businesshoursperiod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bhpu.mutation.done = true
	return n, nil
}

// BusinessHoursPeriodUpdateOne is the builder for updating a single BusinessHoursPeriod entity.
type BusinessHoursPeriodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessHoursPeriodMutation
}

// SetDayOfWeek sets the "day_of_week" field.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetDayOfWeek(bow businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpdateOne {
	bhpuo.mutation.SetDayOfWeek(bow)
	return bhpuo
}

// SetNillableDayOfWeek sets the "day_of_week" field if the given value is not nil.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetNillableDayOfWeek(bow *businesshoursperiod.DayOfWeek) *BusinessHoursPeriodUpdateOne {
	if bow != nil {
		bhpuo.SetDayOfWeek(*bow)
	}
	return bhpuo
}

// SetOpening sets the "opening" field.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetOpening(t time.Time) *BusinessHoursPeriodUpdateOne {
	bhpuo.mutation.SetOpening(t)
	return bhpuo
}

// SetNillableOpening sets the "opening" field if the given value is not nil.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetNillableOpening(t *time.Time) *BusinessHoursPeriodUpdateOne {
	if t != nil {
		bhpuo.SetOpening(*t)
	}
	return bhpuo
}

// SetClosing sets the "closing" field.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetClosing(t time.Time) *BusinessHoursPeriodUpdateOne {
	bhpuo.mutation.SetClosing(t)
	return bhpuo
}

// SetNillableClosing sets the "closing" field if the given value is not nil.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetNillableClosing(t *time.Time) *BusinessHoursPeriodUpdateOne {
	if t != nil {
		bhpuo.SetClosing(*t)
	}
	return bhpuo
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetParcelShopID(id pulid.ID) *BusinessHoursPeriodUpdateOne {
	bhpuo.mutation.SetParcelShopID(id)
	return bhpuo
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (bhpuo *BusinessHoursPeriodUpdateOne) SetParcelShop(p *ParcelShop) *BusinessHoursPeriodUpdateOne {
	return bhpuo.SetParcelShopID(p.ID)
}

// Mutation returns the BusinessHoursPeriodMutation object of the builder.
func (bhpuo *BusinessHoursPeriodUpdateOne) Mutation() *BusinessHoursPeriodMutation {
	return bhpuo.mutation
}

// ClearParcelShop clears the "parcel_shop" edge to the ParcelShop entity.
func (bhpuo *BusinessHoursPeriodUpdateOne) ClearParcelShop() *BusinessHoursPeriodUpdateOne {
	bhpuo.mutation.ClearParcelShop()
	return bhpuo
}

// Where appends a list predicates to the BusinessHoursPeriodUpdate builder.
func (bhpuo *BusinessHoursPeriodUpdateOne) Where(ps ...predicate.BusinessHoursPeriod) *BusinessHoursPeriodUpdateOne {
	bhpuo.mutation.Where(ps...)
	return bhpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bhpuo *BusinessHoursPeriodUpdateOne) Select(field string, fields ...string) *BusinessHoursPeriodUpdateOne {
	bhpuo.fields = append([]string{field}, fields...)
	return bhpuo
}

// Save executes the query and returns the updated BusinessHoursPeriod entity.
func (bhpuo *BusinessHoursPeriodUpdateOne) Save(ctx context.Context) (*BusinessHoursPeriod, error) {
	return withHooks(ctx, bhpuo.sqlSave, bhpuo.mutation, bhpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bhpuo *BusinessHoursPeriodUpdateOne) SaveX(ctx context.Context) *BusinessHoursPeriod {
	node, err := bhpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bhpuo *BusinessHoursPeriodUpdateOne) Exec(ctx context.Context) error {
	_, err := bhpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bhpuo *BusinessHoursPeriodUpdateOne) ExecX(ctx context.Context) {
	if err := bhpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bhpuo *BusinessHoursPeriodUpdateOne) check() error {
	if v, ok := bhpuo.mutation.DayOfWeek(); ok {
		if err := businesshoursperiod.DayOfWeekValidator(v); err != nil {
			return &ValidationError{Name: "day_of_week", err: fmt.Errorf(`ent: validator failed for field "BusinessHoursPeriod.day_of_week": %w`, err)}
		}
	}
	if bhpuo.mutation.ParcelShopCleared() && len(bhpuo.mutation.ParcelShopIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BusinessHoursPeriod.parcel_shop"`)
	}
	return nil
}

func (bhpuo *BusinessHoursPeriodUpdateOne) sqlSave(ctx context.Context) (_node *BusinessHoursPeriod, err error) {
	if err := bhpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(businesshoursperiod.Table, businesshoursperiod.Columns, sqlgraph.NewFieldSpec(businesshoursperiod.FieldID, field.TypeString))
	id, ok := bhpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusinessHoursPeriod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bhpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businesshoursperiod.FieldID)
		for _, f := range fields {
			if !businesshoursperiod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != businesshoursperiod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bhpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bhpuo.mutation.DayOfWeek(); ok {
		_spec.SetField(businesshoursperiod.FieldDayOfWeek, field.TypeEnum, value)
	}
	if value, ok := bhpuo.mutation.Opening(); ok {
		_spec.SetField(businesshoursperiod.FieldOpening, field.TypeTime, value)
	}
	if value, ok := bhpuo.mutation.Closing(); ok {
		_spec.SetField(businesshoursperiod.FieldClosing, field.TypeTime, value)
	}
	if bhpuo.mutation.ParcelShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businesshoursperiod.ParcelShopTable,
			Columns: []string{businesshoursperiod.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bhpuo.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businesshoursperiod.ParcelShopTable,
			Columns: []string{businesshoursperiod.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BusinessHoursPeriod{config: bhpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bhpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businesshoursperiod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bhpuo.mutation.done = true
	return _node, nil
}
