// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/colli"
	"delivrio.io/go/ent/documentfile"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/shipmentparcel"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DocumentFileQuery is the builder for querying DocumentFile entities.
type DocumentFileQuery struct {
	config
	ctx                *QueryContext
	order              []documentfile.OrderOption
	inters             []Interceptor
	predicates         []predicate.DocumentFile
	withTenant         *TenantQuery
	withColli          *ColliQuery
	withShipmentParcel *ShipmentParcelQuery
	withFKs            bool
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*DocumentFile) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DocumentFileQuery builder.
func (dfq *DocumentFileQuery) Where(ps ...predicate.DocumentFile) *DocumentFileQuery {
	dfq.predicates = append(dfq.predicates, ps...)
	return dfq
}

// Limit the number of records to be returned by this query.
func (dfq *DocumentFileQuery) Limit(limit int) *DocumentFileQuery {
	dfq.ctx.Limit = &limit
	return dfq
}

// Offset to start from.
func (dfq *DocumentFileQuery) Offset(offset int) *DocumentFileQuery {
	dfq.ctx.Offset = &offset
	return dfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dfq *DocumentFileQuery) Unique(unique bool) *DocumentFileQuery {
	dfq.ctx.Unique = &unique
	return dfq
}

// Order specifies how the records should be ordered.
func (dfq *DocumentFileQuery) Order(o ...documentfile.OrderOption) *DocumentFileQuery {
	dfq.order = append(dfq.order, o...)
	return dfq
}

// QueryTenant chains the current query on the "tenant" edge.
func (dfq *DocumentFileQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: dfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentfile.Table, documentfile.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, documentfile.TenantTable, documentfile.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(dfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryColli chains the current query on the "colli" edge.
func (dfq *DocumentFileQuery) QueryColli() *ColliQuery {
	query := (&ColliClient{config: dfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentfile.Table, documentfile.FieldID, selector),
			sqlgraph.To(colli.Table, colli.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, documentfile.ColliTable, documentfile.ColliColumn),
		)
		fromU = sqlgraph.SetNeighbors(dfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShipmentParcel chains the current query on the "shipment_parcel" edge.
func (dfq *DocumentFileQuery) QueryShipmentParcel() *ShipmentParcelQuery {
	query := (&ShipmentParcelClient{config: dfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(documentfile.Table, documentfile.FieldID, selector),
			sqlgraph.To(shipmentparcel.Table, shipmentparcel.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, documentfile.ShipmentParcelTable, documentfile.ShipmentParcelColumn),
		)
		fromU = sqlgraph.SetNeighbors(dfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DocumentFile entity from the query.
// Returns a *NotFoundError when no DocumentFile was found.
func (dfq *DocumentFileQuery) First(ctx context.Context) (*DocumentFile, error) {
	nodes, err := dfq.Limit(1).All(setContextOp(ctx, dfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{documentfile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dfq *DocumentFileQuery) FirstX(ctx context.Context) *DocumentFile {
	node, err := dfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DocumentFile ID from the query.
// Returns a *NotFoundError when no DocumentFile ID was found.
func (dfq *DocumentFileQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dfq.Limit(1).IDs(setContextOp(ctx, dfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{documentfile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dfq *DocumentFileQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := dfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DocumentFile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DocumentFile entity is found.
// Returns a *NotFoundError when no DocumentFile entities are found.
func (dfq *DocumentFileQuery) Only(ctx context.Context) (*DocumentFile, error) {
	nodes, err := dfq.Limit(2).All(setContextOp(ctx, dfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{documentfile.Label}
	default:
		return nil, &NotSingularError{documentfile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dfq *DocumentFileQuery) OnlyX(ctx context.Context) *DocumentFile {
	node, err := dfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DocumentFile ID in the query.
// Returns a *NotSingularError when more than one DocumentFile ID is found.
// Returns a *NotFoundError when no entities are found.
func (dfq *DocumentFileQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = dfq.Limit(2).IDs(setContextOp(ctx, dfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{documentfile.Label}
	default:
		err = &NotSingularError{documentfile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dfq *DocumentFileQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := dfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DocumentFiles.
func (dfq *DocumentFileQuery) All(ctx context.Context) ([]*DocumentFile, error) {
	ctx = setContextOp(ctx, dfq.ctx, ent.OpQueryAll)
	if err := dfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DocumentFile, *DocumentFileQuery]()
	return withInterceptors[[]*DocumentFile](ctx, dfq, qr, dfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dfq *DocumentFileQuery) AllX(ctx context.Context) []*DocumentFile {
	nodes, err := dfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DocumentFile IDs.
func (dfq *DocumentFileQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if dfq.ctx.Unique == nil && dfq.path != nil {
		dfq.Unique(true)
	}
	ctx = setContextOp(ctx, dfq.ctx, ent.OpQueryIDs)
	if err = dfq.Select(documentfile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dfq *DocumentFileQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := dfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dfq *DocumentFileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dfq.ctx, ent.OpQueryCount)
	if err := dfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dfq, querierCount[*DocumentFileQuery](), dfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dfq *DocumentFileQuery) CountX(ctx context.Context) int {
	count, err := dfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dfq *DocumentFileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dfq.ctx, ent.OpQueryExist)
	switch _, err := dfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dfq *DocumentFileQuery) ExistX(ctx context.Context) bool {
	exist, err := dfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DocumentFileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dfq *DocumentFileQuery) Clone() *DocumentFileQuery {
	if dfq == nil {
		return nil
	}
	return &DocumentFileQuery{
		config:             dfq.config,
		ctx:                dfq.ctx.Clone(),
		order:              append([]documentfile.OrderOption{}, dfq.order...),
		inters:             append([]Interceptor{}, dfq.inters...),
		predicates:         append([]predicate.DocumentFile{}, dfq.predicates...),
		withTenant:         dfq.withTenant.Clone(),
		withColli:          dfq.withColli.Clone(),
		withShipmentParcel: dfq.withShipmentParcel.Clone(),
		// clone intermediate query.
		sql:  dfq.sql.Clone(),
		path: dfq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (dfq *DocumentFileQuery) WithTenant(opts ...func(*TenantQuery)) *DocumentFileQuery {
	query := (&TenantClient{config: dfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dfq.withTenant = query
	return dfq
}

// WithColli tells the query-builder to eager-load the nodes that are connected to
// the "colli" edge. The optional arguments are used to configure the query builder of the edge.
func (dfq *DocumentFileQuery) WithColli(opts ...func(*ColliQuery)) *DocumentFileQuery {
	query := (&ColliClient{config: dfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dfq.withColli = query
	return dfq
}

// WithShipmentParcel tells the query-builder to eager-load the nodes that are connected to
// the "shipment_parcel" edge. The optional arguments are used to configure the query builder of the edge.
func (dfq *DocumentFileQuery) WithShipmentParcel(opts ...func(*ShipmentParcelQuery)) *DocumentFileQuery {
	query := (&ShipmentParcelClient{config: dfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dfq.withShipmentParcel = query
	return dfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DocumentFile.Query().
//		GroupBy(documentfile.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dfq *DocumentFileQuery) GroupBy(field string, fields ...string) *DocumentFileGroupBy {
	dfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DocumentFileGroupBy{build: dfq}
	grbuild.flds = &dfq.ctx.Fields
	grbuild.label = documentfile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.DocumentFile.Query().
//		Select(documentfile.FieldTenantID).
//		Scan(ctx, &v)
func (dfq *DocumentFileQuery) Select(fields ...string) *DocumentFileSelect {
	dfq.ctx.Fields = append(dfq.ctx.Fields, fields...)
	sbuild := &DocumentFileSelect{DocumentFileQuery: dfq}
	sbuild.label = documentfile.Label
	sbuild.flds, sbuild.scan = &dfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DocumentFileSelect configured with the given aggregations.
func (dfq *DocumentFileQuery) Aggregate(fns ...AggregateFunc) *DocumentFileSelect {
	return dfq.Select().Aggregate(fns...)
}

func (dfq *DocumentFileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dfq); err != nil {
				return err
			}
		}
	}
	for _, f := range dfq.ctx.Fields {
		if !documentfile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dfq.path != nil {
		prev, err := dfq.path(ctx)
		if err != nil {
			return err
		}
		dfq.sql = prev
	}
	if documentfile.Policy == nil {
		return errors.New("ent: uninitialized documentfile.Policy (forgotten import ent/runtime?)")
	}
	if err := documentfile.Policy.EvalQuery(ctx, dfq); err != nil {
		return err
	}
	return nil
}

func (dfq *DocumentFileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DocumentFile, error) {
	var (
		nodes       = []*DocumentFile{}
		withFKs     = dfq.withFKs
		_spec       = dfq.querySpec()
		loadedTypes = [3]bool{
			dfq.withTenant != nil,
			dfq.withColli != nil,
			dfq.withShipmentParcel != nil,
		}
	)
	if dfq.withColli != nil || dfq.withShipmentParcel != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, documentfile.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DocumentFile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DocumentFile{config: dfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(dfq.modifiers) > 0 {
		_spec.Modifiers = dfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dfq.withTenant; query != nil {
		if err := dfq.loadTenant(ctx, query, nodes, nil,
			func(n *DocumentFile, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := dfq.withColli; query != nil {
		if err := dfq.loadColli(ctx, query, nodes, nil,
			func(n *DocumentFile, e *Colli) { n.Edges.Colli = e }); err != nil {
			return nil, err
		}
	}
	if query := dfq.withShipmentParcel; query != nil {
		if err := dfq.loadShipmentParcel(ctx, query, nodes, nil,
			func(n *DocumentFile, e *ShipmentParcel) { n.Edges.ShipmentParcel = e }); err != nil {
			return nil, err
		}
	}
	for i := range dfq.loadTotal {
		if err := dfq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dfq *DocumentFileQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*DocumentFile, init func(*DocumentFile), assign func(*DocumentFile, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DocumentFile)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dfq *DocumentFileQuery) loadColli(ctx context.Context, query *ColliQuery, nodes []*DocumentFile, init func(*DocumentFile), assign func(*DocumentFile, *Colli)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DocumentFile)
	for i := range nodes {
		if nodes[i].colli_document_file == nil {
			continue
		}
		fk := *nodes[i].colli_document_file
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(colli.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "colli_document_file" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dfq *DocumentFileQuery) loadShipmentParcel(ctx context.Context, query *ShipmentParcelQuery, nodes []*DocumentFile, init func(*DocumentFile), assign func(*DocumentFile, *ShipmentParcel)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*DocumentFile)
	for i := range nodes {
		if nodes[i].shipment_parcel_document_file == nil {
			continue
		}
		fk := *nodes[i].shipment_parcel_document_file
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(shipmentparcel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "shipment_parcel_document_file" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (dfq *DocumentFileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dfq.querySpec()
	if len(dfq.modifiers) > 0 {
		_spec.Modifiers = dfq.modifiers
	}
	_spec.Node.Columns = dfq.ctx.Fields
	if len(dfq.ctx.Fields) > 0 {
		_spec.Unique = dfq.ctx.Unique != nil && *dfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dfq.driver, _spec)
}

func (dfq *DocumentFileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(documentfile.Table, documentfile.Columns, sqlgraph.NewFieldSpec(documentfile.FieldID, field.TypeString))
	_spec.From = dfq.sql
	if unique := dfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dfq.path != nil {
		_spec.Unique = true
	}
	if fields := dfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentfile.FieldID)
		for i := range fields {
			if fields[i] != documentfile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dfq.withTenant != nil {
			_spec.Node.AddColumnOnce(documentfile.FieldTenantID)
		}
	}
	if ps := dfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dfq *DocumentFileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dfq.driver.Dialect())
	t1 := builder.Table(documentfile.Table)
	columns := dfq.ctx.Fields
	if len(columns) == 0 {
		columns = documentfile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dfq.sql != nil {
		selector = dfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dfq.ctx.Unique != nil && *dfq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dfq.predicates {
		p(selector)
	}
	for _, p := range dfq.order {
		p(selector)
	}
	if offset := dfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DocumentFileGroupBy is the group-by builder for DocumentFile entities.
type DocumentFileGroupBy struct {
	selector
	build *DocumentFileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dfgb *DocumentFileGroupBy) Aggregate(fns ...AggregateFunc) *DocumentFileGroupBy {
	dfgb.fns = append(dfgb.fns, fns...)
	return dfgb
}

// Scan applies the selector query and scans the result into the given value.
func (dfgb *DocumentFileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dfgb.build.ctx, ent.OpQueryGroupBy)
	if err := dfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentFileQuery, *DocumentFileGroupBy](ctx, dfgb.build, dfgb, dfgb.build.inters, v)
}

func (dfgb *DocumentFileGroupBy) sqlScan(ctx context.Context, root *DocumentFileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dfgb.fns))
	for _, fn := range dfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dfgb.flds)+len(dfgb.fns))
		for _, f := range *dfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DocumentFileSelect is the builder for selecting fields of DocumentFile entities.
type DocumentFileSelect struct {
	*DocumentFileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dfs *DocumentFileSelect) Aggregate(fns ...AggregateFunc) *DocumentFileSelect {
	dfs.fns = append(dfs.fns, fns...)
	return dfs
}

// Scan applies the selector query and scans the result into the given value.
func (dfs *DocumentFileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dfs.ctx, ent.OpQuerySelect)
	if err := dfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DocumentFileQuery, *DocumentFileSelect](ctx, dfs.DocumentFileQuery, dfs, dfs.inters, v)
}

func (dfs *DocumentFileSelect) sqlScan(ctx context.Context, root *DocumentFileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dfs.fns))
	for _, fn := range dfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
