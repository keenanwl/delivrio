// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/addressglobal"
	"delivrio.io/go/ent/parcelshop"
	"delivrio.io/go/ent/parcelshoppostnord"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ParcelShopPostNordCreate is the builder for creating a ParcelShopPostNord entity.
type ParcelShopPostNordCreate struct {
	config
	mutation *ParcelShopPostNordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetServicePointID sets the "service_point_id" field.
func (pspnc *ParcelShopPostNordCreate) SetServicePointID(s string) *ParcelShopPostNordCreate {
	pspnc.mutation.SetServicePointID(s)
	return pspnc
}

// SetPudoid sets the "pudoid" field.
func (pspnc *ParcelShopPostNordCreate) SetPudoid(s string) *ParcelShopPostNordCreate {
	pspnc.mutation.SetPudoid(s)
	return pspnc
}

// SetTypeID sets the "type_id" field.
func (pspnc *ParcelShopPostNordCreate) SetTypeID(s string) *ParcelShopPostNordCreate {
	pspnc.mutation.SetTypeID(s)
	return pspnc
}

// SetID sets the "id" field.
func (pspnc *ParcelShopPostNordCreate) SetID(pu pulid.ID) *ParcelShopPostNordCreate {
	pspnc.mutation.SetID(pu)
	return pspnc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pspnc *ParcelShopPostNordCreate) SetNillableID(pu *pulid.ID) *ParcelShopPostNordCreate {
	if pu != nil {
		pspnc.SetID(*pu)
	}
	return pspnc
}

// SetParcelShopID sets the "parcel_shop" edge to the ParcelShop entity by ID.
func (pspnc *ParcelShopPostNordCreate) SetParcelShopID(id pulid.ID) *ParcelShopPostNordCreate {
	pspnc.mutation.SetParcelShopID(id)
	return pspnc
}

// SetParcelShop sets the "parcel_shop" edge to the ParcelShop entity.
func (pspnc *ParcelShopPostNordCreate) SetParcelShop(p *ParcelShop) *ParcelShopPostNordCreate {
	return pspnc.SetParcelShopID(p.ID)
}

// SetAddressDeliveryID sets the "address_delivery" edge to the AddressGlobal entity by ID.
func (pspnc *ParcelShopPostNordCreate) SetAddressDeliveryID(id pulid.ID) *ParcelShopPostNordCreate {
	pspnc.mutation.SetAddressDeliveryID(id)
	return pspnc
}

// SetAddressDelivery sets the "address_delivery" edge to the AddressGlobal entity.
func (pspnc *ParcelShopPostNordCreate) SetAddressDelivery(a *AddressGlobal) *ParcelShopPostNordCreate {
	return pspnc.SetAddressDeliveryID(a.ID)
}

// Mutation returns the ParcelShopPostNordMutation object of the builder.
func (pspnc *ParcelShopPostNordCreate) Mutation() *ParcelShopPostNordMutation {
	return pspnc.mutation
}

// Save creates the ParcelShopPostNord in the database.
func (pspnc *ParcelShopPostNordCreate) Save(ctx context.Context) (*ParcelShopPostNord, error) {
	if err := pspnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pspnc.sqlSave, pspnc.mutation, pspnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pspnc *ParcelShopPostNordCreate) SaveX(ctx context.Context) *ParcelShopPostNord {
	v, err := pspnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pspnc *ParcelShopPostNordCreate) Exec(ctx context.Context) error {
	_, err := pspnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspnc *ParcelShopPostNordCreate) ExecX(ctx context.Context) {
	if err := pspnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pspnc *ParcelShopPostNordCreate) defaults() error {
	if _, ok := pspnc.mutation.ID(); !ok {
		if parcelshoppostnord.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized parcelshoppostnord.DefaultID (forgotten import ent/runtime?)")
		}
		v := parcelshoppostnord.DefaultID()
		pspnc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pspnc *ParcelShopPostNordCreate) check() error {
	if _, ok := pspnc.mutation.ServicePointID(); !ok {
		return &ValidationError{Name: "service_point_id", err: errors.New(`ent: missing required field "ParcelShopPostNord.service_point_id"`)}
	}
	if _, ok := pspnc.mutation.Pudoid(); !ok {
		return &ValidationError{Name: "pudoid", err: errors.New(`ent: missing required field "ParcelShopPostNord.pudoid"`)}
	}
	if _, ok := pspnc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "ParcelShopPostNord.type_id"`)}
	}
	if len(pspnc.mutation.ParcelShopIDs()) == 0 {
		return &ValidationError{Name: "parcel_shop", err: errors.New(`ent: missing required edge "ParcelShopPostNord.parcel_shop"`)}
	}
	if len(pspnc.mutation.AddressDeliveryIDs()) == 0 {
		return &ValidationError{Name: "address_delivery", err: errors.New(`ent: missing required edge "ParcelShopPostNord.address_delivery"`)}
	}
	return nil
}

func (pspnc *ParcelShopPostNordCreate) sqlSave(ctx context.Context) (*ParcelShopPostNord, error) {
	if err := pspnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pspnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pspnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pspnc.mutation.id = &_node.ID
	pspnc.mutation.done = true
	return _node, nil
}

func (pspnc *ParcelShopPostNordCreate) createSpec() (*ParcelShopPostNord, *sqlgraph.CreateSpec) {
	var (
		_node = &ParcelShopPostNord{config: pspnc.config}
		_spec = sqlgraph.NewCreateSpec(parcelshoppostnord.Table, sqlgraph.NewFieldSpec(parcelshoppostnord.FieldID, field.TypeString))
	)
	_spec.OnConflict = pspnc.conflict
	if id, ok := pspnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pspnc.mutation.ServicePointID(); ok {
		_spec.SetField(parcelshoppostnord.FieldServicePointID, field.TypeString, value)
		_node.ServicePointID = value
	}
	if value, ok := pspnc.mutation.Pudoid(); ok {
		_spec.SetField(parcelshoppostnord.FieldPudoid, field.TypeString, value)
		_node.Pudoid = value
	}
	if value, ok := pspnc.mutation.TypeID(); ok {
		_spec.SetField(parcelshoppostnord.FieldTypeID, field.TypeString, value)
		_node.TypeID = value
	}
	if nodes := pspnc.mutation.ParcelShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   parcelshoppostnord.ParcelShopTable,
			Columns: []string{parcelshoppostnord.ParcelShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(parcelshop.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.parcel_shop_parcel_shop_post_nord = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pspnc.mutation.AddressDeliveryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   parcelshoppostnord.AddressDeliveryTable,
			Columns: []string{parcelshoppostnord.AddressDeliveryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(addressglobal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopPostNord.Create().
//		SetServicePointID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopPostNordUpsert) {
//			SetServicePointID(v+v).
//		}).
//		Exec(ctx)
func (pspnc *ParcelShopPostNordCreate) OnConflict(opts ...sql.ConflictOption) *ParcelShopPostNordUpsertOne {
	pspnc.conflict = opts
	return &ParcelShopPostNordUpsertOne{
		create: pspnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopPostNord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pspnc *ParcelShopPostNordCreate) OnConflictColumns(columns ...string) *ParcelShopPostNordUpsertOne {
	pspnc.conflict = append(pspnc.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopPostNordUpsertOne{
		create: pspnc,
	}
}

type (
	// ParcelShopPostNordUpsertOne is the builder for "upsert"-ing
	//  one ParcelShopPostNord node.
	ParcelShopPostNordUpsertOne struct {
		create *ParcelShopPostNordCreate
	}

	// ParcelShopPostNordUpsert is the "OnConflict" setter.
	ParcelShopPostNordUpsert struct {
		*sql.UpdateSet
	}
)

// SetServicePointID sets the "service_point_id" field.
func (u *ParcelShopPostNordUpsert) SetServicePointID(v string) *ParcelShopPostNordUpsert {
	u.Set(parcelshoppostnord.FieldServicePointID, v)
	return u
}

// UpdateServicePointID sets the "service_point_id" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsert) UpdateServicePointID() *ParcelShopPostNordUpsert {
	u.SetExcluded(parcelshoppostnord.FieldServicePointID)
	return u
}

// SetPudoid sets the "pudoid" field.
func (u *ParcelShopPostNordUpsert) SetPudoid(v string) *ParcelShopPostNordUpsert {
	u.Set(parcelshoppostnord.FieldPudoid, v)
	return u
}

// UpdatePudoid sets the "pudoid" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsert) UpdatePudoid() *ParcelShopPostNordUpsert {
	u.SetExcluded(parcelshoppostnord.FieldPudoid)
	return u
}

// SetTypeID sets the "type_id" field.
func (u *ParcelShopPostNordUpsert) SetTypeID(v string) *ParcelShopPostNordUpsert {
	u.Set(parcelshoppostnord.FieldTypeID, v)
	return u
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsert) UpdateTypeID() *ParcelShopPostNordUpsert {
	u.SetExcluded(parcelshoppostnord.FieldTypeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ParcelShopPostNord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshoppostnord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopPostNordUpsertOne) UpdateNewValues() *ParcelShopPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(parcelshoppostnord.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopPostNord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ParcelShopPostNordUpsertOne) Ignore() *ParcelShopPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopPostNordUpsertOne) DoNothing() *ParcelShopPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopPostNordCreate.OnConflict
// documentation for more info.
func (u *ParcelShopPostNordUpsertOne) Update(set func(*ParcelShopPostNordUpsert)) *ParcelShopPostNordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopPostNordUpsert{UpdateSet: update})
	}))
	return u
}

// SetServicePointID sets the "service_point_id" field.
func (u *ParcelShopPostNordUpsertOne) SetServicePointID(v string) *ParcelShopPostNordUpsertOne {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.SetServicePointID(v)
	})
}

// UpdateServicePointID sets the "service_point_id" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsertOne) UpdateServicePointID() *ParcelShopPostNordUpsertOne {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.UpdateServicePointID()
	})
}

// SetPudoid sets the "pudoid" field.
func (u *ParcelShopPostNordUpsertOne) SetPudoid(v string) *ParcelShopPostNordUpsertOne {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.SetPudoid(v)
	})
}

// UpdatePudoid sets the "pudoid" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsertOne) UpdatePudoid() *ParcelShopPostNordUpsertOne {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.UpdatePudoid()
	})
}

// SetTypeID sets the "type_id" field.
func (u *ParcelShopPostNordUpsertOne) SetTypeID(v string) *ParcelShopPostNordUpsertOne {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsertOne) UpdateTypeID() *ParcelShopPostNordUpsertOne {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.UpdateTypeID()
	})
}

// Exec executes the query.
func (u *ParcelShopPostNordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopPostNordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopPostNordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ParcelShopPostNordUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ParcelShopPostNordUpsertOne.ID is not supported by MySQL driver. Use ParcelShopPostNordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ParcelShopPostNordUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ParcelShopPostNordCreateBulk is the builder for creating many ParcelShopPostNord entities in bulk.
type ParcelShopPostNordCreateBulk struct {
	config
	err      error
	builders []*ParcelShopPostNordCreate
	conflict []sql.ConflictOption
}

// Save creates the ParcelShopPostNord entities in the database.
func (pspncb *ParcelShopPostNordCreateBulk) Save(ctx context.Context) ([]*ParcelShopPostNord, error) {
	if pspncb.err != nil {
		return nil, pspncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pspncb.builders))
	nodes := make([]*ParcelShopPostNord, len(pspncb.builders))
	mutators := make([]Mutator, len(pspncb.builders))
	for i := range pspncb.builders {
		func(i int, root context.Context) {
			builder := pspncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ParcelShopPostNordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pspncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pspncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pspncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pspncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pspncb *ParcelShopPostNordCreateBulk) SaveX(ctx context.Context) []*ParcelShopPostNord {
	v, err := pspncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pspncb *ParcelShopPostNordCreateBulk) Exec(ctx context.Context) error {
	_, err := pspncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pspncb *ParcelShopPostNordCreateBulk) ExecX(ctx context.Context) {
	if err := pspncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ParcelShopPostNord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ParcelShopPostNordUpsert) {
//			SetServicePointID(v+v).
//		}).
//		Exec(ctx)
func (pspncb *ParcelShopPostNordCreateBulk) OnConflict(opts ...sql.ConflictOption) *ParcelShopPostNordUpsertBulk {
	pspncb.conflict = opts
	return &ParcelShopPostNordUpsertBulk{
		create: pspncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ParcelShopPostNord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pspncb *ParcelShopPostNordCreateBulk) OnConflictColumns(columns ...string) *ParcelShopPostNordUpsertBulk {
	pspncb.conflict = append(pspncb.conflict, sql.ConflictColumns(columns...))
	return &ParcelShopPostNordUpsertBulk{
		create: pspncb,
	}
}

// ParcelShopPostNordUpsertBulk is the builder for "upsert"-ing
// a bulk of ParcelShopPostNord nodes.
type ParcelShopPostNordUpsertBulk struct {
	create *ParcelShopPostNordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ParcelShopPostNord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(parcelshoppostnord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ParcelShopPostNordUpsertBulk) UpdateNewValues() *ParcelShopPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(parcelshoppostnord.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ParcelShopPostNord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ParcelShopPostNordUpsertBulk) Ignore() *ParcelShopPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ParcelShopPostNordUpsertBulk) DoNothing() *ParcelShopPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ParcelShopPostNordCreateBulk.OnConflict
// documentation for more info.
func (u *ParcelShopPostNordUpsertBulk) Update(set func(*ParcelShopPostNordUpsert)) *ParcelShopPostNordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ParcelShopPostNordUpsert{UpdateSet: update})
	}))
	return u
}

// SetServicePointID sets the "service_point_id" field.
func (u *ParcelShopPostNordUpsertBulk) SetServicePointID(v string) *ParcelShopPostNordUpsertBulk {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.SetServicePointID(v)
	})
}

// UpdateServicePointID sets the "service_point_id" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsertBulk) UpdateServicePointID() *ParcelShopPostNordUpsertBulk {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.UpdateServicePointID()
	})
}

// SetPudoid sets the "pudoid" field.
func (u *ParcelShopPostNordUpsertBulk) SetPudoid(v string) *ParcelShopPostNordUpsertBulk {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.SetPudoid(v)
	})
}

// UpdatePudoid sets the "pudoid" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsertBulk) UpdatePudoid() *ParcelShopPostNordUpsertBulk {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.UpdatePudoid()
	})
}

// SetTypeID sets the "type_id" field.
func (u *ParcelShopPostNordUpsertBulk) SetTypeID(v string) *ParcelShopPostNordUpsertBulk {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.SetTypeID(v)
	})
}

// UpdateTypeID sets the "type_id" field to the value that was provided on create.
func (u *ParcelShopPostNordUpsertBulk) UpdateTypeID() *ParcelShopPostNordUpsertBulk {
	return u.Update(func(s *ParcelShopPostNordUpsert) {
		s.UpdateTypeID()
	})
}

// Exec executes the query.
func (u *ParcelShopPostNordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ParcelShopPostNordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ParcelShopPostNordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ParcelShopPostNordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
