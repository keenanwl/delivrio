// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/emailtemplate"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReturnPortal is the model entity for the ReturnPortal schema.
type ReturnPortal struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ReturnOpenHours holds the value of the "return_open_hours" field.
	ReturnOpenHours int `json:"return_open_hours,omitempty"`
	// AutomaticallyAccept holds the value of the "automatically_accept" field.
	AutomaticallyAccept bool `json:"automatically_accept,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReturnPortalQuery when eager-loading is set.
	Edges                                    ReturnPortalEdges `json:"edges"`
	return_portal_email_confirmation_label   *pulid.ID
	return_portal_email_confirmation_qr_code *pulid.ID
	return_portal_email_received             *pulid.ID
	return_portal_email_accepted             *pulid.ID
	selectValues                             sql.SelectValues
}

// ReturnPortalEdges holds the relations/edges for other nodes in the graph.
type ReturnPortalEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// ReturnPortalClaim holds the value of the return_portal_claim edge.
	ReturnPortalClaim []*ReturnPortalClaim `json:"return_portal_claim,omitempty"`
	// ReturnLocation holds the value of the return_location edge.
	ReturnLocation []*Location `json:"return_location,omitempty"`
	// DeliveryOptions holds the value of the delivery_options edge.
	DeliveryOptions []*DeliveryOption `json:"delivery_options,omitempty"`
	// Connection holds the value of the connection edge.
	Connection *Connection `json:"connection,omitempty"`
	// EmailConfirmationLabel holds the value of the email_confirmation_label edge.
	EmailConfirmationLabel *EmailTemplate `json:"email_confirmation_label,omitempty"`
	// EmailConfirmationQrCode holds the value of the email_confirmation_qr_code edge.
	EmailConfirmationQrCode *EmailTemplate `json:"email_confirmation_qr_code,omitempty"`
	// EmailReceived holds the value of the email_received edge.
	EmailReceived *EmailTemplate `json:"email_received,omitempty"`
	// EmailAccepted holds the value of the email_accepted edge.
	EmailAccepted *EmailTemplate `json:"email_accepted,omitempty"`
	// ReturnColli holds the value of the return_colli edge.
	ReturnColli []*ReturnColli `json:"return_colli,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
	// totalCount holds the count of the edges above.
	totalCount [10]map[string]int

	namedReturnPortalClaim map[string][]*ReturnPortalClaim
	namedReturnLocation    map[string][]*Location
	namedDeliveryOptions   map[string][]*DeliveryOption
	namedReturnColli       map[string][]*ReturnColli
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// ReturnPortalClaimOrErr returns the ReturnPortalClaim value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnPortalEdges) ReturnPortalClaimOrErr() ([]*ReturnPortalClaim, error) {
	if e.loadedTypes[1] {
		return e.ReturnPortalClaim, nil
	}
	return nil, &NotLoadedError{edge: "return_portal_claim"}
}

// ReturnLocationOrErr returns the ReturnLocation value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnPortalEdges) ReturnLocationOrErr() ([]*Location, error) {
	if e.loadedTypes[2] {
		return e.ReturnLocation, nil
	}
	return nil, &NotLoadedError{edge: "return_location"}
}

// DeliveryOptionsOrErr returns the DeliveryOptions value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnPortalEdges) DeliveryOptionsOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[3] {
		return e.DeliveryOptions, nil
	}
	return nil, &NotLoadedError{edge: "delivery_options"}
}

// ConnectionOrErr returns the Connection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalEdges) ConnectionOrErr() (*Connection, error) {
	if e.Connection != nil {
		return e.Connection, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: connection.Label}
	}
	return nil, &NotLoadedError{edge: "connection"}
}

// EmailConfirmationLabelOrErr returns the EmailConfirmationLabel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalEdges) EmailConfirmationLabelOrErr() (*EmailTemplate, error) {
	if e.EmailConfirmationLabel != nil {
		return e.EmailConfirmationLabel, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: emailtemplate.Label}
	}
	return nil, &NotLoadedError{edge: "email_confirmation_label"}
}

// EmailConfirmationQrCodeOrErr returns the EmailConfirmationQrCode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalEdges) EmailConfirmationQrCodeOrErr() (*EmailTemplate, error) {
	if e.EmailConfirmationQrCode != nil {
		return e.EmailConfirmationQrCode, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: emailtemplate.Label}
	}
	return nil, &NotLoadedError{edge: "email_confirmation_qr_code"}
}

// EmailReceivedOrErr returns the EmailReceived value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalEdges) EmailReceivedOrErr() (*EmailTemplate, error) {
	if e.EmailReceived != nil {
		return e.EmailReceived, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: emailtemplate.Label}
	}
	return nil, &NotLoadedError{edge: "email_received"}
}

// EmailAcceptedOrErr returns the EmailAccepted value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReturnPortalEdges) EmailAcceptedOrErr() (*EmailTemplate, error) {
	if e.EmailAccepted != nil {
		return e.EmailAccepted, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: emailtemplate.Label}
	}
	return nil, &NotLoadedError{edge: "email_accepted"}
}

// ReturnColliOrErr returns the ReturnColli value or an error if the edge
// was not loaded in eager-loading.
func (e ReturnPortalEdges) ReturnColliOrErr() ([]*ReturnColli, error) {
	if e.loadedTypes[9] {
		return e.ReturnColli, nil
	}
	return nil, &NotLoadedError{edge: "return_colli"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReturnPortal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case returnportal.FieldID, returnportal.FieldTenantID:
			values[i] = new(pulid.ID)
		case returnportal.FieldAutomaticallyAccept:
			values[i] = new(sql.NullBool)
		case returnportal.FieldReturnOpenHours:
			values[i] = new(sql.NullInt64)
		case returnportal.FieldName:
			values[i] = new(sql.NullString)
		case returnportal.ForeignKeys[0]: // return_portal_email_confirmation_label
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returnportal.ForeignKeys[1]: // return_portal_email_confirmation_qr_code
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returnportal.ForeignKeys[2]: // return_portal_email_received
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case returnportal.ForeignKeys[3]: // return_portal_email_accepted
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReturnPortal fields.
func (rp *ReturnPortal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case returnportal.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rp.ID = *value
			}
		case returnportal.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				rp.TenantID = *value
			}
		case returnportal.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case returnportal.FieldReturnOpenHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field return_open_hours", values[i])
			} else if value.Valid {
				rp.ReturnOpenHours = int(value.Int64)
			}
		case returnportal.FieldAutomaticallyAccept:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field automatically_accept", values[i])
			} else if value.Valid {
				rp.AutomaticallyAccept = value.Bool
			}
		case returnportal.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_portal_email_confirmation_label", values[i])
			} else if value.Valid {
				rp.return_portal_email_confirmation_label = new(pulid.ID)
				*rp.return_portal_email_confirmation_label = *value.S.(*pulid.ID)
			}
		case returnportal.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_portal_email_confirmation_qr_code", values[i])
			} else if value.Valid {
				rp.return_portal_email_confirmation_qr_code = new(pulid.ID)
				*rp.return_portal_email_confirmation_qr_code = *value.S.(*pulid.ID)
			}
		case returnportal.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_portal_email_received", values[i])
			} else if value.Valid {
				rp.return_portal_email_received = new(pulid.ID)
				*rp.return_portal_email_received = *value.S.(*pulid.ID)
			}
		case returnportal.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field return_portal_email_accepted", values[i])
			} else if value.Valid {
				rp.return_portal_email_accepted = new(pulid.ID)
				*rp.return_portal_email_accepted = *value.S.(*pulid.ID)
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReturnPortal.
// This includes values selected through modifiers, order, etc.
func (rp *ReturnPortal) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryTenant() *TenantQuery {
	return NewReturnPortalClient(rp.config).QueryTenant(rp)
}

// QueryReturnPortalClaim queries the "return_portal_claim" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryReturnPortalClaim() *ReturnPortalClaimQuery {
	return NewReturnPortalClient(rp.config).QueryReturnPortalClaim(rp)
}

// QueryReturnLocation queries the "return_location" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryReturnLocation() *LocationQuery {
	return NewReturnPortalClient(rp.config).QueryReturnLocation(rp)
}

// QueryDeliveryOptions queries the "delivery_options" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryDeliveryOptions() *DeliveryOptionQuery {
	return NewReturnPortalClient(rp.config).QueryDeliveryOptions(rp)
}

// QueryConnection queries the "connection" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryConnection() *ConnectionQuery {
	return NewReturnPortalClient(rp.config).QueryConnection(rp)
}

// QueryEmailConfirmationLabel queries the "email_confirmation_label" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryEmailConfirmationLabel() *EmailTemplateQuery {
	return NewReturnPortalClient(rp.config).QueryEmailConfirmationLabel(rp)
}

// QueryEmailConfirmationQrCode queries the "email_confirmation_qr_code" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryEmailConfirmationQrCode() *EmailTemplateQuery {
	return NewReturnPortalClient(rp.config).QueryEmailConfirmationQrCode(rp)
}

// QueryEmailReceived queries the "email_received" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryEmailReceived() *EmailTemplateQuery {
	return NewReturnPortalClient(rp.config).QueryEmailReceived(rp)
}

// QueryEmailAccepted queries the "email_accepted" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryEmailAccepted() *EmailTemplateQuery {
	return NewReturnPortalClient(rp.config).QueryEmailAccepted(rp)
}

// QueryReturnColli queries the "return_colli" edge of the ReturnPortal entity.
func (rp *ReturnPortal) QueryReturnColli() *ReturnColliQuery {
	return NewReturnPortalClient(rp.config).QueryReturnColli(rp)
}

// Update returns a builder for updating this ReturnPortal.
// Note that you need to call ReturnPortal.Unwrap() before calling this method if this ReturnPortal
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *ReturnPortal) Update() *ReturnPortalUpdateOne {
	return NewReturnPortalClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the ReturnPortal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *ReturnPortal) Unwrap() *ReturnPortal {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReturnPortal is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *ReturnPortal) String() string {
	var builder strings.Builder
	builder.WriteString("ReturnPortal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", rp.TenantID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", ")
	builder.WriteString("return_open_hours=")
	builder.WriteString(fmt.Sprintf("%v", rp.ReturnOpenHours))
	builder.WriteString(", ")
	builder.WriteString("automatically_accept=")
	builder.WriteString(fmt.Sprintf("%v", rp.AutomaticallyAccept))
	builder.WriteByte(')')
	return builder.String()
}

// NamedReturnPortalClaim returns the ReturnPortalClaim named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rp *ReturnPortal) NamedReturnPortalClaim(name string) ([]*ReturnPortalClaim, error) {
	if rp.Edges.namedReturnPortalClaim == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rp.Edges.namedReturnPortalClaim[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rp *ReturnPortal) appendNamedReturnPortalClaim(name string, edges ...*ReturnPortalClaim) {
	if rp.Edges.namedReturnPortalClaim == nil {
		rp.Edges.namedReturnPortalClaim = make(map[string][]*ReturnPortalClaim)
	}
	if len(edges) == 0 {
		rp.Edges.namedReturnPortalClaim[name] = []*ReturnPortalClaim{}
	} else {
		rp.Edges.namedReturnPortalClaim[name] = append(rp.Edges.namedReturnPortalClaim[name], edges...)
	}
}

// NamedReturnLocation returns the ReturnLocation named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rp *ReturnPortal) NamedReturnLocation(name string) ([]*Location, error) {
	if rp.Edges.namedReturnLocation == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rp.Edges.namedReturnLocation[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rp *ReturnPortal) appendNamedReturnLocation(name string, edges ...*Location) {
	if rp.Edges.namedReturnLocation == nil {
		rp.Edges.namedReturnLocation = make(map[string][]*Location)
	}
	if len(edges) == 0 {
		rp.Edges.namedReturnLocation[name] = []*Location{}
	} else {
		rp.Edges.namedReturnLocation[name] = append(rp.Edges.namedReturnLocation[name], edges...)
	}
}

// NamedDeliveryOptions returns the DeliveryOptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rp *ReturnPortal) NamedDeliveryOptions(name string) ([]*DeliveryOption, error) {
	if rp.Edges.namedDeliveryOptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rp.Edges.namedDeliveryOptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rp *ReturnPortal) appendNamedDeliveryOptions(name string, edges ...*DeliveryOption) {
	if rp.Edges.namedDeliveryOptions == nil {
		rp.Edges.namedDeliveryOptions = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		rp.Edges.namedDeliveryOptions[name] = []*DeliveryOption{}
	} else {
		rp.Edges.namedDeliveryOptions[name] = append(rp.Edges.namedDeliveryOptions[name], edges...)
	}
}

// NamedReturnColli returns the ReturnColli named value or an error if the edge was not
// loaded in eager-loading with this name.
func (rp *ReturnPortal) NamedReturnColli(name string) ([]*ReturnColli, error) {
	if rp.Edges.namedReturnColli == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := rp.Edges.namedReturnColli[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (rp *ReturnPortal) appendNamedReturnColli(name string, edges ...*ReturnColli) {
	if rp.Edges.namedReturnColli == nil {
		rp.Edges.namedReturnColli = make(map[string][]*ReturnColli)
	}
	if len(edges) == 0 {
		rp.Edges.namedReturnColli[name] = []*ReturnColli{}
	} else {
		rp.Edges.namedReturnColli[name] = append(rp.Edges.namedReturnColli[name], edges...)
	}
}

// ReturnPortals is a parsable slice of ReturnPortal.
type ReturnPortals []*ReturnPortal
