// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/packaging"
	"delivrio.io/go/ent/packagingdf"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PackagingDF is the model entity for the PackagingDF schema.
type PackagingDF struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// APIType holds the value of the "api_type" field.
	APIType packagingdf.APIType `json:"api_type,omitempty"`
	// MaxWeight holds the value of the "max_weight" field.
	MaxWeight float64 `json:"max_weight,omitempty"`
	// MinWeight holds the value of the "min_weight" field.
	MinWeight float64 `json:"min_weight,omitempty"`
	// Some carriers this is not boolean, so this is not a general toggle
	Stackable bool `json:"stackable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PackagingDFQuery when eager-loading is set.
	Edges                  PackagingDFEdges `json:"edges"`
	packaging_packaging_df *pulid.ID
	selectValues           sql.SelectValues
}

// PackagingDFEdges holds the relations/edges for other nodes in the graph.
type PackagingDFEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Packaging holds the value of the packaging edge.
	Packaging *Packaging `json:"packaging,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingDFEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// PackagingOrErr returns the Packaging value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PackagingDFEdges) PackagingOrErr() (*Packaging, error) {
	if e.Packaging != nil {
		return e.Packaging, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: packaging.Label}
	}
	return nil, &NotLoadedError{edge: "packaging"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PackagingDF) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case packagingdf.FieldID, packagingdf.FieldTenantID:
			values[i] = new(pulid.ID)
		case packagingdf.FieldStackable:
			values[i] = new(sql.NullBool)
		case packagingdf.FieldMaxWeight, packagingdf.FieldMinWeight:
			values[i] = new(sql.NullFloat64)
		case packagingdf.FieldAPIType:
			values[i] = new(sql.NullString)
		case packagingdf.ForeignKeys[0]: // packaging_packaging_df
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PackagingDF fields.
func (pd *PackagingDF) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case packagingdf.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pd.ID = *value
			}
		case packagingdf.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				pd.TenantID = *value
			}
		case packagingdf.FieldAPIType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_type", values[i])
			} else if value.Valid {
				pd.APIType = packagingdf.APIType(value.String)
			}
		case packagingdf.FieldMaxWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_weight", values[i])
			} else if value.Valid {
				pd.MaxWeight = value.Float64
			}
		case packagingdf.FieldMinWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_weight", values[i])
			} else if value.Valid {
				pd.MinWeight = value.Float64
			}
		case packagingdf.FieldStackable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field stackable", values[i])
			} else if value.Valid {
				pd.Stackable = value.Bool
			}
		case packagingdf.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field packaging_packaging_df", values[i])
			} else if value.Valid {
				pd.packaging_packaging_df = new(pulid.ID)
				*pd.packaging_packaging_df = *value.S.(*pulid.ID)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PackagingDF.
// This includes values selected through modifiers, order, etc.
func (pd *PackagingDF) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the PackagingDF entity.
func (pd *PackagingDF) QueryTenant() *TenantQuery {
	return NewPackagingDFClient(pd.config).QueryTenant(pd)
}

// QueryPackaging queries the "packaging" edge of the PackagingDF entity.
func (pd *PackagingDF) QueryPackaging() *PackagingQuery {
	return NewPackagingDFClient(pd.config).QueryPackaging(pd)
}

// Update returns a builder for updating this PackagingDF.
// Note that you need to call PackagingDF.Unwrap() before calling this method if this PackagingDF
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PackagingDF) Update() *PackagingDFUpdateOne {
	return NewPackagingDFClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PackagingDF entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PackagingDF) Unwrap() *PackagingDF {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PackagingDF is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PackagingDF) String() string {
	var builder strings.Builder
	builder.WriteString("PackagingDF(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.TenantID))
	builder.WriteString(", ")
	builder.WriteString("api_type=")
	builder.WriteString(fmt.Sprintf("%v", pd.APIType))
	builder.WriteString(", ")
	builder.WriteString("max_weight=")
	builder.WriteString(fmt.Sprintf("%v", pd.MaxWeight))
	builder.WriteString(", ")
	builder.WriteString("min_weight=")
	builder.WriteString(fmt.Sprintf("%v", pd.MinWeight))
	builder.WriteString(", ")
	builder.WriteString("stackable=")
	builder.WriteString(fmt.Sprintf("%v", pd.Stackable))
	builder.WriteByte(')')
	return builder.String()
}

// PackagingDFs is a parsable slice of PackagingDF.
type PackagingDFs []*PackagingDF
