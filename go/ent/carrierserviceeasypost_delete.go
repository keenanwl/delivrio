// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"delivrio.io/go/ent/carrierserviceeasypost"
	"delivrio.io/go/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierServiceEasyPostDelete is the builder for deleting a CarrierServiceEasyPost entity.
type CarrierServiceEasyPostDelete struct {
	config
	hooks    []Hook
	mutation *CarrierServiceEasyPostMutation
}

// Where appends a list predicates to the CarrierServiceEasyPostDelete builder.
func (csepd *CarrierServiceEasyPostDelete) Where(ps ...predicate.CarrierServiceEasyPost) *CarrierServiceEasyPostDelete {
	csepd.mutation.Where(ps...)
	return csepd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (csepd *CarrierServiceEasyPostDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, csepd.sqlExec, csepd.mutation, csepd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (csepd *CarrierServiceEasyPostDelete) ExecX(ctx context.Context) int {
	n, err := csepd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (csepd *CarrierServiceEasyPostDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(carrierserviceeasypost.Table, sqlgraph.NewFieldSpec(carrierserviceeasypost.FieldID, field.TypeString))
	if ps := csepd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, csepd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	csepd.mutation.done = true
	return affected, err
}

// CarrierServiceEasyPostDeleteOne is the builder for deleting a single CarrierServiceEasyPost entity.
type CarrierServiceEasyPostDeleteOne struct {
	csepd *CarrierServiceEasyPostDelete
}

// Where appends a list predicates to the CarrierServiceEasyPostDelete builder.
func (csepdo *CarrierServiceEasyPostDeleteOne) Where(ps ...predicate.CarrierServiceEasyPost) *CarrierServiceEasyPostDeleteOne {
	csepdo.csepd.mutation.Where(ps...)
	return csepdo
}

// Exec executes the deletion query.
func (csepdo *CarrierServiceEasyPostDeleteOne) Exec(ctx context.Context) error {
	n, err := csepdo.csepd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{carrierserviceeasypost.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (csepdo *CarrierServiceEasyPostDeleteOne) ExecX(ctx context.Context) {
	if err := csepdo.Exec(ctx); err != nil {
		panic(err)
	}
}
