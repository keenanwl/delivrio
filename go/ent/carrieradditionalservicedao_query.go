// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/carrieradditionalservicedao"
	"delivrio.io/go/ent/carrierservicedao"
	"delivrio.io/go/ent/deliveryoptiondao"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarrierAdditionalServiceDAOQuery is the builder for querying CarrierAdditionalServiceDAO entities.
type CarrierAdditionalServiceDAOQuery struct {
	config
	ctx                        *QueryContext
	order                      []carrieradditionalservicedao.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.CarrierAdditionalServiceDAO
	withCarrierServiceDAO      *CarrierServiceDAOQuery
	withDeliveryOptionDAO      *DeliveryOptionDAOQuery
	modifiers                  []func(*sql.Selector)
	loadTotal                  []func(context.Context, []*CarrierAdditionalServiceDAO) error
	withNamedCarrierServiceDAO map[string]*CarrierServiceDAOQuery
	withNamedDeliveryOptionDAO map[string]*DeliveryOptionDAOQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarrierAdditionalServiceDAOQuery builder.
func (casdq *CarrierAdditionalServiceDAOQuery) Where(ps ...predicate.CarrierAdditionalServiceDAO) *CarrierAdditionalServiceDAOQuery {
	casdq.predicates = append(casdq.predicates, ps...)
	return casdq
}

// Limit the number of records to be returned by this query.
func (casdq *CarrierAdditionalServiceDAOQuery) Limit(limit int) *CarrierAdditionalServiceDAOQuery {
	casdq.ctx.Limit = &limit
	return casdq
}

// Offset to start from.
func (casdq *CarrierAdditionalServiceDAOQuery) Offset(offset int) *CarrierAdditionalServiceDAOQuery {
	casdq.ctx.Offset = &offset
	return casdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (casdq *CarrierAdditionalServiceDAOQuery) Unique(unique bool) *CarrierAdditionalServiceDAOQuery {
	casdq.ctx.Unique = &unique
	return casdq
}

// Order specifies how the records should be ordered.
func (casdq *CarrierAdditionalServiceDAOQuery) Order(o ...carrieradditionalservicedao.OrderOption) *CarrierAdditionalServiceDAOQuery {
	casdq.order = append(casdq.order, o...)
	return casdq
}

// QueryCarrierServiceDAO chains the current query on the "carrier_service_dao" edge.
func (casdq *CarrierAdditionalServiceDAOQuery) QueryCarrierServiceDAO() *CarrierServiceDAOQuery {
	query := (&CarrierServiceDAOClient{config: casdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedao.Table, carrieradditionalservicedao.FieldID, selector),
			sqlgraph.To(carrierservicedao.Table, carrierservicedao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedao.CarrierServiceDAOTable, carrieradditionalservicedao.CarrierServiceDAOPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionDAO chains the current query on the "delivery_option_dao" edge.
func (casdq *CarrierAdditionalServiceDAOQuery) QueryDeliveryOptionDAO() *DeliveryOptionDAOQuery {
	query := (&DeliveryOptionDAOClient{config: casdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := casdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := casdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(carrieradditionalservicedao.Table, carrieradditionalservicedao.FieldID, selector),
			sqlgraph.To(deliveryoptiondao.Table, deliveryoptiondao.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, carrieradditionalservicedao.DeliveryOptionDAOTable, carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(casdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CarrierAdditionalServiceDAO entity from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceDAO was found.
func (casdq *CarrierAdditionalServiceDAOQuery) First(ctx context.Context) (*CarrierAdditionalServiceDAO, error) {
	nodes, err := casdq.Limit(1).All(setContextOp(ctx, casdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{carrieradditionalservicedao.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) FirstX(ctx context.Context) *CarrierAdditionalServiceDAO {
	node, err := casdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CarrierAdditionalServiceDAO ID from the query.
// Returns a *NotFoundError when no CarrierAdditionalServiceDAO ID was found.
func (casdq *CarrierAdditionalServiceDAOQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casdq.Limit(1).IDs(setContextOp(ctx, casdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{carrieradditionalservicedao.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := casdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CarrierAdditionalServiceDAO entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceDAO entity is found.
// Returns a *NotFoundError when no CarrierAdditionalServiceDAO entities are found.
func (casdq *CarrierAdditionalServiceDAOQuery) Only(ctx context.Context) (*CarrierAdditionalServiceDAO, error) {
	nodes, err := casdq.Limit(2).All(setContextOp(ctx, casdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{carrieradditionalservicedao.Label}
	default:
		return nil, &NotSingularError{carrieradditionalservicedao.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) OnlyX(ctx context.Context) *CarrierAdditionalServiceDAO {
	node, err := casdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CarrierAdditionalServiceDAO ID in the query.
// Returns a *NotSingularError when more than one CarrierAdditionalServiceDAO ID is found.
// Returns a *NotFoundError when no entities are found.
func (casdq *CarrierAdditionalServiceDAOQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = casdq.Limit(2).IDs(setContextOp(ctx, casdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{carrieradditionalservicedao.Label}
	default:
		err = &NotSingularError{carrieradditionalservicedao.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := casdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CarrierAdditionalServiceDAOs.
func (casdq *CarrierAdditionalServiceDAOQuery) All(ctx context.Context) ([]*CarrierAdditionalServiceDAO, error) {
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryAll)
	if err := casdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CarrierAdditionalServiceDAO, *CarrierAdditionalServiceDAOQuery]()
	return withInterceptors[[]*CarrierAdditionalServiceDAO](ctx, casdq, qr, casdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) AllX(ctx context.Context) []*CarrierAdditionalServiceDAO {
	nodes, err := casdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CarrierAdditionalServiceDAO IDs.
func (casdq *CarrierAdditionalServiceDAOQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if casdq.ctx.Unique == nil && casdq.path != nil {
		casdq.Unique(true)
	}
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryIDs)
	if err = casdq.Select(carrieradditionalservicedao.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := casdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (casdq *CarrierAdditionalServiceDAOQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryCount)
	if err := casdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, casdq, querierCount[*CarrierAdditionalServiceDAOQuery](), casdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) CountX(ctx context.Context) int {
	count, err := casdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (casdq *CarrierAdditionalServiceDAOQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, casdq.ctx, ent.OpQueryExist)
	switch _, err := casdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (casdq *CarrierAdditionalServiceDAOQuery) ExistX(ctx context.Context) bool {
	exist, err := casdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarrierAdditionalServiceDAOQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (casdq *CarrierAdditionalServiceDAOQuery) Clone() *CarrierAdditionalServiceDAOQuery {
	if casdq == nil {
		return nil
	}
	return &CarrierAdditionalServiceDAOQuery{
		config:                casdq.config,
		ctx:                   casdq.ctx.Clone(),
		order:                 append([]carrieradditionalservicedao.OrderOption{}, casdq.order...),
		inters:                append([]Interceptor{}, casdq.inters...),
		predicates:            append([]predicate.CarrierAdditionalServiceDAO{}, casdq.predicates...),
		withCarrierServiceDAO: casdq.withCarrierServiceDAO.Clone(),
		withDeliveryOptionDAO: casdq.withDeliveryOptionDAO.Clone(),
		// clone intermediate query.
		sql:  casdq.sql.Clone(),
		path: casdq.path,
	}
}

// WithCarrierServiceDAO tells the query-builder to eager-load the nodes that are connected to
// the "carrier_service_dao" edge. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDAOQuery) WithCarrierServiceDAO(opts ...func(*CarrierServiceDAOQuery)) *CarrierAdditionalServiceDAOQuery {
	query := (&CarrierServiceDAOClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casdq.withCarrierServiceDAO = query
	return casdq
}

// WithDeliveryOptionDAO tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_dao" edge. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDAOQuery) WithDeliveryOptionDAO(opts ...func(*DeliveryOptionDAOQuery)) *CarrierAdditionalServiceDAOQuery {
	query := (&DeliveryOptionDAOClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	casdq.withDeliveryOptionDAO = query
	return casdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceDAO.Query().
//		GroupBy(carrieradditionalservicedao.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (casdq *CarrierAdditionalServiceDAOQuery) GroupBy(field string, fields ...string) *CarrierAdditionalServiceDAOGroupBy {
	casdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarrierAdditionalServiceDAOGroupBy{build: casdq}
	grbuild.flds = &casdq.ctx.Fields
	grbuild.label = carrieradditionalservicedao.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.CarrierAdditionalServiceDAO.Query().
//		Select(carrieradditionalservicedao.FieldLabel).
//		Scan(ctx, &v)
func (casdq *CarrierAdditionalServiceDAOQuery) Select(fields ...string) *CarrierAdditionalServiceDAOSelect {
	casdq.ctx.Fields = append(casdq.ctx.Fields, fields...)
	sbuild := &CarrierAdditionalServiceDAOSelect{CarrierAdditionalServiceDAOQuery: casdq}
	sbuild.label = carrieradditionalservicedao.Label
	sbuild.flds, sbuild.scan = &casdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarrierAdditionalServiceDAOSelect configured with the given aggregations.
func (casdq *CarrierAdditionalServiceDAOQuery) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceDAOSelect {
	return casdq.Select().Aggregate(fns...)
}

func (casdq *CarrierAdditionalServiceDAOQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range casdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, casdq); err != nil {
				return err
			}
		}
	}
	for _, f := range casdq.ctx.Fields {
		if !carrieradditionalservicedao.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if casdq.path != nil {
		prev, err := casdq.path(ctx)
		if err != nil {
			return err
		}
		casdq.sql = prev
	}
	if carrieradditionalservicedao.Policy == nil {
		return errors.New("ent: uninitialized carrieradditionalservicedao.Policy (forgotten import ent/runtime?)")
	}
	if err := carrieradditionalservicedao.Policy.EvalQuery(ctx, casdq); err != nil {
		return err
	}
	return nil
}

func (casdq *CarrierAdditionalServiceDAOQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CarrierAdditionalServiceDAO, error) {
	var (
		nodes       = []*CarrierAdditionalServiceDAO{}
		_spec       = casdq.querySpec()
		loadedTypes = [2]bool{
			casdq.withCarrierServiceDAO != nil,
			casdq.withDeliveryOptionDAO != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CarrierAdditionalServiceDAO).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CarrierAdditionalServiceDAO{config: casdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(casdq.modifiers) > 0 {
		_spec.Modifiers = casdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, casdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := casdq.withCarrierServiceDAO; query != nil {
		if err := casdq.loadCarrierServiceDAO(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDAO) { n.Edges.CarrierServiceDAO = []*CarrierServiceDAO{} },
			func(n *CarrierAdditionalServiceDAO, e *CarrierServiceDAO) {
				n.Edges.CarrierServiceDAO = append(n.Edges.CarrierServiceDAO, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := casdq.withDeliveryOptionDAO; query != nil {
		if err := casdq.loadDeliveryOptionDAO(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDAO) { n.Edges.DeliveryOptionDAO = []*DeliveryOptionDAO{} },
			func(n *CarrierAdditionalServiceDAO, e *DeliveryOptionDAO) {
				n.Edges.DeliveryOptionDAO = append(n.Edges.DeliveryOptionDAO, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range casdq.withNamedCarrierServiceDAO {
		if err := casdq.loadCarrierServiceDAO(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDAO) { n.appendNamedCarrierServiceDAO(name) },
			func(n *CarrierAdditionalServiceDAO, e *CarrierServiceDAO) { n.appendNamedCarrierServiceDAO(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range casdq.withNamedDeliveryOptionDAO {
		if err := casdq.loadDeliveryOptionDAO(ctx, query, nodes,
			func(n *CarrierAdditionalServiceDAO) { n.appendNamedDeliveryOptionDAO(name) },
			func(n *CarrierAdditionalServiceDAO, e *DeliveryOptionDAO) { n.appendNamedDeliveryOptionDAO(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range casdq.loadTotal {
		if err := casdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (casdq *CarrierAdditionalServiceDAOQuery) loadCarrierServiceDAO(ctx context.Context, query *CarrierServiceDAOQuery, nodes []*CarrierAdditionalServiceDAO, init func(*CarrierAdditionalServiceDAO), assign func(*CarrierAdditionalServiceDAO, *CarrierServiceDAO)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceDAO)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceDAO]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicedao.CarrierServiceDAOTable)
		s.Join(joinT).On(s.C(carrierservicedao.FieldID), joinT.C(carrieradditionalservicedao.CarrierServiceDAOPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicedao.CarrierServiceDAOPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicedao.CarrierServiceDAOPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceDAO]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CarrierServiceDAO](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "carrier_service_dao" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (casdq *CarrierAdditionalServiceDAOQuery) loadDeliveryOptionDAO(ctx context.Context, query *DeliveryOptionDAOQuery, nodes []*CarrierAdditionalServiceDAO, init func(*CarrierAdditionalServiceDAO), assign func(*CarrierAdditionalServiceDAO, *DeliveryOptionDAO)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*CarrierAdditionalServiceDAO)
	nids := make(map[pulid.ID]map[*CarrierAdditionalServiceDAO]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(carrieradditionalservicedao.DeliveryOptionDAOTable)
		s.Join(joinT).On(s.C(deliveryoptiondao.FieldID), joinT.C(carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(carrieradditionalservicedao.DeliveryOptionDAOPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*CarrierAdditionalServiceDAO]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOptionDAO](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_dao" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (casdq *CarrierAdditionalServiceDAOQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := casdq.querySpec()
	if len(casdq.modifiers) > 0 {
		_spec.Modifiers = casdq.modifiers
	}
	_spec.Node.Columns = casdq.ctx.Fields
	if len(casdq.ctx.Fields) > 0 {
		_spec.Unique = casdq.ctx.Unique != nil && *casdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, casdq.driver, _spec)
}

func (casdq *CarrierAdditionalServiceDAOQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(carrieradditionalservicedao.Table, carrieradditionalservicedao.Columns, sqlgraph.NewFieldSpec(carrieradditionalservicedao.FieldID, field.TypeString))
	_spec.From = casdq.sql
	if unique := casdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if casdq.path != nil {
		_spec.Unique = true
	}
	if fields := casdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, carrieradditionalservicedao.FieldID)
		for i := range fields {
			if fields[i] != carrieradditionalservicedao.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := casdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := casdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := casdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := casdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (casdq *CarrierAdditionalServiceDAOQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(casdq.driver.Dialect())
	t1 := builder.Table(carrieradditionalservicedao.Table)
	columns := casdq.ctx.Fields
	if len(columns) == 0 {
		columns = carrieradditionalservicedao.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if casdq.sql != nil {
		selector = casdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if casdq.ctx.Unique != nil && *casdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range casdq.predicates {
		p(selector)
	}
	for _, p := range casdq.order {
		p(selector)
	}
	if offset := casdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := casdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedCarrierServiceDAO tells the query-builder to eager-load the nodes that are connected to the "carrier_service_dao"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDAOQuery) WithNamedCarrierServiceDAO(name string, opts ...func(*CarrierServiceDAOQuery)) *CarrierAdditionalServiceDAOQuery {
	query := (&CarrierServiceDAOClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casdq.withNamedCarrierServiceDAO == nil {
		casdq.withNamedCarrierServiceDAO = make(map[string]*CarrierServiceDAOQuery)
	}
	casdq.withNamedCarrierServiceDAO[name] = query
	return casdq
}

// WithNamedDeliveryOptionDAO tells the query-builder to eager-load the nodes that are connected to the "delivery_option_dao"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (casdq *CarrierAdditionalServiceDAOQuery) WithNamedDeliveryOptionDAO(name string, opts ...func(*DeliveryOptionDAOQuery)) *CarrierAdditionalServiceDAOQuery {
	query := (&DeliveryOptionDAOClient{config: casdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if casdq.withNamedDeliveryOptionDAO == nil {
		casdq.withNamedDeliveryOptionDAO = make(map[string]*DeliveryOptionDAOQuery)
	}
	casdq.withNamedDeliveryOptionDAO[name] = query
	return casdq
}

// CarrierAdditionalServiceDAOGroupBy is the group-by builder for CarrierAdditionalServiceDAO entities.
type CarrierAdditionalServiceDAOGroupBy struct {
	selector
	build *CarrierAdditionalServiceDAOQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (casdgb *CarrierAdditionalServiceDAOGroupBy) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceDAOGroupBy {
	casdgb.fns = append(casdgb.fns, fns...)
	return casdgb
}

// Scan applies the selector query and scans the result into the given value.
func (casdgb *CarrierAdditionalServiceDAOGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casdgb.build.ctx, ent.OpQueryGroupBy)
	if err := casdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceDAOQuery, *CarrierAdditionalServiceDAOGroupBy](ctx, casdgb.build, casdgb, casdgb.build.inters, v)
}

func (casdgb *CarrierAdditionalServiceDAOGroupBy) sqlScan(ctx context.Context, root *CarrierAdditionalServiceDAOQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(casdgb.fns))
	for _, fn := range casdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*casdgb.flds)+len(casdgb.fns))
		for _, f := range *casdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*casdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarrierAdditionalServiceDAOSelect is the builder for selecting fields of CarrierAdditionalServiceDAO entities.
type CarrierAdditionalServiceDAOSelect struct {
	*CarrierAdditionalServiceDAOQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (casds *CarrierAdditionalServiceDAOSelect) Aggregate(fns ...AggregateFunc) *CarrierAdditionalServiceDAOSelect {
	casds.fns = append(casds.fns, fns...)
	return casds
}

// Scan applies the selector query and scans the result into the given value.
func (casds *CarrierAdditionalServiceDAOSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, casds.ctx, ent.OpQuerySelect)
	if err := casds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarrierAdditionalServiceDAOQuery, *CarrierAdditionalServiceDAOSelect](ctx, casds.CarrierAdditionalServiceDAOQuery, casds, casds.inters, v)
}

func (casds *CarrierAdditionalServiceDAOSelect) sqlScan(ctx context.Context, root *CarrierAdditionalServiceDAOQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(casds.fns))
	for _, fn := range casds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*casds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := casds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
