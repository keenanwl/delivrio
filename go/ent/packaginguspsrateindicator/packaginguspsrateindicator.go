// Code generated by ent, DO NOT EDIT.

package packaginguspsrateindicator

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the packaginguspsrateindicator type in the database.
	Label = "packaging_usps_rate_indicator"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgePackagingUSPS holds the string denoting the packaging_usps edge name in mutations.
	EdgePackagingUSPS = "packaging_usps"
	// Table holds the table name of the packaginguspsrateindicator in the database.
	Table = "packaging_usps_rate_indicators"
	// PackagingUSPSTable is the table that holds the packaging_usps relation/edge.
	PackagingUSPSTable = "packaging_usp_ss"
	// PackagingUSPSInverseTable is the table name for the PackagingUSPS entity.
	// It exists in this package in order to avoid circular dependency with the "packagingusps" package.
	PackagingUSPSInverseTable = "packaging_usp_ss"
	// PackagingUSPSColumn is the table column denoting the packaging_usps relation/edge.
	PackagingUSPSColumn = "packaging_usps_packaging_usps_rate_indicator"
)

// Columns holds all SQL columns for packaginguspsrateindicator fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the PackagingUSPSRateIndicator queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPackagingUSPSCount orders the results by packaging_usps count.
func ByPackagingUSPSCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPackagingUSPSStep(), opts...)
	}
}

// ByPackagingUSPS orders the results by packaging_usps terms.
func ByPackagingUSPS(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPackagingUSPSStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPackagingUSPSStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PackagingUSPSInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, PackagingUSPSTable, PackagingUSPSColumn),
	)
}
