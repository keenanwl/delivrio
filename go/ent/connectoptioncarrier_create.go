// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connectoptioncarrier"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectOptionCarrierCreate is the builder for creating a ConnectOptionCarrier entity.
type ConnectOptionCarrierCreate struct {
	config
	mutation *ConnectOptionCarrierMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (cocc *ConnectOptionCarrierCreate) SetName(s string) *ConnectOptionCarrierCreate {
	cocc.mutation.SetName(s)
	return cocc
}

// SetID sets the "id" field.
func (cocc *ConnectOptionCarrierCreate) SetID(pu pulid.ID) *ConnectOptionCarrierCreate {
	cocc.mutation.SetID(pu)
	return cocc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cocc *ConnectOptionCarrierCreate) SetNillableID(pu *pulid.ID) *ConnectOptionCarrierCreate {
	if pu != nil {
		cocc.SetID(*pu)
	}
	return cocc
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (cocc *ConnectOptionCarrierCreate) AddTenantIDs(ids ...pulid.ID) *ConnectOptionCarrierCreate {
	cocc.mutation.AddTenantIDs(ids...)
	return cocc
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (cocc *ConnectOptionCarrierCreate) AddTenant(t ...*Tenant) *ConnectOptionCarrierCreate {
	ids := make([]pulid.ID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cocc.AddTenantIDs(ids...)
}

// Mutation returns the ConnectOptionCarrierMutation object of the builder.
func (cocc *ConnectOptionCarrierCreate) Mutation() *ConnectOptionCarrierMutation {
	return cocc.mutation
}

// Save creates the ConnectOptionCarrier in the database.
func (cocc *ConnectOptionCarrierCreate) Save(ctx context.Context) (*ConnectOptionCarrier, error) {
	if err := cocc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cocc.sqlSave, cocc.mutation, cocc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cocc *ConnectOptionCarrierCreate) SaveX(ctx context.Context) *ConnectOptionCarrier {
	v, err := cocc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocc *ConnectOptionCarrierCreate) Exec(ctx context.Context) error {
	_, err := cocc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocc *ConnectOptionCarrierCreate) ExecX(ctx context.Context) {
	if err := cocc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cocc *ConnectOptionCarrierCreate) defaults() error {
	if _, ok := cocc.mutation.ID(); !ok {
		if connectoptioncarrier.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized connectoptioncarrier.DefaultID (forgotten import ent/runtime?)")
		}
		v := connectoptioncarrier.DefaultID()
		cocc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cocc *ConnectOptionCarrierCreate) check() error {
	if _, ok := cocc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ConnectOptionCarrier.name"`)}
	}
	return nil
}

func (cocc *ConnectOptionCarrierCreate) sqlSave(ctx context.Context) (*ConnectOptionCarrier, error) {
	if err := cocc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cocc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cocc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cocc.mutation.id = &_node.ID
	cocc.mutation.done = true
	return _node, nil
}

func (cocc *ConnectOptionCarrierCreate) createSpec() (*ConnectOptionCarrier, *sqlgraph.CreateSpec) {
	var (
		_node = &ConnectOptionCarrier{config: cocc.config}
		_spec = sqlgraph.NewCreateSpec(connectoptioncarrier.Table, sqlgraph.NewFieldSpec(connectoptioncarrier.FieldID, field.TypeString))
	)
	_spec.OnConflict = cocc.conflict
	if id, ok := cocc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cocc.mutation.Name(); ok {
		_spec.SetField(connectoptioncarrier.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := cocc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   connectoptioncarrier.TenantTable,
			Columns: connectoptioncarrier.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectOptionCarrier.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectOptionCarrierUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cocc *ConnectOptionCarrierCreate) OnConflict(opts ...sql.ConflictOption) *ConnectOptionCarrierUpsertOne {
	cocc.conflict = opts
	return &ConnectOptionCarrierUpsertOne{
		create: cocc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectOptionCarrier.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cocc *ConnectOptionCarrierCreate) OnConflictColumns(columns ...string) *ConnectOptionCarrierUpsertOne {
	cocc.conflict = append(cocc.conflict, sql.ConflictColumns(columns...))
	return &ConnectOptionCarrierUpsertOne{
		create: cocc,
	}
}

type (
	// ConnectOptionCarrierUpsertOne is the builder for "upsert"-ing
	//  one ConnectOptionCarrier node.
	ConnectOptionCarrierUpsertOne struct {
		create *ConnectOptionCarrierCreate
	}

	// ConnectOptionCarrierUpsert is the "OnConflict" setter.
	ConnectOptionCarrierUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ConnectOptionCarrierUpsert) SetName(v string) *ConnectOptionCarrierUpsert {
	u.Set(connectoptioncarrier.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ConnectOptionCarrierUpsert) UpdateName() *ConnectOptionCarrierUpsert {
	u.SetExcluded(connectoptioncarrier.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ConnectOptionCarrier.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connectoptioncarrier.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectOptionCarrierUpsertOne) UpdateNewValues() *ConnectOptionCarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(connectoptioncarrier.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectOptionCarrier.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConnectOptionCarrierUpsertOne) Ignore() *ConnectOptionCarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectOptionCarrierUpsertOne) DoNothing() *ConnectOptionCarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectOptionCarrierCreate.OnConflict
// documentation for more info.
func (u *ConnectOptionCarrierUpsertOne) Update(set func(*ConnectOptionCarrierUpsert)) *ConnectOptionCarrierUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectOptionCarrierUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ConnectOptionCarrierUpsertOne) SetName(v string) *ConnectOptionCarrierUpsertOne {
	return u.Update(func(s *ConnectOptionCarrierUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ConnectOptionCarrierUpsertOne) UpdateName() *ConnectOptionCarrierUpsertOne {
	return u.Update(func(s *ConnectOptionCarrierUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *ConnectOptionCarrierUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectOptionCarrierCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectOptionCarrierUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConnectOptionCarrierUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConnectOptionCarrierUpsertOne.ID is not supported by MySQL driver. Use ConnectOptionCarrierUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConnectOptionCarrierUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConnectOptionCarrierCreateBulk is the builder for creating many ConnectOptionCarrier entities in bulk.
type ConnectOptionCarrierCreateBulk struct {
	config
	err      error
	builders []*ConnectOptionCarrierCreate
	conflict []sql.ConflictOption
}

// Save creates the ConnectOptionCarrier entities in the database.
func (coccb *ConnectOptionCarrierCreateBulk) Save(ctx context.Context) ([]*ConnectOptionCarrier, error) {
	if coccb.err != nil {
		return nil, coccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(coccb.builders))
	nodes := make([]*ConnectOptionCarrier, len(coccb.builders))
	mutators := make([]Mutator, len(coccb.builders))
	for i := range coccb.builders {
		func(i int, root context.Context) {
			builder := coccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConnectOptionCarrierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, coccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = coccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, coccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, coccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (coccb *ConnectOptionCarrierCreateBulk) SaveX(ctx context.Context) []*ConnectOptionCarrier {
	v, err := coccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coccb *ConnectOptionCarrierCreateBulk) Exec(ctx context.Context) error {
	_, err := coccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coccb *ConnectOptionCarrierCreateBulk) ExecX(ctx context.Context) {
	if err := coccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ConnectOptionCarrier.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConnectOptionCarrierUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (coccb *ConnectOptionCarrierCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConnectOptionCarrierUpsertBulk {
	coccb.conflict = opts
	return &ConnectOptionCarrierUpsertBulk{
		create: coccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ConnectOptionCarrier.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (coccb *ConnectOptionCarrierCreateBulk) OnConflictColumns(columns ...string) *ConnectOptionCarrierUpsertBulk {
	coccb.conflict = append(coccb.conflict, sql.ConflictColumns(columns...))
	return &ConnectOptionCarrierUpsertBulk{
		create: coccb,
	}
}

// ConnectOptionCarrierUpsertBulk is the builder for "upsert"-ing
// a bulk of ConnectOptionCarrier nodes.
type ConnectOptionCarrierUpsertBulk struct {
	create *ConnectOptionCarrierCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ConnectOptionCarrier.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(connectoptioncarrier.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConnectOptionCarrierUpsertBulk) UpdateNewValues() *ConnectOptionCarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(connectoptioncarrier.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ConnectOptionCarrier.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConnectOptionCarrierUpsertBulk) Ignore() *ConnectOptionCarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConnectOptionCarrierUpsertBulk) DoNothing() *ConnectOptionCarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConnectOptionCarrierCreateBulk.OnConflict
// documentation for more info.
func (u *ConnectOptionCarrierUpsertBulk) Update(set func(*ConnectOptionCarrierUpsert)) *ConnectOptionCarrierUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConnectOptionCarrierUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ConnectOptionCarrierUpsertBulk) SetName(v string) *ConnectOptionCarrierUpsertBulk {
	return u.Update(func(s *ConnectOptionCarrierUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ConnectOptionCarrierUpsertBulk) UpdateName() *ConnectOptionCarrierUpsertBulk {
	return u.Update(func(s *ConnectOptionCarrierUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *ConnectOptionCarrierUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConnectOptionCarrierCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConnectOptionCarrierCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConnectOptionCarrierUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
