// Code generated by ent, DO NOT EDIT.

package carriergls

import (
	"delivrio.io/go/ent/predicate"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldTenantID, v))
}

// ContactID applies equality check predicate on the "contact_id" field. It's identical to ContactIDEQ.
func ContactID(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldContactID, v))
}

// GLSUsername applies equality check predicate on the "gls_username" field. It's identical to GLSUsernameEQ.
func GLSUsername(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldGLSUsername, v))
}

// GLSPassword applies equality check predicate on the "gls_password" field. It's identical to GLSPasswordEQ.
func GLSPassword(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldGLSPassword, v))
}

// CustomerID applies equality check predicate on the "customer_id" field. It's identical to CustomerIDEQ.
func CustomerID(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldCustomerID, v))
}

// GLSCountryCode applies equality check predicate on the "gls_country_code" field. It's identical to GLSCountryCodeEQ.
func GLSCountryCode(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldGLSCountryCode, v))
}

// SyncShipmentCancellation applies equality check predicate on the "sync_shipment_cancellation" field. It's identical to SyncShipmentCancellationEQ.
func SyncShipmentCancellation(v bool) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldSyncShipmentCancellation, v))
}

// PrintErrorOnLabel applies equality check predicate on the "print_error_on_label" field. It's identical to PrintErrorOnLabelEQ.
func PrintErrorOnLabel(v bool) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldPrintErrorOnLabel, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v pulid.ID) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v pulid.ID) predicate.CarrierGLS {
	vc := string(v)
	return predicate.CarrierGLS(sql.FieldContains(FieldTenantID, vc))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v pulid.ID) predicate.CarrierGLS {
	vc := string(v)
	return predicate.CarrierGLS(sql.FieldHasPrefix(FieldTenantID, vc))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v pulid.ID) predicate.CarrierGLS {
	vc := string(v)
	return predicate.CarrierGLS(sql.FieldHasSuffix(FieldTenantID, vc))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v pulid.ID) predicate.CarrierGLS {
	vc := string(v)
	return predicate.CarrierGLS(sql.FieldEqualFold(FieldTenantID, vc))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v pulid.ID) predicate.CarrierGLS {
	vc := string(v)
	return predicate.CarrierGLS(sql.FieldContainsFold(FieldTenantID, vc))
}

// ContactIDEQ applies the EQ predicate on the "contact_id" field.
func ContactIDEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldContactID, v))
}

// ContactIDNEQ applies the NEQ predicate on the "contact_id" field.
func ContactIDNEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldContactID, v))
}

// ContactIDIn applies the In predicate on the "contact_id" field.
func ContactIDIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldContactID, vs...))
}

// ContactIDNotIn applies the NotIn predicate on the "contact_id" field.
func ContactIDNotIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldContactID, vs...))
}

// ContactIDGT applies the GT predicate on the "contact_id" field.
func ContactIDGT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldContactID, v))
}

// ContactIDGTE applies the GTE predicate on the "contact_id" field.
func ContactIDGTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldContactID, v))
}

// ContactIDLT applies the LT predicate on the "contact_id" field.
func ContactIDLT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldContactID, v))
}

// ContactIDLTE applies the LTE predicate on the "contact_id" field.
func ContactIDLTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldContactID, v))
}

// ContactIDContains applies the Contains predicate on the "contact_id" field.
func ContactIDContains(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContains(FieldContactID, v))
}

// ContactIDHasPrefix applies the HasPrefix predicate on the "contact_id" field.
func ContactIDHasPrefix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasPrefix(FieldContactID, v))
}

// ContactIDHasSuffix applies the HasSuffix predicate on the "contact_id" field.
func ContactIDHasSuffix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasSuffix(FieldContactID, v))
}

// ContactIDIsNil applies the IsNil predicate on the "contact_id" field.
func ContactIDIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldContactID))
}

// ContactIDNotNil applies the NotNil predicate on the "contact_id" field.
func ContactIDNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldContactID))
}

// ContactIDEqualFold applies the EqualFold predicate on the "contact_id" field.
func ContactIDEqualFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEqualFold(FieldContactID, v))
}

// ContactIDContainsFold applies the ContainsFold predicate on the "contact_id" field.
func ContactIDContainsFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContainsFold(FieldContactID, v))
}

// GLSUsernameEQ applies the EQ predicate on the "gls_username" field.
func GLSUsernameEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldGLSUsername, v))
}

// GLSUsernameNEQ applies the NEQ predicate on the "gls_username" field.
func GLSUsernameNEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldGLSUsername, v))
}

// GLSUsernameIn applies the In predicate on the "gls_username" field.
func GLSUsernameIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldGLSUsername, vs...))
}

// GLSUsernameNotIn applies the NotIn predicate on the "gls_username" field.
func GLSUsernameNotIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldGLSUsername, vs...))
}

// GLSUsernameGT applies the GT predicate on the "gls_username" field.
func GLSUsernameGT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldGLSUsername, v))
}

// GLSUsernameGTE applies the GTE predicate on the "gls_username" field.
func GLSUsernameGTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldGLSUsername, v))
}

// GLSUsernameLT applies the LT predicate on the "gls_username" field.
func GLSUsernameLT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldGLSUsername, v))
}

// GLSUsernameLTE applies the LTE predicate on the "gls_username" field.
func GLSUsernameLTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldGLSUsername, v))
}

// GLSUsernameContains applies the Contains predicate on the "gls_username" field.
func GLSUsernameContains(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContains(FieldGLSUsername, v))
}

// GLSUsernameHasPrefix applies the HasPrefix predicate on the "gls_username" field.
func GLSUsernameHasPrefix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasPrefix(FieldGLSUsername, v))
}

// GLSUsernameHasSuffix applies the HasSuffix predicate on the "gls_username" field.
func GLSUsernameHasSuffix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasSuffix(FieldGLSUsername, v))
}

// GLSUsernameIsNil applies the IsNil predicate on the "gls_username" field.
func GLSUsernameIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldGLSUsername))
}

// GLSUsernameNotNil applies the NotNil predicate on the "gls_username" field.
func GLSUsernameNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldGLSUsername))
}

// GLSUsernameEqualFold applies the EqualFold predicate on the "gls_username" field.
func GLSUsernameEqualFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEqualFold(FieldGLSUsername, v))
}

// GLSUsernameContainsFold applies the ContainsFold predicate on the "gls_username" field.
func GLSUsernameContainsFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContainsFold(FieldGLSUsername, v))
}

// GLSPasswordEQ applies the EQ predicate on the "gls_password" field.
func GLSPasswordEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldGLSPassword, v))
}

// GLSPasswordNEQ applies the NEQ predicate on the "gls_password" field.
func GLSPasswordNEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldGLSPassword, v))
}

// GLSPasswordIn applies the In predicate on the "gls_password" field.
func GLSPasswordIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldGLSPassword, vs...))
}

// GLSPasswordNotIn applies the NotIn predicate on the "gls_password" field.
func GLSPasswordNotIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldGLSPassword, vs...))
}

// GLSPasswordGT applies the GT predicate on the "gls_password" field.
func GLSPasswordGT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldGLSPassword, v))
}

// GLSPasswordGTE applies the GTE predicate on the "gls_password" field.
func GLSPasswordGTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldGLSPassword, v))
}

// GLSPasswordLT applies the LT predicate on the "gls_password" field.
func GLSPasswordLT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldGLSPassword, v))
}

// GLSPasswordLTE applies the LTE predicate on the "gls_password" field.
func GLSPasswordLTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldGLSPassword, v))
}

// GLSPasswordContains applies the Contains predicate on the "gls_password" field.
func GLSPasswordContains(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContains(FieldGLSPassword, v))
}

// GLSPasswordHasPrefix applies the HasPrefix predicate on the "gls_password" field.
func GLSPasswordHasPrefix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasPrefix(FieldGLSPassword, v))
}

// GLSPasswordHasSuffix applies the HasSuffix predicate on the "gls_password" field.
func GLSPasswordHasSuffix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasSuffix(FieldGLSPassword, v))
}

// GLSPasswordIsNil applies the IsNil predicate on the "gls_password" field.
func GLSPasswordIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldGLSPassword))
}

// GLSPasswordNotNil applies the NotNil predicate on the "gls_password" field.
func GLSPasswordNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldGLSPassword))
}

// GLSPasswordEqualFold applies the EqualFold predicate on the "gls_password" field.
func GLSPasswordEqualFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEqualFold(FieldGLSPassword, v))
}

// GLSPasswordContainsFold applies the ContainsFold predicate on the "gls_password" field.
func GLSPasswordContainsFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContainsFold(FieldGLSPassword, v))
}

// CustomerIDEQ applies the EQ predicate on the "customer_id" field.
func CustomerIDEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldCustomerID, v))
}

// CustomerIDNEQ applies the NEQ predicate on the "customer_id" field.
func CustomerIDNEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldCustomerID, v))
}

// CustomerIDIn applies the In predicate on the "customer_id" field.
func CustomerIDIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldCustomerID, vs...))
}

// CustomerIDNotIn applies the NotIn predicate on the "customer_id" field.
func CustomerIDNotIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldCustomerID, vs...))
}

// CustomerIDGT applies the GT predicate on the "customer_id" field.
func CustomerIDGT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldCustomerID, v))
}

// CustomerIDGTE applies the GTE predicate on the "customer_id" field.
func CustomerIDGTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldCustomerID, v))
}

// CustomerIDLT applies the LT predicate on the "customer_id" field.
func CustomerIDLT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldCustomerID, v))
}

// CustomerIDLTE applies the LTE predicate on the "customer_id" field.
func CustomerIDLTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldCustomerID, v))
}

// CustomerIDContains applies the Contains predicate on the "customer_id" field.
func CustomerIDContains(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContains(FieldCustomerID, v))
}

// CustomerIDHasPrefix applies the HasPrefix predicate on the "customer_id" field.
func CustomerIDHasPrefix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasPrefix(FieldCustomerID, v))
}

// CustomerIDHasSuffix applies the HasSuffix predicate on the "customer_id" field.
func CustomerIDHasSuffix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasSuffix(FieldCustomerID, v))
}

// CustomerIDIsNil applies the IsNil predicate on the "customer_id" field.
func CustomerIDIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldCustomerID))
}

// CustomerIDNotNil applies the NotNil predicate on the "customer_id" field.
func CustomerIDNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldCustomerID))
}

// CustomerIDEqualFold applies the EqualFold predicate on the "customer_id" field.
func CustomerIDEqualFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEqualFold(FieldCustomerID, v))
}

// CustomerIDContainsFold applies the ContainsFold predicate on the "customer_id" field.
func CustomerIDContainsFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContainsFold(FieldCustomerID, v))
}

// GLSCountryCodeEQ applies the EQ predicate on the "gls_country_code" field.
func GLSCountryCodeEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldGLSCountryCode, v))
}

// GLSCountryCodeNEQ applies the NEQ predicate on the "gls_country_code" field.
func GLSCountryCodeNEQ(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldGLSCountryCode, v))
}

// GLSCountryCodeIn applies the In predicate on the "gls_country_code" field.
func GLSCountryCodeIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIn(FieldGLSCountryCode, vs...))
}

// GLSCountryCodeNotIn applies the NotIn predicate on the "gls_country_code" field.
func GLSCountryCodeNotIn(vs ...string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotIn(FieldGLSCountryCode, vs...))
}

// GLSCountryCodeGT applies the GT predicate on the "gls_country_code" field.
func GLSCountryCodeGT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGT(FieldGLSCountryCode, v))
}

// GLSCountryCodeGTE applies the GTE predicate on the "gls_country_code" field.
func GLSCountryCodeGTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldGTE(FieldGLSCountryCode, v))
}

// GLSCountryCodeLT applies the LT predicate on the "gls_country_code" field.
func GLSCountryCodeLT(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLT(FieldGLSCountryCode, v))
}

// GLSCountryCodeLTE applies the LTE predicate on the "gls_country_code" field.
func GLSCountryCodeLTE(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldLTE(FieldGLSCountryCode, v))
}

// GLSCountryCodeContains applies the Contains predicate on the "gls_country_code" field.
func GLSCountryCodeContains(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContains(FieldGLSCountryCode, v))
}

// GLSCountryCodeHasPrefix applies the HasPrefix predicate on the "gls_country_code" field.
func GLSCountryCodeHasPrefix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasPrefix(FieldGLSCountryCode, v))
}

// GLSCountryCodeHasSuffix applies the HasSuffix predicate on the "gls_country_code" field.
func GLSCountryCodeHasSuffix(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldHasSuffix(FieldGLSCountryCode, v))
}

// GLSCountryCodeIsNil applies the IsNil predicate on the "gls_country_code" field.
func GLSCountryCodeIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldGLSCountryCode))
}

// GLSCountryCodeNotNil applies the NotNil predicate on the "gls_country_code" field.
func GLSCountryCodeNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldGLSCountryCode))
}

// GLSCountryCodeEqualFold applies the EqualFold predicate on the "gls_country_code" field.
func GLSCountryCodeEqualFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEqualFold(FieldGLSCountryCode, v))
}

// GLSCountryCodeContainsFold applies the ContainsFold predicate on the "gls_country_code" field.
func GLSCountryCodeContainsFold(v string) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldContainsFold(FieldGLSCountryCode, v))
}

// SyncShipmentCancellationEQ applies the EQ predicate on the "sync_shipment_cancellation" field.
func SyncShipmentCancellationEQ(v bool) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldSyncShipmentCancellation, v))
}

// SyncShipmentCancellationNEQ applies the NEQ predicate on the "sync_shipment_cancellation" field.
func SyncShipmentCancellationNEQ(v bool) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldSyncShipmentCancellation, v))
}

// SyncShipmentCancellationIsNil applies the IsNil predicate on the "sync_shipment_cancellation" field.
func SyncShipmentCancellationIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldSyncShipmentCancellation))
}

// SyncShipmentCancellationNotNil applies the NotNil predicate on the "sync_shipment_cancellation" field.
func SyncShipmentCancellationNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldSyncShipmentCancellation))
}

// PrintErrorOnLabelEQ applies the EQ predicate on the "print_error_on_label" field.
func PrintErrorOnLabelEQ(v bool) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldEQ(FieldPrintErrorOnLabel, v))
}

// PrintErrorOnLabelNEQ applies the NEQ predicate on the "print_error_on_label" field.
func PrintErrorOnLabelNEQ(v bool) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNEQ(FieldPrintErrorOnLabel, v))
}

// PrintErrorOnLabelIsNil applies the IsNil predicate on the "print_error_on_label" field.
func PrintErrorOnLabelIsNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldIsNull(FieldPrintErrorOnLabel))
}

// PrintErrorOnLabelNotNil applies the NotNil predicate on the "print_error_on_label" field.
func PrintErrorOnLabelNotNil() predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.FieldNotNull(FieldPrintErrorOnLabel))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.CarrierGLS {
	return predicate.CarrierGLS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.CarrierGLS {
	return predicate.CarrierGLS(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCarrier applies the HasEdge predicate on the "carrier" edge.
func HasCarrier() predicate.CarrierGLS {
	return predicate.CarrierGLS(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, CarrierTable, CarrierColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarrierWith applies the HasEdge predicate on the "carrier" edge with a given conditions (other predicates).
func HasCarrierWith(preds ...predicate.Carrier) predicate.CarrierGLS {
	return predicate.CarrierGLS(func(s *sql.Selector) {
		step := newCarrierStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CarrierGLS) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CarrierGLS) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CarrierGLS) predicate.CarrierGLS {
	return predicate.CarrierGLS(sql.NotPredicates(p))
}
