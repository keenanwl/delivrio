// Code generated by ent, DO NOT EDIT.

package carriergls

import (
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the carriergls type in the database.
	Label = "carrier_gls"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldContactID holds the string denoting the contact_id field in the database.
	FieldContactID = "contact_id"
	// FieldGLSUsername holds the string denoting the gls_username field in the database.
	FieldGLSUsername = "gls_username"
	// FieldGLSPassword holds the string denoting the gls_password field in the database.
	FieldGLSPassword = "gls_password"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldGLSCountryCode holds the string denoting the gls_country_code field in the database.
	FieldGLSCountryCode = "gls_country_code"
	// FieldSyncShipmentCancellation holds the string denoting the sync_shipment_cancellation field in the database.
	FieldSyncShipmentCancellation = "sync_shipment_cancellation"
	// FieldPrintErrorOnLabel holds the string denoting the print_error_on_label field in the database.
	FieldPrintErrorOnLabel = "print_error_on_label"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCarrier holds the string denoting the carrier edge name in mutations.
	EdgeCarrier = "carrier"
	// Table holds the table name of the carriergls in the database.
	Table = "carrier_gl_ss"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "carrier_gl_ss"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarrierTable is the table that holds the carrier relation/edge.
	CarrierTable = "carrier_gl_ss"
	// CarrierInverseTable is the table name for the Carrier entity.
	// It exists in this package in order to avoid circular dependency with the "carrier" package.
	CarrierInverseTable = "carriers"
	// CarrierColumn is the table column denoting the carrier relation/edge.
	CarrierColumn = "carrier_carrier_gls"
)

// Columns holds all SQL columns for carriergls fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldContactID,
	FieldGLSUsername,
	FieldGLSPassword,
	FieldCustomerID,
	FieldGLSCountryCode,
	FieldSyncShipmentCancellation,
	FieldPrintErrorOnLabel,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "carrier_gl_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"carrier_carrier_gls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "delivrio.io/go/ent/runtime"
var (
	Hooks  [2]ent.Hook
	Policy ent.Policy
	// DefaultSyncShipmentCancellation holds the default value on creation for the "sync_shipment_cancellation" field.
	DefaultSyncShipmentCancellation bool
	// DefaultPrintErrorOnLabel holds the default value on creation for the "print_error_on_label" field.
	DefaultPrintErrorOnLabel bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the CarrierGLS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByContactID orders the results by the contact_id field.
func ByContactID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactID, opts...).ToFunc()
}

// ByGLSUsername orders the results by the gls_username field.
func ByGLSUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGLSUsername, opts...).ToFunc()
}

// ByGLSPassword orders the results by the gls_password field.
func ByGLSPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGLSPassword, opts...).ToFunc()
}

// ByCustomerID orders the results by the customer_id field.
func ByCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerID, opts...).ToFunc()
}

// ByGLSCountryCode orders the results by the gls_country_code field.
func ByGLSCountryCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGLSCountryCode, opts...).ToFunc()
}

// BySyncShipmentCancellation orders the results by the sync_shipment_cancellation field.
func BySyncShipmentCancellation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSyncShipmentCancellation, opts...).ToFunc()
}

// ByPrintErrorOnLabel orders the results by the print_error_on_label field.
func ByPrintErrorOnLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrintErrorOnLabel, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarrierField orders the results by carrier field.
func ByCarrierField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarrierStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newCarrierStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarrierInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CarrierTable, CarrierColumn),
	)
}
