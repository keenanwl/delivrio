// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"delivrio.io/go/ent/connection"
	"delivrio.io/go/ent/connectionbrand"
	"delivrio.io/go/ent/connectionlookup"
	"delivrio.io/go/ent/connectionshopify"
	"delivrio.io/go/ent/currency"
	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/document"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/location"
	"delivrio.io/go/ent/notification"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/returnportal"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConnectionUpdate is the builder for updating Connection entities.
type ConnectionUpdate struct {
	config
	hooks    []Hook
	mutation *ConnectionMutation
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cu *ConnectionUpdate) Where(ps ...predicate.Connection) *ConnectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTenantID sets the "tenant_id" field.
func (cu *ConnectionUpdate) SetTenantID(pu pulid.ID) *ConnectionUpdate {
	cu.mutation.SetTenantID(pu)
	return cu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableTenantID(pu *pulid.ID) *ConnectionUpdate {
	if pu != nil {
		cu.SetTenantID(*pu)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ConnectionUpdate) SetName(s string) *ConnectionUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableName(s *string) *ConnectionUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetSyncOrders sets the "sync_orders" field.
func (cu *ConnectionUpdate) SetSyncOrders(b bool) *ConnectionUpdate {
	cu.mutation.SetSyncOrders(b)
	return cu
}

// SetNillableSyncOrders sets the "sync_orders" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableSyncOrders(b *bool) *ConnectionUpdate {
	if b != nil {
		cu.SetSyncOrders(*b)
	}
	return cu
}

// SetSyncProducts sets the "sync_products" field.
func (cu *ConnectionUpdate) SetSyncProducts(b bool) *ConnectionUpdate {
	cu.mutation.SetSyncProducts(b)
	return cu
}

// SetNillableSyncProducts sets the "sync_products" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableSyncProducts(b *bool) *ConnectionUpdate {
	if b != nil {
		cu.SetSyncProducts(*b)
	}
	return cu
}

// SetFulfillAutomatically sets the "fulfill_automatically" field.
func (cu *ConnectionUpdate) SetFulfillAutomatically(b bool) *ConnectionUpdate {
	cu.mutation.SetFulfillAutomatically(b)
	return cu
}

// SetNillableFulfillAutomatically sets the "fulfill_automatically" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableFulfillAutomatically(b *bool) *ConnectionUpdate {
	if b != nil {
		cu.SetFulfillAutomatically(*b)
	}
	return cu
}

// SetDispatchAutomatically sets the "dispatch_automatically" field.
func (cu *ConnectionUpdate) SetDispatchAutomatically(b bool) *ConnectionUpdate {
	cu.mutation.SetDispatchAutomatically(b)
	return cu
}

// SetNillableDispatchAutomatically sets the "dispatch_automatically" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableDispatchAutomatically(b *bool) *ConnectionUpdate {
	if b != nil {
		cu.SetDispatchAutomatically(*b)
	}
	return cu
}

// SetConvertCurrency sets the "convert_currency" field.
func (cu *ConnectionUpdate) SetConvertCurrency(b bool) *ConnectionUpdate {
	cu.mutation.SetConvertCurrency(b)
	return cu
}

// SetNillableConvertCurrency sets the "convert_currency" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableConvertCurrency(b *bool) *ConnectionUpdate {
	if b != nil {
		cu.SetConvertCurrency(*b)
	}
	return cu
}

// SetAutoPrintParcelSlip sets the "auto_print_parcel_slip" field.
func (cu *ConnectionUpdate) SetAutoPrintParcelSlip(b bool) *ConnectionUpdate {
	cu.mutation.SetAutoPrintParcelSlip(b)
	return cu
}

// SetNillableAutoPrintParcelSlip sets the "auto_print_parcel_slip" field if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableAutoPrintParcelSlip(b *bool) *ConnectionUpdate {
	if b != nil {
		cu.SetAutoPrintParcelSlip(*b)
	}
	return cu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cu *ConnectionUpdate) SetTenant(t *Tenant) *ConnectionUpdate {
	return cu.SetTenantID(t.ID)
}

// SetConnectionBrandID sets the "connection_brand" edge to the ConnectionBrand entity by ID.
func (cu *ConnectionUpdate) SetConnectionBrandID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetConnectionBrandID(id)
	return cu
}

// SetConnectionBrand sets the "connection_brand" edge to the ConnectionBrand entity.
func (cu *ConnectionUpdate) SetConnectionBrand(c *ConnectionBrand) *ConnectionUpdate {
	return cu.SetConnectionBrandID(c.ID)
}

// SetConnectionShopifyID sets the "connection_shopify" edge to the ConnectionShopify entity by ID.
func (cu *ConnectionUpdate) SetConnectionShopifyID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetConnectionShopifyID(id)
	return cu
}

// SetNillableConnectionShopifyID sets the "connection_shopify" edge to the ConnectionShopify entity by ID if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableConnectionShopifyID(id *pulid.ID) *ConnectionUpdate {
	if id != nil {
		cu = cu.SetConnectionShopifyID(*id)
	}
	return cu
}

// SetConnectionShopify sets the "connection_shopify" edge to the ConnectionShopify entity.
func (cu *ConnectionUpdate) SetConnectionShopify(c *ConnectionShopify) *ConnectionUpdate {
	return cu.SetConnectionShopifyID(c.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cu *ConnectionUpdate) AddOrderIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.AddOrderIDs(ids...)
	return cu
}

// AddOrders adds the "orders" edges to the Order entity.
func (cu *ConnectionUpdate) AddOrders(o ...*Order) *ConnectionUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOrderIDs(ids...)
}

// SetSenderLocationID sets the "sender_location" edge to the Location entity by ID.
func (cu *ConnectionUpdate) SetSenderLocationID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetSenderLocationID(id)
	return cu
}

// SetSenderLocation sets the "sender_location" edge to the Location entity.
func (cu *ConnectionUpdate) SetSenderLocation(l *Location) *ConnectionUpdate {
	return cu.SetSenderLocationID(l.ID)
}

// SetPickupLocationID sets the "pickup_location" edge to the Location entity by ID.
func (cu *ConnectionUpdate) SetPickupLocationID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetPickupLocationID(id)
	return cu
}

// SetPickupLocation sets the "pickup_location" edge to the Location entity.
func (cu *ConnectionUpdate) SetPickupLocation(l *Location) *ConnectionUpdate {
	return cu.SetPickupLocationID(l.ID)
}

// SetReturnLocationID sets the "return_location" edge to the Location entity by ID.
func (cu *ConnectionUpdate) SetReturnLocationID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetReturnLocationID(id)
	return cu
}

// SetReturnLocation sets the "return_location" edge to the Location entity.
func (cu *ConnectionUpdate) SetReturnLocation(l *Location) *ConnectionUpdate {
	return cu.SetReturnLocationID(l.ID)
}

// SetSellerLocationID sets the "seller_location" edge to the Location entity by ID.
func (cu *ConnectionUpdate) SetSellerLocationID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetSellerLocationID(id)
	return cu
}

// SetSellerLocation sets the "seller_location" edge to the Location entity.
func (cu *ConnectionUpdate) SetSellerLocation(l *Location) *ConnectionUpdate {
	return cu.SetSellerLocationID(l.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (cu *ConnectionUpdate) AddDeliveryOptionIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.AddDeliveryOptionIDs(ids...)
	return cu
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (cu *ConnectionUpdate) AddDeliveryOption(d ...*DeliveryOption) *ConnectionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDeliveryOptionIDs(ids...)
}

// SetDefaultDeliveryOptionID sets the "default_delivery_option" edge to the DeliveryOption entity by ID.
func (cu *ConnectionUpdate) SetDefaultDeliveryOptionID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetDefaultDeliveryOptionID(id)
	return cu
}

// SetNillableDefaultDeliveryOptionID sets the "default_delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableDefaultDeliveryOptionID(id *pulid.ID) *ConnectionUpdate {
	if id != nil {
		cu = cu.SetDefaultDeliveryOptionID(*id)
	}
	return cu
}

// SetDefaultDeliveryOption sets the "default_delivery_option" edge to the DeliveryOption entity.
func (cu *ConnectionUpdate) SetDefaultDeliveryOption(d *DeliveryOption) *ConnectionUpdate {
	return cu.SetDefaultDeliveryOptionID(d.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (cu *ConnectionUpdate) SetReturnPortalID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetReturnPortalID(id)
	return cu
}

// SetNillableReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID if the given value is not nil.
func (cu *ConnectionUpdate) SetNillableReturnPortalID(id *pulid.ID) *ConnectionUpdate {
	if id != nil {
		cu = cu.SetReturnPortalID(*id)
	}
	return cu
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (cu *ConnectionUpdate) SetReturnPortal(r *ReturnPortal) *ConnectionUpdate {
	return cu.SetReturnPortalID(r.ID)
}

// AddHypothesisTestIDs adds the "hypothesis_test" edge to the HypothesisTest entity by IDs.
func (cu *ConnectionUpdate) AddHypothesisTestIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.AddHypothesisTestIDs(ids...)
	return cu
}

// AddHypothesisTest adds the "hypothesis_test" edges to the HypothesisTest entity.
func (cu *ConnectionUpdate) AddHypothesisTest(h ...*HypothesisTest) *ConnectionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cu.AddHypothesisTestIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cu *ConnectionUpdate) AddNotificationIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.AddNotificationIDs(ids...)
	return cu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cu *ConnectionUpdate) AddNotifications(n ...*Notification) *ConnectionUpdate {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNotificationIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (cu *ConnectionUpdate) SetCurrencyID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetCurrencyID(id)
	return cu
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (cu *ConnectionUpdate) SetCurrency(c *Currency) *ConnectionUpdate {
	return cu.SetCurrencyID(c.ID)
}

// SetPackingSlipTemplateID sets the "packing_slip_template" edge to the Document entity by ID.
func (cu *ConnectionUpdate) SetPackingSlipTemplateID(id pulid.ID) *ConnectionUpdate {
	cu.mutation.SetPackingSlipTemplateID(id)
	return cu
}

// SetNillablePackingSlipTemplateID sets the "packing_slip_template" edge to the Document entity by ID if the given value is not nil.
func (cu *ConnectionUpdate) SetNillablePackingSlipTemplateID(id *pulid.ID) *ConnectionUpdate {
	if id != nil {
		cu = cu.SetPackingSlipTemplateID(*id)
	}
	return cu
}

// SetPackingSlipTemplate sets the "packing_slip_template" edge to the Document entity.
func (cu *ConnectionUpdate) SetPackingSlipTemplate(d *Document) *ConnectionUpdate {
	return cu.SetPackingSlipTemplateID(d.ID)
}

// AddConnectionLookupIDs adds the "connection_lookup" edge to the ConnectionLookup entity by IDs.
func (cu *ConnectionUpdate) AddConnectionLookupIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.AddConnectionLookupIDs(ids...)
	return cu
}

// AddConnectionLookup adds the "connection_lookup" edges to the ConnectionLookup entity.
func (cu *ConnectionUpdate) AddConnectionLookup(c ...*ConnectionLookup) *ConnectionUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConnectionLookupIDs(ids...)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cu *ConnectionUpdate) Mutation() *ConnectionMutation {
	return cu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cu *ConnectionUpdate) ClearTenant() *ConnectionUpdate {
	cu.mutation.ClearTenant()
	return cu
}

// ClearConnectionBrand clears the "connection_brand" edge to the ConnectionBrand entity.
func (cu *ConnectionUpdate) ClearConnectionBrand() *ConnectionUpdate {
	cu.mutation.ClearConnectionBrand()
	return cu
}

// ClearConnectionShopify clears the "connection_shopify" edge to the ConnectionShopify entity.
func (cu *ConnectionUpdate) ClearConnectionShopify() *ConnectionUpdate {
	cu.mutation.ClearConnectionShopify()
	return cu
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cu *ConnectionUpdate) ClearOrders() *ConnectionUpdate {
	cu.mutation.ClearOrders()
	return cu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cu *ConnectionUpdate) RemoveOrderIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.RemoveOrderIDs(ids...)
	return cu
}

// RemoveOrders removes "orders" edges to Order entities.
func (cu *ConnectionUpdate) RemoveOrders(o ...*Order) *ConnectionUpdate {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOrderIDs(ids...)
}

// ClearSenderLocation clears the "sender_location" edge to the Location entity.
func (cu *ConnectionUpdate) ClearSenderLocation() *ConnectionUpdate {
	cu.mutation.ClearSenderLocation()
	return cu
}

// ClearPickupLocation clears the "pickup_location" edge to the Location entity.
func (cu *ConnectionUpdate) ClearPickupLocation() *ConnectionUpdate {
	cu.mutation.ClearPickupLocation()
	return cu
}

// ClearReturnLocation clears the "return_location" edge to the Location entity.
func (cu *ConnectionUpdate) ClearReturnLocation() *ConnectionUpdate {
	cu.mutation.ClearReturnLocation()
	return cu
}

// ClearSellerLocation clears the "seller_location" edge to the Location entity.
func (cu *ConnectionUpdate) ClearSellerLocation() *ConnectionUpdate {
	cu.mutation.ClearSellerLocation()
	return cu
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (cu *ConnectionUpdate) ClearDeliveryOption() *ConnectionUpdate {
	cu.mutation.ClearDeliveryOption()
	return cu
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (cu *ConnectionUpdate) RemoveDeliveryOptionIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.RemoveDeliveryOptionIDs(ids...)
	return cu
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (cu *ConnectionUpdate) RemoveDeliveryOption(d ...*DeliveryOption) *ConnectionUpdate {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDeliveryOptionIDs(ids...)
}

// ClearDefaultDeliveryOption clears the "default_delivery_option" edge to the DeliveryOption entity.
func (cu *ConnectionUpdate) ClearDefaultDeliveryOption() *ConnectionUpdate {
	cu.mutation.ClearDefaultDeliveryOption()
	return cu
}

// ClearReturnPortal clears the "return_portal" edge to the ReturnPortal entity.
func (cu *ConnectionUpdate) ClearReturnPortal() *ConnectionUpdate {
	cu.mutation.ClearReturnPortal()
	return cu
}

// ClearHypothesisTest clears all "hypothesis_test" edges to the HypothesisTest entity.
func (cu *ConnectionUpdate) ClearHypothesisTest() *ConnectionUpdate {
	cu.mutation.ClearHypothesisTest()
	return cu
}

// RemoveHypothesisTestIDs removes the "hypothesis_test" edge to HypothesisTest entities by IDs.
func (cu *ConnectionUpdate) RemoveHypothesisTestIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.RemoveHypothesisTestIDs(ids...)
	return cu
}

// RemoveHypothesisTest removes "hypothesis_test" edges to HypothesisTest entities.
func (cu *ConnectionUpdate) RemoveHypothesisTest(h ...*HypothesisTest) *ConnectionUpdate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cu.RemoveHypothesisTestIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cu *ConnectionUpdate) ClearNotifications() *ConnectionUpdate {
	cu.mutation.ClearNotifications()
	return cu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cu *ConnectionUpdate) RemoveNotificationIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.RemoveNotificationIDs(ids...)
	return cu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cu *ConnectionUpdate) RemoveNotifications(n ...*Notification) *ConnectionUpdate {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNotificationIDs(ids...)
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (cu *ConnectionUpdate) ClearCurrency() *ConnectionUpdate {
	cu.mutation.ClearCurrency()
	return cu
}

// ClearPackingSlipTemplate clears the "packing_slip_template" edge to the Document entity.
func (cu *ConnectionUpdate) ClearPackingSlipTemplate() *ConnectionUpdate {
	cu.mutation.ClearPackingSlipTemplate()
	return cu
}

// ClearConnectionLookup clears all "connection_lookup" edges to the ConnectionLookup entity.
func (cu *ConnectionUpdate) ClearConnectionLookup() *ConnectionUpdate {
	cu.mutation.ClearConnectionLookup()
	return cu
}

// RemoveConnectionLookupIDs removes the "connection_lookup" edge to ConnectionLookup entities by IDs.
func (cu *ConnectionUpdate) RemoveConnectionLookupIDs(ids ...pulid.ID) *ConnectionUpdate {
	cu.mutation.RemoveConnectionLookupIDs(ids...)
	return cu
}

// RemoveConnectionLookup removes "connection_lookup" edges to ConnectionLookup entities.
func (cu *ConnectionUpdate) RemoveConnectionLookup(c ...*ConnectionLookup) *ConnectionUpdate {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConnectionLookupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConnectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConnectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConnectionUpdate) check() error {
	if cu.mutation.TenantCleared() && len(cu.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.tenant"`)
	}
	if cu.mutation.ConnectionBrandCleared() && len(cu.mutation.ConnectionBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.connection_brand"`)
	}
	if cu.mutation.SenderLocationCleared() && len(cu.mutation.SenderLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.sender_location"`)
	}
	if cu.mutation.PickupLocationCleared() && len(cu.mutation.PickupLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.pickup_location"`)
	}
	if cu.mutation.ReturnLocationCleared() && len(cu.mutation.ReturnLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.return_location"`)
	}
	if cu.mutation.SellerLocationCleared() && len(cu.mutation.SellerLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.seller_location"`)
	}
	if cu.mutation.CurrencyCleared() && len(cu.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.currency"`)
	}
	return nil
}

func (cu *ConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.SyncOrders(); ok {
		_spec.SetField(connection.FieldSyncOrders, field.TypeBool, value)
	}
	if value, ok := cu.mutation.SyncProducts(); ok {
		_spec.SetField(connection.FieldSyncProducts, field.TypeBool, value)
	}
	if value, ok := cu.mutation.FulfillAutomatically(); ok {
		_spec.SetField(connection.FieldFulfillAutomatically, field.TypeBool, value)
	}
	if value, ok := cu.mutation.DispatchAutomatically(); ok {
		_spec.SetField(connection.FieldDispatchAutomatically, field.TypeBool, value)
	}
	if value, ok := cu.mutation.ConvertCurrency(); ok {
		_spec.SetField(connection.FieldConvertCurrency, field.TypeBool, value)
	}
	if value, ok := cu.mutation.AutoPrintParcelSlip(); ok {
		_spec.SetField(connection.FieldAutoPrintParcelSlip, field.TypeBool, value)
	}
	if cu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.TenantTable,
			Columns: []string{connection.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.TenantTable,
			Columns: []string{connection.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConnectionBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ConnectionBrandTable,
			Columns: []string{connection.ConnectionBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConnectionBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ConnectionBrandTable,
			Columns: []string{connection.ConnectionBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConnectionShopifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.ConnectionShopifyTable,
			Columns: []string{connection.ConnectionShopifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConnectionShopifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.ConnectionShopifyTable,
			Columns: []string{connection.ConnectionShopifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SenderLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SenderLocationTable,
			Columns: []string{connection.SenderLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SenderLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SenderLocationTable,
			Columns: []string{connection.SenderLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PickupLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PickupLocationTable,
			Columns: []string{connection.PickupLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PickupLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PickupLocationTable,
			Columns: []string{connection.PickupLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ReturnLocationTable,
			Columns: []string{connection.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ReturnLocationTable,
			Columns: []string{connection.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SellerLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SellerLocationTable,
			Columns: []string{connection.SellerLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SellerLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SellerLocationTable,
			Columns: []string{connection.SellerLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !cu.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DefaultDeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.DefaultDeliveryOptionTable,
			Columns: []string{connection.DefaultDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DefaultDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.DefaultDeliveryOptionTable,
			Columns: []string{connection.DefaultDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connection.ReturnPortalTable,
			Columns: []string{connection.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connection.ReturnPortalTable,
			Columns: []string{connection.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.HypothesisTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedHypothesisTestIDs(); len(nodes) > 0 && !cu.mutation.HypothesisTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.HypothesisTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.CurrencyTable,
			Columns: []string{connection.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.CurrencyTable,
			Columns: []string{connection.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PackingSlipTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PackingSlipTemplateTable,
			Columns: []string{connection.PackingSlipTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PackingSlipTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PackingSlipTemplateTable,
			Columns: []string{connection.PackingSlipTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ConnectionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConnectionLookupIDs(); len(nodes) > 0 && !cu.mutation.ConnectionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConnectionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConnectionUpdateOne is the builder for updating a single Connection entity.
type ConnectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConnectionMutation
}

// SetTenantID sets the "tenant_id" field.
func (cuo *ConnectionUpdateOne) SetTenantID(pu pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetTenantID(pu)
	return cuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableTenantID(pu *pulid.ID) *ConnectionUpdateOne {
	if pu != nil {
		cuo.SetTenantID(*pu)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ConnectionUpdateOne) SetName(s string) *ConnectionUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableName(s *string) *ConnectionUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetSyncOrders sets the "sync_orders" field.
func (cuo *ConnectionUpdateOne) SetSyncOrders(b bool) *ConnectionUpdateOne {
	cuo.mutation.SetSyncOrders(b)
	return cuo
}

// SetNillableSyncOrders sets the "sync_orders" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableSyncOrders(b *bool) *ConnectionUpdateOne {
	if b != nil {
		cuo.SetSyncOrders(*b)
	}
	return cuo
}

// SetSyncProducts sets the "sync_products" field.
func (cuo *ConnectionUpdateOne) SetSyncProducts(b bool) *ConnectionUpdateOne {
	cuo.mutation.SetSyncProducts(b)
	return cuo
}

// SetNillableSyncProducts sets the "sync_products" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableSyncProducts(b *bool) *ConnectionUpdateOne {
	if b != nil {
		cuo.SetSyncProducts(*b)
	}
	return cuo
}

// SetFulfillAutomatically sets the "fulfill_automatically" field.
func (cuo *ConnectionUpdateOne) SetFulfillAutomatically(b bool) *ConnectionUpdateOne {
	cuo.mutation.SetFulfillAutomatically(b)
	return cuo
}

// SetNillableFulfillAutomatically sets the "fulfill_automatically" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableFulfillAutomatically(b *bool) *ConnectionUpdateOne {
	if b != nil {
		cuo.SetFulfillAutomatically(*b)
	}
	return cuo
}

// SetDispatchAutomatically sets the "dispatch_automatically" field.
func (cuo *ConnectionUpdateOne) SetDispatchAutomatically(b bool) *ConnectionUpdateOne {
	cuo.mutation.SetDispatchAutomatically(b)
	return cuo
}

// SetNillableDispatchAutomatically sets the "dispatch_automatically" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableDispatchAutomatically(b *bool) *ConnectionUpdateOne {
	if b != nil {
		cuo.SetDispatchAutomatically(*b)
	}
	return cuo
}

// SetConvertCurrency sets the "convert_currency" field.
func (cuo *ConnectionUpdateOne) SetConvertCurrency(b bool) *ConnectionUpdateOne {
	cuo.mutation.SetConvertCurrency(b)
	return cuo
}

// SetNillableConvertCurrency sets the "convert_currency" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableConvertCurrency(b *bool) *ConnectionUpdateOne {
	if b != nil {
		cuo.SetConvertCurrency(*b)
	}
	return cuo
}

// SetAutoPrintParcelSlip sets the "auto_print_parcel_slip" field.
func (cuo *ConnectionUpdateOne) SetAutoPrintParcelSlip(b bool) *ConnectionUpdateOne {
	cuo.mutation.SetAutoPrintParcelSlip(b)
	return cuo
}

// SetNillableAutoPrintParcelSlip sets the "auto_print_parcel_slip" field if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableAutoPrintParcelSlip(b *bool) *ConnectionUpdateOne {
	if b != nil {
		cuo.SetAutoPrintParcelSlip(*b)
	}
	return cuo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (cuo *ConnectionUpdateOne) SetTenant(t *Tenant) *ConnectionUpdateOne {
	return cuo.SetTenantID(t.ID)
}

// SetConnectionBrandID sets the "connection_brand" edge to the ConnectionBrand entity by ID.
func (cuo *ConnectionUpdateOne) SetConnectionBrandID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetConnectionBrandID(id)
	return cuo
}

// SetConnectionBrand sets the "connection_brand" edge to the ConnectionBrand entity.
func (cuo *ConnectionUpdateOne) SetConnectionBrand(c *ConnectionBrand) *ConnectionUpdateOne {
	return cuo.SetConnectionBrandID(c.ID)
}

// SetConnectionShopifyID sets the "connection_shopify" edge to the ConnectionShopify entity by ID.
func (cuo *ConnectionUpdateOne) SetConnectionShopifyID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetConnectionShopifyID(id)
	return cuo
}

// SetNillableConnectionShopifyID sets the "connection_shopify" edge to the ConnectionShopify entity by ID if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableConnectionShopifyID(id *pulid.ID) *ConnectionUpdateOne {
	if id != nil {
		cuo = cuo.SetConnectionShopifyID(*id)
	}
	return cuo
}

// SetConnectionShopify sets the "connection_shopify" edge to the ConnectionShopify entity.
func (cuo *ConnectionUpdateOne) SetConnectionShopify(c *ConnectionShopify) *ConnectionUpdateOne {
	return cuo.SetConnectionShopifyID(c.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (cuo *ConnectionUpdateOne) AddOrderIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.AddOrderIDs(ids...)
	return cuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (cuo *ConnectionUpdateOne) AddOrders(o ...*Order) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOrderIDs(ids...)
}

// SetSenderLocationID sets the "sender_location" edge to the Location entity by ID.
func (cuo *ConnectionUpdateOne) SetSenderLocationID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetSenderLocationID(id)
	return cuo
}

// SetSenderLocation sets the "sender_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) SetSenderLocation(l *Location) *ConnectionUpdateOne {
	return cuo.SetSenderLocationID(l.ID)
}

// SetPickupLocationID sets the "pickup_location" edge to the Location entity by ID.
func (cuo *ConnectionUpdateOne) SetPickupLocationID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetPickupLocationID(id)
	return cuo
}

// SetPickupLocation sets the "pickup_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) SetPickupLocation(l *Location) *ConnectionUpdateOne {
	return cuo.SetPickupLocationID(l.ID)
}

// SetReturnLocationID sets the "return_location" edge to the Location entity by ID.
func (cuo *ConnectionUpdateOne) SetReturnLocationID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetReturnLocationID(id)
	return cuo
}

// SetReturnLocation sets the "return_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) SetReturnLocation(l *Location) *ConnectionUpdateOne {
	return cuo.SetReturnLocationID(l.ID)
}

// SetSellerLocationID sets the "seller_location" edge to the Location entity by ID.
func (cuo *ConnectionUpdateOne) SetSellerLocationID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetSellerLocationID(id)
	return cuo
}

// SetSellerLocation sets the "seller_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) SetSellerLocation(l *Location) *ConnectionUpdateOne {
	return cuo.SetSellerLocationID(l.ID)
}

// AddDeliveryOptionIDs adds the "delivery_option" edge to the DeliveryOption entity by IDs.
func (cuo *ConnectionUpdateOne) AddDeliveryOptionIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.AddDeliveryOptionIDs(ids...)
	return cuo
}

// AddDeliveryOption adds the "delivery_option" edges to the DeliveryOption entity.
func (cuo *ConnectionUpdateOne) AddDeliveryOption(d ...*DeliveryOption) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDeliveryOptionIDs(ids...)
}

// SetDefaultDeliveryOptionID sets the "default_delivery_option" edge to the DeliveryOption entity by ID.
func (cuo *ConnectionUpdateOne) SetDefaultDeliveryOptionID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetDefaultDeliveryOptionID(id)
	return cuo
}

// SetNillableDefaultDeliveryOptionID sets the "default_delivery_option" edge to the DeliveryOption entity by ID if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableDefaultDeliveryOptionID(id *pulid.ID) *ConnectionUpdateOne {
	if id != nil {
		cuo = cuo.SetDefaultDeliveryOptionID(*id)
	}
	return cuo
}

// SetDefaultDeliveryOption sets the "default_delivery_option" edge to the DeliveryOption entity.
func (cuo *ConnectionUpdateOne) SetDefaultDeliveryOption(d *DeliveryOption) *ConnectionUpdateOne {
	return cuo.SetDefaultDeliveryOptionID(d.ID)
}

// SetReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID.
func (cuo *ConnectionUpdateOne) SetReturnPortalID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetReturnPortalID(id)
	return cuo
}

// SetNillableReturnPortalID sets the "return_portal" edge to the ReturnPortal entity by ID if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillableReturnPortalID(id *pulid.ID) *ConnectionUpdateOne {
	if id != nil {
		cuo = cuo.SetReturnPortalID(*id)
	}
	return cuo
}

// SetReturnPortal sets the "return_portal" edge to the ReturnPortal entity.
func (cuo *ConnectionUpdateOne) SetReturnPortal(r *ReturnPortal) *ConnectionUpdateOne {
	return cuo.SetReturnPortalID(r.ID)
}

// AddHypothesisTestIDs adds the "hypothesis_test" edge to the HypothesisTest entity by IDs.
func (cuo *ConnectionUpdateOne) AddHypothesisTestIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.AddHypothesisTestIDs(ids...)
	return cuo
}

// AddHypothesisTest adds the "hypothesis_test" edges to the HypothesisTest entity.
func (cuo *ConnectionUpdateOne) AddHypothesisTest(h ...*HypothesisTest) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cuo.AddHypothesisTestIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (cuo *ConnectionUpdateOne) AddNotificationIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.AddNotificationIDs(ids...)
	return cuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (cuo *ConnectionUpdateOne) AddNotifications(n ...*Notification) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNotificationIDs(ids...)
}

// SetCurrencyID sets the "currency" edge to the Currency entity by ID.
func (cuo *ConnectionUpdateOne) SetCurrencyID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetCurrencyID(id)
	return cuo
}

// SetCurrency sets the "currency" edge to the Currency entity.
func (cuo *ConnectionUpdateOne) SetCurrency(c *Currency) *ConnectionUpdateOne {
	return cuo.SetCurrencyID(c.ID)
}

// SetPackingSlipTemplateID sets the "packing_slip_template" edge to the Document entity by ID.
func (cuo *ConnectionUpdateOne) SetPackingSlipTemplateID(id pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.SetPackingSlipTemplateID(id)
	return cuo
}

// SetNillablePackingSlipTemplateID sets the "packing_slip_template" edge to the Document entity by ID if the given value is not nil.
func (cuo *ConnectionUpdateOne) SetNillablePackingSlipTemplateID(id *pulid.ID) *ConnectionUpdateOne {
	if id != nil {
		cuo = cuo.SetPackingSlipTemplateID(*id)
	}
	return cuo
}

// SetPackingSlipTemplate sets the "packing_slip_template" edge to the Document entity.
func (cuo *ConnectionUpdateOne) SetPackingSlipTemplate(d *Document) *ConnectionUpdateOne {
	return cuo.SetPackingSlipTemplateID(d.ID)
}

// AddConnectionLookupIDs adds the "connection_lookup" edge to the ConnectionLookup entity by IDs.
func (cuo *ConnectionUpdateOne) AddConnectionLookupIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.AddConnectionLookupIDs(ids...)
	return cuo
}

// AddConnectionLookup adds the "connection_lookup" edges to the ConnectionLookup entity.
func (cuo *ConnectionUpdateOne) AddConnectionLookup(c ...*ConnectionLookup) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConnectionLookupIDs(ids...)
}

// Mutation returns the ConnectionMutation object of the builder.
func (cuo *ConnectionUpdateOne) Mutation() *ConnectionMutation {
	return cuo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (cuo *ConnectionUpdateOne) ClearTenant() *ConnectionUpdateOne {
	cuo.mutation.ClearTenant()
	return cuo
}

// ClearConnectionBrand clears the "connection_brand" edge to the ConnectionBrand entity.
func (cuo *ConnectionUpdateOne) ClearConnectionBrand() *ConnectionUpdateOne {
	cuo.mutation.ClearConnectionBrand()
	return cuo
}

// ClearConnectionShopify clears the "connection_shopify" edge to the ConnectionShopify entity.
func (cuo *ConnectionUpdateOne) ClearConnectionShopify() *ConnectionUpdateOne {
	cuo.mutation.ClearConnectionShopify()
	return cuo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (cuo *ConnectionUpdateOne) ClearOrders() *ConnectionUpdateOne {
	cuo.mutation.ClearOrders()
	return cuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveOrderIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.RemoveOrderIDs(ids...)
	return cuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (cuo *ConnectionUpdateOne) RemoveOrders(o ...*Order) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOrderIDs(ids...)
}

// ClearSenderLocation clears the "sender_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) ClearSenderLocation() *ConnectionUpdateOne {
	cuo.mutation.ClearSenderLocation()
	return cuo
}

// ClearPickupLocation clears the "pickup_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) ClearPickupLocation() *ConnectionUpdateOne {
	cuo.mutation.ClearPickupLocation()
	return cuo
}

// ClearReturnLocation clears the "return_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) ClearReturnLocation() *ConnectionUpdateOne {
	cuo.mutation.ClearReturnLocation()
	return cuo
}

// ClearSellerLocation clears the "seller_location" edge to the Location entity.
func (cuo *ConnectionUpdateOne) ClearSellerLocation() *ConnectionUpdateOne {
	cuo.mutation.ClearSellerLocation()
	return cuo
}

// ClearDeliveryOption clears all "delivery_option" edges to the DeliveryOption entity.
func (cuo *ConnectionUpdateOne) ClearDeliveryOption() *ConnectionUpdateOne {
	cuo.mutation.ClearDeliveryOption()
	return cuo
}

// RemoveDeliveryOptionIDs removes the "delivery_option" edge to DeliveryOption entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveDeliveryOptionIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.RemoveDeliveryOptionIDs(ids...)
	return cuo
}

// RemoveDeliveryOption removes "delivery_option" edges to DeliveryOption entities.
func (cuo *ConnectionUpdateOne) RemoveDeliveryOption(d ...*DeliveryOption) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDeliveryOptionIDs(ids...)
}

// ClearDefaultDeliveryOption clears the "default_delivery_option" edge to the DeliveryOption entity.
func (cuo *ConnectionUpdateOne) ClearDefaultDeliveryOption() *ConnectionUpdateOne {
	cuo.mutation.ClearDefaultDeliveryOption()
	return cuo
}

// ClearReturnPortal clears the "return_portal" edge to the ReturnPortal entity.
func (cuo *ConnectionUpdateOne) ClearReturnPortal() *ConnectionUpdateOne {
	cuo.mutation.ClearReturnPortal()
	return cuo
}

// ClearHypothesisTest clears all "hypothesis_test" edges to the HypothesisTest entity.
func (cuo *ConnectionUpdateOne) ClearHypothesisTest() *ConnectionUpdateOne {
	cuo.mutation.ClearHypothesisTest()
	return cuo
}

// RemoveHypothesisTestIDs removes the "hypothesis_test" edge to HypothesisTest entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveHypothesisTestIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.RemoveHypothesisTestIDs(ids...)
	return cuo
}

// RemoveHypothesisTest removes "hypothesis_test" edges to HypothesisTest entities.
func (cuo *ConnectionUpdateOne) RemoveHypothesisTest(h ...*HypothesisTest) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return cuo.RemoveHypothesisTestIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (cuo *ConnectionUpdateOne) ClearNotifications() *ConnectionUpdateOne {
	cuo.mutation.ClearNotifications()
	return cuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveNotificationIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.RemoveNotificationIDs(ids...)
	return cuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (cuo *ConnectionUpdateOne) RemoveNotifications(n ...*Notification) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNotificationIDs(ids...)
}

// ClearCurrency clears the "currency" edge to the Currency entity.
func (cuo *ConnectionUpdateOne) ClearCurrency() *ConnectionUpdateOne {
	cuo.mutation.ClearCurrency()
	return cuo
}

// ClearPackingSlipTemplate clears the "packing_slip_template" edge to the Document entity.
func (cuo *ConnectionUpdateOne) ClearPackingSlipTemplate() *ConnectionUpdateOne {
	cuo.mutation.ClearPackingSlipTemplate()
	return cuo
}

// ClearConnectionLookup clears all "connection_lookup" edges to the ConnectionLookup entity.
func (cuo *ConnectionUpdateOne) ClearConnectionLookup() *ConnectionUpdateOne {
	cuo.mutation.ClearConnectionLookup()
	return cuo
}

// RemoveConnectionLookupIDs removes the "connection_lookup" edge to ConnectionLookup entities by IDs.
func (cuo *ConnectionUpdateOne) RemoveConnectionLookupIDs(ids ...pulid.ID) *ConnectionUpdateOne {
	cuo.mutation.RemoveConnectionLookupIDs(ids...)
	return cuo
}

// RemoveConnectionLookup removes "connection_lookup" edges to ConnectionLookup entities.
func (cuo *ConnectionUpdateOne) RemoveConnectionLookup(c ...*ConnectionLookup) *ConnectionUpdateOne {
	ids := make([]pulid.ID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConnectionLookupIDs(ids...)
}

// Where appends a list predicates to the ConnectionUpdate builder.
func (cuo *ConnectionUpdateOne) Where(ps ...predicate.Connection) *ConnectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConnectionUpdateOne) Select(field string, fields ...string) *ConnectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Connection entity.
func (cuo *ConnectionUpdateOne) Save(ctx context.Context) (*Connection, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) SaveX(ctx context.Context) *Connection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConnectionUpdateOne) check() error {
	if cuo.mutation.TenantCleared() && len(cuo.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.tenant"`)
	}
	if cuo.mutation.ConnectionBrandCleared() && len(cuo.mutation.ConnectionBrandIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.connection_brand"`)
	}
	if cuo.mutation.SenderLocationCleared() && len(cuo.mutation.SenderLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.sender_location"`)
	}
	if cuo.mutation.PickupLocationCleared() && len(cuo.mutation.PickupLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.pickup_location"`)
	}
	if cuo.mutation.ReturnLocationCleared() && len(cuo.mutation.ReturnLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.return_location"`)
	}
	if cuo.mutation.SellerLocationCleared() && len(cuo.mutation.SellerLocationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.seller_location"`)
	}
	if cuo.mutation.CurrencyCleared() && len(cuo.mutation.CurrencyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Connection.currency"`)
	}
	return nil
}

func (cuo *ConnectionUpdateOne) sqlSave(ctx context.Context) (_node *Connection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(connection.Table, connection.Columns, sqlgraph.NewFieldSpec(connection.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Connection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, connection.FieldID)
		for _, f := range fields {
			if !connection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != connection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(connection.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SyncOrders(); ok {
		_spec.SetField(connection.FieldSyncOrders, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.SyncProducts(); ok {
		_spec.SetField(connection.FieldSyncProducts, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.FulfillAutomatically(); ok {
		_spec.SetField(connection.FieldFulfillAutomatically, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.DispatchAutomatically(); ok {
		_spec.SetField(connection.FieldDispatchAutomatically, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.ConvertCurrency(); ok {
		_spec.SetField(connection.FieldConvertCurrency, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.AutoPrintParcelSlip(); ok {
		_spec.SetField(connection.FieldAutoPrintParcelSlip, field.TypeBool, value)
	}
	if cuo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.TenantTable,
			Columns: []string{connection.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.TenantTable,
			Columns: []string{connection.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConnectionBrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ConnectionBrandTable,
			Columns: []string{connection.ConnectionBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConnectionBrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ConnectionBrandTable,
			Columns: []string{connection.ConnectionBrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionbrand.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConnectionShopifyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.ConnectionShopifyTable,
			Columns: []string{connection.ConnectionShopifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConnectionShopifyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.ConnectionShopifyTable,
			Columns: []string{connection.ConnectionShopifyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionshopify.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !cuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.OrdersTable,
			Columns: []string{connection.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SenderLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SenderLocationTable,
			Columns: []string{connection.SenderLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SenderLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SenderLocationTable,
			Columns: []string{connection.SenderLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PickupLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PickupLocationTable,
			Columns: []string{connection.PickupLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PickupLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PickupLocationTable,
			Columns: []string{connection.PickupLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReturnLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ReturnLocationTable,
			Columns: []string{connection.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReturnLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.ReturnLocationTable,
			Columns: []string{connection.ReturnLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SellerLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SellerLocationTable,
			Columns: []string{connection.SellerLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SellerLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.SellerLocationTable,
			Columns: []string{connection.SellerLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(location.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDeliveryOptionIDs(); len(nodes) > 0 && !cuo.mutation.DeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   connection.DeliveryOptionTable,
			Columns: []string{connection.DeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DefaultDeliveryOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.DefaultDeliveryOptionTable,
			Columns: []string{connection.DefaultDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DefaultDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   connection.DefaultDeliveryOptionTable,
			Columns: []string{connection.DefaultDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReturnPortalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connection.ReturnPortalTable,
			Columns: []string{connection.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReturnPortalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   connection.ReturnPortalTable,
			Columns: []string{connection.ReturnPortalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(returnportal.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.HypothesisTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedHypothesisTestIDs(); len(nodes) > 0 && !cuo.mutation.HypothesisTestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.HypothesisTestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.HypothesisTestTable,
			Columns: []string{connection.HypothesisTestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !cuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.NotificationsTable,
			Columns: []string{connection.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CurrencyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.CurrencyTable,
			Columns: []string{connection.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CurrencyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.CurrencyTable,
			Columns: []string{connection.CurrencyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currency.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PackingSlipTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PackingSlipTemplateTable,
			Columns: []string{connection.PackingSlipTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PackingSlipTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   connection.PackingSlipTemplateTable,
			Columns: []string{connection.PackingSlipTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ConnectionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConnectionLookupIDs(); len(nodes) > 0 && !cuo.mutation.ConnectionLookupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConnectionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   connection.ConnectionLookupTable,
			Columns: []string{connection.ConnectionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(connectionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Connection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{connection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
