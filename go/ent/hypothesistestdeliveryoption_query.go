// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"delivrio.io/go/ent/deliveryoption"
	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/predicate"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionQuery is the builder for querying HypothesisTestDeliveryOption entities.
type HypothesisTestDeliveryOptionQuery struct {
	config
	ctx                                          *QueryContext
	order                                        []hypothesistestdeliveryoption.OrderOption
	inters                                       []Interceptor
	predicates                                   []predicate.HypothesisTestDeliveryOption
	withTenant                                   *TenantQuery
	withHypothesisTest                           *HypothesisTestQuery
	withHypothesisTestDeliveryOptionRequest      *HypothesisTestDeliveryOptionRequestQuery
	withDeliveryOptionGroupOne                   *DeliveryOptionQuery
	withDeliveryOptionGroupTwo                   *DeliveryOptionQuery
	withFKs                                      bool
	modifiers                                    []func(*sql.Selector)
	loadTotal                                    []func(context.Context, []*HypothesisTestDeliveryOption) error
	withNamedHypothesisTestDeliveryOptionRequest map[string]*HypothesisTestDeliveryOptionRequestQuery
	withNamedDeliveryOptionGroupOne              map[string]*DeliveryOptionQuery
	withNamedDeliveryOptionGroupTwo              map[string]*DeliveryOptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HypothesisTestDeliveryOptionQuery builder.
func (htdoq *HypothesisTestDeliveryOptionQuery) Where(ps ...predicate.HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionQuery {
	htdoq.predicates = append(htdoq.predicates, ps...)
	return htdoq
}

// Limit the number of records to be returned by this query.
func (htdoq *HypothesisTestDeliveryOptionQuery) Limit(limit int) *HypothesisTestDeliveryOptionQuery {
	htdoq.ctx.Limit = &limit
	return htdoq
}

// Offset to start from.
func (htdoq *HypothesisTestDeliveryOptionQuery) Offset(offset int) *HypothesisTestDeliveryOptionQuery {
	htdoq.ctx.Offset = &offset
	return htdoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (htdoq *HypothesisTestDeliveryOptionQuery) Unique(unique bool) *HypothesisTestDeliveryOptionQuery {
	htdoq.ctx.Unique = &unique
	return htdoq
}

// Order specifies how the records should be ordered.
func (htdoq *HypothesisTestDeliveryOptionQuery) Order(o ...hypothesistestdeliveryoption.OrderOption) *HypothesisTestDeliveryOptionQuery {
	htdoq.order = append(htdoq.order, o...)
	return htdoq
}

// QueryTenant chains the current query on the "tenant" edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) QueryTenant() *TenantQuery {
	query := (&TenantClient{config: htdoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, selector),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hypothesistestdeliveryoption.TenantTable, hypothesistestdeliveryoption.TenantColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTest chains the current query on the "hypothesis_test" edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) QueryHypothesisTest() *HypothesisTestQuery {
	query := (&HypothesisTestClient{config: htdoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, selector),
			sqlgraph.To(hypothesistest.Table, hypothesistest.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hypothesistestdeliveryoption.HypothesisTestTable, hypothesistestdeliveryoption.HypothesisTestColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHypothesisTestDeliveryOptionRequest chains the current query on the "hypothesis_test_delivery_option_request" edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) QueryHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionRequestQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: htdoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, selector),
			sqlgraph.To(hypothesistestdeliveryoptionrequest.Table, hypothesistestdeliveryoptionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestTable, hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn),
		)
		fromU = sqlgraph.SetNeighbors(htdoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionGroupOne chains the current query on the "delivery_option_group_one" edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) QueryDeliveryOptionGroupOne() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hypothesistestdeliveryoption.DeliveryOptionGroupOneTable, hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(htdoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDeliveryOptionGroupTwo chains the current query on the "delivery_option_group_two" edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) QueryDeliveryOptionGroupTwo() *DeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := htdoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := htdoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.FieldID, selector),
			sqlgraph.To(deliveryoption.Table, deliveryoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable, hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(htdoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HypothesisTestDeliveryOption entity from the query.
// Returns a *NotFoundError when no HypothesisTestDeliveryOption was found.
func (htdoq *HypothesisTestDeliveryOptionQuery) First(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	nodes, err := htdoq.Limit(1).All(setContextOp(ctx, htdoq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hypothesistestdeliveryoption.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) FirstX(ctx context.Context) *HypothesisTestDeliveryOption {
	node, err := htdoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HypothesisTestDeliveryOption ID from the query.
// Returns a *NotFoundError when no HypothesisTestDeliveryOption ID was found.
func (htdoq *HypothesisTestDeliveryOptionQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = htdoq.Limit(1).IDs(setContextOp(ctx, htdoq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hypothesistestdeliveryoption.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := htdoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HypothesisTestDeliveryOption entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HypothesisTestDeliveryOption entity is found.
// Returns a *NotFoundError when no HypothesisTestDeliveryOption entities are found.
func (htdoq *HypothesisTestDeliveryOptionQuery) Only(ctx context.Context) (*HypothesisTestDeliveryOption, error) {
	nodes, err := htdoq.Limit(2).All(setContextOp(ctx, htdoq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hypothesistestdeliveryoption.Label}
	default:
		return nil, &NotSingularError{hypothesistestdeliveryoption.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) OnlyX(ctx context.Context) *HypothesisTestDeliveryOption {
	node, err := htdoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HypothesisTestDeliveryOption ID in the query.
// Returns a *NotSingularError when more than one HypothesisTestDeliveryOption ID is found.
// Returns a *NotFoundError when no entities are found.
func (htdoq *HypothesisTestDeliveryOptionQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = htdoq.Limit(2).IDs(setContextOp(ctx, htdoq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hypothesistestdeliveryoption.Label}
	default:
		err = &NotSingularError{hypothesistestdeliveryoption.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := htdoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HypothesisTestDeliveryOptions.
func (htdoq *HypothesisTestDeliveryOptionQuery) All(ctx context.Context) ([]*HypothesisTestDeliveryOption, error) {
	ctx = setContextOp(ctx, htdoq.ctx, ent.OpQueryAll)
	if err := htdoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HypothesisTestDeliveryOption, *HypothesisTestDeliveryOptionQuery]()
	return withInterceptors[[]*HypothesisTestDeliveryOption](ctx, htdoq, qr, htdoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) AllX(ctx context.Context) []*HypothesisTestDeliveryOption {
	nodes, err := htdoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HypothesisTestDeliveryOption IDs.
func (htdoq *HypothesisTestDeliveryOptionQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if htdoq.ctx.Unique == nil && htdoq.path != nil {
		htdoq.Unique(true)
	}
	ctx = setContextOp(ctx, htdoq.ctx, ent.OpQueryIDs)
	if err = htdoq.Select(hypothesistestdeliveryoption.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := htdoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (htdoq *HypothesisTestDeliveryOptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, htdoq.ctx, ent.OpQueryCount)
	if err := htdoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, htdoq, querierCount[*HypothesisTestDeliveryOptionQuery](), htdoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) CountX(ctx context.Context) int {
	count, err := htdoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (htdoq *HypothesisTestDeliveryOptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, htdoq.ctx, ent.OpQueryExist)
	switch _, err := htdoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (htdoq *HypothesisTestDeliveryOptionQuery) ExistX(ctx context.Context) bool {
	exist, err := htdoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HypothesisTestDeliveryOptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (htdoq *HypothesisTestDeliveryOptionQuery) Clone() *HypothesisTestDeliveryOptionQuery {
	if htdoq == nil {
		return nil
	}
	return &HypothesisTestDeliveryOptionQuery{
		config:                                  htdoq.config,
		ctx:                                     htdoq.ctx.Clone(),
		order:                                   append([]hypothesistestdeliveryoption.OrderOption{}, htdoq.order...),
		inters:                                  append([]Interceptor{}, htdoq.inters...),
		predicates:                              append([]predicate.HypothesisTestDeliveryOption{}, htdoq.predicates...),
		withTenant:                              htdoq.withTenant.Clone(),
		withHypothesisTest:                      htdoq.withHypothesisTest.Clone(),
		withHypothesisTestDeliveryOptionRequest: htdoq.withHypothesisTestDeliveryOptionRequest.Clone(),
		withDeliveryOptionGroupOne:              htdoq.withDeliveryOptionGroupOne.Clone(),
		withDeliveryOptionGroupTwo:              htdoq.withDeliveryOptionGroupTwo.Clone(),
		// clone intermediate query.
		sql:  htdoq.sql.Clone(),
		path: htdoq.path,
	}
}

// WithTenant tells the query-builder to eager-load the nodes that are connected to
// the "tenant" edge. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithTenant(opts ...func(*TenantQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&TenantClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdoq.withTenant = query
	return htdoq
}

// WithHypothesisTest tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test" edge. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithHypothesisTest(opts ...func(*HypothesisTestQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdoq.withHypothesisTest = query
	return htdoq
}

// WithHypothesisTestDeliveryOptionRequest tells the query-builder to eager-load the nodes that are connected to
// the "hypothesis_test_delivery_option_request" edge. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithHypothesisTestDeliveryOptionRequest(opts ...func(*HypothesisTestDeliveryOptionRequestQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdoq.withHypothesisTestDeliveryOptionRequest = query
	return htdoq
}

// WithDeliveryOptionGroupOne tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_group_one" edge. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithDeliveryOptionGroupOne(opts ...func(*DeliveryOptionQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdoq.withDeliveryOptionGroupOne = query
	return htdoq
}

// WithDeliveryOptionGroupTwo tells the query-builder to eager-load the nodes that are connected to
// the "delivery_option_group_two" edge. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithDeliveryOptionGroupTwo(opts ...func(*DeliveryOptionQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	htdoq.withDeliveryOptionGroupTwo = query
	return htdoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HypothesisTestDeliveryOption.Query().
//		GroupBy(hypothesistestdeliveryoption.FieldTenantID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (htdoq *HypothesisTestDeliveryOptionQuery) GroupBy(field string, fields ...string) *HypothesisTestDeliveryOptionGroupBy {
	htdoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HypothesisTestDeliveryOptionGroupBy{build: htdoq}
	grbuild.flds = &htdoq.ctx.Fields
	grbuild.label = hypothesistestdeliveryoption.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		TenantID pulid.ID `json:"tenant_id,omitempty"`
//	}
//
//	client.HypothesisTestDeliveryOption.Query().
//		Select(hypothesistestdeliveryoption.FieldTenantID).
//		Scan(ctx, &v)
func (htdoq *HypothesisTestDeliveryOptionQuery) Select(fields ...string) *HypothesisTestDeliveryOptionSelect {
	htdoq.ctx.Fields = append(htdoq.ctx.Fields, fields...)
	sbuild := &HypothesisTestDeliveryOptionSelect{HypothesisTestDeliveryOptionQuery: htdoq}
	sbuild.label = hypothesistestdeliveryoption.Label
	sbuild.flds, sbuild.scan = &htdoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HypothesisTestDeliveryOptionSelect configured with the given aggregations.
func (htdoq *HypothesisTestDeliveryOptionQuery) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionSelect {
	return htdoq.Select().Aggregate(fns...)
}

func (htdoq *HypothesisTestDeliveryOptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range htdoq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, htdoq); err != nil {
				return err
			}
		}
	}
	for _, f := range htdoq.ctx.Fields {
		if !hypothesistestdeliveryoption.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if htdoq.path != nil {
		prev, err := htdoq.path(ctx)
		if err != nil {
			return err
		}
		htdoq.sql = prev
	}
	if hypothesistestdeliveryoption.Policy == nil {
		return errors.New("ent: uninitialized hypothesistestdeliveryoption.Policy (forgotten import ent/runtime?)")
	}
	if err := hypothesistestdeliveryoption.Policy.EvalQuery(ctx, htdoq); err != nil {
		return err
	}
	return nil
}

func (htdoq *HypothesisTestDeliveryOptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HypothesisTestDeliveryOption, error) {
	var (
		nodes       = []*HypothesisTestDeliveryOption{}
		withFKs     = htdoq.withFKs
		_spec       = htdoq.querySpec()
		loadedTypes = [5]bool{
			htdoq.withTenant != nil,
			htdoq.withHypothesisTest != nil,
			htdoq.withHypothesisTestDeliveryOptionRequest != nil,
			htdoq.withDeliveryOptionGroupOne != nil,
			htdoq.withDeliveryOptionGroupTwo != nil,
		}
	)
	if htdoq.withHypothesisTest != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoption.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HypothesisTestDeliveryOption).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HypothesisTestDeliveryOption{config: htdoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(htdoq.modifiers) > 0 {
		_spec.Modifiers = htdoq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, htdoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := htdoq.withTenant; query != nil {
		if err := htdoq.loadTenant(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOption, e *Tenant) { n.Edges.Tenant = e }); err != nil {
			return nil, err
		}
	}
	if query := htdoq.withHypothesisTest; query != nil {
		if err := htdoq.loadHypothesisTest(ctx, query, nodes, nil,
			func(n *HypothesisTestDeliveryOption, e *HypothesisTest) { n.Edges.HypothesisTest = e }); err != nil {
			return nil, err
		}
	}
	if query := htdoq.withHypothesisTestDeliveryOptionRequest; query != nil {
		if err := htdoq.loadHypothesisTestDeliveryOptionRequest(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOption) {
				n.Edges.HypothesisTestDeliveryOptionRequest = []*HypothesisTestDeliveryOptionRequest{}
			},
			func(n *HypothesisTestDeliveryOption, e *HypothesisTestDeliveryOptionRequest) {
				n.Edges.HypothesisTestDeliveryOptionRequest = append(n.Edges.HypothesisTestDeliveryOptionRequest, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := htdoq.withDeliveryOptionGroupOne; query != nil {
		if err := htdoq.loadDeliveryOptionGroupOne(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOption) { n.Edges.DeliveryOptionGroupOne = []*DeliveryOption{} },
			func(n *HypothesisTestDeliveryOption, e *DeliveryOption) {
				n.Edges.DeliveryOptionGroupOne = append(n.Edges.DeliveryOptionGroupOne, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := htdoq.withDeliveryOptionGroupTwo; query != nil {
		if err := htdoq.loadDeliveryOptionGroupTwo(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOption) { n.Edges.DeliveryOptionGroupTwo = []*DeliveryOption{} },
			func(n *HypothesisTestDeliveryOption, e *DeliveryOption) {
				n.Edges.DeliveryOptionGroupTwo = append(n.Edges.DeliveryOptionGroupTwo, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range htdoq.withNamedHypothesisTestDeliveryOptionRequest {
		if err := htdoq.loadHypothesisTestDeliveryOptionRequest(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOption) { n.appendNamedHypothesisTestDeliveryOptionRequest(name) },
			func(n *HypothesisTestDeliveryOption, e *HypothesisTestDeliveryOptionRequest) {
				n.appendNamedHypothesisTestDeliveryOptionRequest(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range htdoq.withNamedDeliveryOptionGroupOne {
		if err := htdoq.loadDeliveryOptionGroupOne(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOption) { n.appendNamedDeliveryOptionGroupOne(name) },
			func(n *HypothesisTestDeliveryOption, e *DeliveryOption) { n.appendNamedDeliveryOptionGroupOne(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range htdoq.withNamedDeliveryOptionGroupTwo {
		if err := htdoq.loadDeliveryOptionGroupTwo(ctx, query, nodes,
			func(n *HypothesisTestDeliveryOption) { n.appendNamedDeliveryOptionGroupTwo(name) },
			func(n *HypothesisTestDeliveryOption, e *DeliveryOption) { n.appendNamedDeliveryOptionGroupTwo(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range htdoq.loadTotal {
		if err := htdoq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (htdoq *HypothesisTestDeliveryOptionQuery) loadTenant(ctx context.Context, query *TenantQuery, nodes []*HypothesisTestDeliveryOption, init func(*HypothesisTestDeliveryOption), assign func(*HypothesisTestDeliveryOption, *Tenant)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOption)
	for i := range nodes {
		fk := nodes[i].TenantID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tenant.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tenant_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htdoq *HypothesisTestDeliveryOptionQuery) loadHypothesisTest(ctx context.Context, query *HypothesisTestQuery, nodes []*HypothesisTestDeliveryOption, init func(*HypothesisTestDeliveryOption), assign func(*HypothesisTestDeliveryOption, *HypothesisTest)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*HypothesisTestDeliveryOption)
	for i := range nodes {
		if nodes[i].hypothesis_test_hypothesis_test_delivery_option == nil {
			continue
		}
		fk := *nodes[i].hypothesis_test_hypothesis_test_delivery_option
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(hypothesistest.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "hypothesis_test_hypothesis_test_delivery_option" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (htdoq *HypothesisTestDeliveryOptionQuery) loadHypothesisTestDeliveryOptionRequest(ctx context.Context, query *HypothesisTestDeliveryOptionRequestQuery, nodes []*HypothesisTestDeliveryOption, init func(*HypothesisTestDeliveryOption), assign func(*HypothesisTestDeliveryOption, *HypothesisTestDeliveryOptionRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*HypothesisTestDeliveryOption)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HypothesisTestDeliveryOptionRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hypothesistestdeliveryoption.HypothesisTestDeliveryOptionRequestColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option
		if fk == nil {
			return fmt.Errorf(`foreign-key "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hypothesis_test_delivery_option_request_hypothesis_test_delivery_option" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (htdoq *HypothesisTestDeliveryOptionQuery) loadDeliveryOptionGroupOne(ctx context.Context, query *DeliveryOptionQuery, nodes []*HypothesisTestDeliveryOption, init func(*HypothesisTestDeliveryOption), assign func(*HypothesisTestDeliveryOption, *DeliveryOption)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*HypothesisTestDeliveryOption)
	nids := make(map[pulid.ID]map[*HypothesisTestDeliveryOption]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hypothesistestdeliveryoption.DeliveryOptionGroupOneTable)
		s.Join(joinT).On(s.C(deliveryoption.FieldID), joinT.C(hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hypothesistestdeliveryoption.DeliveryOptionGroupOnePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*HypothesisTestDeliveryOption]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOption](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_group_one" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (htdoq *HypothesisTestDeliveryOptionQuery) loadDeliveryOptionGroupTwo(ctx context.Context, query *DeliveryOptionQuery, nodes []*HypothesisTestDeliveryOption, init func(*HypothesisTestDeliveryOption), assign func(*HypothesisTestDeliveryOption, *DeliveryOption)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[pulid.ID]*HypothesisTestDeliveryOption)
	nids := make(map[pulid.ID]map[*HypothesisTestDeliveryOption]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(hypothesistestdeliveryoption.DeliveryOptionGroupTwoTable)
		s.Join(joinT).On(s.C(deliveryoption.FieldID), joinT.C(hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(hypothesistestdeliveryoption.DeliveryOptionGroupTwoPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(pulid.ID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*pulid.ID)
				inValue := *values[1].(*pulid.ID)
				if nids[inValue] == nil {
					nids[inValue] = map[*HypothesisTestDeliveryOption]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*DeliveryOption](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "delivery_option_group_two" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (htdoq *HypothesisTestDeliveryOptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := htdoq.querySpec()
	if len(htdoq.modifiers) > 0 {
		_spec.Modifiers = htdoq.modifiers
	}
	_spec.Node.Columns = htdoq.ctx.Fields
	if len(htdoq.ctx.Fields) > 0 {
		_spec.Unique = htdoq.ctx.Unique != nil && *htdoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, htdoq.driver, _spec)
}

func (htdoq *HypothesisTestDeliveryOptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hypothesistestdeliveryoption.Table, hypothesistestdeliveryoption.Columns, sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString))
	_spec.From = htdoq.sql
	if unique := htdoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if htdoq.path != nil {
		_spec.Unique = true
	}
	if fields := htdoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hypothesistestdeliveryoption.FieldID)
		for i := range fields {
			if fields[i] != hypothesistestdeliveryoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if htdoq.withTenant != nil {
			_spec.Node.AddColumnOnce(hypothesistestdeliveryoption.FieldTenantID)
		}
	}
	if ps := htdoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := htdoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := htdoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := htdoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (htdoq *HypothesisTestDeliveryOptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(htdoq.driver.Dialect())
	t1 := builder.Table(hypothesistestdeliveryoption.Table)
	columns := htdoq.ctx.Fields
	if len(columns) == 0 {
		columns = hypothesistestdeliveryoption.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if htdoq.sql != nil {
		selector = htdoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if htdoq.ctx.Unique != nil && *htdoq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range htdoq.predicates {
		p(selector)
	}
	for _, p := range htdoq.order {
		p(selector)
	}
	if offset := htdoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := htdoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedHypothesisTestDeliveryOptionRequest tells the query-builder to eager-load the nodes that are connected to the "hypothesis_test_delivery_option_request"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithNamedHypothesisTestDeliveryOptionRequest(name string, opts ...func(*HypothesisTestDeliveryOptionRequestQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&HypothesisTestDeliveryOptionRequestClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if htdoq.withNamedHypothesisTestDeliveryOptionRequest == nil {
		htdoq.withNamedHypothesisTestDeliveryOptionRequest = make(map[string]*HypothesisTestDeliveryOptionRequestQuery)
	}
	htdoq.withNamedHypothesisTestDeliveryOptionRequest[name] = query
	return htdoq
}

// WithNamedDeliveryOptionGroupOne tells the query-builder to eager-load the nodes that are connected to the "delivery_option_group_one"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithNamedDeliveryOptionGroupOne(name string, opts ...func(*DeliveryOptionQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if htdoq.withNamedDeliveryOptionGroupOne == nil {
		htdoq.withNamedDeliveryOptionGroupOne = make(map[string]*DeliveryOptionQuery)
	}
	htdoq.withNamedDeliveryOptionGroupOne[name] = query
	return htdoq
}

// WithNamedDeliveryOptionGroupTwo tells the query-builder to eager-load the nodes that are connected to the "delivery_option_group_two"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (htdoq *HypothesisTestDeliveryOptionQuery) WithNamedDeliveryOptionGroupTwo(name string, opts ...func(*DeliveryOptionQuery)) *HypothesisTestDeliveryOptionQuery {
	query := (&DeliveryOptionClient{config: htdoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if htdoq.withNamedDeliveryOptionGroupTwo == nil {
		htdoq.withNamedDeliveryOptionGroupTwo = make(map[string]*DeliveryOptionQuery)
	}
	htdoq.withNamedDeliveryOptionGroupTwo[name] = query
	return htdoq
}

// HypothesisTestDeliveryOptionGroupBy is the group-by builder for HypothesisTestDeliveryOption entities.
type HypothesisTestDeliveryOptionGroupBy struct {
	selector
	build *HypothesisTestDeliveryOptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (htdogb *HypothesisTestDeliveryOptionGroupBy) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionGroupBy {
	htdogb.fns = append(htdogb.fns, fns...)
	return htdogb
}

// Scan applies the selector query and scans the result into the given value.
func (htdogb *HypothesisTestDeliveryOptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htdogb.build.ctx, ent.OpQueryGroupBy)
	if err := htdogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HypothesisTestDeliveryOptionQuery, *HypothesisTestDeliveryOptionGroupBy](ctx, htdogb.build, htdogb, htdogb.build.inters, v)
}

func (htdogb *HypothesisTestDeliveryOptionGroupBy) sqlScan(ctx context.Context, root *HypothesisTestDeliveryOptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(htdogb.fns))
	for _, fn := range htdogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*htdogb.flds)+len(htdogb.fns))
		for _, f := range *htdogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*htdogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htdogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HypothesisTestDeliveryOptionSelect is the builder for selecting fields of HypothesisTestDeliveryOption entities.
type HypothesisTestDeliveryOptionSelect struct {
	*HypothesisTestDeliveryOptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (htdos *HypothesisTestDeliveryOptionSelect) Aggregate(fns ...AggregateFunc) *HypothesisTestDeliveryOptionSelect {
	htdos.fns = append(htdos.fns, fns...)
	return htdos
}

// Scan applies the selector query and scans the result into the given value.
func (htdos *HypothesisTestDeliveryOptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, htdos.ctx, ent.OpQuerySelect)
	if err := htdos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HypothesisTestDeliveryOptionQuery, *HypothesisTestDeliveryOptionSelect](ctx, htdos.HypothesisTestDeliveryOptionQuery, htdos, htdos.inters, v)
}

func (htdos *HypothesisTestDeliveryOptionSelect) sqlScan(ctx context.Context, root *HypothesisTestDeliveryOptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(htdos.fns))
	for _, fn := range htdos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*htdos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := htdos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
