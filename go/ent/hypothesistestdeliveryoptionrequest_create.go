// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionlookup"
	"delivrio.io/go/ent/hypothesistestdeliveryoptionrequest"
	"delivrio.io/go/ent/order"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HypothesisTestDeliveryOptionRequestCreate is the builder for creating a HypothesisTestDeliveryOptionRequest entity.
type HypothesisTestDeliveryOptionRequestCreate struct {
	config
	mutation *HypothesisTestDeliveryOptionRequestMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTenantID sets the "tenant_id" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetTenantID(pu pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetTenantID(pu)
	return htdorc
}

// SetOrderHash sets the "order_hash" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetOrderHash(s string) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetOrderHash(s)
	return htdorc
}

// SetShippingAddressHash sets the "shipping_address_hash" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetShippingAddressHash(s string) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetShippingAddressHash(s)
	return htdorc
}

// SetIsControlGroup sets the "is_control_group" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetIsControlGroup(b bool) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetIsControlGroup(b)
	return htdorc
}

// SetRequestCount sets the "request_count" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetRequestCount(u uint) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetRequestCount(u)
	return htdorc
}

// SetCreatedAt sets the "created_at" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetCreatedAt(t time.Time) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetCreatedAt(t)
	return htdorc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetNillableCreatedAt(t *time.Time) *HypothesisTestDeliveryOptionRequestCreate {
	if t != nil {
		htdorc.SetCreatedAt(*t)
	}
	return htdorc
}

// SetLastRequestedAt sets the "last_requested_at" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetLastRequestedAt(t time.Time) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetLastRequestedAt(t)
	return htdorc
}

// SetNillableLastRequestedAt sets the "last_requested_at" field if the given value is not nil.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetNillableLastRequestedAt(t *time.Time) *HypothesisTestDeliveryOptionRequestCreate {
	if t != nil {
		htdorc.SetLastRequestedAt(*t)
	}
	return htdorc
}

// SetID sets the "id" field.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetID(pu pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetID(pu)
	return htdorc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetNillableID(pu *pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	if pu != nil {
		htdorc.SetID(*pu)
	}
	return htdorc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetTenant(t *Tenant) *HypothesisTestDeliveryOptionRequestCreate {
	return htdorc.SetTenantID(t.ID)
}

// SetHypothesisTestDeliveryOptionID sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity by ID.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetHypothesisTestDeliveryOptionID(id pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetHypothesisTestDeliveryOptionID(id)
	return htdorc
}

// SetHypothesisTestDeliveryOption sets the "hypothesis_test_delivery_option" edge to the HypothesisTestDeliveryOption entity.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetHypothesisTestDeliveryOption(h *HypothesisTestDeliveryOption) *HypothesisTestDeliveryOptionRequestCreate {
	return htdorc.SetHypothesisTestDeliveryOptionID(h.ID)
}

// SetOrderID sets the "order" edge to the Order entity by ID.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetOrderID(id pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.SetOrderID(id)
	return htdorc
}

// SetNillableOrderID sets the "order" edge to the Order entity by ID if the given value is not nil.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetNillableOrderID(id *pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	if id != nil {
		htdorc = htdorc.SetOrderID(*id)
	}
	return htdorc
}

// SetOrder sets the "order" edge to the Order entity.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SetOrder(o *Order) *HypothesisTestDeliveryOptionRequestCreate {
	return htdorc.SetOrderID(o.ID)
}

// AddHypothesisTestDeliveryOptionLookupIDs adds the "hypothesis_test_delivery_option_lookup" edge to the HypothesisTestDeliveryOptionLookup entity by IDs.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) AddHypothesisTestDeliveryOptionLookupIDs(ids ...pulid.ID) *HypothesisTestDeliveryOptionRequestCreate {
	htdorc.mutation.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
	return htdorc
}

// AddHypothesisTestDeliveryOptionLookup adds the "hypothesis_test_delivery_option_lookup" edges to the HypothesisTestDeliveryOptionLookup entity.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) AddHypothesisTestDeliveryOptionLookup(h ...*HypothesisTestDeliveryOptionLookup) *HypothesisTestDeliveryOptionRequestCreate {
	ids := make([]pulid.ID, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return htdorc.AddHypothesisTestDeliveryOptionLookupIDs(ids...)
}

// Mutation returns the HypothesisTestDeliveryOptionRequestMutation object of the builder.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) Mutation() *HypothesisTestDeliveryOptionRequestMutation {
	return htdorc.mutation
}

// Save creates the HypothesisTestDeliveryOptionRequest in the database.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) Save(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	if err := htdorc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, htdorc.sqlSave, htdorc.mutation, htdorc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) SaveX(ctx context.Context) *HypothesisTestDeliveryOptionRequest {
	v, err := htdorc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) Exec(ctx context.Context) error {
	_, err := htdorc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) ExecX(ctx context.Context) {
	if err := htdorc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) defaults() error {
	if _, ok := htdorc.mutation.CreatedAt(); !ok {
		if hypothesistestdeliveryoptionrequest.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized hypothesistestdeliveryoptionrequest.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := hypothesistestdeliveryoptionrequest.DefaultCreatedAt()
		htdorc.mutation.SetCreatedAt(v)
	}
	if _, ok := htdorc.mutation.LastRequestedAt(); !ok {
		if hypothesistestdeliveryoptionrequest.DefaultLastRequestedAt == nil {
			return fmt.Errorf("ent: uninitialized hypothesistestdeliveryoptionrequest.DefaultLastRequestedAt (forgotten import ent/runtime?)")
		}
		v := hypothesistestdeliveryoptionrequest.DefaultLastRequestedAt()
		htdorc.mutation.SetLastRequestedAt(v)
	}
	if _, ok := htdorc.mutation.ID(); !ok {
		if hypothesistestdeliveryoptionrequest.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized hypothesistestdeliveryoptionrequest.DefaultID (forgotten import ent/runtime?)")
		}
		v := hypothesistestdeliveryoptionrequest.DefaultID()
		htdorc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) check() error {
	if _, ok := htdorc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.tenant_id"`)}
	}
	if _, ok := htdorc.mutation.OrderHash(); !ok {
		return &ValidationError{Name: "order_hash", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.order_hash"`)}
	}
	if _, ok := htdorc.mutation.ShippingAddressHash(); !ok {
		return &ValidationError{Name: "shipping_address_hash", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.shipping_address_hash"`)}
	}
	if _, ok := htdorc.mutation.IsControlGroup(); !ok {
		return &ValidationError{Name: "is_control_group", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.is_control_group"`)}
	}
	if _, ok := htdorc.mutation.RequestCount(); !ok {
		return &ValidationError{Name: "request_count", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.request_count"`)}
	}
	if _, ok := htdorc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.created_at"`)}
	}
	if _, ok := htdorc.mutation.LastRequestedAt(); !ok {
		return &ValidationError{Name: "last_requested_at", err: errors.New(`ent: missing required field "HypothesisTestDeliveryOptionRequest.last_requested_at"`)}
	}
	if len(htdorc.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "HypothesisTestDeliveryOptionRequest.tenant"`)}
	}
	if len(htdorc.mutation.HypothesisTestDeliveryOptionIDs()) == 0 {
		return &ValidationError{Name: "hypothesis_test_delivery_option", err: errors.New(`ent: missing required edge "HypothesisTestDeliveryOptionRequest.hypothesis_test_delivery_option"`)}
	}
	return nil
}

func (htdorc *HypothesisTestDeliveryOptionRequestCreate) sqlSave(ctx context.Context) (*HypothesisTestDeliveryOptionRequest, error) {
	if err := htdorc.check(); err != nil {
		return nil, err
	}
	_node, _spec := htdorc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htdorc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	htdorc.mutation.id = &_node.ID
	htdorc.mutation.done = true
	return _node, nil
}

func (htdorc *HypothesisTestDeliveryOptionRequestCreate) createSpec() (*HypothesisTestDeliveryOptionRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &HypothesisTestDeliveryOptionRequest{config: htdorc.config}
		_spec = sqlgraph.NewCreateSpec(hypothesistestdeliveryoptionrequest.Table, sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionrequest.FieldID, field.TypeString))
	)
	_spec.OnConflict = htdorc.conflict
	if id, ok := htdorc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := htdorc.mutation.OrderHash(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldOrderHash, field.TypeString, value)
		_node.OrderHash = value
	}
	if value, ok := htdorc.mutation.ShippingAddressHash(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldShippingAddressHash, field.TypeString, value)
		_node.ShippingAddressHash = value
	}
	if value, ok := htdorc.mutation.IsControlGroup(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldIsControlGroup, field.TypeBool, value)
		_node.IsControlGroup = value
	}
	if value, ok := htdorc.mutation.RequestCount(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldRequestCount, field.TypeUint, value)
		_node.RequestCount = value
	}
	if value, ok := htdorc.mutation.CreatedAt(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := htdorc.mutation.LastRequestedAt(); ok {
		_spec.SetField(hypothesistestdeliveryoptionrequest.FieldLastRequestedAt, field.TypeTime, value)
		_node.LastRequestedAt = value
	}
	if nodes := htdorc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.TenantTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdorc.mutation.HypothesisTestDeliveryOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hypothesis_test_delivery_option_request_hypothesis_test_delivery_option = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdorc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.OrderTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := htdorc.mutation.HypothesisTestDeliveryOptionLookupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupTable,
			Columns: []string{hypothesistestdeliveryoptionrequest.HypothesisTestDeliveryOptionLookupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hypothesistestdeliveryoptionlookup.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//		SetTenantID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HypothesisTestDeliveryOptionRequestUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) OnConflict(opts ...sql.ConflictOption) *HypothesisTestDeliveryOptionRequestUpsertOne {
	htdorc.conflict = opts
	return &HypothesisTestDeliveryOptionRequestUpsertOne{
		create: htdorc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (htdorc *HypothesisTestDeliveryOptionRequestCreate) OnConflictColumns(columns ...string) *HypothesisTestDeliveryOptionRequestUpsertOne {
	htdorc.conflict = append(htdorc.conflict, sql.ConflictColumns(columns...))
	return &HypothesisTestDeliveryOptionRequestUpsertOne{
		create: htdorc,
	}
}

type (
	// HypothesisTestDeliveryOptionRequestUpsertOne is the builder for "upsert"-ing
	//  one HypothesisTestDeliveryOptionRequest node.
	HypothesisTestDeliveryOptionRequestUpsertOne struct {
		create *HypothesisTestDeliveryOptionRequestCreate
	}

	// HypothesisTestDeliveryOptionRequestUpsert is the "OnConflict" setter.
	HypothesisTestDeliveryOptionRequestUpsert struct {
		*sql.UpdateSet
	}
)

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) SetTenantID(v pulid.ID) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Set(hypothesistestdeliveryoptionrequest.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsert) UpdateTenantID() *HypothesisTestDeliveryOptionRequestUpsert {
	u.SetExcluded(hypothesistestdeliveryoptionrequest.FieldTenantID)
	return u
}

// SetOrderHash sets the "order_hash" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) SetOrderHash(v string) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Set(hypothesistestdeliveryoptionrequest.FieldOrderHash, v)
	return u
}

// UpdateOrderHash sets the "order_hash" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsert) UpdateOrderHash() *HypothesisTestDeliveryOptionRequestUpsert {
	u.SetExcluded(hypothesistestdeliveryoptionrequest.FieldOrderHash)
	return u
}

// SetShippingAddressHash sets the "shipping_address_hash" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) SetShippingAddressHash(v string) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Set(hypothesistestdeliveryoptionrequest.FieldShippingAddressHash, v)
	return u
}

// UpdateShippingAddressHash sets the "shipping_address_hash" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsert) UpdateShippingAddressHash() *HypothesisTestDeliveryOptionRequestUpsert {
	u.SetExcluded(hypothesistestdeliveryoptionrequest.FieldShippingAddressHash)
	return u
}

// SetIsControlGroup sets the "is_control_group" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) SetIsControlGroup(v bool) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Set(hypothesistestdeliveryoptionrequest.FieldIsControlGroup, v)
	return u
}

// UpdateIsControlGroup sets the "is_control_group" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsert) UpdateIsControlGroup() *HypothesisTestDeliveryOptionRequestUpsert {
	u.SetExcluded(hypothesistestdeliveryoptionrequest.FieldIsControlGroup)
	return u
}

// SetRequestCount sets the "request_count" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) SetRequestCount(v uint) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Set(hypothesistestdeliveryoptionrequest.FieldRequestCount, v)
	return u
}

// UpdateRequestCount sets the "request_count" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsert) UpdateRequestCount() *HypothesisTestDeliveryOptionRequestUpsert {
	u.SetExcluded(hypothesistestdeliveryoptionrequest.FieldRequestCount)
	return u
}

// AddRequestCount adds v to the "request_count" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) AddRequestCount(v uint) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Add(hypothesistestdeliveryoptionrequest.FieldRequestCount, v)
	return u
}

// SetLastRequestedAt sets the "last_requested_at" field.
func (u *HypothesisTestDeliveryOptionRequestUpsert) SetLastRequestedAt(v time.Time) *HypothesisTestDeliveryOptionRequestUpsert {
	u.Set(hypothesistestdeliveryoptionrequest.FieldLastRequestedAt, v)
	return u
}

// UpdateLastRequestedAt sets the "last_requested_at" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsert) UpdateLastRequestedAt() *HypothesisTestDeliveryOptionRequestUpsert {
	u.SetExcluded(hypothesistestdeliveryoptionrequest.FieldLastRequestedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hypothesistestdeliveryoptionrequest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateNewValues() *HypothesisTestDeliveryOptionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(hypothesistestdeliveryoptionrequest.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(hypothesistestdeliveryoptionrequest.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) Ignore() *HypothesisTestDeliveryOptionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) DoNothing() *HypothesisTestDeliveryOptionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HypothesisTestDeliveryOptionRequestCreate.OnConflict
// documentation for more info.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) Update(set func(*HypothesisTestDeliveryOptionRequestUpsert)) *HypothesisTestDeliveryOptionRequestUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HypothesisTestDeliveryOptionRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) SetTenantID(v pulid.ID) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateTenantID() *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateTenantID()
	})
}

// SetOrderHash sets the "order_hash" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) SetOrderHash(v string) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetOrderHash(v)
	})
}

// UpdateOrderHash sets the "order_hash" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateOrderHash() *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateOrderHash()
	})
}

// SetShippingAddressHash sets the "shipping_address_hash" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) SetShippingAddressHash(v string) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetShippingAddressHash(v)
	})
}

// UpdateShippingAddressHash sets the "shipping_address_hash" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateShippingAddressHash() *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateShippingAddressHash()
	})
}

// SetIsControlGroup sets the "is_control_group" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) SetIsControlGroup(v bool) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetIsControlGroup(v)
	})
}

// UpdateIsControlGroup sets the "is_control_group" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateIsControlGroup() *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateIsControlGroup()
	})
}

// SetRequestCount sets the "request_count" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) SetRequestCount(v uint) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetRequestCount(v)
	})
}

// AddRequestCount adds v to the "request_count" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) AddRequestCount(v uint) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.AddRequestCount(v)
	})
}

// UpdateRequestCount sets the "request_count" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateRequestCount() *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateRequestCount()
	})
}

// SetLastRequestedAt sets the "last_requested_at" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) SetLastRequestedAt(v time.Time) *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetLastRequestedAt(v)
	})
}

// UpdateLastRequestedAt sets the "last_requested_at" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) UpdateLastRequestedAt() *HypothesisTestDeliveryOptionRequestUpsertOne {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateLastRequestedAt()
	})
}

// Exec executes the query.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HypothesisTestDeliveryOptionRequestCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: HypothesisTestDeliveryOptionRequestUpsertOne.ID is not supported by MySQL driver. Use HypothesisTestDeliveryOptionRequestUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *HypothesisTestDeliveryOptionRequestUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// HypothesisTestDeliveryOptionRequestCreateBulk is the builder for creating many HypothesisTestDeliveryOptionRequest entities in bulk.
type HypothesisTestDeliveryOptionRequestCreateBulk struct {
	config
	err      error
	builders []*HypothesisTestDeliveryOptionRequestCreate
	conflict []sql.ConflictOption
}

// Save creates the HypothesisTestDeliveryOptionRequest entities in the database.
func (htdorcb *HypothesisTestDeliveryOptionRequestCreateBulk) Save(ctx context.Context) ([]*HypothesisTestDeliveryOptionRequest, error) {
	if htdorcb.err != nil {
		return nil, htdorcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(htdorcb.builders))
	nodes := make([]*HypothesisTestDeliveryOptionRequest, len(htdorcb.builders))
	mutators := make([]Mutator, len(htdorcb.builders))
	for i := range htdorcb.builders {
		func(i int, root context.Context) {
			builder := htdorcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HypothesisTestDeliveryOptionRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htdorcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = htdorcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htdorcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htdorcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htdorcb *HypothesisTestDeliveryOptionRequestCreateBulk) SaveX(ctx context.Context) []*HypothesisTestDeliveryOptionRequest {
	v, err := htdorcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htdorcb *HypothesisTestDeliveryOptionRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := htdorcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htdorcb *HypothesisTestDeliveryOptionRequestCreateBulk) ExecX(ctx context.Context) {
	if err := htdorcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.HypothesisTestDeliveryOptionRequest.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.HypothesisTestDeliveryOptionRequestUpsert) {
//			SetTenantID(v+v).
//		}).
//		Exec(ctx)
func (htdorcb *HypothesisTestDeliveryOptionRequestCreateBulk) OnConflict(opts ...sql.ConflictOption) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	htdorcb.conflict = opts
	return &HypothesisTestDeliveryOptionRequestUpsertBulk{
		create: htdorcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (htdorcb *HypothesisTestDeliveryOptionRequestCreateBulk) OnConflictColumns(columns ...string) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	htdorcb.conflict = append(htdorcb.conflict, sql.ConflictColumns(columns...))
	return &HypothesisTestDeliveryOptionRequestUpsertBulk{
		create: htdorcb,
	}
}

// HypothesisTestDeliveryOptionRequestUpsertBulk is the builder for "upsert"-ing
// a bulk of HypothesisTestDeliveryOptionRequest nodes.
type HypothesisTestDeliveryOptionRequestUpsertBulk struct {
	create *HypothesisTestDeliveryOptionRequestCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(hypothesistestdeliveryoptionrequest.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateNewValues() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(hypothesistestdeliveryoptionrequest.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(hypothesistestdeliveryoptionrequest.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.HypothesisTestDeliveryOptionRequest.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) Ignore() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) DoNothing() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the HypothesisTestDeliveryOptionRequestCreateBulk.OnConflict
// documentation for more info.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) Update(set func(*HypothesisTestDeliveryOptionRequestUpsert)) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&HypothesisTestDeliveryOptionRequestUpsert{UpdateSet: update})
	}))
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) SetTenantID(v pulid.ID) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateTenantID() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateTenantID()
	})
}

// SetOrderHash sets the "order_hash" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) SetOrderHash(v string) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetOrderHash(v)
	})
}

// UpdateOrderHash sets the "order_hash" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateOrderHash() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateOrderHash()
	})
}

// SetShippingAddressHash sets the "shipping_address_hash" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) SetShippingAddressHash(v string) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetShippingAddressHash(v)
	})
}

// UpdateShippingAddressHash sets the "shipping_address_hash" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateShippingAddressHash() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateShippingAddressHash()
	})
}

// SetIsControlGroup sets the "is_control_group" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) SetIsControlGroup(v bool) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetIsControlGroup(v)
	})
}

// UpdateIsControlGroup sets the "is_control_group" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateIsControlGroup() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateIsControlGroup()
	})
}

// SetRequestCount sets the "request_count" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) SetRequestCount(v uint) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetRequestCount(v)
	})
}

// AddRequestCount adds v to the "request_count" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) AddRequestCount(v uint) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.AddRequestCount(v)
	})
}

// UpdateRequestCount sets the "request_count" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateRequestCount() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateRequestCount()
	})
}

// SetLastRequestedAt sets the "last_requested_at" field.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) SetLastRequestedAt(v time.Time) *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.SetLastRequestedAt(v)
	})
}

// UpdateLastRequestedAt sets the "last_requested_at" field to the value that was provided on create.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) UpdateLastRequestedAt() *HypothesisTestDeliveryOptionRequestUpsertBulk {
	return u.Update(func(s *HypothesisTestDeliveryOptionRequestUpsert) {
		s.UpdateLastRequestedAt()
	})
}

// Exec executes the query.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the HypothesisTestDeliveryOptionRequestCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for HypothesisTestDeliveryOptionRequestCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *HypothesisTestDeliveryOptionRequestUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
