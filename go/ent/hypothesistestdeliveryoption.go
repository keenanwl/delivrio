// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"delivrio.io/go/ent/hypothesistest"
	"delivrio.io/go/ent/hypothesistestdeliveryoption"
	"delivrio.io/go/ent/tenant"
	"delivrio.io/shared-utils/pulid"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// HypothesisTestDeliveryOption is the model entity for the HypothesisTestDeliveryOption schema.
type HypothesisTestDeliveryOption struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID pulid.ID `json:"tenant_id,omitempty"`
	// RandomizeWithinGroupSort holds the value of the "randomize_within_group_sort" field.
	RandomizeWithinGroupSort bool `json:"randomize_within_group_sort,omitempty"`
	// ByIntervalRotation holds the value of the "by_interval_rotation" field.
	ByIntervalRotation bool `json:"by_interval_rotation,omitempty"`
	// RotationIntervalHours holds the value of the "rotation_interval_hours" field.
	RotationIntervalHours int `json:"rotation_interval_hours,omitempty"`
	// ByOrder holds the value of the "by_order" field.
	ByOrder bool `json:"by_order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HypothesisTestDeliveryOptionQuery when eager-loading is set.
	Edges                                           HypothesisTestDeliveryOptionEdges `json:"edges"`
	hypothesis_test_hypothesis_test_delivery_option *pulid.ID
	selectValues                                    sql.SelectValues
}

// HypothesisTestDeliveryOptionEdges holds the relations/edges for other nodes in the graph.
type HypothesisTestDeliveryOptionEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// HypothesisTest holds the value of the hypothesis_test edge.
	HypothesisTest *HypothesisTest `json:"hypothesis_test,omitempty"`
	// HypothesisTestDeliveryOptionRequest holds the value of the hypothesis_test_delivery_option_request edge.
	HypothesisTestDeliveryOptionRequest []*HypothesisTestDeliveryOptionRequest `json:"hypothesis_test_delivery_option_request,omitempty"`
	// DeliveryOptionGroupOne holds the value of the delivery_option_group_one edge.
	DeliveryOptionGroupOne []*DeliveryOption `json:"delivery_option_group_one,omitempty"`
	// DeliveryOptionGroupTwo holds the value of the delivery_option_group_two edge.
	DeliveryOptionGroupTwo []*DeliveryOption `json:"delivery_option_group_two,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedHypothesisTestDeliveryOptionRequest map[string][]*HypothesisTestDeliveryOptionRequest
	namedDeliveryOptionGroupOne              map[string][]*DeliveryOption
	namedDeliveryOptionGroupTwo              map[string][]*DeliveryOption
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// HypothesisTestOrErr returns the HypothesisTest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HypothesisTestDeliveryOptionEdges) HypothesisTestOrErr() (*HypothesisTest, error) {
	if e.HypothesisTest != nil {
		return e.HypothesisTest, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: hypothesistest.Label}
	}
	return nil, &NotLoadedError{edge: "hypothesis_test"}
}

// HypothesisTestDeliveryOptionRequestOrErr returns the HypothesisTestDeliveryOptionRequest value or an error if the edge
// was not loaded in eager-loading.
func (e HypothesisTestDeliveryOptionEdges) HypothesisTestDeliveryOptionRequestOrErr() ([]*HypothesisTestDeliveryOptionRequest, error) {
	if e.loadedTypes[2] {
		return e.HypothesisTestDeliveryOptionRequest, nil
	}
	return nil, &NotLoadedError{edge: "hypothesis_test_delivery_option_request"}
}

// DeliveryOptionGroupOneOrErr returns the DeliveryOptionGroupOne value or an error if the edge
// was not loaded in eager-loading.
func (e HypothesisTestDeliveryOptionEdges) DeliveryOptionGroupOneOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[3] {
		return e.DeliveryOptionGroupOne, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_group_one"}
}

// DeliveryOptionGroupTwoOrErr returns the DeliveryOptionGroupTwo value or an error if the edge
// was not loaded in eager-loading.
func (e HypothesisTestDeliveryOptionEdges) DeliveryOptionGroupTwoOrErr() ([]*DeliveryOption, error) {
	if e.loadedTypes[4] {
		return e.DeliveryOptionGroupTwo, nil
	}
	return nil, &NotLoadedError{edge: "delivery_option_group_two"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HypothesisTestDeliveryOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hypothesistestdeliveryoption.FieldID, hypothesistestdeliveryoption.FieldTenantID:
			values[i] = new(pulid.ID)
		case hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort, hypothesistestdeliveryoption.FieldByIntervalRotation, hypothesistestdeliveryoption.FieldByOrder:
			values[i] = new(sql.NullBool)
		case hypothesistestdeliveryoption.FieldRotationIntervalHours:
			values[i] = new(sql.NullInt64)
		case hypothesistestdeliveryoption.ForeignKeys[0]: // hypothesis_test_hypothesis_test_delivery_option
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HypothesisTestDeliveryOption fields.
func (htdo *HypothesisTestDeliveryOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hypothesistestdeliveryoption.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				htdo.ID = *value
			}
		case hypothesistestdeliveryoption.FieldTenantID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value != nil {
				htdo.TenantID = *value
			}
		case hypothesistestdeliveryoption.FieldRandomizeWithinGroupSort:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field randomize_within_group_sort", values[i])
			} else if value.Valid {
				htdo.RandomizeWithinGroupSort = value.Bool
			}
		case hypothesistestdeliveryoption.FieldByIntervalRotation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field by_interval_rotation", values[i])
			} else if value.Valid {
				htdo.ByIntervalRotation = value.Bool
			}
		case hypothesistestdeliveryoption.FieldRotationIntervalHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rotation_interval_hours", values[i])
			} else if value.Valid {
				htdo.RotationIntervalHours = int(value.Int64)
			}
		case hypothesistestdeliveryoption.FieldByOrder:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field by_order", values[i])
			} else if value.Valid {
				htdo.ByOrder = value.Bool
			}
		case hypothesistestdeliveryoption.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field hypothesis_test_hypothesis_test_delivery_option", values[i])
			} else if value.Valid {
				htdo.hypothesis_test_hypothesis_test_delivery_option = new(pulid.ID)
				*htdo.hypothesis_test_hypothesis_test_delivery_option = *value.S.(*pulid.ID)
			}
		default:
			htdo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HypothesisTestDeliveryOption.
// This includes values selected through modifiers, order, etc.
func (htdo *HypothesisTestDeliveryOption) Value(name string) (ent.Value, error) {
	return htdo.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the HypothesisTestDeliveryOption entity.
func (htdo *HypothesisTestDeliveryOption) QueryTenant() *TenantQuery {
	return NewHypothesisTestDeliveryOptionClient(htdo.config).QueryTenant(htdo)
}

// QueryHypothesisTest queries the "hypothesis_test" edge of the HypothesisTestDeliveryOption entity.
func (htdo *HypothesisTestDeliveryOption) QueryHypothesisTest() *HypothesisTestQuery {
	return NewHypothesisTestDeliveryOptionClient(htdo.config).QueryHypothesisTest(htdo)
}

// QueryHypothesisTestDeliveryOptionRequest queries the "hypothesis_test_delivery_option_request" edge of the HypothesisTestDeliveryOption entity.
func (htdo *HypothesisTestDeliveryOption) QueryHypothesisTestDeliveryOptionRequest() *HypothesisTestDeliveryOptionRequestQuery {
	return NewHypothesisTestDeliveryOptionClient(htdo.config).QueryHypothesisTestDeliveryOptionRequest(htdo)
}

// QueryDeliveryOptionGroupOne queries the "delivery_option_group_one" edge of the HypothesisTestDeliveryOption entity.
func (htdo *HypothesisTestDeliveryOption) QueryDeliveryOptionGroupOne() *DeliveryOptionQuery {
	return NewHypothesisTestDeliveryOptionClient(htdo.config).QueryDeliveryOptionGroupOne(htdo)
}

// QueryDeliveryOptionGroupTwo queries the "delivery_option_group_two" edge of the HypothesisTestDeliveryOption entity.
func (htdo *HypothesisTestDeliveryOption) QueryDeliveryOptionGroupTwo() *DeliveryOptionQuery {
	return NewHypothesisTestDeliveryOptionClient(htdo.config).QueryDeliveryOptionGroupTwo(htdo)
}

// Update returns a builder for updating this HypothesisTestDeliveryOption.
// Note that you need to call HypothesisTestDeliveryOption.Unwrap() before calling this method if this HypothesisTestDeliveryOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (htdo *HypothesisTestDeliveryOption) Update() *HypothesisTestDeliveryOptionUpdateOne {
	return NewHypothesisTestDeliveryOptionClient(htdo.config).UpdateOne(htdo)
}

// Unwrap unwraps the HypothesisTestDeliveryOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (htdo *HypothesisTestDeliveryOption) Unwrap() *HypothesisTestDeliveryOption {
	_tx, ok := htdo.config.driver.(*txDriver)
	if !ok {
		panic("ent: HypothesisTestDeliveryOption is not a transactional entity")
	}
	htdo.config.driver = _tx.drv
	return htdo
}

// String implements the fmt.Stringer.
func (htdo *HypothesisTestDeliveryOption) String() string {
	var builder strings.Builder
	builder.WriteString("HypothesisTestDeliveryOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", htdo.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(fmt.Sprintf("%v", htdo.TenantID))
	builder.WriteString(", ")
	builder.WriteString("randomize_within_group_sort=")
	builder.WriteString(fmt.Sprintf("%v", htdo.RandomizeWithinGroupSort))
	builder.WriteString(", ")
	builder.WriteString("by_interval_rotation=")
	builder.WriteString(fmt.Sprintf("%v", htdo.ByIntervalRotation))
	builder.WriteString(", ")
	builder.WriteString("rotation_interval_hours=")
	builder.WriteString(fmt.Sprintf("%v", htdo.RotationIntervalHours))
	builder.WriteString(", ")
	builder.WriteString("by_order=")
	builder.WriteString(fmt.Sprintf("%v", htdo.ByOrder))
	builder.WriteByte(')')
	return builder.String()
}

// NamedHypothesisTestDeliveryOptionRequest returns the HypothesisTestDeliveryOptionRequest named value or an error if the edge was not
// loaded in eager-loading with this name.
func (htdo *HypothesisTestDeliveryOption) NamedHypothesisTestDeliveryOptionRequest(name string) ([]*HypothesisTestDeliveryOptionRequest, error) {
	if htdo.Edges.namedHypothesisTestDeliveryOptionRequest == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := htdo.Edges.namedHypothesisTestDeliveryOptionRequest[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (htdo *HypothesisTestDeliveryOption) appendNamedHypothesisTestDeliveryOptionRequest(name string, edges ...*HypothesisTestDeliveryOptionRequest) {
	if htdo.Edges.namedHypothesisTestDeliveryOptionRequest == nil {
		htdo.Edges.namedHypothesisTestDeliveryOptionRequest = make(map[string][]*HypothesisTestDeliveryOptionRequest)
	}
	if len(edges) == 0 {
		htdo.Edges.namedHypothesisTestDeliveryOptionRequest[name] = []*HypothesisTestDeliveryOptionRequest{}
	} else {
		htdo.Edges.namedHypothesisTestDeliveryOptionRequest[name] = append(htdo.Edges.namedHypothesisTestDeliveryOptionRequest[name], edges...)
	}
}

// NamedDeliveryOptionGroupOne returns the DeliveryOptionGroupOne named value or an error if the edge was not
// loaded in eager-loading with this name.
func (htdo *HypothesisTestDeliveryOption) NamedDeliveryOptionGroupOne(name string) ([]*DeliveryOption, error) {
	if htdo.Edges.namedDeliveryOptionGroupOne == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := htdo.Edges.namedDeliveryOptionGroupOne[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (htdo *HypothesisTestDeliveryOption) appendNamedDeliveryOptionGroupOne(name string, edges ...*DeliveryOption) {
	if htdo.Edges.namedDeliveryOptionGroupOne == nil {
		htdo.Edges.namedDeliveryOptionGroupOne = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		htdo.Edges.namedDeliveryOptionGroupOne[name] = []*DeliveryOption{}
	} else {
		htdo.Edges.namedDeliveryOptionGroupOne[name] = append(htdo.Edges.namedDeliveryOptionGroupOne[name], edges...)
	}
}

// NamedDeliveryOptionGroupTwo returns the DeliveryOptionGroupTwo named value or an error if the edge was not
// loaded in eager-loading with this name.
func (htdo *HypothesisTestDeliveryOption) NamedDeliveryOptionGroupTwo(name string) ([]*DeliveryOption, error) {
	if htdo.Edges.namedDeliveryOptionGroupTwo == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := htdo.Edges.namedDeliveryOptionGroupTwo[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (htdo *HypothesisTestDeliveryOption) appendNamedDeliveryOptionGroupTwo(name string, edges ...*DeliveryOption) {
	if htdo.Edges.namedDeliveryOptionGroupTwo == nil {
		htdo.Edges.namedDeliveryOptionGroupTwo = make(map[string][]*DeliveryOption)
	}
	if len(edges) == 0 {
		htdo.Edges.namedDeliveryOptionGroupTwo[name] = []*DeliveryOption{}
	} else {
		htdo.Edges.namedDeliveryOptionGroupTwo[name] = append(htdo.Edges.namedDeliveryOptionGroupTwo[name], edges...)
	}
}

// HypothesisTestDeliveryOptions is a parsable slice of HypothesisTestDeliveryOption.
type HypothesisTestDeliveryOptions []*HypothesisTestDeliveryOption
